{"version":3,"sources":["./node_modules/ng-circle-progress/fesm5/ng-circle-progress.js"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAoF;AACiB;AAC5C;AAC5B;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,0DAAY;AACvC;AACA;AACA;AACA;AACA;AACA,qCAAqC,0DAAY;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA,8BAA8B;AAC9B;AACA;AACA;AACA,8CAA8C;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,oDAAM;AAC3B;AACA;AACA,qBAAqB,oDAAM;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,sDAAQ;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,sDAAQ;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,sDAAQ;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,sDAAQ;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,sDAAQ,8BAA8B,UAAU;AAClF;AACA,2CAA2C,uDAAuD;AAClG;AACA;AACA;AACA,+BAA+B,QAAQ,gBAAgB;AACvD;AACA;AACA;AACA;AACA,6BAA6B,0BAA0B;AACvD;AACA;AACA;AACA;AACA;AACA,kCAAkC,sDAAQ,iCAAiC,UAAU;AACrF;AACA,8CAA8C,uDAAuD;AACrG;AACA;AACA;AACA,+BAA+B,QAAQ,gBAAgB;AACvD;AACA;AACA;AACA;AACA,6BAA6B,0BAA0B;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,kDAAK;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,2CAA2C,kDAAK;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,sDAAQ,6CAA6C,UAAU;AAC7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,QAAQ,gBAAgB;AACnD;AACA;AACA;AACA;AACA,yBAAyB,0BAA0B;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,wDAAwD;AACtG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,+BAA+B,kDAAK;AACpC;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,wDAAU;AACd,QAAQ,4DAAM;AACd,QAAQ,wDAAU,gBAAgB,0DAAY;AAC9C;AACA,IAAI,wDAAU;AACd,QAAQ,2DAAK;AACb,QAAQ,wDAAU;AAClB;AACA,IAAI,wDAAU;AACd,QAAQ,2DAAK;AACb,QAAQ,wDAAU;AAClB;AACA,IAAI,wDAAU;AACd,QAAQ,2DAAK;AACb,QAAQ,wDAAU;AAClB;AACA,IAAI,wDAAU;AACd,QAAQ,2DAAK;AACb,QAAQ,wDAAU;AAClB;AACA,IAAI,wDAAU;AACd,QAAQ,2DAAK;AACb,QAAQ,wDAAU;AAClB;AACA,IAAI,wDAAU;AACd,QAAQ,2DAAK;AACb,QAAQ,wDAAU;AAClB;AACA,IAAI,wDAAU;AACd,QAAQ,2DAAK;AACb,QAAQ,wDAAU;AAClB;AACA,IAAI,wDAAU;AACd,QAAQ,2DAAK;AACb,QAAQ,wDAAU;AAClB;AACA,IAAI,wDAAU;AACd,QAAQ,2DAAK;AACb,QAAQ,wDAAU;AAClB;AACA,IAAI,wDAAU;AACd,QAAQ,2DAAK;AACb,QAAQ,wDAAU;AAClB;AACA,IAAI,wDAAU;AACd,QAAQ,2DAAK;AACb,QAAQ,wDAAU;AAClB;AACA,IAAI,wDAAU;AACd,QAAQ,2DAAK;AACb,QAAQ,wDAAU;AAClB;AACA,IAAI,wDAAU;AACd,QAAQ,2DAAK;AACb,QAAQ,wDAAU;AAClB;AACA,IAAI,wDAAU;AACd,QAAQ,2DAAK;AACb,QAAQ,wDAAU;AAClB;AACA,IAAI,wDAAU;AACd,QAAQ,2DAAK;AACb,QAAQ,wDAAU;AAClB;AACA,IAAI,wDAAU;AACd,QAAQ,2DAAK;AACb,QAAQ,wDAAU;AAClB;AACA,IAAI,wDAAU;AACd,QAAQ,2DAAK;AACb,QAAQ,wDAAU;AAClB;AACA,IAAI,wDAAU;AACd,QAAQ,2DAAK;AACb,QAAQ,wDAAU;AAClB;AACA,IAAI,wDAAU;AACd,QAAQ,2DAAK;AACb,QAAQ,wDAAU;AAClB;AACA,IAAI,wDAAU;AACd,QAAQ,2DAAK;AACb,QAAQ,wDAAU;AAClB;AACA,IAAI,wDAAU;AACd,QAAQ,2DAAK;AACb,QAAQ,wDAAU;AAClB;AACA,IAAI,wDAAU;AACd,QAAQ,2DAAK;AACb,QAAQ,wDAAU;AAClB;AACA,IAAI,wDAAU;AACd,QAAQ,2DAAK;AACb,QAAQ,wDAAU;AAClB;AACA,IAAI,wDAAU;AACd,QAAQ,2DAAK;AACb,QAAQ,wDAAU;AAClB;AACA,IAAI,wDAAU;AACd,QAAQ,2DAAK;AACb,QAAQ,wDAAU;AAClB;AACA,IAAI,wDAAU;AACd,QAAQ,2DAAK;AACb,QAAQ,wDAAU;AAClB;AACA,IAAI,wDAAU;AACd,QAAQ,2DAAK;AACb,QAAQ,wDAAU;AAClB;AACA,IAAI,wDAAU;AACd,QAAQ,2DAAK;AACb,QAAQ,wDAAU;AAClB;AACA,IAAI,wDAAU;AACd,QAAQ,2DAAK;AACb,QAAQ,wDAAU;AAClB;AACA,IAAI,wDAAU;AACd,QAAQ,2DAAK;AACb,QAAQ,wDAAU;AAClB;AACA,IAAI,wDAAU;AACd,QAAQ,2DAAK;AACb,QAAQ,wDAAU;AAClB;AACA,IAAI,wDAAU;AACd,QAAQ,2DAAK;AACb,QAAQ,wDAAU;AAClB;AACA,IAAI,wDAAU;AACd,QAAQ,2DAAK;AACb,QAAQ,wDAAU;AAClB;AACA,IAAI,wDAAU;AACd,QAAQ,2DAAK;AACb,QAAQ,wDAAU;AAClB;AACA,IAAI,wDAAU;AACd,QAAQ,2DAAK;AACb,QAAQ,wDAAU;AAClB;AACA,IAAI,wDAAU;AACd,QAAQ,2DAAK;AACb,QAAQ,wDAAU;AAClB;AACA,IAAI,wDAAU;AACd,QAAQ,2DAAK;AACb,QAAQ,wDAAU;AAClB;AACA,IAAI,wDAAU;AACd,QAAQ,2DAAK;AACb,QAAQ,wDAAU;AAClB;AACA,IAAI,wDAAU;AACd,QAAQ,2DAAK;AACb,QAAQ,wDAAU;AAClB;AACA,IAAI,wDAAU;AACd,QAAQ,2DAAK;AACb,QAAQ,wDAAU;AAClB;AACA,IAAI,wDAAU;AACd,QAAQ,2DAAK;AACb,QAAQ,wDAAU;AAClB;AACA,IAAI,wDAAU;AACd,QAAQ,2DAAK;AACb,QAAQ,wDAAU;AAClB;AACA,IAAI,wDAAU;AACd,QAAQ,2DAAK;AACb,QAAQ,wDAAU;AAClB;AACA,IAAI,wDAAU;AACd,QAAQ,2DAAK;AACb,QAAQ,wDAAU;AAClB;AACA,IAAI,wDAAU;AACd,QAAQ,2DAAK;AACb,QAAQ,wDAAU;AAClB;AACA,IAAI,wDAAU;AACd,QAAQ,2DAAK;AACb,QAAQ,wDAAU;AAClB;AACA,IAAI,wDAAU;AACd,QAAQ,2DAAK;AACb,QAAQ,wDAAU;AAClB;AACA,IAAI,wDAAU;AACd,QAAQ,2DAAK;AACb,QAAQ,wDAAU;AAClB;AACA,IAAI,wDAAU;AACd,QAAQ,2DAAK;AACb,QAAQ,wDAAU;AAClB;AACA,IAAI,wDAAU;AACd,QAAQ,2DAAK;AACb,QAAQ,wDAAU;AAClB;AACA,IAAI,wDAAU;AACd,QAAQ,2DAAK;AACb,QAAQ,wDAAU;AAClB;AACA,IAAI,wDAAU;AACd,QAAQ,2DAAK;AACb,QAAQ,wDAAU;AAClB;AACA,IAAI,wDAAU;AACd,QAAQ,2DAAK;AACb,QAAQ,wDAAU;AAClB;AACA,IAAI,wDAAU;AACd,QAAQ,2DAAK;AACb,QAAQ,wDAAU;AAClB;AACA,IAAI,wDAAU;AACd,QAAQ,2DAAK;AACb,QAAQ,wDAAU;AAClB;AACA,8BAA8B,wDAAU;AACxC,QAAQ,+DAAS;AACjB;AACA,6/DAA6/D,uBAAuB,+vCAA+vC,4BAA4B,qhCAAqhC,YAAY,4RAA4R,gBAAgB,sgBAAsgB,YAAY;AAC9oK,SAAS;AACT,QAAQ,qDAAO,IAAI,4DAAM,CAAC,wDAAQ;AAClC,QAAQ,wDAAU,8CAA8C,wDAAU;AAC1E;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,iCAAiC,cAAc;AAC/C;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,wDAAwD,wDAAU;AAClE,QAAQ,8DAAQ;AAChB;AACA,gBAAgB,4DAAY;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,CAAC;;AAED;AACA;AACA;;AAEkF;AAClF","file":"default~dashboard-dashboard-module~new-dashboard-new-dashboard-module-es5.js","sourcesContent":["import { __read, __spread, __values, __decorate, __metadata, __param } from 'tslib';\nimport { EventEmitter, Output, Input, Component, Inject, ElementRef, NgModule } from '@angular/core';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { timer } from 'rxjs';\n\nvar CircleProgressOptions = /** @class */ (function () {\r\n    function CircleProgressOptions() {\r\n        this.class = '';\r\n        this.backgroundGradient = false;\r\n        this.backgroundColor = 'transparent';\r\n        this.backgroundGradientStopColor = 'transparent';\r\n        this.backgroundOpacity = 1;\r\n        this.backgroundStroke = 'transparent';\r\n        this.backgroundStrokeWidth = 0;\r\n        this.backgroundPadding = 5;\r\n        this.percent = 0;\r\n        this.radius = 90;\r\n        this.space = 4;\r\n        this.toFixed = 0;\r\n        this.maxPercent = 1000;\r\n        this.renderOnClick = true;\r\n        this.units = '%';\r\n        this.unitsFontSize = '10';\r\n        this.unitsFontWeight = 'normal';\r\n        this.unitsColor = '#444444';\r\n        this.outerStrokeGradient = false;\r\n        this.outerStrokeWidth = 8;\r\n        this.outerStrokeColor = '#78C000';\r\n        this.outerStrokeGradientStopColor = 'transparent';\r\n        this.outerStrokeLinecap = 'round';\r\n        this.innerStrokeColor = '#C7E596';\r\n        this.innerStrokeWidth = 4;\r\n        this.titleFormat = undefined;\r\n        this.title = 'auto';\r\n        this.titleColor = '#444444';\r\n        this.titleFontSize = '20';\r\n        this.titleFontWeight = 'normal';\r\n        this.subtitleFormat = undefined;\r\n        this.subtitle = 'progress';\r\n        this.subtitleColor = '#A9A9A9';\r\n        this.subtitleFontSize = '10';\r\n        this.subtitleFontWeight = 'normal';\r\n        this.imageSrc = undefined;\r\n        this.imageHeight = undefined;\r\n        this.imageWidth = undefined;\r\n        this.animation = true;\r\n        this.animateTitle = true;\r\n        this.animateSubtitle = false;\r\n        this.animationDuration = 500;\r\n        this.showTitle = true;\r\n        this.showSubtitle = true;\r\n        this.showUnits = true;\r\n        this.showImage = false;\r\n        this.showBackground = true;\r\n        this.showInnerStroke = true;\r\n        this.clockwise = true;\r\n        this.responsive = false;\r\n        this.startFromZero = true;\r\n        this.showZeroOuterStroke = true;\r\n        this.lazy = false;\r\n    }\r\n    return CircleProgressOptions;\r\n}());\r\n/** @dynamic Prevent compiling error when using type `Document` https://github.com/angular/angular/issues/20351 */\r\nvar CircleProgressComponent = /** @class */ (function () {\r\n    function CircleProgressComponent(defaultOptions, elRef, document) {\r\n        var _this = this;\r\n        this.elRef = elRef;\r\n        this.document = document;\r\n        this.onClick = new EventEmitter();\r\n        // <svg> of component\r\n        this.svgElement = null;\r\n        // whether <svg> is in viewport\r\n        this.isInViewport = false;\r\n        // event for notifying viewport change caused by scrolling or resizing\r\n        this.onViewportChanged = new EventEmitter;\r\n        this._viewportChangedSubscriber = null;\r\n        this.options = new CircleProgressOptions();\r\n        this.defaultOptions = new CircleProgressOptions();\r\n        this._lastPercent = 0;\r\n        this._gradientUUID = null;\r\n        this.render = function () {\r\n            _this.applyOptions();\r\n            if (_this.options.lazy) {\r\n                // Draw svg if it doesn't exist\r\n                _this.svgElement === null && _this.draw(_this._lastPercent);\r\n                // Draw it only when it's in the viewport\r\n                if (_this.isInViewport) {\r\n                    // Draw it at the latest position when I am in.\r\n                    if (_this.options.animation && _this.options.animationDuration > 0) {\r\n                        _this.animate(_this._lastPercent, _this.options.percent);\r\n                    }\r\n                    else {\r\n                        _this.draw(_this.options.percent);\r\n                    }\r\n                    _this._lastPercent = _this.options.percent;\r\n                }\r\n            }\r\n            else {\r\n                if (_this.options.animation && _this.options.animationDuration > 0) {\r\n                    _this.animate(_this._lastPercent, _this.options.percent);\r\n                }\r\n                else {\r\n                    _this.draw(_this.options.percent);\r\n                }\r\n                _this._lastPercent = _this.options.percent;\r\n            }\r\n        };\r\n        this.polarToCartesian = function (centerX, centerY, radius, angleInDegrees) {\r\n            var angleInRadius = angleInDegrees * Math.PI / 180;\r\n            var x = centerX + Math.sin(angleInRadius) * radius;\r\n            var y = centerY - Math.cos(angleInRadius) * radius;\r\n            return { x: x, y: y };\r\n        };\r\n        this.draw = function (percent) {\r\n            var _a, _b, e_1, _c, e_2, _d;\r\n            // make percent reasonable\r\n            percent = (percent === undefined) ? _this.options.percent : Math.abs(percent);\r\n            // circle percent shouldn't be greater than 100%.\r\n            var circlePercent = (percent > 100) ? 100 : percent;\r\n            // determine box size\r\n            var boxSize = _this.options.radius * 2 + _this.options.outerStrokeWidth * 2;\r\n            if (_this.options.showBackground) {\r\n                boxSize += (_this.options.backgroundStrokeWidth * 2 + _this.max(0, _this.options.backgroundPadding * 2));\r\n            }\r\n            // the centre of the circle\r\n            var centre = { x: boxSize / 2, y: boxSize / 2 };\r\n            // the start point of the arc\r\n            var startPoint = { x: centre.x, y: centre.y - _this.options.radius };\r\n            // get the end point of the arc\r\n            var endPoint = _this.polarToCartesian(centre.x, centre.y, _this.options.radius, 360 * (_this.options.clockwise ?\r\n                circlePercent :\r\n                (100 - circlePercent)) / 100); // ####################\r\n            // We'll get an end point with the same [x, y] as the start point when percent is 100%, so move x a little bit.\r\n            if (circlePercent === 100) {\r\n                endPoint.x = endPoint.x + (_this.options.clockwise ? -0.01 : +0.01);\r\n            }\r\n            // largeArcFlag and sweepFlag\r\n            var largeArcFlag, sweepFlag;\r\n            if (circlePercent > 50) {\r\n                _a = __read(_this.options.clockwise ? [1, 1] : [1, 0], 2), largeArcFlag = _a[0], sweepFlag = _a[1];\r\n            }\r\n            else {\r\n                _b = __read(_this.options.clockwise ? [0, 1] : [0, 0], 2), largeArcFlag = _b[0], sweepFlag = _b[1];\r\n            }\r\n            // percent may not equal the actual percent\r\n            var titlePercent = _this.options.animateTitle ? percent : _this.options.percent;\r\n            var titleTextPercent = titlePercent > _this.options.maxPercent ?\r\n                _this.options.maxPercent.toFixed(_this.options.toFixed) + \"+\" : titlePercent.toFixed(_this.options.toFixed);\r\n            var subtitlePercent = _this.options.animateSubtitle ? percent : _this.options.percent;\r\n            // get title object\r\n            var title = {\r\n                x: centre.x,\r\n                y: centre.y,\r\n                textAnchor: 'middle',\r\n                color: _this.options.titleColor,\r\n                fontSize: _this.options.titleFontSize,\r\n                fontWeight: _this.options.titleFontWeight,\r\n                texts: [],\r\n                tspans: []\r\n            };\r\n            // from v0.9.9, both title and titleFormat(...) may be an array of string.\r\n            if (_this.options.titleFormat !== undefined && _this.options.titleFormat.constructor.name === 'Function') {\r\n                var formatted = _this.options.titleFormat(titlePercent);\r\n                if (formatted instanceof Array) {\r\n                    title.texts = __spread(formatted);\r\n                }\r\n                else {\r\n                    title.texts.push(formatted.toString());\r\n                }\r\n            }\r\n            else {\r\n                if (_this.options.title === 'auto') {\r\n                    title.texts.push(titleTextPercent);\r\n                }\r\n                else {\r\n                    if (_this.options.title instanceof Array) {\r\n                        title.texts = __spread(_this.options.title);\r\n                    }\r\n                    else {\r\n                        title.texts.push(_this.options.title.toString());\r\n                    }\r\n                }\r\n            }\r\n            // get subtitle object\r\n            var subtitle = {\r\n                x: centre.x,\r\n                y: centre.y,\r\n                textAnchor: 'middle',\r\n                color: _this.options.subtitleColor,\r\n                fontSize: _this.options.subtitleFontSize,\r\n                fontWeight: _this.options.subtitleFontWeight,\r\n                texts: [],\r\n                tspans: []\r\n            };\r\n            // from v0.9.9, both subtitle and subtitleFormat(...) may be an array of string.\r\n            if (_this.options.subtitleFormat !== undefined && _this.options.subtitleFormat.constructor.name === 'Function') {\r\n                var formatted = _this.options.subtitleFormat(subtitlePercent);\r\n                if (formatted instanceof Array) {\r\n                    subtitle.texts = __spread(formatted);\r\n                }\r\n                else {\r\n                    subtitle.texts.push(formatted.toString());\r\n                }\r\n            }\r\n            else {\r\n                if (_this.options.subtitle instanceof Array) {\r\n                    subtitle.texts = __spread(_this.options.subtitle);\r\n                }\r\n                else {\r\n                    subtitle.texts.push(_this.options.subtitle.toString());\r\n                }\r\n            }\r\n            // get units object\r\n            var units = {\r\n                text: \"\" + _this.options.units,\r\n                fontSize: _this.options.unitsFontSize,\r\n                fontWeight: _this.options.unitsFontWeight,\r\n                color: _this.options.unitsColor\r\n            };\r\n            // get total count of text lines to be shown\r\n            var rowCount = 0, rowNum = 1;\r\n            _this.options.showTitle && (rowCount += title.texts.length);\r\n            _this.options.showSubtitle && (rowCount += subtitle.texts.length);\r\n            // calc dy for each tspan for title\r\n            if (_this.options.showTitle) {\r\n                try {\r\n                    for (var _e = __values(title.texts), _f = _e.next(); !_f.done; _f = _e.next()) {\r\n                        var span = _f.value;\r\n                        title.tspans.push({ span: span, dy: _this.getRelativeY(rowNum, rowCount) });\r\n                        rowNum++;\r\n                    }\r\n                }\r\n                catch (e_1_1) { e_1 = { error: e_1_1 }; }\r\n                finally {\r\n                    try {\r\n                        if (_f && !_f.done && (_c = _e.return)) _c.call(_e);\r\n                    }\r\n                    finally { if (e_1) throw e_1.error; }\r\n                }\r\n            }\r\n            // calc dy for each tspan for subtitle\r\n            if (_this.options.showSubtitle) {\r\n                try {\r\n                    for (var _g = __values(subtitle.texts), _h = _g.next(); !_h.done; _h = _g.next()) {\r\n                        var span = _h.value;\r\n                        subtitle.tspans.push({ span: span, dy: _this.getRelativeY(rowNum, rowCount) });\r\n                        rowNum++;\r\n                    }\r\n                }\r\n                catch (e_2_1) { e_2 = { error: e_2_1 }; }\r\n                finally {\r\n                    try {\r\n                        if (_h && !_h.done && (_d = _g.return)) _d.call(_g);\r\n                    }\r\n                    finally { if (e_2) throw e_2.error; }\r\n                }\r\n            }\r\n            // create ID for gradient element\r\n            if (null === _this._gradientUUID) {\r\n                _this._gradientUUID = _this.uuid();\r\n            }\r\n            // Bring it all together\r\n            _this.svg = {\r\n                viewBox: \"0 0 \" + boxSize + \" \" + boxSize,\r\n                // Set both width and height to '100%' if it's responsive\r\n                width: _this.options.responsive ? '100%' : boxSize,\r\n                height: _this.options.responsive ? '100%' : boxSize,\r\n                backgroundCircle: {\r\n                    cx: centre.x,\r\n                    cy: centre.y,\r\n                    r: _this.options.radius + _this.options.outerStrokeWidth / 2 + _this.options.backgroundPadding,\r\n                    fill: _this.options.backgroundColor,\r\n                    fillOpacity: _this.options.backgroundOpacity,\r\n                    stroke: _this.options.backgroundStroke,\r\n                    strokeWidth: _this.options.backgroundStrokeWidth,\r\n                },\r\n                path: {\r\n                    // A rx ry x-axis-rotation large-arc-flag sweep-flag x y (https://developer.mozilla.org/en/docs/Web/SVG/Tutorial/Paths#Arcs)\r\n                    d: \"M \" + startPoint.x + \" \" + startPoint.y + \"\\n        A \" + _this.options.radius + \" \" + _this.options.radius + \" 0 \" + largeArcFlag + \" \" + sweepFlag + \" \" + endPoint.x + \" \" + endPoint.y,\r\n                    stroke: _this.options.outerStrokeColor,\r\n                    strokeWidth: _this.options.outerStrokeWidth,\r\n                    strokeLinecap: _this.options.outerStrokeLinecap,\r\n                    fill: 'none'\r\n                },\r\n                circle: {\r\n                    cx: centre.x,\r\n                    cy: centre.y,\r\n                    r: _this.options.radius - _this.options.space - _this.options.outerStrokeWidth / 2 - _this.options.innerStrokeWidth / 2,\r\n                    fill: 'none',\r\n                    stroke: _this.options.innerStrokeColor,\r\n                    strokeWidth: _this.options.innerStrokeWidth,\r\n                },\r\n                title: title,\r\n                units: units,\r\n                subtitle: subtitle,\r\n                image: {\r\n                    x: centre.x - _this.options.imageWidth / 2,\r\n                    y: centre.y - _this.options.imageHeight / 2,\r\n                    src: _this.options.imageSrc,\r\n                    width: _this.options.imageWidth,\r\n                    height: _this.options.imageHeight,\r\n                },\r\n                outerLinearGradient: {\r\n                    id: 'outer-linear-' + _this._gradientUUID,\r\n                    colorStop1: _this.options.outerStrokeColor,\r\n                    colorStop2: _this.options.outerStrokeGradientStopColor === 'transparent' ? '#FFF' : _this.options.outerStrokeGradientStopColor,\r\n                },\r\n                radialGradient: {\r\n                    id: 'radial-' + _this._gradientUUID,\r\n                    colorStop1: _this.options.backgroundColor,\r\n                    colorStop2: _this.options.backgroundGradientStopColor === 'transparent' ? '#FFF' : _this.options.backgroundGradientStopColor,\r\n                }\r\n            };\r\n        };\r\n        this.getAnimationParameters = function (previousPercent, currentPercent) {\r\n            var MIN_INTERVAL = 10;\r\n            var times, step, interval;\r\n            var fromPercent = _this.options.startFromZero ? 0 : (previousPercent < 0 ? 0 : previousPercent);\r\n            var toPercent = currentPercent < 0 ? 0 : _this.min(currentPercent, _this.options.maxPercent);\r\n            var delta = Math.abs(Math.round(toPercent - fromPercent));\r\n            if (delta >= 100) {\r\n                // we will finish animation in 100 times\r\n                times = 100;\r\n                if (!_this.options.animateTitle && !_this.options.animateSubtitle) {\r\n                    step = 1;\r\n                }\r\n                else {\r\n                    // show title or subtitle animation even if the arc is full, we also need to finish it in 100 times.\r\n                    step = Math.round(delta / times);\r\n                }\r\n            }\r\n            else {\r\n                // we will finish in as many times as the number of percent.\r\n                times = delta;\r\n                step = 1;\r\n            }\r\n            // Get the interval of timer\r\n            interval = Math.round(_this.options.animationDuration / times);\r\n            // Readjust all values if the interval of timer is extremely small.\r\n            if (interval < MIN_INTERVAL) {\r\n                interval = MIN_INTERVAL;\r\n                times = _this.options.animationDuration / interval;\r\n                if (!_this.options.animateTitle && !_this.options.animateSubtitle && delta > 100) {\r\n                    step = Math.round(100 / times);\r\n                }\r\n                else {\r\n                    step = Math.round(delta / times);\r\n                }\r\n            }\r\n            // step must be greater than 0.\r\n            if (step < 1) {\r\n                step = 1;\r\n            }\r\n            return { times: times, step: step, interval: interval };\r\n        };\r\n        this.animate = function (previousPercent, currentPercent) {\r\n            if (_this._timerSubscription && !_this._timerSubscription.closed) {\r\n                _this._timerSubscription.unsubscribe();\r\n            }\r\n            var fromPercent = _this.options.startFromZero ? 0 : previousPercent;\r\n            var toPercent = currentPercent;\r\n            var _a = _this.getAnimationParameters(fromPercent, toPercent), step = _a.step, interval = _a.interval;\r\n            var count = fromPercent;\r\n            if (fromPercent < toPercent) {\r\n                _this._timerSubscription = timer(0, interval).subscribe(function () {\r\n                    count += step;\r\n                    if (count <= toPercent) {\r\n                        if (!_this.options.animateTitle && !_this.options.animateSubtitle && count >= 100) {\r\n                            _this.draw(toPercent);\r\n                            _this._timerSubscription.unsubscribe();\r\n                        }\r\n                        else {\r\n                            _this.draw(count);\r\n                        }\r\n                    }\r\n                    else {\r\n                        _this.draw(toPercent);\r\n                        _this._timerSubscription.unsubscribe();\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                _this._timerSubscription = timer(0, interval).subscribe(function () {\r\n                    count -= step;\r\n                    if (count >= toPercent) {\r\n                        if (!_this.options.animateTitle && !_this.options.animateSubtitle && toPercent >= 100) {\r\n                            _this.draw(toPercent);\r\n                            _this._timerSubscription.unsubscribe();\r\n                        }\r\n                        else {\r\n                            _this.draw(count);\r\n                        }\r\n                    }\r\n                    else {\r\n                        _this.draw(toPercent);\r\n                        _this._timerSubscription.unsubscribe();\r\n                    }\r\n                });\r\n            }\r\n        };\r\n        this.emitClickEvent = function (event) {\r\n            if (_this.options.renderOnClick) {\r\n                _this.animate(0, _this.options.percent);\r\n            }\r\n            _this.onClick.emit(event);\r\n        };\r\n        this.applyOptions = function () {\r\n            var e_3, _a;\r\n            try {\r\n                // the options of <circle-progress> may change already\r\n                for (var _b = __values(Object.keys(_this.options)), _c = _b.next(); !_c.done; _c = _b.next()) {\r\n                    var name_1 = _c.value;\r\n                    if (_this.hasOwnProperty(name_1) && _this[name_1] !== undefined) {\r\n                        _this.options[name_1] = _this[name_1];\r\n                    }\r\n                    else if (_this.templateOptions && _this.templateOptions[name_1] !== undefined) {\r\n                        _this.options[name_1] = _this.templateOptions[name_1];\r\n                    }\r\n                }\r\n            }\r\n            catch (e_3_1) { e_3 = { error: e_3_1 }; }\r\n            finally {\r\n                try {\r\n                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\r\n                }\r\n                finally { if (e_3) throw e_3.error; }\r\n            }\r\n            // make sure key options valid\r\n            _this.options.radius = Math.abs(+_this.options.radius);\r\n            _this.options.space = +_this.options.space;\r\n            _this.options.percent = +_this.options.percent > 0 ? +_this.options.percent : 0;\r\n            _this.options.maxPercent = Math.abs(+_this.options.maxPercent);\r\n            _this.options.animationDuration = Math.abs(_this.options.animationDuration);\r\n            _this.options.outerStrokeWidth = Math.abs(+_this.options.outerStrokeWidth);\r\n            _this.options.innerStrokeWidth = Math.abs(+_this.options.innerStrokeWidth);\r\n            _this.options.backgroundPadding = +_this.options.backgroundPadding;\r\n        };\r\n        this.getRelativeY = function (rowNum, rowCount) {\r\n            // why '-0.18em'? It's a magic number when property 'alignment-baseline' equals 'baseline'. :)\r\n            var initialOffset = -0.18, offset = 1;\r\n            return (initialOffset + offset * (rowNum - rowCount / 2)).toFixed(2) + 'em';\r\n        };\r\n        this.min = function (a, b) {\r\n            return a < b ? a : b;\r\n        };\r\n        this.max = function (a, b) {\r\n            return a > b ? a : b;\r\n        };\r\n        this.uuid = function () {\r\n            // https://www.w3resource.com/javascript-exercises/javascript-math-exercise-23.php\r\n            var dt = new Date().getTime();\r\n            var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n                var r = (dt + Math.random() * 16) % 16 | 0;\r\n                dt = Math.floor(dt / 16);\r\n                return (c == 'x' ? r : (r & 0x3 | 0x8)).toString(16);\r\n            });\r\n            return uuid;\r\n        };\r\n        this.findSvgElement = function () {\r\n            if (this.svgElement === null) {\r\n                var tags = this.elRef.nativeElement.getElementsByTagName('svg');\r\n                if (tags.length > 0) {\r\n                    this.svgElement = tags[0];\r\n                }\r\n            }\r\n        };\r\n        this.checkViewport = function () {\r\n            _this.findSvgElement();\r\n            var previousValue = _this.isInViewport;\r\n            _this.isInViewport = _this.isElementInViewport(_this.svgElement);\r\n            if (previousValue !== _this.isInViewport) {\r\n                _this.onViewportChanged.emit({ oldValue: previousValue, newValue: _this.isInViewport });\r\n            }\r\n        };\r\n        this.onScroll = function (event) {\r\n            _this.checkViewport();\r\n        };\r\n        this.loadEventsForLazyMode = function () {\r\n            if (_this.options.lazy) {\r\n                _this.document.addEventListener('scroll', _this.onScroll, true);\r\n                _this.window.addEventListener('resize', _this.onScroll, true);\r\n                if (_this._viewportChangedSubscriber === null) {\r\n                    _this._viewportChangedSubscriber = _this.onViewportChanged.subscribe(function (_a) {\r\n                        var oldValue = _a.oldValue, newValue = _a.newValue;\r\n                        newValue ? _this.render() : null;\r\n                    });\r\n                }\r\n                // svgElement must be created in DOM before being checked.\r\n                // Is there a better way to check the existence of svgElemnt?\r\n                var _timer_1 = timer(0, 50).subscribe(function () {\r\n                    _this.svgElement === null ? _this.checkViewport() : _timer_1.unsubscribe();\r\n                });\r\n            }\r\n        };\r\n        this.unloadEventsForLazyMode = function () {\r\n            // Remove event listeners\r\n            _this.document.removeEventListener('scroll', _this.onScroll, true);\r\n            _this.window.removeEventListener('resize', _this.onScroll, true);\r\n            // Unsubscribe onViewportChanged\r\n            if (_this._viewportChangedSubscriber !== null) {\r\n                _this._viewportChangedSubscriber.unsubscribe();\r\n                _this._viewportChangedSubscriber = null;\r\n            }\r\n        };\r\n        this.document = document;\r\n        this.window = this.document.defaultView;\r\n        Object.assign(this.options, defaultOptions);\r\n        Object.assign(this.defaultOptions, defaultOptions);\r\n    }\r\n    CircleProgressComponent.prototype.isDrawing = function () {\r\n        return (this._timerSubscription && !this._timerSubscription.closed);\r\n    };\r\n    CircleProgressComponent.prototype.isElementInViewport = function (el) {\r\n        // Return false if el has not been created in page.\r\n        if (el === null || el === undefined)\r\n            return false;\r\n        // Check if the element is out of view due to a container scrolling\r\n        var rect = el.getBoundingClientRect(), parent = el.parentNode, parentRect;\r\n        do {\r\n            parentRect = parent.getBoundingClientRect();\r\n            if (rect.top >= parentRect.bottom)\r\n                return false;\r\n            if (rect.bottom <= parentRect.top)\r\n                return false;\r\n            if (rect.left >= parentRect.right)\r\n                return false;\r\n            if (rect.right <= parentRect.left)\r\n                return false;\r\n            parent = parent.parentNode;\r\n        } while (parent != this.document.body);\r\n        // Check its within the document viewport\r\n        if (rect.top >= (this.window.innerHeight || this.document.documentElement.clientHeight))\r\n            return false;\r\n        if (rect.bottom <= 0)\r\n            return false;\r\n        if (rect.left >= (this.window.innerWidth || this.document.documentElement.clientWidth))\r\n            return false;\r\n        if (rect.right <= 0)\r\n            return false;\r\n        return true;\r\n    };\r\n    CircleProgressComponent.prototype.ngOnInit = function () {\r\n        this.loadEventsForLazyMode();\r\n    };\r\n    CircleProgressComponent.prototype.ngOnDestroy = function () {\r\n        this.unloadEventsForLazyMode();\r\n    };\r\n    CircleProgressComponent.prototype.ngOnChanges = function (changes) {\r\n        this.render();\r\n        if ('lazy' in changes) {\r\n            changes.lazy.currentValue ? this.loadEventsForLazyMode() : this.unloadEventsForLazyMode();\r\n        }\r\n    };\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], CircleProgressComponent.prototype, \"onClick\", void 0);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String)\r\n    ], CircleProgressComponent.prototype, \"name\", void 0);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String)\r\n    ], CircleProgressComponent.prototype, \"class\", void 0);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean)\r\n    ], CircleProgressComponent.prototype, \"backgroundGradient\", void 0);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String)\r\n    ], CircleProgressComponent.prototype, \"backgroundColor\", void 0);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String)\r\n    ], CircleProgressComponent.prototype, \"backgroundGradientStopColor\", void 0);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Number)\r\n    ], CircleProgressComponent.prototype, \"backgroundOpacity\", void 0);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String)\r\n    ], CircleProgressComponent.prototype, \"backgroundStroke\", void 0);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Number)\r\n    ], CircleProgressComponent.prototype, \"backgroundStrokeWidth\", void 0);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Number)\r\n    ], CircleProgressComponent.prototype, \"backgroundPadding\", void 0);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Number)\r\n    ], CircleProgressComponent.prototype, \"radius\", void 0);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Number)\r\n    ], CircleProgressComponent.prototype, \"space\", void 0);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Number)\r\n    ], CircleProgressComponent.prototype, \"percent\", void 0);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Number)\r\n    ], CircleProgressComponent.prototype, \"toFixed\", void 0);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Number)\r\n    ], CircleProgressComponent.prototype, \"maxPercent\", void 0);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean)\r\n    ], CircleProgressComponent.prototype, \"renderOnClick\", void 0);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String)\r\n    ], CircleProgressComponent.prototype, \"units\", void 0);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String)\r\n    ], CircleProgressComponent.prototype, \"unitsFontSize\", void 0);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String)\r\n    ], CircleProgressComponent.prototype, \"unitsFontWeight\", void 0);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String)\r\n    ], CircleProgressComponent.prototype, \"unitsColor\", void 0);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean)\r\n    ], CircleProgressComponent.prototype, \"outerStrokeGradient\", void 0);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Number)\r\n    ], CircleProgressComponent.prototype, \"outerStrokeWidth\", void 0);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String)\r\n    ], CircleProgressComponent.prototype, \"outerStrokeColor\", void 0);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String)\r\n    ], CircleProgressComponent.prototype, \"outerStrokeGradientStopColor\", void 0);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String)\r\n    ], CircleProgressComponent.prototype, \"outerStrokeLinecap\", void 0);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String)\r\n    ], CircleProgressComponent.prototype, \"innerStrokeColor\", void 0);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object)\r\n    ], CircleProgressComponent.prototype, \"innerStrokeWidth\", void 0);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Function)\r\n    ], CircleProgressComponent.prototype, \"titleFormat\", void 0);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object)\r\n    ], CircleProgressComponent.prototype, \"title\", void 0);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String)\r\n    ], CircleProgressComponent.prototype, \"titleColor\", void 0);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String)\r\n    ], CircleProgressComponent.prototype, \"titleFontSize\", void 0);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String)\r\n    ], CircleProgressComponent.prototype, \"titleFontWeight\", void 0);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Function)\r\n    ], CircleProgressComponent.prototype, \"subtitleFormat\", void 0);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object)\r\n    ], CircleProgressComponent.prototype, \"subtitle\", void 0);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String)\r\n    ], CircleProgressComponent.prototype, \"subtitleColor\", void 0);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String)\r\n    ], CircleProgressComponent.prototype, \"subtitleFontSize\", void 0);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String)\r\n    ], CircleProgressComponent.prototype, \"subtitleFontWeight\", void 0);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String)\r\n    ], CircleProgressComponent.prototype, \"imageSrc\", void 0);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Number)\r\n    ], CircleProgressComponent.prototype, \"imageHeight\", void 0);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Number)\r\n    ], CircleProgressComponent.prototype, \"imageWidth\", void 0);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean)\r\n    ], CircleProgressComponent.prototype, \"animation\", void 0);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean)\r\n    ], CircleProgressComponent.prototype, \"animateTitle\", void 0);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean)\r\n    ], CircleProgressComponent.prototype, \"animateSubtitle\", void 0);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Number)\r\n    ], CircleProgressComponent.prototype, \"animationDuration\", void 0);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean)\r\n    ], CircleProgressComponent.prototype, \"showTitle\", void 0);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean)\r\n    ], CircleProgressComponent.prototype, \"showSubtitle\", void 0);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean)\r\n    ], CircleProgressComponent.prototype, \"showUnits\", void 0);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean)\r\n    ], CircleProgressComponent.prototype, \"showImage\", void 0);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean)\r\n    ], CircleProgressComponent.prototype, \"showBackground\", void 0);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean)\r\n    ], CircleProgressComponent.prototype, \"showInnerStroke\", void 0);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean)\r\n    ], CircleProgressComponent.prototype, \"clockwise\", void 0);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean)\r\n    ], CircleProgressComponent.prototype, \"responsive\", void 0);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean)\r\n    ], CircleProgressComponent.prototype, \"startFromZero\", void 0);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean)\r\n    ], CircleProgressComponent.prototype, \"showZeroOuterStroke\", void 0);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean)\r\n    ], CircleProgressComponent.prototype, \"lazy\", void 0);\r\n    __decorate([\r\n        Input('options'),\r\n        __metadata(\"design:type\", CircleProgressOptions)\r\n    ], CircleProgressComponent.prototype, \"templateOptions\", void 0);\r\n    CircleProgressComponent = __decorate([\r\n        Component({\r\n            selector: 'circle-progress',\r\n            template: \"\\n        <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" *ngIf=\\\"svg\\\"\\n             [attr.viewBox]=\\\"svg.viewBox\\\" preserveAspectRatio=\\\"xMidYMid meet\\\"\\n             [attr.height]=\\\"svg.height\\\" [attr.width]=\\\"svg.width\\\" (click)=\\\"emitClickEvent($event)\\\" [attr.class]=\\\"options.class\\\">\\n            <defs>\\n                <linearGradient *ngIf=\\\"options.outerStrokeGradient\\\" [attr.id]=\\\"svg.outerLinearGradient.id\\\">\\n                    <stop offset=\\\"5%\\\" [attr.stop-color]=\\\"svg.outerLinearGradient.colorStop1\\\"  [attr.stop-opacity]=\\\"1\\\"/>\\n                    <stop offset=\\\"95%\\\" [attr.stop-color]=\\\"svg.outerLinearGradient.colorStop2\\\" [attr.stop-opacity]=\\\"1\\\"/>\\n                </linearGradient>\\n                <radialGradient *ngIf=\\\"options.backgroundGradient\\\" [attr.id]=\\\"svg.radialGradient.id\\\">\\n                    <stop offset=\\\"5%\\\" [attr.stop-color]=\\\"svg.radialGradient.colorStop1\\\" [attr.stop-opacity]=\\\"1\\\"/>\\n                    <stop offset=\\\"95%\\\" [attr.stop-color]=\\\"svg.radialGradient.colorStop2\\\" [attr.stop-opacity]=\\\"1\\\"/>\\n                </radialGradient>\\n            </defs>\\n            <ng-container *ngIf=\\\"options.showBackground\\\">\\n                <circle *ngIf=\\\"!options.backgroundGradient\\\"\\n                        [attr.cx]=\\\"svg.backgroundCircle.cx\\\"\\n                        [attr.cy]=\\\"svg.backgroundCircle.cy\\\"\\n                        [attr.r]=\\\"svg.backgroundCircle.r\\\"\\n                        [attr.fill]=\\\"svg.backgroundCircle.fill\\\"\\n                        [attr.fill-opacity]=\\\"svg.backgroundCircle.fillOpacity\\\"\\n                        [attr.stroke]=\\\"svg.backgroundCircle.stroke\\\"\\n                        [attr.stroke-width]=\\\"svg.backgroundCircle.strokeWidth\\\"/>\\n                <circle *ngIf=\\\"options.backgroundGradient\\\"\\n                        [attr.cx]=\\\"svg.backgroundCircle.cx\\\"\\n                        [attr.cy]=\\\"svg.backgroundCircle.cy\\\"\\n                        [attr.r]=\\\"svg.backgroundCircle.r\\\"\\n                        attr.fill=\\\"url(#{{svg.radialGradient.id}})\\\"\\n                        [attr.fill-opacity]=\\\"svg.backgroundCircle.fillOpacity\\\"\\n                        [attr.stroke]=\\\"svg.backgroundCircle.stroke\\\"\\n                        [attr.stroke-width]=\\\"svg.backgroundCircle.strokeWidth\\\"/>\\n            </ng-container>            \\n            <circle *ngIf=\\\"options.showInnerStroke\\\"\\n                    [attr.cx]=\\\"svg.circle.cx\\\"\\n                    [attr.cy]=\\\"svg.circle.cy\\\"\\n                    [attr.r]=\\\"svg.circle.r\\\"\\n                    [attr.fill]=\\\"svg.circle.fill\\\"\\n                    [attr.stroke]=\\\"svg.circle.stroke\\\"\\n                    [attr.stroke-width]=\\\"svg.circle.strokeWidth\\\"/>\\n            <ng-container *ngIf=\\\"+options.percent!==0 || options.showZeroOuterStroke\\\">\\n                <path *ngIf=\\\"!options.outerStrokeGradient\\\"\\n                        [attr.d]=\\\"svg.path.d\\\"\\n                        [attr.stroke]=\\\"svg.path.stroke\\\"\\n                        [attr.stroke-width]=\\\"svg.path.strokeWidth\\\"\\n                        [attr.stroke-linecap]=\\\"svg.path.strokeLinecap\\\"\\n                        [attr.fill]=\\\"svg.path.fill\\\"/>\\n                <path *ngIf=\\\"options.outerStrokeGradient\\\"\\n                        [attr.d]=\\\"svg.path.d\\\"\\n                        attr.stroke=\\\"url(#{{svg.outerLinearGradient.id}})\\\"\\n                        [attr.stroke-width]=\\\"svg.path.strokeWidth\\\"\\n                        [attr.stroke-linecap]=\\\"svg.path.strokeLinecap\\\"\\n                        [attr.fill]=\\\"svg.path.fill\\\"/>\\n            </ng-container>\\n            <text *ngIf=\\\"!options.showImage && (options.showTitle || options.showUnits || options.showSubtitle)\\\"\\n                  alignment-baseline=\\\"baseline\\\"\\n                  [attr.x]=\\\"svg.circle.cx\\\"\\n                  [attr.y]=\\\"svg.circle.cy\\\"\\n                  [attr.text-anchor]=\\\"svg.title.textAnchor\\\">\\n                <ng-container *ngIf=\\\"options.showTitle\\\">\\n                    <tspan *ngFor=\\\"let tspan of svg.title.tspans\\\"\\n                           [attr.x]=\\\"svg.title.x\\\"\\n                           [attr.y]=\\\"svg.title.y\\\"\\n                           [attr.dy]=\\\"tspan.dy\\\"\\n                           [attr.font-size]=\\\"svg.title.fontSize\\\"\\n                           [attr.font-weight]=\\\"svg.title.fontWeight\\\"\\n                           [attr.fill]=\\\"svg.title.color\\\">{{tspan.span}}</tspan>\\n                </ng-container>\\n                <tspan *ngIf=\\\"options.showUnits\\\"\\n                       [attr.font-size]=\\\"svg.units.fontSize\\\"\\n                       [attr.font-weight]=\\\"svg.units.fontWeight\\\"\\n                       [attr.fill]=\\\"svg.units.color\\\">{{svg.units.text}}</tspan>\\n                <ng-container *ngIf=\\\"options.showSubtitle\\\">\\n                    <tspan *ngFor=\\\"let tspan of svg.subtitle.tspans\\\"\\n                           [attr.x]=\\\"svg.subtitle.x\\\"\\n                           [attr.y]=\\\"svg.subtitle.y\\\"\\n                           [attr.dy]=\\\"tspan.dy\\\"\\n                           [attr.font-size]=\\\"svg.subtitle.fontSize\\\"\\n                           [attr.font-weight]=\\\"svg.subtitle.fontWeight\\\"\\n                           [attr.fill]=\\\"svg.subtitle.color\\\">{{tspan.span}}</tspan>\\n                </ng-container>\\n            </text>\\n            <image *ngIf=\\\"options.showImage\\\" preserveAspectRatio=\\\"none\\\" \\n                [attr.height]=\\\"svg.image.height\\\"\\n                [attr.width]=\\\"svg.image.width\\\"\\n                [attr.xlink:href]=\\\"svg.image.src\\\"\\n                [attr.x]=\\\"svg.image.x\\\"\\n                [attr.y]=\\\"svg.image.y\\\"\\n            />\\n        </svg>\\n    \"\r\n        }),\r\n        __param(2, Inject(DOCUMENT)),\r\n        __metadata(\"design:paramtypes\", [CircleProgressOptions, ElementRef, Object])\r\n    ], CircleProgressComponent);\r\n    return CircleProgressComponent;\r\n}());\n\nvar NgCircleProgressModule = /** @class */ (function () {\r\n    function NgCircleProgressModule() {\r\n    }\r\n    NgCircleProgressModule_1 = NgCircleProgressModule;\r\n    NgCircleProgressModule.forRoot = function (options) {\r\n        if (options === void 0) { options = {}; }\r\n        return {\r\n            ngModule: NgCircleProgressModule_1,\r\n            providers: [\r\n                { provide: CircleProgressOptions, useValue: options }\r\n            ]\r\n        };\r\n    };\r\n    var NgCircleProgressModule_1;\r\n    NgCircleProgressModule = NgCircleProgressModule_1 = __decorate([\r\n        NgModule({\r\n            imports: [\r\n                CommonModule\r\n            ],\r\n            declarations: [\r\n                CircleProgressComponent,\r\n            ],\r\n            exports: [\r\n                CircleProgressComponent,\r\n            ]\r\n        })\r\n    ], NgCircleProgressModule);\r\n    return NgCircleProgressModule;\r\n}());\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { CircleProgressComponent, CircleProgressOptions, NgCircleProgressModule };\n//# sourceMappingURL=ng-circle-progress.js.map\n"],"sourceRoot":""}