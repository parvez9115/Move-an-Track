{"version":3,"sources":["./node_modules/@syncfusion/ej2-angular-base/index.js","./node_modules/@syncfusion/ej2-angular-base/src/complex-array-base.js","./node_modules/@syncfusion/ej2-angular-base/src/component-base.js","./node_modules/@syncfusion/ej2-angular-base/src/form-base.js","./node_modules/@syncfusion/ej2-angular-base/src/index.js","./node_modules/@syncfusion/ej2-angular-base/src/template.js","./node_modules/@syncfusion/ej2-angular-base/src/util.js","./node_modules/@syncfusion/ej2-angular-navigations/@syncfusion/ej2-angular-navigations.js","./node_modules/@syncfusion/ej2-base/dist/es6/ej2-base.es2015.js","./node_modules/@syncfusion/ej2-buttons/dist/es6/ej2-buttons.es2015.js","./node_modules/@syncfusion/ej2-data/dist/es6/ej2-data.es2015.js","./node_modules/@syncfusion/ej2-inputs/dist/es6/ej2-inputs.es2015.js","./node_modules/@syncfusion/ej2-lists/dist/es6/ej2-lists.es2015.js","./node_modules/@syncfusion/ej2-navigations/dist/es6/ej2-navigations.es2015.js","./node_modules/@syncfusion/ej2-popups/dist/es6/ej2-popups.es2015.js","./node_modules/@syncfusion/ej2-splitbuttons/dist/es6/ej2-splitbuttons.es2015.js","./node_modules/jqwidgets-ng/fesm2015/jqwidgets-ng-jqxbuttons.js","./node_modules/jqwidgets-ng/fesm2015/jqwidgets-ng-jqxtreegrid.js","./node_modules/jqwidgets-ng/jqwidgets/jqxdatatable.js","./node_modules/jqwidgets-ng/jqwidgets/jqxtooltip.js","./node_modules/jqwidgets-ng/jqwidgets/jqxtreegrid.js","./src/app/shared-mod/shared-mod.module.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAC4B;;;;;;;;;;;;;ACH5B;AAAA;AAAA;AAAA;AAAA;AAA6E;AACtB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,gBAAgB;AACxD;AACA,8BAA8B,qEAAQ;AACtC;AACA,sCAAsC,mCAAmC;AACzE;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,mEAAmE,kCAAkC;AACrG;AACA;AACA,YAAY,qEAAQ,6BAA6B,qEAAQ;AACzD;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,mCAAmC;AAC9D;AACA;AACA,oBAAoB,qEAAQ,cAAc,qEAAQ;AAClD;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,4DAAc;AACtB;AACA;AACA,mDAAmD,gBAAgB;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,2DAAa;AACrB;AACA;AACA;AACA,8CAA8C,gBAAgB;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA,2BAA2B,kBAAkB;AAC7C,qBAAqB,8EAAiB;AACtC,8BAA8B,qEAAQ;AACtC;AACA,yBAAyB,8EAAiB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,gBAAgB;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,mEAAmE,kCAAkC;AACrG;AACA;AACA;AACA,YAAY,qEAAQ,6BAA6B,qEAAQ;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACsB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,wCAAwC,gBAAgB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,2BAA2B,sBAAsB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,wCAAwC,gBAAgB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,gBAAgB;AACxD;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACoB;;;;;;;;;;;;;AC3MrB;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACqH;AACxE;AACU;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2FAA2F,0EAAa;AACxG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,uEAAU;AAC1B;AACA;AACA;AACA,8CAA8C,gBAAgB;AAC9D;AACA;AACA,0BAA0B,qEAAQ;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,+DAA+D,gCAAgC;AAC/F;AACA;AACA;AACA,YAAY,qEAAQ,6BAA6B,qEAAQ;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,mEAAmE,kCAAkC;AACrG;AACA;AACA,YAAY,qEAAQ,6BAA6B,qEAAQ;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,2DAAa;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,gBAAgB;AAC9E;AACA,iBAAiB,wEAAW;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,qEAAQ;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,oCAAoC;AAC3E;AACA;AACA,2CAA2C,4BAA4B;AACvE;AACA;AACA;AACA,2CAA2C,4CAA4C;AACvF;AACA,+CAA+C,qEAAQ;AACvD;AACA;AACA;AACA,uDAAuD,+BAA+B;AACtF;AACA;AACA,oEAAoE,qEAAQ;AAC5E;AACA,2FAA2F,0CAA0C;AACrI;AACA;AACA;AACA;AACA,gFAAgF,gCAAgC;AAChH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE,gBAAgB;AAClF;AACA;AACA,uCAAuC,qEAAQ;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,4DAAc;AACtB;AACA;AACA,qBAAqB,qEAAQ;AAC7B;AACA;AACA;AACA;AACA,QAAQ,qEAAQ,QAAQ,8EAAiB;AACzC,QAAQ,qEAAQ;AAChB;AACA;AACA;AACA;AACA,YAAY,qEAAQ;AACpB;AACA;AACA,2BAA2B,qEAAQ;AACnC,iBAAiB;AACjB,wCAAwC,yCAAyC;AACjF,aAAa;AACb,YAAY,qEAAQ,sBAAsB,0DAAY;AACtD;AACA;AACA,+CAA+C,wBAAwB;AACvE;AACA;AACA;AACA;AACA;AACA,uBAAuB,qEAAQ;AAC/B,aAAa,wEAAW;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,qEAAQ;AAC/B,aAAa,wEAAW;AACxB;AACA;AACA;AACA;AACA,uBAAuB,qEAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA,aAAa,wEAAW;AACxB;AACA;AACA,4BAA4B,qEAAQ;AACpC,aAAa,wEAAW;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACwB;;;;;;;;;;;;;AChTzB;AAAA;AAAA;AAAuF;AACvF;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,QAAQ;AAC/D,qDAAqD,QAAQ;AAC7D;AACA;AACA;AACA,wBAAwB,qEAAQ;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,qEAAQ;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,qEAAQ,QAAQ,8EAAiB;AACzC,QAAQ,qEAAQ;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACmB;;;;;;;;;;;;;AC9HpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACqC;AACJ;AACL;AACL;AACI;;;;;;;;;;;;;ACP3B;AAAA;AAAA;AAAA;AAA4E;AAClB;AAC1D,qBAAqB,8EAAiB;AACtC;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,qEAAQ;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,qEAAQ;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,qEAAQ;AACvB;AACA;AACA;AACA,8EAAiB,EAAE,mBAAmB;;;;;;;;;;;;;ACvEtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA6C;AACY;AACzD;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA,iDAAiD,yBAAyB;AAC1E;AACA;AACA,kDAAkD,0DAAY;AAC9D;AACA;AACA;AACA,+CAA+C,0DAAY;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,+EAA+E,gBAAgB;AAC/F;AACA;AACA;AACA,+BAA+B,kBAAkB;AACjD,mCAAmC,8CAA8C;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mFAAmF,gBAAgB;AACnG;AACA;AACA;AACA;AACA,iCAAiC,8EAAiB;AAClD,+CAA+C,yBAAyB;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,2CAA2C,gBAAgB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,IAAI;AACf,WAAW,IAAI;AACf,YAAY;AACZ;AACA;AACO;AACP;AACA;AACA;AACA,mBAAmB,iBAAiB;AACpC;AACA;AACA,mDAAmD;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACzHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0K;AAChD;AACd;AAC7D;;AAE/C,kBAAkB,SAAI,IAAI,SAAI;AAC9B;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;AACA,kBAAkB,SAAI,IAAI,SAAI;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,wEAAW;AAChD;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA,QAAQ,6EAAQ;AAChB;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA;AACA;AACA;AACA,aAAa,IAAI;AACjB;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,8DAAgB,GAAG;AAC/B;AACA;AACA,gBAAgB,OAAO,0DAAY,qBAAqB;AACxD,iBAAiB,OAAO,0DAAY,sBAAsB;AAC1D;AACA;AACA,IAAI,6EAAQ;AACZ;AACA;AACA;AACA,IAAI,6EAAQ;AACZ;AACA;AACA;AACA;AACA;AACA,sCAAsC,sEAAS;AAC/C;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA;AACA,kCAAkC,6DAAe;AACjD,iBAAiB;AACjB,aAAa,IAAI;AACjB;AACA;AACA;AACA;AACA;;AAEA,oBAAoB,SAAI,IAAI,SAAI;AAChC;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;AACA,oBAAoB,SAAI,IAAI,SAAI;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,qEAAS;AACnE;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,6EAAQ;AAChB,oCAAoC,0EAAa;AACjD;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA;AACA;AACA;AACA,iCAAiC,qEAAuB;AACxD;AACA,oCAAoC,0DAAY;AAChD;AACA,aAAa,IAAI;AACjB;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,wDAAU,GAAG;AACzB,KAAK,OAAO,uDAAS,GAAG;AACxB,KAAK,OAAO,8DAAgB,GAAG;AAC/B,KAAK,OAAO,sDAAQ,GAAG;AACvB;AACA;AACA,wBAAwB,OAAO,0DAAY,6BAA6B;AACxE,sBAAsB,OAAO,0DAAY,2BAA2B;AACpE;AACA;AACA,IAAI,6EAAQ;AACZ;AACA;AACA;AACA,IAAI,6EAAQ;AACZ;AACA;AACA;AACA,IAAI,oFAAe,EAAE,0EAAa;AAClC,uCAAuC,wDAAU;AACjD,QAAQ,uDAAS;AACjB,QAAQ,8DAAgB;AACxB,QAAQ,sDAAQ;AAChB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,sDAAQ;AACpB,0BAA0B,4DAAY;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,IAAI;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,sDAAQ;AACpB,0BAA0B,4DAAY;AACtC;AACA;AACA;AACA;AACA,aAAa,IAAI;AACjB;AACA;AACA;AACA;AACA;;AAEA,oBAAoB,SAAI,IAAI,SAAI;AAChC;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;AACA,oBAAoB,SAAI,IAAI,SAAI;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,wEAAW;AACvC;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA,QAAQ,6EAAQ;AAChB;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA;AACA;AACA;AACA,aAAa,IAAI;AACjB;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,8DAAgB,GAAG;AAC/B;AACA;AACA,kBAAkB,OAAO,0DAAY,uBAAuB;AAC5D;AACA;AACA,IAAI,6EAAQ;AACZ;AACA;AACA;AACA;AACA;AACA,6BAA6B,sEAAS;AACtC;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA;AACA,kCAAkC,6DAAe;AACjD,iBAAiB;AACjB,aAAa,IAAI;AACjB;AACA;AACA;AACA;AACA;;AAEA,oBAAoB,SAAI,IAAI,SAAI;AAChC;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;AACA,oBAAoB,SAAI,IAAI,SAAI;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,mEAAO;AAC7D;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,6EAAQ;AAChB,oCAAoC,0EAAa;AACjD;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA;AACA;AACA;AACA,iCAAiC,qEAAuB;AACxD;AACA,oCAAoC,0DAAY;AAChD;AACA,aAAa,IAAI;AACjB;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,wDAAU,GAAG;AACzB,KAAK,OAAO,uDAAS,GAAG;AACxB,KAAK,OAAO,8DAAgB,GAAG;AAC/B,KAAK,OAAO,sDAAQ,GAAG;AACvB;AACA;AACA,IAAI,oFAAe,EAAE,0EAAa;AAClC,uCAAuC,wDAAU;AACjD,QAAQ,uDAAS;AACjB,QAAQ,8DAAgB;AACxB,QAAQ,sDAAQ;AAChB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,sDAAQ;AACpB,0BAA0B,4DAAY;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,IAAI;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,sDAAQ;AACpB,0BAA0B,4DAAY;AACtC;AACA;AACA;AACA;AACA,aAAa,IAAI;AACjB;AACA;AACA;AACA;AACA;;AAEA,oBAAoB,SAAI,IAAI,SAAI;AAChC;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;AACA,oBAAoB,SAAI,IAAI,SAAI;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,uEAAW;AACzE;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,6EAAQ;AAChB,2BAA2B,0EAAa;AACxC;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA;AACA;AACA;AACA,iCAAiC,qEAAuB;AACxD;AACA,aAAa,IAAI;AACjB;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,wDAAU,GAAG;AACzB,KAAK,OAAO,uDAAS,GAAG;AACxB,KAAK,OAAO,8DAAgB,GAAG;AAC/B,KAAK,OAAO,sDAAQ,GAAG;AACvB;AACA;AACA,IAAI,oFAAe,EAAE,0EAAa;AAClC,uCAAuC,wDAAU;AACjD,QAAQ,uDAAS;AACjB,QAAQ,8DAAgB;AACxB,QAAQ,sDAAQ;AAChB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,sDAAQ;AACpB,0BAA0B,4DAAY;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,IAAI;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,sDAAQ;AACpB,0BAA0B,4DAAY;AACtC;AACA;AACA;AACA;AACA,aAAa,IAAI;AACjB;AACA;AACA;AACA;AACA;;AAEA,oBAAoB,SAAI,IAAI,SAAI;AAChC;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;AACA,oBAAoB,SAAI,IAAI,SAAI;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,wEAAW;AAC1C;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA,QAAQ,6EAAQ;AAChB;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA;AACA;AACA;AACA,aAAa,IAAI;AACjB;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,8DAAgB,GAAG;AAC/B;AACA;AACA,iBAAiB,OAAO,0DAAY,sBAAsB;AAC1D,qBAAqB,OAAO,0DAAY,yBAAyB;AACjE,wBAAwB,OAAO,0DAAY,6BAA6B;AACxE;AACA;AACA,IAAI,6EAAQ;AACZ;AACA;AACA;AACA,IAAI,6EAAQ;AACZ;AACA;AACA;AACA,IAAI,6EAAQ;AACZ;AACA;AACA;AACA;AACA;AACA,gCAAgC,sEAAS;AACzC;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA;AACA,kCAAkC,6DAAe;AACjD,iBAAiB;AACjB,aAAa,IAAI;AACjB;AACA;AACA;AACA;AACA;;AAEA,oBAAoB,SAAI,IAAI,SAAI;AAChC;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;AACA,oBAAoB,SAAI,IAAI,SAAI;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,+DAAG;AACjD;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,6EAAQ;AAChB,oCAAoC,0EAAa;AACjD;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA;AACA;AACA;AACA,iCAAiC,qEAAuB;AACxD;AACA,oCAAoC,0DAAY;AAChD;AACA,aAAa,IAAI;AACjB;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,wDAAU,GAAG;AACzB,KAAK,OAAO,uDAAS,GAAG;AACxB,KAAK,OAAO,8DAAgB,GAAG;AAC/B,KAAK,OAAO,sDAAQ,GAAG;AACvB;AACA;AACA,IAAI,oFAAe,EAAE,0EAAa;AAClC,uCAAuC,wDAAU;AACjD,QAAQ,uDAAS;AACjB,QAAQ,8DAAgB;AACxB,QAAQ,sDAAQ;AAChB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,sDAAQ;AACpB,0BAA0B,4DAAY;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,IAAI;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,sDAAQ;AACpB,0BAA0B,4DAAY;AACtC;AACA;AACA;AACA;AACA,aAAa,IAAI;AACjB;AACA;AACA;AACA;AACA;;AAEA,oBAAoB,SAAI,IAAI,SAAI;AAChC;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;AACA,oBAAoB,SAAI,IAAI,SAAI;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,oEAAQ;AAChE;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,6EAAQ;AAChB,2BAA2B,0EAAa;AACxC;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA;AACA;AACA;AACA,iCAAiC,qEAAuB;AACxD;AACA,aAAa,IAAI;AACjB;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,wDAAU,GAAG;AACzB,KAAK,OAAO,uDAAS,GAAG;AACxB,KAAK,OAAO,8DAAgB,GAAG;AAC/B,KAAK,OAAO,sDAAQ,GAAG;AACvB;AACA;AACA,sBAAsB,OAAO,0DAAY,2BAA2B;AACpE;AACA;AACA,IAAI,6EAAQ;AACZ;AACA;AACA;AACA,IAAI,oFAAe,EAAE,0EAAa;AAClC,uCAAuC,wDAAU;AACjD,QAAQ,uDAAS;AACjB,QAAQ,8DAAgB;AACxB,QAAQ,sDAAQ;AAChB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,sDAAQ;AACpB,0BAA0B,4DAAY;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,IAAI;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,sDAAQ;AACpB,0BAA0B,4DAAY;AACtC;AACA;AACA;AACA;AACA,aAAa,IAAI;AACjB;AACA;AACA;AACA;AACA;;AAEA,oBAAoB,SAAI,IAAI,SAAI;AAChC;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;AACA,oBAAoB,SAAI,IAAI,SAAI;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,mEAAO;AAC7D;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,6EAAQ;AAChB,oCAAoC,0EAAa;AACjD;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA;AACA;AACA;AACA,iCAAiC,qEAAuB;AACxD;AACA,aAAa,IAAI;AACjB;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,wDAAU,GAAG;AACzB,KAAK,OAAO,uDAAS,GAAG;AACxB,KAAK,OAAO,8DAAgB,GAAG;AAC/B,KAAK,OAAO,sDAAQ,GAAG;AACvB;AACA;AACA,IAAI,oFAAe,EAAE,0EAAa;AAClC,uCAAuC,wDAAU;AACjD,QAAQ,uDAAS;AACjB,QAAQ,8DAAgB;AACxB,QAAQ,sDAAQ;AAChB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,sDAAQ;AACpB,0BAA0B,4DAAY;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,IAAI;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,sDAAQ;AACpB,0BAA0B,4DAAY;AACtC;AACA;AACA;AACA;AACA,aAAa,IAAI;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gCAAgC,wEAAW;AAC3C;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA,QAAQ,6EAAQ;AAChB;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA;AACA;AACA;AACA,aAAa,IAAI;AACjB;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,8DAAgB,GAAG;AAC/B;AACA;AACA;AACA;AACA,iCAAiC,sEAAS;AAC1C;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA;AACA,kCAAkC,6DAAe;AACjD,iBAAiB;AACjB,aAAa,IAAI;AACjB;AACA;AACA;AACA;AACA;;AAEA,oBAAoB,SAAI,IAAI,SAAI;AAChC;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;AACA,oBAAoB,SAAI,IAAI,SAAI;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,gEAAI;AACpD;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,6EAAQ;AAChB,2BAA2B,0EAAa;AACxC;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA;AACA;AACA;AACA,iCAAiC,qEAAuB;AACxD;AACA,oCAAoC,0DAAY;AAChD;AACA,aAAa,IAAI;AACjB;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,wDAAU,GAAG;AACzB,KAAK,OAAO,uDAAS,GAAG;AACxB,KAAK,OAAO,8DAAgB,GAAG;AAC/B,KAAK,OAAO,sDAAQ,GAAG;AACvB;AACA;AACA,kBAAkB,OAAO,0DAAY,uBAAuB;AAC5D;AACA;AACA,IAAI,6EAAQ;AACZ;AACA;AACA;AACA,IAAI,oFAAe,EAAE,0EAAa;AAClC,uCAAuC,wDAAU;AACjD,QAAQ,uDAAS;AACjB,QAAQ,8DAAgB;AACxB,QAAQ,sDAAQ;AAChB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,sDAAQ;AACpB,0BAA0B,4DAAY;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,IAAI;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,sDAAQ;AACpB,0BAA0B,4DAAY;AACtC;AACA;AACA;AACA;AACA,aAAa,IAAI;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEivB;AAC1X;AACvX;;;;;;;;;;;;;AC3vpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,MAAM;AACjB,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,IAAI;AACf,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,0CAA0C;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,IAAI;AACf,WAAW,IAAI;AACf,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,YAAY;AAC3B;AACA;AACA,mDAAmD;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,IAAI;AACf,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,IAAI;AACf,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,IAAI;AACf,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,IAAI;AACf,WAAW,IAAI;AACf,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,IAAI;AACf,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,YAAY;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA,sDAAsD;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,IAAI;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,QAAQ;AAClB,UAAU,QAAQ;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,OAAO;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,QAAQ;AAClB,UAAU,OAAO;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,SAAS;AAChD;AACA;AACA;AACA,+BAA+B,qBAAqB,EAAE,IAAI;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,YAAY,cAAc;AAC1B,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,YAAY;AACxB,WAAW,qBAAqB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,qBAAqB;AAChC,WAAW,IAAI;AACf,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,qBAAqB;AAChC,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,SAAS;AACxB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB,iBAAiB;AACjB;AACA;AACA;AACA,6CAA6C;AAC7C,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,iBAAiB;AACjB;AACA;AACA;AACA;AACA,uBAAuB,SAAS;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB;AACjB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,eAAe,OAAO;AACtB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,QAAQ;AACvB,iBAAiB;AACjB;AACA;AACA,mBAAmcAAc,2BAA2B;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,CAAC,kCAAkC;;AAEnC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,kBAAkB;AACjC,eAAe,KAAK;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,KAAK;AACpB,eAAe,cAAc;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,wBAAwB;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE,GAAG;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,oBAAoB;AACnC,eAAe,OAAO;AACtB;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA,sDAAsD;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,IAAI;AAC9C,0CAA0C,IAAI;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,QAAQ;AACvB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,0BAA0B;AACzC,eAAe,cAAc;AAC7B,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,kBAAkB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,eAAe;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,kBAAkB;AACjC,eAAe,KAAK;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,8FAA8F;AAC1H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,YAAY;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,aAAa;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,UAAU;AACzB,eAAe,KAAK;AACpB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,aAAa;AAC5B,eAAe,eAAe;AAC9B,iBAAiB;AACjB;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,eAAe;AAC9B,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,qBAAqB;AACpC,eAAe,OAAO;AACtB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC,qCAAqC,EAAE;AACvC,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,eAAe;AAC9B,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,oBAAoB;AACnC,eAAe,KAAK;AACpB;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD;AAClD;AACA;AACA;AACA;AACA;AACA,0CAA0C,IAAI;AAC9C,0CAA0C,IAAI;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,aAAa;AAC5B,eAAe,eAAe;AAC9B,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,mCAAmC;AAChF;AACA;AACA;AACA;AACA;AACA,mDAAmD,2CAA2C;AAC9F;AACA;AACA;AACA,+CAA+C,mCAAmC;AAClF;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,sBAAsB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,SAAS;AACxB,eAAe,SAAS;AACxB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,gCAAgC;AACrF;AACA;AACA,+BAA+B,aAAa;AAC5C;AACA;AACA,yDAAyD,cAAc;AACvE;AACA,6BAA6B,cAAc;AAC3C;AACA;AACA,kDAAkD,6BAA6B;AAC/E;AACA,wBAAwB,aAAa;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,kBAAkB;AACjC,iBAAiB;AACjB;AACA;AACA,oEAAoE,kCAAkC;AACtG;AACA;AACA;AACA,eAAe,oBAAoB;AACnC,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4EAA4E;AAC5E;AACA;AACA;AACA,eAAe,kBAAkB;AACjC,iBAAiB;AACjB;AACA;AACA,oEAAoE,kCAAkC;AACtG;AACA;AACA;AACA,eAAe,oBAAoB;AACnC,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,wEAAwE,cAAc;AACtF;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,oBAAoB;AACnC,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,kBAAkB;AACjC,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,kBAAkB;AACjC,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,oBAAoB;AACnC,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,kBAAkB;AACjC,eAAe,QAAQ;AACvB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,oBAAoB;AACnC,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA,iDAAiD,2BAA2B;AAC5E;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa;AACb;AACA;AACA;AACA,iDAAiD,sCAAsC;AACvF;AACA;AACA;AACA,WAAW,SAAS;AACpB,aAAa;AACb;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa;AACb;AACA;AACA;AACA,iDAAiD,yBAAyB;AAC1E;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iFAAiF,yDAAyD;AAC1I;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,EAAE;AACxC,2CAA2C,EAAE;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,kCAAkC,EAAE,OAAO,EAAE;AAC7C,kCAAkC,EAAE,OAAO,EAAE;AAC7C,oCAAoC,EAAE,GAAG,EAAE;AAC3C,mCAAmC,EAAE,GAAG,EAAE;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,kCAAkC,EAAE,OAAO,EAAE;AAC7C,kCAAkC,EAAE,OAAO,EAAE;AAC7C,oCAAoC,EAAE,GAAG,EAAE;AAC3C,mCAAmC,EAAE,GAAG,EAAE;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,sCAAsC;AACtC,kCAAkC,EAAE;AACpC;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,yCAAyC;AACzC,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,mDAAmD,qBAAqB;AACxE,0CAA0C,gBAAgB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,EAAE,uBAAuB,EAAE;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,QAAQ;AACvB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,QAAQ;AACvB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,QAAQ;AACvB,eAAe,OAAO;AACtB,eAAe,QAAQ;AACvB,iBAAiB;AACjB;AACA;AACA,qCAAqC,IAAI;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,cAAc;AAC7B,eAAe,YAAY;AAC3B,iBAAiB;AACjB;AACA;AACA;AACA,yCAAyC;AACzC;AACA,uBAAuB,wBAAwB;AAC/C;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,cAAc;AAC7B,eAAe,OAAO;AACtB,iBAAiB;AACjB;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2FAA2F;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB;AACjB;AACA;AACA,uBAAuB;AACvB,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,kBAAkB;AACjC,eAAe,OAAO;AACtB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,+BAA+B,eAAe;AAC9C;AACA;AACA;AACA;AACA,kDAAkD;AAClD;AACA;AACA;AACA;AACA;AACA;AACA,4EAA4E,GAAG;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,oBAAoB;AACnC,eAAe,OAAO;AACtB,iBAAiB;AACjB;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,eAAe;AACtC;AACA;AACA;AACA;AACA,2BAA2B,UAAU;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,OAAO;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,4BAA4B;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA,gBAAgB,cAAc;AAC9B,gBAAgB,OAAO;AACvB,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,IAAI;AACnB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,mCAAmC;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wGAAwG;AACxG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,4CAA4C,mCAAmC;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,YAAY;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB;AACjeAAe,IAAI;AACnB,eAAe,OAAO;AACtB,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,sEAAsE,iBAAiB;AACvF;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,IAAI;AACnB,eAAe,OAAO;AACtB,eAAe,SAAS;AACxB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,IAAI;AACnB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,IAAI;AACnB,eAAe,OAAO;AACtB;AACA,eAAe,IAAI;AACnB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,IAAI,IAAI;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB;AACA;;AAEA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,cAAc;AAC7B,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA,6BAA6B,cAAc,EAAE,YAAY;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,EAAE;AAClD;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA,iBAAiB,OAAO;AACxB;AACA;AACA;AACA,yBAAyB;AACzB;AACA,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,oDAAoD,uFAAuF;AAC3I,iBAAiB,MAAM;AACvB,2CAA2C,gDAAgD;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,8BAA8B,OAAO;AAC1D;AACA;AACA;AACA,4CAA4C,KAAK;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,sCAAsC,cAAc,EAAE;AACpH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sEAAsE,+CAA+C;AACrH;AACA,uCAAuC,+CAA+C;AACtF;AACA;AACA;AACA,gDAAgD,oBAAoB;AACpE;AACA;AACA;AACA,mFAAmF,oBAAoB;AACvG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,2BAA2B;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,YAAY;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,gBAAgB;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,gBAAgB;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA;AACA,iBAAiB;;AAEjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,MAAM;AAC1C,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,IAAI;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD;AACzD;AACA,2DAA2D,YAAY;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,QAAQ;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,4CAA4C;AACvE;AACA;AACA,kDAAkD,YAAY;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,mDAAmD,kEAAkE;AACrH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,wCAAwC,EAAE;AAC/F;AACA;AACA;AACA;AACA;AACA;AACA,4EAA4E,MAAM;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,oBAAoB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA,2DAA2D,YAAY;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,UAAU;AACzD;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,UAAU;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,IAAI;AACpC;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,gCAAgC;;AAEjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,mBAAmB;AAC/B,YAAY,gBAAgB;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,mBAAmB;AAC/B,YAAY,gBAAgB;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,aAAa;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,mBAAmB;AAC/B,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,mBAAmB;AAC/B,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,YAAY,yBAAyB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,yBAAyB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,aAAa;AACzB,aAAa,qBAAqB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB,YAAY,0BAA0B;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,2CAA2C;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB,YAAY,0BAA0B;AACtC;AACA;AACA;AACA;AACA;AACA,wCAAwC,0CAA0C;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,mBAAmB;AAC1C;AACA,2BAA2B,iBAAiB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,QAAQ;AACpB,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,aAAa;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,YAAY;AACxB,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,YAAY;AACvB,WAAW,IAAI;AACf,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,SAAS;AACpB,WAAW,SAAS;AACpB,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,IAAI;AAChC;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,SAAS;AACxB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,SAAS;AACxB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA,eAAe,MAAM;AACrB,eAAe,SAAS;AACxB,eAAe,SAAS;AACxB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,mBAAmB,EAAE;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,8BAA8B;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,qBAAqB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,YAAY;AACvB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,YAAY;AACvB,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB;AACA,WAAW,QAAQ;AACnB,aAAa;AACb;AACA;AACA;AACA;AACA,mBAAmB,SAAS;AAC5B;AACA;AACA;AACA;AACA;AACA,oEAAoE;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,8EAA8E,cAAc;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,qBAAqB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,mBAAmB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,EAAE;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,EAAE;AACd,YAAY,SAAS;AACrB;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,SAAS;AACrB,YAAY,SAAS;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA,4DAA4D;AAC5D;AACA;AACA;AACA;AACA,YAAY,IAAI;AAChB,YAAY,SAAS;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,IAAI;AAChB,YAAY,SAAS;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD;AACxD;AACA;AACA;AACA;AACA,YAAY,SAAS;AACrB,YAAY,QAAQ;AACpB;AACA,eAAe,aAAa;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA,mDAAmD,qBAAqB;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,0BAA0B;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,IAAI;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,IAAI;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,qCAAqC,gBAAgB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,qBAAqB;AACpC,eAAe,eAAe;AAC9B,gBAAgB;AAChB;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,YAAY;AAC3B,eAAe,iBAAiB;AAChC,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,eAAe;AAC9B,iBAAiB;AACjB;AACA;AACA;AACA,8BAA8B,mCAAmC,EAAE;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,eAAe;AAC9B,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,eAAe;AAC9B,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,8CAA8C;AACzG,2DAA2D,0DAA0D;AACrH,iEAAiE,8CAA8C;AAC/G;AACA,wEAAwE,8CAA8C;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,WAAW;AACtB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,yBAAyB,kBAAkB,iBAAiB;AACtG,iDAAiD;AACjD,8CAA8C,gDAAgD;AAC9F;AACA;AACA;AACA;AACA,qEAAqE,yDAAyD;AAC9H;AACA;AACA;AACA;AACA,WAAW,WAAW;AACtB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,WAAW;AACtB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,WAAW;AACtB,WAAW,WAAW;AACtB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,eAAe,oBAAoB;AACnC,eAAe,WAAW;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,eAAe;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,oBAAoB;AACnC,iBAAiB;AACjB;AACA;AACA,mDAAmD,uCAAuC,EAAE;AAC5F;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,OAAO;AACtB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,QAAQ;AACvB,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,wBAAwB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,2BAA2B;AAC3D;AACA;AACA,gCAAgC,2BAA2B;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,gBAAgB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,qBAAqB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,uBAAuB;AACtC,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,uBAAuB;AACtC,eAAe,SAAS;AACxB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,gBAAgB;AACvC;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,CAAC;;AAED;AACA;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;AACA;AACA,yBAAyB;AACzB,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,2BAA2B;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC,oCAAoC;AACpC;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,oCAAoC;AACpC,uEAAuE,+DAA+D;AACtI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,uDAAuD;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,iDAAiD;AACzG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,mFAAmF;AAC7H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,iBAAiB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,oCAAoC;AAC3E;AACA;AACA,gDAAgD,mEAAmE;AACnH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,gDAAgD;AAClF;AACA;AACA;AACA;AACA;AACA,iCAAiC,8BAA8B;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,+EAA+E;AACjH;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,uBAAuB;AAC5C;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,YAAY;AAC3B,eAAe,oBAAoB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,WAAW;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA,0DAA0D;AAC1D;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD;AACzD;AACA;AACA;AACA,wDAAwD,wBAAwB,EAAE;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD;AACpD;AACA,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,gDAAgD;AACzF;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,YAAY;AAC3B,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,uDAAuD;AAC5D,KAAK,mEAAmE;AACxE,KAAK,yDAAyD;AAC9D,KAAK,yDAAyD;AAC9D,KAAK,uDAAuuBAAuB,kBAAkB;AACzC;AACA,2BAA2B,sBAAsB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;;AAEk1C;AACl1C;;;;;;;;;;;;;ACpgRA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAqU;;AAErU;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,qEAAQ;AACjC,wCAAwC,SAAS,eAAe,EAAE;AAClE;AACA,4DAA4D,aAAa;AACzE;AACA;AACA;AACA;AACA,QAAQ,uEAAU,WAAW,0DAA0D;AACvF;AACA,QAAQ,qEAAQ;AAChB,QAAQ,yEAAY;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,sBAAsB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,mEAAM;AACd;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,wEAAW;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,yEAAyE;AACzE,wCAAwC,wCAAwC;AAChF;AACA,QAAQ,qEAAQ;AAChB;AACA;AACA;AACA;AACA;AACA,gDAAgD,kCAAkC;AAClF,QAAQ,yEAAY,cAAc,sCAAsC;AACxE;AACA;AACA,2CAA2C,+BAA+B;AAC1E;AACA;AACA;AACA;AACA;AACA,+CAA+C,iDAAiD;AAChG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,SAAS;AACT;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;AACA,2BAA2B,6DAAQ;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,8DAAS;AAC3C;AACA;AACA,gBAAgB,YAAY;AAC5B,gBAAgB,yBAAyB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,yEAAY,gBAAgB,sCAAsC;AACpG;AACA;AACA;AACA;AACA,YAAY,qEAAQ;AACpB;AACA;AACA;AACA;AACA,aAAa,qEAAQ,OAAO,qEAAQ;AACpC;AACA,+DAA+D,uEAAkB;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,0CAA0C;AAC7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,iEAAY;AACxB;AACA;AACA;AACA;AACA,YAAY,iEAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,wEAAW;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,mEAAM;AAClB;AACA;AACA,YAAY,oEAAe;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,YAAY;AAC5B,gBAAgB,YAAY;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,mEAAM;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,wEAAW;AAC/B;AACA;AACA,wBAAwB,mEAAM;AAC9B;AACA;AACA;AACA;AACA;AACA,wBAAwB,wEAAW;AACnC;AACA;AACA,wBAAwB,qEAAQ;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,qEAAQ,OAAO,qEAAQ;AAChD;AACA,8CAA8C,uEAAkB;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,iEAAY;AACpC;AACA;AACA,wBAAwB,iEAAY;AACpC,wBAAwB,wEAAW;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,0EAAqB;AACzB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,mBAAmB;AACtD;AACA;AACA;AACA;AACA,sCAAsC,8DAAS;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,oEAAe;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,wEAAW;AACvB;AACA,gBAAgB,wEAAW;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,mEAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,8EAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C;AAC5C,aAAa;AACb;AACA;AACA,iDAAiD,SAAS,uBAAuB,EAAE;AACnF,oDAAoD,gCAAgC;AACpF;AACA;AACA;AACA;AACA;AACA,YAAY,qEAAQ;AACpB;AACA;AACA;AACA;AACA;AACA,YAAY,oEAAe;AAC3B,yDAAyD,oBAAoB;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,yEAAY,cAAc,sCAAsC;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,wEAAW;AACnC;AACA;AACA,wBAAwB,qEAAQ;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,mEAAM;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,oEAAO;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,wEAAW;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,uEAAkB;AAClE,gDAAgD,oCAAoC;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,iEAAY;AACpB,QAAQ,iEAAY;AACpB,QAAQ,iEAAY;AACpB,QAAQ,iEAAY;AACpB;AACA,QAAQ,iEAAY;AACpB,QAAQ,iEAAY;AACpB;AACA,YAAY,iEAAY;AACxB;AACA;AACA,YAAY,iEAAY;AACxB;AACA;AACA;AACA;AACA,QAAQ,iEAAY;AACpB,QAAQ,iEAAY;AACpB,QAAQ,iEAAY;AACpB,QAAQ,iEAAY;AACpB;AACA,QAAQ,iEAAY;AACpB,QAAQ,iEAAY;AACpB;AACA,YAAY,iEAAY;AACxB;AACA;AACA,YAAY,iEAAY;AACxB;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA,wBAAwB,qEAAQ;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ,GAAG;AACf;AACA;AACA,IAAI,0EAAqB;AACzB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,mBAAmB;AACtD;AACA;AACA;AACA;AACA,4DAA4D,8DAAS;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA,2BAA2B,wEAAW;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,mEAAM;AAClB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,8CAA8C,SAAS;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,8EAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,uBAAuB;AACxE;AACA;AACA,iDAAiD,SAAS,uBAAuB,EAAE;AACnF;AACA;AACA,YAAY,oEAAe;AAC3B,qDAAqD,wBAAwB;AAC7E;AACA,YAAY,yEAAY;AACxB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,qEAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,uEAAU,gBAAgB,oBAAoB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,wEAAW;AACnC;AACA;AACA,wBAAwB,qEAAQ;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,oEAAO;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,wEAAW;AACzC;AACA;AACA;AACA;AACA,oCAAoC,0BAA0B;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,uEAAkB;AAClE,oDAAoD,sCAAsC;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,iEAAY;AACpB,QAAQ,iEAAY;AACpB,QAAQ,iEAAY;AACpB,QAAQ,iEAAY;AACpB;AACA;AACA,YAAY,iEAAY;AACxB,YAAY,iEAAY;AACxB;AACA;AACA,YAAY,iEAAY;AACxB;AACA;AACA;AACA;AACA,QAAQ,iEAAY;AACpB,QAAQ,iEAAY;AACpB,QAAQ,iEAAY;AACpB,QAAQ,iEAAY;AACpB;AACA;AACA,YAAY,iEAAY;AACxB,YAAY,iEAAY;AACxB;AACA;AACA,YAAY,iEAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,0EAAqB;AACzB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA,kCAAkC,8DAAS;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,oEAAe;AAC3B;AACA;AACA;AACA,YAAY,qEAAQ;AACpB;AACA;AACA;AACA;AACA,gBAAgB,qEAAQ;AACxB;AACA;AACA;AACA,YAAY,wEAAW;AACvB;AACA;AACA;AACA;AACA,gBAAgB,wEAAW;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,8EAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C,aAAa;AACb;AACA;AACA,sDAAsD,8BAA8B;AACpF,kDAAkD,2BAA2B;AAC7E,mDAAmD,4BAA4B;AAC/E,iDAAiD,+BAA+B;AAChF;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,oEAAe;AAC3B,yDAAyD,sBAAsB;AAC/E;AACA,YAAY,yEAAY,cAAc,sCAAsC;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,qEAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,wEAAW;AACnC;AACA;AACA,wBAAwB,qEAAQ;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,oEAAO;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,iEAAY;AACpB,QAAQ,iEAAY;AACpB,QAAQ,iEAAY;AACpB,QAAQ,iEAAY;AACpB,QAAQ,iEAAY;AACpB,QAAQ,iEAAY;AACpB,QAAQ,iEAAY;AACpB;AACA,YAAY,iEAAY;AACxB;AACA;AACA;AACA;AACA;AACA,QAAQ,iEAAY;AACpB,QAAQ,iEAAY;AACpB,QAAQ,iEAAY;AACpB,QAAQ,iEAAY;AACpB,QAAQ,iEAAY;AACpB,QAAQ,iEAAY;AACpB,QAAQ,iEAAY;AACpB;AACA,YAAY,iEAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,0EAAqB;AACzB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,8DAAS;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,qEAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,yEAAY;AAC1C;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,YAAY,qEAAQ;AACpB;AACA,2BAA2B,yBAAyB;AACpD;AACA,oBAAoB,mEAAM;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,qEAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,gBAAgB,mEAAM;AACtB;AACA;AACA;AACA,QAAQ,mEAAM;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,8EAAiB;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE,uBAAuB;AACvF;AACA;AACA;AACA;AACA;AACA,8DAA8D,uBAAuB;AACrF;AACA;AACA;AACA;AACA,8DAA8D,uBAAuB;AACrF;AACA;AACA;AACA,0DAA0D,6BAA6B;AACvF;AACA;AACA;AACA;AACA;AACA,gEAAgE,uBAAuB;AACvF;AACA;AACA;AACA;AACA,+DAA+D,uBAAuB;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,sBAAsB;AACtC,QAAQ,yCAAyC;AACjD;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,gEAAgE;AAChF;AACA,QAAQ,wCAAwC;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,gDAAgD;AAChE;AACA,QAAQ,2CAA2C;AACnD;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,oBAAoB;AAC3C;AACA,+BAA+B,kBAAkB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,yBAAyB;AACxD;AACA;AACA;AACA;AACA;AACA,2BAA2B,sBAAsB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,gDAAgD;AAChE;AACA,QAAQ,2CAA2C;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,QAAQ,qDAAqD;AAC7D;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA,2BAA2B,kBAAkB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,8EAAiB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,iEAAY;AACxB,YAAY,iEAAY;AACxB,YAAY,iEAAY;AACxB,YAAY,iEAAY;AACxB;AACA;AACA,YAAY,iEAAY;AACxB,YAAY,iEAAY;AACxB,YAAY,iEAAY;AACxB,YAAY,iEAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,oEAAO;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,oEAAO;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,qEAAQ,KAAK,uEAAU;AAClE;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,qEAAQ,KAAK,uEAAU;AACtE;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,sBAAsB;AACtD;AACA;AACA,gCAAgC,oBAAoB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,wBAAwB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,4FAA4F;AACxH;AACA;AACA;AACA;AACA,4BAA4B,oBAAoB;AAChD;AACA;AACA,cAAc,qEAAQ;AACtB,YAAY,mEAAM;AAClB;AACA;AACA;AACA;AACA,QAAQ,4CAA4C;AACpD;AACA;AACA,QAAQ,wEAAW;AACnB;AACA;AACA;AACA;AACA;AACA,YAAY,qEAAQ;AACpB;AACA;AACA,2BAA2B,6BAA6B;AACxD;AACA,oBAAoB,mEAAM;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,qEAAQ;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,qEAAQ;AAClC;AACA,4BAA4B,wEAAW;AACvC,4BAA4B,qEAAQ;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,wEAAW;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,0EAAqB;AACzB;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEqM;AACrM;;;;;;;;;;;;;ACnxEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkG;;AAElG;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,gBAAgB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,YAAY;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,YAAY;AAC5B,gBAAgB,SAAS;AACzB,gBAAgB,SAAS;AACzB,gBAAgB,SAAS;AACzB;AACA;AACA,wDAAwD,WAAW,GAAG,UAAU,GAAG,UAAU,GAAG,WAAW;AAC3G;AACA,6DAA6D,2CAA2C;AACxG;AACA,yBAAyB,iBAAiB,MAAM,EAAE;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,YAAY;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,gBAAgB;AAChC;AACA;AACA;AACA,8BAA8B,sBAAsB;AACpD;AACA;AACA,8BAA8B,yBAAyB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,gBAAgB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,iBAAiB;AACjC,gBAAgB,OAAO;AACvB,gBAAgB,sBAAsB;AACtC,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,gBAAgB,sBAAsB;AACtC,gBAAgB,gBAAgB;AAChC,gBAAgB,OAAO;AACvB,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,gBAAgB,gBAAgB;AAChC,gBAAgB,gBAAgB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,gBAAgB;AAChC,gBAAgB,gBAAgB;AAChC,gBAAgB,OAAO;AACvB;AACA;AACA,qBAAqB,8EAAiB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,kBAAkB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,iBAAiB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA,gBAAgB;AAChB,SAAS;AACT;AACA;AACA;AACA;AACA,gBAAgB,gBAAgB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,SAAS;AACT;AACA;AACA;AACA;AACA,gBAAgB,MAAM;AACtB,gBAAgB,SAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA,gBAAgB;AAChB,SAAS;AACT;AACA;AACA;AACA;AACA,gBAAgB,eAAe;AAC/B,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,gBAAgB,SAAS;AACzB,gBAAgB,SAAS;AACzB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,iBAAiB;AACjC,gBAAgB,OAAO;AACvB,gBAAgB,4CAA4C;AAC5D,gBAAgB,cAAc;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,SAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,SAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,sBAAsB;AACtC;AACA;AACA;AACA;AACA,8CAA8C,SAAS;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,cAAc;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,SAAS;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gBAAgB,cAAc,cAAc;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,gCAAgC;AAChD,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,cAAc;AAC9B,gBAAgB,cAAc;AAC9B;AACA;AACA;AACA,YAAY,8EAAiB,OAAO,8EAAiB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,cAAc;AAC9B,gBAAgB,cAAc;AAC9B;AACA;AACA;AACA,YAAY,8EAAiB,OAAO,8EAAiB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,mBAAmB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,SAAS;AACzB,gBAAgB,SAAS;AACzB;AACA;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,SAAS;AACzB,gBAAgB,OAAO;AACvB,gBAAgB,SAAS;AACzB,gBAAgB,OAAO;AACvB,gBAAgB,SAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,qBAAqB;AAChD,qBAAqB,8EAAiB;AACtC;AACA,sDAAsD,kCAAkC,EAAE;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,qBAAqB;AAC5C;AACA,iBAAiB,8EAAiB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA,qBAAqB,8EAAiB;AACtC,yDAAyD,mCAAmC,EAAE;AAC9F;AACA;AACA;AACA,kCAAkC,8EAAiB;AACnD;AACA;AACA;AACA;AACA;AACA,2BAA2B,yBAAyB;AACpD;AACA;AACA;AACA,+BAA+B,uBAAuB;AACtD;AACA,yBAAyB,8EAAiB;AAC1C,0DAA0D,sCAAsC,EAAE;AAClG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,yBAAyB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,SAAS;AACzB,gBAAgB,MAAM;AACtB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,mBAAmB;AACtC;AACA;AACA;AACA;AACA,mBAAmB,mBAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,SAAS;AACzB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,mBAAmB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,gBAAgB,uBAAuB,EAAE;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,YAAY;AAC/B;AACA;AACA;AACA;AACA,qBAAqB,8EAAiB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,SAAS;AACzB,gBAAgB,OAAO;AACvB,gBAAgB,SAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA,iBAAiB,8EAAiB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,gBAAgB,gBAAgB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,gBAAgB,cAAc;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,SAAS;AACzB,gBAAgB,OAAO;AACvB,gBAAgB,SAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,8EAAiB;AACpC;AACA;AACA;AACA;AACA,cAAc,kBAAkB;AAChC;AACA,gBAAgB,8EAAiB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,SAAS;AACzB,gBAAgB,OAAO;AACvB,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA,iCAAiC,8EAAiB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,SAAS;AACzB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA,uBAAuB,eAAe;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,gBAAgB,SAAS;AACzB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,gBAAgB,SAAS;AACzB,gBAAgB,gBAAgB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,gBAAgB,SAAS;AACzB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,gBAAgB,SAAS;AACzB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,gBAAgB,SAAS;AACzB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,gBAAgB,SAAS;AACzB,gBAAgB,OAAO;AACvgBAAgB,sBAAsB;AACtC,gBAAgB,sBAAsB;AACtC,gBAAgB,QAAQ;AACxB,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,gBAAgB,sBAAsB;AACtC,gBAAgB,sBAAsB;AACtC,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,gBAAgB,sBAAsB;AACtC,gBAAgB,sBAAsB;AACtC,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,gBAAgB,sBAAsB;AACtC,gBAAgB,sBAAsB;AACtC,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,gBAAgB,sBAAsB;AACtC,gBAAgB,sBAAsB;AACtC,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,gBAAgB,sBAAsB;AACtC,gBAAgB,sBAAsB;AACtC,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,gBAAgB,cAAc;AAC9B,gBAAgB,cAAc;AAC9B,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,8EAAiB,aAAa,8EAAiB;AACnE;AACA;AACA,gBAAgB,8EAAiB,aAAa,8EAAiB;AAC/D;AACA,KAAK;AACL;AACA;AACA,gBAAgB,cAAc;AAC9B;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,gBAAgB,cAAc;AAC9B;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,uBAAuB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,gBAAgB,kBAAkB;AAClC;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA,wEAAwE;AACxE;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,gBAAgB,KAAK;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,YAAY;AAC5B;AACA;AACA;AACA;AACA,uDAAuD,EAAE;AACzD;AACA;AACA;AACA;AACA,2BAA2B,EAAE,2BAA2B,EAAE;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,gBAAgB,SAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,gBAAgB,OAAO;AACvB;AACA;AACA,iCAAiC,EAAE,gBAAgB,EAAE,EAAE,EAAE,aAAa,GAAG;AACzE;AACA;AACA,KAAK;AACL;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,aAAa;AAC7D;AACA;AACA,KAAK;AACL;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,SAAS;AACzB;AACA;AACA;AACA,uBAAuB,gBAAgB;AACvC;AACA;AACA;AACA;AACA,sDAAsD,eAAe;AACrE;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,IAAI;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,EAAE;AAC7D;AACA;AACA;AACA,+BAA+B,EAAE,2BAA2B,EAAE;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kBAAkB,cAAc,cAAc;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,YAAY;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,YAAY;AAC5B,gBAAgB,MAAM;AACtB,gBAAgB,eAAe;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,YAAY;AAC5B,gBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,2BAA2B;AAClD;AACA;AACA;AACA;AACA,uBAAuB,0BAA0B;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,kBAAkB;AAClC;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA,8CAA8C,QAAQ;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,qBAAqB;AAChD;AACA,0BAA0B,6DAA6D;AACvF;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,YAAY;AAC5B,gBAAgB,YAAY;AAC5B,gBAAgB,WAAW;AAC3B;AACA;AACA;AACA;AACA,mBAAmB,iCAAiC;AACpD;AACA;AACA,mBAAmB,mCAAmC;AACtD;AACA;AACA,mBAAmB,uBAAuB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,SAAS;AACzB,iBAAiB,mBAAmB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,gBAAgB,SAAS;AACzB,iBAAiB,aAAa;AAC9B,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,SAAS;AACzB,gBAAgB,aAAa;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,yBAAyB;AACpD;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,gBAAgB,SAAS;AACzB,iBAAiB,mBAAmB;AACpC,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,QAAQ;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,SAAS;AACzB,gBAAgB,aAAa;AAC7B,gBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,SAAS;AACzB,iBAAiB,gBAAgB;AACjC,gBAAgB,QAAQ;AACxB,gBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,SAAS;AACzB,iBAAiB,aAAa;AAC9B,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,SAAS;AACzB,iBAAiB,YAAY;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,SAAS;AACzB,iBAAiB,YAAY;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,SAAS;AACzB,iBAAiB,mBAAmB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,YAAY;AAC5B,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB;AACA;AACA,YAAY,8EAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,YAAY;AAC5B,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,YAAY;AAC5B,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B,kBAAkB,qEAAQ;AAC1B;AACA,mBAAmB,eAAe;AAClC,iBAAiB,8EAAiB,eAAe,qEAAQ;AACzD;AACA;AACA;AACA,+BAA+B,kEAAK;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,YAAY;AAC5B,gBAAgB,MAAM;AACtB,gBAAgB,SAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,0BAA0B;AACjD;AACA,iFAAiF,sDAAsD;AACvI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,4BAA4B;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,6BAA6B;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,uBAAuB,2BAA2B;AAClD;AACA;AACA;AACA,uBAAuB,+BAA+B;AACtD;AACA,qCAAqC,+DAA+D;AACpG;AACA;AACA;AACA;AACA,yDAAyD,uDAAuD;AAChH;AACA,2BAA2B,2BAA2B;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE,yFAAyF;AACzJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,MAAM;AACtB,gBAAgB,YAAY;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,WAAW;AAC3B,gBAAgB,YAAY;AAC5B,gBAAgB,MAAM;AACtB,gBAAgB,eAAe;AAC/B,gBAAgB,OAAO;AACvB,gBAAgB,YAAY;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,uBAAuB;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,8EAAiB;AAClC;AACA;AACA;AACA,+BAA+B,2BAA2B;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D;AAC5D;AACA;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6EAA6E,8EAAiB;AAC9F;AACA;AACA;AACA;AACA;AACA,uBAAuB,iBAAiB;AACxC;AACA,+BAA+B,0BAA0B;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,SAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,aAAa;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,YAAY;AAC5B,gBAAgB,YAAY;AAC5B,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA,iCAAiC,mEAAM,GAAG;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,gBAAgB,YAAY;AAC5B,gBAAgB,eAAe;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,YAAY;AAC5B,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA,iCAAiC,mEAAM,GAAG;AAC1C;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,gBAAgB,YAAY;AAC5B,gBAAgB,OAAO;AACvB,gBAAgB,cAAc;AAC9B,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA,iCAAiC,mEAAM,GAAG;AAC1C;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,gBAAgB,YAAY;AAC5B,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA,iCAAiC,mEAAM,GAAG;AAC1C;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,gBAAgB,2BAA2B;AAC3C,gBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,gBAAgB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oFAAoF,8EAAiB;AACrG;AACA;AACA,2BAA2B,mBAAmB;AAC9C;AACA,qBAAqB,8EAAiB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,mEAAM,GAAG;AAChC;AACA,sCAAsC,YAAY,qBAAqB,cAAc;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD;AACzD;AACA,uEAAuE;AACvE;AACA,SAAS;AACT,QAAQ,mEAAM,0BAA0B;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,UAAU;AAC1B,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,UAAU;AAC1B,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA,uBAAuB,iCAAiC;AACxD;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,UAAU;AAC1B,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,SAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,gBAAgB;AACjC,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,SAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,aAAa;AAC7B;AACA;AACA;AACA;AACA,2BAA2B,mBAAmB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,SAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,SAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,SAAS;AACzB;AACA;AACA,uBAAuB,cAAc;AACrC;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,SAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,YAAY;AAC5B,gBAAgB,eAAe;AAC/B,gBAAgB,KAAK;AACrB;AACA;AACA;AACA;AACA;AACA,iDAAiD;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,WAAW;AAC3B,gBAAgB,YAAY;AAC5B,gBAAgB,MAAM;AACtB,gBAAgB,eAAe;AAC/B,gBAAgB,KAAK;AACrB,gBAAgB,YAAY;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA,iBAAiB,8EAAiB;AAClC,+BAA+B,qBAAqB;AACpD,yBAAyB,8EAAiB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD;AACvD;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,MAAM;AACtB,gBAAgB,YAAY;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,8EAAiB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,YAAY;AAC5B,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,YAAY;AAC5B,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA,uBAAuB,MAAM;AAC7B;AACA;AACA,sBAAsB,MAAM;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,YAAY;AAC5B,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA,oDAAoD,8EAAiB;AACrE;AACA;AACA;AACA;AACA,uBAAuB,gBAAgB;AACvC;AACA;AACA,sBAAsB,gBAAgB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,YAAY;AAC5B,gBAAgB,YAAY;AAC5B,gBAAgB,WAAW;AAC3B,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,eAAe;AACzD;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,SAAS;AACzB,gBAAgB,WAAW;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,IAAI;AACpC;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,SAAS;AACzB,gBAAgB,WAAW;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,SAAS;AACzB,gBAAgB,WAAW;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,aAAa;AAC7C;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,gBAAgB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,8EAAiB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,uBAAuB;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,QAAQ;AAC1C;AACA;AACA;AACA;AACA;AACA,2DAA2D,IAAI;AAC/D,oBAAoB,mEAAM,GAAG;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,8EAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,mEAAM,GAAG;AAChC;AACA,4DAA4D;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD;AACzD;AACA,uEAAuE;AACvE;AACA;AACA;AACA,SAAS;AACT,QAAQ,mEAAM,0BAA0B;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,UAAU;AAC1B,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,4BAA4B;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,gBAAgB;AACjC,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,SAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,uDAAuD,OAAO,GAAG,oBAAoB,GAAG,2BAA2B;AACnH,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB;AACA;AACA;AACA,2BAA2B,OAAO;AAClC;AACA;AACA;AACA,gBAAgB,SAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,YAAY;AAC5B,gBAAgB,eAAe;AAC/B,gBAAgB,KAAK;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,WAAW;AAC3B,gBAAgB,YAAY;AAC5B,gBAAgB,MAAM;AACtB,gBAAgB,eAAe;AAC/B,gBAAgB,KAAK;AACrB,gBAAgB,YAAY;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,8EAAiB;AACjC;AACA;AACA;AACA;AACA,uDAAuD;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,YAAY;AAC5B,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,YAAY;AAC5B,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,YAAY;AAC5B,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,OAAO;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD;AACzD;AACA;AACA,8DAA8D;AAC9D;AACA;AACA,aAAa;AACb;AACA;AACA,0DAA0D,OAAO;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD;AACzD;AACA;AACA,8DAA8D;AAC9D;AACA;AACA,aAAa;AACb;AACA;AACA,0DAA0D,OAAO;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,IAAI;AAC5C;AACA,qBAAqB;AACrB;AACA;AACA;AACA,yDAAyD;AACzD;AACA;AACA,8DAA8D;AAC9D;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,YAAY;AAC5B,gBAAgB,eAAe;AAC/B,gBAAgB,KAAK;AACrB;AACA;AACA;AACA,mFAAmF;AACnF;AACA;AACA;AACA,gBAAgB,WAAW;AAC3B,gBAAgB,YAAY;AAC5B,gBAAgB,MAAM;AACtB,gBAAgB,eAAe;AAC/B,gBAAgB,KAAK;AACrB,gBAAgB,YAAY;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,YAAY;AAC5B,gBAAgB,MAAM;AACtB,gBAAgB,SAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,uBAAuB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,qEAAQ;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,mEAAM,GAAG;AAC1C;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,mEAAM,GAAG;AAC1C;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,mEAAM,GAAG;AAC1C;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;AACA,uBAAuB,yBAAyB;AAChD;AACA;AACA;AACA;AACA,uBAAuB,yBAAyB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,YAAY;AAC5B,gBAAgB,YAAY;AAC5B,gBAAgB,WAAW;AAC3B;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA,iCAAiC,mEAAM,GAAG;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,aAAa;AAC7B,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA,+BAA+B,yBAAyB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,mBAAmB;AAClD;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT,4BAA4B,iCAAiC;AAC7D;AACA;AACA;AACA;AACA,+BAA+B,uCAAuC;AACtE,2CAA2C,gFAAgF;AAC3H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,YAAY;AAC5B,gBAAgB,MAAM;AACtB,gBAAgB,SAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,WAAW;AAC3B,gBAAgB,YAAY;AAC5B,gBAAgB,MAAM;AACtB,gBAAgB,eAAe;AAC/B,gBAAgB,KAAK;AACrB,gBAAgB,YAAY;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,YAAY;AAC5B,gBAAgB,eAAe;AAC/B,gBAAgB,KAAK;AACrB;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,YAAY;AAC5B,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,YAAY;AAC5B,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,YAAY;AAC5B,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,YAAY;AAC5B,gBAAgB,YAAY;AAC5B,gBAAgB,WAAW;AAC3B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,mBAAmB;AACnC,gBAAgB,MAAM;AACtB,gBAAgB,sBAAsB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,8EAAiB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,gBAAgB;AAC3C;AACA,6BAA6B,mEAAM,GAAG,IAAI;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,eAAe;AAC/B,gBAAgB,SAAS;AACzB,gBAAgB,SAAS;AACzB,gBAAgB,SAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA,iBAAiB,8EAAiB;AAClC;AACA,iBAAiB,8EAAiB;AAClC;AACA;AACA,sBAAsB,8EAAiB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,mEAAM,GAAG;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,yDAAI;AAC3B;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA,yDAAyD,uCAAuC;AAChG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,+BAA+B;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,aAAa;AAC7B,gBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA,2BAA2B,yDAAI;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,WAAW;AACzC;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,aAAa;AAC7B,gBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,aAAa;AAC7B,gBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,aAAa;AAC7B,gBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,mEAAM,GAAG;AACvB;AACA,2CAA2C;AAC3C;AACA,SAAS;AACT,uBAAuB,yDAAI;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,WAAW;AACtC;AACA,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAE+L;AAC/L;;;;;;;;;;;;;ACtiKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAujB;AACpc;AACpC;;AAE/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,yDAAyD,wBAAwB,EAAE;AACnH;AACA;AACA;AACA;AACA,2BAA2B,8EAAiB,kDAAkD,kEAAa;AAC3G,2BAA2B;AAC3B;AACA,YAAY,8EAAiB;AAC7B;AACA;AACA,YAAY,qEAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB,sBAAsB,8EAAiB;AACrE;AACA;AACA;AACA;AACA,gBAAgB,qEAAQ;AACxB;AACA;AACA,aAAa,8EAAiB;AAC9B,2BAA2B,yBAAyB;AACpD;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B,YAAY,qEAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,kCAAkC,8EAAiB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B,YAAY,qEAAQ;AACpB;AACA,gBAAgB,wEAAW;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,8EAAiB;AAClC;AACA,oBAAoB,wEAAW;AAC/B;AACA,gBAAgB,qEAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,8EAAiB,kDAAkD,kEAAa;AAC3G;AACA;AACA;AACA;AACA;AACA,YAAY,8EAAiB;AAC7B;AACA;AACA;AACA;AACA,iBAAiB,8EAAiB;AAClC;AACA;AACA;AACA;AACA,+CAA+C,kCAAkC;AACjF,kDAAkD,kCAAkC;AACpF,aAAa,8EAAiB;AAC9B;AACA,YAAY,uEAAU,gBAAgB,0CAA0C;AAChF;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA,aAAa,8EAAiB,sBAAsB,8EAAiB;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,wEAAW;AAC3B;AACA,YAAY,qEAAQ;AACpB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,wEAAW;AACvB;AACA;AACA,YAAY,qEAAQ;AACpB;AACA;AACA;AACA;AACA,YAAY,qEAAQ;AACpB;AACA,gBAAgB,wEAAW;AAC3B;AACA;AACA;AACA;AACA,gBAAgB,wEAAW;AAC3B;AACA,YAAY,qEAAQ;AACpB;AACA;AACA;AACA,yBAAyB,8EAAiB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,8EAAiB,kDAAkD,kEAAa;AAC3G,0CAA0C,kCAAkC;AAC5E;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA,YAAY,qEAAQ;AACpB;AACA,QAAQ,qEAAQ;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,qEAAQ;AACxB;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA,8BAA8B,CAAC,qEAAQ,qCAAqC,EAAE;AAC9E,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,8EAAiB,kDAAkD,kEAAa;AAC3G;AACA,aAAa,8EAAiB;AAC9B,qDAAqD,uBAAuB;AAC5E;AACA;AACA;AACA,0CAA0C,uBAAuB;AACjE;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,8EAAiB;AAC/B;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA,iBAAiB,8EAAiB;AAClC;AACA;AACA,oBAAoB,wEAAW;AAC/B;AACA;AACA,oBAAoB,qEAAQ;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B,YAAY,wEAAW;AACvB;AACA,aAAa,8EAAiB;AAC9B,YAAY,qEAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,uEAAU;AAC9C;AACA;AACA,0EAA0E,uEAAU;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,8EAAiB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,8EAAiB;AAClC,gBAAgB,uEAAU,WAAW,8DAA8D;AACnG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,uEAAU,WAAW,eAAe;AAChD;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,qEAAQ;AACpB;AACA;AACA,YAAY,wEAAW;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,8BAA8B,8EAAiB;AAC/C;AACA;AACA;AACA;AACA,gBAAgB,wEAAW;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,qEAAQ;AACxB;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA,2BAA2B,8EAAiB,kDAAkD,kEAAa;AAC3G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,kDAAkD;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,qBAAqB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA,YAAY,mEAAM;AAClB,YAAY,mEAAM;AAClB,YAAY,sEAAS;AACrB;AACA,YAAY,uEAAU,YAAY,6BAA6B;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,8EAAiB,kDAAkD,kEAAa;AAC3G,wBAAwB,oEAAO;AAC/B;AACA;AACA;AACA;AACA,wBAAwB,0EAA0E,2BAA2B;AAC7H;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,gBAAgB,8EAAiB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,8EAAiB;AACjC;AACA;AACA;AACA,oBAAoB,8EAAiB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,8EAAiB;AACvC;AACA;AACA,+BAA+B,wBAAwB;AACvD;AACA;AACA;AACA;AACA;AACA,+BAA+B,wBAAwB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,4CAA4C,EAAE;AACxE;AACA;AACA,0CAA0C,uBAAuB;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,8EAAiB,kDAAkD,kEAAa;AAC3G;AACA;AACA;AACA,YAAY,8EAAiB;AAC7B,gDAAgD,+BAA+B;AAC/E;AACA;AACA;AACA,2BAA2B,mBAAmB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,8EAAiB,kDAAkD,kEAAa;AAC3G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,sBAAsB;;AAEvB;AACA;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,YAAY;AACtD;AACA;AACA;AACA;AACA,kDAAkD,8DAAS;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,qEAAQ;AACjC;AACA,QAAQ,wEAAW;AACnB;AACA,uBAAuB,oEAAO;AAC9B;AACA;AACA;AACA;AACA,uBAAuB,wCAAwC;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,qEAAQ;AACpB;AACA,cAAc,qEAAQ;AACtB,YAAY,uEAAU,gBAAgB,yFAAyF;AAC/H;AACA;AACA;AACA,4BAA4B,yDAAI;AAChC;AACA,oCAAoC,wEAAwE;AAC5G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,qEAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,qEAAQ;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,qEAAQ;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,kBAAkB,qEAAQ;AAC1B;AACA;AACA,4CAA4C,qDAAqD;AACjG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,8EAAiB;AACzD;AACA;AACA,iBAAiB,8EAAiB;AAClC;AACA;AACA;AACA,6BAA6B,8EAAiB;AAC9C;AACA;AACA,gDAAgD,mBAAmB;AACnE;AACA;AACA;AACA;AACA,6BAA6B,8EAAiB;AAC9C;AACA;AACA,gDAAgD,qBAAqB;AACrE;AACA;AACA;AACA;AACA,6BAA6B,8EAAiB;AAC9C,gDAAgD,wCAAwC;AACxF;AACA;AACA;AACA;AACA,6BAA6B,8EAAiB;AAC9C,2EAA2E,cAAc;AACzF,+CAA+C,qEAAQ,oBAAoB;AAC3E;AACA;AACA;AACA;AACA,6BAA6B,8EAAiB;AAC9C,0EAA0E,cAAc;AACxF;AACA,mDAAmD,qEAAQ,mBAAmB;AAC9E;AACA;AACA;AACA;AACA;AACA,6BAA6B,8EAAiB;AAC9C,0EAA0E,cAAc;AACxF;AACA,mDAAmD,qEAAQ,mBAAmB;AAC9E;AACA;AACA;AACA;AACA;AACA,6BAA6B,8EAAiB;AAC9C,2EAA2E,cAAc;AACzF;AACA,mDAAmD,qEAAQ,oBAAoB;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE,cAAc;AACjF;AACA,+CAA+C,qEAAQ,gBAAgB;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,oDAAoD;AAChF;AACA;AACA,4BAA4B,yEAAoB;AAChD;AACA;AACA;AACA,YAAY,qEAAQ;AACpB,YAAY,qEAAQ;AACpB,gCAAgC,8BAA8B;AAC9D;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,YAAY,uEAAU,gBAAgB,0BAA0B;AAChE;AACA,yDAAyD,SAAS;AAClE,kEAAkE,EAAE;AACpE;AACA;AACA,QAAQ,uEAAU,oBAAoB,yBAAyB;AAC/D;AACA;AACA;AACA,YAAY,uEAAU,kBAAkB,2BAA2B;AACnE;AACA;AACA;AACA;AACA;AACA,2BAA2B,oCAAoC;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA,4BAA4B,qEAAQ;AACpC;AACA;AACA;AACA;AACA,wCAAwC,8EAAiB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA,6CAA6C,uEAAU;AACvD;AACA;AACA,mFAAmF,uEAAU;AAC7F;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,uEAAU;AAClB;AACA;AACA,SAAS;AACT;AACA,QAAQ,uEAAU;AAClB;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,gCAAgC,2BAA2B;AAC3D;AACA;AACA,gCAAgC,wBAAwB;AACxD;AACA;AACA;AACA,oCAAoC,qCAAqC,cAAc,iDAAiD;AACxI;AACA;AACA,oCAAoC,qCAAqC,cAAc,iDAAiD;AACxI;AACA;AACA,4BAA4B,iDAAiD;AAC7E,QAAQ,uEAAU,gBAAgB,6EAA6E;AAC/G;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,gCAAgC,sCAAsC,cAAc,kDAAkD;AACtI;AACA;AACA;AACA;AACA,oEAAoE,cAAc;AAClF;AACA;AACA;AACA;AACA;AACA,YAAY,wEAAW;AACvB;AACA;AACA,YAAY,qEAAQ;AACpB;AACA,QAAQ,uEAAU,gBAAgB,uDAAuD;AACzF;AACA;AACA;AACA,YAAY,iEAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,cAAc;AAC1C;AACA;AACA,0BAA0B,oEAAO;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B,YAAY,uEAAU;AACtB;AACA;AACA,aAAa;AACb;AACA,aAAa,8EAAiB;AAC9B,YAAY,uEAAU;AACtB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,QAAQ,iEAAY;AACpB,QAAQ,iEAAY;AACpB,QAAQ,iEAAY;AACpB,QAAQ,iEAAY;AACpB,QAAQ,iEAAY;AACpB,QAAQ,iEAAY;AACpB,QAAQ,iEAAY;AACpB,QAAQ,iEAAY;AACpB;AACA;AACA;AACA,gBAAgB,iEAAY;AAC5B;AACA;AACA;AACA;AACA;AACA,QAAQ,iEAAY,kBAAkB,4DAAO;AAC7C,QAAQ,iEAAY,oBAAoB,4DAAO;AAC/C,QAAQ,iEAAY,kBAAkB,4DAAO;AAC7C,QAAQ,iEAAY,oBAAoB,4DAAO;AAC/C,QAAQ,iEAAY,kBAAkB,4DAAO;AAC7C,QAAQ,iEAAY,oBAAoB,4DAAO;AAC/C;AACA;AACA,QAAQ,iEAAY;AACpB,QAAQ,iEAAY;AACpB,QAAQ,iEAAY;AACpB,QAAQ,iEAAY;AACpB,QAAQ,iEAAY;AACpB,QAAQ,iEAAY;AACpB,QAAQ,iEAAY;AACpB,QAAQ,iEAAY;AACpB;AACA,YAAY,iEAAY;AACxB;AACA;AACA;AACA;AACA,QAAQ,iEAAY,qBAAqB,4DAAO;AAChD,QAAQ,iEAAY,uBAAuB,4DAAO;AAClD,QAAQ,iEAAY,qBAAqB,4DAAO;AAChD,QAAQ,iEAAY,uBAAuB,4DAAO;AAClD,QAAQ,iEAAY,qBAAqB,4DAAO;AAChD,QAAQ,iEAAY,uBAAuB,4DAAO;AAClD;AACA;AACA;AACA;AACA,gCAAgC,cAAc;AAC9C;AACA,yDAAyD,cAAc;AACvE;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,kEAAK;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,6EAAgB;AACpD,uCAAuC,qEAAQ;AAC/C;AACA;AACA,wBAAwB,8EAAiB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,8EAAiB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,4DAAO;AAC3B;AACA;AACA,wDAAwD,cAAc;AACtE;AACA;AACA,0BAA0B,oEAAO;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,4DAAO;AACvC;AACA;AACA;AACA,yDAAyD,cAAc;AACvE,0DAA0D,cAAc;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,qEAAQ;AAChB;AACA;AACA;AACA;AACA;AACA,gCAAgC,eAAe;AAC/C;AACA;AACA;AACA;AACA,gCAAgC,mDAAmD;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,uEAAU,gBAAgB,yBAAyB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,8EAAiB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,4DAAO,aAAa,4DAAO;AACxC,6DAA6D,cAAc;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,6EAAgB;AAC5C,+BAA+B,qEAAQ;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,wBAAwB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA,QAAQ,wEAAW;AACnB;AACA;AACA;AACA;AACA;AACA,qBAAqB,4DAAO,aAAa,4DAAO;AAChD;AACA;AACA;AACA,iCAAiC,4DAAO,aAAa,4DAAO;AAC5D;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,aAAa,4DAAO;AACpB,YAAY,iEAAY;AACxB;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,4DAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,oCAAoC,cAAc;AAClD;AACA,6DAA6D,cAAc;AAC3E;AACA,iBAAiB,4DAAO;AACxB,gBAAgB,iEAAY;AAC5B;AACA;AACA,0BAA0B,oEAAO;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,iEAAY;AACpB,0CAA0C,sBAAsB,4BAA4B,EAAE;AAC9F,QAAQ,iEAAY;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,4DAAO;AACxB;AACA;AACA;AACA,aAAa,4DAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,iEAAY;AACpB;AACA;AACA;AACA;AACA,QAAQ,iEAAY;AACpB,0BAA0B,oEAAO;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,iEAAY;AACpB,QAAQ,iEAAY;AACpB;AACA;AACA;AACA,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,cAAc,qEAAQ;AACtB,YAAY,mEAAM;AAClB;AACA;AACA,gBAAgB,mEAAM;AACtB,gBAAgB,mEAAM;AACtB;AACA;AACA;AACA;AACA;AACA,2BAA2B,sBAAsB;AACjD;AACA;AACA;AACA;AACA,YAAY,mEAAM;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,qEAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,wEAAW;AACvB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,uEAAU,gBAAgB,0BAA0B;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,qEAAQ,OAAO,qEAAQ;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,qEAAQ;AAC1C,wCAAwC,wBAAwB;AAChE;AACA;AACA;AACA,oCAAoC,qEAAQ;AAC5C,wCAAwC,sBAAsB;AAC9D;AACA;AACA;AACA,oBAAoB,qEAAQ,OAAO,qEAAQ;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,qEAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,qEAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,mEAAM;AACtB,gBAAgB,mEAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ,GAAG;AACf;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,0EAAqB;AACzB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,uEAAU;AACd;AACA;AACA,KAAK;AACL;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA,+BAA+B,2BAA2B;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,2BAA2B;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B,2BAA2B,4BAA4B;AACvD,qBAAqB,8EAAiB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,4BAA4B;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,uEAAU,gBAAgB,0BAA0B;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,iEAAY;AAChB,IAAI,iEAAY;AAChB,IAAI,iEAAY;AAChB,IAAI,iEAAY;AAChB,IAAI,iEAAY;AAChB,IAAI,iEAAY;AAChB,IAAI,iEAAY;AAChB,IAAI,iEAAY;AAChB,IAAI,iEAAY;AAChB;AACA;AACA;AACA,YAAY,iEAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,iEAAY;AAChB,IAAI,iEAAY;AAChB,IAAI,iEAAY;AAChB,IAAI,iEAAY;AAChB,IAAI,iEAAY;AAChB,IAAI,iEAAY;AAChB,IAAI,iEAAY;AAChB,IAAI,iEAAY;AAChB;AACA,QAAQ,iEAAY;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,iEAAY;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,8EAAiB,+BAA+B,8EAAiB;AACvF,SAAS,8EAAiB;AAC1B;AACA,uBAAuB,oCAAoC;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,8EAAiB;AAC7E,iDAAiD,8EAAiB;AAClE;AACA;AACA,0BAA0B,8EAAiB;AAC3C,8BAA8B,8EAAiB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,kBAAkB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,4DAAO,aAAa,4DAAO;AAC5C;AACA;AACA;AACA,6BAA6B,4DAAO,aAAa,4DAAO;AACxD;AACA;AACA,iBAAiB;AACjB;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,8EAAiB;AACpE,gBAAgB,wEAAW;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,0GAA0G;AACxI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,4DAAO;AACf;AACA;AACA,qBAAqB;AACrB;AACA,IAAI,mEAAM;AACV;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,yFAAyF;AACvH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,0EAA0E;AAC9G,wCAAwC,0FAA0F;AAClI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,8EAAiB,kCAAkC,8EAAiB;AAC7F,2BAA2B,8EAAiB;AAC5C;AACA;AACA,2EAA2E,8EAAiB;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0EAA0E,8EAAiB;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,8EAAiB;AAC1B;AACA,gCAAgC;AAChC;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,kEAAK;AACb;AACA;AACA;AACA;AACA,IAAI,uEAAU,gBAAgB,sCAAsC;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,4DAAO;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,8EAAiB,UAAU,8EAAiB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,gBAAgB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,4BAA4B;AAChE;AACA;AACA;AACA;AACA;AACA,qBAAqB,8EAAiB,iCAAiC,8EAAiB;AACxF,yBAAyB,8EAAiB,2BAA2B,8EAAiB;AACtF;AACA;AACA,6EAA6E,8EAAiB;AAC9F;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,8EAAiB,4BAA4B,8EAAiB;AAC/E;AACA;AACA,+BAA+B,yBAAyB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,8EAAiB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,6DAA6D;AAC3G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,uEAAuE;AACzH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,4DAAO,eAAe,4DAAO;AAClD;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,mDAAmD,8EAAiB;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,8EAAiB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,qEAAQ;AAChB;AACA;AACA,QAAQ,qEAAQ;AAChB;AACA;AACA;AACA;AACA,IAAI,uEAAU,gBAAgB,yBAAyB;AACvD;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS,8EAAiB;AAC1B,QAAQ,wEAAW;AACnB;AACA,IAAI,wEAAW;AACf,IAAI,uEAAU,gBAAgB,0BAA0B;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,4BAA4B;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,gBAAgB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B,YAAY,wEAAW;AACvB,YAAY,qEAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+EAA+E,8EAAiB;AAChG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,8EAAiB;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,yBAAyB;AAC7D;AACA;AACA;AACA;AACA,gDAAgD,8DAAS;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,qEAAQ;AACjC;AACA,QAAQ,wEAAW;AACnB;AACA,2BAA2B,oEAAO;AAClC;AACA;AACA;AACA,2BAA2B,oCAAoC;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,qEAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,qEAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,4DAAO,cAAc,4DAAO,4BAA4B,4DAAO;AAChF;AACA;AACA,gBAAgB,4DAAO,aAAa,4DAAO;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA,4BAA4B,qEAAQ;AACpC;AACA;AACA;AACA;AACA,qCAAqC,8EAAiB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA,sDAAsD,uEAAU;AAChE,2CAA2C,uEAAU;AACrD;AACA;AACA,yEAAyE,uEAAU;AACnF;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,8EAAiB;AACzD;AACA;AACA,iBAAiB,8EAAiB;AAClC;AACA;AACA;AACA,6BAA6B,8EAAiB;AAC9C,gDAAgD,wCAAwC;AACxF;AACA;AACA;AACA;AACA,6BAA6B,8EAAiB;AAC9C;AACA;AACA,gDAAgD,mBAAmB;AACnE;AACA;AACA;AACA;AACA,6BAA6B,8EAAiB;AAC9C,gDAAgD,4BAA4B;AAC5E;AACA;AACA;AACA;AACA,6BAA6B,8EAAiB;AAC9C;AACA;AACA,gDAAgD,qBAAqB;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAigBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,qEAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,wEAAW;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA;AACA,QAAQ,mEAAM;AACd;AACA;AACA;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ,GAAG;AACf;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,0EAAqB;AACzB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;AACA;AACA;AACA;AACA,wBAAwB,kEAAa;AACrC;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA;AACA,IAAI,gDAAgD;AACpD;AACA,6BAA6B,kEAAa;AAC1C;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA;AACA,IAAI,4CAA4C;AAChD;AACA,wBAAwB,kEAAa;AACrC;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA;AACA;AACA,0BAA0B,kEAAa;AACvC;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,YAAY;AAC7C;AACA;AACA;AACA;AACA,kCAAkC,8DAAS;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B,wBAAwB,yDAAI;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,oEAAO;AACnC;AACA;AACA;AACA;AACA,iBAAiB,8EAAiB;AAClC,oCAAoC,+BAA+B;AACnE;AACA;AACA;AACA,iBAAiB,8EAAiB;AAClC,kDAAkD,uEAAU,wBAAwB,uEAAU;AAC9F;AACA,qBAAqB,8EAAiB;AACtC,iDAAiD,uEAAU;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,yEAAoB;AAC5D;AACA;AACA,0CAA0C,8EAAiB;AAC3D,wCAAwC,8EAAiB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,qEAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,qEAAQ;AAChB;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA,mDAAmD,uEAAU;AAC7D;AACA;AACA,yFAAyF,uEAAU;AACnG;AACA;AACA;AACA;AACA;AACA,YAAY,wEAAW;AACvB;AACA;AACA,YAAY,qEAAQ;AACpB;AACA;AACA;AACA;AACA,YAAY,qEAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,wEAAW;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,qEAAQ;AACpB;AACA;AACA;AACA;AACA;AACA,8DAA8D,0EAA0E;AACxI;AACA;AACA,0DAA0D,oCAAoC;AAC9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,qEAAQ;AACrB;AACA;AACA;AACA,4CAA4C,8EAAiB;AAC7D;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,8EAAiB,0BAA0B,uEAAU;AAC9E;AACA,oFAAoF,uEAAU;AAC9F,8CAA8C,uEAAU;AACxD,iDAAiD,uEAAU;AAC3D;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,qEAAQ;AACrB;AACA,gBAAgB,qEAAQ;AACxB;AACA;AACA,gBAAgB,wEAAW;AAC3B;AACA;AACA,gBAAgB,qEAAQ;AACxB;AACA;AACA,gBAAgB,wEAAW;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,SAAS,6BAA6B,EAAE;AAChG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,qEAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA,YAAY,uEAAU;AACtB;AACA,aAAa;AACb;AACA;AACA,yBAAyB,8EAAiB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,uEAAU;AAC9B;AACA,qBAAqB;AACrB;AACA,aAAa;AACb;AACA;AACA;AACA,YAAY,qEAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,YAAY,qEAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,YAAY,iEAAY;AACxB,YAAY,iEAAY;AACxB,YAAY,iEAAY;AACxB,YAAY,iEAAY;AACxB;AACA;AACA,YAAY,iEAAY;AACxB,YAAY,iEAAY;AACxB,YAAY,iEAAY;AACxB,YAAY,iEAAY;AACxB;AACA;AACA;AACA;AACA,YAAY,iEAAY;AACxB,YAAY,iEAAY;AACxB,YAAY,iEAAY;AACxB,YAAY,iEAAY;AACxB;AACA;AACA,YAAY,iEAAY;AACxB,YAAY,iEAAY;AACxB,YAAY,iEAAY;AACxB,YAAY,iEAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,iEAAY;AACpB,QAAQ,iEAAY;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,qEAAQ;AACrB,gEAAgE,qEAAQ;AACxE,gBAAgB,wEAAW;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,8EAAiB,oBAAoB,8BAA8B;AACvF;AACA,wBAAwB,8EAAiB,qBAAqB,4BAA4B;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,qEAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,8EAAiB;AACjD;AACA;AACA;AACA;AACA,gCAAgC,8EAAiB;AACjD;AACA;AACA;AACA;AACA;AACA,qBAAqB,8EAAiB;AACtC,gCAAgC,8EAAiB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,8EAAiB,mBAAmB,8EAAiB;AACrF;AACA;AACA;AACA;AACA;AACA,gCAAgC,8EAAiB,mBAAmB,8EAAiB;AACrF;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,8EAAiB;AACtC,gCAAgC,8EAAiB,mBAAmB,8EAAiB;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,mFAAmF;AACxG,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,qEAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,mCAAmC;AACtF;AACA;AACA,mDAAmD,gCAAgC;AACnF;AACA;AACA,mDAAmD,mCAAmC;AACtF;AACA;AACA,mDAAmD,gCAAgC;AACnF;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,iEAAY;AACpB,QAAQ,iEAAY;AACpB;AACA;AACA;AACA;AACA,gBAAgB,iEAAY;AAC5B;AACA;AACA,gBAAgB,iEAAY;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE,mDAAmD,SAAS,MAAM;AACvI,qBAAqB,oDAAoD,YAAY,MAAM;AAC3F,mEAAmE,oDAAoD,SAAS,MAAM;AACtI,qBAAqB,qDAAqD,YAAY,MAAM;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,+DAA+D,EAAE;AACnG;AACA;AACA,kCAAkC,+CAA+C,EAAE;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,+CAA+C,EAAE;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,8BAA8B;AACnF;AACA;AACA,qDAAqD,8BAA8B,GAAG,2BAA2B;AACjH;AACA;AACA;AACA,8BAA8B,8DAAO;AACrC;AACA;AACA;AACA,wBAAwB,QAAQ,iBAAiB,UAAU,mCAAmC,EAAE;AAChG;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,4BAA4B,WAAW,wBAAwB,EAAE;AACjE;AACA;AACA;AACA,iBAAiB,8EAAiB;AAClC;AACA;AACA,SAAS;AACT;AACA;AACA,iBAAiB,qEAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,qEAAQ;AACpB;AACA;AACA;AACA;AACA,uDAAuD,oEAAoE;AAC3H,kEAAkE,yCAAyC;AAC3G;AACA,wDAAwD,qEAAqE;AAC7H,mEAAmE,yCAAyC;AAC5G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,uEAAU,+CAA+C,sDAAsD;AACvH,QAAQ,uEAAU,+CAA+C,sDAAsD;AACvH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,qEAAQ;AACpB;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB,aAAa;AACb;AACA;AACA,YAAY,4DAAO;AACnB;AACA;AACA;AACA;AACA;AACA,yCAAyC,uEAAU,2BAA2B,uEAAU;AACxF;AACA;AACA,mCAAmC,uEAAU;AAC7C;AACA;AACA;AACA;AACA,sBAAsB,8EAAiB;AACvC;AACA,qBAAqB,8EAAiB;AACtC;AACA,aAAa,qEAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,8EAAiB;AAC9C,oDAAoD,YAAY;AAChE;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,iBAAiB,8EAAiB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,YAAY;AAC3C;AACA;AACA,oBAAoB,qEAAQ,+BAA+B,8EAAiB;AAC5E;AACA;AACA;AACA;AACA,qBAAqB,8EAAiB;AACtC;AACA,oBAAoB,qEAAQ,+BAA+B,8EAAiB;AAC5E;AACA;AACA;AACA;AACA,iBAAiB,qEAAQ;AACzB;AACA;AACA;AACA;AACA,gBAAgB,8EAAiB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,iCAAiC;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,8EAAiB,iBAAiB,8EAAiB;AACzE;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,qCAAqC,uEAAkB;AACvD;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,SAAS;AACT;AACA,YAAY,8EAAiB;AAC7B;AACA;AACA;AACA;AACA,iCAAiC,uEAAkB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,8EAAiB,iBAAiB,8EAAiB;AACzE;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA,4CAA4C,uEAAkB;AAC9D;AACA;AACA;AACA;AACA;AACA,iBAAiB,8EAAiB,yBAAyB,qEAAQ;AACnE;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,uEAAU,2BAA2B,uEAAU;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,qCAAqC;AAC5D;AACA,qBAAqB,qEAAQ;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA,qBAAqB,qEAAQ;AAC7B,oBAAoB,8EAAiB,YAAY,kDAAkD;AACnG;AACA;AACA;AACA,gBAAgB,8EAAiB,YAAY,kDAAkD;AAC/F;AACA;AACA;AACA;AACA;AACA,qBAAqB,qEAAQ;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,qEAAQ;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,qEAAQ;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,qEAAQ;AACzB;AACA;AACA;AACA;AACA;AACA,YAAY,qEAAQ;AACpB;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,8EAAiB,iBAAiB,8EAAiB;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,uEAAU,WAAW,oDAAoD;AACrF;AACA;AACA;AACA,gBAAgB,uEAAU,WAAW,gFAAgF;AACrH,gBAAgB,uEAAU,WAAW,gFAAgF;AACrH;AACA,oBAAoB,uEAAU,WAAW,gFAAgF;AACzH,oBAAoB,uEAAU,WAAW,gFAAgF;AACzH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,iEAAY;AACxB;AACA;AACA,YAAY,iEAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,iEAAY;AACxB;AACA;AACA,YAAY,iEAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,8EAAiB,iBAAiB,UAAU,8EAAiB,gDAAgD;AAC7H;AACA;AACA;AACA;AACA,gBAAgB,8EAAiB,iBAAiB,oDAAoD;AACtG;AACA;AACA;AACA;AACA;AACA,gBAAgB,8EAAiB,iBAAiB,WAAW,8EAAiB,gDAAgD;AAC9H;AACA;AACA;AACA,gBAAgB,8EAAiB,iBAAiB,qDAAqD;AACvG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,8EAAiB;AAC7B;AACA,gBAAgB,8EAAiB;AACjC;AACA;AACA;AACA,YAAY,8EAAiB;AAC7B;AACA,gBAAgB,8EAAiB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA,0BAA0B,8EAAiB;AAC3C;AACA;AACA;AACA,QAAQ,8EAAiB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,uEAAU,wBAAwB,uEAAU;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,+EAAgB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,IAAI,+BAA+B,IAAI;AAC9D;AACA;AACA,yCAAyC,IAAI;AAC7C;AACA,gBAAgB,qEAAQ;AACxB;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,2BAA2B;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,iBAAiB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,qEAAQ;AACzB;AACA;AACA;AACA;AACA;AACA,gFAAgF,8EAAiB;AACjG;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,8EAAiB;AAC1D;AACA;AACA;AACA,8BAA8B,8EAAiB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,uEAAU,8BAA8B,uEAAU,2BAA2B,uEAAU;AACxH;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,uEAAU,6BAA6B,uEAAU;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,uEAAU;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,gBAAgB,uCAAuC,gBAAgB;AAC1F;AACA;AACA,uBAAuB,gBAAgB,0CAA0C,gBAAgB;AACjG;AACA;AACA;AACA,gBAAgB,8EAAiB,iBAAiB,UAAU,8EAAiB,gDAAgD;AAC7H;AACA;AACA;AACA,uBAAuB,gBAAgB,wCAAwC,gBAAgB;AAC/F;AACA;AACA,gBAAgB,8EAAiB,iBAAiB,oDAAoD;AACtG;AACA;AACA;AACA,+CAA+C,gBAAgB;AAC/D;AACA,sDAAsD,gBAAgB;AACtE;AACA;AACA;AACA,gBAAgB,8EAAiB,iBAAiB,WAAW,8EAAiB,gDAAgD;AAC9H;AACA;AACA,oDAAoD,gBAAgB;AACpE;AACA,gBAAgB,8EAAiB,iBAAiB,qDAAqD;AACvG;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,qEAAQ;AACzB;AACA;AACA;AACA;AACA,gBAAgB,qEAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa,qEAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,uEAAU,6BAA6B,uEAAU,yBAAyB,uEAAU;AAC1H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,uEAAU,yBAAyB,uEAAU;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,iEAAY;AACpB,QAAQ,iEAAY;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,iEAAY;AACpB,QAAQ,iEAAY;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,iEAAY;AACxB,YAAY,iEAAY;AACxB,YAAY,iEAAY;AACxB,YAAY,iEAAY;AACxB,YAAY,iEAAY;AACxB,YAAY,iEAAY;AACxB,YAAY,iEAAY;AACxB,YAAY,iEAAY;AACxB;AACA;AACA,YAAY,iEAAY;AACxB,YAAY,iEAAY;AACxB,YAAY,iEAAY;AACxB,YAAY,iEAAY;AACxB,YAAY,iEAAY;AACxB,YAAY,iEAAY;AACxB,YAAY,iEAAY;AACxB,YAAY,iEAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,iEAAY;AACxB,YAAY,iEAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,iEAAY;AACxB;AACA,gBAAgB,iEAAY;AAC5B;AACA,YAAY,iEAAY;AACxB,YAAY,iEAAY;AACxB,YAAY,iEAAY;AACxB,YAAY,iEAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,iEAAY;AAC5B;AACA;AACA;AACA;AACA,QAAQ,iEAAY;AACpB;AACA,YAAY,iEAAY;AACxB;AACA,QAAQ,iEAAY;AACpB,QAAQ,iEAAY;AACpB,QAAQ,iEAAY;AACpB,QAAQ,iEAAY;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,iEAAY;AACpB;AACA;AACA,4BAA4B,+BAA+B;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,8EAAiB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,8EAAiB;AACtC;AACA;AACA;AACA;AACA;AACA,qBAAqB,8EAAiB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,qEAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,uEAAU,+CAA+C,8CAA8C;AACnH,YAAY,uEAAU,+CAA+C,8CAA8C;AACnH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,qEAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,8EAAiB;AACjC;AACA;AACA,gBAAgB,8EAAiB,wBAAwB,8EAAiB;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,8EAAiB;AAClC,gBAAgB,mEAAM;AACtB;AACA,iBAAiB,8EAAiB;AAClC,gBAAgB,mEAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,QAAQ,wEAAW;AACnB;AACA;AACA;AACA;AACA,aAAa,qEAAQ;AACrB;AACA,YAAY,mEAAM;AAClB;AACA;AACA;AACA;AACA,aAAa,qEAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,8EAAiB;AACrD;AACA,4CAA4C,iBAAiB;AAC7D,6BAA6B,8EAAiB;AAC9C;AACA,iCAAiC,qEAAQ;AACzC;AACA;AACA;AACA,oCAAoC,8EAAiB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,qEAAQ;AAChC;AACA;AACA;AACA,wBAAwB,qEAAQ;AAChC;AACA;AACA;AACA;AACA,wBAAwB,qEAAQ;AAChC;AACA;AACA,yBAAyB,8EAAiB,sBAAsB,8EAAiB;AACjF;AACA;AACA,wBAAwB,qEAAQ;AAChC;AACA;AACA;AACA;AACA,wBAAwB,qEAAQ;AAChC;AACA;AACA,yBAAyB,8EAAiB;AAC1C,4BAA4B,8EAAiB;AAC7C;AACA;AACA;AACA,wBAAwB,qEAAQ;AAChC;AACA;AACA;AACA;AACA,wBAAwB,qEAAQ;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,qEAAQ;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,qEAAQ;AAChC;AACA;AACA;AACA,wBAAwB,qEAAQ;AAChC;AACA;AACA;AACA;AACA,yBAAyB,8EAAiB;AAC1C,6BAA6B,qEAAQ;AACrC,4BAA4B,mEAAM;AAClC;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,qEAAQ;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,qEAAQ;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,qEAAQ;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,qEAAQ;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,qEAAQ;AAChC;AACA;AACA;AACA;AACA,wBAAwB,qEAAQ;AAChC;AACA;AACA;AACA;AACA,wBAAwB,qEAAQ;AAChC;AACA;AACA;AACA,wBAAwB,qEAAQ;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,qEAAQ;AACrB;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA,gBAAgB,mEAAM;AACtB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA,iCAAiC,8EAAiB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,4BAA4B;AACnD,iBAAiB,8EAAiB,+BAA+B,8EAAiB;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,8EAAiB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,uEAAU,IAAI;AAClB;AACA;AACA,IAAI,oEAAO,GAAG;AACd;AACA;AACA,IAAI,oEAAO,GAAG;AACd;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,oEAAO,GAAG;AACd;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,0EAAqB;AACzB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,GAAG,kBAAkB,GAAG,KAAK,EAAE,YAAY,GAAG;AACvF,cAAc,EAAE,YAAY,IAAI,IAAI,EAAE,YAAY,IAAI;AACtD,mFAAmF;AACnF,kCAAkC,EAAE;AACpC;AACA,kCAAkC,KAAK;AACvC,iCAAiC,MAAM;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,kCAAkC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,QAAQ,iBAAiB,QAAQ,kBAAkB;AACnE,MAAM;AACN;AACA;AACA;AACA;AACA,kEAAkE,yDAAI;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,EAAE;AACrD,+CAA+C,EAAE;AACjD,wDAAwD,EAAE,MAAM,EAAE;AAClE,kDAAkD,EAAE,MAAM,EAAE;AAC5D,8DAA8D,EAAE;AAChE,iEAAiE,EAAE;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,yDAAI;AAC5B;AACA;AACA;AACA,QAAQ,iEAAY;AACpB,gDAAgD,mEAAM;AACtD;AACA;AACA;AACA,iCAAiC,sEAAS;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,gBAAgB,mEAAM,4BAA4B;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,SAAS;AACxB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,8EAAiB;AACnC,2BAA2B,kBAAkB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,gBAAgB;AAChB;AACA;AACA,6BAA6B,mEAAM;AACnC;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,uBAAuB,sEAAS;AAChC;AACA,YAAY,mEAAM;AAClB;AACA;AACA,QAAQ,iEAAY;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,6BAA6B,sEAAS;AACtC;AACA;AACA;AACA;AACA;AACA,uBAAuB,sEAAS;AAChgBAAgB,iEAAY;AAC5B;AACA;AACA,gBAAgB,iEAAY;AAC5B;AACA;AACA,gBAAgB,iEAAY;AAC5B,gBAAgB,iEAAY;AAC5B;AACA;AACA,QAAQ,iEAAY;AACpB,QAAQ,iEAAY;AACpB;AACA;AACA;AACA;AACA,YAAY,iEAAY;AACxB;AACA,QAAQ,iEAAY;AACpB,QAAQ,iEAAY;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oFAAoF,8EAAiB;AACrG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,kCAAkC,6DAA6D;AAC/F;AACA;AACA;AACA;AACA;AACA,mBAAmB,sEAAS;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,KAAK;AAC3C,aAAa,8EAAiB;AAC9B,2BAA2B,oBAAoB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,0EAAa;AACxC;AACA;AACA,oBAAoB;AACpB,SAAS;AACT;AACA;AACA;AACA;AACA,2BAA2B,0EAAa,uBAAuB,gEAAgE;AAC/H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,mEAAM;AACjC;AACA,+BAA+B,mEAAM;AACrC;AACA;AACA;AACA;AACA;AACA,uBAAuB,4BAA4B;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oFAAoF,8EAAiB;AACrqEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,0EAAqB;AACzB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,kEAAa;AACrC;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA,2BAA2B,kEAAa;AACxC;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA,4BAA4B,kEAAa;AACzC;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,8DAAS;AAC/C;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,8EAAiB;AAC3D,yCAAyC,8EAAiB;AAC1D,0CAA0C,8EAAiB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,qEAAQ;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,8EAAiB;AAC7B;AACA;AACA;AACA;AACA,2CAA2C,8EAAiB;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,8EAAiB;AAC1D,2BAA2B,0BAA0B;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,mEAAM;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,yDAAI;AAC5B,4BAA4B,qEAAQ;AACpC,+BAA+B,qEAAQ;AACvC,gFAAgF,8EAAiB;AACjG;AACA,kDAAkD,8EAAiB;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,qEAAQ;AACrC;AACA;AACA,gEAAgE,SAAS,eAAe,EAAE;AAC1F;AACA,2BAA2B,wCAAwC;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,qEAAQ;AACxB;AACA;AACA;AACA,qBAAqB,8EAAiB;AACtC;AACA;AACA,0BAA0B,8EAAiB,4BAA4B,8EAAiB;AACxF;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,8EAAiB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,4DAAO;AAClC;AACA;AACA;AACA,wBAAwB,oEAAO;AAC/B,aAAa,8EAAiB;AAC9B,kBAAkB,qDAAqD;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,oEAAO;AAC1C,iCAAiC,oEAAO;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,mCAAmC,mBAAmB,EAAE;AAClH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,4BAA4B;AACxF,8DAA8D;AAC9D,wBAAwB,iDAAiD,EAAE;AAC3E,6DAA6D;AAC7D,wBAAwB,iDAAiD,EAAE;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,iEAAY;AACpB,QAAQ,iEAAY;AACpB;AACA;AACA,QAAQ,iEAAY;AACpB,QAAQ,iEAAY;AACpB;AACA;AACA;AACA;AACA;AACA,gBAAgB,mEAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,8EAAiB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,8EAAiB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,2BAA2B;AAClF;AACA,0DAA0D,0BAA0B;AACpF;AACA;AACA;AACA;AACA,wDAAwD,6BAA6B;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,8EAAiB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,2BAA2B;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,mEAAM;AACtB;AACA;AACA,kBAAkB,8EAAiB;AACnC;AACA;AACA,gCAAgC,+BAA+B;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,mEAAM;AACtB;AACA;AACA;AACA;AACA;AACA,2DAA2D,uBAAuB;AAClF;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA,4BAA4B,qEAAQ;AACpC;AACA;AACA;AACA;AACA,uCAAuC,8EAAiB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA,aAAa,8EAAiB;AAC9B,YAAY,qEAAQ;AACpB;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA,aAAa,8EAAiB;AAC9B,YAAY,wEAAW;AACvB;AACA;AACA;AACA,QAAQ,iEAAY;AACpB,QAAQ,iEAAY;AACpB,QAAQ,iEAAY;AACpB,kCAAkC,mEAAc;AAChD;AACA;AACA;AACA,SAAS;AACT;AACA,YAAY,iEAAY;AACxB;AACA;AACA;AACA,QAAQ,iEAAY;AACpB,QAAQ,iEAAY;AACpB,QAAQ,iEAAY;AACpB;AACA,YAAY,iEAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,8EAAiB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,8EAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,gCAAgC;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,iEAAY;AACxB,YAAY,iEAAY;AACxB,YAAY,iEAAY;AACxB,YAAY,iEAAY;AACxB;AACA;AACA;AACA;AACA,YAAY,iEAAY;AACxB,YAAY,iEAAY;AACxB,YAAY,iEAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,WAAW;AAClC;AACA;AACA,gCAAgC,iCAAiC;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,8EAAiB;AAC7B;AACA;AACA;AACA;AACA,iBAAiB,8EAAiB;AAClC;AACA,gBAAgB,4EAAa,EAAE,uCAAuC;AACtE,gBAAgB,0EAAW;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,oEAAO;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,8EAAiB;AAC7B;AACA;AACA;AACA,YAAY,mEAAM;AAClB;AACA;AACA;AACA;AACA;AACA,+CAA+C,8EAAiB;AAChE,gBAAgB,mEAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,yDAAI;AAC3B;AACA;AACA;AACA;AACA,gBAAgB,qEAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,8EAAiB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,gDAAgD,WAAW;AACzF;AACA,+BAA+B,6CAA6C,WAAW;AACvF;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB,iBAAiB,8EAAiB;AAChE,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA,YAAY,4EAAa,EAAE,uCAAuC;AAClE,YAAY,0EAAW;AACvB;AACA;AACA,0CAA0C,8EAAiB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,uBAAuB;AAClD;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,2BAA2B;AACtD;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,gCAAgC;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB,gBAAgB,8EAAiB;AAC/D;AACA,YAAY,0EAAW;AACvB,YAAY,mEAAM;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,gCAAgC;AAChE,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,2BAA2B;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,oBAAoB;AAC/C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,uBAAuB,8BAA8B;AACrD;AACA;AACA;AACA;AACA,gCAAgC,gCAAgC;AAChE;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,wBAAwB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,YAAY,wEAAW;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,wEAAW;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,qEAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,wCAAwC;AAC3E,uCAAuC,qBAAqB;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,8EAAiB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,8EAAiB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,8EAAiB;AAC9C,gBAAgB,8EAAiB;AACjC;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B,YAAY,mEAAM;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,qBAAqB;AAChF;AACA;AACA;AACA,2BAA2B,mDAAmD;AAC9E;AACA;AACA;AACA;AACA;AACA,gBAAgB,mEAAM;AACtB;AACA;AACA;AACA,YAAY,mEAAM;AAClB;AACA;AACA;AACA,+BAA+B,0BAA0B;AACzD,+BAA+B,2BAA2B;AAC1D;AACA;AACA,wBAAwB,iEAAY;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,kBAAkB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,gFAAmB;AAC3B;AACA,sDAAsD,0BAA0B,kCAAkC,EAAE;AACpH;AACA;AACA;AACA;AACA;AACA,gBAAgB,mEAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,iFAAoB;AAC5B;AACA;AACA,YAAY,8EAAiB;AAC7B,wDAAwD,yBAAyB;AACjF;AACA;AACA;AACA;AACA,iDAAiD,kBAAkB;AACnE;AACA,wDAAwD,4BAA4B;AACpF;AACA;AACA,0DAA0D,uBAAuB;AACjF;AACA,0DAA0D,uBAAuB;AACjF;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,2BAA2B;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,8EAAiB;AAC7B,0DAA0D,+BAA+B,+BAA+B,EAAE;AAC1H;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,iEAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,2BAA2B;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,gFAAmB;AAC3B,iDAAiD,kBAAkB;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,mEAAM;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,iFAAoB;AAC5B;AACA;AACA;AACA,eAAe,aAAa;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,8EAAiB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC,qBAAqB;AACrB,oEAAoE,4BAA4B;AAChG,kEAAkE,+BAA+B,yBAAyB,EAAE;AAC5H;AACA,oEAAoE,uBAAuB;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA,uEAAuE,2BAA2B;AAClG;AACA;AACA;AACA;AACA,+DAA+D,uBAAuB;AACtF;AACA;AACA,oEAAoE,oBAAoB;AACxF;AACA;AACA;AACA,kEAAkE;AAClE,gCAAgC,+BAA+B,EAAE;AACjE;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,iEAAY;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,8EAAiB,oCAAoC,8EAAiB;AACrG;AACA,+BAA+B,2BAA2B;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,8EAAiB;AAClC,qBAAqB,8EAAiB,wDAAwD,8EAAiB;AAC/G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,2BAA2B;AAClD,kBAAkB,8EAAiB,2BAA2B,8EAAiB;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,8BAA8B;AAC3F,6DAA6D,iCAAiC,yBAAyB,EAAE;AACzH,kEAAkE,oCAAoC;AACtG;AACA,0DAA0D,8BAA8B;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,8EAAiB;AAChF,iBAAiB,8EAAiB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,8EAAiB;AAC7B;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,8EAAiB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,8EAAiB;AAC1C;AACA,6BAA6B,8EAAiB;AAC9C,4BAA4B,0EAAW;AACvC,4BAA4B,mEAAM;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,yDAAI;AAC3C;AACA,8CAA8C,mCAAmC,WAAW;AAC5F;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,yDAAyD,8EAAiB;AAC1E;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B,YAAY,0EAAW;AACvB,YAAY,mEAAM;AAClB;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA,YAAY,8EAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA,uDAAuD,iDAAiD,+BAA+B,EAAE;AACzI;AACA;AACA;AACA;AACA,uDAAuD,oDAAoD,EAAE;AAC7G;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,8EAAiB;AAClC,gBAAgB,mEAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,8EAAiB,sBAAsB,8EAAiB;AACxE;AACA;AACA,iBAAiB,8EAAiB;AAClC;AACA;AACA;AACA,qBAAqB,8EAAiB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,wBAAwB;AACnD;AACA;AACA,oBAAoB,iEAAY;AAChC,oBAAoB,iEAAY;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,8EAAiB;AAClC;AACA,qBAAqB,8EAAiB;AACtC,oBAAoB,0EAAW;AAC/B,oBAAoB,mEAAM;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,+BAA+B;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,wCAAwC;AAC7E;AACA,uCAAuC,uCAAuC;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B,yCAAyC,8DAAS,EAAE,iBAAiB;AACrE,sFAAsF,kBAAkB;AACxG,sFAAsF,kBAAkB;AACxG,8BAA8B,uCAAuC,EAAE;AACvE;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,8EAAiB;AAClC;AACA,gFAAgF,iBAAiB;AACjG;AACA;AACA;AACA;AACA,iBAAiB,8EAAiB;AAClC;AACA,gFAAgF,iBAAiB;AACjG;AACA;AACA;AACA;AACA,YAAY,mEAAM;AAClB;AACA;AACA;AACA,kCAAkC,8EAAiB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,oEAAO;AAClC;AACA;AACA;AACA,uBAAuB,oEAAO;AAC9B;AACA;AACA;AACA;AACA;AACA,yBAAyB,qEAAQ,8BAA8B,wEAAW;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,8EAAiB;AAClC;AACA;AACA,iBAAiB,8EAAiB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,8EAAiB;AAClC;AACA;AACA;AACA,iBAAiB,8EAAiB;AAClC;AACA;AACA,iBAAiB,8EAAiB;AAClC;AACA;AACA;AACA;AACA;AACA,wCAAwC,8EAAiB;AACzD;AACA;AACA,iBAAiB,8EAAiB;AAClC;AACA;AACA;AACA,6BAA6B,8EAAiB;AAC9C;AACA,gDAAgD,yDAAyD;AACzG;AACA;AACA;AACA;AACA;AACA,6BAA6B,8EAAiB;AAC9C;AACA;AACA,gDAAgD,sBAAsB;AACtE;AACA;AACA;AACA;AACA;AACA,6BAA6B,8EAAiB;AAC9C;AACA;AACA,gDAAgD,sBAAsB;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,yDAAI,EAAE,gFAAgF;AAC7G;AACA,8BAA8B,+CAA+C,WAAW;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,qEAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,+BAA+B,6CAA6C,WAAW;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,8EAAiB;AAClC;AACA;AACA;AACA,2DAA2D,iDAAiD,+BAA+B,EAAE;AAC7I;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,6CAA6C,EAAE;AAC9G;AACA;AACA;AACA;AACA,qDAAqD,8EAAiB;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,8EAAiB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA,6BAA6B,8EAAiB,gBAAgB,8EAAiB;AAC/E,4BAA4B,0EAAW;AACvC,4BAA4B,mEAAM;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,yDAAI;AAC3C;AACA,8CAA8C,2CAA2C,WAAW;AACpG;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,8EAAiB,oBAAoB,8EAAiB;AAC9E;AACA,4BAA4B,mEAAM;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,8EAAiB,oBAAoB,8EAAiB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,8EAAiB,gBAAgB,8EAAiB;AACnE,gBAAgB,0EAAW;AAC3B,gBAAgB,mEAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,8EAAiB,oBAAoB,8EAAiB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,4BAA4B;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA,aAAa,8EAAiB,oBAAoB,8EAAiB;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,4BAA4B;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA,iBAAiB,8EAAiB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,8EAAiB,oBAAoB,8EAAiB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,gDAAgD,EAAE;AACxF;AACA;AACA,yBAAyB,8EAAiB;AAC1C;AACA;AACA,6BAA6B,8EAAiB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,8EAAiB;AAC9C,4BAA4B,mEAAM;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,SAAS;AACT;AACA;AACA,YAAY,8EAAiB,oBAAoB,8EAAiB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,8EAAiB;AAC7B;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA,oBAAoB,8EAAiB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,8EAAiB;AACtC;AACA;AACA;AACA;AACA;AACA,kEAAkE,8EAAiB;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,8EAAiB,iDAAiD,8EAAiB;AAC/F,2DAA2D,gDAAgD,+BAA+B,EAAE;AAC5I;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,8BAA8B,EAAE;AAC/F;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;AACA;AACA,2BAA2B,kBAAkB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,KAAK;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,8EAAiB;AAClC;AACA,gBAAgB,mEAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,wBAAwB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,qEAAQ;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE;AACnE;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,8EAAiB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,8EAAiB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,0BAA0B;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,yDAAI;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,qEAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,wCAAwC,WAAW;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,aAAa;AACpC;AACA;AACA;AACA,8BAA8B,iBAAiB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,wBAAwB;AACvC,eAAe,UAAU;AACzB,eAAe,UAAU;AACzB,eAAe,UAAU;AACzB;AACA;AACA;AACA,YAAY,8EAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,qEAAQ;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,8EAAiB;AACzE;AACA,wCAAwC,mEAAM;AAC9C;AACA;AACA,oCAAoC,mEAAM;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,yCAAyC,8EAAiB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,gCAAgC,8EAAiB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,8EAAiB;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,8EAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA,gBAAgB,8EAAiB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,2BAA2B;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,wBAAwB;AACvC,eAAe,UAAU;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,wBAAwB;AACvC,eAAe,UAAU;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,wBAAwB;AACvC,eAAe,UAAU;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,wBAAwB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,kBAAkB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,kBAAkB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB,eAAe,8EAAiB;AAC9D;AACA,YAAY,4EAAa,EAAE,uCAAuC;AAClE,YAAY,0EAAW;AACvB;AACA;AACA;AACA;AACA,IAAI,oEAAO,EAAE,6BAA6B;AAC1C;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ,GAAG;AACf;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,oEAAO,GAAG;AACd;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,uEAAU,IAAI;AAClB;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,0EAAqB;AACzB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,8DAAS;AACrD;AACA;AACA;AACA;AACA;AACA,2BAA2B,oEAAO;AAClC;AACA,YAAY,iEAAY;AACxB;AACA,0BAA0B;AAC1B,wBAAwB,yDAAI;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,qEAAQ;AACpB;AACA;AACA;AACA;AACA,iDAAiD,sDAAsD;AACvG;AACA;AACA,QAAQ,uEAAU,gBAAgB,0CAA0C;AAC5E,oDAAoD,uBAAuB;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,8EAAiB;AAC7B;AACA;AACA;AACA;AACA,gCAAgC,iBAAiB;AACjD;AACA;AACA,gCAAgC,uBAAuB;AACvD;AACA;AACA;AACA;AACA;AACA,YAAY,qEAAQ;AACpB;AACA,0BAA0B,yEAAY,kBAAkB,uBAAuB;AAC/E,6BAA6B,yEAAY,kBAAkB,qBAAqB;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,4DAAO;AACnB;AACA;AACA;AACA;AACA,wDAAwD,mCAAmC;AAC3F;AACA,4BAA4B,wEAAW;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,wFAAwF;AAC3H,oCAAoC,wBAAwB;AAC5D,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA,kDAAkD,0BAA0B;AAC5E,QAAQ,mEAAM;AACd;AACA;AACA,QAAQ,qEAAQ;AAChB;AACA,YAAY,qEAAQ;AACpB;AACA,YAAY,4DAAO;AACnB;AACA;AACA,kCAAkC;AAClC;AACA,mCAAmC;AACnC;AACA,oCAAoC,+EAAgB;AACpD;AACA;AACA;AACA;AACA,8BAA8B,0BAA0B;AACxD;AACA;AACA,eAAe,wEAAW,qBAAqB,4DAAK;AACpD;AACA;AACA;AACA,sCAAsC,qEAAQ;AAC9C;AACA;AACA;AACA,yCAAyC,uEAAU;AACnD,0CAA0C,uEAAU;AACpD;AACA;AACA;AACA,wBAAwB,4DAAO;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,sCAAsC,qEAAQ;AAC9C,iBAAiB,8EAAiB;AAClC,uCAAuC;AACvC;AACA,wBAAwB,4DAAO;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,mEAAM;AACd;AACA;AACA,QAAQ,wEAAW;AACnB,YAAY,4DAAO;AACnB,YAAY,wEAAW;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,sEAAS;AACjB;AACA,0DAA0D,gCAAgC;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,SAAS;AAC3D;AACA;AACA;AACA,gBAAgB,sEAAS;AACzB,gBAAgB,qEAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,uEAAU;AAC/C;AACA;AACA;AACA;AACA,aAAa,mEAAM;AACnB,YAAY,sEAAS;AACrB;AACA;AACA;AACA,iDAAiD,8BAA8B,kBAAkB,EAAE;AACnG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,SAAS;AACrD;AACA;AACA,gDAAgD;AAChD,iBAAiB;AACjB;AACA;AACA;AACA;AACA,yCAAyC;AACzC,aAAa;AACb,8CAA8C,mDAAmD;AACjG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,oEAAO;AACnB;AACA,2DAA2D,kCAAkC,EAAE;AAC/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,sEAAS;AACjB,sDAAsD,0BAA0B;AAChF;AACA,4DAA4D,qBAAqB;AACjF,sDAAsD,6BAA6B,kBAAkB,EAAE;AACvG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,mEAAM;AACrB;AACA;AACA;AACA,sBAAsB,mEAAM;AAC5B;AACA,qCAAqC,uEAAU;AAC/C;AACA;AACA,qCAAqC,uEAAU;AAC/C;AACA,gCAAgC,uEAAU;AAC1C;AACA;AACA,8DAA8D,gCAAgC;AAC9F;AACA;AACA,uDAAuD,oCAAoC;AAC3F;AACA,gDAAgD,4BAA4B;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,gDAAgD,gCAAgC;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,wDAAwD,qCAAqC;AAC7F;AACA;AACA;AACA;AACA;AACA,QAAQ,mEAAM;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,wEAAW,CAAC,mEAAM;AACvD;AACA;AACA;AACA;AACA;AACA,0DAA0D,qBAAqB;AAC/E;AACA,kDAAkD,oCAAoC;AACtF;AACA;AACA;AACA,8CAA8C,qCAAqC;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,0BAA0B;AACjF;AACA,uDAAuD,iCAAiC;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,OAAO;AACtC,+FAA+F,0CAA0C;AACzI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mFAAmF,qBAAqB;AACxG;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,wBAAwB;AAChF;AACA;AACA,mEAAmE,qBAAqB;AACxF;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,iBAAiB;AACjB;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gFAAgF;AAChF,SAAS;AACT,QAAQ,mEAAM,8DAA8D,mEAAM;AAClF;AACA;AACA,0BAA0B,8DAAO;AACjC;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,wBAAwB,QAAQ,iBAAiB,UAAU,iBAAiB;AAC5E,SAAS;AACT;AACA;AACA;AACA,uCAAuC,+EAAgB;AACvD,QAAQ,mEAAM,2EAA2E,iCAAiC;AAC1H;AACA;AACA,eAAe,wEAAW,iBAAiB,8DAAO;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,sEAAS;AACpC,yBAAyB,uEAAU,OAAO,iBAAiB;AAC3D,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,mEAAM;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,mEAAM;AACd,QAAQ,mEAAM;AACd,QAAQ,mEAAM;AACd;AACA;AACA;AACA,eAAe,mEAAM;AACrB;AACA;AACA,wCAAwC,sEAAS;AACjD;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,iEAAY;AACxB,YAAY,iEAAY;AACxB;AACA;AACA;AACA,YAAY,iEAAY,KAAK,mEAAM;AACnC;AACA;AACA,YAAY,iEAAY;AACxB,YAAY,iEAAY;AACxB;AACA;AACA;AACA;AACA,QAAQ,uEAAU,gBAAgB,kCAAkC;AACpE;AACA;AACA,4BAA4B,mEAAM;AAClC;AACA,YAAY,iEAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,2BAA2B,oDAAoD;AAC/E,4BAA4B,wFAAwF;AACpH;AACA,SAAS;AACT;AACA,gCAAgC,iBAAiB;AACjD;AACA;AACA,gCAAgC,eAAe;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,iEAAY;AACpB,QAAQ,iEAAY;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,mEAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,mEAAM;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,iEAAY;AACpB,QAAQ,iEAAY;AACpB;AACA,QAAQ,mEAAM;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,oEAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,2CAA2C;AACrF;AACA;AACA,QAAQ,mEAAM,CAAC,mEAAM;AACrB;AACA,YAAY,mEAAM,CAAC,mEAAM;AACzB;AACA,QAAQ,mEAAM;AACd;AACA;AACA;AACA;AACA;AACA,sCAAsC,2CAA2C;AACjF;AACA;AACA;AACA;AACA,kCAAkC,uEAAU;AAC5C,iCAAiC,uEAAU;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,SAAS;AACtD,mBAAmB,wEAAW,CAAC,mEAAM;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,kBAAkB;AAC5D;AACA;AACA;AACA;AACA,8CAA8C,wBAAwB;AACtE;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,mEAAM;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,oEAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2EAA2E,oEAAO;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,0CAA0C;AACpF;AACA,uBAAuB,sEAAS;AAChC,YAAY,mEAAM;AAClB,SAAS;AACT;AACA,YAAY,mEAAM,CAAC,mEAAM;AACzB;AACA;AACA,qBAAqB,mEAAM;AAC3B;AACA,YAAY,mEAAM;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,0CAA0C;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,sEAAS;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,mEAAM;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,kBAAkB;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,gBAAgB,uBAAuB;AAC3E,gCAAgC,wFAAwF,iBAAiB;AACzI,gCAAgC,kBAAkB;AAClD;AACA;AACA;AACA;AACA,+BAA+B,uBAAuB;AACtD,gCAAgC;AAChC,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,sDAAsD,oCAAoC,EAAE;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,mEAAM;AAClB;AACA;AACA;AACA,YAAY,mEAAM;AAClB;AACA;AACA;AACA,YAAY,iEAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,iEAAY;AACxB,YAAY,iEAAY;AACxB;AACA,gBAAgB,iEAAY,QAAQ,mEAAM;AAC1C;AACA,YAAY,iEAAY,QAAQ,mEAAM;AACtC;AACA;AACA,YAAY,iEAAY;AACxB,YAAY,iEAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,SAAS;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,8EAAiB;AAC/B;AACA;AACA;AACA;AACA;AACA,gCAAgC,mEAAM;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,mEAAM,CAAC,mEAAM;AACjC;AACA;AACA,oBAAoB,mEAAM;AAC1B;AACA;AACA;AACA;AACA;AACA,6BAA6B,mEAAM;AACnC;AACA;AACA,gBAAgB,mEAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,mEAAM,CAAC,mEAAM;AAC7B;AACA;AACA,gBAAgB,mEAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,mEAAM,CAAC,oEAAO;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,mEAAM;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,mEAAM,CAAC,mEAAM;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,wEAAW;AACvB;AACA;AACA,YAAY,qEAAQ;AACpB;AACA;AACA;AACA;AACA,YAAY,qEAAQ;AACpB;AACA;AACA,YAAY,wEAAW;AACvB;AACA;AACA;AACA,QAAQ,mEAAM;AACd;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,wEAAW;AACvB,qCAAqC,mEAAM,iFAAiF,gCAAgC;AAC5J;AACA,wCAAwC,mEAAM;AAC9C;AACA;AACA;AACA,YAAY,qEAAQ;AACpB;AACA,YAAY,mEAAM;AAClB;AACA;AACA,gBAAgB,mEAAM,CAAC,mEAAM;AAC7B;AACA;AACA;AACA;AACA;AACA,gBAAgB,iBAAiB;AACjC,gBAAgB,iBAAiB;AACjC;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA,+CAA+C,mEAAM;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,8EAAiB;AAC7C;AACA,wCAAwC,6EAAQ;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,mEAAM;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD;AACpD;AACA,qBAAqB,UAAU,EAAE;AACjC;AACA;AACA;AACA;AACA,4CAA4C,mEAAM;AAClD;AACA,gCAAgC,mEAAM,CAAC,mEAAM;AAC7C;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,0EAAqB;AACzB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,8DAAS;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,8EAAiB;AAC9C,yFAAyF,8EAAiB;AAC1G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,yEAAoB;AAC7D;AACA,wCAAwC,oDAAoD;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,qEAAQ;AACtB;AACA,+BAA+B,oEAAO;AACtC,iBAAiB,8EAAiB;AAClC;AACA;AACA;AACA;AACA,iCAAiC,qEAAQ;AACzC;AACA;AACA;AACA;AACA,2BAA2B,wCAAwC;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,qEAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,yEAAoB;AACrD,8BAA8B;AAC9B,4BAA4B,yDAAI;AAChC;AACA,oCAAoC,wEAAwE;AAC5G;AACA;AACA,gDAAgD,wEAAW;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,sBAAsB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,8EAAiB;AACjD;AACA;AACA,iBAAiB,8EAAiB;AAClC;AACA;AACA;AACA,6BAA6B,8EAAiB;AAC9C;AACA;AACA,gDAAgD,mBAAmB;AACnE;AACA;AACA;AACA;AACA,6BAA6B,8EAAiB;AAC9C;AACA;AACA,gDAAgD,qBAAqB;AACrE;AACA;AACA;AACA;AACA,6BAA6B,8EAAiB;AAC9C,gDAAgD,wCAAwC;AACxF;AACA;AACA;AACA;AACA,6BAA6B,8EAAiB;AAC9C;AACA,gDAAgD,gCAAgC;AAChF;AACA;AACA;AACA;AACA,6BAA6B,8EAAiB;AAC9C,gDAAgD,4BAA4B;AAC5E;AACA;AACA;AACA;AACA,6BAA6B,8EAAiB;AAC9C,gDAAgD,0BAA0B;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA,cAAc,qEAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,oIAAoI;AACxK;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,8EAAiB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA,4BAA4B,qEAAQ;AACpC;AACA;AACA;AACA;AACA,oCAAoC,8EAAiB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,iEAAY;AACpB,QAAQ,iEAAY;AACpB,QAAQ,iEAAY;AACpB,QAAQ,iEAAY;AACpB;AACA,YAAY,iEAAY;AACxB;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA,YAAY,iEAAY;AACxB;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA,iBAAiB,8EAAiB;AAClC,qBAAqB,8EAAiB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,sCAAsC;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,sCAAsC;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,iEAAY;AAC5B;AACA;AACA,gBAAgB,iEAAY;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,sCAAsC;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,iEAAY;AACpB,QAAQ,iEAAY;AACpB,QAAQ,iEAAY;AACpB,QAAQ,iEAAY;AACpB;AACA,YAAY,iEAAY;AACxB;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA,YAAY,iEAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,cAAc,qEAAQ;AACtB;AACA,gBAAgB,mEAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,8EAAiB;AAClC;AACA,gBAAgB,mEAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,oBAAoB;AACnC;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE,wBAAwB,EAAE;AAC3C,gBAAgB;AAChB;AACA;AACA;AACA;AACA,oCAAoC,iBAAiB;AACrD;AACA;AACA;AACA,oCAAoC,iBAAiB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,kCAAkC;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,gBAAgB;AAChB;AACA;AACA;AACA;AACA,oCAAoC,gBAAgB;AACpD;AACA;AACA;AACA,oCAAoC,kBAAkB;AACtD;AACA;AACA;AACA,oCAAoC,oBAAoB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,qEAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,wEAAW;AAC3B;AACA;AACA;AACA;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ,GAAG;AACf;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,0EAAqB;AACzB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAE8e;AAC9e;;;;;;;;;;;;;ACnnaA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA8d;AACpa;AACD;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,oBAAoB,YAAY;AACjD,gBAAgB,gBAAgB;AAChC;AACA;AACA;AACA;AACA,qBAAqB,mEAAM,GAAG;AAC9B,6BAA6B,mEAAM,GAAG;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,SAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,SAAS;AACzB;AACA;AACA;AACA;AACA;AACA,qBAAqB,mEAAM,GAAG;AAC9B;AACA,8BAA8B;AAC9B,uBAAuB,uBAAuB;AAC9C,gBAAgB,8EAAiB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,oBAAoB,GAAG;AACxC,gBAAgB,gBAAgB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,mEAAM,GAAG;AAC9B;AACA,qBAAqB,mEAAM,GAAG;AAC9B,6BAA6B,mEAAM,GAAG;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,8EAAiB;AACjE;AACA,8BAA8B;AAC9B;AACA,uBAAuB,uBAAuB;AAC9C;AACA,gBAAgB,8EAAiB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,8EAAiB;AACzE;AACA;AACA;AACA;AACA;AACA,iEAAiE,oCAAoC,mBAAmB,EAAE;AAC1H;AACA;AACA,0DAA0D,oCAAoC,mBAAmB,EAAE;AACnH;AACA;AACA;AACA,oFAAoF,8EAAiB;AACrG,yDAAyD,6DAA6D;AACtH;AACA;AACA;AACA;AACA;AACA,oBAAoB,oEAAO;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE,8EAAiB;AACnF;AACA,gCAAgC;AAChC,oBAAoB,kEAAK;AACzB,4DAA4D,yCAAyC;AACrG;AACA;AACA;AACA;AACA,wBAAwB,oEAAO;AAC/B;AACA;AACA;AACA,qBAAqB,8EAAiB;AACtC;AACA,wDAAwD,6DAA6D;AACrH;AACA;AACA;AACA;AACA,wBAAwB,oEAAO;AAC/B;AACA;AACA;AACA,oBAAoB,oEAAO;AAC3B;AACA;AACA,oBAAoB,oEAAO;AAC3B;AACA;AACA;AACA;AACA,gBAAgB,qEAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,oBAAoB,GAAG;AACxC,gBAAgB,gBAAgB;AAChC;AACA;AACA;AACA;AACA,qBAAqB,mEAAM,GAAG;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,mBAAmB;AACnC,gBAAgB,QAAQ;AACxB,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,sEAAS;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,QAAQ;AACxB,gBAAgB,mBAAmB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,oBAAoB,GAAG;AACxC,gBAAgB,cAAc;AAC9B,gBAAgB,iBAAiB;AACjC;AACA;AACA,wBAAwB,mEAAM,GAAG;AACjC,2BAA2B,0DAAK;AAChC;AACA;AACA;AACA;AACA,uBAAuB,eAAe;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,oBAAoB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,UAAU;AAC1B,gBAAgB,OAAO;AACvB,gBAAgB,kBAAkB;AAClC;AACA,uDAAuD,0DAAK;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,0BAA0B;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,oBAAoB,GAAG;AACxC,gBAAgB,MAAM;AACtB;AACA;AACA;AACA,mBAAmB,gEAAW;AAC9B;AACA;AACA;AACA;AACA;AACA,gBAAgB,oBAAoB;AACpC,gBAAgB,gBAAgB;AAChC;AACA;AACA,qBAAqB,mEAAM,GAAG;AAC9B,qBAAqB,mEAAM,GAAG;AAC9B;AACA;AACA;AACA;AACA;AACA,uBAAuB,mBAAmB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,uBAAuB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,uBAAuB,iBAAiB;AACxC,iBAAiB,8EAAiB;AAClC,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,kEAAK;AACb;AACA,YAAY,qEAAQ;AACpB;AACA;AACA,QAAQ,uEAAU;AAClB;AACA;AACA;AACA;AACA,2BAA2B,qBAAqB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,iBAAiB,oBAAoB,GAAG;AACxC,gBAAgB,gBAAgB;AAChC;AACA;AACA;AACA;AACA;AACA,6CAA6C,iCAAiC,uBAAuB,EAAE;AACvG,qBAAqB,mEAAM,GAAG;AAC9B,wBAAwB,mEAAM,GAAG;AACjC,6BAA6B,oEAAO;AACpC;AACA;AACA,8BAA8B;AAC9B,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4EAA4E;AAC5E,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,mEAAM;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,mEAAM;AAC9B;AACA;AACA,8CAA8C,8EAAiB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,mEAAM;AACd;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,iBAAiB,oBAAoB,GAAG;AACxC,gBAAgB,cAAc;AAC9B,gBAAgB,UAAU;AAC1B;AACA;AACA;AACA;AACA;AACA,6BAA6B,oEAAO;AACpC,wBAAwB,mEAAM,GAAG;AACjC,qBAAqB,mEAAM,GAAG;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,mEAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wEAAwE,4DAAO,GAAG,2DAAM;AACxF,iDAAiD,kDAAkD;AACnG;AACA;AACA;AACA,qBAAqB,mEAAM,GAAG;AAC9B,6BAA6B,mEAAM,GAAG;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB,iBAAiB,8EAAiB;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gFAAgF,8EAAiB;AACjG;AACA,iBAAiB,kFAAkF,KAAK;AACxG,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,8EAAiB;AAC3D;AACA;AACA;AACA;AACA;AACA,gBAAgB,mEAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,mEAAM;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,WAAW;AAChC,qBAAqB,WAAW;AAChC,wBAAwB,WAAW;AACnC,uBAAuB,WAAW;AAClC,uBAAuB,WAAW;AAClC,wBAAwB,WAAW;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,WAAW;AACjC;AACA;AACA,wBAAwB,WAAW;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA,YAAY,kEAAK;AACjB;AACA;AACA;AACA;AACA;AACA,4CAA4C,iEAAiE;AAC7G;AACA;AACA,4CAA4C,gDAAgD;AAC5F,sDAAsD,iCAAiC;AACvF;AACA,gBAAgB,mEAAM;AACtB;AACA;AACA,YAAY,mEAAM;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,mEAAM,GAAG;AAC9B,6BAA6B,mEAAM,GAAG;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,8EAAiB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gFAAgF,8EAAiB;AACjG;AACA,iBAAiB,kFAAkF,KAAK;AACxG,SAAS;AACT,SAAS,8EAAiB;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,oEAAO;AACxC;AACA;AACA;AACA,gBAAgB,mEAAM;AACtB;AACA;AACA;AACA,iCAAiC,oEAAO;AACxC;AACA;AACA;AACA,gBAAgB,mEAAM;AACtB;AACA;AACA;AACA;AACA;AACA,6DAA6D,mCAAmC,KAAK;AACrG,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,gCAAgC,KAAK;AACnG,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,cAAc;AAC9B,gBAAgB,OAAO;AACvB,gBAAgB,gBAAgB;AAChC;AACA;AACA,qBAAqB,mEAAM,GAAG;AAC9B,6BAA6B,mEAAM,GAAG;AACtC;AACA;AACA,4CAA4C,8EAAiB;AAC7D,sDAAsD,gCAAgC,KAAK;AAC3F,SAAS;AACT,QAAQ,mEAAM;AACd;AACA;AACA;AACA;AACA;AACA,gBAAgB,UAAU;AAC1B,gBAAgB,OAAO;AACvB,gBAAgB,gBAAgB;AAChC;AACA;AACA,qBAAqB,mEAAM,GAAG;AAC9B;AACA,mEAAmE,4DAAO,GAAG,2DAAM;AACnF;AACA;AACA,qBAAqB,8EAAiB;AACtC,aAAa;AACb;AACA;AACA;AACA,CAAC,4BAA4B;AAC7B;AACA;AACA,YAAY,oBAAoB,iBAAiB;AACjD,WAAW,cAAc;AACzB;AACA;AACA;AACA,QAAQ,8EAAiB;AACzB,YAAY,8EAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA,yBAAyB,8EAAiB;AAC1C,kDAAkD,qEAAQ;AAC1D,iBAAiB,8EAAiB;AAClC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,kEAAa;AACzC;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA,sCAAsC,8DAAS;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,qEAAQ;AAC/D;AACA;AACA;AACA;AACA,4BAA4B,qEAAQ;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,qEAAQ;AACtC;AACA;AACA;AACA;AACA,4BAA4B,qEAAQ;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,8EAAiB;AAC1C,wBAAwB,mEAAM;AAC9B;AACA;AACA;AACA;AACA;AACA,yBAAyB,qEAAQ;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,qEAAQ;AAC/D;AACA;AACA;AACA;AACA,4BAA4B,qEAAQ;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,qEAAQ;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,uEAAU;AACtB;AACA;AACA;AACA;AACA,YAAY,qEAAQ;AACpB;AACA;AACA,YAAY,wEAAW;AACvB;AACA;AACA;AACA,oCAAoC,uEAAU;AAC9C,mCAAmC,uEAAU;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,qEAAQ;AACpB,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,cAAc,uEAAkB,6BAA6B;AACrG;AACA,4DAA4D,+BAA+B;AAC3F,iEAAiE,gEAAgE;AACjI,yDAAyD,kEAAkE;AAC3H;AACA;AACA,4BAA4B,sBAAsB;AAClD,iBAAiB;AACjB;AACA;AACA;AACA,yCAAyC,oEAAO;AAChD,uEAAuE,2CAA2C;AAClH;AACA,2DAA2D;AAC3D;AACA,wBAAwB,mEAAM;AAC9B;AACA,oBAAoB,mEAAM;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,oEAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,uEAAkB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,oEAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,2BAA2B,gBAAgB,EAAE,2BAA2B;AACxE,gCAAgC,gBAAgB,EAAE,gCAAgC;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,qEAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,gBAAgB,EAAE,2BAA2B;AACpF,4CAA4C,gBAAgB,EAAE,gCAAgC;AAC9F,6CAA6C,gBAAgB,EAAE,iCAAiC;AAChG,0BAA0B,8DAAS;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,8EAAc;AAC5C;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,+BAA+B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,8EAAiB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,+BAA+B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,8BAA8B;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,yBAAyB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,yBAAyB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,oEAAO;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,8EAAiB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,kEAAK,aAAa,8DAA8D;AACxG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,oEAAO;AACpC,iBAAiB,8EAAiB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,qEAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,6BAA6B;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,oEAAO;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,8EAAiB;AACzC;AACA;AACA;AACA,iBAAiB,8EAAiB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,8EAAiB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,8EAAiB,QAAQ,8EAAiB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,iEAAY;AACpB,QAAQ,iEAAY;AACpB,QAAQ,iEAAY;AACpB,QAAQ,iEAAY;AACpB,QAAQ,iEAAY;AACpB,+BAA+B,0DAAK,gBAAgB,4CAA4C;AAChG;AACA;AACA,QAAQ,iEAAY;AACpB,QAAQ,iEAAY;AACpB,QAAQ,iEAAY;AACpB,QAAQ,iEAAY;AACpB,QAAQ,iEAAY;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,8EAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,kEAAK,aAAa,8DAA8D;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA,4BAA4B;AAC5B;AACA;AACA,4BAA4B;AAC5B;AACA;AACA,QAAQ,kEAAK;AACb;AACA,YAAY,kEAAK,aAAa,2GAA2G;AACzI;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,wEAAW;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,gEAAW;AAC/D;AACA;AACA;AACA,YAAY,8EAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,8EAAiB;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,8EAAiB,4BAA4B,8EAAiB;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,0DAAK;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,gEAAW;AAClD;AACA;AACA;AACA;AACA;AACA,gDAAgD,qEAAQ;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,gBAAgB,mEAAM;AACtB,oCAAoC,iDAAiD;AACrF;AACA;AACA,gDAAgD,uBAAuB;AACvE;AACA;AACA;AACA;AACA;AACA,4CAA4C,uBAAuB;AACnE;AACA;AACA;AACA,aAAa,qEAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,oEAAe;AAChD;AACA;AACA,YAAY,gFAAmB;AAC/B;AACA;AACA;AACA,YAAY,gFAAmB;AAC/B;AACA;AACA,YAAY,gFAAmB;AAC/B;AACA;AACA;AACA;AACA,YAAY,iFAAoB;AAChC;AACA;AACA,YAAY,iFAAoB;AAChC;AACA;AACA,YAAY,iFAAoB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,mCAAmC;AAC9D;AACA;AACA;AACA;AACA;AACA,uCAAuC,oDAAoD;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,0CAA0C;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,2CAA2C;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,4CAA4C;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,iBAAiB,oEAAO;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,oEAAO;AAC5B;AACA;AACA;AACA;AACA;AACA,oBAAoB,qEAAQ;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,qEAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,qEAAQ;AACrB;AACA;AACA,0BAA0B,qEAAQ;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE,gCAAgC;AACnG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,qEAAQ;AACrB;AACA,YAAY,uEAAU,gBAAgB,8BAA8B;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,yEAAY;AACpC;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,wEAAW;AACnB;AACA;AACA;AACA,cAAc,qEAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,qEAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,cAAc,uEAAkB,6BAA6B;AAC7F;AACA;AACA;AACA;AACA;AACA,gBAAgB,+BAA+B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,8EAAiB;AAC7B;AACA;AACA;AACA;AACA,oDAAoD,gEAAW;AAC/D;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA,mCAAmC,8BAA8B;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,8EAAiB;AACvE;AACA,uCAAuC,kBAAkB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,qCAAqC;AACrD;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B,2BAA2B,iBAAiB;AAC5C,qBAAqB,8EAAiB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,QAAQ;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,gEAAW;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,yBAAyB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,+CAA+C;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,8EAAiB;AAChD;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,oBAAoB,8EAAiB,eAAe,8EAAiB;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,qEAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B,iBAAiB,8EAAiB;AAClC;AACA,mCAAmC,sCAAsC;AACzE;AACA;AACA,yBAAyB,8EAAiB;AAC1C,4BAA4B,8EAAiB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,8EAAiB;AAClC;AACA;AACA,iBAAiB,8EAAiB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,+BAA+B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,+BAA+B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,+BAA+B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,+BAA+B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,+BAA+B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,iBAAiB,oBAAoB,GAAG;AACxC,gBAAgB,OAAO;AACvB;AACA;AACA;AACA,sDAAsD,gEAAW;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,iBAAiB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,oEAAO;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,mEAAM;AAClB;AACA;AACA;AACA;AACA,2BAA2B,sBAAsB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B,gBAAgB,+BAA+B;AAC/C;AACA;AACA,0DAA0D,gEAAW;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,8EAAiB;AACtC;AACA;AACA;AACA;AACA;AACA,gBAAgB,mEAAM;AACtB;AACA;AACA,gBAAgB,mEAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,qCAAqC;AACrD;AACA;AACA;AACA,2BAA2B,iBAAiB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,mEAAM,GAAG;AAC5B;AACA,uBAAuB,oCAAoC;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,yCAAyC;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ,GAAG;AACf;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,oEAAO;AACX;AACA;AACA,IAAI,qEAAQ,EAAE,qDAAqD;AACnE;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,0EAAqB;AACzB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,8EAAiB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,qEAAQ;AACtB;AACA,iGAAiG,gCAAgC;AACjI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,qEAAQ;AACtB;AACA,YAAY,mEAAM;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,qEAAQ;AAC1B;AACA;AACA;AACA;AACA;AACA,oBAAoB,iEAAY;AAChC;AACA;AACA;AACA;AACA;AACA,2CAA2C,qEAAQ;AACnD;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,iEAAY,8CAA8C,qEAAQ;AACtF,oBAAoB,iEAAY;AAChC;AACA;AACA;AACA;AACA;AACA,gBAAgB,iEAAY;AAC5B;AACA,gBAAgB,iEAAY;AAC5B;AACA;AACA;AACA;AACA;AACA,YAAY,8EAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,uEAAU;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA;AACA,iBAAiB,8EAAiB;AAClC;AACA;AACA;AACA;AACA;AACA,+BAA+B,sBAAsB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,qEAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,8EAAiB;AAC/C;AACA;AACA;AACA;AACA;AACA,YAAY,qEAAQ;AACpB;AACA,gBAAgB,8EAAiB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,cAAc;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,cAAc;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,mEAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,mEAAM;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,8EAAiB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,oBAAoB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,qEAAQ;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,uBAAuB;AAC1D;AACA;AACA;AACA,iFAAiF,gEAAW;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iFAAiF,gEAAW;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,8EAAiB;AAClC;AACA;AACA;AACA,YAAY,qEAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,qEAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,qEAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,qEAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,qEAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,qEAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,qEAAQ;AAC9B;AACA;AACA;AACA;AACA,2EAA2E,gEAAW;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,qEAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,qBAAqB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,mEAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,mBAAmB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,0CAA0C;AACpF;AACA;AACA;AACA;AACA,kBAAkB,8EAAiB;AACnC,kBAAkB,8EAAiB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,6BAA6B,gDAAgD;AAC1G,uBAAuB,6BAA6B;AACpD;AACA;AACA,uBAAuB,kCAAkC;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA,YAAY,mEAAM;AAClB;AACA;AACA;AACA,2BAA2B,+BAA+B;AAC1D;AACA;AACA;AACA;AACA;AACA,YAAY,mEAAM;AAClB;AACA;AACA;AACA,2BAA2B,8BAA8B;AACzD;AACA;AACA;AACA;AACA,2BAA2B,8BAA8B;AACzD;AACA;AACA;AACA;AACA,2BAA2B,+BAA+B;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,IAAI,IAAI;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,4BAA4B;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,wEAAW;AACnC;AACA;AACA;AACA,wBAAwB,qEAAQ;AAChC;AACA;AACA;AACA;AACA,+BAA+B,sBAAsB;AACrD;AACA;AACA;AACA,oBAAoB,qEAAQ;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,+BAA+B;AACtD;AACA;AACA;AACA;AACA;AACA,uBAAuB,2BAA2B;AAClD;AACA,gDAAgD,IAAI,IAAI;AACxD,iDAAiD,IAAI,IAAI;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,IAAI,IAAI;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,IAAI,IAAI;AACxC;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,2BAA2B,4BAA4B;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,mEAAM;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,oEAAO;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD;AACjD;AACA;AACA,mDAAmD,yDAAI;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,qCAAqC;AAC5E;AACA;AACA;AACA,yCAAyC,mBAAmB;AAC5D,0CAA0C,oBAAoB;AAC9D;AACA,YAAY,qEAAQ;AACpB;AACA;AACA;AACA;AACA,kCAAkC,0DAA0D;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,8EAAiB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C,4IAA4I;AAC5I;AACA;AACA;AACA,gBAAgB,8EAAiB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,gBAAgB,6DAAQ;AACxB,2CAA2C;AAC3C,0EAA0E;AAC1E;AACA;AACA,2CAA2C,6DAA6D;AACxG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C,sIAAsI;AACtI;AACA,oBAAoB,mEAAM;AAC1B,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C,oHAAoH;AACpH;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,YAAY,mEAAM;AAClB,YAAY,yEAAY,eAAe,8DAAS;AAChD;AACA;AACA;AACA;AACA;AACA,8BAA8B,wEAAW;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,8DAAS;AACrB;AACA;AACA;AACA;AACA,4BAA4B,eAAe;AAC3C;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,gBAAgB,mEAAM;AACtB;AACA,gEAAgE,yEAAyE;AACzI;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,iFAAoB;AAC7C;AACA;AACA;AACA,QAAQ,mEAAM;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,oEAAO,gBAAgB,qBAAqB;AAC9D;AACA,uBAAuB,yEAAY;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,eAAe,oEAAO,cAAc,mBAAmB;AACvD;AACA;AACA,sCAAsC,qCAAqC;AAC3E,qCAAqC,oCAAoC;AACzE;AACA;AACA;AACA,gDAAgD,oEAAO,kCAAkC,oBAAoB;AAC7G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,yEAAY,eAAe,8DAAS;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,0EAAqB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,QAAQ,8EAAiB;AACzB;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEqH;AACrH;;;;;;;;;;;;;ACnjJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA8mB;AAC7jB;AACiH;AAC7E;AAC3B;AACX;;AAE/C;AACA;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,8DAAS;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,4DAAO;AAC9B;AACA,wBAAwB,4DAAO;AAC/B;AACA;AACA;AACA;AACA;AACA,yBAAyB,wEAAW;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,0DAAK,gBAAgB,4EAA4E;AAChI,QAAQ,iEAAY;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,8EAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,4BAA4B;AAC/E,mDAAmD,4BAA4B;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,sEAAS;AAC3B,sBAAsB,sEAAS;AAC/B;AACA,YAAY,mEAAM;AAClB,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,mEAAM;AACd;AACA,YAAY,mEAAM;AAClB,iBAAiB,8EAAiB;AAClC,gBAAgB,mEAAM;AACtB;AACA;AACA,QAAQ,iEAAY;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA,sBAAsB,sEAAS;AAC/B;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,yDAAyD,kDAAkD;AAC3G;AACA,kDAAkD,+CAA+C;AACjG,iDAAiD,iEAAiE;AAClH;AACA,iDAAiD,iDAAiD;AAClG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C;AAC5F;AACA,iDAAiD,iEAAiE;AAClH;AACA,gDAAgD,iEAAiE;AACjH;AACA,qDAAqD,gEAAgE;AACrH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,0DAAK,MAAM,iEAAiE;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,YAAY,iEAAY;AACxB,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,sEAAS;AACnC;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,8EAAiB;AAC5C;AACA,gBAAgB,8EAAiB;AACjC,gBAAgB,sEAAS;AACzB;AACA;AACA,gBAAgB,sEAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,aAAa;AAC7B,gBAAgB,aAAa;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,0EAAqB;AACzB;;AAEA;AACA;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,8DAAS;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,4DAAO;AAC9B;AACA,wBAAwB,4DAAO;AAC/B;AACA;AACA;AACA;AACA;AACA,qBAAqB,wEAAW;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,0DAAK,gBAAgB,4EAA4E;AAChI,QAAQ,iEAAY;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,iEAAY;AACpB;AACA;AACA,YAAY,8EAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,0EAAa,SAAS,4BAA4B;AAC1E,wBAAwB,0EAAa,SAAS,4BAA4B;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,wEAAW;AACnB,mBAAmB,sEAAS;AAC5B,uBAAuB,sEAAS;AAChC;AACA,YAAY,mEAAM;AAClB,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,mEAAM;AACd;AACA,YAAY,mEAAM;AAClB,iBAAiB,8EAAiB;AAClC,gBAAgB,mEAAM;AACtB;AACA;AACA,QAAQ,iEAAY;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA,qBAAqB,sEAAS;AAC9B;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,6BAA6B,0EAAa,SAAS,mDAAmD;AACtG;AACA,sBAAsB,0EAAa,SAAS,4CAA4C;AACxF,sBAAsB,0EAAa,SAAS,kEAAkE;AAC9G;AACA,oBAAoB,0EAAa,SAAS,iDAAiD;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,0EAAa,SAAS,6CAA6C;AACrF;AACA,sBAAsB,0EAAa,SAAS,kEAAkE;AAC9G;AACA,yBAAyB,0EAAa,SAAS,+DAA+D;AAC9G;AACA,wBAAwB,0EAAa,SAAS,gEAAgE;AAC9G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,cAAc,EAAE;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,0DAAK,OAAO,iEAAiE;AAC7F;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,YAAY,iEAAY;AACxB,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,cAAc,EAAE;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,sEAAS;AACnC;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,8EAAiB;AAC5C;AACA,gBAAgB,8EAAiB;AACjC,gBAAgB,sEAAS;AACzB;AACA;AACA,gBAAgB,sEAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,aAAa;AAC7B,gBAAgB,aAAa;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,0EAAqB;AACzB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,oCAAoC;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,uBAAuB;AAC5D,mCAAmC,mEAAM;AACzC;AACA;AACA,qCAAqC,uBAAuB;AAC5D,mCAAmC,mEAAM;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,mEAAM;AACzB;AACA;AACA;AACA;AACA,gBAAgB,mEAAM;AACtB;AACA;AACA;AACA;AACA,YAAY,mEAAM;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,kEAAa;AACzC;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA;AACA;AACA,uBAAuB,kEAAa;AACpC;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,uEAAU;AACd;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA;AACA;AACA,oCAAoC,kEAAa;AACjD;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA;AACA;AACA;AACA,sCAAsC,8DAAS;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,8DAAS,GAAG;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,wEAAW;AACnC,iBAAiB;AACjB,6BAA6B,qEAAQ;AACrC,gBAAgB,wEAAW;AAC3B;AACA;AACA,gBAAgB,qEAAQ;AACxB;AACA;AACA,+CAA+C,KAAK,wEAAW,wBAAwB;AACvF,gBAAgB,mEAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,qEAAQ;AACrC;AACA,0DAA0D,sDAAsD;AAChH,0DAA0D,WAAW;AACrE;AACA;AACA;AACA,YAAY,mEAAM;AAClB;AACA;AACA,YAAY,qEAAQ;AACpB;AACA;AACA;AACA,kCAAkC,wEAAW;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,qEAAQ;AACpD;AACA,YAAY,gFAAmB;AAC/B,4BAA4B,oEAAe;AAC3C,gBAAgB,mEAAM,gBAAgB,oEAAe;AACrD;AACA,YAAY,iFAAoB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,sDAAsD;AACvG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,qEAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,8DAAQ,sCAAsC,UAAU,iBAAiB,EAAE;AACnG,gCAAgC,eAAe;AAC/C,gBAAgB,qEAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,mEAAM;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,sEAAS;AACvC,qDAAqD,SAAS;AAC9D;AACA;AACA,oBAAoB,iEAAY;AAChC;AACA;AACA,wBAAwB,4DAAO;AAC/B,4BAA4B,0DAAK,UAAU,wCAAwC;AACnF;AACA;AACA,wBAAwB,iEAAY;AACpC;AACA;AACA;AACA;AACA;AACA,gBAAgB,iEAAY;AAC5B,mCAAmC,kFAAmB;AACtD,oBAAoB,iEAAY;AAChC;AACA;AACA;AACA,aAAa,4DAAO;AACpB;AACA;AACA,YAAY,iEAAY;AACxB,YAAY,iEAAY;AACxB;AACA;AACA,QAAQ,iEAAY;AACpB;AACA,wBAAwB,yEAAY,WAAW,uBAAuB;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,mEAAc;AAC1B;AACA;AACA,SAAS;AACT;AACA;AACA,YAAY,oEAAO;AACnB,iBAAiB,oEAAO;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,oEAAO;AACniEAAiE,sEAAS;AAC1E,mBAAmB,8EAAiB,iBAAiB,mEAAM;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,mEAAM;AAClD,kBAAkB,sEAAS;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,yCAAyC,qEAAQ;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,oEAAO;AAC9C;AACA;AACA,gCAAgC,oEAAO;AACvC;AACA;AACA,0CAA0C,wEAAW;AACrD,uCAAuC,wEAAW,WAAW,4DAAK;AAClE;AACA;AACA;AACA,4BAA4B,mEAAM;AAClC;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,oEAAO;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,8EAAiB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,oEAAO;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,oEAAO;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,8EAAiB;AAC7B;AACA;AACA,YAAY,8EAAiB;AAC7B;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,+FAA+F,sEAAS;AACxG;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,SAAS;AACzD,oBAAoB,oEAAO;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,8EAAiB;AAC7B;AACA;AACA,YAAY,8EAAiB;AAC7B;AACA;AACA;AACA;AACA,gCAAgC,4DAAO;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,qEAAQ;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,+EAAgB;AACtD;AACA;AACA,4CAA4C,qEAAQ;AACpD;AACA,4BAA4B,oEAAe;AAC3C,6CAA6C,oEAAe;AAC5D;AACA,gBAAgB,oEAAe;AAC/B;AACA,YAAY,iFAAoB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,0BAA0B;AACrD;AACA;AACA;AACA;AACA;AACA,2BAA2B,4DAAK;AAChC;AACA;AACA,6CAA6C,uBAAuB,IAAI;AACxE,gEAAgE;AAChE,qEAAqE,uBAAuB,IAAI,yBAAyB;AACzH;AACA;AACA;AACA;AACA,gCAAgC,mEAAM;AACtC;AACA;AACA;AACA;AACA,yBAAyB,mEAAM;AAC/B;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,mDAAmD,qDAAqD;AACxG,qDAAqD,uEAAkB;AACvE;AACA;AACA,SAAS;AACT;AACA,8EAA8E;AAC9E,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA,6CAA6C,6DAA6D;AAC1G;AACA,aAAa;AACb;AACA;AACA;AACA,eAAe,kEAAG,iBAAiB,aAAa,GAAG,uBAAuB;AAC1E;AACA;AACA;AACA;AACA;AACA,kEAAkE,qEAAQ;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,wEAAS;AAC3C;AACA;AACA;AACA,2CAA2C,oEAAO;AAClD;AACA,iDAAiD,gFAAiB;AAClE;AACA;AACA,kCAAkC,wEAAS;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,mEAAM;AAC9B;AACA;AACA,wBAAwB,mEAAM;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,yEAAY,qBAAqB,uBAAuB;AACpF;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,gDAAgD;AACxF,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,gHAAgH;AACtI;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,uBAAuB,8EAAiB,qBAAqB,oEAAO;AACpE,4BAA4B,mEAAM;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,wEAAS;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,wEAAS;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,4DAAO;AACvB;AACA;AACA;AACA;AACA;AACA,6BAA6B,gFAAiB;AAC9C;AACA;AACA,8BAA8B,wEAAS;AACvC;AACA;AACA,6BAA6B,gFAAiB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,qEAAQ;AACpB;AACA;AACA,gCAAgC;AAChC;AACA;AACA,sCAAsC,wEAAW;AACjD;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,wEAAW;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,iCAAiC;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA,4BAA4B,sBAAsB;AAClD;AACA;AACA;AACA,iBAAiB,8DAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,oEAAO;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,oEAAO;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6EAA6E,oEAAO;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,oEAAO;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,oBAAoB;AAC3C;AACA,qBAAqB,mEAAM;AAC3B;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,SAAS;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,oEAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,oEAAO;AAC1C;AACA;AACA,gBAAgB,4DAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA,uDAAuD,4DAAO;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,mEAAM;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,4DAAO;AACnD,wHAAwH,oEAAO;AAC/H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mFAAmF,oEAAO;AAC1F,mCAAmC,oEAAO;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,oEAAO;AAClC;AACA;AACA,2BAA2B,oEAAO;AAClC;AACA;AACA;AACA;AACA;AACA,+CAA+C,4DAAO;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,SAAS;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,mBAAmB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA,4CAA4C,qEAAQ;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,oEAAO;AACtB;AACA;AACA;AACA;AACA,2BAA2B,4BAA4B;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,cAAc;AAC7B,eAAe,cAAc;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,wEAAW;AACnC;AACA;AACA,wBAAwB,qEAAQ;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,mEAAM;AACvC;AACA,yBAAyB;AACzB;AACA;AACA;AACA,sFAAsF,wEAAW;AACjG,4CAA4C,wEAAW;AACvD;AACA;AACA;AACA;AACA,0CAA0C,wEAAW;AACrD;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0EAA0E,WAAW;AACrF,4BAA4B,mEAAM;AAClC;AACA,2CAA2C,qEAAQ;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,iBAAiB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,qEAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,mEAAM;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,sEAAS;AACvC,qDAAqD,SAAS;AAC9D;AACA;AACA,oBAAoB,iEAAY;AAChC;AACA;AACA,wBAAwB,4DAAO;AAC/B,sCAAsC,wEAAW,SAAS,0DAAK;AAC/D;AACA;AACA;AACA;AACA;AACA,wBAAwB,iEAAY;AACpC;AACA;AACA;AACA;AACA,gBAAgB,iEAAY;AAC5B,mCAAmC,kFAAmB;AACtD,oBAAoB,iEAAY;AAChC;AACA;AACA;AACA,aAAa,4DAAO;AACpB,YAAY,iEAAY;AACxB,YAAY,iEAAY;AACxB;AACA,QAAQ,iEAAY;AACpB;AACA;AACA;AACA;AACA,6BAA6B,wEAAW,UAAU,mEAAc;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,mEAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,oEAAO;AACtB;AACA;AACA;AACA;AACA,2CAA2C,SAAS;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;AACA,4DAA4D,SAAS;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,4DAAO;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,4DAAO;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;AACA;AACA,wBAAwB,4DAAO;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,4DAAO;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,mEAAM;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,qEAAQ;AAC5B;AACA;AACA;AACA;AACA,4CAA4C,cAAc;AAC1D;AACA;AACA;AACA;AACA;AACA,4BAA4B,qEAAQ;AACpC;AACA;AACA;AACA;AACA;AACA,wBAAwB,mEAAM;AAC9B,wBAAwB,mEAAM;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,qEAAQ;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,mEAAM;AACtB;AACA;AACA;AACA;AACA;AACA,gBAAgB,mEAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,oEAAO,EAAE,8HAA8H;AAC3I;AACA;AACA,IAAI,uEAAU;AACd;AACA;AACA,IAAI,oEAAO,EAAE,qDAAqD;AAClE;AACA;AACA,IAAI,0EAAqB;AACzB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,kEAAa;AAChC;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,8DAAS;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,8EAAiB;AAClC;AACA;AACA,SAAS;AACT,YAAY,qEAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,wEAAW;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,iEAAY;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,mEAAc;AAC3C;AACA;AACA,SAAS;AACT,QAAQ,iEAAY;AACpB;AACA;AACA;AACA;AACA,YAAY,iEAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,8EAAiB,iBAAiB,sEAAS;AACnE;AACA,8BAA8B,iCAAiC;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,iEAAY;AACpB;AACA;AACA;AACA,QAAQ,iEAAY;AACpB,QAAQ,iEAAY;AACpB;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA,qBAAqB,oEAAO;AAC5B,2BAA2B,sEAAS;AACpC,8BAA8B,iCAAiC;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,mEAAM;AAClB,SAAS;AACT;AACA;AACA;AACA,gBAAgB,mEAAM;AACtB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,sEAAS;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,oEAAO;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,oEAAO;AAC5C;AACA,4BAA4B,sEAAS;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,oEAAO;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE,sEAAS;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,sEAAS;AACxC;AACA,iCAAiC,gCAAgC;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,sEAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oKAAoK,sEAAS;AAC7K;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,8EAAiB;AAClC;AACA;AACA,iBAAiB,8EAAiB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,8EAAiB,CAAC,oEAAO;AACvD,uBAAuB,oEAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,oEAAO;AAC1B,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA,4BAA4B,qEAAQ;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,wBAAwB,8EAAiB;AACzC;AACA;AACA;AACA;AACA,qBAAqB,8EAAiB;AACtC;AACA,sCAAsC,iCAAiC;AACvE;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,YAAY,sEAAS;AACrB;AACA,yBAAyB,iCAAiC;AAC1D;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,gCAAgC;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,uEAAU;AAC9B,qBAAqB,uEAAU;AAC/B,YAAY,4DAAO;AACnB,YAAY,8EAAiB,gBAAgB,mBAAmB;AAChE;AACA,QAAQ,8EAAiB,gBAAgB,iBAAiB;AAC1D;AACA;AACA;AACA;AACA,QAAQ,uEAAU;AAClB;AACA,YAAY,qEAAQ;AACpB;AACA;AACA;AACA;AACA,qDAAqD,qEAAQ;AAC7D,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC,gBAAgB,qEAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,iEAAY;AAChC,oBAAoB,iEAAY;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,sEAAS;AAC9C,QAAQ,mEAAM;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,8EAAiB,gBAAgB,WAAW,uEAAU,wBAAwB,uEAAU,cAAc;AAClH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,yDAAyD;AAC1G;AACA;AACA,iDAAiD,yDAAyD;AAC1G;AACA;AACA,YAAY,8EAAiB,gBAAgB,qBAAqB;AAClE;AACA;AACA;AACA;AACA;AACA,sBAAsB,sEAAS;AAC/B,gBAAgB,sEAAS;AACzB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,8EAAiB,aAAa,8EAAiB,gBAAgB,sEAAS;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,4DAAO;AACvB;AACA;AACA;AACA;AACA,wBAAwB,8EAAiB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,4DAAO;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,sEAAS;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,yBAAyB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,8EAAiB,gBAAgB,uBAAuB;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,sEAAS;AAC7B;AACA,sCAAsC,sEAAS;AAC/C;AACA;AACA,oBAAoB,sEAAS;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,8EAAiB,MAAM,wCAAwC;AAC/E;AACA;AACA,gBAAgB,8EAAiB,MAAM,wCAAwC;AAC/E;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT,sBAAsB,sEAAS;AAC/B,wCAAwC,QAAQ;AAChD;AACA;AACA,gBAAgB,8EAAiB,eAAe,kBAAkB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,sDAAsD,uDAAuD;AAC7G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,8EAAiB,gBAAgB,eAAe;AAC5D;AACA,4BAA4B,4DAAK;AACjC;AACA;AACA;AACA;AACA;AACA,4BAA4B,4CAA4C;AACxE,4CAA4C,sBAAsB,IAAI;AACtE,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,YAAY,iEAAY;AACxB,YAAY,iEAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,sEAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,8EAAiB,YAAY,kCAAkC;AAC3E,YAAY,8EAAiB,YAAY,uDAAuD;AAChG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,8EAAiB,kBAAkB,gCAAgC;AAC3E;AACA;AACA;AACA;AACA,uEAAuE,gFAAiB;AACxF;AACA;AACA,QAAQ,sEAAS;AACjB;AACA,wBAAwB,8EAAiB;AACzC;AACA;AACA;AACA,2BAA2B,iCAAiC;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,8EAAiB,kBAAkB,mCAAmC;AAClF;AACA;AACA;AACA,YAAY,8EAAiB,kBAAkB,2FAA2F;AAC1I;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,sEAAS;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,6BAA6B,QAAQ;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,8EAAiB,YAAY,4CAA4C;AAC7F;AACA;AACA,oBAAoB,8EAAiB,YAAY,2CAA2C;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,8EAAiB,UAAU,kBAAkB;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,8EAAiB,YAAY,4CAA4C;AACjG;AACA;AACA,wBAAwB,8EAAiB,YAAY,2CAA2C;AAChG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,sEAAS;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,+BAA+B;AAC5E,YAAY,4DAAO,yBAAyB,4DAAO;AACnD;AACA;AACA,iDAAiD,wCAAwC;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,sEAAS;AACjC;AACA;AACA;AACA,YAAY,sEAAS;AACrB;AACA,gCAAgC,8EAAiB;AACjD,kBAAkB,8EAAiB,kDAAkD,sEAAS;AAC9F;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,8EAAiB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,8EAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,8EAAiB,MAAM,iBAAiB;AACpD,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,mEAAM;AAClB;AACA;AACA,YAAY,mEAAM;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,8EAAiB;AAClC;AACA;AACA,sBAAsB,8EAAiB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,8EAAiB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,8EAAiB,MAAM,0CAA0C;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,sEAAS;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,8EAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,8EAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,0BAA0B;AAC3E,iDAAiD,4BAA4B;AAC7E,iDAAiD,2BAA2B;AAC5E;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,uBAAuB;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,gBAAgB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,4BAA4B;AAC5C,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,8EAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B,8DAA8D,SAAS;AACvE;AACA;AACA;AACA,wBAAwB,8EAAiB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,wEAAW,4BAA4B,qEAAQ;AACtE;AACA;AACA;AACA;AACA,oBAAoB,8EAAiB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,aAAa;AAC7B,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,8EAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA,YAAY,8EAAiB;AAC7B;AACA;AACA;AACA,iBAAiB,8EAAiB;AAClC;AACA;AACA,SAAS;AACT;AACA,gBAAgB,8EAAiB;AACjC;AACA;AACA,yBAAyB,sEAAS;AAClC;AACA;AACA;AACA,oBAAoB,8EAAiB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,oEAAO;AACjC;AACA;AACA;AACA;AACA;AACA,0BAA0B,oEAAO;AACjC;AACA;AACA;AACA;AACA;AACA,iCAAiC,sEAAS;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,0CAA0C;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,sEAAS;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,sEAAS;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,mEAAM;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,8EAAiB;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,8EAAiB;AAC1C;AACA;AACA;AACA;AACA;AACA,6BAA6B,oEAAO;AACpC;AACA;AACA,iBAAiB,8EAAiB;AAClC;AACA,yCAAyC;AACzC;AACA,iBAAiB,8EAAiB;AAClC;AACA,yBAAyB,8EAAiB;AAC1C;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,qDAAqD,wEAAW;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,yBAAyB;AACzE;AACA;AACA;AACA;AACA,gDAAgD,wEAAW;AAC3D,iDAAiD,+BAA+B;AAChF;AACA,0DAA0D,uEAAkB;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,8DAAM,EAAE,0CAA0C;AAC3E;AACA;AACA;AACA,YAAY,8EAAiB,OAAO,UAAU,uEAAU,cAAc;AACtE;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,sBAAsB;AACpE;AACA;AACA,kDAAkD,uEAAkB;AACpE,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA,YAAY,8EAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,8EAAiB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,aAAa;AAC7B,gBAAgB,aAAa;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,wBAAwB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,8EAAiB;AACjD;AACA;AACA,wDAAwD,sEAAS;AACjE;AACA;AACA;AACA;AACA,4BAA4B,mEAAM;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,qEAAQ;AACrC;AACA,wDAAwD;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,8EAAiB,QAAQ,UAAU,uEAAU,iBAAiB;AAClF;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,8EAAiB,gBAAgB,WAAW,uEAAU,kBAAkB;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,8EAAiB;AAC1C;AACA;AACA,yBAAyB,8EAAiB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD;AACjD;AACA;AACA;AACA;AACA,wBAAwB,wEAAW;AACnC;AACA;AACA,wBAAwB,qEAAQ;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,qBAAqB;AACrC,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,sEAAS;AAChD;AACA;AACA;AACA;AACA,2CAA2C,sEAAS;AACpD;AACA;AACA;AACA;AACA,yBAAyB,8EAAiB;AAC1C,oBAAoB,8EAAiB;AACrC;AACA,mDAAmD,sEAAS;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,8EAAiB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,8EAAiB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,uEAAU;AACd;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,0EAAqB;AACzB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,kEAAa;AACnD;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA;AACA;AACA,yCAAyC,kEAAa;AACtD;AACA;AACA,IAAI,oEAAO,EAAE,qDAAqD;AAClE;AACA;AACA,IAAI,oEAAO,EAAE,uDAAuD;AACpE;AACA;AACA;AACA;AACA,4BAA4B,kEAAa;AACzC;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,8DAAS;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,8BAA8B,oEAAe;AAC7C;AACA;AACA;AACA;AACA,qBAAqB,oEAAO;AAC5B;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,uEAAU;AAC9B,qBAAqB,uEAAU;AAC/B,QAAQ,8EAAiB,gBAAgB,mCAAmC;AAC5E;AACA;AACA;AACA,YAAY,8EAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA,QAAQ,uEAAU;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,qEAAQ,iCAAiC,mEAAM;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,iEAAY;AAC5B,gBAAgB,iEAAY;AAC5B,gBAAgB,iEAAY;AAC5B;AACA;AACA;AACA;AACA,QAAQ,iEAAY;AACpB,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA,QAAQ,iEAAY;AACpB;AACA,sCAAsC,yEAAY,gBAAgB,6BAA6B;AAC/F;AACA;AACA,iCAAiC,mEAAc;AAC/C;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,oEAAO;AAClC;AACA;AACA;AACA,uBAAuB,oEAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,mEAAM;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,4BAA4B,eAAe;AAC3C;AACA;AACA,iDAAiD,2BAA2B;AAC5E,qDAAqD,6BAA6B;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,SAAS;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,iEAAY;AAChC,oBAAoB,iEAAY;AAChC;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,iEAAY;AACpC,wBAAwB,iEAAY;AACpC;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,oEAAO;AAC7B;AACA;AACA;AACA;AACA,wBAAwB,oEAAO;AAC/B,uBAAuB,oEAAO;AAC9B,uBAAuB,oEAAO;AAC9B,0BAA0B,8EAAiB,cAAc,8EAAiB;AAC1E;AACA;AACA;AACA;AACA,sBAAsB,mEAAM;AAC5B;AACA;AACA;AACA,2BAA2B,oEAAO;AAClC;AACA;AACA,2BAA2B,oEAAO;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,8EAAiB;AACzC,yBAAyB,8EAAiB,eAAe,8EAAiB,CAAC,mEAAM;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,8EAAiB,CAAC,mEAAM;AAChE;AACA,0CAA0C,8EAAiB,CAAC,mEAAM,iCAAiC,8EAAiB,CAAC,oEAAO;AAC5H,wCAAwC,8EAAiB,CAAC,mEAAM,mCAAmC,oEAAO;AAC1G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB,gBAAgB,8EAAiB;AAC/D,2BAA2B,mEAAM;AACjC,4BAA4B,oEAAO;AACnC;AACA,gBAAgB,8EAAiB;AACjC;AACA;AACA;AACA,gBAAgB,sEAAS;AACzB;AACA;AACA;AACA;AACA;AACA,sCAAsC,mEAAM;AAC5C;AACA,qBAAqB;AACrB;AACA;AACA;AACA,iBAAiB,8EAAiB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,oEAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,mEAAM;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,oEAAO;AAC5B,YAAY,8EAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,8EAAiB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,4BAA4B,wEAAW,kBAAkB;AACzG;AACA;AACA;AACA;AACA;AACA,QAAQ,uEAAU;AAClB;AACA;AACA;AACA;AACA,8CAA8C,wBAAwB;AACtE,sBAAsB,wEAAW;AACjC,QAAQ,uEAAU,YAAY,2BAA2B;AACzD;AACA;AACA,oDAAoD,2BAA2B;AAC/E;AACA,YAAY,mEAAM;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,uEAAkB;AAChD;AACA;AACA,oDAAoD,2BAA2B;AAC/E;AACA;AACA;AACA;AACA,kBAAkB,mEAAM;AACxB,8BAA8B,8EAAiB;AAC/C;AACA;AACA;AACA;AACA;AACA,YAAY,qEAAQ;AACpB;AACA;AACA,YAAY,qEAAQ;AACpB;AACA;AACA,YAAY,qEAAQ;AACpB;AACA;AACA,uDAAuD,2BAA2B;AAClF,mDAAmD,uCAAuC;AAC1F;AACA,gBAAgB,8EAAiB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,8EAAiB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,8EAAiB;AAChD;AACA,gBAAgB,8EAAiB;AACjC;AACA;AACA;AACA,iBAAiB,8EAAiB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,qEAAQ;AACvD,gCAAgC,uEAAkB;AAClD;AACA;AACA,sBAAsB,8EAAiB;AACvC;AACA;AACA;AACA;AACA;AACA,6BAA6B,oEAAO;AACpC;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA,aAAa,8EAAiB,yCAAyC,8EAAiB;AACxF;AACA,qBAAqB,8EAAiB;AACtC;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,4BAA4B,uEAAkB;AAC9C;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,mEAAM;AAC3B,sBAAsB,mEAAM;AAC5B;AACA;AACA;AACA;AACA;AACA,iDAAiD,iDAAiD,wEAAW,iBAAiB;AAC9H,QAAQ,uEAAU,WAAW,wBAAwB;AACrD,6CAA6C,uBAAuB;AACpE;AACA;AACA;AACA;AACA;AACA,YAAY,mEAAM;AAClB;AACA;AACA;AACA;AACA,4CAA4C,uEAAkB;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,oEAAO;AACjC,YAAY,8EAAiB,WAAW,sEAAS;AACjD;AACA;AACA,wBAAwB,oEAAO;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,mEAAM;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,8EAAiB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,8EAAiB,QAAQ,kCAAkC;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,8DAAS;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,uEAAU,eAAe,0BAA0B;AAC/D,YAAY,uEAAU,+BAA+B,0BAA0B;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,wBAAwB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,wBAAwB;AACpD;AACA;AACA;AACA;AACA,0BAA0B,oEAAO;AACjC,YAAY,8EAAiB,WAAW,sEAAS;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,mEAAM;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,8EAAiB,QAAQ,iDAAiD;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,8DAAS;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,uEAAU,eAAe,2BAA2B;AAChE,YAAY,uEAAU,+BAA+B,2BAA2B;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,mEAAM;AAClB,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,8DAA8D;AAC9E,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,8EAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,iEAAY;AAC5B,gBAAgB,iEAAY;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,8EAAiB;AAC7B;AACA;AACA;AACA,QAAQ,mEAAM;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA,YAAY,8EAAiB,SAAS,8EAAiB,CAAC,mEAAM;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,8EAAiB;AAC7B;AACA;AACA,YAAY,8EAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,8EAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA,YAAY,uEAAU,aAAa,4CAA4C;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,QAAQ;AACxB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA,YAAY,8EAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA,2BAA2B,mEAAM;AACjC;AACA;AACA;AACA,iBAAiB;AACjB,mCAAmC,mEAAM;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,8EAAiB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,8EAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,kBAAkB,8EAAiB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wFAAwF,CAAC,mEAAM,KAAK,EAAE;AACtG;AACA;AACA;AACA,YAAY,8EAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,8EAAiB;AAClC;AACA;AACA,SAAS;AACT;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA,YAAY,mEAAM;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,eAAe;AAC/B,gBAAgB,eAAe;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,wBAAwB;AAC/D;AACA;AACA,uCAAuC,sEAAS;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,8EAAiB;AAC7E;AACA;AACA;AACA,2DAA2D,8EAAiB;AAC5E;AACA;AACA,4DAA4D,8EAAiB;AAC7E;AACA;AACA,2DAA2D,8EAAiB;AAC5E;AACA;AACA;AACA,gCAAgC,mEAAM;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,8EAAiB,gBAAgB,WAAW,uEAAU,kBAAkB;AAC5F;AACA;AACA,oBAAoB,8EAAiB,gBAAgB,UAAU,uEAAU,iBAAiB;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,uEAAU;AACd;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,oEAAO,GAAG;AACd;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,0EAAqB;AACzB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,SAAS,cAAc,GAAG,eAAe,EAAE,gBAAgB,qBAAqB;AACzH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,wEAAW;AACxD;AACA;AACA;AACA;AACA,QAAQ,uEAAU,gBAAgB,0CAA0C;AAC5E,oCAAoC,+EAAgB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC,eAAe,iBAAiB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,uEAAU;AACd;AACA;AACA,IAAI,0EAAqB;AACzB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,UAAU,eAAe,GAAG,qBAAqB,EAAE,gBAAgB,EAAE;AAChG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,wEAAW;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,uEAAU,gBAAgB,qCAAqC;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,4DAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,oBAAoB;AAChD;AACA;AACA;AACA;AACA;AACA,eAAe,UAAU;AACzB,eAAe,UAAU;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE,uEAAkB;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,gBAAgB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,oEAAO,EAAE,8HAA8H;AAC3I;AACA;AACA,IAAI,0EAAqB;AACzB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,kEAAa;AAC7C;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA;AACA;AACA,mCAAmC,kEAAa;AAChD;AACA;AACA,IAAI,oEAAO,EAAE,uDAAuD;AACpE;AACA;AACA,IAAI,oEAAO,EAAE,wDAAwD;AACrE;AACA;AACA;AACA;AACA,qBAAqB,kEAAa;AAClC;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA;AACA;AACA,sBAAsB,kEAAa;AACnC;AACA;AACA,IAAI,oEAAO,GAAG;AACd;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,8DAAS;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,gBAAgB,mEAAM;AACtB;AACA;AACA;AACA,yBAAyB,mEAAM;AAC/B;AACA,iBAAiB,8EAAiB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,oEAAO;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA,mBAAmB,4DAAO;AAC1B;AACA,QAAQ,8EAAiB,gBAAgB,UAAU,uEAAU,wBAAwB,uEAAU,eAAe;AAC9G;AACA,QAAQ,uEAAU,gBAAgB,yEAAyE;AAC3G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,sDAAsD,oBAAoB,EAAE;AAC9H,4EAA4E,wEAAW;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,2BAA2B;AAClF,iFAAiF,0BAA0B;AAC3G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB,CAAC,mEAAM,wCAAwC,8EAAiB,CAAC,mEAAM;AACrG;AACA,2BAA2B,mEAAM;AACjC,iBAAiB,8EAAiB;AAClC,gBAAgB,yEAAY,gBAAgB,0BAA0B;AACtE;AACA;AACA,gBAAgB,sEAAS;AACzB;AACA,+BAA+B,mEAAM;AACrC,0DAA0D,mEAAmE;AAC7H,yBAAyB,mEAAM;AAC/B,qBAAqB,8EAAiB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,8EAAiB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA,uBAAuB,mEAAM;AAC7B,aAAa,8EAAiB;AAC9B,YAAY,yEAAY,gBAAgB,0BAA0B;AAClE;AACA,YAAY,sEAAS;AACrB;AACA,2BAA2B,mEAAM;AACjC,wBAAwB,mEAAM;AAC9B,iBAAiB,8EAAiB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,mEAAM;AAC5B,aAAa,8EAAiB;AAC9B,mCAAmC,0DAAK,eAAe,sCAAsC;AAC7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,4BAA4B;AAChE;AACA;AACA;AACA,2BAA2B,WAAW;AACtC;AACA;AACA;AACA;AACA,oBAAoB,mEAAM;AAC1B;AACA,0DAA0D,yBAAyB;AACnF;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA,sEAAsE;AACtE,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB,0DAA0D,+CAA+C,iBAAiB,EAAE;AAC5H;AACA,oBAAoB,sEAAS;AAC7B,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,QAAQ,uEAAU,eAAe,6BAA6B;AAC9D;AACA;AACA;AACA;AACA,sBAAsB,mEAAM;AAC5B,sBAAsB,sEAAS;AAC/B;AACA;AACA;AACA,2BAA2B,oBAAoB;AAC/C;AACA;AACA,oBAAoB,uEAAU,oBAAoB,2EAA2E;AAC7H;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B,mCAAmC,0DAAK,eAAe,sCAAsC;AAC7F;AACA;AACA;AACA,sBAAsB,sEAAS;AAC/B;AACA;AACA;AACA;AACA,uBAAuB,8EAAiB,iBAAiB,8EAAiB;AAC1E,uBAAuB,8EAAiB,iBAAiB,8EAAiB;AAC1E,iBAAiB,8EAAiB,2BAA2B,8EAAiB,iBAAiB,8EAAiB;AAChH;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,uEAAkB;AACxC;AACA;AACA;AACA;AACA,oDAAoD,8BAA8B,yBAAyB,EAAE;AAC7G;AACA,6BAA6B,8EAAiB;AAC9C,iBAAiB,8EAAiB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,mDAAmD,2BAA2B;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,mEAAM;AAC1B;AACA;AACA;AACA;AACA,gDAAgD,IAAI;AACpD;AACA,kDAAkD,wCAAwC;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,sEAAS;AACpC;AACA;AACA;AACA;AACA,qBAAqB,mEAAM;AAC3B,sBAAsB,mEAAM;AAC5B,uBAAuB,mEAAM;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,sEAAS;AAClD;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA,sBAAsB,sEAAS;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,sEAAS;AACxB;AACA;AACA,QAAQ,uEAAU,gBAAgB,sEAAsE;AACxG;AACA;AACA,kBAAkB,mEAAM;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA,gBAAgB,8EAAiB,UAAU,yBAAyB;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,8EAAiB,UAAU,gCAAgC;AAC3E;AACA,oBAAoB,mEAAM;AAC1B;AACA;AACA,gBAAgB,8DAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,gBAAgB,8EAAiB,aAAa,8EAAiB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA,uEAAuE,IAAI,8EAAiB;AAC5F;AACA;AACA;AACA;AACA;AACA,kBAAkB,mEAAM;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,8EAAiB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,8DAAS;AACzB;AACA;AACA;AACA,wBAAwB,oEAAO;AAC/B;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,8EAAiB;AAClC;AACA,qBAAqB,8EAAiB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,sEAAS;AACrD;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,8EAAiB;AAClC;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,qEAAQ;AAC/C;AACA,4BAA4B,uEAAkB;AAC9C;AACA;AACA,yBAAyB,oEAAO;AAChC;AACA;AACA,aAAa,8EAAiB;AAC9B,gBAAgB,qEAAQ;AACxB,2CAA2C;AAC3C;AACA;AACA,2CAA2C;AAC3C;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,8EAAiB;AACxD;AACA,sBAAsB,uEAAkB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,mEAAM;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,qEAAQ;AACpB;AACA,gBAAgB,qEAAQ;AACxB;AACA;AACA,gBAAgB,qEAAQ;AACxB;AACA;AACA;AACA,YAAY,qEAAQ;AACpB;AACA;AACA;AACA,qBAAqB;AACrB,qBAAqB;AACrB;AACA;AACA;AACA;AACA,QAAQ,wEAAW;AACnB,QAAQ,wEAAW;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,mEAAM;AAC/B,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA,QAAQ,wEAAW;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,qEAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,8FAA8F;AAChI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,wEAAW;AACvB,2CAA2C,mEAAM;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,wEAAW;AACvB;AACA,YAAY,8EAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,8EAAiB,eAAe,qEAAqE;AACzH;AACA;AACA;AACA;AACA,YAAY,qEAAQ;AACpB,YAAY,8EAAiB,gBAAgB,mBAAmB;AAChE,YAAY,8EAAiB,eAAe,qEAAqE;AACjH;AACA;AACA;AACA,0BAA0B,sEAAS;AACnC,+BAA+B,gBAAgB;AAC/C,gEAAgE;AAChE;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,mEAAM;AACpC;AACA;AACA;AACA,gCAAgC;AAChC,qBAAqB;AACrB;AACA;AACA,+BAA+B,uBAAuB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,8EAAiB,eAAe,kCAAkC;AAC9E;AACA;AACA,YAAY,8EAAiB,eAAe,mBAAmB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,mEAAM;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,oEAAO;AAC1B;AACA;AACA;AACA,uBAAuB,mEAAM;AAC7B,cAAc,mEAAM;AACpB,oBAAoB,mEAAM;AAC1B;AACA,YAAY,8EAAiB,OAAO,0BAA0B;AAC9D,4BAA4B,8EAAiB;AAC7C;AACA,gBAAgB,8EAAiB,OAAO,iEAAiE;AACzG;AACA;AACA,gBAAgB,8EAAiB,OAAO,wBAAwB;AAChE;AACA;AACA;AACA,YAAY,8EAAiB,OAAO,0BAA0B;AAC9D,2BAA2B,8EAAiB;AAC5C;AACA,gBAAgB,8EAAiB,OAAO,8FAA8F;AACtI;AACA;AACA,gBAAgB,8EAAiB,OAAO,kCAAkC;AAC1E;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA,sBAAsB,sEAAS;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,sBAAsB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,8EAAiB;AAClC;AACA;AACA,YAAY,uEAAU,OAAO,4DAA4D;AACzF;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,8EAAiB;AAC7B;AACA;AACA,QAAQ,uEAAU,gBAAgB,8BAA8B;AAChE;AACA,gBAAgB,mEAAM;AACtB,uCAAuC,mEAAM;AAC7C,qBAAqB,8EAAiB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,mEAAM;AAChC;AACA,gBAAgB,8EAAiB;AACjC;AACA;AACA,4BAA4B;AAC5B,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,mEAAM;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,mEAAM;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA,oBAAoB,mEAAM;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,iEAAY;AACpB,QAAQ,iEAAY;AACpB,aAAa,8EAAiB;AAC9B,mCAAmC,0DAAK,eAAe,sCAAsC;AAC7F;AACA,6BAA6B,mEAAc,gBAAgB,qEAAqE;AAChI,gCAAgC,mEAAc;AAC9C;AACA,yBAAyB,4DAA4D;AACrF;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA,QAAQ,iEAAY;AACpB,QAAQ,iEAAY;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,oEAAO;AAC/B;AACA;AACA;AACA;AACA,sCAAsC,oEAAO;AAC7C;AACA;AACA;AACA;AACA,0CAA0C,8EAAiB;AAC3D;AACA;AACA;AACA;AACA,sBAAsB,8EAAiB;AACvC;AACA;AACA;AACA;AACA;AACA,8BAA8B,8EAAiB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,QAAQ;AACvD;AACA;AACA;AACA;AACA;AACA;AACA,uEAAuE,sEAAS;AAChF,+CAA+C,wBAAwB;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,oEAAO;AAClC,iBAAiB,8EAAiB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,mEAAM;AAC3B,sBAAsB,mEAAM;AAC5B,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,oEAAO;AAC9B;AACA;AACA,mCAAmC,sEAAS;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,oEAAO;AAClC,qBAAqB,8EAAiB;AACtC;AACA;AACA;AACA;AACA;AACA,qBAAqB,8EAAiB;AACtC;AACA;AACA;AACA;AACA,gCAAgC,oEAAO;AACvC,sDAAsD,8EAAiB;AACvE;AACA,yBAAyB,8EAAiB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,mEAAM;AAC9B,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA,qBAAqB,mEAAM;AAC3B,mCAAmC,8EAAiB;AACpD,yBAAyB,mEAAM;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B,0CAA0C,yDAAI,SAAS,+BAA+B;AACtF;AACA;AACA;AACA;AACA;AACA,2BAA2B,wBAAwB;AACnD;AACA;AACA;AACA;AACA,8BAA8B,mEAAM;AACpC,8BAA8B,mEAAM;AACpC;AACA,gCAAgC,8EAAiB;AACjD,wBAAwB,8EAAiB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,mEAAM;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,8EAAiB;AAChE,+DAA+D,8EAAiB;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,8EAAiB;AAC1C;AACA;AACA;AACA,yBAAyB,8EAAiB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,8EAAiB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,mEAAM;AAC1C,2DAA2D,qEAAQ;AACnE,oBAAoB,mEAAM;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA,sBAAsB,sEAAS;AAC/B,YAAY,8EAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,gBAAgB;AAChC,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,mEAAM;AAC5B,YAAY,8EAAiB;AAC7B;AACA;AACA;AACA;AACA,6BAA6B,sEAAS;AACtC;AACA;AACA;AACA,gBAAgB,8EAAiB;AACjC;AACA;AACA;AACA;AACA;AACA,qCAAqC,8EAAiB;AACtD;AACA;AACA,iBAAiB,8EAAiB;AAClC;AACA;AACA,2BAA2B,mEAAM;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,8EAAiB;AACvC,oBAAoB,8EAAiB,2CAA2C,8EAAiB;AACjG;AACA;AACA;AACA,wCAAwC,8EAAiB,kBAAkB,8EAAiB;AAC5F;AACA;AACA;AACA,gCAAgC;AAChC,qBAAqB;AACrB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,uCAAuC,oBAAoB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA,kBAAkB,sEAAS;AAC3B,YAAY,8EAAiB;AAC7B;AACA;AACA,0BAA0B;AAC1B;AACA;AACA,oBAAoB,qEAAQ;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,mEAAM,iEAAiE,mEAAM;AAC1G,qBAAqB,8EAAiB;AACtC;AACA;AACA;AACA;AACA,oBAAoB,mEAAM;AAC1B;AACA;AACA;AACA;AACA,qCAAqC,sEAAS;AAC9C;AACA;AACA;AACA;AACA,oBAAoB,sEAAS;AAC7B;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA,mBAAmB,sEAAS;AAC5B,YAAY,8EAAiB;AAC7B;AACA;AACA,YAAY,8EAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA,oBAAoB,sEAAS;AAC7B;AACA;AACA,2CAA2C,QAAQ;AACnD;AACA;AACA;AACA;AACA;AACA,mDAAmD,wBAAwB;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,wBAAwB;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,sEAAS;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,qBAAqB;AACrC;AACA;AACA;AACA;AACA,uBAAuB,mEAAM;AAC7B,sBAAsB,sEAAS;AAC/B,uBAAuB,mEAAM;AAC7B;AACA,YAAY,8EAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,8EAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,8EAAiB;AAC/C,gBAAgB,mEAAM;AACtB;AACA;AACA,+BAA+B,8EAAiB;AAChD,gBAAgB,mEAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,8EAAiB;AAClC;AACA,sCAAsC,uBAAuB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,SAAS;AACzB,gBAAgB,SAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,8EAAiB,gBAAgB,QAAQ,uEAAU,iBAAiB;AACxF;AACA;AACA,oBAAoB,8EAAiB,gBAAgB,SAAS,uEAAU,kBAAkB;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,mEAAM;AACtB,gBAAgB,mEAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,2BAA2B,8EAAiB,iBAAiB,8EAAiB;AAC9E,2BAA2B,8EAAiB,iBAAiB,8EAAiB;AAC9E;AACA,qDAAqD,8BAA8B,yBAAyB,EAAE;AAC9G,qBAAqB,8EAAiB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,wDAAwD,2BAA2B;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,mEAAM;AAC9B;AACA;AACA;AACA;AACA,kDAAkD,IAAI;AACtD;AACA,wDAAwD,sCAAsC;AAC9F;AACA;AACA;AACA;AACA;AACA,wDAAwD,0BAA0B;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,mEAAM;AAClB,YAAY,mEAAM;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE;AAChE,aAAa;AACb;AACA;AACA,aAAa;AACb,kDAAkD,gDAAgD,iBAAiB,EAAE;AACrH;AACA;AACA,oDAAoD,0BAA0B;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,uEAAU;AACd;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,oEAAO,GAAG;AACd;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,0EAAqB;AACzB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,kEAAa;AAC1C;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA;AACA;AACA,6BAA6B,kEAAa;AAC1C;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA;AACA;AACA,oCAAoC,kEAAa;AACjD;AACA;AACA,IAAI,oEAAO,EAAE,qDAAqD;AAClE;AACA;AACA,IAAI,oEAAO,EAAE,uDAAuD;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,8DAAS;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,qEAAQ;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,0BAA0B,8DAAS,GAAG;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,8EAAiB;AAC7B,gCAAgC,oBAAoB;AACpD;AACA,YAAY,8EAAiB;AAC7B,gCAAgC,mBAAmB;AACnD;AACA,YAAY,8EAAiB;AAC7B,gCAAgC,oBAAoB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,qEAAQ,0BAA0B,wEAAW;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,yEAAY;AACpC;AACA;AACA;AACA;AACA,4BAA4B,yEAAY;AACxC;AACA;AACA,oBAAoB,qEAAQ,gCAAgC,wEAAW;AACvE;AACA;AACA,sBAAsB,mEAAM;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,oEAAO;AAClC;AACA;AACA;AACA,uBAAuB,oEAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,gEAAW;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,gEAAW;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,mDAAmD,WAAW;AAC9D,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,mDAAmD,WAAW;AAC9D,iBAAiB;AACjB;AACA;AACA;AACA;AACA,gBAAgB,8EAAiB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,0DAAK;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,8DAAQ;AAChB,aAAa,8EAAiB,YAAY,8EAAiB;AAC3D;AACA;AACA;AACA;AACA;AACA,2CAA2C,qEAAQ;AACnD;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,8EAAiB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kGAAkG,gEAAW;AAC7G;AACA;AACA,6BAA6B,8DAAQ;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,sEAAS;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,gEAAW,iCAAiC,0DAAK;AACtF,+BAA+B,uBAAuB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,gEAAW;AACvD,6CAA6C,0DAAK;AAClD,2CAA2C,0BAA0B;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,8BAA8B;AAC7D;AACA,yCAAyC,gEAAW;AACpD,yCAAyC,0DAAK;AAC9C;AACA;AACA;AACA;AACA,0CAA0C,gEAAW;AACrD,yCAAyC,0DAAK;AAC9C,uCAAuC,4BAA4B;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+EAA+E,gEAAW;AAC1F;AACA,mCAAmC,8BAA8B;AACjE;AACA;AACA;AACA;AACA,qCAAqC,qEAAQ;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,uBAAuB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,gEAAW;AAC5C,iCAAiC,0DAAK;AACtC;AACA;AACA;AACA,wBAAwB,mEAAM;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,sEAAS;AACrC;AACA,uBAAuB,0BAA0B;AACjD,uBAAuB,oEAAO;AAC9B;AACA;AACA,0CAA0C,gEAAW;AACrD,qCAAqC,0DAAK;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,gCAAgC;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,2BAA2B;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,qEAAQ;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,mCAAmC;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,8EAAc,4BAA4B,4BAA4B;AACpG;AACA,uBAAuB,mEAAM;AAC7B;AACA,2FAA2F,8EAAiB;AAC5G,6BAA6B,qEAAQ;AACrC;AACA,gBAAgB,mEAAM;AACtB;AACA;AACA;AACA,sBAAsB,8EAAiB;AACvC,gBAAgB,mEAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,mEAAM;AAC9B,YAAY,iEAAY;AACxB,YAAY,iEAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,mEAAM;AAC/B,QAAQ,kFAAkB;AAC1B;AACA;AACA;AACA,0BAA0B,qEAAQ;AAClC,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA,8CAA8C,gEAAW;AACzD,2BAA2B,eAAe;AAC1C;AACA,8DAA8D,8EAAiB,CAAC,qEAAQ,2BAA2B,8EAAiB,CAAC,qEAAQ;AAC7I;AACA;AACA;AACA,+DAA+D,8EAAiB,CAAC,qEAAQ;AACzF;AACA;AACA;AACA;AACA;AACA,wCAAwC,SAAS;AACjD,uDAAuD,8EAAiB,CAAC,qEAAQ;AACjF;AACA;AACA,iBAAiB,8EAAiB,CAAC,qEAAQ,8BAA8B,8EAAiB,CAAC,qEAAQ;AACnG;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,0DAAK;AAChC,iBAAiB,8DAAQ;AACzB;AACA,uBAAuB,eAAe;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,8DAAQ,qBAAqB,8DAAQ;AACxD;AACA;AACA;AACA;AACA,qBAAqB,sEAAS;AAC9B,uBAAuB,mBAAmB;AAC1C;AACA;AACA;AACA,yBAAyB,sEAAS;AAClC,2BAA2B,mBAAmB;AAC9C;AACA;AACA;AACA,YAAY,wEAAW;AACvB;AACA,qBAAqB,sEAAS;AAC9B,uBAAuB,mBAAmB;AAC1C,uBAAuB,mEAAM;AAC7B;AACA;AACA;AACA;AACA,qBAAqB,sEAAS;AAC9B;AACA,2BAA2B,mBAAmB;AAC9C;AACA;AACA;AACA,QAAQ,wEAAW;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,sBAAsB;AACtD;AACA;AACA;AACA;AACA,4BAA4B,sEAAS;AACrC;AACA,2BAA2B,sBAAsB;AACjD;AACA,gCAAgC,mEAAM;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,sEAAS;AACzC,2BAA2B,0BAA0B;AACrD;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA,4BAA4B,mEAAM;AAClC;AACA,+BAA+B,sEAAS;AACxC,qCAAqC,sEAAS;AAC9C,wBAAwB,sEAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,oEAAO;AAClC,iBAAiB,8EAAiB;AAClC,oCAAoC,oEAAO;AAC3C;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B,+BAA+B,mEAAM;AACrC;AACA,iBAAiB,8EAAiB;AAClC,6BAA6B,sEAAS;AACtC;AACA;AACA;AACA;AACA;AACA,mCAAmC,2BAA2B;AAC9D;AACA,yBAAyB,8EAAiB,2BAA2B,8EAAiB,CAAC,qEAAQ;AAC/F,uCAAuC,qEAAQ;AAC/C;AACA;AACA;AACA,8DAA8D,wEAAW;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kFAAkF,wEAAW;AAC7F;AACA;AACA;AACA;AACA,0DAA0D,wEAAW;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,sEAAS;AAC1B,aAAa,8EAAiB;AAC9B,wCAAwC,UAAU;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,8EAAiB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,uBAAuB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,mEAAM;AACrC;AACA;AACA;AACA;AACA,6BAA6B,sEAAS;AACtC;AACA,mCAAmC,2BAA2B;AAC9D;AACA;AACA;AACA;AACA;AACA,mCAAmC,2BAA2B;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,kBAAkB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,oEAAO;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,gEAAW,iCAAiC,0DAAK;AAChF;AACA;AACA;AACA;AACA,oDAAoD,mEAAM;AAC1D,4CAA4C,mEAAM;AAClD;AACA;AACA;AACA,mCAAmC,uBAAuB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2EAA2E,gEAAW;AACtF;AACA;AACA;AACA;AACA,2BAA2B,0BAA0B;AACrD;AACA;AACA,wCAAwC,mEAAM;AAC9C;AACA;AACA;AACA,+BAA+B,qEAAQ;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,uBAAuB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA,gDAAgD,mEAAM;AACtD,wCAAwC,mEAAM;AAC9C;AACA,8CAA8C,mEAAM;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,qEAAQ;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,oEAAO;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,wEAAW;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA,gBAAgB,wEAAW;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,8EAAiB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,8CAA8C,8EAAiB;AAC/E;AACA;AACA,sBAAsB,mEAAM;AAC5B,aAAa,8EAAiB;AAC9B;AACA;AACA,4BAA4B,mEAAM;AAClC;AACA,gBAAgB,qEAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,oBAAoB;AACpD;AACA;AACA;AACA;AACA,kDAAkD,gEAAW;AAC7D;AACA;AACA;AACA,+BAA+B,kBAAkB;AACjD,gCAAgC,mEAAM;AACtC,yBAAyB,8EAAiB;AAC1C,mCAAmC,mEAAM,mBAAmB,mEAAM;AAClE,6BAA6B,8EAAiB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,oBAAoB,mEAAM;AAC1B,aAAa,8EAAiB;AAC9B,uBAAuB,mEAAM,mBAAmB,mEAAM;AACtD,iBAAiB,8EAAiB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,qBAAqB,sEAAS;AAC9B;AACA;AACA,gCAAgC,oBAAoB;AACpD,2BAA2B,kBAAkB;AAC7C,4BAA4B,mEAAM;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,wEAAW;AACnB;AACA;AACA,uBAAuB,mBAAmB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,iEAAY;AACpB;AACA;AACA;AACA;AACA;AACA,qBAAqB,oEAAO;AAC5B;AACA;AACA;AACA;AACA,oCAAoC,mEAAM;AAC1C,kCAAkC,mEAAM;AACxC;AACA;AACA;AACA,uCAAuC,oEAAO;AAC9C,yBAAyB,8EAAiB;AAC1C,2CAA2C,mEAAM;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,oEAAO;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,wEAAW;AAC3B,gBAAgB,qEAAQ;AACxB;AACA;AACA;AACA,yBAAyB,mEAAM;AAC/B;AACA;AACA,oCAAoC,mEAAM;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,8EAAiB;AAClD;AACA;AACA;AACA,kCAAkC,mEAAM;AACxC,yBAAyB;AACzB;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,iCAAiC,8EAAiB;AAClD;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,mEAAM;AAC3B;AACA,kDAAkD,gEAAW;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,wEAAW;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,wEAAW;AACnB;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,qEAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,wEAAW;AAC/B;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,wEAAW;AACnB,QAAQ,qEAAQ;AAChB;AACA;AACA;AACA,iBAAiB,mEAAM;AACvB;AACA,4BAA4B,mEAAM;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,8EAAiB;AAC1C;AACA;AACA,4BAA4B,mEAAM;AAClC;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,yBAAyB,8EAAiB;AAC1C;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,wEAAW;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,qEAAQ;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,mEAAM;AAC1B,YAAY,8EAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA,8CAA8C,gEAAW;AACzD;AACA;AACA,gBAAgB,8EAAiB,YAAY,8EAAiB;AAC9D,gBAAgB,mEAAM;AACtB;AACA;AACA;AACA;AACA,kDAAkD,gEAAW;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,mDAAmD,WAAW;AAC9D,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,gBAAgB,8EAAiB;AACjC,gBAAgB,mEAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,8DAAQ;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,8EAAiB;AAC7B,YAAY,mEAAM;AAClB;AACA;AACA;AACA;AACA,kDAAkD,gEAAW;AAC7D;AACA;AACA,gBAAgB,qEAAQ;AACxB;AACA;AACA,iCAAiC,8DAAQ;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,kBAAkB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,8EAAiB;AACrE;AACA;AACA;AACA,YAAY,8EAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,YAAY;AAChE,iCAAiC,qEAAQ;AACzC;AACA,+BAA+B,qEAAQ;AACvC;AACA,8BAA8B,8EAAiB,CAAC,qEAAQ;AACxD,wDAAwD,qEAAQ;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,8EAAiB;AAC7B;AACA;AACA,6CAA6C,YAAY;AACzD,iBAAiB,8EAAiB,iBAAiB,8EAAiB,CAAC,qEAAQ;AAC7E,oBAAoB,qEAAQ;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,sEAAS;AAClC,gDAAgD,SAAS;AACzD;AACA;AACA,gCAAgC,oEAAO;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,8EAAiB,4DAA4D,8EAAiB;AAC1G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,eAAe;AACnD;AACA,oBAAoB,sEAAS;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA,gBAAgB,wEAAW;AAC3B;AACA,YAAY,qEAAQ;AACpB;AACA;AACA;AACA;AACA;AACA,QAAQ,qEAAQ;AAChB;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,wEAAW;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,wEAAW;AACnB,4BAA4B,oBAAoB;AAChD;AACA;AACA;AACA,gBAAgB,8CAA8C,8EAAiB;AAC/E;AACA;AACA,0DAA0D,4DAAO;AACjE;AACA;AACA;AACA;AACA;AACA,oEAAoE,oEAAO;AAC3E;AACA;AACA;AACA,sCAAsC,oEAAO;AAC7C;AACA;AACA;AACA,mBAAmB,mEAAM;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,qEAAQ;AACpB;AACA;AACA;AACA;AACA;AACA,oBAAoB,wEAAW;AAC/B;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,mEAAM;AACvB;AACA;AACA;AACA;AACA;AACA,yBAAyB,sEAAS;AAClC,2BAA2B,mBAAmB;AAC9C;AACA;AACA,+BAA+B,mEAAM,mBAAmB,mEAAM;AAC9D,yBAAyB,8EAAiB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,qEAAQ;AACxB;AACA;AACA;AACA;AACA;AACA,gBAAgB,qEAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,sEAAS;AAClD;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,8EAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,mEAAM;AAC9B,wBAAwB,mEAAM;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,oEAAO;AAC5B;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,oEAAO,CAAC,oEAAO;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,mEAAM;AACjC;AACA;AACA;AACA,iCAAiC,gEAAW,iCAAiC,0DAAK;AAClF,2BAA2B,uBAAuB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,gEAAW,iCAAiC,0DAAK;AACvF,+BAA+B,wBAAwB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,0BAA0B;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,uBAAuB;AACvD,8BAA8B,qEAAQ;AACtC;AACA;AACA;AACA,6CAA6C,8EAAiB;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE,8EAAiB;AACpF;AACA;AACA;AACA,oBAAoB,qEAAQ;AAC5B,oBAAoB,qEAAQ;AAC5B,6BAA6B,qEAAQ;AACrC;AACA;AACA,yBAAyB,8EAAiB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,mEAAM;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,oEAAO,CAAC,oEAAO;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,mEAAM;AAC1B,YAAY,8EAAiB;AAC7B,2BAA2B,mEAAM;AACjC;AACA,eAAe,8EAAiB,WAAW,8EAAiB;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,8EAAiB;AACjC;AACA;AACA,SAAS,SAAS,sEAAS;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,8EAAiB;AACjC;AACA;AACA,SAAS,SAAS,sEAAS;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,SAAS,sEAAS;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,SAAS,sEAAS;AAC3B;AACA;AACA;AACA,QAAQ,wEAAW;AACnB;AACA,YAAY,qEAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,qEAAQ;AACpB;AACA;AACA;AACA;AACA,QAAQ,wEAAW;AACnB;AACA;AACA;AACA;AACA,wBAAwB,oEAAO;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,qEAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,sEAAS;AACnC;AACA,YAAY,wEAAW;AACvB;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B,aAAa,8EAAiB,CAAC,oEAAO,4BAA4B,oEAAO;AACzE;AACA;AACA,wBAAwB,oEAAO;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,mEAAM;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,qEAAQ;AAC3B;AACA,eAAe,mEAAM;AACrB;AACA;AACA;AACA,gBAAgB,8BAA8B,8EAAiB;AAC/D;AACA;AACA;AACA;AACA;AACA,YAAY,mEAAM;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,gFAAmB;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA,4BAA4B,yDAAyD;AACrF;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B,YAAY,wEAAW;AACvB;AACA,aAAa,8EAAiB;AAC9B,YAAY,qEAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,oEAAO;AAC/B;AACA;AACA;AACA;AACA,wBAAwB,mEAAM;AAC9B;AACA;AACA;AACA,sBAAsB,mEAAM;AAC5B;AACA,oDAAoD,+BAA+B,sBAAsB,EAAE;AAC3G;AACA;AACA;AACA;AACA;AACA,gBAAgB,qEAAQ;AACxB,qBAAqB,8EAAiB;AACtC;AACA;AACA;AACA,6BAA6B,mEAAM;AACnC,gCAAgC,4DAAK;AACrC;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,qEAAQ;AAC/B;AACA;AACA,aAAa,mEAAM;AACnB;AACA;AACA;AACA;AACA,qBAAqB,oEAAO;AAC5B,oBAAoB,oEAAO;AAC3B,QAAQ,mEAAM;AACd,8CAA8C,gEAAW;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,sBAAsB,qEAAQ;AAC9B,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,wEAAW;AACvB;AACA;AACA;AACA;AACA,YAAY,8EAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,uEAAU;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,8EAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,uEAAU;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,YAAY,8EAAiB;AAC7B;AACA;AACA;AACA,0DAA0D,YAAY;AACtE,6BAA6B,qEAAQ;AACrC,qBAAqB,8EAAiB,uBAAuB,8EAAiB;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,8EAAiB;AAC7B;AACA;AACA,4CAA4C,YAAY;AACxD,yBAAyB,qEAAQ;AACjC;AACA;AACA;AACA,0DAA0D,8EAAiB,CAAC,qEAAQ;AACpF,gCAAgC,qEAAQ;AACxC;AACA;AACA;AACA;AACA;AACA,uDAAuD,gEAAW,KAAK,8EAAiB,CAAC,qEAAQ;AACjG;AACA,kDAAkD,qEAAQ;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,8DAAS;AACpC;AACA;AACA;AACA;AACA;AACA,+BAA+B,oEAAO;AACtC,+BAA+B,oEAAO;AACtC,8BAA8B,oEAAO;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,8EAAiB,CAAC,mEAAM;AAC5C,2DAA2D,qCAAqC;AAChG;AACA;AACA;AACA,yDAAyD,sBAAsB;AAC/E;AACA;AACA;AACA,6DAA6D,6CAA6C;AAC1G;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,gBAAgB,qEAAQ;AACxB,+BAA+B,oEAAO;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,qEAAQ;AACpC,yCAAyC,uEAAU;AACnD;AACA,qBAAqB;AACrB;AACA,aAAa;AACb;AACA,4CAA4C,YAAY,QAAQ,8EAAiB,2BAA2B,4DAAO,uBAAuB,EAAE;AAC5I;AACA,aAAa;AACb;AACA,gBAAgB,wEAAW;AAC3B;AACA;AACA;AACA,gCAAgC,oEAAO;AACvC;AACA;AACA,oBAAoB,mEAAM;AAC1B;AACA;AACA;AACA,+BAA+B,oEAAO;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,mEAAM;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,SAAS;AACT,2BAA2B,8DAAS;AACpC;AACA,qBAAqB,8EAAiB;AACtC;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,QAAQ,mEAAM;AACd,QAAQ,wEAAW;AACnB;AACA;AACA;AACA,uBAAuB,oEAAO;AAC9B,uBAAuB,oEAAO;AAC9B,mBAAmB,mEAAM;AACzB,QAAQ,wEAAW;AACnB;AACA;AACA;AACA,gDAAgD,8EAAiB;AACjE;AACA;AACA;AACA,yBAAyB,oEAAO;AAChC,+BAA+B,oEAAO;AACtC,2BAA2B,oEAAO;AAClC,yBAAyB,oEAAO;AAChC;AACA;AACA;AACA,oBAAoB,qEAAQ;AAC5B,4DAA4D,qBAAqB;AACjF;AACA;AACA;AACA;AACA,oBAAoB,qEAAQ;AAC5B,4DAA4D,qBAAqB;AACjF;AACA;AACA;AACA;AACA,oBAAoB,qEAAQ;AAC5B;AACA;AACA;AACA,gBAAgB,qEAAQ;AACxB;AACA;AACA;AACA,gBAAgB,qEAAQ;AACxB;AACA;AACA,gBAAgB,qEAAQ;AACxB;AACA;AACA;AACA,YAAY,qEAAQ;AACpB;AACA;AACA,uBAAuB,oEAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,wEAAW;AACvB;AACA;AACA;AACA,YAAY,qEAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,uCAAuC;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,oEAAO;AACjC,0BAA0B,oEAAO;AACjC;AACA;AACA;AACA;AACA,gBAAgB,mEAAM;AACtB;AACA;AACA,gBAAgB,mEAAM;AACtB;AACA;AACA;AACA,sDAAsD,gEAAW;AACjE;AACA;AACA;AACA;AACA;AACA,6BAA6B,sEAAS;AACtC;AACA,mDAAmD,QAAQ;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,mBAAmB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,gEAAW;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,oEAAO;AAClC,uBAAuB,oEAAO;AAC9B,qBAAqB,oEAAO;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,oEAAO;AAC5B,2BAA2B,oEAAO;AAClC,2BAA2B,oEAAO;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,oEAAO;AAClC,2BAA2B,oEAAO;AAClC,2BAA2B,oEAAO;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,oEAAO;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,8EAAiB;AACvC,gBAAgB,8EAAiB;AACjC;AACA;AACA;AACA;AACA,gBAAgB,qEAAQ;AACxB;AACA;AACA;AACA;AACA;AACA,uDAAuD,SAAS;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,mEAAM;AAC7B;AACA;AACA;AACA,qBAAqB,mEAAM;AAC3B;AACA;AACA;AACA,iBAAiB,mEAAM;AACvB,aAAa,8EAAiB;AAC9B;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA,YAAY,8EAAiB;AAC7B,gBAAgB,8EAAiB;AACjC,gBAAgB,8DAAQ;AACxB;AACA,uBAAuB,mEAAM;AAC7B;AACA;AACA;AACA,qBAAqB,8DAAQ;AAC7B;AACA;AACA,gBAAgB,wEAAW;AAC3B;AACA;AACA,gBAAgB,8DAAQ;AACxB;AACA;AACA;AACA;AACA,YAAY,8EAAiB;AAC7B;AACA,gBAAgB,8EAAiB;AACjC,gBAAgB,8DAAQ;AACxB;AACA,uBAAuB,mEAAM;AAC7B;AACA,gBAAgB,wEAAW;AAC3B;AACA;AACA,gBAAgB,8DAAQ;AACxB,uBAAuB,mEAAM;AAC7B,gBAAgB,wEAAW;AAC3B;AACA,qBAAqB,8DAAQ;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,mEAAM;AACjC,YAAY,mEAAM;AAClB,YAAY,mEAAM;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,mEAAM;AACxC;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA,gDAAgD,SAAS;AACzD;AACA;AACA,0CAA0C,mEAAM;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,qBAAqB;AACrE;AACA;AACA;AACA;AACA,qBAAqB,mEAAM;AAC3B;AACA,YAAY,mEAAM;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,oEAAO;AACzC;AACA;AACA;AACA;AACA;AACA,sCAAsC,oEAAO;AAC7C;AACA;AACA;AACA;AACA;AACA,2BAA2B,oEAAO;AAClC;AACA;AACA,2DAA2D,oEAAO;AAClE;AACA;AACA;AACA,oBAAoB,mEAAM;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,6BAA6B;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,mEAAM;AAClD;AACA,wDAAwD,gEAAW;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,SAAS;AACpC;AACA;AACA;AACA;AACA,2BAA2B,SAAS;AACpC,6BAA6B,mEAAM;AACnC,gBAAgB,mEAAM;AACtB;AACA;AACA;AACA;AACA,gDAAgD,qBAAqB;AACrE;AACA;AACA;AACA;AACA,yBAAyB,sEAAS;AAClC;AACA;AACA;AACA;AACA;AACA,yBAAyB,sEAAS;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,8EAAiB;AAC3C;AACA,gDAAgD,SAAS;AACzD;AACA,2BAA2B,mEAAM,oBAAoB,mEAAM;AAC3D,qBAAqB,8EAAiB;AACtC;AACA;AACA,qCAAqC,mEAAM;AAC3C;AACA;AACA;AACA;AACA,8DAA8D,sEAAS;AACvE,4CAA4C,SAAS;AACrD;AACA,wBAAwB,oEAAO;AAC/B;AACA;AACA;AACA;AACA,0BAA0B,8EAAiB;AAC3C;AACA,gDAAgD,SAAS;AACzD;AACA,2BAA2B,mEAAM,mBAAmB,mEAAM;AAC1D,qBAAqB,8EAAiB;AACtC;AACA;AACA,mCAAmC,mEAAM;AACzC;AACA;AACA;AACA;AACA,8DAA8D,sEAAS;AACvE,4CAA4C,SAAS;AACrD;AACA,wBAAwB,oEAAO;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,mBAAmB;AAC9C,qBAAqB,sEAAS;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,oEAAO;AAClC,2BAA2B,oEAAO;AAClC,aAAa,8EAAiB;AAC9B;AACA;AACA,QAAQ,mEAAM;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,oBAAoB;AACxD;AACA;AACA,oCAAoC,kCAAkC;AACtE;AACA;AACA,oCAAoC,oCAAoC;AACxE;AACA;AACA;AACA;AACA,iDAAiD,sEAAS;AAC1D;AACA;AACA;AACA,gCAAgC,oBAAoB;AACpD,yBAAyB,sEAAS;AAClC;AACA;AACA;AACA,yBAAyB,sEAAS;AAClC,2BAA2B,mBAAmB;AAC9C;AACA,qBAAqB,8EAAiB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,oBAAoB;AACpD,yBAAyB,sEAAS;AAClC,gDAAgD,SAAS;AACzD;AACA;AACA;AACA;AACA,yBAAyB,sEAAS;AAClC,2BAA2B,mBAAmB;AAC9C;AACA,qBAAqB,8EAAiB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,gEAAW;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,SAAS;AACzD,6BAA6B,gEAAW;AACxC,yBAAyB,qEAAQ;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,SAAS;AACpD;AACA,gBAAgB,8EAAiB;AACjC;AACA;AACA,uBAAuB,mEAAM,iBAAiB,mEAAM;AACpD,iBAAiB,8EAAiB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,8DAAQ;AACzB;AACA;AACA,0DAA0D,mEAAM;AAChE;AACA;AACA;AACA;AACA;AACA,uBAAuB,eAAe;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,8EAAiB;AACvC,2BAA2B,kBAAkB;AAC7C,qBAAqB,8EAAiB;AACtC;AACA,oBAAoB,qEAAQ;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,YAAY;AACxD,yBAAyB,qEAAQ;AACjC;AACA;AACA;AACA,0DAA0D,8EAAiB,CAAC,qEAAQ;AACpF,2BAA2B,qEAAQ;AACnC;AACA;AACA;AACA;AACA;AACA,uDAAuD,gEAAW,KAAK,8EAAiB,CAAC,qEAAQ;AACjG,4BAA4B,qEAAQ;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,8EAAiB;AAC7B,oBAAoB,8EAAiB;AACrC,8CAA8C,SAAS;AACvD;AACA;AACA;AACA;AACA;AACA,4CAA4C,YAAY;AACxD,yBAAyB,qEAAQ;AACjC;AACA;AACA,wDAAwD,gEAAW;AACnE;AACA,oCAAoC,qEAAQ;AAC5C,wBAAwB,8EAAiB;AACzC;AACA;AACA,4BAA4B,8EAAiB;AAC7C,sDAAsD,SAAS;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,8EAAiB,CAAC,qEAAQ;AACpF,+BAA+B,qEAAQ;AACvC;AACA;AACA;AACA;AACA;AACA,wDAAwD,gEAAW,kEAAkE,8EAAiB,CAAC,qEAAQ;AAC/J,gCAAgC,qEAAQ;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,SAAS;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,qEAAQ;AACxB;AACA;AACA;AACA;AACA;AACA,8CAA8C,SAAS;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,wEAAW;AAC3B;AACA;AACA;AACA;AACA;AACA,2CAA2C,SAAS;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,2BAA2B,0BAA0B;AACrD;AACA;AACA;AACA;AACA,iCAAiC,qEAAQ;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA,6BAA6B,qEAAQ;AACrC;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,oEAAO;AACzB,0BAA0B,8EAAiB;AAC3C;AACA;AACA;AACA;AACA,iDAAiD,YAAY;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,aAAa;AAC7D;AACA;AACA;AACA;AACA;AACA,oDAAoD,aAAa;AACjE;AACA;AACA;AACA;AACA;AACA,YAAY,8EAAiB,SAAS,8EAAiB;AACvD;AACA;AACA,4CAA4C,YAAY;AACxD,2BAA2B,kBAAkB;AAC7C;AACA,qBAAqB,8EAAiB;AACtC;AACA;AACA;AACA,qDAAqD,8EAAiB,CAAC,qEAAQ;AAC/E,iCAAiC,qEAAQ;AACzC;AACA,uDAAuD,gEAAW,KAAK,8EAAiB,CAAC,qEAAQ;AACjG,iCAAiC,qEAAQ;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,8EAAiB;AACzC;AACA,wBAAwB,8EAAiB;AACzC;AACA,wBAAwB,8EAAiB;AACzC;AACA,wBAAwB,8EAAiB;AACzC;AACA;AACA;AACA;AACA;AACA,YAAY,8EAAiB;AAC7B;AACA;AACA;AACA;AACA,iCAAiC,gEAAW,iCAAiC,0DAAK;AAClF,YAAY,qEAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,8EAAiB;AAC7B;AACA;AACA,4CAA4C,YAAY;AACxD,yBAAyB,qEAAQ;AACjC;AACA;AACA;AACA;AACA;AACA,oBAAoB,qEAAQ;AAC5B;AACA;AACA;AACA;AACA,0DAA0D,8EAAiB,CAAC,qEAAQ;AACpF,gCAAgC,qEAAQ;AACxC;AACA;AACA;AACA;AACA;AACA,uDAAuD,gEAAW,KAAK,8EAAiB,CAAC,qEAAQ;AACjG,iCAAiC,qEAAQ;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,QAAQ,iFAAoB;AAC5B;AACA;AACA;AACA;AACA;AACA,QAAQ,iEAAY;AACpB;AACA;AACA;AACA;AACA,oCAAoC,0DAAK;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,0DAAK;AAC1C;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,0DAAK;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,iEAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,iEAAY;AACpB;AACA;AACA;AACA;AACA,QAAQ,iEAAY;AACpB,QAAQ,iEAAY;AACpB,QAAQ,iEAAY;AACpB,QAAQ,iEAAY;AACpB,kCAAkC,mEAAc;AAChD;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,QAAQ,iEAAY;AACpB;AACA;AACA,QAAQ,iEAAY;AACpB,QAAQ,iEAAY;AACpB,QAAQ,iEAAY;AACpB,QAAQ,iEAAY;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,8EAAiB;AACjC,gBAAgB,oEAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,oEAAO;AACvC;AACA;AACA,4BAA4B,oEAAO;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,8EAAiB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,qEAAQ;AAChB,QAAQ,4EAAa;AACrB;AACA,mBAAmB,4DAAO;AAC1B,SAAS;AACT,QAAQ,0EAAW;AACnB;AACA;AACA,QAAQ,0EAAW;AACnB;AACA,QAAQ,wEAAW;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,gEAAW,iCAAiC,0DAAK;AAClF;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,yBAAyB;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,0BAA0B;AACrD;AACA;AACA;AACA;AACA;AACA,iCAAiC,qEAAQ;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,2BAA2B;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,2BAA2B;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,qEAAQ;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,uBAAuB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,YAAY;AAC7D,yBAAyB,qEAAQ;AACjC;AACA;AACA;AACA;AACA,0DAA0D,8EAAiB,CAAC,qEAAQ;AACpF,+BAA+B,qEAAQ;AACvC;AACA;AACA;AACA;AACA;AACA,uDAAuD,gEAAW,KAAK,8EAAiB,CAAC,qEAAQ;AACjG,gCAAgC,qEAAQ;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,SAAS;AACtD;AACA,gBAAgB,8EAAiB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,SAAS;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,2CAA2C,SAAS;AACpD;AACA,gBAAgB,8EAAiB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,mEAAM;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,WAAW;AAClD;AACA;AACA;AACA,qBAAqB,mEAAM;AAC3B;AACA;AACA;AACA;AACA,gBAAgB,SAAS;AACzB,gBAAgB,SAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,oBAAoB;AAChE;AACA;AACA;AACA;AACA,4CAA4C,gBAAgB,8EAAiB,sDAAsD;AACnI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,uCAAuC;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,6CAA6C;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,gFAAmB;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,EAAE,wBAAwB,IAAI;AAC9C,gBAAgB,mBAAmB;AACnC,gBAAgB,SAAS;AACzB,eAAe,UAAU;AACzB;AACA;AACA,YAAY,8EAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA,8CAA8C,gEAAW;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,kBAAkB;AACjD,8BAA8B,qEAAQ;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,gEAAW,kDAAkD,gEAAW;AACvH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,iBAAiB;AACjC;AACA;AACA;AACA,YAAY,8EAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,qBAAqB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,qBAAqB;AACrC,gBAAgB,OAAO;AACvB,gBAAgB,QAAQ;AACxB;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA,qCAAqC,mEAAM;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,qBAAqB;AACrC;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA,gBAAgB,qBAAqB;AACrC;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,iBAAiB;AACjC;AACA;AACA;AACA,YAAY,8EAAiB;AAC7B;AACA;AACA;AACA;AACA,0BAA0B,4BAA4B,EAAE;AACxD;AACA;AACA;AACA;AACA;AACA,gBAAgB,qBAAqB;AACrC,gBAAgB,OAAO;AACvB,gBAAgB,QAAQ;AACxB;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA,mCAAmC,mEAAM;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,iBAAiB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,iBAAiB;AACjC;AACA;AACA;AACA;AACA;AACA,YAAY,8EAAiB;AAC7B;AACA;AACA;AACA;AACA,mBAAmB,8EAAiB;AACpC;AACA;AACA;AACA;AACA,gBAAgB,qBAAqB;AACrC,gBAAgB,iBAAiB;AACjC,gBAAgB,OAAO;AACvB,eAAe,UAAU;AACzB;AACA;AACA;AACA,YAAY,8EAAiB;AAC7B;AACA;AACA,uBAAuB,wBAAwB;AAC/C;AACA,gBAAgB,8EAAiB;AACjC;AACA;AACA;AACA;AACA;AACA,8CAA8C,gEAAW;AACzD;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,iBAAiB;AACjC,iBAAiB,wBAAwB,GAAG;AAC5C;AACA;AACA,YAAY,8EAAiB,YAAY,8EAAiB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,qEAAQ;AAC5C,iBAAiB,8EAAiB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,oBAAoB;AAC/C,oBAAoB,8EAAiB;AACrC;AACA;AACA;AACA;AACA;AACA,0BAA0B,mEAAM,GAAG;AACnC;AACA;AACA,0BAA0B,mEAAM,GAAG;AACnC;AACA,YAAY,8EAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA,uBAAuB,8DAAQ;AAC/B,iBAAiB,mEAAM;AACvB,yBAAyB,qEAAQ;AACjC,0DAA0D,8EAAiB;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,mEAAM;AAC/B,6BAA6B,mEAAM;AACnC,uBAAuB,mEAAM;AAC7B,0BAA0B,mEAAM;AAChC;AACA;AACA,oBAAoB,wEAAW;AAC/B,oBAAoB,qEAAQ;AAC5B;AACA;AACA,oBAAoB,wEAAW;AAC/B,oBAAoB,qEAAQ;AAC5B;AACA;AACA,oBAAoB,qEAAQ;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,kEAAK;AACjB;AACA,gBAAgB,qEAAQ;AACxB;AACA;AACA;AACA,gBAAgB,uEAAU;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,qBAAqB;AACrC;AACA;AACA,aAAa,8EAAiB;AAC9B,kDAAkD,gEAAW;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,iBAAiB;AACjC,gBAAgB,OAAO;AACvB;AACA;AACA,YAAY,8EAAiB,YAAY,8EAAiB;AAC1D;AACA;AACA;AACA,YAAY,8EAAiB;AAC7B;AACA;AACA,qBAAqB,mEAAM;AAC3B;AACA;AACA;AACA;AACA,sDAAsD,gEAAW;AACjE;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,gBAAgB,qBAAqB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,oEAAO,GAAG;AACd;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,oEAAO,GAAG;AACd;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,0EAAqB;AACzB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,8DAAS;AAC7C;AACA;AACA;AACA;AACA;AACA,yBAAyB,qEAAQ;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,4DAAO;AACnB;AACA;AACA;AACA;AACA,0BAA0B,qEAAQ;AAClC,aAAa,wEAAW;AACxB;AACA;AACA;AACA;AACA;AACA,gCAAgC,8CAA8C;AAC9E;AACA;AACA;AACA,YAAY,qEAAQ;AACpB,YAAY,qEAAQ;AACpB;AACA;AACA;AACA;AACA;AACA,gBAAgB,8EAAiB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,iEAAY;AACxB;AACA;AACA,YAAY,iEAAY;AACxB;AACA;AACA;AACA;AACA,YAAY,8EAAiB,gBAAgB,4CAA4C;AACzF;AACA;AACA,YAAY,8EAAiB,gBAAgB,4CAA4C;AACzF;AACA;AACA,YAAY,8EAAiB,gBAAgB,yCAAyC;AACtF;AACA;AACA;AACA;AACA,oBAAoB,uEAAU;AAC9B;AACA;AACA,uDAAuD,uEAAU;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,8EAAiB,gBAAgB,8BAA8B;AACvE;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B,YAAY,qEAAQ;AACpB;AACA;AACA;AACA;AACA,gBAAgB,qEAAQ;AACxB;AACA,YAAY,wEAAW;AACvB;AACA,YAAY,qEAAQ;AACpB;AACA,gBAAgB,qEAAQ;AACxB;AACA;AACA;AACA,qCAAqC,4DAAO;AAC5C;AACA;AACA;AACA,YAAY,qEAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA,QAAQ,iEAAY;AACpB;AACA;AACA;AACA;AACA,YAAY,wEAAW;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,8EAAiB;AAC5C;AACA;AACA,YAAY,qEAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,qEAAQ;AACxB,gBAAgB,wEAAW;AAC3B,kCAAkC,8EAAiB,gBAAgB,UAAU,uEAAU,iBAAiB;AACxG,oBAAoB,8EAAiB,gBAAgB,UAAU,uEAAU,cAAc;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,gBAAgB;AACpD;AACA;AACA;AACA,gBAAgB,iEAAY;AAC5B;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,8EAAiB;AAC5C;AACA;AACA,YAAY,qEAAQ;AACpB;AACA;AACA;AACA;AACA,gBAAgB,wEAAW;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,qEAAQ;AACxB,gBAAgB,8EAAiB,gBAAgB,kBAAkB;AACnE,gBAAgB,wEAAW;AAC3B,gBAAgB,8EAAiB,gBAAgB,UAAU,uEAAU,cAAc;AACnF;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,eAAe;AACnD,gBAAgB,iEAAY;AAC5B;AACA,SAAS;AACT;AACA;AACA;AACA,YAAY,wEAAW;AACvB;AACA;AACA,YAAY,qEAAQ;AACpB;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA,YAAY,8EAAiB,gBAAgB,gGAAgG;AAC7I;AACA;AACA,YAAY,8EAAiB,gBAAgB,qGAAqG;AAClJ;AACA;AACA,YAAY,8EAAiB,gBAAgB,4CAA4C;AACzF;AACA;AACA;AACA;AACA;AACA,YAAY,qEAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,4DAAO;AACvB,gBAAgB,qEAAQ;AACxB;AACA;AACA,gBAAgB,qEAAQ;AACxB;AACA;AACA;AACA,YAAY,4DAAO;AACnB;AACA;AACA;AACA;AACA,YAAY,oEAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,0DAAK,iBAAiB,8CAA8C;AAC1G,kCAAkC,0DAAK,gBAAgB,8CAA8C;AACrG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,iEAAY;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,wEAAW;AAC/B;AACA,oBAAoB,qEAAQ,yCAAyC,4DAAO;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,wEAAW;AACnC,wBAAwB,qEAAQ;AAChC;AACA;AACA,wBAAwB,wEAAW;AACnC,wBAAwB,qEAAQ;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,8CAA8C;AAC1F;AACA,wBAAwB,8EAAiB;AACzC,wBAAwB,wEAAW;AACnC,wBAAwB,wEAAW;AACnC,wBAAwB,8EAAiB,WAAW,sCAAsC;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,4DAAO;AACxB;AACA;AACA;AACA;AACA;AACA,QAAQ,wEAAW;AACnB;AACA;AACA,gBAAgB,qEAAQ;AACxB;AACA;AACA;AACA;AACA;AACA,gBAAgB,qEAAQ;AACxB;AACA;AACA;AACA;AACA;AACA,gBAAgB,qEAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,qEAAQ;AACxB,oBAAoB,4DAAO;AAC3B;AACA;AACA,wBAAwB,qEAAQ;AAChC;AACA;AACA,wBAAwB,qEAAQ;AAChC;AACA;AACA;AACA,oBAAoB,qEAAQ;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,wEAAW;AACnB;AACA,YAAY,wEAAW;AACvB,YAAY,wEAAW;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,8EAAiB;AAC3B;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,0EAAqB;AACzB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEoV;AACpV;;;;;;;;;;;;;ACzvcA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAub;AACtY;;AAEjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,QAAQ,8EAAiB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,sDAAsD,qBAAqB;AAC3E;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uGAAuG,mBAAmB;AAC1H;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yFAAyF;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB,kBAAkB;AAClB,kBAAkB;AAClB;AACA,kBAAkB;AACluBAAuB,8EAAiB;AACxC;AACA;;AAEA;AACA;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;AACA;AACA;AACA;AACA,2BAA2B,kEAAa;AACxC;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,aAAa,YAAY;AACrE,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,8DAAS;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,8EAAiB,gBAAgB,UAAU,uEAAU,iBAAiB;AAC1F;AACA;AACA,oBAAoB,8EAAiB,gBAAgB,WAAW,uEAAU,kBAAkB;AAC5F;AACA;AACA,oBAAoB,8EAAiB,gBAAgB,2BAA2B;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,uEAAU;AACrC;AACA;AACA,4BAA4B,uEAAU;AACtC;AACA,QAAQ,8EAAiB;AACzB;AACA;AACA;AACA;AACA;AACA,YAAY,4DAAO;AACnB,YAAY,iEAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,iEAAY;AAC5B;AACA;AACA;AACA;AACA,YAAY,4DAAO;AACnB,YAAY,iEAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,iEAAY;AAC5B;AACA;AACA;AACA;AACA,sDAAsD,8EAAiB;AACvE;AACA,4BAA4B,4BAA4B;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,+BAA+B;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,8EAAiB,aAAa,8EAAiB;AAC3D;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,8EAAiB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,8EAAiB,iBAAiB,8EAAiB;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,mBAAmB;AAC9C;AACA;AACA,0BAA0B,mBAAmB;AAC7C;AACA;AACA;AACA,+BAA+B,oBAAoB;AACnD;AACA;AACA,+BAA+B,oBAAoB;AACnD;AACA;AACA,8BAA8B,oBAAoB;AAClD;AACA;AACA,8BAA8B,oBAAoB;AAClD;AACA;AACA;AACA;AACA;AACA,eAAe,4BAA4B;AAC3C,eAAe,WAAW;AAC1B,eAAe,cAAc;AAC7B;AACA;AACA;AACA,qCAAqC,8EAAiB;AACtD,iCAAiC,8EAAiB;AAClD;AACA,YAAY,8EAAiB,gBAAgB,wBAAwB;AACrE;AACA,6BAA6B,8EAAiB;AAC9C;AACA;AACA,YAAY,wEAAW;AACvB,YAAY,qEAAQ;AACpB;AACA,YAAY,wEAAW;AACvB,YAAY,qEAAQ;AACpB;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA,oBAAoB,wEAAW;AAC/B,oBAAoB,qEAAQ;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,8DAAS;AACzB;AACA;AACA,YAAY,wEAAW;AACvB,YAAY,qEAAQ;AACpB;AACA;AACA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC;AACA;AACA,6BAA6B,8EAAiB;AAC9C;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA,oBAAoB,wEAAW;AAC/B,oBAAoB,qEAAQ;AAC5B;AACA;AACA;AACA,gBAAgB,8DAAS;AACzB;AACA;AACA,YAAY,wEAAW;AACvB,YAAY,qEAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,cAAc;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,8EAAiB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ,EAAE,uBAAuB;AACrC;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,oEAAO,GAAG;AACd;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,0EAAqB;AACzB;AACA;AACA;AACA,WAAW,cAAc;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,mCAAmC;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,8EAAiB;AAC1B;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB;AACA;AACA;AACA;AACA,mBAAmB,oBAAoB;AACvC;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,uBAAuB;AAC1C,4BAA4B,0EAAa,SAAS,sEAAsE;AACxH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,8EAAiB;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,8EAAiB;AACzB;AACA;AACA;AACA,mBAAmB,qBAAqB;AACxC;AACA,QAAQ,iEAAY;AACpB,yBAAyB,4DAAO;AAChC,QAAQ,iEAAY;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,8EAAiB;AAC1B;AACA;AACA;AACA;AACA;AACA,kBAAkB,8EAAiB;AACnC,IAAI,iEAAY;AAChB,IAAI,iEAAY;AAChB,mBAAmB,0BAA0B;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,4DAAO;AACjC,yBAAyB,4DAAO;AAChC,kBAAkB,8EAAiB;AACnC,IAAI,iEAAY;AAChB,IAAI,iEAAY;AAChB,qBAAqB,4DAAO;AAC5B,IAAI,iEAAY;AAChB,SAAS,8EAAiB;AAC1B;AACA;AACA,SAAS,8EAAiB;AAC1B;AACA;AACA;AACA,IAAI,iEAAY;AAChB,IAAI,iEAAY;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,8EAAiB;AAC1B;AACA;AACA;AACA;AACA;AACA,0BAA0B,4DAAO;AACjC,yBAAyB,4DAAO;AAChC,kBAAkB,8EAAiB;AACnC,IAAI,iEAAY;AAChB,IAAI,iEAAY;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,8EAAiB;AAC/B;AACA;AACA,SAAS,8EAAiB;AAC1B;AACA,uBAAuB,yBAAyB;AAChD;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,8EAAiB;AAC1B;AACA;AACA,SAAS,8EAAiB;AAC1B;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA,SAAS,8EAAiB;AAC1B;AACA;AACA,sBAAsB,8EAAiB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,8EAAiB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,8EAAiB;AAC1B;AACA;AACA,SAAS,8EAAiB;AAC1B;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,8EAAiB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,8EAAiB;AAC1B;AACA;AACA;AACA;AACA,sBAAsB,8EAAiB;AACvC,eAAe,8EAAiB;AAChC,yBAAyB,8EAAiB;AAC1C,QAAQ,8EAAiB;AACzB,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,8EAAiB;AAC1B;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,8EAAiB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,8EAAiB;AAC1B;AACA;AACA;AACA;AACA;AACA,SAAS,8EAAiB;AAC1B;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA,SAAS,8EAAiB;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,qBAAqB;AACxC,QAAQ,mEAAM;AACd;AACA;;AAEA;AACA;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;AACA,0BAA0B,kEAAa;AACvC;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA;AACA;AACA,gCAAgC,kEAAa;AAC7C;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,mBAAmB;AACpD;AACA;AACA;AACA;AACA,kCAAkC,8DAAS;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B,wBAAwB,yDAAI;AAC5B;AACA,YAAY,8EAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B,iBAAiB,8EAAiB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,8EAAiB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,8EAAiB;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,8EAAiB;AACtC;AACA;AACA,qBAAqB,8EAAiB,oBAAoB,8EAAiB;AAC3E;AACA;AACA,iCAAiC;AACjC;AACA,qBAAqB,8EAAiB;AACtC;AACA;AACA;AACA;AACA;AACA,yBAAyB,8EAAiB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,8EAAiB;AAC3C;AACA,oCAAoC,8EAAiB;AACrD;AACA;AACA;AACA;AACA,wBAAwB,8EAAiB;AACzC,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA,YAAY,qEAAQ;AACpB;AACA,YAAY,4DAAO;AACnB,YAAY,qEAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,uEAAU,gBAAgB,iBAAiB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,8EAAiB;AAC5D;AACA;AACA,2CAA2C,8EAAiB;AAC5D;AACA;AACA;AACA;AACA,uCAAuC,8EAAiB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,8EAAiB;AAChE;AACA;AACA,sBAAsB,8EAAiB;AACvC;AACA;AACA;AACA;AACA,iBAAiB,8EAAiB;AAClC;AACA;AACA;AACA,oCAAoC,8EAAiB;AACrD;AACA;AACA;AACA,YAAY,uEAAU,gBAAgB,kDAAkD;AACxF;AACA;AACA;AACA;AACA,2CAA2C,8EAAiB;AAC5D;AACA,oEAAoE,uBAAuB;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,8EAAiB;AACjC;AACA,yDAAyD,6BAA6B;AACtF;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA,oBAAoB,qEAAQ;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,8EAAiB,gBAAgB,8EAAiB;AACvE;AACA;AACA,qBAAqB,8EAAiB,8BAA8B,8EAAiB;AACrF;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,YAAY,qEAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,8EAAiB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,8EAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,2BAA2B,8DAAS;AACpC;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,qEAAQ;AAChC;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA,yBAAyB,8EAAiB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,yBAAyB;AACpD,kCAAkC,8EAAiB;AACnD,wDAAwD,SAAS,mBAAmB,EAAE;AACtF;AACA;AACA;AACA;AACA;AACA,2DAA2D,uBAAuB;AAClF;AACA;AACA;AACA;AACA,uBAAuB,yBAAyB;AAChD;AACA,qCAAqC,8DAAM;AAC3C;AACA;AACA;AACA;AACA,iBAAiB,8EAAiB;AAClC,gBAAgB,iEAAY;AAC5B;AACA,iDAAiD,8EAAiB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,uEAAU,gBAAgB,0DAA0D;AAC5F,qDAAqD,kEAAkE;AACvH;AACA;AACA;AACA,kBAAkB,8EAAiB;AACnC,uDAAuD,qEAAQ;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,4DAAO,6CAA6C,8EAAiB;AACrH,2CAA2C,uEAAU;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA,oDAAoD,qEAAQ;AAC5D,yBAAyB,oEAAO;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B,4BAA4B,qEAAQ;AACpC;AACA;AACA,0CAA0C;AAC1C;AACA;AACA,YAAY,mEAAM;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,uEAAkB;AAC/C;AACA;AACA;AACA;AACA,YAAY,mEAAM;AAClB;AACA,sCAAsC,8EAAiB;AACvD;AACA;AACA;AACA,wBAAwB,uEAAkB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,8EAAiB;AAC1D;AACA;AACA,YAAY,4DAAO,oCAAoC,8EAAiB;AACxE;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,qEAAQ,wBAAwB,wEAAW;AACxE;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA,YAAY,8EAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,wDAAwD;AAChH;AACA;AACA;AACA;AACA,QAAQ,uEAAU,gBAAgB,gDAAgD;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,2CAA2C,8EAAiB;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,8EAAiB;AAC7B,4DAA4D,wEAAwE;AACpI;AACA;AACA;AACA,uDAAuD,wCAAwC,iBAAiB,EAAE;AAClH,mCAAmC,8DAAM,EAAE,2DAA2D;AACtG;AACA,aAAa,8EAAiB;AAC9B,YAAY,oEAAO;AACnB;AACA;AACA;AACA,YAAY,oEAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,qEAAQ;AACpB;AACA;AACA,YAAY,wEAAW;AACvB;AACA;AACA;AACA,uDAAuD,2BAA2B;AAClF;AACA;AACA;AACA,QAAQ,qEAAQ;AAChB,qDAAqD,yBAAyB;AAC9E;AACA;AACA;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,qEAAQ;AACpB;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA,iBAAiB,8EAAiB;AAClC;AACA;AACA,sBAAsB,8EAAiB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,SAAS;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,8EAAiB;AACrC;AACA;AACA;AACA;AACA,QAAQ,iEAAY;AACpB;AACA;AACA,QAAQ,iEAAY;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,qEAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,8EAAiB;AAC1C;AACA;AACA;AACA,6BAA6B,8EAAiB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,8EAAiB;AACjD;AACA;AACA;AACA;AACA,8BAA8B,8EAAiB;AAC/C,wBAAwB,mEAAM;AAC9B;AACA;AACA;AACA;AACA,8CAA8C,8EAAiB;AAC/D;AACA,4BAA4B,mEAAM;AAClC;AACA;AACA;AACA;AACA;AACA,4BAA4B,8EAAiB;AAC7C;AACA;AACA;AACA;AACA;AACA,sDAAsD,8EAAiB;AACvE;AACA;AACA;AACA,wBAAwB,mEAAM;AAC9B;AACA,0CAA0C;AAC1C;AACA;AACA;AACA,4BAA4B,8EAAiB;AAC7C;AACA;AACA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA,0EAA0E,8EAAiB;AAC3F,4BAA4B,mEAAM;AAClC;AACA;AACA;AACA,4BAA4B,mEAAM;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,8EAAiB,gBAAgB,WAAW,uEAAU,kBAAkB;AAC5F;AACA;AACA,oBAAoB,8EAAiB,gBAAgB,UAAU,uEAAU,iBAAiB;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,8EAAiB;AAC1C,wBAAwB,mEAAM;AAC9B;AACA;AACA,mCAAmC,iBAAiB;AACpD,6BAA6B,8EAAiB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,8EAAiB;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,8EAAiB;AACzD,wCAAwC,8EAAiB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,8EAAiB;AAClC;AACA;AACA;AACA;AACA,YAAY,wEAAW;AACvB,YAAY,wEAAW;AACvB,YAAY,mEAAM;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,iEAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,wEAAW;AACnB;AACA,YAAY,wEAAW;AACvB;AACA;AACA,YAAY,wEAAW,IAAI,8EAAiB;AAC5C;AACA;AACA,aAAa,8EAAiB;AAC9B,2BAA2B,wBAAwB;AACnD;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA,QAAQ,wEAAW;AACnB,aAAa,8EAAiB;AAC9B,YAAY,wEAAW;AACvB;AACA,aAAa,8EAAiB,sBAAsB,8EAAiB;AACrE;AACA,YAAY,mEAAM;AAClB;AACA;AACA;AACA,YAAY,mEAAM;AAClB;AACA,YAAY,mEAAM;AAClB;AACA;AACA;AACA;AACA;AACA,iBAAiB,8EAAiB;AAClC,+BAA+B,mCAAmC;AAClE;AACA,oBAAoB,mEAAM;AAC1B;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,iEAAY;AACxB;AACA;AACA,YAAY,iEAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,iEAAY;AACxB;AACA;AACA,YAAY,iEAAY;AACxB;AACA,wCAAwC,8EAAiB;AACzD,2BAA2B,yBAAyB;AACpD;AACA,oBAAoB,iEAAY;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,UAAU;AACzB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,4DAA4D,8EAAiB;AAC7E,iBAAiB,8EAAiB;AAClC;AACA;AACA,4BAA4B,qEAAQ;AACpC;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,8EAAiB;AAC3D;AACA;AACA,wBAAwB,wEAAW;AACnC,6BAA6B,8EAAiB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,qEAAQ;AACpC;AACA;AACA,4BAA4B,qEAAQ;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,8EAAiB,gBAAgB,wBAAwB;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,qEAAQ;AACpC;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,8EAAiB,mBAAmB,wEAAW;AACxE,4BAA4B,wEAAW;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,qEAAQ;AACpB;AACA;AACA,6CAA6C,8EAAiB;AAC9D;AACA;AACA,YAAY,qEAAQ;AACpB,uCAAuC,8EAAiB;AACxD;AACA;AACA;AACA;AACA,YAAY,wEAAW;AACvB,YAAY,wEAAW;AACvB,wCAAwC,8EAAiB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB,gBAAgB;AAChB;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,uEAAU,IAAI;AAClB;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,oEAAO,GAAG;AACd;AACA;AACA,IAAI,oEAAO,EAAE,2BAA2B;AACxC;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,0EAAqB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,0EAAa,SAAS,8BAA8B;AAChF;AACA;AACA;AACA,8BAA8B,iCAAiC;AAC/D;AACA;AACA;AACA,aAAa;AACb;AACA,2CAA2C;AAC3C,2BAA2B,wBAAwB;AACnD;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,0EAAa,SAAS,gCAAgC;AAClF;AACA;AACA;AACA,8BAA8B,iCAAiC;AAC/D;AACA;AACA;AACA,aAAa;AACb,8BAA8B,oBAAoB;AAClD;AACA;AACA;AACA,aAAa;AACb;AACA,6CAA6C,YAAY,wBAAwB;AACjF;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,8EAAiB;AAC3C,2BAA2B,8EAAiB;AAC5C,2BAA2B,8EAAiB;AAC5C,iCAAiC,8EAAiB;AAClD,iCAAiC,8EAAiB;AAClD,iCAAiC,8EAAiB;AAClD,4BAA4B,8EAAiB,uCAAuC;AACpF,qCAAqC,8EAAiB;AACtD,aAAa;AACb,4BAA4B,8EAAiB;AAC7C,0BAA0B,8EAAiB;AAC3C,wBAAwB,8EAAiB;AACzC;AACA;AACA;AACA;AACA,8BAA8B,iCAAiC;AAC/D;AACA;AACA;AACA,aAAa;AACb,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,iCAAiC;AAC3D;AACA;AACA;AACA;AACA;AACA,0BAA0B,oBAAoB;AAC9C;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA,CAAC,sCAAsC;;AAEvC;AACA;AACA;;AAEA;AACA;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,kEAAa;AACvC;AACA;AACA,IAAI,qEAAQ,EAAE,4CAA4C;AAC1D;AACA;AACA,IAAI,qEAAQ,EAAE,6CAA6C;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,0BAA0B;AAC7D;AACA;AACA;AACA;AACA,oCAAoC,8DAAS;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,qEAAQ;AACpB;AACA;AACA;AACA,eAAe,qEAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,6CAA6C;AAC9F,uDAAuD,mDAAmD;AAC1G,uDAAuD,mDAAmD;AAC1G;AACA;AACA;AACA;AACA,YAAY,qEAAQ;AACpB,YAAY,qEAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,kBAAkB;AAC1D;AACA;AACA;AACA;AACA,uBAAuB,gCAAgC;AACvD;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,gFAAmB;AAC3B;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,wEAAW;AACnB;AACA,QAAQ,qEAAQ;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,qEAAQ;AACpB;AACA,uBAAuB,8EAAiB;AACxC;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,UAAU,uEAAkB,yBAAyB;AACjG;AACA;AACA;AACA;AACA,2CAA2C,oEAAO;AAClD,qDAAqD;AACrD;AACA,wBAAwB,mEAAM;AAC9B;AACA;AACA;AACA;AACA,wBAAwB,iFAAoB;AAC5C;AACA;AACA;AACA;AACA;AACA,2BAA2B,8EAAiB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,kCAAkC;AACpF;AACA,QAAQ,iEAAY,eAAe,4DAAO;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,uEAAU,UAAU,0EAA0E;AACtG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,oEAAO;AAC5B;AACA;AACA;AACA;AACA,YAAY,8EAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,oEAAO;AAC5B;AACA;AACA;AACA;AACA,YAAY,8EAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,8EAAiB;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,8EAAiB;AACjC;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,wEAAW,oCAAoC,wEAAW;AAClF;AACA;AACA;AACA,yBAAyB;AACzB,4BAA4B,uEAAU,iBAAiB,WAAW,uEAAU,kBAAkB,kBAAkB;AAChH,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,qEAAQ;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,8DAAS;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,8EAAiB;AAC7B;AACA;AACA;AACA;AACA,qEAAqE,uEAAU;AAC/E,0BAA0B,WAAW,uEAAU,kBAAkB,kBAAkB;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,4DAAO;AACvB,gBAAgB,qEAAQ;AACxB;AACA;AACA,oDAAoD,uEAAU;AAC9D;AACA;AACA,6EAA6E,qBAAqB;AAClG;AACA;AACA,YAAY,wEAAW;AACvB;AACA;AACA,YAAY,qEAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,8DAAS;AACrB;AACA;AACA;AACA;AACA;AACA,YAAY,wEAAW;AACvB,YAAY,qEAAQ;AACpB;AACA;AACA,4DAA4D,8EAAiB;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,8EAAiB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,8EAA8E,oBAAoB;AAClG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,8EAAiB;AACtE;AACA;AACA,0CAA0C,QAAQ;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,wEAAW;AACvB,YAAY,qEAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,gBAAgB,mEAAM;AACtB;AACA;AACA,gBAAgB,mEAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,oEAAO,qBAAqB,aAAa,GAAG,UAAU,GAAG,aAAa;AACjH;AACA,gBAAgB,iEAAY;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,iEAAY;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,8DAAS;AACjB,QAAQ,wEAAW;AACnB,QAAQ,qEAAQ;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,oEAAO;AACtC;AACA;AACA;AACA;AACA;AACA,kBAAkB,oEAAO,eAAe,aAAa,GAAG,UAAU,GAAG,aAAa;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,iEAAY,mBAAmB,4DAAO;AACtD;AACA;AACA,oBAAoB,4DAAO;AAC3B,2CAA2C,0DAAK;AAChD;AACA;AACA,qBAAqB;AACrB,oBAAoB,iEAAY,mBAAmB,4DAAO;AAC1D;AACA;AACA,oBAAoB,iEAAY;AAChC;AACA,wBAAwB,iEAAY;AACpC;AACA;AACA;AACA;AACA,QAAQ,iEAAY;AACpB,QAAQ,iEAAY;AACpB,QAAQ,iEAAY;AACpB;AACA;AACA;AACA,uBAAuB,4DAAO;AAC9B;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA,gBAAgB,iEAAY;AAC5B;AACA;AACA;AACA,YAAY,iEAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,iEAAY;AAChC;AACA;AACA;AACA,wBAAwB,iEAAY;AACpC;AACA;AACA;AACA,oBAAoB,iEAAY;AAChC,oBAAoB,iEAAY;AAChC;AACA;AACA;AACA,gBAAgB,iEAAY;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,iEAAY,sBAAsB,4DAAO;AACzD;AACA;AACA,oBAAoB,4DAAO;AAC3B;AACA;AACA;AACA,oBAAoB,iEAAY,sBAAsB,4DAAO;AAC7D;AACA;AACA,oBAAoB,iEAAY;AAChC;AACA,wBAAwB,iEAAY;AACpC;AACA;AACA;AACA;AACA,QAAQ,iEAAY;AACpB,QAAQ,iEAAY;AACpB,QAAQ,iEAAY;AACpB;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA,gBAAgB,iEAAY;AAC5B;AACA;AACA;AACA,YAAY,iEAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,iEAAY;AAChC;AACA,4CAA4C,4DAAO;AACnD;AACA,wBAAwB,iEAAY;AACpC;AACA;AACA;AACA;AACA,gBAAgB,iEAAY;AAC5B,gBAAgB,iEAAY;AAC5B;AACA;AACA;AACA,YAAY,iEAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uFAAuF,uEAAU;AACjG;AACA;AACA;AACA;AACA;AACA,uDAAuD,uEAAU;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,wEAAW;AACvC;AACA;AACA,4BAA4B,qEAAQ;AACpC;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,qEAAQ;AACpC;AACA;AACA,4BAA4B,wEAAW;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,YAAY,8EAAiB;AAC7B;AACA;AACA,YAAY,8EAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,mEAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,wEAAW;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,oEAAO,GAAG;AACd;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,0EAAqB;AACzB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,6BAA6B,sBAAsB,YAAY;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,2DAA2D;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,8EAAiB,kDAAkD,kEAAa;AACvG;AACA,SAAS,8EAAiB;AAC1B;AACA;AACA,SAAS,8EAAiB,oBAAoB,8EAAiB;AAC/D,wBAAwB,8EAAiB;AACzC;AACA;AACA;AACA;AACA,qBAAqB,8EAAiB;AACtC,qBAAqB,8EAAiB;AACtC;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,8EAAiB;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,WAAW;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,WAAW;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,8EAAiB;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD;AAChD;AACA,qDAAqD;AACrD;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,8EAAiB;AAC/B,iBAAiB,8EAAiB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,8EAAiB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,sEAAS,gDAAgD,sEAAS;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,wBAAwB,mBAAmB;AAChE;AACA;AACA;AACA;AACA;AACA,uBAAuB,8EAAiB,kDAAkD,kEAAa;AACvG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,0BAA0B;AACjD;AACA;AACA;AACA;AACA,QAAQ,8EAAiB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA,SAAS,8EAAiB;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEqT;AACrT;;;;;;;;;;;;;ACv2JA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAuY;AACtV;AACuC;;AAExF;AACA;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,mEAAM,GAAG;AACvB;AACA;AACA,YAAY,yEAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,SAAS;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,qEAAQ;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA,mBAAmB;AACnB;AACA;AACA,kBAAkB;AAClB,6DAA6D;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,mBAAmB,kEAAa;AAChC;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,SAAS,kBAAkB,GAAG,kBAAkB,EAAE,kBAAkB;AACnH;AACA;AACA;AACA;AACA,kDAAkD,8DAAS;AAC3D;AACA;AACA,gBAAgB,oBAAoB;AACpC,gBAAgB,yBAAyB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,cAAc;AAC9B,eAAe,SAAS;AACxB,iBAAiB,KAAK;AACtB;AACA;AACA;AACA;AACA,gDAAgD,SAAS;AACzD;AACA;AACA;AACA;AACA;AACA,sCAAsC,QAAQ;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,WAAW;AAC3B,eAAe,SAAS;AACxB,iBAAiB,KAAK;AACtB;AACA;AACA;AACA,2CAA2C,SAAS;AACpD,oDAAoD,SAAS;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,4BAA4B,4DAAK;AACjC;AACA,wBAAwB,sBAAsB;AAC9C,uBAAuB,yBAAyB;AAChD;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,QAAQ,uEAAU;AAClB;AACA;AACA;AACA,SAAS;AACT;AACA,YAAY,qEAAQ;AACpB;AACA;AACA;AACA,mDAAmD,mEAAM;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB,aAAa;AACb;AACA,uBAAuB,kBAAkB;AACzC;AACA,wDAAwD,uEAAkB;AAC1E;AACA;AACA;AACA,wBAAwB,uCAAuC;AAC/D,wCAAwC,wEAAW;AACnD,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,mDAAmD,kDAAkD;AACrG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,SAAS;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,uEAAkB;AACtE,wCAAwC,mEAAmE,mBAAmB,EAAE;AAChI;AACA;AACA,0BAA0B,8DAAM;AAChC;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,8BAA8B,wEAAW;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,mEAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,wEAAW;AAC3B;AACA,YAAY,wEAAW;AACvB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,gBAAgB,wEAAW;AAC3B,gBAAgB,mEAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,iEAAY;AACpB,QAAQ,iEAAY;AACpB,QAAQ,iEAAY;AACpB,QAAQ,iEAAY;AACpB,QAAQ,iEAAY;AACpB,wBAAwB,yEAAY,gBAAgB,kCAAkC;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,oEAAO;AACrD;AACA;AACA;AACA,iCAAiC,oEAAO;AACxC,eAAe,oEAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,oEAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,oEAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA,gBAAgB,qEAAQ;AACxB;AACA;AACA,gCAAgC;AAChC;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,wEAAW;AAC3B;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA,oBAAoB,mEAAM;AAC1B;AACA;AACA,SAAS;AACT;AACA;AACA,QAAQ,iEAAY;AACpB,QAAQ,iEAAY;AACpB,QAAQ,iEAAY;AACpB,QAAQ,iEAAY;AACpB,QAAQ,iEAAY;AACpB;AACA;AACA;AACA;AACA,gBAAgB,oBAAoB;AACpC,gBAAgB,oBAAoB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,sEAAS;AACjC;AACA;AACA,wBAAwB,wEAAW;AACnC;AACA;AACA,wBAAwB,qEAAQ;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,uEAAU;AACd;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,0EAAqB;AACzB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,uBAAuB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,iBAAiB;AACjC,gBAAgB,yBAAyB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,qEAAQ;AACrC,oDAAoD,SAAS,mBAAmB,EAAE;AAClF,uDAAuD,sDAAsD;AAC7G,0DAA0D,WAAW;AACrE;AACA;AACA;AACA,YAAY,mEAAM;AAClB;AACA;AACA,YAAY,qEAAQ;AACpB;AACA;AACA;AACA;AACA,8BAA8B,wEAAW;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,cAAc;AAC9B,eAAe,SAAS;AACxB,iBAAiB,KAAK;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,WAAW;AAC3B,eAAe,SAAS;AACxB,iBAAiB,KAAK;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,sDAAsD;AAC5G;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,qEAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,8DAAM;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,mBAAmB;AACvC;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,iEAAY;AACpB;AACA;AACA;AACA,QAAQ,uEAAU;AAClB;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,wEAAW;AAC3B,gBAAgB,wEAAW;AAC3B;AACA;AACA,gBAAgB,wEAAW;AAC3B;AACA;AACA;AACA,iBAAiB;AACjB;AACA,gBAAgB,mEAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,iEAAY;AACpB,QAAQ,iEAAY;AACpB,YAAY,mEAAc;AAC1B;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,QAAQ,iEAAY;AACpB,QAAQ,wEAAW,eAAe,mEAAc;AAChD;AACA;AACA,+BAA+B,wBAAwB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,iBAAiB;AACjC,gBAAgB,iBAAiB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,wEAAW;AACnC;AACA,oBAAoB,qEAAQ;AAC5B;AACA;AACA;AACA,wBAAwB,qEAAQ;AAChC;AACA;AACA,wBAAwB,wEAAW;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,uEAAU;AACd;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,0EAAqB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,iBAAiB;AAC3B,UAAU,kBAAkB;AAC5B,UAAU;AACV;AACA,IAAI;AACJ;AACA,WAAW,OAAO;AAClB,WAAW,uBAAuB;AAClC;AACA;AACA,iDAAiD;AACjD;AACA;AACA;AACA;AACA,QAAQ,8EAAiB;AACzB,2BAA2B,kEAAa;AACxC;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA;AACA,0BAA0B,mBAAmB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,8DAAM,eAAe;AACrC;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,kEAAa;AACxC;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA;AACA;AACA,gCAAgC,kEAAa;AAC7C;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,6BAA6B;AAC5E;AACA;AACA;AACA;AACA,kDAAkD,8DAAM;AACxD;AACA;AACA,gBAAgB,oBAAoB;AACpC,gBAAgB,yBAAyB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,qEAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,wEAAW;AACnB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,yBAAyB;AAC3E;AACA,QAAQ,4EAAa;AACrB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,sBAAsB;AACnF;AACA;AACA;AACA,YAAY,qEAAQ;AACpB;AACA;AACA,uBAAuB,uEAAkB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,uEAAkB;AACzC;AACA;AACA,iEAAiE,yCAAyC;AAC1G;AACA;AACA;AACA,mDAAmD,4CAA4C;AAC/F;AACA,mDAAmD,0CAA0C;AAC7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,0EAAW;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,8DAAS,GAAG;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,WAAW;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,0EAAW;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,uEAAU;AAClB;AACA,SAAS;AACT;AACA;AACA,QAAQ,iEAAY;AACpB;AACA;AACA,QAAQ,iEAAY;AACpB;AACA;AACA;AACA,gBAAgB,oBAAoB;AACpC,gBAAgB,oBAAoB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,qEAAQ;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,mEAAM;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,qEAAQ;AACZ;AACA;AACA,IAAI,oEAAO,GAAG;AACd;AACA;AACA,IAAI,oEAAO,GAAG;AACd;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,kEAAK;AACT;AACA;AACA,IAAI,0EAAqB;AACzB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAE0K;AAC1K;;;;;;;;;;;;;AC3mDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA8B;AACG;AACc;AAC8C;;AAE7F;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,0DAAY;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,4BAA4B;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,4BAA4B;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,iDAAiwDAAU;AACtB;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,4DAAM;AACV,IAAI,wDAAU;AACd;AACA,qBAAqB,wDAAU;AAC/B,IAAI,+DAAS;AACb;AACA;AACA,KAAK;AACL,IAAI,wDAAU,uBAAuB,wDAAU;AAC/C;;AAEA;AACA;AACA,kBAAkB,wDAAU;AAC5B,IAAI,8DAAQ;AACZ;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAE+C;;;;;;;;;;;;;ACnW/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA8B;AACA;AACO;AACJ;AACC;AACD;AACE;AACF;AACC;AACG;AACC;AACH;AACD;AACa;AAC8C;;AAE7F;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,2DAAY;AACjD,mCAAmC,2DAAY;AAC/C,iCAAiC,2DAAY;AAC7C,sCAAsC,2DAAY;AAClD,mCAAmC,2DAAY;AAC/C,qCAAqC,2DAAY;AACjD,4BAA4B,2DAAY;AACxC,iCAAiC,2DAAY;AAC7C,qCAAqC,2DAAY;AACjD,8BAA8B,2DAAY;AAC1C,oCAAoC,2DAAY;AAChD,+BAA+B,2DAAY;AAC3C,iCAAiC,2DAAY;AAC7C,kCAAkC,2DAAY;AAC9C,gCAAgC,2DAAY;AAC5C,+BAA+B,2DAAY;AAC3C,iCAAiC,2DAAY;AAC7C,8BAA8B,2DAAY;AAC1C,gCAAgC,2DAAY;AAC5C,0BAA0B,2DAAY;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,iDAAiD;AACxF;AACA;AACA,uCAAuC,wBAAwB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,4BAA4B;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,4BAA4B;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,iDAAiwDAAwD,wCAAwC,EAAE;AAClG,sDAAsD,sCAAsC,EAAE;AAC9F,oDAAoD,oCAAoC,EAAE;AAC1F,yDAAyD,yCAAyC,EAAE;AACpG,sDAAsD,sCAAsC,EAAE;AAC9F,wDAAwD,wCAAwC,EAAE;AAClG,+CAA+C,+BAA+B,EAAE;AAChF,oDAAoD,oCAAoC,EAAE;AAC1F,wDAAwD,wCAAwC,EAAE;AAClG,iDAAiD,iCAAiC,EAAE;AACpF,uDAAuD,uCAAuC,EAAE;AAChG,kDAAkD,kCAAkC,EAAE;AACtF,oDAAoD,oCAAoC,EAAE;AAC1F,qDAAqD,qCAAqC,EAAE;AAC5F,mDAAmD,mCAAmC,EAAE;AACxF,kDAAkD,kCAAkC,EAAE;AACtF,oDAAoD,oCAAoC,EAAE;AAC1F,iDAAiD,iCAAiC,EAAE;AACpF,mDAAmD,mCAAmC,EAAE;AACxF,6CAA6C,6BAA6B,EAAE;AAC5E;AACA,EAAE;AACF;AACA,KAAK,OAAO,yDAAU;AACtB;AACA,yDAAU;AACV,IAAI,4DAAK;AACT,IAAI,yDAAU;AACd;AACA,yDAAU;AACV,IAAI,4DAAK;AACT,IAAI,yDAAU;AACd;AACA,yDAAU;AACV,IAAI,4DAAK;AACT,IAAI,yDAAU;AACd;AACA,yDAAU;AACV,IAAI,4DAAK;AACT,IAAI,yDAAU;AACd;AACA,yDAAU;AACV,IAAI,4DAAK;AACT,IAAI,yDAAU;AACd;AACA,yDAAU;AACV,IAAI,4DAAK;AACT,IAAI,yDAAU;AACd;AACA,yDAAU;AACV,IAAI,4DAAK;AACT,IAAI,yDAAU;AACd;AACA,yDAAU;AACV,IAAI,4DAAK;AACT,IAAI,yDAAU;AACd;AACA,yDAAU;AACV,IAAI,4DAAK;AACT,IAAI,yDAAU;AACd;AACA,yDAAU;AACV,IAAI,4DAAK;AACT,IAAI,yDAAU;AACd;AACA,yDAAU;AACV,IAAI,4DAAK;AACT,IAAI,yDAAU;AACd;AACA,yDAAU;AACV,IAAI,4DAAK;AACT,IAAI,yDAAU;AACd;AACA,yDAAU;AACV,IAAI,4DAAK;AACT,IAAI,yDAAU;AACd;AACA,yDAAU;AACV,IAAI,4DAAK;AACT,IAAI,yDAAU;AACd;AACA,yDAAU;AACV,IAAI,4DAAK;AACT,IAAI,yDAAU;AACd;AACA,yDAAU;AACV,IAAI,4DAAK;AACT,IAAI,yDAAU;AACd;AACA,yDAAU;AACV,IAAI,4DAAK;AACT,IAAI,yDAAU;AACd;AACA,yDAAU;AACV,IAAI,4DAAK;AACT,IAAI,yDAAU;AACd;AACA,yDAAU;AACV,IAAI,4DAAK;AACT,IAAI,yDAAU;AACd;AACA,yDAAU;AACV,IAAI,4DAAK;AACT,IAAI,yDAAU;AACd;AACA,yDAAU;AACV,IAAI,4DAAK;AACT,IAAI,yDAAU;AACd;AACA,yDAAU;AACV,IAAI,4DAAK;AACT,IAAI,yDAAU;AACd;AACA,yDAAU;AACV,IAAI,4DAAK;AACT,IAAI,yDAAU;AACd;AACA,yDAAU;AACV,IAAI,4DAAK;AACT,IAAI,yDAAU;AACd;AACA,yDAAU;AACV,IAAI,4DAAK;AACT,IAAI,yDAAU;AACd;AACA,yDAAU;AACV,IAAI,4DAAK;AACT,IAAI,yDAAU;AACd;AACA,yDAAU;AACV,IAAI,4DAAK;AACT,IAAI,yDAAU;AACd;AACA,yDAAU;AACV,IAAI,4DAAK;AACT,IAAI,yDAAU;AACd;AACA,yDAAU;AACV,IAAI,4DAAK;AACT,IAAI,yDAAU;AACd;AACA,yDAAU;AACV,IAAI,4DAAK;AACT,IAAI,yDAAU;AACd;AACA,yDAAU;AACV,IAAI,4DAAK;AACT,IAAI,yDAAU;AACd;AACA,yDAAU;AACV,IAAI,4DAAK;AACT,IAAI,yDAAU;AACd;AACA,yDAAU;AACV,IAAI,4DAAK;AACT,IAAI,yDAAU;AACd;AACA,yDAAU;AACV,IAAI,4DAAK;AACT,IAAI,yDAAU;AACd;AACA,yDAAU;AACV,IAAI,4DAAK;AACT,IAAI,yDAAU;AACd;AACA,yDAAU;AACV,IAAI,4DAAK;AACT,IAAI,yDAAU;AACd;AACA,yDAAU;AACV,IAAI,4DAAK;AACT,IAAI,yDAAU;AACd;AACA,yDAAU;AACV,IAAI,4DAAK;AACT,IAAI,yDAAU;AACd;AACA,yDAAU;AACV,IAAI,4DAAK;AACT,IAAI,yDAAU;AACd;AACA,yDAAU;AACV,IAAI,4DAAK;AACT,IAAI,yDAAU;AACd;AACA,yDAAU;AACV,IAAI,4DAAK;AACT,IAAI,yDAAU;AACd;AACA,yDAAU;AACV,IAAI,4DAAK;AACT,IAAI,yDAAU;AACd;AACA,yDAAU;AACV,IAAI,4DAAK;AACT,IAAI,yDAAU;AACd;AACA,yDAAU;AACV,IAAI,4DAAK;AACT,IAAI,yDAAU;AACd;AACA,yDAAU;AACV,IAAI,4DAAK;AACT,IAAI,yDAAU;AACd;AACA,yDAAU;AACV,IAAI,4DAAK;AACT,IAAI,yDAAU;AACd;AACA,yDAAU;AACV,IAAI,4DAAK;AACT,IAAI,yDAAU;AACd;AACA,yDAAU;AACV,IAAI,4DAAK;AACT,IAAI,yDAAU;AACd;AACA,yDAAU;AACV,IAAI,4DAAK;AACT,IAAI,yDAAU;AACd;AACA,yDAAU;AACV,IAAI,4DAAK;AACT,IAAI,yDAAU;AACd;AACA,yDAAU;AACV,IAAI,4DAAK;AACT,IAAI,yDAAU;AACd;AACA,yDAAU;AACV,IAAI,4DAAK;AACT,IAAI,yDAAU;AACd;AACA,yDAAU;AACV,IAAI,4DAAK;AACT,IAAI,yDAAU;AACd;AACA,yDAAU;AACV,IAAI,4DAAK;AACT,IAAI,yDAAU;AACd;AACA,yDAAU;AACV,IAAI,4DAAK;AACT,IAAI,yDAAU;AACd;AACA,yDAAU;AACV,IAAI,4DAAK;AACT,IAAI,yDAAU;AACd;AACA,yDAAU;AACV,IAAI,4DAAK;AACT,IAAI,yDAAU;AACd;AACA,yDAAU;AACV,IAAI,6DAAM;AACV,IAAI,yDAAU;AACd;AACA,yDAAU;AACV,IAAI,6DAAM;AACV,IAAI,yDAAU;AACd;AACA,yDAAU;AACV,IAAI,6DAAM;AACV,IAAI,yDAAU;AACd;AACA,yDAAU;AACV,IAAI,6DAAM;AACV,IAAI,yDAAU;AACd;AACA,yDAAU;AACV,IAAI,6DAAM;AACV,IAAI,yDAAU;AACd;AACA,yDAAU;AACV,IAAI,6DAAM;AACV,IAAI,yDAAU;AACd;AACA,yDAAU;AACV,IAAI,6DAAM;AACV,IAAI,yDAAU;AACd;AACA,yDAAU;AACV,IAAI,6DAAM;AACV,IAAI,yDAAU;AACd;AACA,yDAAU;AACV,IAAI,6DAAM;AACV,IAAI,yDAAU;AACd;AACA,yDAAU;AACV,IAAI,6DAAM;AACV,IAAI,yDAAU;AACd;AACA,yDAAU;AACV,IAAI,6DAAM;AACV,IAAI,yDAAU;AACd;AACA,yDAAU;AACV,IAAI,6DAAM;AACV,IAAI,yDAAU;AACd;AACA,yDAAU;AACV,IAAI,6DAAM;AACV,IAAI,yDAAU;AACd;AACA,yDAAU;AACV,IAAI,6DAAM;AACV,IAAI,yDAAU;AACd;AACA,yDAAU;AACV,IAAI,6DAAM;AACV,IAAI,yDAAU;AACd;AACA,yDAAU;AACV,IAAI,6DAAM;AACV,IAAI,yDAAU;AACd;AACA,yDAAU;AACV,IAAI,6DAAM;AACV,IAAI,yDAAU;AACd;AACA,yDAAU;AACV,IAAI,6DAAM;AACV,IAAI,yDAAU;AACd;AACA,yDAAU;AACV,IAAI,6DAAM;AACV,IAAI,yDAAU;AACd;AACA,yDAAU;AACV,IAAI,6DAAM;AACV,IAAI,yDAAU;AACd;AACA,uBAAuB,yDAAU;AACjC,IAAI,gEAAS;AACb;AACA;AACA,KAAK;AACL,IAAI,yDAAU,uBAAuB,yDAAU;AAC/C;;AAEA;AACA;AACA,oBAAoB,yDAAU;AAC9B,IAAI,+DAAQ;AACZ;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAEmD;;;;;;;;;;;;ACh7CnD;AACA;AACA;AACA;AACA;AACA;;AAEA,aAAa,oCAAoC,EAAE,wCAAwC,0BAA0B,OAAO,+NAA+N,6JAA6J,2oCAA2oC,0IAA0I,SAAS,8RAA8R,kZAAkZ,yCAAyC,SAAS,sBAAsB,eAAe,SAAS,4BAA4B,WAAW,sCAAsC,8CAA8C,uBAAuB,yCAAyC,qDAAqD,iDAAiD,+BAA+B,6BAA6B,MAAM,kBAAkB,gCAAgC,yFAAyF,8BAA8B,wBAAwB,kBAAkB,iBAAiB,OAAO,cAAc,sBAAsB,oBAAoB,yBAAyB,yCAAyC,SAAS,YAAY,WAAW,KAAK,WAAW,SAAS,YAAY,WAAW,KAAK,6BAA6B,UAAU,OAAO,QAAQ,2CAA2C,6CAA6C,mFAAmF,gBAAgB,+IAA+I,eAAe,UAAU,gCAAgC,gBAAgB,MAAM,8CAA8C,OAAO,KAAK,uBAAuB,cAAc,2BAA2B,sBAAsB,oBAAoB,sBAAsB,4BAA4B,mCAAmC,IAAI,yCAAyC,UAAU,eAAe,SAAS,eAAe,OAAO,2CAA2C,+BAA+B,WAAW,iCAAiC,yCAAyC,kCAAkC,kBAAkB,qDAAqD,8CAA8C,kCAAkC,4BAA4B,2BAA2B,4BAA4B,yCAAyC,oCAAoC,qCAAqC,sCAAsC,sCAAsC,8CAA8C,qBAAqB,OAAO,eAAe,yCAAyC,wBAAwB,yBAAyB,qBAAqB,sBAAsB,8CAA8C,wDAAwD,eAAe,gBAAgB,mBAAmB,oBAAoB,EAAE,8BAA8B,QAAQ,YAAY,SAAS,gDAAgD,yDAAyD,yDAAyD,uDAAuD,qDAAqD,yDAAyD,uDAAuD,kCAAkC,YAAY,WAAW,KAAK,iCAAiC,SAAS,mBAAmB,aAAa,KAAK,KAAK,kBAAkB,uBAAuB,aAAa,6CAA6C,YAAY,MAAM,sDAAsD,qBAAqB,mCAAmC,KAAK,KAAK,KAAK,IAAI,YAAY,MAAM,KAAK,yDAAyD,aAAa,KAAK,KAAK,oBAAoB,aAAa,MAAM,KAAK,qCAAqC,kBAAkB,aAAa,KAAK,KAAK,sCAAsC,YAAY,6BAA6B,6BAA6B,QAAQ,KAAK,4BAA4B,UAAU,SAAS,OAAO,KAAK,iBAAiB,QAAQ,KAAK,UAAU,SAAS,kCAAkC,yBAAyB,8BAA8B,8EAA8E,qCAAqC,kBAAkB,oBAAoB,WAAW,oCAAoC,oBAAoB,WAAW,UAAU,mBAAmB,oBAAoB,cAAc,cAAc,cAAc,sBAAsB,iBAAiB,gBAAgB,uBAAuB,mBAAmB,qBAAqB,qBAAqB,2BAA2B,0BAA0B,0BAA0B,kBAAkB,aAAa,cAAc,uDAAuD,aAAa,gBAAgB,kBAAkB,2DAA2D,oCAAoC,uDAAuD,+CAA+C,+BAA+B,uCAAuC,yCAAyC,wCAAwC,gCAAgC,YAAY,8DAA8D,2BAA2B,QAAQ,MAAM,sBAAsB,iCAAiC,KAAK,8BAA8B,yCAAyC,YAAY,2DAA2D,OAAO,MAAM,qBAAqB,gCAAgC,KAAK,4BAA4B,yCAAyC,6BAA6B,yCAAyC,qBAAqB,wBAAwB,oCAAoC,2BAA2B,cAAc,4BAA4B,KAAK,8BAA8B,WAAW,yBAAyB,SAAS,WAAW,iBAAiB,iBAAiB,SAAS,4BAA4B,IAAI,sBAAsB,yBAAyB,IAAI,oBAAoB,uBAAuB,IAAI,iBAAiB,yDAAyD,SAAS,kBAAkB,UAAU,oDAAoD,gBAAgB,IAAI,qBAAqB,MAAM,gEAAgE,IAAI,oBAAoB,kDAAkD,KAAK,mCAAmC,IAAI,eAAe,qBAAqB,QAAQ,8FAA8F,kBAAkB,UAAU,mFAAmF,mBAAmB,aAAa,aAAa,kBAAkB,IAAI,qBAAqB,kBAAkB,WAAW,sBAAsB,kBAAkB,eAAe,KAAK,kBAAkB,WAAW,yBAAyB,iCAAiC,+BAA+B,sBAAsB,2BAA2B,kBAAkB,OAAO,WAAW,qBAAqB,sBAAsB,iBAAiB,cAAc,kBAAkB,eAAe,8BAA8B,6BAA6B,oBAAoB,UAAU,iBAAiB,mBAAmB,6BAA6B,oBAAoB,2BAA2B,OAAO,wBAAwB,YAAY,cAAc,eAAe,sBAAsB,IAAI,qCAAqC,qBAAqB,sBAAsB,oCAAoC,KAAK,IAAI,sBAAsB,iBAAiB,aAAa,iBAAiB,cAAc,2BAA2B,eAAe,0BAA0B,gCAAgC,wBAAwB,mCAAmC,mBAAmB,yBAAyB,OAAO,+CAA+C,mBAAmB,KAAK,0BAA0B,SAAS,MAAM,sBAAsB,sDAAsD,iFAAiF,gFAAgF,2CAA2C,SAAS,kBAAkB,+BAA+B,+BAA+B,6BAA6B,qBAAqB,mCAAmC,kBAAkB,2DAA2D,aAAa,YAAY,gBAAgB,wBAAwB,yBAAyB,8rBAA8rB,WAAW,YAAY,WAAW,KAAK,WAAW,qBAAqB,4BAA4B,0BAA0B,+CAA+C,cAAc,6BAA6B,mDAAmD,+CAA+C,KAAK,uBAAuB,iCAAiC,qLAAqL,SAAS,gNAAgN,gDAAgD,gCAAgC,iCAAiC,qcAAqc,08CAA08C,+BAA+B,YAAY,2DAA2D,0BAA0B,QAAQ,mCAAmC,uCAAuC,QAAQ,gBAAgB,0CAA0C,0CAA0C,OAAO,yBAAyB,KAAK,QAAQ,uBAAuB,wCAAwC,KAAK,iDAAiD,oBAAoB,wBAAwB,kBAAkB,oBAAoB,gCAAgC,qBAAqB,qBAAqB,sBAAsB,uBAAuB,wBAAwB,wBAAwB,yBAAyB,YAAY,8DAA8D,2BAA2B,QAAQ,qGAAqG,sCAAsC,gBAAgB,8BAA8B,QAAQ,EAAE,KAAK,6CAA6C,6CAA6C,2BAA2B,0BAA0B,SAAS,IAAI,qGAAqG,sCAAsC,gBAAgB,8BAA8B,QAAQ,IAAI,0BAA0B,IAAI,sCAAsC,QAAQ,KAAK,iGAAiG,4BAA4B,YAAY,sCAAsC,8BAA8B,QAAQ,EAAE,gBAAgB,SAAS,IAAI,OAAO,qGAAqG,8BAA8B,UAAU,EAAE,qDAAqD,sCAAsC,2BAA2B,MAAM,8BAA8B,YAAY,EAAE,sCAAsC,QAAQ,KAAK,SAAS,QAAQ,8BAA8B,UAAU,EAAE,6CAA6C,MAAM,8BAA8B,UAAU,GAAG,KAAK,6CAA6C,8FAA8F,6CAA6C,8CAA8C,kDAAkD,kCAAkC,sCAAsC,kCAAkC,yCAAyC,qBAAqB,iBAAiB,oCAAoC,kCAAkC,gDAAgD,2CAA2C,2BAA2B,wBAAwB,WAAW,SAAS,gCAAgC,OAAO,IAAI,8DAA8D,0BAA0B,QAAQ,uBAAuB,yCAAyC,KAAK,kDAAkD,6CAA6C,+CAA+C,yCAAyC,oCAAoC,gCAAgC,oCAAoC,KAAK,oBAAoB,qCAAqC,4CAA4C,QAAQ,eAAe,IAAI,oDAAoD,uBAAuB,iCAAiC,KAAK,sBAAsB,YAAY,aAAa,+BAA+B,OAAO,IAAI,2DAA2D,QAAQ,YAAY,8BAA8B,KAAK,oCAAoC,mCAAmC,SAAS,cAAc,0DAA0D,KAAK,KAAK,MAAM,QAAQ,sBAAsB,+BAA+B,KAAK,qBAAqB,YAAY,aAAa,iCAAiC,yBAAyB,QAAQ,qBAAqB,sBAAsB,gCAAgC,oBAAoB,qCAAqC,4CAA4C,QAAQ,eAAe,IAAI,qBAAqB,+BAA+B,sBAAsB,uBAAuB,uBAAuB,gDAAgD,gCAAgC,oDAAoD,+BAA+B,OAAO,gBAAgB,qBAAqB,gBAAgB,OAAO,0BAA0B,yBAAyB,wBAAwB,yBAAyB,QAAQ,WAAW,kBAAkB,kCAAkC,2CAA2C,yCAAyC,KAAK,gCAAgC,4CAA4C,yCAAyC,KAAK,+BAA+B,4CAA4C,2CAA2C,KAAK,2CAA2C,wCAAwC,QAAQ,qBAAqB,sBAAsB,0CAA0C,0BAA0B,sBAAsB,gCAAgC,KAAK,mCAAmC,oBAAoB,qBAAqB,yBAAyB,qCAAqC,4CAA4C,QAAQ,eAAe,IAAI,qEAAqE,qBAAqB,+BAA+B,sBAAsB,uBAAuB,uBAAuB,uBAAuB,mEAAmE,8CAA8C,KAAK,qCAAqC,wBAAwB,gDAAgD,KAAK,sCAAsC,gDAAgD,oCAAoC,8DAA8D,4CAA4C,gCAAgC,uBAAuB,+BAA+B,KAAK,yCAAyC,8CAA8C,yDAAyD,8DAA8D,uCAAuC,kCAAkC,sDAAsD,eAAe,iCAAiC,mDAAmD,0BAA0B,mCAAmC,QAAQ,QAAQ,QAAQ,kDAAkD,MAAM,kDAAkD,QAAQ,SAAS,IAAI,IAAI,wBAAwB,mDAAmD,sEAAsE,KAAK,+BAA+B,iGAAiG,mCAAmC,kCAAkC,SAAS,wBAAwB,8CAA8C,6CAA6C,+CAA+C,4CAA4C,MAAM,kCAAkC,QAAQ,YAAY,QAAQ,kBAAkB,mBAAmB,8BAA8B,qBAAqB,wBAAwB,yBAAyB,yBAAyB,uBAAuB,wBAAwB,wBAAwB,4CAA4C,iDAAiD,uFAAuF,8CAA8C,oCAAoC,qCAAqC,YAAY,YAAY,SAAS,kBAAkB,0CAA0C,QAAQ,KAAK,oBAAoB,4CAA4C,QAAQ,2CAA2C,sCAAsC,OAAO,wDAAwD,qDAAqD,OAAO,wGAAwG,oCAAoC,6DAA6D,aAAa,qBAAqB,iBAAiB,EAAE,gDAAgD,qBAAqB,SAAS,GAAG,2BAA2B,yBAAyB,2BAA2B,yBAAyB,MAAM,YAAY,MAAM,YAAY,kBAAkB,+FAA+F,4CAA4C,sEAAsE,kEAAkE,UAAU,gCAAgC,gDAAgD,iDAAiD,qBAAqB,gCAAgC,uDAAuD,mBAAmB,yDAAyD,GAAG,KAAK,6CAA6C,QAAQ,0CAA0C,qCAAqC,6CAA6C,wCAAwC,sCAAsC,2CAA2C,aAAa,2BAA2B,mDAAmD,wCAAwC,eAAe,yBAAyB,UAAU,+BAA+B,mDAAmD,+CAA+C,wBAAwB,wIAAwI,aAAa,kCAAkC,gDAAgD,qBAAqB,yCAAyC,EAAE,8IAA8I,QAAQ,uBAAuB,sFAAsF,aAAa,gDAAgD,oDAAoD,KAAK,mCAAmC,kBAAkB,iCAAiC,iDAAiD,kFAAkF,KAAK,iCAAiC,kGAAkG,kGAAkG,qDAAqD,6DAA6D,sDAAsD,+DAA+D,kBAAkB,4BAA4B,gEAAgE,OAAO,sFAAsF,iCAAiC,aAAa,YAAY,QAAQ,iDAAiD,OAAO,8CAA8C,8CAA8C,wBAAwB,0BAA0B,OAAO,gDAAgD,+CAA+C,uBAAuB,0BAA0B,OAAO,gDAAgD,+CAA+C,wBAAwB,oBAAoB,wBAAwB,uBAAuB,qBAAqB,cAAc,OAAO,4BAA4B,eAAe,qBAAqB,sBAAsB,0BAA0B,6BAA6B,OAAO,aAAa,sCAAsC,6BAA6B,oDAAoD,+CAA+C,8CAA8C,gDAAgD,KAAK,mDAAmD,+CAA+C,WAAW,YAAY,KAAK,oDAAoD,oBAAoB,wCAAwC,cAAc,oCAAoC,YAAY,oCAAoC,YAAY,WAAW,YAAY,2CAA2C,kDAAkD,qCAAqC,wBAAwB,uBAAuB,cAAc,kBAAkB,oCAAoC,qCAAqC,uCAAuC,6CAA6C,0BAA0B,uCAAuC,yDAAyD,8BAA8B,8CAA8C,WAAW,KAAK,YAAY,YAAY,oBAAoB,2BAA2B,KAAK,oBAAoB,qCAAqC,kBAAkB,cAAc,iCAAiC,wCAAwC,kCAAkC,iCAAiC,0CAA0C,KAAK,0CAA0C,sCAAsC,wCAAwC,kBAAkB,iBAAiB,qCAAqC,oBAAoB,mDAAmD,mBAAmB,iCAAiC,iBAAiB,wBAAwB,kCAAkC,gCAAgC,gCAAgC,kBAAkB,8DAA8D,gBAAgB,2BAA2B,kBAAkB,QAAQ,QAAQ,SAAS,oBAAoB,cAAc,EAAE,IAAI,oCAAoC,kBAAkB,OAAO,kBAAkB,OAAO,uBAAuB,SAAS,uBAAuB,UAAU,uBAAuB,SAAS,QAAQ,QAAQ,aAAa,QAAQ,aAAa,QAAQ,eAAe,eAAe,+DAA+D,QAAQ,UAAU,QAAQ,SAAS,SAAS,KAAK,2DAA2D,QAAQ,UAAU,QAAQ,SAAS,SAAS,KAAK,iEAAiE,0BAA0B,4BAA4B,IAAI,QAAQ,UAAU,QAAQ,UAAU,SAAS,QAAQ,wBAAwB,QAAQ,UAAU,QAAQ,UAAU,SAAS,EAAE,4BAA4B,YAAY,0BAA0B,KAAK,0BAA0B,qBAAqB,kCAAkC,kBAAkB,YAAY,WAAW,KAAK,UAAU,SAAS,2BAA2B,wCAAwC,mBAAmB,aAAa,UAAU,YAAY,MAAM,YAAY,WAAW,KAAK,UAAU,SAAS,eAAe,OAAO,mBAAmB,mBAAmB,iBAAiB,SAAS,wBAAwB,oBAAoB,mIAAmI,qCAAqC,4CAA4C,oBAAoB,oBAAoB,uEAAuE,mBAAmB,+BAA+B,oBAAoB,MAAM,YAAY,WAAW,KAAK,iDAAiD,iCAAiC,QAAQ,wCAAwC,cAAc,KAAK,kBAAkB,0CAA0C,YAAY,KAAK,YAAY,uCAAuC,gDAAgD,2CAA2C,eAAe,gBAAgB,mBAAmB,2BAA2B,eAAe,EAAE,8BAA8B,eAAe,EAAE,0BAA0B,eAAe,EAAE,6BAA6B,eAAe,EAAE,0BAA0B,eAAe,EAAE,8BAA8B,eAAe,EAAE,4CAA4C,4BAA4B,yCAAyC,eAAe,EAAE,4CAA4C,eAAe,GAAG,6BAA6B,eAAe,EAAE,iCAAiC,eAAe,IAAI,0BAA0B,iCAAiC,MAAM,IAAI,uBAAuB,uBAAuB,qBAAqB,YAAY,UAAU,iHAAiH,oBAAoB,uBAAuB,qBAAqB,yBAAyB,qCAAqC,8CAA8C,8GAA8G,6BAA6B,+CAA+C,iCAAiC,EAAE,IAAI,uCAAuC,kDAAkD,8CAA8C,yCAAyC,8CAA8C,yCAAyC,wCAAwC,wCAAwC,oBAAoB,iCAAiC,SAAS,0BAA0B,2BAA2B,iBAAiB,GAAG,YAAY,QAAQ,QAAQ,aAAa,qBAAqB,aAAa,SAAS,2BAA2B,SAAS,SAAS,iCAAiC,QAAQ,QAAQ,YAAY,8BAA8B,KAAK,yCAAyC,iCAAiC,KAAK,iCAAiC,gCAAgC,OAAO,gDAAgD,4CAA4C,0BAA0B,UAAU,gDAAgD,KAAK,QAAQ,qDAAqD,mCAAmC,mDAAmD,aAAa,wBAAwB,OAAO,OAAO,4CAA4C,yBAAyB,QAAQ,uBAAuB,wCAAwC,KAAK,iDAAiD,oBAAoB,wBAAwB,kBAAkB,+BAA+B,qBAAqB,qBAAqB,sBAAsB,KAAK,8CAA8C,oBAAoB,uBAAuB,wBAAwB,wBAAwB,yBAAyB,gDAAgD,MAAM,8BAA8B,QAAQ,UAAU,wBAAwB,gBAAgB,wBAAwB,gBAAgB,qCAAqC,qDAAqD,KAAK,uDAAuD,wBAAwB,wBAAwB,MAAM,gBAAgB,yFAAyF,QAAQ,mBAAmB,QAAQ,IAAI,qDAAqD,QAAQ,0DAA0D,8BAA8B,sBAAsB,8BAA8B,uBAAuB,WAAW,yBAAyB,uCAAuC,4CAA4C,OAAO,cAAc,EAAE,SAAS,oCAAoC,8BAA8B,YAAY,QAAQ,kBAAkB,wBAAwB,YAAY,OAAO,WAAW,OAAO,OAAO,wBAAwB,YAAY,OAAO,UAAU,oXAAoX,4BAA4B,eAAe,KAAK,mFAAmF,4BAA4B,eAAe,KAAK,6CAA6C,cAAc,wBAAwB,2BAA2B,eAAe,KAAK,iBAAiB,OAAO,iCAAiC,qBAAqB,YAAY,kBAAkB,wBAAwB,YAAY,mCAAmC,+BAA+B,wBAAwB,yCAAyC,wBAAwB,0CAA0C,+BAA+B,+BAA+B,qBAAqB,YAAY,8BAA8B,OAAO,oCAAoC,mBAAmB,0BAA0B,gBAAgB,2BAA2B,yBAAyB,+BAA+B,kBAAkB,wBAAwB,yBAAyB,8BAA8B,6BAA6B,2DAA2D,0BAA0B,kDAAkD,4BAA4B,oCAAoC,uCAAuC,gDAAgD,gCAAgC,gCAAgC,cAAc,4BAA4B,oBAAoB,qBAAqB,wBAAwB,yBAAyB,wBAAwB,uBAAuB,uBAAuB,yBAAyB,WAAW,+BAA+B,4BAA4B,kCAAkC,gBAAgB,sBAAsB,mDAAmD,iDAAiD,kDAAkD,YAAY,0CAA0C,0CAA0C,0CAA0C,mDAAmD,wGAAwG,sDAAsD,8BAA8B,iCAAiC,sDAAsD,8BAA8B,iCAAiC,sBAAsB,oCAAoC,oDAAoD,uBAAuB,gBAAgB,OAAO,YAAY,8BAA8B,KAAK,8BAA8B,uBAAuB,oBAAoB,qBAAqB,+BAA+B,YAAY,+BAA+B,KAAK,+BAA+B,iCAAiC,uBAAuB,QAAQ,2BAA2B,qCAAqC,6BAA6B,iCAAiC,oBAAoB,KAAK,wBAAwB,qGAAqG,2CAA2C,qCAAqC,sCAAsC,qDAAqD,cAAc,QAAQ,+BAA+B,KAAK,6BAA6B,KAAK,QAAQ,8BAA8B,KAAK,+BAA+B,oBAAoB,oCAAoC,0BAA0B,eAAe,YAAY,cAAc,YAAY,aAAa,cAAc,aAAa,WAAW,UAAU,YAAY,oBAAoB,+DAA+D,0BAA0B,cAAc,yBAAyB,eAAe,YAAY,cAAc,cAAc,aAAa,YAAY,WAAW,UAAU,YAAY,oBAAoB,8CAA8C,YAAY,YAAY,WAAW,UAAU,oBAAoB,6CAA6C,YAAY,WAAW,UAAU,oBAAoB,mDAAmD,YAAY,YAAY,WAAW,UAAU,oBAAoB,qEAAqE,0BAA0B,cAAc,yBAAyB,eAAe,cAAc,cAAc,kBAAkB,iBAAiB,mBAAmB,oBAAoB,YAAY,YAAY,WAAW,UAAU,oBAAoB,yEAAyE,YAAY,WAAW,UAAU,oBAAoB,2EAA2E,YAAY,WAAW,UAAU,oBAAoB,gDAAgD,YAAY,WAAW,UAAU,cAAc,oBAAoB,+CAA+C,YAAY,WAAW,UAAU,oBAAoB,8CAA8C,YAAY,WAAW,UAAU,oBAAoB,2CAA2C,YAAY,YAAY,WAAW,UAAU,oBAAoB,sBAAsB,0BAA0B,yBAAyB,wDAAwD,wDAAwD,8CAA8C,2DAA2D,6DAA6D,8IAA8I,oBAAoB,wCAAwC,oBAAoB,wCAAwC,gCAAgC,gGAAgG,EAAE,gCAAgC,iGAAiG,EAAE,2CAA2C,2CAA2C,wEAAwE,wEAAwE,sCAAsC,2CAA2C,qDAAqD,oDAAoD,oCAAoC,yCAAyC,wCAAwC,6CAA6C,qDAAqD,sDAAsD,8CAA8C,mDAAmD,0DAA0D,yDAAyD,4CAA4C,iDAAiD,yDAAyD,wDAAwD,iDAAiD,oDAAoD,0CAA0C,wDAAwD,uDAAuD,oBAAoB,yBAAyB,uBAAuB,4BAA4B,+CAA+C,6BAA6B,iCAAiC,6BAA6B,iCAAiC,iCAAiC,MAAM,YAAY,sBAAsB,KAAK,sBAAsB,6CAA6C,YAAY,WAAW,KAAK,yCAAyC,0BAA0B,UAAU,2BAA2B,qBAAqB,yCAAyC,uBAAuB,2CAA2C,wBAAwB,4CAA4C,sBAAsB,WAAW,iBAAiB,cAAc,yBAAyB,0BAA0B,kBAAkB,8BAA8B,+BAA+B,0CAA0C,6CAA6C,kDAAkD,IAAI,aAAa,EAAE,aAAa,gBAAgB,oBAAoB,WAAW,qBAAqB,OAAO,eAAe,OAAO,wCAAwC,4BAA4B,iBAAiB,uCAAuC,KAAK,sCAAsC,sBAAsB,oBAAoB,oBAAoB,8CAA8C,KAAK,uBAAuB,YAAY,YAAY,uDAAuD,OAAO,MAAM,8BAA8B,KAAK,sBAAsB,yDAAyD,OAAO,MAAM,gCAAgC,KAAK,wBAAwB,gCAAgC,kCAAkC,mCAAmC,iEAAiE,WAAW,yBAAyB,sDAAsD,oDAAoD,kBAAkB,sCAAsC,KAAK,oBAAoB,wCAAwC,wDAAwD,kBAAkB,oBAAoB,WAAW,uBAAuB,sBAAsB,2BAA2B,0BAA0B,kCAAkC,gCAAgC,yBAAyB,mBAAmB,0DAA0D,kBAAkB,iBAAiB,aAAa,0EAA0E,oBAAoB,WAAW,mDAAmD,qDAAqD,8BAA8B,gBAAgB,iBAAiB,kBAAkB,eAAe,eAAe,aAAa,sBAAsB,+BAA+B,oBAAoB,2BAA2B,qBAAqB,sBAAsB,eAAe,8DAA8D,4BAA4B,eAAe,iBAAiB,kBAAkB,gBAAgB,gCAAgC,kCAAkC,wCAAwC,oBAAoB,eAAe,uBAAuB,WAAW,gDAAgD,6CAA6C,gDAAgD,8BAA8B,8DAA8D,aAAa,cAAc,oBAAoB,WAAW,oEAAoE,aAAa,cAAc,oBAAoB,WAAW,mBAAmB,uBAAuB,0BAA0B,OAAO,wBAAwB,2BAA2B,8BAA8B,oBAAoB,WAAW,wCAAwC,cAAc,cAAc,4BAA4B,wBAAwB,mBAAmB,aAAa,wBAAwB,kCAAkC,mBAAmB,WAAW,gDAAgD,iBAAiB,mBAAmB,aAAa,cAAc,WAAW,gDAAgD,iBAAiB,mBAAmB,aAAa,cAAc,WAAW,oDAAoD,cAAc,iBAAiB,mBAAmB,aAAa,cAAc,WAAW,gDAAgD,iBAAiB,mBAAmB,aAAa,cAAc,WAAW,uCAAuC,cAAc,WAAW,uCAAuC,cAAc,WAAW,yCAAyC,mBAAmB,cAAc,WAAW,8BAA8B,wDAAwD,mBAAmB,cAAc,WAAW,uCAAuC,+BAA+B,6BAA6B,2BAA2B,+BAA+B,6BAA6B,2BAA2B,+BAA+B,6BAA6B,2BAA2B,+BAA+B,6BAA6B,2BAA2B,WAAW,6DAA6D,yDAAyD,KAAK,6DAA6D,yDAAyD,gDAAgD,2BAA2B,uBAAuB,sBAAsB,sBAAsB,0BAA0B,2BAA2B,yBAAyB,0BAA0B,2BAA2B,+BAA+B,yBAAyB,2BAA2B,WAAW,0DAA0D,yDAAyD,KAAK,0DAA0D,yDAAyD,sCAAsC,aAAa,cAAc,WAAW,sDAAsD,eAAe,sCAAsC,aAAa,cAAc,WAAW,qDAAqD,eAAe,WAAW,YAAY,YAAY,YAAY,YAAY,YAAY,KAAK,YAAY,YAAY,YAAY,YAAY,YAAY,aAAa,mDAAmD,EAAE,aAAa,mDAAmD,EAAE,4BAA4B,iBAAiB,iBAAiB,iBAAiB,iBAAiB,iBAAiB,oCAAoC,UAAU,2BAA2B,4BAA4B,KAAK,2BAA2B,6BAA6B,KAAK,WAAW,YAAY,aAAa,aAAa,mDAAmD,EAAE,aAAa,mDAAmD,EAAE,sCAAsC,aAAa,cAAc,WAAW,qDAAqD,eAAe,sCAAsC,aAAa,cAAc,WAAW,sDAAsD,eAAe,WAAW,YAAY,2BAA2B,WAAW,YAAY,YAAY,YAAY,YAAY,KAAK,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,wBAAwB,mBAAmB,0LAA0L,EAAE,QAAQ,YAAY,WAAW,KAAK,wBAAwB,KAAK,iBAAiB,mBAAmB,gBAAgB,EAAE,sBAAsB,2CAA2C,oDAAoD,aAAa,yBAAyB,WAAW,+BAA+B,uCAAuC,WAAW,sBAAsB,iCAAiC,mBAAmB,uEAAuE,0EAA0E,oFAAoF,iFAAiF,6CAA6C,WAAW,iBAAiB,uBAAuB,sBAAsB,cAAc,WAAW,yCAAyC,SAAS,EAAE,4CAA4C,SAAS,EAAE,KAAK,yCAAyC,SAAS,EAAE,4CAA4C,SAAS,EAAE,+BAA+B,wCAAwC,sDAAsD,iCAAiC,qDAAqD,EAAE,oBAAoB,OAAO,wBAAwB,YAAY,KAAK,+BAA+B,EAAE,sBAAsB,sDAAsD,4CAA4C,gCAAgC,+BAA+B,qCAAqC,iCAAiC,aAAa,oBAAoB,cAAc,cAAc,cAAc,gBAAgB,cAAc,EAAE,mCAAmC,cAAc,cAAc,cAAc,iBAAiB,EAAE,iBAAiB,uCAAuC,4DAA4D,EAAE,uCAAuC,2DAA2D,EAAE,uCAAuC,+DAA+D,EAAE,uCAAuC,8DAA8D,EAAE,sCAAsC,+DAA+D,EAAE,oCAAoC,kEAAkE,EAAE,sCAAsC,8DAA8D,EAAE,oCAAoC,iEAAiE,EAAE,4BAA4B,uCAAuC,2DAA2D,EAAE,uCAAuC,4DAA4D,EAAE,uCAAuC,8DAA8D,EAAE,uCAAuC,+DAA+D,EAAE,sCAAsC,8DAA8D,EAAE,sCAAsC,+DAA+D,EAAE,oCAAoC,iEAAiE,EAAE,oCAAoC,kEAAkE,EAAE,6EAA6E,kEAAkE,iEAAiE,MAAM,iEAAiE,mEAAmE,EAAE,kCAAkC,6BAA6B,WAAW,iBAAiB,KAAK,mBAAmB,EAAE,kCAAkC,6BAA6B,WAAW,iBAAiB,KAAK,mBAAmB,EAAE,+BAA+B,kCAAkC,6BAA6B,WAAW,cAAc,KAAK,8BAA8B,8BAA8B,kBAAkB,EAAE,kCAAkC,6BAA6B,WAAW,8BAA8B,8BAA8B,gBAAgB,KAAK,gBAAgB,IAAI,kCAAkC,qCAAqC,oCAAoC,oCAAoC,iCAAiC,uCAAuC,0BAA0B,KAAK,kCAAkC,kCAAkC,2BAA2B,YAAY,2BAA2B,iCAAiC,2BAA2B,YAAY,8BAA8B,wCAAwC,+BAA+B,wBAAwB,kBAAkB,aAAa,4BAA4B,uCAAuC,yCAAyC,OAAO,cAAc,KAAK,cAAc,0BAA0B,IAAI,UAAU,IAAI,QAAQ,aAAa,iCAAiC,4BAA4B,iCAAiC,SAAS,kCAAkC,wBAAwB,0BAA0B,QAAQ,OAAO,6BAA6B,kBAAkB,wBAAwB,gCAAgC,uDAAuD,EAAE,2BAA2B,eAAe,MAAM,oBAAoB,MAAM,KAAK,gCAAgC,YAAY,aAAa,0BAA0B,4BAA4B,gDAAgD,KAAK,0DAA0D,iCAAiC,iCAAiC,6BAA6B,aAAa,0BAA0B,iCAAiC,qBAAqB,2BAA2B,iCAAiC,8BAA8B,gDAAgD,KAAK,0DAA0D,2BAA2B,aAAa,+BAA+B,mBAAmB,OAAO,WAAW,2BAA2B,0BAA0B,iBAAiB,QAAQ,oBAAoB,YAAY,WAAW,KAAK,iCAAiC,mBAAmB,0BAA0B,IAAI,gDAAgD,SAAS,mDAAmD,0BAA0B,oBAAoB,+DAA+D,SAAS,UAAU,wBAAwB,6BAA6B,KAAK,sDAAsD,0CAA0C,8CAA8C,kCAAkC,6BAA6B,iCAAiC,IAAI,0CAA0C,SAAS,IAAI,IAAI,8BAA8B,2DAA2D,SAAS,IAAI,IAAI,yBAAyB,kDAAkD,8BAA8B,iCAAiC,iDAAiD,+BAA+B,yBAAyB,0CAA0C,+BAA+B,0BAA0B,KAAK,SAAS,6BAA6B,aAAa,IAAI,QAAQ,aAAa,MAAM,0CAA0C,UAAU,8BAA8B,oBAAoB,OAAO,yCAAyC,+BAA+B,mBAAmB,MAAM,KAAK,kBAAkB,IAAI,UAAU,cAAc,cAAc,mDAAmD,mCAAmC,gCAAgC,2CAA2C,cAAc,mDAAmD,+BAA+B,YAAY,yCAAyC,+BAA+B,WAAW,mDAAmD,mCAAmC,KAAK,YAAY,yCAAyC,+BAA+B,WAAW,mDAAmD,kCAAkC,gCAAgC,2CAA2C,mDAAmD,+BAA+B,aAAa,yCAAyC,+BAA+B,cAAc,mDAAmD,mCAAmC,cAAc,IAAI,KAAK,KAAK,gCAAgC,OAAO,2CAA2C,8BAA8B,mCAAmC,mCAAmC,wCAAwC,8BAA8B,mCAAmC,mCAAmC,0CAA0C,uCAAuC,kBAAkB,iEAAiE,iBAAiB,oBAAoB,eAAe,OAAO,oCAAoC,0BAA0B,EAAE,yBAAyB,eAAe,OAAO,qDAAqD,EAAE,yBAAyB,eAAe,OAAO,wDAAwD,GAAG,+DAA+D,2CAA2C,KAAK,4DAA4D,wCAAwC,MAAM,cAAc,IAAI,+BAA+B,cAAc,yFAAyF,sFAAsF,KAAK,yFAAyF,uFAAuF,8BAA8B,mFAAmF,iCAAiC,oCAAoC,QAAQ,qBAAqB,iCAAiC,yBAAyB,sBAAsB,kCAAkC,6BAA6B,WAAW,YAAY,2BAA2B,KAAK,iCAAiC,iCAAiC,YAAY,8BAA8B,KAAK,oCAAoC,oCAAoC,kBAAkB,YAAY,wBAAwB,KAAK,wBAAwB,eAAe,UAAU,aAAa,YAAY,2BAA2B,KAAK,2BAA2B,cAAc,cAAc,kBAAkB,4BAA4B,kBAAkB,uBAAuB,MAAM,WAAW,cAAc,qBAAqB,6BAA6B,oBAAoB,YAAY,8BAA8B,KAAK,8BAA8B,kBAAkB,uBAAuB,MAAM,cAAc,qBAAqB,WAAW,6BAA6B,oBAAoB,QAAQ,YAAY,8BAA8B,KAAK,8BAA8B,QAAQ,UAAU,gBAAgB,WAAW,UAAU,QAAQ,cAAc,sBAAsB,gBAAgB,WAAW,MAAM,cAAc,kBAAkB,kBAAkB,kBAAkB,UAAU,cAAc,mBAAmB,YAAY,kBAAkB,KAAK,4BAA4B,oBAAoB,KAAK,uBAAuB,qBAAqB,YAAY,WAAW,KAAK,gBAAgB,UAAU,YAAY,2BAA2B,KAAK,2BAA2B,WAAW,YAAY,kBAAkB,QAAQ,YAAY,WAAW,KAAK,2CAA2C,gBAAgB,KAAK,SAAS,2LAA2L,qBAAqB,cAAc,cAAc,QAAQ,UAAU,QAAQ,SAAS,SAAS,EAAE,YAAY,WAAW,KAAK,mBAAmB,2NAA2N,sBAAsB,2BAA2B,4CAA4C,SAAS,qBAAqB,2DAA2D,mBAAmB,YAAY,QAAQ,OAAO,eAAe,gDAAgD,wCAAwC,iBAAiB,mBAAmB,KAAK,aAAa,eAAe,MAAM,wBAAwB,MAAM,qBAAqB,mBAAmB,0BAA0B,kCAAkC,iCAAiC,qBAAqB,MAAM,QAAQ,gBAAgB,SAAS,KAAK,cAAc,qBAAqB,mBAAmB,oBAAoB,0BAA0B,gDAAgD,iCAAiC,QAAQ,kEAAkE,KAAK,kEAAkE,iCAAiC,SAAS,aAAa,KAAK,gDAAgD,iCAAiC,QAAQ,oCAAoC,kEAAkE,KAAK,qCAAqC,KAAK,wDAAwD,kEAAkE,KAAK,4DAA4D,iCAAiC,SAAS,cAAc,aAAa,4BAA4B,sCAAsC,0DAA0D,yBAAyB,gEAAgE,kBAAkB,yBAAyB,+CAA+C,2DAA2D,wCAAwC,eAAe,4CAA4C,2CAA2C,iCAAiC,8DAA8D,gDAAgD,4CAA4C,yBAAyB,WAAW,uDAAuD,aAAa,cAAc,mEAAmE,aAAa,EAAE,sEAAsE,6BAA6B,YAAY,iBAAiB,uCAAuC,aAAa,iBAAiB,wDAAwD,aAAa,yBAAyB,cAAc,EAAE,iEAAiE,wBAAwB,YAAY,EAAE,kBAAkB,6EAA6E,0CAA0C,oBAAoB,uEAAuE,qBAAqB,qBAAqB,sBAAsB,YAAY,YAAY,YAAY,mCAAmC,OAAO,OAAO,qCAAqC,OAAO,OAAO,MAAM,kBAAkB,gCAAgC,oBAAoB,WAAW,OAAO,WAAW,wFAAwF,kBAAkB,8BAA8B,mDAAmD,8BAA8B,OAAO,UAAU,YAAY,KAAK,gBAAgB,iBAAiB,MAAM,YAAY,WAAW,KAAK,kBAAkB,WAAW,0BAA0B,MAAM,iCAAiC,YAAY,kDAAkD,aAAa,KAAK,iCAAiC,MAAM,iCAAiC,YAAY,kDAAkD,cAAc,cAAc,UAAU,MAAM,iCAAiC,EAAE,gEAAgE,6DAA6D,8CAA8C,uBAAuB,EAAE,2BAA2B,8CAA8C,aAAa,uBAAuB,MAAM,YAAY,qDAAqD,KAAK,+BAA+B,YAAY,qDAAqD,MAAM,8CAA8C,aAAa,uBAAuB,MAAM,YAAY,6BAA6B,KAAK,+BAA+B,YAAY,6BAA6B,MAAM,kBAAkB,yBAAyB,6CAA6C,iDAAiD,eAAe,oBAAoB,WAAW,uBAAuB,YAAY,aAAa,uBAAuB,YAAY,WAAW,KAAK,WAAW,cAAc,YAAY,WAAW,KAAK,WAAW,qBAAqB,oBAAoB,oBAAoB,qBAAqB,iBAAiB,SAAS,gBAAgB,gBAAgB,IAAI,OAAO,KAAK,QAAQ,UAAU,iBAAiB,iBAAiB,4BAA4B,kBAAkB,YAAY,WAAW,KAAK,WAAW,kBAAkB,mDAAmD,kDAAkD,gBAAgB,KAAK,+BAA+B,6DAA6D,MAAM,mBAAmB,oDAAoD,IAAI,cAAc,4CAA4C,mCAAmC,oCAAoC,EAAE,kBAAkB,mBAAmB,YAAY,eAAe,OAAO,YAAY,iBAAiB,gCAAgC,yBAAyB,QAAQ,eAAe,IAAI,IAAI,YAAY,aAAa,KAAK,WAAW,kFAAkF,mBAAmB,kCAAkC,6DAA6D,YAAY,aAAa,KAAK,WAAW,sFAAsF,sBAAsB,oBAAoB,mDAAmD,cAAc,cAAc,eAAe,YAAY,mBAAmB,YAAY,qEAAqE,YAAY,aAAa,OAAO,YAAY,oBAAoB,IAAI,6BAA6B,uCAAuC,aAAa,oDAAoD,YAAY,oBAAoB,mCAAmC,aAAa,KAAK,YAAY,EAAE,gDAAgD,uBAAuB,EAAE,gDAAgD,kDAAkD,+BAA+B,EAAE,yCAAyC,eAAe,WAAW,eAAe,YAAY,yDAAyD,OAAO,sBAAsB,cAAc,cAAc,gDAAgD,mCAAmC,qBAAqB,sBAAsB,sBAAsB,wBAAwB,SAAS,QAAQ,uBAAuB,sCAAsC,SAAS,SAAS,SAAS,oBAAoB,yBAAyB,6BAA6B,uCAAuC,aAAa,iBAAiB,8BAA8B,qBAAqB,mBAAmB,oBAAoB,gBAAgB,kBAAkB,mBAAmB,2BAA2B,iBAAiB,kCAAkC,mBAAmB,YAAY,KAAK,0DAA0D,mCAAmC,OAAO,eAAe,KAAK,aAAa,KAAK,0DAA0D,mCAAmC,OAAO,cAAc,cAAc,mBAAmB,eAAe,YAAY,YAAY,MAAM,kCAAkC,2BAA2B,0BAA0B,2EAA2E,EAAE,2BAA2B,UAAU,iBAAiB,uBAAuB,uDAAuD,gCAAgC,2EAA2E,EAAE,OAAO,qBAAqB,qBAAqB,uBAAuB,6CAA6C,gBAAgB,sBAAsB,KAAK,uBAAuB,KAAK,sGAAsG,gBAAgB,wBAAwB,KAAK,0BAA0B,kBAAkB,sBAAsB,oBAAoB,qBAAqB,oBAAoB,KAAK,gGAAgG,eAAe,uBAAuB,KAAK,yBAAyB,kBAAkB,sBAAsB,qBAAqB,KAAK,mBAAmB,2BAA2B,sBAAsB,oBAAoB,gCAAgC,+DAA+D,+BAA+B,aAAa,sBAAsB,0CAA0C,8BAA8B,qBAAqB,oBAAoB,cAAc,8DAA8D,kCAAkC,qBAAqB,qBAAqB,qBAAqB,mBAAmB,IAAI,YAAY,KAAK,+BAA+B,2BAA2B,wBAAwB,eAAe,uBAAuB,oCAAoC,8CAA8C,gFAAgF,gBAAgB,gBAAgB,oBAAoB,kCAAkC,qBAAqB,qBAAqB,mBAAmB,IAAI,cAAc,qBAAqB,uBAAuB,+BAA+B,MAAM,eAAe,oCAAoC,KAAK,kCAAkC,KAAK,KAAK,YAAY,qBAAqB,8BAA8B,qBAAqB,oBAAoB,iBAAiB,EAAE,6BAA6B,WAAW,2CAA2C,qEAAqE,gCAAgC,YAAY,QAAQ,eAAe,IAAI,IAAI,YAAY,WAAW,KAAK,iBAAiB,MAAM,iBAAiB,WAAW,sBAAsB,gCAAgC,2CAA2C,0BAA0B,YAAY,aAAa,KAAK,WAAW,qFAAqF,MAAM,0FAA0F,KAAK,YAAY,aAAa,KAAK,WAAW,MAAM,WAAW,kBAAkB,0CAA0C,mDAAmD,0CAA0C,mDAAmD,cAAc,MAAM,mBAAmB,4BAA4B,oDAAoD,WAAW,QAAQ,QAAQ,QAAQ,WAAW,eAAe,yBAAyB,6BAA6B,KAAK,KAAK,QAAQ,QAAQ,QAAQ,WAAW,eAAe,yBAAyB,gCAAgC,OAAO,yBAAyB,WAAW,8CAA8C,2BAA2B,8BAA8B,cAAc,cAAc,SAAS,WAAW,MAAM,0BAA0B,OAAO,qBAAqB,YAAY,KAAK,cAAc,SAAS,WAAW,MAAM,0BAA0B,OAAO,qBAAqB,aAAa,YAAY,SAAS,oBAAoB,2BAA2B,oBAAoB,WAAW,oBAAoB,kBAAkB,oBAAoB,OAAO,OAAO,YAAY,WAAW,KAAK,UAAU,SAAS,0BAA0B,iBAAiB,OAAO,UAAU,qBAAqB,sBAAsB,0BAA0B,KAAK,gCAAgC,sBAAsB,+BAA+B,0BAA0B,SAAS,oBAAoB,kBAAkB,0BAA0B,YAAY,WAAW,KAAK,iBAAiB,SAAS,oBAAoB,qBAAqB,MAAM,gBAAgB,KAAK,WAAW,qBAAqB,kBAAkB,2DAA2D,aAAa,WAAW,iBAAiB,8CAA8C,WAAW,QAAQ,kBAAkB,gDAAgD,yBAAyB,QAAQ,YAAY,WAAW,KAAK,cAAc,8CAA8C,QAAQ,SAAS,YAAY,qBAAqB,SAAS,IAAI,SAAS,oBAAoB,QAAQ,YAAY,WAAW,KAAK,YAAY,2BAA2B,SAAS,WAAW,MAAM,KAAK,6BAA6B,UAAU,eAAe,YAAY,kBAAkB,2CAA2C,6BAA6B,wBAAwB,mBAAmB,aAAa,KAAK,aAAa,YAAY,iBAAiB,kBAAkB,SAAS,uBAAuB,IAAI,kEAAkE,eAAe,UAAU,SAAS,8CAA8C,YAAY,WAAW,KAAK,WAAW,iCAAiC,SAAS,aAAa,YAAY,YAAY,6BAA6B,uBAAuB,YAAY,IAAI,wEAAwE,eAAe,UAAU,SAAS,oDAAoD,YAAY,WAAW,KAAK,WAAW,iCAAiC,SAAS,aAAa,YAAY,YAAY,mBAAmB,OAAO,6HAA6H,gEAAgE,SAAS,kDAAkD,OAAO,SAAS,SAAS,2BAA2B,8BAA8B,UAAU,2BAA2B,iBAAiB,aAAa,QAAQ,oCAAoC,IAAI,kCAAkC,wCAAwC,KAAK,YAAY,kBAAkB,qBAAqB,cAAc,OAAO,KAAK,wDAAwD,MAAM,kBAAkB,EAAE,SAAS,wBAAwB,kBAAkB,YAAY,uCAAuC,YAAY,wCAAwC,YAAY,0CAA0C,YAAY,oBAAoB,WAAW,kDAAkD,4BAA4B,sBAAsB,wBAAwB,kDAAkD,2BAA2B,OAAO,OAAO,kCAAkC,uCAAuC,MAAM,aAAa,gFAAgF,2CAA2C,4BAA4B,sDAAsD,SAAS,wBAAwB,sBAAsB,gDAAgD,4EAA4E,6BAA6B,4BAA4B,YAAY,0CAA0C,gBAAgB,wBAAwB,uBAAuB,sEAAsE,uBAAuB,UAAU,wBAAwB,4BAA4B,0BAA0B,gBAAgB,eAAe,SAAS,YAAY,8BAA8B,KAAK,mCAAmC,IAAI,OAAO,6CAA6C,uCAAuC,4CAA4C,KAAK,2CAA2C,eAAe,0BAA0B,gBAAgB,0BAA0B,UAAU,2BAA2B,0BAA0B,KAAK,UAAU,gBAAgB,IAAI,2BAA2B,2BAA2B,KAAK,2BAA2B,0BAA0B,2CAA2C,iCAAiC,gCAAgC,iBAAiB,sBAAsB,0BAA0B,wCAAwC,mBAAmB,uBAAuB,MAAM,SAAS,OAAO,MAAM,eAAe,4BAA4B,0CAA0C,wCAAwC,KAAK,0CAA0C,+FAA+F,YAAY,yCAAyC,KAAK,qCAAqC,oBAAoB,oDAAoD,uDAAuD,mBAAmB,WAAW,cAAc,8BAA8B,KAAK,sEAAsE,0BAA0B,OAAO,MAAM,yCAAyC,6BAA6B,KAAK,0BAA0B,mBAAmB,WAAW,cAAc,KAAK,KAAK,sEAAsE,0BAA0B,OAAO,MAAM,yCAAyC,8BAA8B,SAAS,iCAAiC,0BAA0B,mCAAmC,oBAAoB,WAAW,YAAY,8BAA8B,KAAK,sEAAsE,0BAA0B,OAAO,MAAM,SAAS,WAAW,MAAM,0BAA0B,OAAO,yBAAyB,QAAQ,MAAM,2BAA2B,wBAAwB,wBAAwB,0BAA0B,iCAAiC,8BAA8B,iDAAiD,EAAE,+CAA+C,MAAM,+BAA+B,4BAA4B,KAAK,0CAA0C,KAAK,mBAAmB,WAAW,wCAAwC,KAAK,KAAK,sEAAsE,0BAA0B,OAAO,MAAM,SAAS,WAAW,MAAM,0BAA0B,OAAO,yBAAyB,QAAQ,MAAM,2BAA2B,wBAAwB,wBAAwB,0BAA0B,iCAAiC,8BAA8B,iDAAiD,EAAE,yCAAyC,+BAA+B,+BAA+B,iBAAiB,YAAY,yBAAyB,2CAA2C,mBAAmB,0BAA0B,gBAAgB,SAAS,YAAY,8BAA8B,KAAK,8BAA8B,YAAY,WAAW,KAAK,WAAW,kBAAkB,YAAY,8BAA8B,KAAK,wEAAwE,KAAK,oCAAoC,SAAS,UAAU,QAAQ,UAAU,4BAA4B,yBAAyB,uCAAuC,KAAK,6CAA6C,eAAe,cAAc,MAAM,SAAS,oBAAoB,WAAW,sBAAsB,0BAA0B,WAAW,WAAW,SAAS,0BAA0B,6BAA6B,0BAA0B,eAAe,YAAY,WAAW,KAAK,eAAe,4BAA4B,kCAAkC,KAAK,iCAAiC,mBAAmB,aAAa,KAAK,yBAAyB,MAAM,4BAA4B,4BAA4B,KAAK,0BAA0B,gBAAgB,gBAAgB,kBAAkB,WAAW,oDAAoD,iDAAiD,2BAA2B,QAAQ,qBAAqB,KAAK,SAAS,WAAW,MAAM,2BAA2B,QAAQ,qBAAqB,SAAS,aAAa,OAAO,aAAa,UAAU,kBAAkB,WAAW,iDAAiD,0BAA0B,OAAO,qBAAqB,KAAK,SAAS,WAAW,MAAM,0BAA0B,OAAO,qBAAqB,SAAS,aAAa,OAAO,aAAa,UAAU,WAAW,iBAAiB,WAAW,wBAAwB,iBAAiB,QAAQ,wBAAwB,OAAO,OAAO,KAAK,iBAAiB,QAAQ,wBAAwB,OAAO,OAAO,KAAK,UAAU,MAAM,KAAK,UAAU,SAAS,qBAAqB,qBAAqB,uBAAuB,8BAA8B,2BAA2B,8CAA8C,EAAE,4BAA4B,gBAAgB,iBAAiB,wBAAwB,UAAU,SAAS,4BAA4B,KAAK,qBAAqB,gCAAgC,iBAAiB,wBAAwB,eAAe,YAAY,SAAS,wCAAwC,KAAK,qBAAqB,gCAAgC,4BAA4B,UAAU,KAAK,KAAK,UAAU,OAAO,sBAAsB,IAAI,aAAa,KAAK,sBAAsB,IAAI,aAAa,KAAK,iBAAiB,yBAAyB,2CAA2C,yBAAyB,aAAa,KAAK,yBAAyB,6GAA6G,aAAa,uDAAuD,6BAA6B,aAAa,KAAK,uDAAuD,qCAAqC,4BAA4B,eAAe,kCAAkC,cAAc,qBAAqB,KAAK,qBAAqB,aAAa,wCAAwC,qBAAqB,cAAc,KAAK,iBAAiB,yBAAyB,2CAA2C,yBAAyB,aAAa,KAAK,yBAAyB,4BAA4B,aAAa,8BAA8B,2BAA2B,aAAa,KAAK,2FAA2F,mCAAmC,kCAAkC,YAAY,WAAW,KAAK,kBAAkB,WAAW,QAAQ,KAAK,yCAAyC,kCAAkC,cAAc,qBAAqB,KAAK,qBAAqB,aAAa,wCAAwC,qBAAqB,cAAc,KAAK,UAAU,SAAS,WAAW,MAAM,0BAA0B,OAAO,qBAAqB,QAAQ,2BAA2B,qBAAqB,cAAc,KAAK,UAAU,SAAS,WAAW,MAAM,0BAA0B,OAAO,qBAAqB,QAAQ,2BAA2B,qBAAqB,mBAAmB,YAAY,WAAW,2BAA2B,oBAAoB,qCAAqC,qDAAqD,wBAAwB,wBAAwB,0BAA0B,qBAAqB,iCAAiC,gCAAgC,iCAAiC,EAAE,cAAc,wBAAwB,wBAAwB,0BAA0B,gCAAgC,qBAAqB,iCAAiC,8BAA8B,iCAAiC,EAAE,kBAAkB,UAAU,wBAAwB,WAAW,MAAM,0BAA0B,OAAO,sBAAsB,oDAAoD,wDAAwD,sBAAsB,KAAK,UAAU,wBAAwB,WAAW,MAAM,0BAA0B,OAAO,sBAAsB,2BAA2B,uBAAuB,cAAc,wBAAwB,6BAA6B,WAAW,sCAAsC,OAAO,iEAAiE,KAAK,uCAAuC,YAAY,OAAO,qCAAqC,6BAA6B,oBAAoB,kCAAkC,8BAA8B,oBAAoB,OAAO,2EAA2E,8BAA8B,YAAY,sBAAsB,OAAO,qCAAqC,2BAA2B,sBAAsB,MAAM,aAAa,8BAA8B,KAAK,8BAA8B,sBAAsB,MAAM,aAAa,KAAK,iBAAiB,aAAa,+BAA+B,cAAc,qBAAqB,4BAA4B,iBAAiB,qBAAqB,2BAA2B,sBAAsB,eAAe,iBAAiB,uBAAuB,qCAAqC,gCAAgC,qCAAqC,IAAI,cAAc,oBAAoB,wBAAwB,qCAAqC,mBAAmB,6DAA6D,4DAA4D,wCAAwC,iBAAiB,OAAO,wCAAwC,iBAAiB,QAAQ,oCAAoC,uCAAuC,4CAA4C,kBAAkB,SAAS,mCAAmC,kBAAkB,uDAAuD,WAAW,qBAAqB,4CAA4C,iBAAiB,0DAA0D,8BAA8B,sCAAsC,+FAA+F,qBAAqB,aAAa,YAAY,MAAM,iBAAiB,QAAQ,WAAW,kCAAkC,gCAAgC,aAAa,aAAa,MAAM,gBAAgB,gBAAgB,KAAK,mBAAmB,WAAW,iCAAiC,IAAI,gBAAgB,0BAA0B,oBAAoB,iBAAiB,mBAAmB,kBAAkB,YAAY,8BAA8B,KAAK,uCAAuC,SAAS,kBAAkB,2BAA2B,sCAAsC,eAAe,qBAAqB,YAAY,WAAW,KAAK,mBAAmB,WAAW,mCAAmC,KAAK,gDAAgD,QAAQ,kBAAkB,8BAA8B,4CAA4C,iBAAiB,qBAAqB,mBAAmB,aAAa,aAAa,MAAM,aAAa,4CAA4C,4BAA4B,qCAAqC,qBAAqB,KAAK,wBAAwB,eAAe,YAAY,IAAI,KAAK,uBAAuB,yBAAyB,sBAAsB,yBAAyB,iBAAiB,sBAAsB,UAAU,cAAc,gBAAgB,KAAK,iBAAiB,kBAAkB,iGAAiG,mBAAmB,aAAa,aAAa,MAAM,iBAAiB,SAAS,aAAa,eAAe,MAAM,iBAAiB,6CAA6C,kCAAkC,kCAAkC,kCAAkC,KAAK,2BAA2B,KAAK,0BAA0B,eAAe,0BAA0B,yBAAyB,KAAK,MAAM,iBAAiB,mBAAmB,WAAW,6BAA6B,KAAK,yCAAyC,gBAAgB,yBAAyB,aAAa,YAAY,MAAM,UAAU,UAAU,iBAAiB,qCAAqC,iDAAiD,UAAU,oBAAoB,gBAAgB,KAAK,IAAI,KAAK,KAAK,2BAA2B,SAAS,SAAS,SAAS,6CAA6C,iDAAiD,WAAW,2DAA2D,2DAA2D,2DAA2D,2DAA2D,wDAAwD,yDAAyD,wDAAwD,yDAAyD,aAAa,QAAQ,eAAe,QAAQ,SAAS,YAAY,WAAW,KAAK,WAAW,wBAAwB,+BAA+B,qCAAqC,yCAAyC,KAAK,YAAY,WAAW,KAAK,QAAQ,kEAAkE,MAAM,4BAA4B,sBAAsB,UAAU,eAAe,UAAU,gBAAgB,KAAK,cAAc,OAAO,wCAAwC,8BAA8B,uCAAuC,gBAAgB,uCAAuC,iBAAiB,uCAAuC,YAAY,oBAAoB,8CAA8C,4DAA4D,4DAA4D,yDAAyD,0DAA0D,wBAAwB,mCAAmC,2CAA2C,OAAO,MAAM,MAAM,4BAA4B,YAAY,qBAAqB,8BAA8B,eAAe,uBAAuB,aAAa,aAAa,MAAM,aAAa,gBAAgB,YAAY,WAAW,mFAAmF,KAAK,8EAA8E,oCAAoC,uCAAuC,wBAAwB,oCAAoC,gDAAgD,sCAAsC,8BAA8B,mCAAmC,+BAA+B,mDAAmD,qDAAqD,6BAA6B,gDAAgD,+BAA+B,8BAA8B,uCAAuC,WAAW,oBAAoB,wBAAwB,aAAa,0CAA0C,MAAM,8BAA8B,WAAW,uBAAuB,kCAAkC,OAAO,sCAAsC,0CAA0C,wCAAwC,wEAAwE,kDAAkD,oEAAoE,OAAO,4BAA4B,KAAK,iCAAiC,oCAAoC,oBAAoB,wBAAwB,+BAA+B,YAAY,gCAAgC,iCAAiC,KAAK,gCAAgC,iCAAiC,yBAAyB,kCAAkC,kCAAkC,OAAO,oDAAoD,sDAAsD,wDAAwD,0DAA0D,OAAO,mBAAmB,gCAAgC,KAAK,2BAA2B,kCAAkC,OAAO,+BAA+B,2DAA2D,KAAK,mBAAmB,gCAAgC,KAAK,2BAA2B,mCAAmC,OAAO,gCAAgC,qBAAqB,mBAAmB,WAAW,gCAAgC,KAAK,kCAAkC,KAAK,oBAAoB,YAAY,gCAAgC,KAAK,sCAAsC,mCAAmC,aAAa,yCAAyC,gDAAgD,0CAA0C,KAAK,OAAO,2BAA2B,KAAK,QAAQ,+BAA+B,KAAK,uCAAuC,6BAA6B,IAAI,8BAA8B,cAAc,cAAc,4BAA4B,0BAA0B,mCAAmC,wCAAwC,mCAAmC,qCAAqC,8DAA8D,yCAAyC,KAAK,EAAE,wBAAwB,uBAAuB,WAAW,aAAa,cAAc,mBAAmB,qBAAqB,UAAU,6BAA6B,mBAAmB,YAAY,WAAW,KAAK,WAAW,aAAa,cAAc,uBAAuB,0BAA0B,wBAAwB,WAAW,uBAAuB,iCAAiC,uCAAuC,gDAAgD,oBAAoB,4BAA4B,YAAY,IAAI,KAAK,WAAW,QAAQ,aAAa,cAAc,qBAAqB,gBAAgB,qBAAqB,wBAAwB,uBAAuB,oBAAoB,wBAAwB,2BAA2B,WAAW,uBAAuB,iCAAiC,uCAAuC,8CAA8C,6CAA6C,kCAAkC,8BAA8B,kCAAkC,gCAAgC,4CAA4C,gBAAgB,oCAAoC,wBAAwB,4CAA4C,8CAA8C,aAAa,gDAAgD,SAAS,+BAA+B,oBAAoB,6BAA6B,KAAK,mBAAmB,8BAA8B,cAAc,8BAA8B,KAAK,aAAa,8BAA8B,+BAA+B,mBAAmB,cAAc,8BAA8B,KAAK,aAAa,oCAAoC,wBAAwB,SAAS,wBAAwB,QAAQ,oCAAoC,IAAI,eAAe,qBAAqB,oBAAoB,aAAa,0BAA0B,MAAM,WAAW,SAAS,UAAU,gDAAgD,gDAAgD,aAAa,MAAM,6CAA6C,EAAE,qBAAqB,YAAY,WAAW,KAAK,uCAAuC,4BAA4B,EAAE,oBAAoB,aAAa,EAAE,WAAW,oFAAoF,iBAAiB,mBAAmB,2CAA2C,yDAAyD,wBAAwB,oBAAoB,YAAY,EAAE,sBAAsB,kBAAkB,KAAK,SAAS,KAAK,2CAA2C,0BAA0B,wBAAwB,oBAAoB,YAAY,EAAE,mBAAmB,sBAAsB,kBAAkB,KAAK,6BAA6B,QAAQ,qBAAqB,YAAY,sBAAsB,YAAY,oCAAoC,mBAAmB,qCAAqC,kCAAkC,qBAAqB,qBAAqB,sCAAsC,OAAO,aAAa,wBAAwB,2BAA2B,gBAAgB,YAAY,kCAAkC,qBAAqB,oCAAoC,OAAO,aAAa,wBAAwB,YAAY,KAAK,kCAAkC,2BAA2B,kCAAkC,OAAO,SAAS,uBAAuB,mEAAmE,uBAAuB,iCAAiC,gBAAgB,UAAU,uBAAuB,kCAAkC,WAAW,eAAe,iFAAiF,MAAM,SAAS,oBAAoB,8BAA8B,cAAc,YAAY,cAAc,EAAE,MAAM,UAAU,YAAY,2CAA2C,SAAS,WAAW,sBAAsB,0CAA0C,SAAS,iDAAiD,8BAA8B,gBAAgB,KAAK,8CAA8C,uBAAuB,aAAa,EAAE,YAAY,mCAAmC,eAAe,mCAAmC,eAAe,mCAAmC,eAAe,mCAAmC,aAAa,mCAAmC,aAAa,mCAAmC,aAAa,mCAAmC,aAAa,mCAAmC,aAAa,wBAAwB,YAAY,KAAK,iCAAiC,WAAW,KAAK,kBAAkB,sDAAsD,qBAAqB,mCAAmC,YAAY,uBAAuB,2DAA2D,oBAAoB,cAAc,eAAe,gBAAgB,aAAa,KAAK,YAAY,KAAK,YAAY,KAAK,aAAa,SAAS,yBAAyB,sBAAsB,yBAAyB,yBAAyB,sBAAsB,yBAAyB,mCAAmC,WAAW,wBAAwB,0BAA0B,QAAQ,qBAAqB,aAAa,iCAAiC,OAAO,SAAS,sBAAsB,wBAAwB,eAAe,0FAA0F,MAAM,SAAS,oBAAoB,8BAA8B,cAAc,YAAY,cAAc,EAAE,MAAM,KAAK,OAAO,oEAAoE,6FAA6F,gBAAgB,gBAAgB,aAAa,KAAK,KAAK,0CAA0C,UAAU,QAAQ,cAAc,+BAA+B,IAAI,KAAK,sBAAsB,aAAa,QAAQ,aAAa,QAAQ,8BAA8B,0BAA0B,mCAAmC,OAAO,kBAAkB,8BAA8B,MAAM,QAAQ,2BAA2B,wBAAwB,0BAA0B,aAAa,kBAAkB,8BAA8B,MAAM,0BAA0B,gBAAgB,+FAA+F,mCAAmC,QAAQ,0CAA0C,2BAA2B,QAAQ,yBAAyB,2BAA2B,2BAA2B,cAAc,KAAK,SAAS,KAAK,qCAAqC,WAAW,WAAW,MAAM,oBAAoB,iBAAiB,WAAW,cAAc,EAAE,YAAY,2BAA2B,aAAa,0BAA0B,KAAK,QAAQ,KAAK,mCAAmC,eAAe,QAAQ,YAAY,aAAa,KAAK,UAAU,oBAAoB,oDAAoD,KAAK,6BAA6B,MAAM,mDAAmD,YAAY,kBAAkB,aAAa,sCAAsC,IAAI,QAAQ,+BAA+B,iBAAiB,QAAQ,SAAS,QAAQ,yBAAyB,QAAQ,iCAAiC,wBAAwB,qCAAqC,4GAA4G,EAAE,kBAAkB,uBAAuB,QAAQ,mBAAmB,8BAA8B,qBAAqB,aAAa,kBAAkB,sBAAsB,8BAA8B,2BAA2B,qBAAqB,aAAa,kBAAkB,sBAAsB,kCAAkC,gCAAgC,qBAAqB,YAAY,kCAAkC,wBAAwB,yBAAyB,qBAAqB,+BAA+B,qEAAqE,KAAK,uEAAuE,0EAA0E,SAAS,4BAA4B,qBAAqB,aAAa,kBAAkB,sBAAsB,mCAAmC,iCAAiC,wBAAwB,sBAAsB,0BAA0B,0BAA0B,QAAQ,SAAS,YAAY,YAAY,YAAY,0BAA0B,sBAAsB,0BAA0B,6BAA6B,sBAAsB,wBAAwB,4BAA4B,6BAA6B,qBAAqB,0BAA0B,sBAAsB,0BAA0B,yBAAyB,gCAAgC,UAAU,SAAS,sCAAsC,qBAAqB,YAAY,WAAW,KAAK,qBAAqB,mCAAmC,IAAI,OAAO,KAAK,oBAAoB,IAAI,SAAS,SAAS,gCAAgC,kBAAkB,UAAU,qBAAqB,mBAAmB,UAAU,SAAS,iBAAiB,SAAS,QAAQ,YAAY,WAAW,KAAK,wEAAwE,IAAI,OAAO,SAAS,iCAAiC,mBAAmB,0BAA0B,cAAc,cAAc,kLAAkL,QAAQ,wBAAwB,kBAAkB,8BAA8B,cAAc,cAAc,gCAAgC,uBAAuB,8CAA8C,aAAa,4CAA4C,aAAa,uBAAuB,6BAA6B,aAAa,uCAAuC,+DAA+D,YAAY,8BAA8B,KAAK,0BAA0B,0BAA0B,OAAO,OAAO,cAAc,sBAAsB,kBAAkB,aAAa,MAAM,kBAAkB,WAAW,wBAAwB,kBAAkB,8BAA8B,0BAA0B,wBAAwB,8BAA8B,0BAA0B,YAAY,MAAM,iBAAiB,QAAQ,YAAY,WAAW,KAAK,8BAA8B,WAAW,uBAAuB,SAAS,qBAAqB,SAAS,aAAa,gBAAgB,mCAAmC,SAAS,sDAAsD,sDAAsD,mDAAmD,oDAAoD,yBAAyB,SAAS,wBAAwB,mBAAmB,UAAU,uBAAuB,0BAA0B,kCAAkC,aAAa,kBAAkB,oBAAoB,yBAAyB,4BAA4B,eAAe,UAAU,8CAA8C,cAAc,sBAAsB,qBAAqB,gEAAgE,8GAA8G,aAAa,yBAAyB,8CAA8C,uDAAuD,oDAAoD,yBAAyB,sBAAsB,MAAM,4CAA4C,SAAS,uDAAuD,KAAK,0DAA0D,SAAS,uDAAuD,cAAc,yBAAyB,0BAA0B,kBAAkB,8BAA8B,8BAA8B,MAAM,gBAAgB,wBAAwB,wBAAwB,4DAA4D,KAAK,OAAO,OAAO,mDAAmD,OAAO,UAAU,QAAQ,sBAAsB,qBAAqB,OAAO,UAAU,IAAI,6BAA6B,4BAA4B,KAAK,6BAA6B,iBAAiB,yBAAyB,2BAA2B,YAAY,SAAS,SAAS,MAAM,WAAW,YAAY,gDAAgD,sCAAsC,iCAAiC,aAAa,KAAK,iBAAiB,KAAK,SAAS,mBAAmB,QAAQ,+CAA+C,6CAA6C,oBAAoB,kBAAkB,EAAE,sBAAsB,mIAAmI,sBAAsB,kDAAkD,6BAA6B,kBAAkB,aAAa,YAAY,6BAA6B,YAAY,SAAS,cAAc,2BAA2B,2CAA2C,aAAa,KAAK,KAAK,QAAQ,QAAQ,uDAAuD,yEAAyE,cAAc,YAAY,aAAa,KAAK,yBAAyB,8BAA8B,MAAM,iBAAiB,cAAc,GAAG,iBAAiB,QAAQ,+CAA+C,2CAA2C,MAAM,mDAAmD,8BAA8B,iCAAiC,cAAc,cAAc,uBAAuB,8CAA8C,uBAAuB,oBAAoB,6CAA6C,2BAA2B,iDAAiD,QAAQ,+CAA+C,OAAO,kCAAkC,WAAW,WAAW,YAAY,IAAI,aAAa,KAAK,2BAA2B,yCAAyC,KAAK,6CAA6C,cAAc,mBAAmB,8CAA8C,KAAK,QAAQ,WAAW,YAAY,cAAc,iBAAiB,2CAA2C,oBAAoB,kBAAkB,EAAE,QAAQ,eAAe,mBAAmB,iCAAiC,iCAAiC,iDAAiD,EAAE,MAAM,wBAAwB,WAAW,WAAW,MAAM,iBAAiB,oBAAoB,kCAAkC,0HAA0H,EAAE,sBAAsB,uBAAuB,6BAA6B,eAAe,uDAAuD,qDAAqD,sBAAsB,QAAQ,SAAS,SAAS,mBAAmB,aAAa,iBAAiB,eAAe,UAAU,mDAAmD,wDAAwD,sDAAsD,oDAAoD,SAAS,YAAY,WAAW,KAAK,yBAAyB,YAAY,OAAO,YAAY,OAAO,8BAA8B,MAAM,IAAI,qBAAqB,SAAS,mCAAmC,mBAAmB,MAAM,sBAAsB,qBAAqB,gCAAgC,sBAAsB,eAAe,0FAA0F,MAAM,SAAS,oBAAoB,8BAA8B,cAAc,YAAY,cAAc,EAAE,MAAM,KAAK,0DAA0D,6BAA6B,wJAAwJ,uBAAuB,SAAS,oBAAoB,gBAAgB,aAAa,MAAM,wNAAwN,uBAAuB,SAAS,QAAQ,cAAc,uDAAuD,qBAAqB,oEAAoE,+BAA+B,QAAQ,gCAAgC,GAAG,iBAAiB,OAAO,qBAAqB,+CAA+C,4CAA4C,SAAS,8BAA8B,WAAW,WAAW,qBAAqB,uBAAuB,iBAAiB,gBAAgB,qBAAqB,YAAY,WAAW,KAAK,kBAAkB,kBAAkB,iCAAiC,iBAAiB,8DAA8D,kBAAkB,IAAI,oBAAoB,yEAAyE,IAAI,0CAA0C,yBAAyB,YAAY,qCAAqC,OAAO,kDAAkD,gCAAgC,SAAS,SAAS,kEAAkE,UAAU,SAAS,+BAA+B,WAAW,qBAAqB,OAAO,iBAAiB,sBAAsB,cAAc,QAAQ,qBAAqB,uBAAuB,iBAAiB,gBAAgB,qBAAqB,aAAa,WAAW,MAAM,wBAAwB,MAAM,iBAAiB,IAAI,iBAAiB,IAAI,YAAY,WAAW,KAAK,kBAAkB,kBAAkB,iCAAiC,0BAA0B,0BAA0B,uBAAuB,KAAK,qBAAqB,iBAAiB,mCAAmC,0BAA0B,YAAY,WAAW,KAAK,kBAAkB,kBAAkB,iCAAiC,wBAAwB,0BAA0B,0BAA0B,uBAAuB,KAAK,oBAAoB,eAAe,2BAA2B,MAAM,qBAAqB,mBAAmB,kBAAkB,mBAAmB,oCAAoC,gHAAgH,yBAAyB,6BAA6B,MAAM,yBAAyB,2CAA2C,uCAAuC,sBAAsB,kCAAkC,wBAAwB,6EAA6E,+BAA+B,KAAK,2BAA2B,sBAAsB,2BAA2B,kCAAkC,wBAAwB,6EAA6E,+BAA+B,MAAM,SAAS,gBAAgB,kCAAkC,yFAAyF,EAAE,sBAAsB,uCAAuC,OAAO,cAAc,oBAAoB,YAAY,4BAA4B,WAAW,qBAAqB,uBAAuB,mBAAmB,6BAA6B,kCAAkC,mBAAmB,oCAAoC,gHAAgH,yBAAyB,6BAA6B,MAAM,uBAAuB,+BAA+B,gBAAgB,8BAA8B,kCAAkC,qBAAqB,WAAW,WAAW,MAAM,4BAA4B,+BAA+B,6BAA6B,6IAA6I,EAAE,4BAA4B,8CAA8C,EAAE,mBAAmB,kBAAkB,eAAe,gBAAgB,4BAA4B,eAAe,sBAAsB,eAAe,KAAK,wCAAwC,iBAAiB,6CAA6C,8DAA8D,oCAAoC,UAAU,WAAW,oBAAoB,WAAW,iCAAiC,cAAc,iBAAiB,UAAU,WAAW,oBAAoB,WAAW,UAAU,iEAAiE,wDAAwD,+CAA+C,SAAS,SAAS,wBAAwB,wBAAwB,2BAA2B,cAAc,kBAAkB,kCAAkC,OAAO,OAAO,QAAQ,gDAAgD,6BAA6B,kBAAkB,gBAAgB,iEAAiE,YAAY,4BAA4B,oEAAoE,mEAAmE,+CAA+C,QAAQ,IAAI,sEAAsE,OAAO,oBAAoB,iCAAiC,wCAAwC,wCAAwC,aAAa,IAAI,SAAS,IAAI,qBAAqB,gBAAgB,6BAA6B,+BAA+B,KAAK,OAAO,kBAAkB,KAAK,8DAA8D,wBAAwB,4CAA4C,SAAS,UAAU,EAAE,wBAAwB,SAAS,SAAS,EAAE,iBAAiB,wBAAwB,iCAAiC,8BAA8B,0BAA0B,iBAAiB,uBAAuB,iBAAiB,SAAS,YAAY,gBAAgB,YAAY,4DAA4D,+DAA+D,mBAAmB,qCAAqC,4DAA4D,KAAK,qCAAqC,4DAA4D,KAAK,qCAAqC,wDAAwD,KAAK,wDAAwD,+DAA+D,kBAAkB,mDAAmD,4CAA4C,8BAA8B,KAAK,kBAAkB,uBAAuB,sDAAsD,UAAU,sCAAsC,8BAA8B,EAAE,KAAK,KAAK,kBAAkB,4CAA4C,8BAA8B,KAAK,uBAAuB,WAAW,sCAAsC,8BAA8B,GAAG,8EAA8E,wBAAwB,eAAe,wDAAwD,aAAa,8BAA8B,YAAY,kBAAkB,QAAQ,iBAAiB,SAAS,OAAO,8BAA8B,KAAK,uBAAuB,WAAW,wBAAwB,OAAO,WAAW,oBAAoB,SAAS,OAAO,iCAAiC,EAAE,gCAAgC,gCAAgC,kBAAkB,8DAA8D,gBAAgB,2BAA2B,kBAAkB,QAAQ,QAAQ,SAAS,oBAAoB,cAAc,EAAE,IAAI,oCAAoC,kBAAkB,OAAO,kBAAkB,OAAO,uBAAuB,SAAS,uBAAuB,UAAU,uBAAuB,SAAS,QAAQ,QAAQ,aAAa,QAAQ,aAAa,QAAQ,eAAe,eAAe,+DAA+D,QAAQ,UAAU,QAAQ,SAAS,SAAS,KAAK,2DAA2D,QAAQ,UAAU,QAAQ,SAAS,SAAS,KAAK,iEAAiE,0BAA0B,4BAA4B,IAAI,QAAQ,UAAU,QAAQ,UAAU,SAAS,QAAQ,wBAAwB,QAAQ,UAAU,QAAQ,UAAU,SAAS,EAAE,4BAA4B,8BAA8B,0BAA0B,mCAAmC,+CAA+C,YAAY,mFAAmF,gCAAgC,wBAAwB,oCAAoC,0BAA0B,iCAAiC,UAAU,uBAAuB,oBAAoB,0BAA0B,iBAAiB,IAAI,aAAa,IAAI,gBAAgB,8BAA8B,KAAK,gCAAgC,iBAAiB,QAAQ,SAAS,QAAQ,aAAa,cAAc,KAAK,cAAc,SAAS,aAAa,uBAAuB,sBAAsB,uBAAuB,4BAA4B,iBAAiB,uBAAuB,YAAY,gBAAgB,oBAAoB,eAAe,wDAAwD,aAAa,8BAA8B,0BAA0B,mCAAmC,YAAY,8BAA8B,kBAAkB,YAAY,mBAAmB,OAAO,wCAAwC,4BAA4B,eAAe,iBAAiB,+BAA+B,sBAAsB,eAAe,iBAAiB,+BAA+B,kBAAkB,YAAY,WAAW,KAAK,eAAe,sBAAsB,oBAAoB,iBAAiB,mBAAmB,MAAM,OAAO,oBAAoB,yBAAyB,MAAM,sCAAsC,eAAe,iCAAiC,KAAK,oBAAoB,WAAW,mBAAmB,OAAO,0BAA0B,4BAA4B,eAAe,iBAAiB,+BAA+B,sBAAsB,eAAe,iBAAiB,+BAA+B,kBAAkB,YAAY,WAAW,KAAK,eAAe,sBAAsB,oBAAoB,iBAAiB,mBAAmB,MAAM,KAAK,sBAAsB,yBAAyB,MAAM,sCAAsC,eAAe,iCAAiC,EAAE,YAAY,mFAAmF,gCAAgC,wBAAwB,kCAAkC,0BAA0B,iCAAiC,UAAU,0BAA0B,kBAAkB,0BAA0B,SAAS,IAAI,2BAA2B,iBAAiB,QAAQ,SAAS,SAAS,KAAK,SAAS,SAAS,aAAa,yBAAyB,sBAAsB,yBAAyB,kCAAkC,+BAA+B,gBAAgB,YAAY,sBAAsB,eAAe,wDAAwD,aAAa,8BAA8B,0BAA0B,mCAAmC,YAAY,kBAAkB,qBAAqB,kBAAkB,OAAO,QAAQ,KAAK,YAAY,2BAA2B,KAAK,oEAAoE,wCAAwC,oFAAoF,SAAS,KAAK,eAAe,uBAAuB,MAAM,KAAK,uBAAuB,wBAAwB,oBAAoB,OAAO,QAAQ,KAAK,aAAa,QAAQ,UAAU,eAAe,0BAA0B,WAAW,EAAE,8BAA8B,0BAA0B,+CAA+C,iBAAiB,iDAAiD,6BAA6B,mFAAmF,gCAAgC,qBAAqB,uBAAuB,uCAAuC,wBAAwB,iDAAiD,KAAK,0BAA0B,iCAAiC,UAAU,0BAA0B,kBAAkB,0BAA0B,SAAS,MAAM,IAAI,qBAAqB,oBAAoB,sBAAsB,gBAAgB,IAAI,+BAA+B,iBAAiB,QAAQ,SAAS,SAAS,KAAK,WAAW,SAAS,IAAI,qBAAqB,oBAAoB,sBAAsB,cAAc,SAAS,aAAa,qBAAqB,sBAAsB,qBAAqB,uBAAuB,sBAAsB,uBAAuB,0BAA0B,oBAAoB,4BAA4B,KAAK,iBAAiB,aAAa,mBAAmB,4BAA4B,oBAAoB,6BAA6B,KAAK,iBAAiB,cAAc,mBAAmB,uBAAuB,sBAAsB,uBAAuB,yBAAyB,sBAAsB,yBAAyB,gCAAgC,8BAA8B,wBAAwB,2BAA2B,4BAA4B,wBAAwB,0BAA0B,iCAAiC,8BAA8B,iDAAiD,EAAE,gCAAgC,2BAA2B,6BAA6B,wBAAwB,0BAA0B,iCAAiC,gCAAgC,iDAAiD,EAAE,yBAAyB,kBAAkB,iBAAiB,2BAA2B,sBAAsB,eAAe,gBAAgB,SAAS,8BAA8B,qBAAqB,OAAO,sBAAsB,MAAM,gBAAgB,kEAAkE,wEAAwE,MAAM,mBAAmB,cAAc,aAAa,uBAAuB,cAAc,+DAA+D,0DAA0D,4DAA4D,wDAAwD,KAAK,mEAAmE,8DAA8D,2DAA2D,wDAAwD,gBAAgB,eAAe,SAAS,gDAAgD,2BAA2B,2BAA2B,mBAAmB,sBAAsB,iFAAiF,mDAAmD,mBAAmB,kCAAkC,cAAc,iBAAiB,iBAAiB,SAAS,oBAAoB,yBAAyB,8DAA8D,gBAAgB,8BAA8B,qCAAqC,8BAA8B,wCAAwC,IAAI,8BAA8B,qBAAqB,OAAO,sBAAsB,MAAM,iBAAiB,kEAAkE,wEAAwE,MAAM,mBAAmB,cAAc,aAAa,uBAAuB,cAAc,4DAA4D,6DAA6D,yDAAyD,2DAA2D,KAAK,gEAAgE,iEAAiE,wDAAwD,2DAA2D,gBAAgB,gBAAgB,gDAAgD,2BAA2B,2BAA2B,yBAAyB,8DAA8D,gBAAgB,8BAA8B,qCAAqC,gCAAgC,wCAAwC,IAAI,+CAA+C,kHAAkH,OAAO,iBAAiB,QAAQ,SAAS,UAAU,uBAAuB,OAAO,iBAAiB,OAAO,YAAY,MAAM,KAAK,QAAQ,oCAAoC,iCAAiC,gBAAgB,IAAI,UAAU,IAAI,QAAQ,IAAI,UAAU,MAAM,UAAU,IAAI,OAAO,eAAe,oCAAoC,2BAA2B,cAAc,iDAAiD,UAAU,IAAI,kBAAkB,qBAAqB,OAAO,sBAAsB,QAAQ,oCAAoC,2BAA2B,oCAAoC,aAAa,gDAAgD,WAAW,wBAAwB,iCAAiC,8BAA8B,KAAK,gDAAgD,YAAY,MAAM,KAAK,WAAW,aAAa,WAAW,wBAAwB,4BAA4B,8BAA8B,mBAAmB,4BAA4B,kCAAkC,cAAc,oBAAoB,0BAA0B,MAAM,0BAA0B,sBAAsB,2BAA2B,KAAK,oBAAoB,qCAAqC,MAAM,qCAAqC,sBAAsB,wCAAwC,+BAA+B,8FAA8F,cAAc,YAAY,YAAY,IAAI,KAAK,QAAQ,yCAAyC,mCAAmC,SAAS,iBAAiB,4BAA4B,sCAAsC,iCAAiC,iBAAiB,8BAA8B,YAAY,8BAA8B,KAAK,QAAQ,yCAAyC,mCAAmC,SAAS,iBAAiB,4BAA4B,sCAAsC,iCAAiC,iBAAiB,8BAA8B,YAAY,IAAI,KAAK,QAAQ,qCAAqC,mCAAmC,SAAS,kBAAkB,kCAAkC,sCAAsC,iCAAiC,kBAAkB,oCAAoC,kCAAkC,8BAA8B,KAAK,2BAA2B,+BAA+B,8FAA8F,cAAc,YAAY,YAAY,IAAI,KAAK,QAAQ,yCAAyC,iBAAiB,4BAA4B,sCAAsC,iCAAiC,iBAAiB,8BAA8B,YAAY,8BAA8B,KAAK,QAAQ,yCAAyC,iBAAiB,4BAA4B,sCAAsC,iCAAiC,iBAAiB,8BAA8B,YAAY,IAAI,KAAK,QAAQ,qCAAqC,kBAAkB,kCAAkC,sCAAsC,iCAAiC,kBAAkB,oCAAoC,iCAAiC,+BAA+B,mBAAmB,qCAAqC,aAAa,0EAA0E,wBAAwB,6BAA6B,QAAQ,aAAa,gDAAgD,gDAAgD,0CAA0C,KAAK,wCAAwC,gDAAgD,+BAA+B,6BAA6B,iCAAiC,iCAAiC,yBAAyB,uCAAuC,YAAY,8BAA8B,KAAK,qDAAqD,WAAW,6CAA6C,QAAQ,sBAAsB,mBAAmB,2BAA2B,KAAK,2BAA2B,mCAAmC,oBAAoB,mBAAmB,sBAAsB,sBAAsB,iBAAiB,wBAAwB,kBAAkB,kBAAkB,mBAAmB,kBAAkB,8BAA8B,SAAS,oCAAoC,oBAAoB,mBAAmB,sBAAsB,iBAAiB,wBAAwB,kBAAkB,kBAAkB,cAAc,mBAAmB,kBAAkB,UAAU,SAAS,kBAAkB,gCAAgC,4BAA4B,oBAAoB,mBAAmB,8BAA8B,8BAA8B,gBAAgB,kBAAkB,yBAAyB,qEAAqE,OAAO,iCAAiC,wCAAwC,kCAAkC,kBAAkB,EAAE,KAAK,kCAAkC,kBAAkB,GAAG,4BAA4B,+BAA+B,2BAA2B,kCAAkC,KAAK,sBAAsB,2IAA2I,gBAAgB,aAAa,KAAK,wBAAwB,UAAU,EAAE,aAAa,oBAAoB,eAAe,yBAAyB,wBAAwB,OAAO,OAAO,6BAA6B,0BAA0B,wBAAwB,OAAO,OAAO,8BAA8B,4BAA4B,kCAAkC,iCAAiC,6BAA6B,sCAAsC,cAAc,mBAAmB,cAAc,OAAO,oBAAoB,wBAAwB,qBAAqB,yBAAyB,mBAAmB,YAAY,iCAAiC,KAAK,iCAAiC,+BAA+B,qCAAqC,8BAA8B,SAAS,kBAAkB,SAAS,UAAU,uCAAuC,yBAAyB,QAAQ,UAAU,mEAAmE,8CAA8C,MAAM,2CAA2C,8CAA8C,MAAM,qCAAqC,2CAA2C,MAAM,8BAA8B,6CAA6C,MAAM,eAAe,uBAAuB,mBAAmB,gBAAgB,EAAE,KAAK,mBAAmB,gBAAgB,MAAM,yBAAyB,kBAAkB,uBAAuB,0CAA0C,iCAAiC,6BAA6B,sCAAsC,0BAA0B,wBAAwB,+BAA+B,KAAK,iBAAiB,eAAe,kCAAkC,6BAA6B,2BAA2B,sEAAsE,6BAA6B,0BAA0B,yBAAyB,2BAA2B,8BAA8B,EAAE,sBAAsB,iCAAiC,6BAA6B,sCAAsC,kBAAkB,2DAA2D,aAAa,kBAAkB,uBAAuB,0CAA0C,YAAY,OAAO,kBAAkB,MAAM,WAAW,MAAM,8CAA8C,OAAO,KAAK,QAAQ,YAAY,iBAAiB,2BAA2B,KAAK,iBAAiB,kCAAkC,YAAY,eAAe,KAAK,kBAAkB,kBAAkB,uBAAuB,YAAY,iCAAiC,KAAK,6CAA6C,kCAAkC,oBAAoB,uBAAuB,sBAAsB,4DAA4D,EAAE,2BAA2B,eAAe,KAAK,8BAA8B,yBAAyB,WAAW,kBAAkB,OAAO,2BAA2B,OAAO,6DAA6D,WAAW,qDAAqD,4BAA4B,YAAY,QAAQ,KAAK,QAAQ,KAAK,OAAO,4BAA4B,0BAA0B,WAAW,wCAAwC,aAAa,6BAA6B,cAAc,gBAAgB,0DAA0D,cAAc,4BAA4B,aAAa,sBAAsB,0BAA0B,+CAA+C,+CAA+C,oDAAoD,8CAA8C,6CAA6C,0DAA0D,+CAA+C,uDAAuD,0DAA0D,6CAA6C,0DAA0D,gEAAgE,aAAa,4CAA4C,yBAAyB,gCAAgC,oBAAoB,kBAAkB,YAAY,2BAA2B,KAAK,oEAAoE,QAAQ,wEAAwE,GAAG,6BAA6B,wCAAwC,UAAU,eAAe,mBAAmB,kBAAkB,aAAa,uDAAuD,sBAAsB,8DAA8D,aAAa,aAAa,WAAW,sBAAsB,sBAAsB,mBAAmB,8LAA8L,EAAE,yBAAyB,kBAAkB,sBAAsB,YAAY,4BAA4B,KAAK,4BAA4B,oBAAoB,0DAA0D,wBAAwB,0DAA0D,wCAAwC,wBAAwB,uCAAuC,wBAAwB,KAAK,EAAE,+BAA+B,8BAA8B,SAAS,4CAA4C,sBAAsB,KAAK,8BAA8B,SAAS,iBAAiB,2CAA2C,cAAc,sBAAsB,2CAA2C,sBAAsB,yBAAyB,oCAAoC,0BAA0B,oBAAoB,wEAAwE,KAAK,2CAA2C,uBAAuB,6CAA6C,sDAAsD,sDAAsD,oDAAoD,kDAAkD,sDAAsD,qDAAqD,wEAAwE,KAAK,sCAAsC,aAAa,iBAAiB,UAAU,4BAA4B,MAAM,cAAc,qBAAqB,mBAAmB,eAAe,kBAAkB,iBAAiB,iBAAiB,KAAK,kBAAkB,iBAAiB,8BAA8B,uBAAuB,4BAA4B,KAAK,4BAA4B,eAAe,YAAY,2BAA2B,KAAK,2BAA2B,kBAAkB,4BAA4B,iBAAiB,iCAAiC,0BAA0B,KAAK,4BAA4B,sBAAsB,mBAAmB,IAAI,qBAAqB,mBAAmB,cAAc,EAAE,mBAAmB,IAAI,EAAE,mBAAmB,sBAAsB,gCAAgC,+BAA+B,oBAAoB,aAAa,mBAAmB,wDAAwD,YAAY,sCAAsC,kBAAkB,gBAAgB,YAAY,8BAA8B,KAAK,8BAA8B,+BAA+B,2BAA2B,kBAAkB,SAAS,aAAa,UAAU,YAAY,4BAA4B,KAAK,4BAA4B,iCAAiC,2CAA2C,WAAW,kBAAkB,gBAAgB,QAAQ,YAAY,8BAA8B,KAAK,8BAA8B,+BAA+B,2BAA2B,aAAa,4BAA4B,KAAK,6BAA6B,kBAAkB,SAAS,kEAAkE,6BAA6B,SAAS,uCAAuC,qBAAqB,sBAAsB,iBAAiB,qCAAqC,cAAc,EAAE,qEAAqE,oCAAoC,uEAAuE,2CAA2C,0BAA0B,IAAI,IAAI,aAAa,IAAI,KAAK,wDAAwD,IAAI,4DAA4D,IAAI,mCAAmC,IAAI,KAAK,qCAAqC,eAAe,EAAE,wEAAwE,qCAAqC,yEAAyE,gEAAgE,yDAAyD,mCAAmC,aAAa,aAAa,EAAE,iCAAiC,aAAa,cAAc,oBAAoB,aAAa,WAAW,qDAAqD,gDAAgD,YAAY,SAAS,eAAe,mBAAmB,iBAAiB,0BAA0B,EAAE,gCAAgC,6BAA6B,mCAAmC,KAAK,uBAAuB,wBAAwB,kCAAkC,WAAW,iBAAiB,4BAA4B,mEAAmE,0BAA0B,YAAY,8BAA8B,KAAK,8BAA8B,+BAA+B,qCAAqC,2BAA2B,SAAS,kBAAkB,SAAS,uBAAuB,2BAA2B,QAAQ,oCAAoC,yBAAyB,UAAU,mEAAmE,8CAA8C,MAAM,2CAA2C,8CAA8C,MAAM,qCAAqC,2CAA2C,MAAM,8BAA8B,6CAA6C,MAAM,gBAAgB,uBAAuB,OAAO,KAAK,QAAQ,KAAK,2CAA2C,MAAM,aAAa,KAAK,uBAAuB,OAAO,KAAK,SAAS,cAAc,iIAAiI,qBAAqB,yBAAyB,uBAAuB,6CAA6C,sDAAsD,sDAAsD,oDAAoD,kDAAkD,sDAAsD,qDAAqD,kEAAkE,iBAAiB,kBAAkB,gCAAgC,iBAAiB,KAAK,iBAAiB,iCAAiC,0BAA0B,KAAK,2BAA2B,iBAAiB,wCAAwC,gDAAgD,cAAc,uBAAuB,aAAa,yBAAyB,QAAQ,mEAAmE,0BAA0B,oCAAoC,WAAW,mCAAmC,6BAA6B,oDAAoD,aAAa,wDAAwD,mDAAmD,sBAAsB,qBAAqB,YAAY,wCAAwC,cAAc,aAAa,6CAA6C,sBAAsB,mBAAmB,KAAK,EAAE,uBAAuB,SAAS,2CAA2C,4CAA4C,4CAA4C,oDAAoD,qCAAqC,kBAAkB,oBAAoB,iBAAiB,aAAa,oBAAoB,iBAAiB,aAAa,uBAAuB,oCAAoC,cAAc,0EAA0E,mBAAmB,sCAAsC,yBAAyB,sCAAsC,sBAAsB,yBAAyB,sCAAsC,KAAK,EAAE,mBAAmB,iEAAiE,iBAAiB,aAAa,WAAW,iBAAiB,WAAW,oCAAoC,6BAA6B,MAAM,iBAAiB,IAAI,KAAK,IAAI,mBAAmB,wMAAwM,+BAA+B,cAAc,yEAAyE,EAAE,mCAAmC,UAAU,sBAAsB,UAAU,KAAK,EAAE,yBAAyB,qCAAqC,0BAA0B,EAAE,mCAAmC,EAAE,2BAA2B,wBAAwB,IAAI,uCAAuC,gDAAgD,wDAAwD,aAAa,iBAAiB,kBAAkB,mEAAmE,wDAAwD,aAAa,iBAAiB,mBAAmB,oEAAoE,QAAQ,gBAAgB,gBAAgB,mBAAmB,mBAAmB,aAAa,cAAc,EAAE,aAAa,cAAc,EAAE,mBAAmB,qCAAqC,eAAe,EAAE,wEAAwE,qCAAqC,yEAAyE,yDAAyD,mCAAmC,aAAa,EAAE,mBAAmB,IAAI,EAAE,4BAA4B,4BAA4B,qBAAqB,UAAU,mEAAmE,MAAM,2CAA2C,MAAM,qCAAqC,MAAM,8BAA8B,MAAM,SAAS,sCAAsC,WAAW,eAAe,iFAAiF,MAAM,SAAS,oBAAoB,8BAA8B,cAAc,YAAY,cAAc,EAAE,MAAM,UAAU,SAAS,+BAA+B,WAAW,SAAS,UAAU,yFAAyF,MAAM,8DAA8D,MAAM,+EAA+E,MAAM,0EAA0E,MAAM,SAAS,6BAA6B,WAAW,iBAAiB,yBAAyB,oBAAoB,YAAY,KAAK,SAAS,0BAA0B,kBAAkB,uBAAuB,eAAe,2CAA2C,kBAAkB,4BAA4B,OAAO,kBAAkB,OAAO,mBAAmB,OAAO,mBAAmB,iBAAiB,YAAY,QAAQ,+BAA+B,gEAAgE,aAAa,iCAAiC,kCAAkC,mDAAmD,OAAO,mCAAmC,uBAAuB,mBAAmB,0BAA0B,4BAA4B,uBAAuB,yEAAyE,QAAQ,0EAA0E,iIAAiI,KAAK,gIAAgI,kCAAkC,mEAAmE,kBAAkB,SAAS,kBAAkB,YAAY,WAAW,KAAK,WAAW,eAAe,KAAK,mHAAmH,UAAU,qEAAqE,OAAO,UAAU,+BAA+B,6FAA6F,8BAA8B,OAAO,KAAK,6FAA6F,oBAAoB,aAAa,YAAY,MAAM,YAAY,UAAU,kCAAkC,gCAAgC,aAAa,aAAa,MAAM,gBAAgB,eAAe,KAAK,kBAAkB,UAAU,gCAAgC,KAAK,2BAA2B,aAAa,YAAY,MAAM,YAAY,yBAAyB,SAAS,wBAAwB,gBAAgB,uBAAuB,SAAS,SAAS,OAAO,aAAa,KAAK,MAAM,+BAA+B,cAAc,iBAAiB,aAAa,iBAAiB,aAAa,kEAAkE,eAAe,qCAAqC,2BAA2B,mBAAmB,sEAAsE,WAAW,OAAO,uDAAuD,mIAAmI,0IAA0I,QAAQ,QAAQ,aAAa,KAAK,MAAM,+BAA+B,aAAa,IAAI,IAAI,SAAS,cAAc,iBAAiB,aAAa,iBAAiB,aAAa,MAAM,QAAQ,IAAI,OAAO,SAAS,UAAU,KAAK,uBAAuB,YAAY,qCAAqC,iBAAiB,IAAI,oCAAoC,iBAAiB,IAAI,KAAK,qCAAqC,iBAAiB,IAAI,oCAAoC,iBAAiB,KAAK,KAAK,oCAAoC,gBAAgB,IAAI,mCAAmC,gBAAgB,IAAI,MAAM,iBAAiB,kBAAkB,0BAA0B,YAAY,uCAAuC,uDAAuD,iDAAiD,UAAU,wBAAwB,yBAAyB,kBAAkB,oBAAoB,gCAAgC,qBAAqB,sBAAsB,oBAAoB,sCAAsC,4CAA4C,QAAQ,eAAe,IAAI,mDAAmD,uBAAuB,wBAAwB,wBAAwB,yBAAyB,SAAS,KAAK,kDAAkD,iCAAiC,8DAA8D,MAAM,yFAAyF,qBAAqB,iBAAiB,oBAAoB,gBAAgB,EAAE,qFAAqF,qCAAqC,sBAAsB,yCAAyC,WAAW,KAAK,KAAK,MAAM,oCAAoC,KAAK,qBAAqB,kBAAkB,aAAa,aAAa,MAAM,aAAa,YAAY,sBAAsB,kCAAkC,wEAAwE,wEAAwE,QAAQ,cAAc,8FAA8F,+FAA+F,QAAQ,QAAQ,aAAa,KAAK,MAAM,gCAAgC,4DAA4D,OAAO,eAAe,kBAAkB,cAAc,kBAAkB,cAAc,MAAM,QAAQ,IAAI,qFAAqF,cAAc,yCAAyC,sCAAsC,uCAAuC,0BAA0B,sCAAsC,aAAa,iCAAiC,SAAS,QAAQ,cAAc,QAAQ,yCAAyC,sBAAsB,SAAS,aAAa,KAAK,MAAM,8BAA8B,eAAe,kBAAkB,cAAc,kBAAkB,cAAc,MAAM,QAAQ,IAAI,eAAe,OAAO,KAAK,KAAK,2CAA2C,0DAA0D,eAAe,EAAE,8DAA8D,oBAAoB,2BAA2B,mBAAmB,eAAe,EAAE,kBAAkB,oCAAoC,EAAE,qCAAqC,EAAE,YAAY,QAAQ,cAAc,QAAQ,OAAO,0BAA0B,4BAA4B,oCAAoC,KAAK,uCAAuC,KAAK,aAAa,qCAAqC,wBAAwB,uDAAuD,yBAAyB,gCAAgC,2CAA2C,6CAA6C,+BAA+B,0CAA0C,iBAAiB,QAAQ,SAAS,2BAA2B,EAAE,4BAA4B,EAAE,IAAI,KAAK,OAAO,kBAAkB,EAAE,mBAAmB,EAAE,0BAA0B,sBAAsB,mBAAmB,2BAA2B,qBAAqB,EAAE,oBAAoB,2BAA2B,oBAAoB,EAAE,cAAc,yBAAyB,EAAE,0BAA0B,EAAE,4BAA4B,wBAAwB,mCAAmC,iCAAiC,cAAc,0CAA0C,KAAK,8CAA8C,wCAAwC,KAAK,cAAc,4CAA4C,yCAAyC,KAAK,gDAAgD,2CAA2C,KAAK,cAAc,4CAA4C,yCAAyC,KAAK,gDAAgD,0CAA0C,kEAAkE,0CAA0C,8BAA8B,qBAAqB,QAAQ,cAAc,WAAW,gDAAgD,UAAU,qBAAqB,gCAAgC,yDAAyD,KAAK,0EAA0E,8DAA8D,OAAO,2CAA2C,sCAAsC,wBAAwB,KAAK,6CAA6C,MAAM,WAAW,2CAA2C,mBAAmB,WAAW,qBAAqB,mCAAmC,yCAAyC,wDAAwD,QAAQ,+DAA+D,IAAI,KAAK,wBAAwB,sCAAsC,sBAAsB,MAAM,WAAW,uBAAuB,OAAO,YAAY,eAAe,KAAK,MAAM,OAAO,KAAK,KAAK,KAAK,aAAa,cAAc,QAAQ,SAAS,mCAAmC,IAAI,WAAW,WAAW,KAAK,MAAM,yBAAyB,qBAAqB,+EAA+E,KAAK,sCAAsC,4BAA4B,oCAAoC,0BAA0B,wCAAwC,iCAAiC,8CAA8C,sCAAsC,4CAA4C,sCAAsC,yCAAyC,oCAAoC,0BAA0B,0BAA0B,oBAAoB,wCAAwC,wBAAwB,iCAAiC,iFAAiF,kBAAkB,qBAAqB,qBAAqB,iBAAiB,kBAAkB,mBAAmB,oBAAoB,6DAA6D,KAAK,yDAAyD,+CAA+C,kBAAkB,qBAAqB,qBAAqB,iBAAiB,kBAAkB,mBAAmB,oBAAoB,8DAA8D,KAAK,yDAAyD,+CAA+C,kBAAkB,qBAAqB,qBAAqB,iBAAiB,kBAAkB,mBAAmB,oBAAoB,6DAA6D,qFAAqF,gCAAgC,8BAA8B,sDAAsD,kBAAkB,qBAAqB,qBAAqB,iBAAiB,mDAAmD,MAAM,QAAQ,cAAc,eAAe,MAAM,aAAa,yCAAyC,oBAAoB,EAAE,KAAK,2BAA2B,gDAAgD,sDAAsD,sBAAsB,+BAA+B,sBAAsB,+BAA+B,+BAA+B,uBAAuB,uBAAuB,cAAc,gCAAgC,oBAAoB,sCAAsC,wCAAwC,kCAAkC,aAAa,0DAA0D,6EAA6E,oBAAoB,aAAa,KAAK,MAAM,aAAa,YAAY,4BAA4B,kEAAkE,wEAAwE,MAAM,eAAe,oCAAoC,sBAAsB,0CAA0C,KAAK,aAAa,yCAAyC,iBAAiB,EAAE,KAAK,wBAAwB,iDAAiD,eAAe,iDAAiD,kCAAkC,UAAU,uCAAuC,UAAU,wCAAwC,sBAAsB,+CAA+C,kBAAkB,2BAA2B,oBAAoB,eAAe,mBAAmB,kBAAkB,uBAAuB,uBAAuB,MAAM,oBAAoB,yBAAyB,uDAAuD,EAAE,kBAAkB,iBAAiB,4BAA4B,wBAAwB,sCAAsC,SAAS,gCAAgC,wBAAwB,aAAa,OAAO,aAAa,OAAO,qBAAqB,OAAO,cAAc,OAAO,sCAAsC,iCAAiC,mCAAmC,QAAQ,wBAAwB,oCAAoC,4CAA4C,oDAAoD,wCAAwC,WAAW,WAAW,2BAA2B,mCAAmC,4BAA4B,YAAY,0CAA0C,qBAAqB,uBAAuB,WAAW,qBAAqB,KAAK,qBAAqB,6BAA6B,gBAAgB,mBAAmB,iBAAiB,gBAAgB,yDAAyD,gBAAgB,OAAO,kCAAkC,MAAM,EAAE,mBAAmB,yBAAyB,QAAQ,WAAW,KAAK,OAAO,oBAAoB,WAAW,IAAI,KAAK,mCAAmC,WAAW,IAAI,KAAK,uBAAuB,0BAA0B,4BAA4B,cAAc,2BAA2B,oCAAoC,4CAA4C,EAAE,iCAAiC,QAAQ,uCAAuC,gBAAgB,IAAI,iBAAiB,KAAK,EAAE,oBAAoB,IAAI,mCAAmC,IAAI,SAAS,kCAAkC,WAAW,SAAS,YAAY,sBAAsB,OAAO,0CAA0C,0CAA0C,wCAAwC,YAAY,gDAAgD,OAAO,yEAAyE,0EAA0E,wEAAwE,kCAAkC,0CAA0C,eAAe,YAAY,0BAA0B,wBAAwB,wBAAwB,MAAM,sBAAsB,WAAW,iBAAiB,oBAAoB,qBAAqB,qBAAqB,uBAAuB,sBAAsB,kEAAkE,uBAAuB,cAAc,uDAAuD,sDAAsD,qBAAqB,uBAAuB,EAAE,QAAQ,8BAA8B,+BAA+B,QAAQ,KAAK,MAAM,+EAA+E,sEAAsE,8BAA8B,qCAAqC,4BAA4B,mBAAmB,sCAAsC,mBAAmB,UAAU,QAAQ,4BAA4B,cAAc,SAAS,2BAA2B,iBAAiB,0DAA0D,sBAAsB,2DAA2D,iDAAiD,gDAAgD,QAAQ,QAAQ,yBAAyB,0BAA0B,8CAA8C,yBAAyB,YAAY,KAAK,oCAAoC,KAAK,4BAA4B,kCAAkC,yEAAyE,4EAA4E,qBAAqB,mBAAmB,oBAAoB,MAAM,mBAAmB,oBAAoB,eAAe,EAAE,+BAA+B,kCAAkC,0CAA0C,eAAe,YAAY,4BAA4B,0BAA0B,yBAAyB,kBAAkB,mBAAmB,aAAa,qBAAqB,QAAQ,qCAAqC,WAAW,aAAa,yCAAyC,wCAAwC,YAAY,SAAS,WAAW,wDAAwD,KAAK,+EAA+E,IAAI,wBAAwB,uBAAuB,6BAA6B,0BAA0B,yCAAyC,8CAA8C,WAAW,EAAE,EAAE,kCAAkC,0CAA0C,eAAe,YAAY,eAAe,kDAAkD,wBAAwB,wBAAwB,MAAM,sBAAsB,WAAW,oBAAoB,oBAAoB,qBAAqB,uBAAuB,sBAAsB,kBAAkB,mBAAmB,0BAA0B,qBAAqB,0BAA0B,iDAAiD,gDAAgD,yBAAyB,qBAAqB,QAAQ,4BAA4B,YAAY,MAAM,UAAU,cAAc,SAAS,2BAA2B,iBAAiB,0DAA0D,sBAAsB,2DAA2D,mBAAmB,QAAQ,QAAQ,yBAAyB,0BAA0B,8CAA8C,4BAA4B,2BAA2B,uBAAuB,QAAQ,QAAQ,yBAAyB,wBAAwB,KAAK,uBAAuB,KAAK,QAAQ,2BAA2B,4BAA4B,2BAA2B,0BAA0B,EAAE,6BAA6B,WAAW,yBAAyB,uCAAuC,iBAAiB,OAAO,cAAc,EAAE,SAAS,4CAA4C,WAAW,SAAS,+BAA+B,oCAAoC,uBAAuB,oDAAoD,WAAW,IAAI,mCAAmC,SAAS,kBAAkB,YAAY,8BAA8B,QAAQ,4BAA4B,aAAa,yDAAyD,qDAAqD,sCAAsC,iCAAiC,GAAG,2BAA2B,aAAa,KAAK,8BAA8B,2BAA2B,4BAA4B,aAAa,uDAAuD,sCAAsC,sCAAsC,iCAAiC,GAAG,6BAA6B,EAAE,SAAS,sCAAsC,WAAW,QAAQ,oBAAoB,yBAAyB,sBAAsB,2BAA2B,iCAAiC,gBAAgB,sCAAsC,4BAA4B,uBAAuB,qEAAqE,eAAe,wBAAwB,mCAAmC,eAAe,wBAAwB,iDAAiD,oBAAoB,YAAY,UAAU,oBAAoB,kBAAkB,WAAW,sEAAsE,oCAAoC,2CAA2C,qBAAqB,sBAAsB,0BAA0B,mCAAmC,iCAAiC,4CAA4C,yCAAyC,uBAAuB,gBAAgB,eAAe,wDAAwD,qDAAqD,oBAAoB,+CAA+C,eAAe,oBAAoB,WAAW,2BAA2B,0EAA0E,4CAA4C,yCAAyC,uBAAuB,4BAA4B,yBAAyB,8BAA8B,wBAAwB,8BAA8B,6BAA6B,wBAAwB,WAAW,MAAM,YAAY,gDAAgD,OAAO,uBAAuB,uBAAuB,MAAM,uDAAuD,sDAAsD,KAAK,0CAA0C,aAAa,EAAE,gCAAgC,uBAAuB,YAAY,eAAe,YAAY,cAAc,cAAc,cAAc,MAAM,sBAAsB,WAAW,UAAU,UAAU,iBAAiB,cAAc,0BAA0B,uBAAuB,yDAAyD,qBAAqB,mBAAmB,YAAY,EAAE,gCAAgC,iBAAiB,YAAY,2BAA2B,YAAY,aAAa,YAAY,eAAe,YAAY,oBAAoB,cAAc,cAAc,MAAM,sBAAsB,WAAW,iBAAiB,UAAU,WAAW,GAAG,cAAc,gDAAgD,4CAA4C,0CAA0C,aAAa,iCAAiC,+CAA+C,0DAA0D,EAAE,wBAAwB,kCAAkC,iCAAiC,WAAW,uBAAuB,YAAY,sBAAsB,OAAO,yCAAyC,yCAAyC,uCAAuC,MAAM,4EAA4E,6EAA6E,2EAA2E,kCAAkC,0CAA0C,qDAAqD,uBAAuB,sCAAsC,qBAAqB,+CAA+C,4BAA4B,wCAAwC,cAAc,IAAI,KAAK,cAAc,wCAAwC,cAAc,IAAI,KAAK,cAAc,cAAc,MAAM,iCAAiC,WAAW,UAAU,KAAK,gBAAgB,qDAAqD,UAAU,WAAW,MAAM,WAAW,oBAAoB,oBAAoB,2BAA2B,KAAK,SAAS,4BAA4B,MAAM,eAAe,KAAK,wCAAwC,2BAA2B,MAAM,kBAAkB,gCAAgC,cAAc,EAAE,kCAAkC,0CAA0C,yCAAyC,sCAAsC,uCAAuC,uBAAuB,OAAO,4BAA4B,uBAAuB,OAAO,mDAAmD,qCAAqC,+CAA+C,gDAAgD,8BAA8B,gBAAgB,yCAAyC,6DAA6D,WAAW,uEAAuE,WAAW,yEAAyE,SAAS,QAAQ,kBAAkB,WAAW,uCAAuC,8CAA8C,wCAAwC,6CAA6C,uEAAuE,iFAAiF,sCAAsC,2CAA2C,4CAA4C,8CAA8C,mDAAmD,iDAAiD,yCAAyC,2CAA2C,4CAA4C,kBAAkB,WAAW,mDAAmD,KAAK,+BAA+B,QAAQ,sCAAsC,KAAK,0CAA0C,KAAK,4CAA4C,KAAK,0CAA0C,iBAAiB,iBAAiB,qBAAqB,QAAQ,uCAAuC,gBAAgB,iEAAiE,6BAA6B,4BAA4B,mBAAmB,6GAA6G,KAAK,gCAAgC,gBAAgB,gBAAgB,qBAAqB,sBAAsB,EAAE,iBAAiB,kDAAkD,mDAAmD,gBAAgB,OAAO,4BAA4B,0CAA0C,UAAU,iBAAiB,oFAAoF,qBAAqB,oBAAoB,yBAAyB,4BAA4B,OAAO,iBAAiB,eAAe,OAAO,qBAAqB,+CAA+C,MAAM,QAAQ,IAAI,oFAAoF,yCAAyC,8CAA8C,8BAA8B,UAAU,8BAA8B,4BAA4B,wBAAwB,gDAAgD,2CAA2C,YAAY,oBAAoB,KAAK,wDAAwD,0CAA0C,OAAO,uCAAuC,mCAAmC,wBAAwB,YAAY,qBAAqB,oBAAoB,yBAAyB,4BAA4B,uBAAuB,+BAA+B,kCAAkC,EAAE,KAAK,yBAAyB,IAAI,+CAA+C,WAAW,8CAA8C,qCAAqC,qBAAqB,6CAA6C,kBAAkB,KAAK,yCAAyC,wDAAwD,KAAK,oCAAoC,mDAAmD,UAAU,kCAAkC,0CAA0C,uDAAuD,yCAAyC,YAAY,IAAI,GAAG,gCAAgC,wBAAwB,QAAQ,uEAAuE,kCAAkC,IAAI,SAAS,6DAA6D,OAAO,WAAW,YAAY,0CAA0C,mBAAmB,6EAA6E,QAAQ,qEAAqE,uBAAuB,IAAI,+BAA+B,qCAAqC,4CAA4C,2CAA2C,gBAAgB,2CAA2C,gBAAgB,iBAAiB,KAAK,qCAAqC,cAAc,KAAK,gBAAgB,EAAE,8DAA8D,gBAAgB,OAAO,QAAQ,wCAAwC,QAAQ,0CAA0C,cAAc,YAAY,iBAAiB,iBAAiB,6EAA6E,qCAAqC,0CAA0C,KAAK,+BAA+B,gBAAgB,OAAO,yCAAyC,2CAA2C,qBAAqB,KAAK,MAAM,2CAA2C,gBAAgB,aAAa,2CAA2C,gBAAgB,aAAa,kCAAkC,WAAW,cAAc,KAAK,gDAAgD,aAAa,gBAAgB,wCAAwC,KAAK,SAAS,KAAK,IAAI,0CAA0C,IAAI,QAAQ,sCAAsC,2BAA2B,eAAe,WAAW,oBAAoB,gBAAgB,oBAAoB,gBAAgB,mBAAmB,aAAa,qBAAqB,iCAAiC,gBAAgB,mBAAmB,cAAc,8BAA8B,mBAAmB,QAAQ,EAAE,8BAA8B,oCAAoC,2BAA2B,MAAM,mBAAmB,wBAAwB,kCAAkC,iCAAiC,WAAW,mBAAmB,OAAO,4CAA4C,2CAA2C,qCAAqC,iEAAiE,sEAAsE,oBAAoB,WAAW,uBAAuB,QAAQ,QAAQ,SAAS,wBAAwB,QAAQ,kBAAkB,kBAAkB,0CAA0C,mBAAmB,qCAAqC,oDAAoD,iBAAiB,KAAK,oDAAoD,iBAAiB,KAAK,2CAA2C,QAAQ,+BAA+B,2CAA2C,gBAAgB,2CAA2C,gBAAgB,KAAK,KAAK,gCAAgC,gCAAgC,iBAAiB,KAAK,cAAc,mDAAmD,iBAAiB,iBAAiB,iBAAiB,KAAK,kBAAkB,EAAE,cAAc,YAAY,WAAW,KAAK,6BAA6B,YAAY,WAAW,KAAK,uCAAuC,KAAK,QAAQ,YAAY,wCAAwC,wCAAwC,KAAK,+BAA+B,YAAY,WAAW,KAAK,8BAA8B,wBAAwB,QAAQ,sBAAsB,oBAAoB,0CAA0C,8BAA8B,UAAU,QAAQ,0CAA0C,4BAA4B,mBAAmB,0BAA0B,mCAAmC,eAAe,uEAAuE,UAAU,4CAA4C,8BAA8B,mCAAmC,6BAA6B,qBAAqB,wDAAwD,mBAAmB,cAAc,yCAAyC,aAAa,iBAAiB,iBAAiB,yCAAyC,mBAAmB,yBAAyB,wBAAwB,gBAAgB,qBAAqB,iBAAiB,eAAe,uCAAuC,2BAA2B,iBAAiB,YAAY,sBAAsB,kBAAkB,6EAA6E,qCAAqC,0CAA0C,KAAK,+BAA+B,gBAAgB,OAAO,yCAAyC,2CAA2C,gBAAgB,2CAA2C,gBAAgB,kCAAkC,KAAK,MAAM,2CAA2C,gBAAgB,2CAA2C,gBAAgB,6EAA6E,iCAAiC,WAAW,aAAa,KAAK,gDAAgD,wCAAwC,KAAK,SAAS,KAAK,IAAI,0CAA0C,IAAI,aAAa,gBAAgB,QAAQ,sCAAsC,2BAA2B,eAAe,WAAW,oBAAoB,gBAAgB,oBAAoB,gBAAgB,mBAAmB,uBAAuB,aAAa,qBAAqB,gBAAgB,wBAAwB,yBAAyB,mBAAmB,YAAY,YAAY,gHAAgH,YAAY,kDAAkD,wBAAwB,OAAO,OAAO,YAAY,yCAAyC,eAAe,EAAE,KAAK,kBAAkB,eAAe,KAAK,MAAM,mBAAmB,YAAY,4DAA4D,oBAAoB,gBAAgB,oBAAoB,YAAY,SAAS,aAAa,iFAAiF,cAAc,eAAe,aAAa,6EAA6E,aAAa,0FAA0F,cAAc,eAAe,aAAa,8EAA8E,aAAa,2FAA2F,cAAc,eAAe,aAAa,+EAA+E,aAAa,uBAAuB,YAAY,mBAAmB,kBAAkB,mBAAmB,qBAAqB,sBAAsB,UAAU,2BAA2B,oBAAoB,oCAAoC,uCAAuC,sCAAsC,YAAY,kEAAkE,oCAAoC,WAAW,mCAAmC,qBAAqB,YAAY,kBAAkB,gBAAgB,kBAAkB,mBAAmB,EAAE,wBAAwB,YAAY,kBAAkB,sBAAsB,OAAO,+CAA+C,6BAA6B,iBAAiB,uBAAuB,YAAY,wBAAwB,QAAQ,+BAA+B,mBAAmB,oCAAoC,2BAA2B,MAAM,iCAAiC,WAAW,UAAU,KAAK,mBAAmB,mBAAmB,0BAA0B,6BAA6B,KAAK,mBAAmB,uBAAuB,YAAY,cAAc,UAAU,IAAI,aAAa,aAAa,mBAAmB,0BAA0B,6BAA6B,aAAa,KAAK,mBAAmB,wBAAwB,KAAK,mBAAmB,YAAY,mCAAmC,gBAAgB,yBAAyB,EAAE,gBAAgB,mBAAmB,KAAK,eAAe,+CAA+C,eAAe,WAAW,EAAE,QAAQ,8BAA8B,KAAK,4BAA4B,kBAAkB,0BAA0B,WAAW,gCAAgC,8BAA8B,+BAA+B,6BAA6B,8BAA8B,4BAA4B,sBAAsB,4BAA4B,gCAAgC,uBAAuB,OAAO,QAAQ,YAAY,8BAA8B,KAAK,mCAAmC,KAAK,sDAAsD,WAAW,iHAAiH,UAAU,iDAAiD,8DAA8D,+CAA+C,YAAY,2BAA2B,KAAK,YAAY,2BAA2B,KAAK,2BAA2B,cAAc,UAAU,SAAS,2BAA2B,YAAY,aAAa,kBAAkB,QAAQ,YAAY,kBAAkB,KAAK,kBAAkB,cAAc,cAAc,WAAW,iDAAiD,KAAK,SAAS,UAAU,aAAa,SAAS,yBAAyB,UAAU,wDAAwD,mBAAmB,yBAAyB,0EAA0E,YAAY,uBAAuB,UAAU,yCAAyC,sBAAsB,yBAAyB,iCAAiC,YAAY,eAAe,gCAAgC,uBAAuB,OAAO,YAAY,2BAA2B,KAAK,2BAA2B,cAAc,2BAA2B,YAAY,aAAa,kBAAkB,QAAQ,YAAY,kBAAkB,KAAK,kBAAkB,cAAc,cAAc,WAAW,iDAAiD,KAAK,SAAS,UAAU,aAAa,SAAS,yBAAyB,gBAAgB,uBAAuB,sBAAsB,yBAAyB,mCAAmC,mCAAmC,WAAW,mBAAmB,eAAe,gCAAgC,gCAAgC,sBAAsB,+BAA+B,2BAA2B,4BAA4B,uCAAuC,iBAAiB,YAAY,mBAAmB,OAAO,IAAI,MAAM,kBAAkB,YAAY,WAAW,KAAK,kBAAkB,SAAS,0BAA0B,+CAA+C,iBAAiB,iBAAiB,yBAAyB,wBAAwB,QAAQ,SAAS,kBAAkB,kBAAkB,kBAAkB,YAAY,WAAW,KAAK,oBAAoB,SAAS,UAAU,aAAa,oBAAoB,aAAa,oDAAoD,mBAAmB,KAAK,IAAI,mEAAmE,kBAAkB,YAAY,WAAW,KAAK,gCAAgC,cAAc,IAAI,kBAAkB,YAAY,WAAW,KAAK,gCAAgC,cAAc,IAAI,0BAA0B,sCAAsC,8CAA8C,6BAA6B,kBAAkB,gJAAgJ,eAAe,MAAM,iEAAiE,sCAAsC,8CAA8C,6BAA6B,kCAAkC,sCAAsC,kCAAkC,0CAA0C,SAAS,KAAK,sCAAsC,8BAA8B,6BAA6B,qBAAqB,iEAAiE,gJAAgJ,eAAe,sCAAsC,8BAA8B,6BAA6B,kCAAkC,sCAAsC,kCAAkC,yCAAyC,WAAW,YAAY,2CAA2C,wBAAwB,OAAO,SAAS,uCAAuC,YAAY,SAAS,mBAAmB,kBAAkB,wCAAwC,SAAS,MAAM,OAAO,eAAe,SAAS,yCAAyC,WAAW,OAAO,sBAAsB,WAAW,yBAAyB,SAAS,iBAAiB,yDAAyD,6BAA6B,WAAW,UAAU,OAAO,sBAAsB,WAAW,yBAAyB,MAAM,mHAAmH,WAAW,KAAK,oBAAoB,WAAW,YAAY,wCAAwC,aAAa,kBAAkB,WAAW,QAAQ,yBAAyB,mBAAmB,UAAU,yCAAyC,aAAa,GAAG,+BAA+B,UAAU,yHAAyH,QAAQ,gBAAgB,IAAI,MAAM,SAAS,+BAA+B,QAAQ,UAAU,kBAAkB,MAAM,kBAAkB,MAAM,sBAAsB,MAAM,kBAAkB,MAAM,0BAA0B,MAAM,kBAAkB,MAAM,wBAAwB,MAAM,sBAAsB,MAAM,oBAAoB,kBAAkB,MAAM,+BAA+B,gBAAgB,IAAI,OAAO,SAAS,qCAAqC,qBAAqB,yBAAyB,uBAAuB,kCAAkC,wCAAwC,YAAY,IAAI,KAAK,qCAAqC,8BAA8B,8CAA8C,sCAAsC,sCAAsC,kCAAkC,wCAAwC,QAAQ,YAAY,IAAI,KAAK,qCAAqC,8BAA8B,MAAM,iBAAiB,uBAAuB,4BAA4B,WAAW,KAAK,4BAA4B,8BAA8B,wCAAwC,6CAA6C,QAAQ,kCAAkC,4CAA4C,aAAa,iDAAiD,IAAI,iCAAiC,uDAAuD,oDAAoD,WAAW,kBAAkB,2BAA2B,YAAY,IAAI,KAAK,8BAA8B,kCAAkC,cAAc,iBAAiB,aAAa,iBAAiB,aAAa,QAAQ,iBAAiB,0DAA0D,sCAAsC,oBAAoB,cAAc,yBAAyB,YAAY,gBAAgB,cAAc,qBAAqB,KAAK,qBAAqB,SAAS,kCAAkC,WAAW,uBAAuB,4BAA4B,KAAK,KAAK,wBAAwB,iBAAiB,oCAAoC,gDAAgD,qBAAqB,uBAAuB,gCAAgC,oCAAoC,0BAA0B,uEAAuE,4BAA4B,yDAAyD,8CAA8C,0DAA0D,gCAAgC,oBAAoB,WAAW,iCAAiC,YAAY,2BAA2B,KAAK,+CAA+C,uDAAuD,0DAA0D,oCAAoC,uCAAuC,+DAA+D,sCAAsC,sCAAsC,oCAAoC,+BAA+B,+BAA+B,+BAA+B,uCAAuC,uCAAuC,qCAAqC,+BAA+B,+BAA+B,+BAA+B,iBAAiB,gBAAgB,YAAY,8BAA8B,KAAK,8BAA8B,qCAAqC,2BAA2B,eAAe,+BAA+B,wBAAwB,gDAAgD,eAAe,qEAAqE,mDAAmD,2EAA2E,sDAAsD,qCAAqC,2BAA2B,gCAAgC,gCAAgC,WAAW,kCAAkC,2BAA2B,gCAAgC,gCAAgC,WAAW,mBAAmB,oCAAoC,wCAAwC,uCAAuC,2CAA2C,qCAAqC,wCAAwC,oCAAoC,wCAAwC,oBAAoB,qCAAqC,qCAAqC,oBAAoB,oBAAoB,yBAAyB,yCAAyC,gBAAgB,0CAA0C,gDAAgD,aAAa,0CAA0C,6DAA6D,OAAO,mGAAmG,OAAO,UAAU,oBAAoB,YAAY,KAAK,iBAAiB,wBAAwB,sBAAsB,0BAA0B,KAAK,gBAAgB,wBAAwB,sBAAsB,0BAA0B,KAAK,iBAAiB,oBAAoB,KAAK,uBAAuB,YAAY,KAAK,kBAAkB,gBAAgB,YAAY,KAAK,cAAc,yBAAyB,qBAAqB,2BAA2B,MAAM,EAAE,2BAA2B,MAAM,EAAE,YAAY,KAAK,oBAAoB,cAAc,eAAe,KAAK,yBAAyB,eAAe,YAAY,YAAY,WAAW,KAAK,+BAA+B,OAAO,OAAO,OAAO,cAAc,cAAc,IAAI,KAAK,kBAAkB,6CAA6C,+BAA+B,wCAAwC,sDAAsD,iCAAiC,qDAAqD,EAAE,oBAAoB,OAAO,wBAAwB,YAAY,KAAK,8BAA8B,KAAK,wBAAwB,YAAY,KAAK,wBAAwB,gCAAgC,KAAK,mBAAmB,mBAAmB,oBAAoB,mBAAmB,2BAA2B,YAAY,EAAE,2BAA2B,YAAY,EAAE,0BAA0B,aAAa,wBAAwB,gBAAgB,iBAAiB,KAAK,qBAAqB,OAAO,KAAK,kBAAkB,MAAM,iEAAiE,KAAK,oEAAoE,eAAe,mBAAmB,0BAA0B,WAAW,EAAE,8BAA8B,WAAW,EAAE,6BAA6B,WAAW,EAAE,iCAAiC,WAAW,EAAE,2BAA2B,WAAW,EAAE,8BAA8B,WAAW,EAAE,0BAA0B,WAAW,EAAE,6BAA6B,WAAW,EAAE,4CAA4C,4BAA4B,yCAAyC,eAAe,EAAE,4CAA4C,eAAe,IAAI,0EAA0E,4EAA4E,0EAA0E,KAAK,uBAAuB,YAAY,KAAK,eAAe,qCAAqC,2BAA2B,cAAc,EAAE,2BAA2B,cAAc,EAAE,+BAA+B,0BAA0B,cAAc,EAAE,8BAA8B,cAAc,EAAE,6BAA6B,cAAc,EAAE,iCAAiC,cAAc,EAAE,2BAA2B,cAAc,EAAE,8BAA8B,cAAc,EAAE,0BAA0B,cAAc,EAAE,6BAA6B,cAAc,EAAE,4CAA4C,4BAA4B,yCAAyC,cAAc,EAAE,4CAA4C,cAAc,IAAI,iBAAiB,6BAA6B,eAAe,mBAAmB,cAAc,EAAE,wBAAwB,qCAAqC,cAAc,GAAG,YAAY,KAAK,8BAA8B,uCAAuC,YAAY,mBAAmB,6BAA6B,QAAQ,IAAI,QAAQ,KAAK,2BAA2B,8CAA8C,QAAQ,IAAI,SAAS,oCAAoC,yBAAyB,mBAAmB,kBAAkB,mBAAmB,sBAAsB,mBAAmB,uCAAuC,iBAAiB,uBAAuB,EAAE,gBAAgB,aAAa,oBAAoB,uBAAuB,aAAa,mBAAmB,mBAAmB,kBAAkB,mBAAmB,oBAAoB,mBAAmB,wBAAwB,qBAAqB,oBAAoB,kBAAkB,uBAAuB,kBAAkB,iBAAiB,qBAAqB,kBAAkB,qBAAqB,qBAAqB,iBAAiB,oBAAoB,oBAAoB,qBAAqB,uBAAuB,wBAAwB,yBAAyB,yBAAyB,qBAAqB,kBAAkB,sBAAsB,qBAAqB,6BAA6B,mBAAmB,qBAAqB,mBAAmB,sBAAsB,0BAA0B,oCAAoC,OAAO,6cAA6c,gCAAgC,YAAY,cAAc,UAAU,8CAA8C,KAAK,0BAA0B,4BAA4B,wBAAwB,+DAA+D,6BAA6B,YAAY,WAAW,qCAAqC,wCAAwC,wCAAwC,8CAA8C,KAAK,iCAAiC,sCAAsC,0CAA0C,sCAAsC,0CAA0C,0CAA0C,kDAAkD,gCAAgC,8BAA8B,KAAK,4BAA4B,oCAAoC,sCAAsC,kCAAkC,kCAAkC,qCAAqC,wCAAwC,oCAAoC,sCAAsC,iCAAiC,gCAAgC,sCAAsC,0CAA0C,uCAAuC,4CAA4C,iCAAiC,gCAAgC,oCAAoC,sCAAsC,oCAAoC,sCAAsC,yCAAyC,gDAAgD,sCAAsC,0CAA0C,kCAAkC,kCAAkC,sCAAsC,0CAA0C,kCAAkC,kCAAkC,qCAAqC,wCAAwC,qCAAqC,wCAAwC,oCAAoC,sCAAsC,sCAAsC,0CAA0C,wCAAwC,8CAA8C,yCAAyC,gDAAgD,0CAA0C,kDAAkD,qCAAqC,wCAAwC,yCAAyC,gDAAgD,sCAAsC,0CAA0C,8CAA8C,0DAA0D,oCAAoC,sCAAsC,sCAAsC,0CAA0C,oCAAoC,sCAAsC,uCAAuC,4CAA4C,gDAAgD,gBAAgB,yBAAyB,uCAAuC,gBAAgB,sEAAsE,oBAAoB,YAAY,iCAAiC,yBAAyB,aAAa,oBAAoB,4BAA4B,oBAAoB,6BAA6B,qBAAqB,sBAAsB,0BAA0B,2BAA2B,mBAAmB,yBAAyB,+BAA+B,YAAY,cAAc,4BAA4B,QAAQ,IAAI,sBAAsB,uBAAuB,4BAA4B,yBAAyB,gCAAgC,qBAAqB,YAAY,aAAa,oCAAoC,aAAa,4BAA4B,0BAA0B,aAAa,YAAY,aAAa,SAAS,0BAA0B,2BAA2B,YAAY,KAAK,oBAAoB,cAAc,wBAAwB,0BAA0B,aAAa,8BAA8B,UAAU,yBAAyB,YAAY,cAAc,0BAA0B,0BAA0B,aAAa,QAAQ,aAAa,0BAA0B,sBAAsB,yBAAyB,YAAY,cAAc,aAAa,0BAA0B,eAAe,eAAe,gBAAgB,aAAa,gBAAgB,yBAAyB,gBAAgB,eAAe,iBAAiB,4BAA4B,2BAA2B,WAAW,oBAAoB,6BAA6B,MAAM,IAAI,YAAY,KAAK,2BAA2B,eAAe,EAAE,kBAAkB,eAAe,sBAAsB,4BAA4B,2BAA2B,uCAAuC,uCAAuC,iCAAiC,qCAAqC,6BAA6B,+BAA+B,sBAAsB,uBAAuB,4BAA4B,mCAAmC,6BAA6B,qCAAqC,uBAAuB,yBAAyB,2BAA2B,iCAAiC,wBAAwB,2BAA2B,2BAA2B,iCAAiC,kBAAkB,cAAc,gCAAgC,kBAAkB,8BAA8B,oBAAoB,wBAAwB,6BAA6B,iBAAiB,kBAAkB,qBAAqB,0BAA0B,iBAAiB,wBAAwB,wBAAwB,2BAA2B,sCAAsC,KAAK,2BAA2B,sCAAsC,KAAK,2BAA2B,kCAAkC,KAAK,kCAAkC,iCAAiC,QAAQ,cAAc,kBAAkB,QAAQ,WAAW,mBAAmB,sDAAsD,eAAe,sBAAsB,yCAAyC,8DAA8D,aAAa,iBAAiB,KAAK,YAAY,IAAI,yCAAyC,MAAM,+GAA+G,yCAAyC,8DAA8D,aAAa,kBAAkB,KAAK,YAAY,IAAI,yCAAyC,OAAO,SAAS,SAAS,QAAQ,SAAS,YAAY,sBAAsB,KAAK,gCAAgC,6BAA6B,kBAAkB,SAAS,qBAAqB,2BAA2B,YAAY,WAAW,KAAK,iBAAiB,iBAAiB,4BAA4B,0CAA0C,0CAA0C,qBAAqB,uFAAuF,MAAM,qBAAqB,KAAK,gDAAgD,KAAK,iCAAiC,KAAK,iCAAiC,KAAK,gCAAgC,cAAc,qCAAqC,YAAY,oCAAoC,sCAAsC,oCAAoC,yBAAyB,OAAO,oBAAoB,cAAc,6BAA6B,YAAY,2BAA2B,KAAK,qBAAqB,2BAA2B,uCAAuC,UAAU,iBAAiB,YAAY,eAAe,YAAY,WAAW,KAAK,WAAW,eAAe,kBAAkB,OAAO,QAAQ,OAAO,QAAQ,mBAAmB,EAAE,8BAA8B,KAAK,iBAAiB,kBAAkB,YAAY,oGAAoG,EAAE,sBAAsB,oBAAoB,4BAA4B,KAAK,WAAW,mBAAmB,kBAAkB,iBAAiB,kDAAkD,iBAAiB,KAAK,YAAY,MAAM,IAAI,IAAI,WAAW,KAAK,MAAM,4CAA4C,4CAA4C,oCAAoC,KAAK,8DAA8D,aAAa,oBAAoB,6BAA6B,oBAAoB,6BAA6B,SAAS,YAAY,sBAAsB,KAAK,iCAAiC,IAAI,OAAO,UAAU,mCAAmC,sBAAsB,KAAK,iBAAiB,wBAAwB,8BAA8B,oBAAoB,6BAA6B,YAAY,sBAAsB,KAAK,iCAAiC,yBAAyB,SAAS,0BAA0B,WAAW,YAAY,kBAAkB,2BAA2B,OAAO,iBAAiB,OAAO,8CAA8C,OAAO,KAAK,QAAQ,qBAAqB,KAAK,iBAAiB,wCAAwC,uBAAuB,8CAA8C,SAAS,uGAAuG,sBAAsB,WAAW,gCAAgC,kFAAkF,0BAA0B,SAAS,2BAA2B,yCAAyC,2BAA2B,cAAc,YAAY,cAAc,EAAE,kBAAkB,YAAY,WAAW,KAAK,iBAAiB,oBAAoB,QAAQ,+BAA+B,iDAAiD,qCAAqC,2BAA2B,yBAAyB,YAAY,KAAK,2BAA2B,yBAAyB,EAAE,iBAAiB,4BAA4B,UAAU,8BAA8B,QAAQ,QAAQ,kBAAkB,OAAO,kBAAkB,OAAO,uBAAuB,SAAS,uBAAuB,SAAS,uBAAuB,SAAS,eAAe,eAAe,qBAAqB,aAAa,UAAU,2CAA2C,UAAU,QAAQ,SAAS,SAAS,8BAA8B,UAAU,QAAQ,SAAS,SAAS,kDAAkD,0BAA0B,OAAO,KAAK,+DAA+D,QAAQ,UAAU,QAAQ,SAAS,SAAS,KAAK,2DAA2D,QAAQ,UAAU,QAAQ,SAAS,SAAS,KAAK,iEAAiE,0BAA0B,8BAA8B,IAAI,QAAQ,UAAU,QAAQ,UAAU,SAAS,QAAQ,UAAU,2BAA2B,gCAAgC,0BAA0B,+BAA+B,MAAM,uEAAuE,uBAAuB,sCAAsC,gCAAgC,WAAW,qBAAqB,WAAW,gCAAgC,IAAI,IAAI,SAAS,kBAAkB,wBAAwB,kBAAkB,oBAAoB,YAAY,WAAW,KAAK,WAAW,gBAAgB,gBAAgB,YAAY,sBAAsB,KAAK,6BAA6B,mCAAmC,oBAAoB,iBAAiB,IAAI,KAAK,qBAAqB,OAAO,KAAK,SAAS,iBAAiB,mBAAmB,gBAAgB,UAAU,cAAc,wBAAwB,6FAA6F,kBAAkB,oBAAoB,YAAY,WAAW,KAAK,WAAW,UAAU,kCAAkC,kBAAkB,UAAU,iBAAiB,YAAY,WAAW,KAAK,WAAW,gBAAgB,eAAe,cAAc,gBAAgB,WAAW,KAAK,IAAI,KAAK,iBAAiB,qBAAqB,YAAY,KAAK,8BAA8B,KAAK,YAAY,6FAA6F,WAAW,kBAAkB,oBAAoB,oBAAoB,iBAAiB,WAAW,0CAA0C,2EAA2E,cAAc,YAAY,WAAW,KAAK,iBAAiB,oBAAoB,SAAS,KAAK,cAAc,KAAK,aAAa,cAAc,YAAY,KAAK,cAAc,YAAY,WAAW,KAAK,sCAAsC,sBAAsB,UAAU,4CAA4C,4BAA4B,0BAA0B,KAAK,SAAS,YAAY,2BAA2B,KAAK,gCAAgC,kBAAkB,2BAA2B,oBAAoB,qBAAqB,uDAAuD,uCAAuC,YAAY,OAAO,YAAY,OAAO,KAAK,+BAA+B,OAAO,+EAA+E,qCAAqC,MAAM,SAAS,gBAAgB,aAAa,iBAAiB,0BAA0B,mBAAmB,mCAAmC,+EAA+E,cAAc,WAAW,kCAAkC,6BAA6B,MAAM,uCAAuC,YAAY,KAAK,YAAY,QAAQ,KAAK,+BAA+B,OAAO,+EAA+E,qCAAqC,MAAM,SAAS,gBAAgB,cAAc,+EAA+E,mCAAmC,OAAO,cAAc,KAAK,cAAc,OAAO,KAAK,mCAAmC,OAAO,mCAAmC,MAAM,SAAS,iBAAiB,UAAU,4BAA4B,iBAAiB,kCAAkC,oCAAoC,aAAa;;;;;;;;;;;;;ACPvl4N;AACA;AACA;AACA;AACA;AACA;;AAEA,aAAa,kCAAkC,EAAE,sCAAsC,0BAA0B,OAAO,8YAA8Y,0GAA0G,8CAA8C,uCAAuC,SAAS,sBAAsB,SAAS,2BAA2B,iDAAiD,wDAAwD,OAAO,gBAAgB,+DAA+D,KAAK,eAAe,0BAA0B,qBAAqB,mBAAmB,kCAAkC,EAAE,oCAAoC,uBAAuB,8FAA8F,uBAAuB,iDAAiD,6BAA6B,gBAAgB,yBAAyB,oCAAoC,kCAAkC,4BAA4B,uBAAuB,kBAAkB,qBAAqB,yCAAyC,cAAc,2BAA2B,4BAA4B,uBAAuB,6CAA6C,6CAA6C,iBAAiB,gBAAgB,mBAAmB,0BAA0B,gBAAgB,6BAA6B,oBAAoB,iBAAiB,cAAc,qBAAqB,yBAAyB,yBAAyB,uBAAuB,sBAAsB,oCAAoC,sCAAsC,kDAAkD,0DAA0D,oBAAoB,wBAAwB,sBAAsB,oBAAoB,oBAAoB,gBAAgB,KAAK,sBAAsB,oBAAoB,sBAAsB,mBAAmB,yDAAyD,6CAA6C,0BAA0B,2CAA2C,iBAAiB,gCAAgC,mBAAmB,0BAA0B,UAAU,cAAc,qCAAqC,gCAAgC,mBAAmB,gBAAgB,GAAG,gCAAgC,IAAI,OAAO,mDAAmD,KAAK,oBAAoB,0BAA0B,uBAAuB,6BAA6B,YAAY,IAAI,KAAK,4CAA4C,yBAAyB,OAAO,mCAAmC,qBAAqB,aAAa,OAAO,WAAW,aAAa,oDAAoD,8BAA8B,2CAA2C,2BAA2B,gEAAgE,mCAAmC,6BAA6B,UAAU,oCAAoC,qCAAqC,gCAAgC,gBAAgB,EAAE,iBAAiB,mBAAmB,gBAAgB,0DAA0D,oBAAoB,uBAAuB,0BAA0B,gBAAgB,6BAA6B,qBAAqB,0CAA0C,kBAAkB,4BAA4B,YAAY,2BAA2B,qBAAqB,qBAAqB,aAAa,SAAS,MAAM,IAAI,uBAAuB,UAAU,SAAS,yBAAyB,iBAAiB,+DAA+D,gBAAgB,gBAAgB,QAAQ,0BAA0B,YAAY,IAAI,KAAK,4CAA4C,4BAA4B,QAAQ,OAAO,kBAAkB,YAAY,SAAS,0BAA0B,wBAAwB,2FAA2F,gEAAgE,OAAO,wBAAwB,6BAA6B,oDAAoD,sDAAsD,mCAAmC,qCAAqC,qCAAqC,uCAAuC,gCAAgC,kCAAkC,mCAAmC,6CAA6C,sBAAsB,6CAA6C,0CAA0C,0EAA0E,iBAAiB,kCAAkC,2BAA2B,sBAAsB,kHAAkH,iGAAiG,4BAA4B,kCAAkC,6DAA6D,4DAA4D,iEAAiE,8EAA8E,yDAAyD,UAAU,kEAAkE,EAAE,MAAM,qHAAqH,8FAA8F,4BAA4B,kCAAkC,6DAA6D,4DAA4D,kEAAkE,8EAA8E,sEAAsE,UAAU,kEAAkE,EAAE,MAAM,uCAAuC,6BAA6B,KAAK,iBAAiB,qKAAqK,sGAAsG,4BAA4B,6DAA6D,4DAA4D,sFAAsF,kCAAkC,2DAA2D,4EAA4E,UAAU,kEAAkE,EAAE,MAAM,6GAA6G,sGAAsG,2DAA2D,4BAA4B,kCAAkC,6DAA6D,4DAA4D,sFAAsF,0EAA0E,yFAAyF,UAAU,kEAAkE,EAAE,MAAM,uHAAuH,iGAAiG,4BAA4B,kCAAkC,6DAA6D,4DAA4D,kEAAkE,4EAA4E,yDAAyD,UAAU,kEAAkE,EAAE,MAAM,0HAA0H,8FAA8F,4BAA4B,kCAAkC,6DAA6D,4DAA4D,kEAAkE,4EAA4E,sEAAsE,UAAU,kEAAkE,EAAE,MAAM,qHAAqH,iGAAiG,4BAA4B,kCAAkC,6DAA6D,4DAA4D,kEAAkE,0EAA0E,yDAAyD,UAAU,kEAAkE,EAAE,MAAM,wHAAwH,8FAA8F,4BAA4B,kCAAkC,6DAA6D,4DAA4D,kEAAkE,0EAA0E,sEAAsE,UAAU,kEAAkE,EAAE,MAAM,wCAAwC,uDAAuD,EAAE,0BAA0B,MAAM,4CAA4C,qBAAqB,uCAAuC,qCAAqC,6CAA6C,gCAAgC,+BAA+B,yBAAyB,iBAAiB,MAAM,+CAA+C,kCAAkC,4BAA4B,OAAO,KAAK,cAAc,cAAc,oBAAoB,MAAM,4DAA4D,6BAA6B,KAAK,0EAA0E,qCAAqC,kBAAkB,UAAU,WAAW,6BAA6B,4BAA4B,4BAA4B,0BAA0B,MAAM,wBAAwB,0BAA0B,uEAAuE,mDAAmD,6EAA6E,4BAA4B,kCAAkC,6DAA6D,4DAA4D,kEAAkE,8EAA8E,yDAAyD,UAAU,kEAAkE,EAAE,KAAK,2GAA2G,mDAAmD,0EAA0E,4BAA4B,kCAAkC,6DAA6D,4DAA4D,kEAAkE,8EAA8E,sEAAsE,UAAU,kEAAkE,EAAE,KAAK,2EAA2E,4BAA4B,6BAA6B,KAAK,iBAAiB,+IAA+I,kDAAkD,4BAA4B,kCAAkC,6DAA6D,4DAA4D,sFAAsF,kCAAkC,2DAA2D,4EAA4E,UAAU,kEAAkE,EAAE,KAAK,yGAAyG,2EAA2E,kDAAkD,4BAA4B,kCAAkC,6DAA6D,4DAA4D,sFAAsF,kCAAkC,0EAA0E,4EAA4E,UAAU,kEAAkE,KAAK,MAAM,6FAA6F,0EAA0E,4BAA4B,kCAAkC,6DAA6D,4DAA4D,kEAAkE,0EAA0E,sEAAsE,UAAU,kEAAkE,EAAE,QAAQ,wBAAwB,kCAAkC,mBAAmB,+FAA+F,yBAAyB,iBAAiB,mCAAmC,8CAA8C,gCAAgC,WAAW,sCAAsC,iCAAiC,2BAA2B,iBAAiB,yBAAyB,cAAc,QAAQ,0BAA0B,qBAAqB,oCAAoC,mBAAmB,eAAe,kBAAkB,gDAAgD,sBAAsB,gCAAgC,yCAAyC,wCAAwC,cAAc,mBAAmB,GAAG,qBAAqB,2BAA2B,WAAW,gBAAgB,kBAAkB,uBAAuB,gCAAgC,qBAAqB,wCAAwC,kDAAkD,qBAAqB,mBAAmB,kBAAkB,iCAAiC,yCAAyC,iBAAiB,eAAe,eAAe,EAAE,kDAAkD,qBAAqB,gBAAgB,EAAE,mDAAmD,eAAe,iCAAiC,gCAAgC,6BAA6B,8BAA8B,yFAAyF,UAAU,uFAAuF,WAAW,EAAE,kEAAkE,0BAA0B,sCAAsC,eAAe,KAAK,eAAe,WAAW,EAAE,KAAK,mDAAmD,iCAAiC,yCAAyC,mBAAmB,kBAAkB,iBAAiB,cAAc,EAAE,mDAAmD,eAAe,iCAAiC,eAAe,cAAc,cAAc,gCAAgC,aAAa,YAAY,6BAA6B,8BAA8B,mIAAmI,YAAY,EAAE,kEAAkE,0BAA0B,sCAAsC,eAAe,KAAK,eAAe,eAAe,YAAY,EAAE,MAAM,0DAA0D,8BAA8B,mBAAmB,mBAAmB,kBAAkB,iBAAiB,EAAE,MAAM,kBAAkB,KAAK,0BAA0B,mDAAmD,8BAA8B,mBAAmB,mBAAmB,kBAAkB,iBAAiB,KAAK,sBAAsB,WAAW,2CAA2C,+DAA+D,mBAAmB,0BAA0B,UAAU,iCAAiC,qCAAqC,gCAAgC,mBAAmB,gBAAgB,GAAG,uBAAuB,WAAW,6DAA6D,2BAA2B,UAAU,EAAE,qBAAqB,WAAW,wCAAwC,0CAA0C,mBAAmB,gBAAgB,sBAAsB,WAAW,qDAAqD,qEAAqE,8FAA8F,8FAA8F,aAAa,kGAAkG,6BAA6B,oBAAoB,wBAAwB,oBAAoB,gBAAgB,iCAAiC,8BAA8B,sCAAsC,uEAAuE,UAAU,4CAA4C,EAAE,KAAK,4HAA4H,UAAU,iFAAiF,EAAE,KAAK,4CAA4C,UAAU,kDAAkD,EAAE,KAAK,gHAAgH,UAAU,mFAAmF,EAAE,KAAK,qKAAqK,UAAU,wHAAwH,EAAE,KAAK,qFAAqF,UAAU,yFAAyF,EAAE,KAAK,8BAA8B,UAAU,kDAAkD,EAAE,KAAK,mFAAmF,UAAU,uFAAuF,EAAE,KAAK,UAAU,wDAAwD,UAAU,KAAK,UAAU,wDAAwD,GAAG,8BAA8B,gKAAgK,YAAY,KAAK,cAAc,mCAAmC,6BAA6B,kBAAkB,KAAK,mBAAmB,kCAAkC,6BAA6B,iBAAiB,KAAK,kBAAkB,4BAA4B,mDAAmD,kDAAkD,mDAAmD,8CAA8C,mDAAmD,wDAAwD,6DAA6D,sBAAsB,YAAY,sBAAsB,KAAK,6DAA6D,sBAAsB,kBAAkB,4BAA4B,uBAAuB,qBAAqB,mBAAmB,wBAAwB,cAAc,KAAK,UAAU,4BAA4B,qBAAqB,EAAE;;;;;;;;;;;;;ACP/+sB;AACA;AACA;AACA;AACA;AACA;;AAEA,aAAa,+CAA+C,EAAE,uCAAuC,0BAA0B,cAAc,wBAAwB,0BAA0B,2IAA2I,OAAO,4OAA4O,wCAAwC,SAAS,sBAAsB,SAAS,4BAA4B,2BAA2B,WAAW,uBAAuB,gBAAgB,oBAAoB,yBAAyB,gBAAgB,sBAAsB,8BAA8B,gBAAgB,2BAA2B,4BAA4B,gBAAgB,gCAAgC,qBAAqB,gBAAgB,kBAAkB,uBAAuB,gBAAgB,oBAAoB,uBAAuB,gBAAgB,oBAAoB,yBAAyB,gBAAgB,sBAAsB,8BAA8B,gBAAgB,2BAA2B,6BAA6B,gBAAgB,qBAAqB,yBAAyB,0BAA0B,gBAAgB,uBAAuB,6BAA6B,gBAAgB,uBAAuB,0BAA0B,gBAAgB,uBAAuB,6BAA6B,gBAAgB,mCAAmC,0BAA0B,iDAAiD,4CAA4C,wCAAwC,4CAA4C,6BAA6B,gBAAgB,mCAAmC,0BAA0B,gDAAgD,2CAA2C,wCAAwC,4CAA4C,oBAAoB,MAAM,cAAc,oBAAoB,gBAAgB,uBAAuB,iCAAiC,2BAA2B,wBAAwB,2BAA2B,gBAAgB,iBAAiB,kBAAkB,oBAAoB,OAAO,OAAO,YAAY,WAAW,KAAK,UAAU,SAAS,iBAAiB,OAAO,0BAA0B,oBAAoB,UAAU,KAAK,iBAAiB,WAAW,oBAAoB,uBAAuB,SAAS,oBAAoB,gBAAgB,uBAAuB,uBAAuB,kBAAkB,YAAY,WAAW,KAAK,UAAU,SAAS,gBAAgB,YAAY,iBAAiB,sBAAsB,MAAM,aAAa,4BAA4B,SAAS,KAAK,YAAY,WAAW,KAAK,UAAU,SAAS,gBAAgB,eAAe,wBAAwB,gBAAgB,YAAY,eAAe,OAAO,gBAAgB,OAAO,iBAAiB,oDAAoD,kCAAkC,mBAAmB,gCAAgC,iBAAiB,qBAAqB,+BAA+B,sBAAsB,gBAAgB,sBAAsB,aAAa,OAAO,YAAY,WAAW,KAAK,aAAa,mCAAmC,2BAA2B,qBAAqB,gCAAgC,8BAA8B,iBAAiB,sBAAsB,gBAAgB,sBAAsB,cAAc,gBAAgB,uCAAuC,yBAAyB,gBAAgB,cAAc,SAAS,4BAA4B,kFAAkF,UAAU,+BAA+B,+BAA+B,kDAAkD,MAAM,gCAAgC,kBAAkB,qBAAqB,aAAa,YAAY,MAAM,YAAY,OAAO,SAAS,6DAA6D,iCAAiC,gBAAgB,uBAAuB,iBAAiB,UAAU,kCAAkC,iCAAiC,YAAY,YAAY,KAAK,gBAAgB,KAAK,YAAY,UAAU,yEAAyE,2BAA2B,qBAAqB,2BAA2B,oBAAoB,SAAS,eAAe,kBAAkB,6BAA6B,QAAQ,0DAA0D,GAAG,KAAK,gDAAgD,kBAAkB,6BAA6B,QAAQ,0DAA0D,OAAO,YAAY,WAAW,KAAK,uBAAuB,uBAAuB,QAAQ,mBAAmB,QAAQ,kBAAkB,YAAY,WAAW,KAAK,WAAW,kBAAkB,IAAI,4GAA4G,UAAU,iEAAiE,OAAO,UAAU,kCAAkC,gEAAgE,UAAU,kEAAkE,oHAAoH,KAAK,mHAAmH,SAAS,KAAK,iCAAiC,4CAA4C,UAAU,KAAK,mHAAmH,8BAA8B,WAAW,SAAS,yBAAyB,uBAAuB,0BAA0B,4CAA4C,UAAU,KAAK,mHAAmH,8BAA8B,WAAW,UAAU,oBAAoB,eAAe,qBAAqB,QAAQ,SAAS,MAAM,YAAY,IAAI,KAAK,2BAA2B,eAAe,kBAAkB,cAAc,kBAAkB,cAAc,oEAAoE,gBAAgB,sCAAsC,4BAA4B,qBAAqB,uEAAuE,YAAY,OAAO,gDAAgD,4GAA4G,kHAAkH,YAAY,YAAY,IAAI,KAAK,2BAA2B,aAAa,SAAS,KAAK,eAAe,kBAAkB,cAAc,kBAAkB,cAAc,MAAM,SAAS,KAAK,MAAM,SAAS,SAAS,IAAI,oCAAoC,gBAAgB,IAAI,oCAAoC,gBAAgB,IAAI,KAAK,oCAAoC,iBAAiB,IAAI,oCAAoC,iBAAiB,IAAI,OAAO,iBAAiB,iBAAiB,uBAAuB,YAAY,UAAU,wBAAwB,sBAAsB,eAAe,iBAAiB,6BAA6B,kBAAkB,mBAAmB,iBAAiB,mCAAmC,yCAAyC,QAAQ,eAAe,IAAI,6CAA6C,oBAAoB,qBAAqB,qBAAqB,sBAAsB,SAAS,KAAK,+CAA+C,8BAA8B,qDAAqD,MAAM,wBAAwB,0GAA0G,qBAAqB,iBAAiB,qBAAqB,oBAAoB,gBAAgB,EAAE,6EAA6E,mCAAmC,wBAAwB,gBAAgB,uCAAuC,YAAY,MAAM,KAAK,KAAK,iCAAiC,MAAM,uIAAuI,YAAY,WAAW,KAAK,YAAY,cAAc,QAAQ,kBAAkB,WAAW,uBAAuB,gCAAgC,qEAAqE,sEAAsE,iBAAiB,0EAA0E,2EAA2E,QAAQ,mBAAmB,oBAAoB,kBAAkB,QAAQ,eAAe,yHAAyH,KAAK,sCAAsC,oCAAoC,mCAAmC,8BAA8B,wCAAwC,wCAAwC,kCAAkC,qBAAqB,mCAAmC,8BAA8B,uCAAuC,uCAAuC,oBAAoB,SAAS,sBAAsB,mCAAmC,QAAQ,YAAY,IAAI,KAAK,2BAA2B,qDAAqD,OAAO,eAAe,kBAAkB,cAAc,kBAAkB,cAAc,MAAM,SAAS,KAAK,6EAA6E,aAAa,uCAAuC,kCAAkC,qCAAqC,sBAAsB,oCAAoC,UAAU,+BAA+B,SAAS,2BAA2B,kBAAkB,sBAAsB,QAAQ,YAAY,IAAI,KAAK,2BAA2B,aAAa,SAAS,eAAe,kBAAkB,cAAc,kBAAkB,cAAc,MAAM,SAAS,KAAK,MAAM,MAAM,2DAA2D,gBAAgB,EAAE,6DAA6D,oBAAoB,2BAA2B,oBAAoB,gBAAgB,EAAE,iBAAiB,qCAAqC,EAAE,qCAAqC,EAAE,sCAAsC,UAAU,mCAAmC,KAAK,yBAAyB,2BAA2B,kCAAkC,KAAK,qCAAqC,MAAM,eAAe,mBAAmB,6BAA6B,yCAAyC,2CAA2C,aAAa,uCAAuC,gBAAgB,wCAAwC,gBAAgB,iBAAiB,4BAA4B,EAAE,4BAA4B,EAAE,KAAK,6BAA6B,EAAE,6BAA6B,EAAE,IAAI,QAAQ,KAAK,mBAAmB,EAAE,mBAAmB,EAAE,sBAAsB,aAAa,0BAA0B,EAAE,0BAA0B,EAAE,SAAS,uHAAuH,YAAY,oCAAoC,aAAa,gCAAgC,oCAAoC,aAAa,YAAY,oBAAoB,KAAK,uEAAuE,QAAQ,OAAO,QAAQ,YAAY,KAAK,eAAe,eAAe,eAAe,6CAA6C,WAAW,mCAAmC,KAAK,uCAAuC,qCAAqC,KAAK,+CAA+C,WAAW,qCAAqC,sCAAsC,KAAK,yCAAyC,uCAAuC,kEAAkE,uCAAuC,+BAA+B,uBAAuB,kBAAkB,YAAY,sBAAsB,qBAAqB,+BAA+B,kEAAkE,KAAK,uEAAuE,uEAAuE,yCAAyC,qCAAqC,wBAAwB,KAAK,uEAAuE,OAAO,aAAa,yCAAyC,uEAAuE,kBAAkB,KAAK,gBAAgB,iBAAiB,iDAAiD,4CAA4C,sBAAsB,MAAM,yBAAyB,MAAM,+HAA+H,IAAI,kCAAkC,wDAAwD,KAAK,KAAK,sBAAsB,oBAAoB,WAAW,gBAAgB,QAAQ,yBAAyB,sCAAsC,aAAa,kBAAkB,wBAAwB,KAAK,qCAAqC,GAAG,KAAK,OAAO,0DAA0D,UAAU,gDAAgD,iBAAiB,YAAY,gBAAgB,KAAK,kCAAkC,qCAAqC,UAAU,SAAS,mCAAmC,0LAA0L,WAAW,kCAAkC,yBAAyB,iBAAiB,SAAS,MAAM,MAAM,iBAAiB,mBAAmB,SAAS,kDAAkD,SAAS,OAAO,8KAA8K,KAAK,eAAe,uDAAuD,KAAK,uKAAuK,KAAK,qCAAqC,8BAA8B,qDAAqD,UAAU,qGAAqG,0DAA0D,aAAa,6BAA6B,yBAAyB,WAAW,QAAQ,MAAM,WAAW,wEAAwE,KAAK,oCAAoC,oFAAoF,+FAA+F,WAAW,KAAK,KAAK,2FAA2F,iBAAiB,kBAAkB,uBAAuB,wBAAwB,EAAE,uBAAuB,wBAAwB,EAAE,mCAAmC,aAAa,wBAAwB,MAAM,YAAY,wBAAwB,MAAM,YAAY,cAAc,MAAM,MAAM,QAAQ,KAAK,OAAO,MAAM,YAAY,iCAAiC,QAAQ,UAAU,gCAAgC,KAAK,WAAW,YAAY,KAAK,MAAM,yDAAyD,6FAA6F,oBAAoB,gBAAgB,kBAAkB,mBAAmB,oBAAoB,0DAA0D,6EAA6E,8BAA8B,4BAA4B,sCAAsC,OAAO,sDAAsD,kBAAkB,yDAAyD,KAAK,OAAO,cAAc,cAAc,MAAM,YAAY,yCAAyC,kBAAkB,EAAE,KAAK,yBAAyB,2CAA2C,iDAAiD,uBAAuB,gCAAgC,uBAAuB,gCAAgC,gCAAgC,yBAAyB,yBAAyB,YAAY,6BAA6B,kBAAkB,MAAM,uBAAuB,gCAAgC,sCAAsC,wBAAwB,wEAAwE,KAAK,YAAY,yCAAyC,gBAAgB,EAAE,KAAK,uBAAuB,0CAA0C,WAAW,iDAAiD,gCAAgC,UAAU,qCAAqC,UAAU,qCAAqC,mBAAmB,4CAA4C,qBAAqB,6BAA6B,qBAAqB,aAAa,wBAAwB,eAAe,cAAc,0CAA0C,uDAAuD,OAAO,aAAa,mDAAmD,gBAAgB,KAAK,oBAAoB,YAAY,KAAK,iBAAiB,wBAAwB,sBAAsB,0BAA0B,KAAK,gBAAgB,wBAAwB,sBAAsB,0BAA0B,KAAK,iBAAiB,oBAAoB,KAAK,sCAAsC,gBAAgB,YAAY,KAAK,cAAc,yBAAyB,qBAAqB,2BAA2B,MAAM,EAAE,2BAA2B,MAAM,EAAE,YAAY,KAAK,oBAAoB,cAAc,eAAe,KAAK,yBAAyB,eAAe,YAAY,YAAY,WAAW,KAAK,+BAA+B,OAAO,OAAO,OAAO,cAAc,cAAc,IAAI,KAAK,kBAAkB,6CAA6C,+BAA+B,wCAAwC,sDAAsD,iCAAiC,qDAAqD,EAAE,oBAAoB,OAAO,cAAc,KAAK,wBAAwB,YAAY,KAAK,wBAAwB,gCAAgC,KAAK,mBAAmB,mBAAmB,oBAAoB,mBAAmB,2BAA2B,YAAY,EAAE,2BAA2B,YAAY,EAAE,0BAA0B,aAAa,wBAAwB,gBAAgB,iBAAiB,KAAK,qBAAqB,OAAO,KAAK,kBAAkB,MAAM,sEAAsE,KAAK,yEAAyE,eAAe,mBAAmB,0BAA0B,WAAW,EAAE,8BAA8B,WAAW,EAAE,6BAA6B,WAAW,EAAE,iCAAiC,WAAW,EAAE,2BAA2B,WAAW,EAAE,8BAA8B,WAAW,EAAE,0BAA0B,WAAW,EAAE,6BAA6B,WAAW,EAAE,4CAA4C,4BAA4B,yCAAyC,eAAe,EAAE,4CAA4C,eAAe,IAAI,+EAA+E,iFAAiF,+EAA+E,KAAK,uBAAuB,YAAY,KAAK,eAAe,QAAQ,UAAU,qCAAqC,2BAA2B,QAAQ,EAAE,2BAA2B,QAAQ,EAAE,+BAA+B,0BAA0B,QAAQ,EAAE,8BAA8B,QAAQ,EAAE,6BAA6B,QAAQ,EAAE,iCAAiC,QAAQ,EAAE,2BAA2B,QAAQ,EAAE,8BAA8B,QAAQ,EAAE,0BAA0B,QAAQ,EAAE,6BAA6B,QAAQ,EAAE,4CAA4C,4BAA4B,yCAAyC,QAAQ,EAAE,4CAA4C,QAAQ,IAAI,iBAAiB,6BAA6B,eAAe,mBAAmB,QAAQ,EAAE,wBAAwB,qCAAqC,QAAQ,GAAG,YAAY,KAAK,6BAA6B,0BAA0B,gBAAgB,iBAAiB,eAAe,OAAO,mBAAmB,MAAM,eAAe,sBAAsB,qBAAqB,iCAAiC,8CAA8C,4BAA4B,cAAc,gBAAgB,0BAA0B,gBAAgB,EAAE,KAAK,qBAAqB,MAAM,cAAc,oBAAoB,iCAAiC,qBAAqB,6CAA6C,0BAA0B,YAAY,EAAE,8CAA8C,oBAAoB,cAAc,mBAAmB,yBAAyB,gBAAgB,WAAW,iBAAiB,kBAAkB,kBAAkB,kBAAkB,YAAY,WAAW,KAAK,aAAa,UAAU,SAAS,iBAAiB,mBAAmB,cAAc,aAAa,UAAU,YAAY,QAAQ,YAAY,QAAQ,kBAAkB,YAAY,WAAW,KAAK,UAAU,SAAS,sBAAsB,kBAAkB,QAAQ,aAAa,0BAA0B,OAAO,iBAAiB,gBAAgB,IAAI,MAAM,cAAc,aAAa,SAAS,SAAS,kCAAkC,KAAK,QAAQ,0CAA0C,KAAK,sCAAsC,KAAK,mBAAmB,WAAW,oBAAoB,aAAa,kCAAkC,KAAK,cAAc,oCAAoC,KAAK,4CAA4C,EAAE,mCAAmC,oBAAoB,KAAK,mBAAmB,WAAW,oBAAoB,aAAa,kCAAkC,KAAK,cAAc,oCAAoC,KAAK,4CAA4C,GAAG,kCAAkC,gBAAgB,iBAAiB,eAAe,OAAO,WAAW,mBAAmB,MAAM,eAAe,sBAAsB,qBAAqB,iCAAiC,8CAA8C,4BAA4B,cAAc,iBAAiB,KAAK,qBAAqB,MAAM,cAAc,oBAAoB,iCAAiC,qBAAqB,6CAA6C,8CAA8C,oBAAoB,cAAc,mBAAmB,4BAA4B,gBAAgB,iBAAiB,eAAe,OAAO,WAAW,mBAAmB,MAAM,gBAAgB,uBAAuB,qBAAqB,kCAAkC,8CAA8C,4BAA4B,cAAc,gBAAgB,4BAA4B,gBAAgB,EAAE,KAAK,qBAAqB,MAAM,cAAc,qBAAqB,kCAAkC,qBAAqB,6CAA6C,4BAA4B,YAAY,EAAE,8CAA8C,oBAAoB,cAAc,mBAAmB,wBAAwB,WAAW,OAAO,OAAO,+BAA+B,oBAAoB,WAAW,iBAAiB,sBAAsB,yBAAyB,sBAAsB,qBAAqB,EAAE,KAAK,YAAY,WAAW,KAAK,WAAW,mBAAmB,0BAA0B,0BAA0B,OAAO,OAAO,YAAY,WAAW,KAAK,2BAA2B,iCAAiC,sBAAsB,gBAAgB,gBAAgB,gCAAgC,cAAc,wBAAwB,gBAAgB,gBAAgB,kCAAkC,cAAc,yBAAyB,gBAAgB,eAAe,OAAO,iBAAiB,WAAW,mBAAmB,OAAO,qBAAqB,MAAM,cAAc,OAAO,qBAAqB,6CAA6C,gBAAgB,MAAM,eAAe,uBAAuB,OAAO,gBAAgB,uBAAuB,qBAAqB,kCAAkC,0DAA0D,kBAAkB,2BAA2B,cAAc,iBAAiB,qBAAqB,YAAY,mBAAmB,gBAAgB,MAAM,IAAI,OAAO,YAAY,WAAW,KAAK,+BAA+B,qBAAqB,0BAA0B,iBAAiB,qBAAqB,YAAY,mBAAmB,gBAAgB,MAAM,IAAI,8EAA8E,2BAA2B,kCAAkC,mBAAmB,gBAAgB,KAAK,sCAAsC,2BAA2B,YAAY,mBAAmB,qBAAqB,2BAA2B,kCAAkC,gBAAgB,+BAA+B,iBAAiB,qBAAqB,qCAAqC,gBAAgB,sBAAsB,wCAAwC,wDAAwD,aAAa,4BAA4B,MAAM,MAAM,mBAAmB,gBAAgB,wBAAwB,uCAAuC,QAAQ,kBAAkB,qCAAqC,gBAAgB,sBAAsB,wCAAwC,wDAAwD,aAAa,4BAA4B,2BAA2B,gBAAgB,IAAI,yBAAyB,gBAAgB,iBAAiB,eAAe,OAAO,mBAAmB,OAAO,qBAAqB,MAAM,cAAc,OAAO,qBAAqB,6CAA6C,gBAAgB,MAAM,gBAAgB,wBAAwB,OAAO,iBAAiB,wBAAwB,qBAAqB,mCAAmC,kBAAkB,qCAAqC,gBAAgB,sBAAsB,wCAAwC,wDAAwD,aAAa,4BAA4B,6BAA6B,gBAAgB,KAAK,EAAE;;;;;;;;;;;;;;;;;;;;;;;;ACPv32B;AACM;AACS;AACxD,qFAAqF;AAC3B;AACW;AACL;AAehE,IAAa,eAAe,GAA5B,MAAa,eAAe;CAAI;AAAnB,eAAe;IAZ3B,8DAAQ,CAAC;QACR,YAAY,EAAE,CAAC,qEAAgB,EAAC,6EAAoB,CAAC;QACrD,OAAO,EAAE;YACP,4DAAY;SACb;QACD,OAAO,EAAE;YACP,6EAAoB;YACpB,qEAAgB;YAChB,uEAAe;YACf,kFAAc;SACf;KACF,CAAC;GACW,eAAe,CAAI;AAAJ","file":"default~advanced-expense-maintenance-advanced-expense-maintenance-module~alerts-tab-alerts-tab-modul~63d3927b-es2015.js","sourcesContent":["/**\n * index\n */\nexport * from './src/index';\n","import { getValue, setValue, isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { clearTemplate, registerEvents } from './util';\nvar ComplexBase = /** @class */ (function () {\n    function ComplexBase() {\n        this.hasChanges = false;\n        this.propCollection = {};\n        this.dataSource = {};\n        this.tags = [];\n        this.tagObjects = [];\n    }\n    ComplexBase.prototype.ngOnInit = function () {\n        this.registeredTemplate = {};\n        for (var _i = 0, _a = this.tags; _i < _a.length; _i++) {\n            var tag = _a[_i];\n            var objInstance = getValue('child' + tag.substring(0, 1).toUpperCase() + tag.substring(1), this);\n            if (objInstance) {\n                this.tagObjects.push({ instance: objInstance, name: tag });\n            }\n        }\n        var templateProperties = Object.keys(this);\n        templateProperties = templateProperties.filter(function (val) {\n            return /Ref$/i.test(val);\n        });\n        for (var _b = 0, templateProperties_1 = templateProperties; _b < templateProperties_1.length; _b++) {\n            var tempName = templateProperties_1[_b];\n            var propName = tempName.replace('Ref', '');\n            setValue(propName.replace('_', '.'), getValue(propName, this), this.propCollection);\n        }\n        // Angular 9 compatibility to overcome ngOnchange not get triggered issue\n        // To Update properties to \"this.propCollection\"\n        var propList = Object.keys(this);\n        /* istanbul ignore next */\n        if (this.directivePropList) {\n            for (var k = 0; k < this.directivePropList.length; k++) {\n                var dirPropName = this.directivePropList[k];\n                if (propList.indexOf(dirPropName) !== -1) {\n                    setValue(dirPropName, getValue(dirPropName, this), this.propCollection);\n                }\n            }\n            this.hasChanges = true;\n        }\n    };\n    ComplexBase.prototype.registerEvents = function (eventList) {\n        registerEvents(eventList, this, true);\n    };\n    ComplexBase.prototype.ngOnChanges = function (changes) {\n        for (var _i = 0, _a = Object.keys(changes); _i < _a.length; _i++) {\n            var propName = _a[_i];\n            var changedVal = changes[propName];\n            this.propCollection[propName] = changedVal.currentValue;\n        }\n        this.isUpdated = false;\n        this.hasChanges = true;\n    };\n    /* istanbul ignore next */\n    ComplexBase.prototype.clearTemplate = function (templateNames) {\n        clearTemplate(this, templateNames);\n    };\n    ComplexBase.prototype.getProperties = function () {\n        /* istanbul ignore next */\n        for (var _i = 0, _a = this.tagObjects; _i < _a.length; _i++) {\n            var tagObject = _a[_i];\n            this.propCollection[tagObject.name] = tagObject.instance.getProperties();\n        }\n        return this.propCollection;\n    };\n    ComplexBase.prototype.isChanged = function () {\n        var result = this.hasChanges;\n        if (!isNullOrUndefined(this.propCollection[this.property])) {\n            var tempProps = this.propCollection[this.property];\n            var props = Object.keys(tempProps[0]);\n            for (var d = 0; d < props.length; d++) {\n                if (!isNullOrUndefined(this.propCollection[props[d]])) {\n                    var val = getValue(props[d], this);\n                    var propVal = this.propCollection[this.property][0][props[d]];\n                    if (!isNullOrUndefined(val) && this.propCollection[props[d]] !== val\n                        && propVal !== val) {\n                        this.propCollection[this.property][0][props[d]] = val;\n                        this.propCollection[props[d]] = val;\n                        this.hasChanges = true;\n                        this.isUpdated = false;\n                    }\n                }\n            }\n        }\n        /* istanbul ignore next */\n        for (var _i = 0, _a = this.tagObjects; _i < _a.length; _i++) {\n            var item = _a[_i];\n            result = result || item.instance.hasChanges;\n        }\n        return result || this.hasChanges;\n    };\n    ComplexBase.prototype.ngAfterContentChecked = function () {\n        this.hasChanges = this.isChanged();\n        var templateProperties = Object.keys(this);\n        templateProperties = templateProperties.filter(function (val) {\n            return /Ref$/i.test(val);\n        });\n        // For angular 9 compatibility\n        // ngOnchange hook not get triggered for copmplex directive\n        // Due to this, we have manually set template properties v alues once we get template property reference\n        for (var _i = 0, templateProperties_2 = templateProperties; _i < templateProperties_2.length; _i++) {\n            var tempName = templateProperties_2[_i];\n            var propName = tempName.replace('Ref', '');\n            var val = {};\n            setValue(propName.replace('_', '.'), getValue(propName, this), this.propCollection);\n        }\n    };\n    ComplexBase.prototype.ngAfterViewChecked = function () {\n        /* istanbul ignore next */\n        if (this.isUpdated) {\n            this.hasChanges = false;\n        }\n    };\n    return ComplexBase;\n}());\nexport { ComplexBase };\nvar ArrayBase = /** @class */ (function () {\n    function ArrayBase(propertyName) {\n        this.list = [];\n        this.hasChanges = false;\n        this.propertyName = propertyName;\n    }\n    ArrayBase.prototype.ngOnInit = function () {\n        this.isInitChanges = true;\n    };\n    ArrayBase.prototype.ngAfterContentInit = function () {\n        var _this = this;\n        var index = 0;\n        /* istanbul ignore next */\n        this.list = this.children.map(function (child) {\n            child.dirIndex = index++;\n            child.property = _this.propertyName;\n            return child;\n        });\n        this.hasChanges = true;\n    };\n    ArrayBase.prototype.getProperties = function () {\n        var onlyProp = [];\n        for (var _i = 0, _a = this.list; _i < _a.length; _i++) {\n            var item = _a[_i];\n            onlyProp.push(item.getProperties());\n        }\n        return onlyProp;\n    };\n    ArrayBase.prototype.isChanged = function () {\n        var _this = this;\n        var result = false;\n        var index = 0;\n        var isSourceChanged = false;\n        // tslint:disable-next-line\n        var childrenDataSource = this.children.map(function (child) {\n            return child;\n        });\n        /* istanbul ignore next */\n        if (this.list.length === this.children.length) {\n            for (var i = 0; i < this.list.length; i++) {\n                if (this.list[i].propCollection.dataSource) {\n                    if (this.list[i].dataSource && this.list[i].propCollection.dataSource !== this.list[i].dataSource) {\n                        this.list[i].propCollection.dataSource = this.list[i].dataSource;\n                        this.list[i].hasChanges = true;\n                    }\n                    isSourceChanged = (JSON.stringify(this.list[i].propCollection.dataSource) !==\n                        JSON.stringify(childrenDataSource[i].propCollection.dataSource));\n                }\n            }\n        }\n        this.hasNewChildren = (this.list.length !== this.children.length || isSourceChanged) ? true : null;\n        if (this.hasNewChildren) {\n            this.list = this.children.map(function (child) {\n                child.dirIndex = index++;\n                child.property = _this.propertyName;\n                return child;\n            });\n        }\n        /* istanbul ignore end */\n        for (var _i = 0, _a = this.list; _i < _a.length; _i++) {\n            var item = _a[_i];\n            result = result || item.hasChanges;\n        }\n        return !!this.list.length && result;\n    };\n    ArrayBase.prototype.clearTemplate = function (templateNames) {\n        var _this = this;\n        /* istanbul ignore next */\n        for (var _i = 0, _a = this.list; _i < _a.length; _i++) {\n            var item = _a[_i];\n            item.clearTemplate(templateNames && templateNames.map(function (val) {\n                return new RegExp(_this.propertyName).test(val) ? val.replace(_this.propertyName + '.', '') : val;\n            }));\n        }\n    };\n    ArrayBase.prototype.ngAfterContentChecked = function () {\n        this.hasChanges = this.isChanged();\n        for (var i = 0; i < this.list.length; i++) {\n            this.list[i].isUpdated = true;\n        }\n    };\n    ArrayBase.prototype.ngAfterViewInit = function () {\n        this.isInitChanges = false;\n    };\n    return ArrayBase;\n}());\nexport { ArrayBase };\n","/**\n * Angular Component Base Module\n */\nimport { getValue, isUndefined, setValue, isNullOrUndefined, attributes, createElement } from '@syncfusion/ej2-base';\nimport { EventEmitter } from '@angular/core';\nimport { clearTemplate, registerEvents } from './util';\nvar SVG_REG = /^svg|^path|^g/;\nvar ComponentBase = /** @class */ (function () {\n    function ComponentBase() {\n        this.isProtectedOnChange = true;\n    }\n    ComponentBase.prototype.saveChanges = function (key, newValue, oldValue) {\n        if (this.isProtectedOnChange) {\n            return;\n        }\n        this.oldProperties[key] = oldValue;\n        this.changedProperties[key] = newValue;\n        this.finalUpdate();\n        // tslint:disable-next-line:no-any\n        var changeTime = setTimeout(this.dataBind.bind(this));\n        var clearUpdate = function () {\n            clearTimeout(changeTime);\n        };\n        this.finalUpdate = clearUpdate;\n    };\n    ;\n    // tslint:disable-next-line:no-any\n    ComponentBase.prototype.ngOnInit = function (isTempRef) {\n        // tslint:disable-next-line:no-any\n        var tempOnThis = isTempRef || this;\n        tempOnThis.registeredTemplate = {};\n        tempOnThis.ngBoundedEvents = {};\n        tempOnThis.isAngular = true;\n        /* istanbul ignore next */\n        if (isTempRef) {\n            this.tags = isTempRef.tags;\n        }\n        tempOnThis.tags = this.tags || [];\n        tempOnThis.complexTemplate = this.complexTemplate || [];\n        tempOnThis.tagObjects = [];\n        tempOnThis.ngAttr = this.getAngularAttr(tempOnThis.element);\n        /* istanbul ignore next */\n        tempOnThis.createElement = function (tagName, prop) {\n            //tslint:disable-next-line\n            var ele = tempOnThis.srenderer ? tempOnThis.srenderer.createElement(tagName) : createElement(tagName);\n            if (typeof (prop) === 'undefined') {\n                return ele;\n            }\n            ele.innerHTML = (prop.innerHTML ? prop.innerHTML : '');\n            if (prop.className !== undefined) {\n                ele.className = prop.className;\n            }\n            if (prop.id !== undefined) {\n                ele.id = prop.id;\n            }\n            if (prop.styles !== undefined) {\n                ele.setAttribute('style', prop.styles);\n            }\n            if (tempOnThis.ngAttr !== undefined) {\n                ele.setAttribute(tempOnThis.ngAttr, '');\n            }\n            if (prop.attrs !== undefined) {\n                attributes(ele, prop.attrs);\n            }\n            return ele;\n        };\n        for (var _i = 0, _a = tempOnThis.tags; _i < _a.length; _i++) {\n            var tag = _a[_i];\n            var tagObject = {\n                instance: getValue('child' + tag.substring(0, 1).toUpperCase() + tag.substring(1), tempOnThis),\n                name: tag\n            };\n            tempOnThis.tagObjects.push(tagObject);\n        }\n        var complexTemplates = Object.keys(tempOnThis);\n        complexTemplates = complexTemplates.filter(function (val) {\n            return /Ref$/i.test(val) && /\\_/i.test(val);\n        });\n        for (var _b = 0, complexTemplates_1 = complexTemplates; _b < complexTemplates_1.length; _b++) {\n            var tempName = complexTemplates_1[_b];\n            var propName = tempName.replace('Ref', '');\n            var val = {};\n            setValue(propName.replace('_', '.'), getValue(propName, tempOnThis), val);\n            tempOnThis.setProperties(val, true);\n        }\n    };\n    ComponentBase.prototype.getAngularAttr = function (ele) {\n        var attributes = ele.attributes;\n        var length = attributes.length;\n        var ngAr;\n        for (var i = 0; i < length; i++) {\n            /* istanbul ignore next */\n            if (/_ngcontent/g.test(attributes[i].name)) {\n                ngAr = attributes[i].name;\n            }\n        }\n        return ngAr;\n    };\n    ;\n    // tslint:disable-next-line:no-any\n    ComponentBase.prototype.ngAfterViewInit = function (isTempRef) {\n        // tslint:disable-next-line:no-any\n        var tempAfterViewThis = isTempRef || this;\n        var regExp = /ejs-tab|ejs-accordion/g;\n        /* istanbul ignore next */\n        if (regExp.test(tempAfterViewThis.ngEle.nativeElement.outerHTML)) {\n            tempAfterViewThis.ngEle.nativeElement.style.visibility = 'hidden';\n        }\n        /**\n         * Root level template properties are not getting rendered,\n         * Due to ngonchanges not get triggered.\n         * so that we have set template value for root level template properties,\n         * for example: refer below syntax\n         * ```html\n         * <ejs-grid>\n         * <e-column></e-column>\n         * <ng-template #editSettingsTemplate></ng-template>\n         * </ejs-grid>\n         * ```\n         */\n        var templateProperties = Object.keys(tempAfterViewThis);\n        templateProperties = templateProperties.filter(function (val) {\n            return /Ref$/i.test(val);\n        });\n        for (var _i = 0, templateProperties_1 = templateProperties; _i < templateProperties_1.length; _i++) {\n            var tempName = templateProperties_1[_i];\n            var propName = tempName.replace('Ref', '');\n            setValue(propName.replace('_', '.'), getValue(propName + 'Ref', tempAfterViewThis), tempAfterViewThis);\n        }\n        // Used setTimeout for template binding\n        // Refer Link: https://github.com/angular/angular/issues/6005\n        setTimeout(function () {\n            /* istanbul ignore else  */\n            if (typeof window !== 'undefined') {\n                tempAfterViewThis.appendTo(tempAfterViewThis.element);\n                tempAfterViewThis.ngEle.nativeElement.style.visibility = '';\n            }\n        });\n    };\n    // tslint:disable-next-line:no-any\n    ComponentBase.prototype.ngOnDestroy = function (isTempRef) {\n        // tslint:disable-next-line:no-any\n        var tempOnDestroyThis = isTempRef || this;\n        /* istanbul ignore else  */\n        if (typeof window !== 'undefined' && tempOnDestroyThis.element.classList.contains('e-control')) {\n            tempOnDestroyThis.destroy();\n            tempOnDestroyThis.clearTemplate(null);\n        }\n    };\n    //tslint:disable-next-line\n    ComponentBase.prototype.clearTemplate = function (templateNames, index) {\n        clearTemplate(this, templateNames, index);\n    };\n    ;\n    // tslint:disable-next-line:no-any\n    ComponentBase.prototype.ngAfterContentChecked = function (isTempRef) {\n        // tslint:disable-next-line:no-any\n        var tempAfterContentThis = isTempRef || this;\n        for (var _i = 0, _a = tempAfterContentThis.tagObjects; _i < _a.length; _i++) {\n            var tagObject = _a[_i];\n            if (!isUndefined(tagObject.instance) &&\n                (tagObject.instance.isInitChanges || tagObject.instance.hasChanges || tagObject.instance.hasNewChildren)) {\n                if (tagObject.instance.isInitChanges) {\n                    var propObj = {};\n                    // For angular 9 compatibility\n                    // Not able to get complex directive properties reference ni Onint hook\n                    // So we have constructed property here and used\n                    var complexDirProps = void 0;\n                    var list = getValue('instance.list', tagObject);\n                    tagObject.instance.moduleName = tempAfterContentThis.getModuleName();\n                    if (list && list.length) {\n                        complexDirProps = list[0].directivePropList;\n                    }\n                    var skip = true;\n                    if (tempAfterContentThis.getModuleName && tempAfterContentThis.getModuleName() === 'gantt') {\n                        skip = false;\n                    }\n                    if (complexDirProps && skip && complexDirProps.indexOf(tagObject.instance.propertyName) === -1) {\n                        var compDirPropList = Object.keys(tagObject.instance.list[0].propCollection);\n                        for (var h = 0; h < tagObject.instance.list.length; h++) {\n                            tagObject.instance.list[h].propCollection[tagObject.instance.propertyName] = [];\n                            var obj = {};\n                            for (var k = 0; k < compDirPropList.length; k++) {\n                                var complexPropName = compDirPropList[k];\n                                obj[complexPropName] = tagObject.instance.list[h].propCollection[complexPropName];\n                            }\n                            for (var i = 0; i < tagObject.instance.list[h].tags.length; i++) {\n                                var tag = tagObject.instance.list[h].tags[i];\n                                var childObj = getValue('child' + tag.substring(0, 1).toUpperCase() + tag.substring(1), tagObject.instance.list[h]);\n                                if (childObj) {\n                                    var innerchildObj = tagObject.instance.list[h]['child' + tag.substring(0, 1).toUpperCase() + tag.substring(1)];\n                                    if (innerchildObj) {\n                                        for (var j = 0; j < innerchildObj.list.length; j++) {\n                                            var innerTag = innerchildObj.list[0].tags[0];\n                                            if (innerTag) {\n                                                var innerchildTag = getValue('child' + innerTag.substring(0, 1).toUpperCase() + innerTag.substring(1), innerchildObj.list[j]);\n                                                if (innerchildTag) {\n                                                    innerchildObj.list[j].tagObjects.push({ instance: innerchildTag, name: innerTag });\n                                                }\n                                            }\n                                        }\n                                    }\n                                    tagObject.instance.list[h].tagObjects.push({ instance: childObj, name: tag });\n                                }\n                            }\n                            tagObject.instance.list[h].propCollection[tagObject.instance.propertyName].push(obj);\n                        }\n                    }\n                    // End angular 9 compatibility\n                    propObj[tagObject.name] = tagObject.instance.getProperties();\n                    tempAfterContentThis.setProperties(propObj, tagObject.instance.isInitChanges);\n                }\n                else {\n                    /* istanbul ignore next */\n                    var oldProbLength = tempAfterContentThis[tagObject.name].length;\n                    var newPropLendgth = tagObject.instance.list.length;\n                    if (oldProbLength !== newPropLendgth) {\n                        tempAfterContentThis[tagObject.name] = tagObject.instance.list;\n                    }\n                    for (var _b = 0, _c = tagObject.instance.list; _b < _c.length; _b++) {\n                        var list = _c[_b];\n                        var curIndex = tagObject.instance.list.indexOf(list);\n                        var curChild = getValue(tagObject.name, tempAfterContentThis)[curIndex];\n                        if (curChild !== undefined && curChild.setProperties !== undefined) {\n                            if (tempAfterContentThis.getModuleName() === 'DashboardLayout') {\n                                curChild.setProperties(list.getProperties(), true);\n                            }\n                            else {\n                                curChild.setProperties(list.getProperties());\n                            }\n                        }\n                        list.isUpdated = true;\n                    }\n                }\n            }\n        }\n    };\n    ComponentBase.prototype.registerEvents = function (eventList) {\n        registerEvents(eventList, this);\n    };\n    ComponentBase.prototype.twoWaySetter = function (newVal, prop) {\n        var oldVal = getValue(prop, this.properties);\n        if (oldVal === newVal) {\n            return;\n        }\n        this.saveChanges(prop, newVal, oldVal);\n        setValue(prop, (isNullOrUndefined(newVal) ? null : newVal), this.properties);\n        getValue(prop + 'Change', this).emit(newVal);\n    };\n    ComponentBase.prototype.addTwoWay = function (propList) {\n        var _this = this;\n        var _loop_1 = function (prop) {\n            getValue(prop, this_1);\n            Object.defineProperty(this_1, prop, {\n                get: function () {\n                    return getValue(prop, _this.properties);\n                },\n                set: function (newVal) { return _this.twoWaySetter(newVal, prop); }\n            });\n            setValue(prop + 'Change', new EventEmitter(), this_1);\n        };\n        var this_1 = this;\n        for (var _i = 0, propList_1 = propList; _i < propList_1.length; _i++) {\n            var prop = propList_1[_i];\n            _loop_1(prop);\n        }\n    };\n    ComponentBase.prototype.addEventListener = function (eventName, handler) {\n        var eventObj = getValue(eventName, this);\n        if (!isUndefined(eventObj)) {\n            if (!this.ngBoundedEvents[eventName]) {\n                this.ngBoundedEvents[eventName] = new Map();\n            }\n            this.ngBoundedEvents[eventName].set(handler, eventObj.subscribe(handler));\n        }\n    };\n    ComponentBase.prototype.removeEventListener = function (eventName, handler) {\n        var eventObj = getValue(eventName, this);\n        if (!isUndefined(eventObj)) {\n            this.ngBoundedEvents[eventName].get(handler).unsubscribe();\n        }\n    };\n    ComponentBase.prototype.trigger = function (eventName, eventArgs, success) {\n        var eventObj = getValue(eventName, this);\n        var prevDetection = this.isProtectedOnChange;\n        this.isProtectedOnChange = false;\n        if (eventArgs) {\n            eventArgs.name = eventName;\n        }\n        if (!isUndefined(eventObj)) {\n            eventObj.next(eventArgs);\n        }\n        var localEventObj = getValue('local' + eventName.charAt(0).toUpperCase() + eventName.slice(1), this);\n        if (!isUndefined(localEventObj)) {\n            localEventObj.call(this, eventArgs);\n        }\n        this.isProtectedOnChange = prevDetection;\n        /* istanbul ignore else  */\n        if (success) {\n            success.call(this, eventArgs);\n        }\n    };\n    return ComponentBase;\n}());\nexport { ComponentBase };\n","import { getValue, setValue, isNullOrUndefined, isObject } from '@syncfusion/ej2-base';\n/**\n * Angular Form Base Module\n */\nvar FormBase = /** @class */ (function () {\n    function FormBase() {\n    }\n    FormBase.prototype.propagateChange = function (_) { return; };\n    FormBase.prototype.propagateTouch = function () { return; };\n    FormBase.prototype.localChange = function (e) {\n        //tslint:disable-next-line\n        var value = (e.checked === undefined ? e.value : e.checked);\n        this.objCheck = isObject(value);\n        if (this.isUpdated === true) {\n            this.angularValue = this.oldValue;\n        }\n        if (this.objCheck === true) {\n            this.duplicateValue = JSON.stringify(value);\n            this.duplicateAngularValue = JSON.stringify(this.angularValue);\n            if (this.duplicateValue !== this.duplicateAngularValue && this.propagateChange !== undefined && value !== undefined) {\n                // Update angular from our control\n                this.propagateChange(value);\n                this.angularValue = value;\n            }\n        }\n        else {\n            if (value !== this.angularValue && this.propagateChange !== undefined && value !== undefined) {\n                // While reset form using reset() method ng-dirty not get updated, so while value is empty just update angularValue only\n                if (value !== '' && value !== null) {\n                    // Update angular from our control\n                    this.propagateChange(value);\n                    this.angularValue = value;\n                }\n                else {\n                    //tslint:disable-next-line\n                    var optionalValue = value;\n                    this.propagateChange(optionalValue);\n                    this.angularValue = value;\n                }\n            }\n        }\n    };\n    FormBase.prototype.registerOnChange = function (registerFunction) {\n        this.propagateChange = registerFunction;\n    };\n    FormBase.prototype.registerOnTouched = function (registerFunction) {\n        this.propagateTouch = registerFunction;\n    };\n    FormBase.prototype.twoWaySetter = function (newVal, prop) {\n        var oldVal = this.oldValue || getValue(prop, this.properties);\n        var ele = this.inputElement || this.element;\n        if (oldVal === newVal &&\n            (ele.value === undefined || ele.value === '')) {\n            return;\n        }\n        this.saveChanges(prop, newVal, oldVal);\n        setValue(prop, (isNullOrUndefined(newVal) ? null : newVal), this.properties);\n        getValue(prop + 'Change', this).emit(newVal);\n    };\n    // tslint:disable-next-line:no-any\n    FormBase.prototype.ngAfterViewInit = function (isTempRef) {\n        // tslint:disable-next-line:no-any\n        var tempFormAfterViewThis = isTempRef || this;\n        // Used setTimeout for template binding\n        // Refer Link: https://github.com/angular/angular/issues/6005\n        // Removed setTimeout, Because we have called markForCheck() method in Angular Template Compiler\n        // setTimeout(() => {\n        /* istanbul ignore else */\n        if (typeof window !== 'undefined') {\n            tempFormAfterViewThis.appendTo(tempFormAfterViewThis.element);\n            var ele = tempFormAfterViewThis.inputElement || tempFormAfterViewThis.element;\n            ele.addEventListener('focus', tempFormAfterViewThis.ngOnFocus.bind(tempFormAfterViewThis));\n            ele.addEventListener('blur', tempFormAfterViewThis.ngOnBlur.bind(tempFormAfterViewThis));\n        }\n        // });\n    };\n    FormBase.prototype.setDisabledState = function (disabled) {\n        this.enabled = !disabled;\n        this.disabled = disabled;\n    };\n    FormBase.prototype.writeValue = function (value) {\n        var regExp = /ejs-radiobutton/g;\n        //update control value from angular\n        if (this.checked === undefined) {\n            this.value = value;\n        }\n        else {\n            // To resolve boolean type formControl value is not working for radio button control.\n            /* istanbul ignore next */\n            if (typeof value === 'boolean') {\n                if (this.ngEle && regExp.test(this.ngEle.nativeElement.outerHTML)) {\n                    this.checked = value === this.value;\n                }\n                else {\n                    this.checked = value;\n                }\n            }\n            else {\n                this.checked = value === this.value;\n            }\n        }\n        this.angularValue = value;\n        if (value === null) {\n            return;\n        }\n        this.isUpdated = true;\n        // When binding Html textbox value to syncfusion textbox, change event triggered dynamically.\n        // To prevent change event, trigger change in component side based on `preventChange` value\n        this.preventChange = true;\n    };\n    FormBase.prototype.ngOnFocus = function (e) {\n        /* istanbul ignore else */\n        if (this.skipFromEvent !== true) {\n            this.focus.emit(e);\n        }\n    };\n    FormBase.prototype.ngOnBlur = function (e) {\n        this.propagateTouch();\n        /* istanbul ignore else */\n        if (this.skipFromEvent !== true) {\n            this.blur.emit(e);\n        }\n    };\n    FormBase.isFormBase = true;\n    return FormBase;\n}());\nexport { FormBase };\n","/**\n * Index\n */\nexport * from './complex-array-base';\nexport * from './component-base';\nexport * from './form-base';\nexport * from './util';\nexport * from './template';\n","import { setTemplateEngine, getTemplateEngine } from '@syncfusion/ej2-base';\nimport { setValue, getValue } from '@syncfusion/ej2-base';\nvar stringCompiler = getTemplateEngine();\n/**\n * Angular Template Compiler\n */\nexport function compile(templateEle, helper) {\n    if (typeof templateEle === 'string') {\n        return stringCompiler(templateEle, helper);\n    }\n    else {\n        var contRef_1 = templateEle.elementRef.nativeElement._viewContainerRef;\n        var pName_1 = templateEle.elementRef.nativeElement.propName;\n        //tslint:disable-next-line        \n        return function (data, component, propName) {\n            var context = { $implicit: data };\n            /* istanbul ignore next */\n            var conRef = contRef_1 ? contRef_1 : component.viewContainerRef;\n            var viewRef = conRef.createEmbeddedView(templateEle, context);\n            viewRef.markForCheck();\n            /* istanbul ignore next */\n            var viewCollection = (component && component.registeredTemplate) ?\n                component.registeredTemplate : getValue('currentInstance.registeredTemplate', conRef);\n            propName = (propName && component.registeredTemplate) ? propName : pName_1;\n            if (typeof viewCollection[propName] === 'undefined') {\n                viewCollection[propName] = [];\n            }\n            viewCollection[propName].push(viewRef);\n            return viewRef.rootNodes;\n        };\n    }\n}\n/**\n * Property decorator for angular.\n */\nexport function Template(defaultValue) {\n    return function (target, key) {\n        var propertyDescriptor = {\n            set: setter(key),\n            get: getter(key, defaultValue),\n            enumerable: true,\n            configurable: true\n        };\n        Object.defineProperty(target, key, propertyDescriptor);\n    };\n}\nfunction setter(key) {\n    return function (val) {\n        if (val === undefined) {\n            return;\n        }\n        setValue(key + 'Ref', val, this);\n        if (typeof val !== 'string') {\n            val.elementRef.nativeElement._viewContainerRef = this.viewContainerRef;\n            val.elementRef.nativeElement.propName = key;\n        }\n        else {\n            if (this.saveChanges) {\n                this.saveChanges(key, val, undefined);\n                this.dataBind();\n            }\n        }\n    };\n}\nfunction getter(key, defaultValue) {\n    return function () {\n        /* istanbul ignore next */\n        return getValue(key + 'Ref', this) || defaultValue;\n    };\n}\n//tslint:disable-next-line\nsetTemplateEngine({ compile: compile });\n","import { EventEmitter } from '@angular/core';\nimport { isNullOrUndefined } from '@syncfusion/ej2-base';\n/**\n * Angular Utility Module\n */\n/* tslint:disable */\nexport function applyMixins(derivedClass, baseClass) {\n    baseClass.forEach(function (baseClass) {\n        Object.getOwnPropertyNames(baseClass.prototype).forEach(function (name) {\n            if (!derivedClass.prototype.hasOwnProperty(name) || baseClass.isFormBase) {\n                derivedClass.prototype[name] = baseClass.prototype[name];\n            }\n        });\n    });\n}\n/* tslint:disable */\nexport function ComponentMixins(baseClass) {\n    return function (derivedClass) {\n        applyMixins(derivedClass, baseClass);\n    };\n}\n/**\n * @private\n */\nexport function registerEvents(eventList, obj, direct) {\n    var ngEventsEmitter = {};\n    if (eventList && eventList.length) {\n        for (var _i = 0, eventList_1 = eventList; _i < eventList_1.length; _i++) {\n            var event_1 = eventList_1[_i];\n            if (direct === true) {\n                obj.propCollection[event_1] = new EventEmitter(false);\n                obj[event_1] = obj.propCollection[event_1];\n            }\n            else {\n                ngEventsEmitter[event_1] = new EventEmitter(false);\n            }\n        }\n        if (direct !== true) {\n            obj.setProperties(ngEventsEmitter, true);\n        }\n    }\n}\n/**\n * @private\n */\nexport function clearTemplate(_this, templateNames, index) {\n    var regTemplates = Object.keys(_this.registeredTemplate);\n    if (regTemplates.length) {\n        /* istanbul ignore next */\n        var regProperties = templateNames && templateNames.filter(function (val) {\n            return (/\\./g.test(val) ? false : true);\n        });\n        for (var _i = 0, _a = (regProperties && regProperties || regTemplates); _i < _a.length; _i++) {\n            var registeredTemplate = _a[_i];\n            /* istanbul ignore next */\n            if (index && index.length) {\n                for (var e = 0; e < index.length; e++) {\n                    for (var m = 0; m < _this.registeredTemplate.template.length; m++) {\n                        var value = _this.registeredTemplate.template[m].rootNodes[0];\n                        if (value === index[e]) {\n                            var rt = _this.registeredTemplate[registeredTemplate];\n                            rt[m].destroy();\n                        }\n                    }\n                }\n            }\n            else {\n                for (var _b = 0, _c = _this.registeredTemplate[registeredTemplate]; _b < _c.length; _b++) {\n                    var rt = _c[_b];\n                    if (!rt.destroyed) {\n                        if (rt._view) {\n                            var pNode = rt._view.renderer.parentNode(rt.rootNodes[0]);\n                            if (!isNullOrUndefined(pNode)) {\n                                for (var m = 0; m < rt.rootNodes.length; m++) {\n                                    pNode.appendChild(rt.rootNodes[m]);\n                                }\n                            }\n                        }\n                        rt.destroy();\n                    }\n                }\n            }\n            delete _this.registeredTemplate[registeredTemplate];\n        }\n    }\n    var _loop_1 = function (tagObject) {\n        if (tagObject.instance) {\n            /* istanbul ignore next */\n            tagObject.instance.clearTemplate((templateNames && templateNames.filter(function (val) {\n                return (new RegExp(tagObject.name).test(val) ? true : false);\n            })));\n        }\n    };\n    for (var _d = 0, _e = _this.tagObjects; _d < _e.length; _d++) {\n        var tagObject = _e[_d];\n        _loop_1(tagObject);\n    }\n}\n/**\n * To set value for the nameSpace in desired object.\n * @param {string} nameSpace - String value to the get the inner object\n * @param {any} value - Value that you need to set.\n * @param {any} obj - Object to get the inner object value.\n * @return {void}\n * @private\n */\nexport function setValue(nameSpace, value, object) {\n    var keys = nameSpace.replace(/\\[/g, '.').replace(/\\]/g, '').split('.');\n    /* istanbul ignore next */\n    var fromObj = object || {};\n    for (var i = 0; i < keys.length; i++) {\n        var key = keys[i];\n        if (i + 1 === keys.length) {\n            fromObj[key] = value === undefined ? {} : value;\n        }\n        else if (fromObj[key] === undefined) {\n            fromObj[key] = {};\n        }\n        fromObj = fromObj[key];\n    }\n    return fromObj;\n}\n","import { ChangeDetectionStrategy, Component, ContentChild, ContentChildren, Directive, ElementRef, Injector, NgModule, Renderer2, ViewContainerRef } from '@angular/core';\nimport { ArrayBase, ComplexBase, ComponentBase, ComponentMixins, Template, setValue } from '@syncfusion/ej2-angular-base';\nimport { Accordion, ContextMenu, Menu, Sidebar, Tab, Toolbar, TreeView } from '@syncfusion/ej2-navigations';\nimport { CommonModule } from '@angular/common';\n\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nlet input = ['content', 'cssClass', 'disabled', 'expanded', 'header', 'iconCss', 'visible'];\nlet outputs = [];\n/**\n * 'e-accordionitem' directive represent a item of the Angular Accordion.\n * It must be contained in a Accordion component(`ejs-accordion`).\n * ```html\n * <ejs-accordion>\n *   <e-accordionitems>\n *    <e-accordionitem header='Header1'></e-accordionitem>\n *    <e-accordionitem header='Header2' content='Content2'></e-accordionitem>\n *   </e-accordionitems>\n * </ejs-accordion>\n * ```\n */\nclass AccordionItemDirective extends ComplexBase {\n    /**\n     * @param {?} viewContainerRef\n     */\n    constructor(viewContainerRef) {\n        super();\n        this.viewContainerRef = viewContainerRef;\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n        this.directivePropList = input;\n    }\n}\nAccordionItemDirective.decorators = [\n    { type: Directive, args: [{\n                selector: 'e-accordionitems>e-accordionitem',\n                inputs: input,\n                outputs: outputs,\n                queries: {}\n            },] },\n];\n/**\n * @nocollapse\n */\nAccordionItemDirective.ctorParameters = () => [\n    { type: ViewContainerRef, },\n];\nAccordionItemDirective.propDecorators = {\n    'header': [{ type: ContentChild, args: ['header',] },],\n    'content': [{ type: ContentChild, args: ['content',] },],\n};\n__decorate([\n    Template(),\n    __metadata(\"design:type\", Object)\n], AccordionItemDirective.prototype, \"header\", void 0);\n__decorate([\n    Template(),\n    __metadata(\"design:type\", Object)\n], AccordionItemDirective.prototype, \"content\", void 0);\n/**\n * AccordionItem Array Directive\n */\nclass AccordionItemsDirective extends ArrayBase {\n    constructor() {\n        super('items');\n    }\n}\nAccordionItemsDirective.decorators = [\n    { type: Directive, args: [{\n                selector: 'ejs-accordion>e-accordionitems',\n                queries: {\n                    children: new ContentChildren(AccordionItemDirective)\n                },\n            },] },\n];\n/**\n * @nocollapse\n */\nAccordionItemsDirective.ctorParameters = () => [];\n\nvar __decorate$1 = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata$1 = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nconst inputs = ['animation', 'dataSource', 'enableHtmlSanitizer', 'enablePersistence', 'enableRtl', 'expandMode', 'expandedIndices', 'headerTemplate', 'height', 'itemTemplate', 'items', 'locale', 'width'];\nconst outputs$1 = ['clicked', 'created', 'destroyed', 'expanded', 'expanding', 'expandedIndicesChange'];\nconst twoWays = ['expandedIndices'];\n/**\n * Represents the Angular Accordion Component.\n * ```html\n * <ejs-accordion></ejs-accordion>\n * ```\n */\nlet AccordionComponent = class AccordionComponent extends Accordion {\n    /**\n     * @param {?} ngEle\n     * @param {?} srenderer\n     * @param {?} viewContainerRef\n     * @param {?} injector\n     */\n    constructor(ngEle, srenderer, viewContainerRef, injector) {\n        super();\n        this.ngEle = ngEle;\n        this.srenderer = srenderer;\n        this.viewContainerRef = viewContainerRef;\n        this.injector = injector;\n        this.tags = ['items'];\n        this.element = this.ngEle.nativeElement;\n        this.injectedModules = this.injectedModules || [];\n        this.registerEvents(outputs$1);\n        this.addTwoWay.call(this, twoWays);\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.containerContext = new ComponentBase();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this.containerContext.ngOnInit(this);\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewInit() {\n        this.containerContext.ngAfterViewInit(this);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.containerContext.ngOnDestroy(this);\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentChecked() {\n        this.tagObjects[0].instance = this.childItems;\n        this.containerContext.ngAfterContentChecked(this);\n    }\n};\nAccordionComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'ejs-accordion',\n                inputs: inputs,\n                outputs: outputs$1,\n                template: `<ng-content select='div'></ng-content>`,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                queries: {\n                    childItems: new ContentChild(AccordionItemsDirective)\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nAccordionComponent.ctorParameters = () => [\n    { type: ElementRef, },\n    { type: Renderer2, },\n    { type: ViewContainerRef, },\n    { type: Injector, },\n];\nAccordionComponent.propDecorators = {\n    'headerTemplate': [{ type: ContentChild, args: ['headerTemplate',] },],\n    'itemTemplate': [{ type: ContentChild, args: ['itemTemplate',] },],\n};\n__decorate$1([\n    Template(),\n    __metadata$1(\"design:type\", Object)\n], AccordionComponent.prototype, \"headerTemplate\", void 0);\n__decorate$1([\n    Template(),\n    __metadata$1(\"design:type\", Object)\n], AccordionComponent.prototype, \"itemTemplate\", void 0);\nAccordionComponent = __decorate$1([\n    ComponentMixins([ComponentBase]),\n    __metadata$1(\"design:paramtypes\", [ElementRef,\n        Renderer2,\n        ViewContainerRef,\n        Injector])\n], AccordionComponent);\n\n/**\n * NgModule definition for the Accordion component.\n */\nclass AccordionModule {\n}\nAccordionModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [CommonModule],\n                declarations: [\n                    AccordionComponent,\n                    AccordionItemDirective,\n                    AccordionItemsDirective\n                ],\n                exports: [\n                    AccordionComponent,\n                    AccordionItemDirective,\n                    AccordionItemsDirective\n                ]\n            },] },\n];\n/**\n * @nocollapse\n */\nAccordionModule.ctorParameters = () => [];\n\n/**\n * NgModule definition for the Accordion component with providers.\n */\nclass AccordionAllModule {\n}\nAccordionAllModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [CommonModule, AccordionModule],\n                exports: [\n                    AccordionModule\n                ],\n                providers: []\n            },] },\n];\n/**\n * @nocollapse\n */\nAccordionAllModule.ctorParameters = () => [];\n\nvar __decorate$2 = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata$2 = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nlet input$1 = ['align', 'cssClass', 'disabled', 'htmlAttributes', 'id', 'overflow', 'prefixIcon', 'showAlwaysInPopup', 'showTextOn', 'suffixIcon', 'template', 'text', 'tooltipText', 'type', 'visible', 'width'];\nlet outputs$2 = ['click'];\n/**\n * 'e-item' directive represent a item of the Angular Toolbar.\n * It must be contained in a Toolbar component(`ejs-toolbar`).\n * ```html\n * <ejs-toolbar>\n *   <e-items>\n *    <e-item text='Cut'></e-item>\n *    <e-item text='Copy'></e-item>\n *   </e-items>\n * </ejs-toolbar>\n * ```\n */\nclass ItemDirective extends ComplexBase {\n    /**\n     * @param {?} viewContainerRef\n     */\n    constructor(viewContainerRef) {\n        super();\n        this.viewContainerRef = viewContainerRef;\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs$2);\n        this.directivePropList = input$1;\n    }\n}\nItemDirective.decorators = [\n    { type: Directive, args: [{\n                selector: 'e-items>e-item',\n                inputs: input$1,\n                outputs: outputs$2,\n                queries: {}\n            },] },\n];\n/**\n * @nocollapse\n */\nItemDirective.ctorParameters = () => [\n    { type: ViewContainerRef, },\n];\nItemDirective.propDecorators = {\n    'template': [{ type: ContentChild, args: ['template',] },],\n};\n__decorate$2([\n    Template(),\n    __metadata$2(\"design:type\", Object)\n], ItemDirective.prototype, \"template\", void 0);\n/**\n * Item Array Directive\n */\nclass ItemsDirective extends ArrayBase {\n    constructor() {\n        super('items');\n    }\n}\nItemsDirective.decorators = [\n    { type: Directive, args: [{\n                selector: 'ejs-toolbar>e-items',\n                queries: {\n                    children: new ContentChildren(ItemDirective)\n                },\n            },] },\n];\n/**\n * @nocollapse\n */\nItemsDirective.ctorParameters = () => [];\n\nvar __decorate$3 = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata$3 = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nconst inputs$1 = ['allowKeyboard', 'cssClass', 'enableCollision', 'enableHtmlSanitizer', 'enablePersistence', 'enableRtl', 'height', 'items', 'locale', 'overflowMode', 'scrollStep', 'width'];\nconst outputs$3 = ['beforeCreate', 'clicked', 'created', 'destroyed'];\nconst twoWays$1 = [''];\n/**\n * Represents the Angular Toolbar Component.\n * ```html\n * <ejs-toolbar></ejs-toolbar>\n * ```\n */\nlet ToolbarComponent = class ToolbarComponent extends Toolbar {\n    /**\n     * @param {?} ngEle\n     * @param {?} srenderer\n     * @param {?} viewContainerRef\n     * @param {?} injector\n     */\n    constructor(ngEle, srenderer, viewContainerRef, injector) {\n        super();\n        this.ngEle = ngEle;\n        this.srenderer = srenderer;\n        this.viewContainerRef = viewContainerRef;\n        this.injector = injector;\n        this.tags = ['items'];\n        this.element = this.ngEle.nativeElement;\n        this.injectedModules = this.injectedModules || [];\n        this.registerEvents(outputs$3);\n        this.addTwoWay.call(this, twoWays$1);\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.containerContext = new ComponentBase();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this.containerContext.ngOnInit(this);\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewInit() {\n        this.containerContext.ngAfterViewInit(this);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.containerContext.ngOnDestroy(this);\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentChecked() {\n        this.tagObjects[0].instance = this.childItems;\n        this.containerContext.ngAfterContentChecked(this);\n    }\n};\nToolbarComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'ejs-toolbar',\n                inputs: inputs$1,\n                outputs: outputs$3,\n                template: `<ng-content select='div'></ng-content>`,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                queries: {\n                    childItems: new ContentChild(ItemsDirective)\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nToolbarComponent.ctorParameters = () => [\n    { type: ElementRef, },\n    { type: Renderer2, },\n    { type: ViewContainerRef, },\n    { type: Injector, },\n];\nToolbarComponent = __decorate$3([\n    ComponentMixins([ComponentBase]),\n    __metadata$3(\"design:paramtypes\", [ElementRef,\n        Renderer2,\n        ViewContainerRef,\n        Injector])\n], ToolbarComponent);\n\n/**\n * NgModule definition for the Toolbar component.\n */\nclass ToolbarModule {\n}\nToolbarModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [CommonModule],\n                declarations: [\n                    ToolbarComponent,\n                    ItemDirective,\n                    ItemsDirective\n                ],\n                exports: [\n                    ToolbarComponent,\n                    ItemDirective,\n                    ItemsDirective\n                ]\n            },] },\n];\n/**\n * @nocollapse\n */\nToolbarModule.ctorParameters = () => [];\n\n/**\n * NgModule definition for the Toolbar component with providers.\n */\nclass ToolbarAllModule {\n}\nToolbarAllModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [CommonModule, ToolbarModule],\n                exports: [\n                    ToolbarModule\n                ],\n                providers: []\n            },] },\n];\n/**\n * @nocollapse\n */\nToolbarAllModule.ctorParameters = () => [];\n\nvar __decorate$4 = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata$4 = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nconst inputs$2 = ['animationSettings', 'cssClass', 'enableHtmlSanitizer', 'enablePersistence', 'enableRtl', 'enableScrolling', 'fields', 'filter', 'items', 'locale', 'showItemOnClick', 'target', 'template'];\nconst outputs$4 = ['beforeClose', 'beforeItemRender', 'beforeOpen', 'created', 'onClose', 'onOpen', 'select'];\nconst twoWays$2 = [''];\n/**\n * Represents the EJ2 Angular ContextMenu Component.\n * ```html\n * <div id='target'>Right click / Touch hold to open the ContextMenu</div>\n * <ejs-contextmenu target='#target' [items]='menuItems'></ejs-contextmenu>\n * ```\n */\nlet ContextMenuComponent = class ContextMenuComponent extends ContextMenu {\n    /**\n     * @param {?} ngEle\n     * @param {?} srenderer\n     * @param {?} viewContainerRef\n     * @param {?} injector\n     */\n    constructor(ngEle, srenderer, viewContainerRef, injector) {\n        super();\n        this.ngEle = ngEle;\n        this.srenderer = srenderer;\n        this.viewContainerRef = viewContainerRef;\n        this.injector = injector;\n        this.element = this.ngEle.nativeElement;\n        this.injectedModules = this.injectedModules || [];\n        this.registerEvents(outputs$4);\n        this.addTwoWay.call(this, twoWays$2);\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.context = new ComponentBase();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this.context.ngOnInit(this);\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewInit() {\n        this.context.ngAfterViewInit(this);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.context.ngOnDestroy(this);\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentChecked() {\n        this.context.ngAfterContentChecked(this);\n    }\n};\nContextMenuComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'ejs-contextmenu',\n                inputs: inputs$2,\n                outputs: outputs$4,\n                template: '',\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                queries: {}\n            },] },\n];\n/**\n * @nocollapse\n */\nContextMenuComponent.ctorParameters = () => [\n    { type: ElementRef, },\n    { type: Renderer2, },\n    { type: ViewContainerRef, },\n    { type: Injector, },\n];\nContextMenuComponent = __decorate$4([\n    ComponentMixins([ComponentBase]),\n    __metadata$4(\"design:paramtypes\", [ElementRef,\n        Renderer2,\n        ViewContainerRef,\n        Injector])\n], ContextMenuComponent);\n\n/**\n * NgModule definition for the ContextMenu component.\n */\nclass ContextMenuModule {\n}\nContextMenuModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [CommonModule],\n                declarations: [\n                    ContextMenuComponent\n                ],\n                exports: [\n                    ContextMenuComponent\n                ]\n            },] },\n];\n/**\n * @nocollapse\n */\nContextMenuModule.ctorParameters = () => [];\n\n/**\n * NgModule definition for the ContextMenu component with providers.\n */\nclass ContextMenuAllModule {\n}\nContextMenuAllModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [CommonModule, ContextMenuModule],\n                exports: [\n                    ContextMenuModule\n                ],\n                providers: []\n            },] },\n];\n/**\n * @nocollapse\n */\nContextMenuAllModule.ctorParameters = () => [];\n\nvar __decorate$5 = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata$5 = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nlet input$2 = ['content', 'cssClass', 'disabled', 'header', 'headerTemplate', 'visible'];\nlet outputs$5 = [];\n/**\n * 'e-tabitem' directive represent a item of the Angular Tab.\n * It must be contained in a Tab component(`ejs-tab`).\n * ```html\n * <ejs-tab>\n *  <e-tabitems>\n *   <e-tabitem [header]='Header 1' [content]='Content 1'></e-tabitem>\n *   <e-tabitem [header]='Header 2' [content]='Content 2'></e-tabitem>\n *  <e-tabitems>\n * </ejs-tab>\n * ```\n */\nclass TabItemDirective extends ComplexBase {\n    /**\n     * @param {?} viewContainerRef\n     */\n    constructor(viewContainerRef) {\n        super();\n        this.viewContainerRef = viewContainerRef;\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs$5);\n        this.directivePropList = input$2;\n    }\n}\nTabItemDirective.decorators = [\n    { type: Directive, args: [{\n                selector: 'e-tabitems>e-tabitem',\n                inputs: input$2,\n                outputs: outputs$5,\n                queries: {}\n            },] },\n];\n/**\n * @nocollapse\n */\nTabItemDirective.ctorParameters = () => [\n    { type: ViewContainerRef, },\n];\nTabItemDirective.propDecorators = {\n    'content': [{ type: ContentChild, args: ['content',] },],\n    'header_text': [{ type: ContentChild, args: ['headerText',] },],\n    'headerTemplate': [{ type: ContentChild, args: ['headerTemplate',] },],\n};\n__decorate$5([\n    Template(),\n    __metadata$5(\"design:type\", Object)\n], TabItemDirective.prototype, \"content\", void 0);\n__decorate$5([\n    Template(),\n    __metadata$5(\"design:type\", Object)\n], TabItemDirective.prototype, \"header_text\", void 0);\n__decorate$5([\n    Template(),\n    __metadata$5(\"design:type\", Object)\n], TabItemDirective.prototype, \"headerTemplate\", void 0);\n/**\n * TabItem Array Directive\n */\nclass TabItemsDirective extends ArrayBase {\n    constructor() {\n        super('items');\n    }\n}\nTabItemsDirective.decorators = [\n    { type: Directive, args: [{\n                selector: 'ejs-tab>e-tabitems',\n                queries: {\n                    children: new ContentChildren(TabItemDirective)\n                },\n            },] },\n];\n/**\n * @nocollapse\n */\nTabItemsDirective.ctorParameters = () => [];\n\nvar __decorate$6 = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata$6 = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nconst inputs$3 = ['animation', 'cssClass', 'enableHtmlSanitizer', 'enablePersistence', 'enableRtl', 'headerPlacement', 'height', 'heightAdjustMode', 'items', 'loadOn', 'locale', 'overflowMode', 'scrollStep', 'selectedItem', 'showCloseButton', 'width'];\nconst outputs$6 = ['added', 'adding', 'created', 'destroyed', 'removed', 'removing', 'selected', 'selecting'];\nconst twoWays$3 = [''];\n/**\n * Represents the Angular Tab Component.\n * ```html\n * <ejs-tab></ejs-tab>\n * ```\n */\nlet TabComponent = class TabComponent extends Tab {\n    /**\n     * @param {?} ngEle\n     * @param {?} srenderer\n     * @param {?} viewContainerRef\n     * @param {?} injector\n     */\n    constructor(ngEle, srenderer, viewContainerRef, injector) {\n        super();\n        this.ngEle = ngEle;\n        this.srenderer = srenderer;\n        this.viewContainerRef = viewContainerRef;\n        this.injector = injector;\n        this.tags = ['items'];\n        this.element = this.ngEle.nativeElement;\n        this.injectedModules = this.injectedModules || [];\n        this.registerEvents(outputs$6);\n        this.addTwoWay.call(this, twoWays$3);\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.containerContext = new ComponentBase();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this.containerContext.ngOnInit(this);\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewInit() {\n        this.containerContext.ngAfterViewInit(this);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.containerContext.ngOnDestroy(this);\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentChecked() {\n        this.tagObjects[0].instance = this.childItems;\n        this.containerContext.ngAfterContentChecked(this);\n    }\n};\nTabComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'ejs-tab',\n                inputs: inputs$3,\n                outputs: outputs$6,\n                template: `<ng-content select='div'></ng-content>`,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                queries: {\n                    childItems: new ContentChild(TabItemsDirective)\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nTabComponent.ctorParameters = () => [\n    { type: ElementRef, },\n    { type: Renderer2, },\n    { type: ViewContainerRef, },\n    { type: Injector, },\n];\nTabComponent = __decorate$6([\n    ComponentMixins([ComponentBase]),\n    __metadata$6(\"design:paramtypes\", [ElementRef,\n        Renderer2,\n        ViewContainerRef,\n        Injector])\n], TabComponent);\n\n/**\n * NgModule definition for the Tab component.\n */\nclass TabModule {\n}\nTabModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [CommonModule],\n                declarations: [\n                    TabComponent,\n                    TabItemDirective,\n                    TabItemsDirective\n                ],\n                exports: [\n                    TabComponent,\n                    TabItemDirective,\n                    TabItemsDirective\n                ]\n            },] },\n];\n/**\n * @nocollapse\n */\nTabModule.ctorParameters = () => [];\n\n/**\n * NgModule definition for the Tab component with providers.\n */\nclass TabAllModule {\n}\nTabAllModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [CommonModule, TabModule],\n                exports: [\n                    TabModule\n                ],\n                providers: []\n            },] },\n];\n/**\n * @nocollapse\n */\nTabAllModule.ctorParameters = () => [];\n\nvar __decorate$7 = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata$7 = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nconst inputs$4 = ['allowDragAndDrop', 'allowEditing', 'allowMultiSelection', 'animation', 'autoCheck', 'checkedNodes', 'cssClass', 'disabled', 'dragArea', 'enableHtmlSanitizer', 'enablePersistence', 'enableRtl', 'expandOn', 'expandedNodes', 'fields', 'fullRowNavigable', 'fullRowSelect', 'loadOnDemand', 'locale', 'nodeTemplate', 'selectedNodes', 'showCheckBox', 'sortOrder'];\nconst outputs$7 = ['actionFailure', 'created', 'dataBound', 'dataSourceChanged', 'destroyed', 'drawNode', 'keyPress', 'nodeChecked', 'nodeChecking', 'nodeClicked', 'nodeCollapsed', 'nodeCollapsing', 'nodeDragStart', 'nodeDragStop', 'nodeDragging', 'nodeDropped', 'nodeEdited', 'nodeEditing', 'nodeExpanded', 'nodeExpanding', 'nodeSelected', 'nodeSelecting'];\nconst twoWays$4 = [''];\n/**\n * TreeView component is used to represent the hierarchical data in tree like structure with advanced functions to perform edit, drag and drop, selection with check-box and more.\n * ```html\n * <ej-treeview allowDragAndDrop='true'></ej-treeview>\n * ```\n */\nlet TreeViewComponent = class TreeViewComponent extends TreeView {\n    /**\n     * @param {?} ngEle\n     * @param {?} srenderer\n     * @param {?} viewContainerRef\n     * @param {?} injector\n     */\n    constructor(ngEle, srenderer, viewContainerRef, injector) {\n        super();\n        this.ngEle = ngEle;\n        this.srenderer = srenderer;\n        this.viewContainerRef = viewContainerRef;\n        this.injector = injector;\n        this.element = this.ngEle.nativeElement;\n        this.injectedModules = this.injectedModules || [];\n        this.registerEvents(outputs$7);\n        this.addTwoWay.call(this, twoWays$4);\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.context = new ComponentBase();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this.context.ngOnInit(this);\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewInit() {\n        this.context.ngAfterViewInit(this);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.context.ngOnDestroy(this);\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentChecked() {\n        this.context.ngAfterContentChecked(this);\n    }\n};\nTreeViewComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'ejs-treeview',\n                inputs: inputs$4,\n                outputs: outputs$7,\n                template: '',\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                queries: {}\n            },] },\n];\n/**\n * @nocollapse\n */\nTreeViewComponent.ctorParameters = () => [\n    { type: ElementRef, },\n    { type: Renderer2, },\n    { type: ViewContainerRef, },\n    { type: Injector, },\n];\nTreeViewComponent.propDecorators = {\n    'nodeTemplate': [{ type: ContentChild, args: ['nodeTemplate',] },],\n};\n__decorate$7([\n    Template(),\n    __metadata$7(\"design:type\", Object)\n], TreeViewComponent.prototype, \"nodeTemplate\", void 0);\nTreeViewComponent = __decorate$7([\n    ComponentMixins([ComponentBase]),\n    __metadata$7(\"design:paramtypes\", [ElementRef,\n        Renderer2,\n        ViewContainerRef,\n        Injector])\n], TreeViewComponent);\n\n/**\n * NgModule definition for the TreeView component.\n */\nclass TreeViewModule {\n}\nTreeViewModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [CommonModule],\n                declarations: [\n                    TreeViewComponent\n                ],\n                exports: [\n                    TreeViewComponent\n                ]\n            },] },\n];\n/**\n * @nocollapse\n */\nTreeViewModule.ctorParameters = () => [];\n\n/**\n * NgModule definition for the TreeView component with providers.\n */\nclass TreeViewAllModule {\n}\nTreeViewAllModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [CommonModule, TreeViewModule],\n                exports: [\n                    TreeViewModule\n                ],\n                providers: []\n            },] },\n];\n/**\n * @nocollapse\n */\nTreeViewAllModule.ctorParameters = () => [];\n\nvar __decorate$8 = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata$8 = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nconst inputs$5 = ['animate', 'closeOnDocumentClick', 'dockSize', 'enableDock', 'enableGestures', 'enablePersistence', 'enableRtl', 'height', 'isOpen', 'locale', 'mediaQuery', 'position', 'showBackdrop', 'target', 'type', 'width', 'zIndex'];\nconst outputs$8 = ['change', 'close', 'created', 'destroyed', 'open', 'isOpenChange'];\nconst twoWays$5 = ['isOpen'];\n/**\n * Represents the Essential JS 2 Angular Sidebar Component.\n * ```html\n * <ejs-sidebar></ejs-sidebar>\n * ```\n */\nlet SidebarComponent = class SidebarComponent extends Sidebar {\n    /**\n     * @param {?} ngEle\n     * @param {?} srenderer\n     * @param {?} viewContainerRef\n     * @param {?} injector\n     */\n    constructor(ngEle, srenderer, viewContainerRef, injector) {\n        super();\n        this.ngEle = ngEle;\n        this.srenderer = srenderer;\n        this.viewContainerRef = viewContainerRef;\n        this.injector = injector;\n        this.element = this.ngEle.nativeElement;\n        this.injectedModules = this.injectedModules || [];\n        this.registerEvents(outputs$8);\n        this.addTwoWay.call(this, twoWays$5);\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.containerContext = new ComponentBase();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this.containerContext.ngOnInit(this);\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewInit() {\n        this.containerContext.ngAfterViewInit(this);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.containerContext.ngOnDestroy(this);\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentChecked() {\n        this.containerContext.ngAfterContentChecked(this);\n    }\n};\nSidebarComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'ejs-sidebar',\n                inputs: inputs$5,\n                outputs: outputs$8,\n                template: `<ng-content ></ng-content>`,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                queries: {}\n            },] },\n];\n/**\n * @nocollapse\n */\nSidebarComponent.ctorParameters = () => [\n    { type: ElementRef, },\n    { type: Renderer2, },\n    { type: ViewContainerRef, },\n    { type: Injector, },\n];\nSidebarComponent = __decorate$8([\n    ComponentMixins([ComponentBase]),\n    __metadata$8(\"design:paramtypes\", [ElementRef,\n        Renderer2,\n        ViewContainerRef,\n        Injector])\n], SidebarComponent);\n\n/**\n * NgModule definition for the Sidebar component.\n */\nclass SidebarModule {\n}\nSidebarModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [CommonModule],\n                declarations: [\n                    SidebarComponent\n                ],\n                exports: [\n                    SidebarComponent\n                ]\n            },] },\n];\n/**\n * @nocollapse\n */\nSidebarModule.ctorParameters = () => [];\n\n/**\n * NgModule definition for the Sidebar component with providers.\n */\nclass SidebarAllModule {\n}\nSidebarAllModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [CommonModule, SidebarModule],\n                exports: [\n                    SidebarModule\n                ],\n                providers: []\n            },] },\n];\n/**\n * @nocollapse\n */\nSidebarAllModule.ctorParameters = () => [];\n\nlet input$3 = ['iconCss', 'id', 'items', 'separator', 'text', 'url'];\nlet outputs$9 = [];\nclass MenuItemDirective extends ComplexBase {\n    /**\n     * @param {?} viewContainerRef\n     */\n    constructor(viewContainerRef) {\n        super();\n        this.viewContainerRef = viewContainerRef;\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs$9);\n        this.directivePropList = input$3;\n    }\n}\nMenuItemDirective.decorators = [\n    { type: Directive, args: [{\n                selector: 'ejs-menu>e-menu-items>e-menu-item>',\n                inputs: input$3,\n                outputs: outputs$9,\n                queries: {}\n            },] },\n];\n/**\n * @nocollapse\n */\nMenuItemDirective.ctorParameters = () => [\n    { type: ViewContainerRef, },\n];\n/**\n * MenuItem Array Directive\n */\nclass MenuItemsDirective extends ArrayBase {\n    constructor() {\n        super('items');\n    }\n}\nMenuItemsDirective.decorators = [\n    { type: Directive, args: [{\n                selector: 'ejs-menu>e-menu-items',\n                queries: {\n                    children: new ContentChildren(MenuItemDirective)\n                },\n            },] },\n];\n/**\n * @nocollapse\n */\nMenuItemsDirective.ctorParameters = () => [];\n\nvar __decorate$9 = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata$9 = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nconst inputs$6 = ['animationSettings', 'cssClass', 'enableHtmlSanitizer', 'enablePersistence', 'enableRtl', 'enableScrolling', 'fields', 'filter', 'hamburgerMode', 'items', 'locale', 'orientation', 'showItemOnClick', 'target', 'template', 'title'];\nconst outputs$10 = ['beforeClose', 'beforeItemRender', 'beforeOpen', 'created', 'onClose', 'onOpen', 'select'];\nconst twoWays$6 = [''];\n/**\n * Represents the EJ2 Angular Menu Component.\n * ```html\n * <ejs-menu [items]='menuItems'></ejs-menu>\n * ```\n */\nlet MenuComponent = class MenuComponent extends Menu {\n    /**\n     * @param {?} ngEle\n     * @param {?} srenderer\n     * @param {?} viewContainerRef\n     * @param {?} injector\n     */\n    constructor(ngEle, srenderer, viewContainerRef, injector) {\n        super();\n        this.ngEle = ngEle;\n        this.srenderer = srenderer;\n        this.viewContainerRef = viewContainerRef;\n        this.injector = injector;\n        this.tags = ['items'];\n        this.element = this.ngEle.nativeElement;\n        this.injectedModules = this.injectedModules || [];\n        this.registerEvents(outputs$10);\n        this.addTwoWay.call(this, twoWays$6);\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.context = new ComponentBase();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this.context.ngOnInit(this);\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewInit() {\n        this.context.ngAfterViewInit(this);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.context.ngOnDestroy(this);\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentChecked() {\n        this.tagObjects[0].instance = this.childItems;\n        this.context.ngAfterContentChecked(this);\n    }\n};\nMenuComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'ejs-menu',\n                inputs: inputs$6,\n                outputs: outputs$10,\n                template: '',\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                queries: {\n                    childItems: new ContentChild(MenuItemsDirective)\n                }\n            },] },\n];\n/**\n * @nocollapse\n */\nMenuComponent.ctorParameters = () => [\n    { type: ElementRef, },\n    { type: Renderer2, },\n    { type: ViewContainerRef, },\n    { type: Injector, },\n];\nMenuComponent.propDecorators = {\n    'template': [{ type: ContentChild, args: ['template',] },],\n};\n__decorate$9([\n    Template(),\n    __metadata$9(\"design:type\", Object)\n], MenuComponent.prototype, \"template\", void 0);\nMenuComponent = __decorate$9([\n    ComponentMixins([ComponentBase]),\n    __metadata$9(\"design:paramtypes\", [ElementRef,\n        Renderer2,\n        ViewContainerRef,\n        Injector])\n], MenuComponent);\n\n/**\n * NgModule definition for the Menu component.\n */\nclass MenuModule {\n}\nMenuModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [CommonModule],\n                declarations: [\n                    MenuComponent,\n                    MenuItemDirective,\n                    MenuItemsDirective\n                ],\n                exports: [\n                    MenuComponent,\n                    MenuItemDirective,\n                    MenuItemsDirective\n                ]\n            },] },\n];\n/**\n * @nocollapse\n */\nMenuModule.ctorParameters = () => [];\n\n/**\n * NgModule definition for the Menu component with providers.\n */\nclass MenuAllModule {\n}\nMenuAllModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [CommonModule, MenuModule],\n                exports: [\n                    MenuModule\n                ],\n                providers: []\n            },] },\n];\n/**\n * @nocollapse\n */\nMenuAllModule.ctorParameters = () => [];\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AccordionItemDirective, AccordionItemsDirective, AccordionComponent, AccordionModule, AccordionAllModule, ItemDirective, ItemsDirective, ToolbarComponent, ToolbarModule, ToolbarAllModule, ContextMenuComponent, ContextMenuModule, ContextMenuAllModule, TabItemDirective, TabItemsDirective, TabComponent, TabModule, TabAllModule, TreeViewComponent, TreeViewModule, TreeViewAllModule, SidebarComponent, SidebarModule, SidebarAllModule, MenuItemDirective, MenuItemsDirective, MenuComponent, MenuModule, MenuAllModule, inputs as ɵa, outputs$1 as ɵb, inputs$2 as ɵe, outputs$4 as ɵf, inputs$6 as ɵm, outputs$10 as ɵn, inputs$5 as ɵk, outputs$8 as ɵl, inputs$3 as ɵg, outputs$6 as ɵh, inputs$1 as ɵc, outputs$3 as ɵd, inputs$4 as ɵi, outputs$7 as ɵj };\nexport { MenuAnimationSettings, MenuItem, HScroll, VScroll, addScrolling, destroyScroll, Item, Toolbar, AccordionActionSettings, AccordionAnimationSettings, AccordionItem, Accordion, ContextMenu, Menu, TabActionSettings, TabAnimationSettings, Header, TabItem, Tab, FieldsSettings, ActionSettings, NodeAnimationSettings, TreeView, Sidebar } from '@syncfusion/ej2-navigations';\n//# sourceMappingURL=ej2-angular-navigations.js.map\n","let instances = 'ej2_instances';\nlet uid = 0;\nlet isBlazorPlatform = false;\n/**\n * Function to check whether the platform is blazor or not.\n * @return {boolean} result\n * @private\n */\nfunction disableBlazorMode() {\n    isBlazorPlatform = false;\n}\n/**\n * Create Instance from constructor function with desired parameters.\n * @param {Function} classFunction - Class function to which need to create instance\n * @param {any[]} params - Parameters need to passed while creating instance\n * @return {any}\n * @private\n */\nfunction createInstance(classFunction, params) {\n    let arrayParam = params;\n    arrayParam.unshift(undefined);\n    return new (Function.prototype.bind.apply(classFunction, arrayParam));\n}\n/**\n * To run a callback function immediately after the browser has completed other operations.\n * @param {Function} handler - callback function to be triggered.\n * @return {Function}\n * @private\n */\nfunction setImmediate(handler) {\n    let unbind;\n    let num = new Uint16Array(5);\n    let intCrypto = window.msCrypto || window.crypto;\n    intCrypto.getRandomValues(num);\n    let secret = 'ej2' + combineArray(num);\n    let messageHandler = (event) => {\n        if (event.source === window && typeof event.data === 'string' && event.data.length <= 32 && event.data === secret) {\n            handler();\n            unbind();\n        }\n    };\n    window.addEventListener('message', messageHandler, false);\n    window.postMessage(secret, '*');\n    return unbind = () => {\n        window.removeEventListener('message', messageHandler);\n        handler = messageHandler = secret = undefined;\n    };\n}\n/**\n * To get nameSpace value from the desired object.\n * @param {string} nameSpace - String value to the get the inner object\n * @param {any} obj - Object to get the inner object value.\n * @return {any}\n * @private\n */\nfunction getValue(nameSpace, obj) {\n    /* tslint:disable no-any */\n    let value = obj;\n    let splits = nameSpace.replace(/\\[/g, '.').replace(/\\]/g, '').split('.');\n    for (let i = 0; i < splits.length && !isUndefined(value); i++) {\n        value = value[splits[i]];\n    }\n    return value;\n}\n/**\n * To set value for the nameSpace in desired object.\n * @param {string} nameSpace - String value to the get the inner object\n * @param {any} value - Value that you need to set.\n * @param {any} obj - Object to get the inner object value.\n * @return {void}\n * @private\n */\nfunction setValue(nameSpace, value, obj) {\n    let keys = nameSpace.replace(/\\[/g, '.').replace(/\\]/g, '').split('.');\n    let start = obj || {};\n    let fromObj = start;\n    let i;\n    let length = keys.length;\n    let key;\n    for (i = 0; i < length; i++) {\n        key = keys[i];\n        if (i + 1 === length) {\n            fromObj[key] = value === undefined ? {} : value;\n        }\n        else if (isNullOrUndefined(fromObj[key])) {\n            fromObj[key] = {};\n        }\n        fromObj = fromObj[key];\n    }\n    return start;\n}\n/**\n * Delete an item from Object\n * @param {any} obj - Object in which we need to delete an item.\n * @param {string} params - String value to the get the inner object\n * @return {void}\n * @private\n */\nfunction deleteObject(obj, key) {\n    delete obj[key];\n}\n/**\n * Check weather the given argument is only object.\n * @param {any} obj - Object which is need to check.\n * @return {boolean}\n * @private\n */\nfunction isObject(obj) {\n    let objCon = {};\n    return (!isNullOrUndefined(obj) && obj.constructor === objCon.constructor);\n}\n/**\n * To get enum value by giving the string.\n * @param {any} enumObject - Enum object.\n * @param {string} enumValue - Enum value to be searched\n * @return {any}\n * @private\n */\nfunction getEnumValue(enumObject, enumValue) {\n    return enumObject[enumValue];\n}\n/**\n * Merge the source object into destination object.\n * @param {any} source - source object which is going to merge with destination object\n * @param {any} destination - object need to be merged\n * @return {void}\n * @private\n */\nfunction merge(source, destination) {\n    if (!isNullOrUndefined(destination)) {\n        let temrObj = source;\n        let tempProp = destination;\n        let keys = Object.keys(destination);\n        let deepmerge = 'deepMerge';\n        for (let key of keys) {\n            if (!isNullOrUndefined(temrObj[deepmerge]) && (temrObj[deepmerge].indexOf(key) !== -1) &&\n                (isObject(tempProp[key]) || Array.isArray(tempProp[key]))) {\n                extend(temrObj[key], temrObj[key], tempProp[key], true);\n            }\n            else {\n                temrObj[key] = tempProp[key];\n            }\n        }\n    }\n}\n/**\n * Extend the two object with newer one.\n * @param {any} copied - Resultant object after merged\n * @param {Object} first - First object need to merge\n * @param {Object} second - Second object need to merge\n * @return {Object}\n * @private\n */\nfunction extend(copied, first, second, deep) {\n    let result = copied && typeof copied === 'object' ? copied : {};\n    let length = arguments.length;\n    if (deep) {\n        length = length - 1;\n    }\n    for (let i = 1; i < length; i++) {\n        if (!arguments[i]) {\n            continue;\n        }\n        let obj1 = arguments[i];\n        Object.keys(obj1).forEach((key) => {\n            let src = result[key];\n            let copy = obj1[key];\n            let clone;\n            let isArrayChanged = Array.isArray(copy) && Array.isArray(src) && (copy.length !== src.length);\n            let blazorEventExtend = isBlazor() ? (!(src instanceof Event) && !isArrayChanged) : true;\n            if (deep && blazorEventExtend && (isObject(copy) || Array.isArray(copy))) {\n                if (isObject(copy)) {\n                    clone = src ? src : {};\n                    if (Array.isArray(clone) && clone.hasOwnProperty('isComplexArray')) {\n                        extend(clone, {}, copy, deep);\n                    }\n                    else {\n                        result[key] = extend(clone, {}, copy, deep);\n                    }\n                }\n                else {\n                    /* istanbul ignore next */\n                    clone = isBlazor() ? src && Object.keys(copy).length : src ? src : [];\n                    result[key] = extend([], clone, copy, deep);\n                }\n            }\n            else {\n                result[key] = copy;\n            }\n        });\n    }\n    return result;\n}\n/**\n * To check whether the object is null or undefined.\n * @param {Object} value - To check the object is null or undefined\n * @return {boolean}\n * @private\n */\nfunction isNullOrUndefined(value) {\n    return value === undefined || value === null;\n}\n/**\n * To check whether the object is undefined.\n * @param {Object} value - To check the object is undefined\n * @return {boolean}\n * @private\n */\nfunction isUndefined(value) {\n    return ('undefined' === typeof value);\n}\n/**\n * To return the generated unique name\n * @param {string} definedName - To concatenate the unique id to provided name\n * @return {string}\n * @private\n */\nfunction getUniqueID(definedName) {\n    return definedName + '_' + uid++;\n}\n/**\n * It limits the rate at which a function can fire. The function will fire only once every provided second instead of as quickly.\n * @param {Function} eventFunction - Specifies the function to run when the event occurs\n * @param {number} delay - A number that specifies the milliseconds for function delay call option\n * @return {Function}\n * @private\n */\nfunction debounce(eventFunction, delay) {\n    let out;\n    // tslint:disable-next-line\n    return function () {\n        let args = arguments;\n        let later = () => {\n            out = null;\n            return eventFunction.apply(this, args);\n        };\n        clearTimeout(out);\n        out = setTimeout(later, delay);\n    };\n}\n// Added since lint ignored after added '//tslint:disable-next-line' \n/* tslint:disable:no-any */\n/**\n * To convert the object to string for query url\n * @param  {Object} data\n * @returns string\n * @private\n */\nfunction queryParams(data) {\n    let array = [];\n    let keys = Object.keys(data);\n    for (let key of keys) {\n        array.push(encodeURIComponent(key) + '=' + encodeURIComponent('' + data[key]));\n    }\n    return array.join('&');\n}\n/**\n * To check whether the given array contains object.\n * @param {T[]} value- Specifies the T type array to be checked.\n * @private\n */\nfunction isObjectArray(value) {\n    let parser = Object.prototype.toString;\n    if (parser.call(value) === '[object Array]') {\n        if (parser.call(value[0]) === '[object Object]') {\n            return true;\n        }\n    }\n    return false;\n}\n/**\n * To check whether the  child element is descendant to parent element or parent and child are same element.\n * @param{Element} - Specifies the child element to compare with parent.\n * @param{Element} - Specifies the parent element.\n * @return boolean\n * @private\n */\nfunction compareElementParent(child, parent) {\n    let node = child;\n    if (node === parent) {\n        return true;\n    }\n    else if (node === document || !node) {\n        return false;\n    }\n    else {\n        return compareElementParent(node.parentNode, parent);\n    }\n}\n/**\n * To throw custom error message.\n * @param{string} - Specifies the error message to be thrown.\n * @private\n */\nfunction throwError(message) {\n    try {\n        throw new Error(message);\n    }\n    catch (e) {\n        throw e.message + '\\n' + e.stack;\n    }\n}\n/**\n * This function is used to print given element\n * @param{Element} element - Specifies the print content element.\n * @param{Window} printWindow - Specifies the print window.\n * @private\n */\nfunction print(element, printWindow) {\n    let div = document.createElement('div');\n    let links = [].slice.call(document.getElementsByTagName('head')[0].querySelectorAll('base, link, style'));\n    let reference = '';\n    if (isNullOrUndefined(printWindow)) {\n        printWindow = window.open('', 'print', 'height=452,width=1024,tabbar=no');\n    }\n    div.appendChild(element.cloneNode(true));\n    for (let i = 0, len = links.length; i < len; i++) {\n        reference += links[i].outerHTML;\n    }\n    printWindow.document.write('<!DOCTYPE html> <html><head>' + reference + '</head><body>' + div.innerHTML +\n        '<script> (function() { window.ready = true; })(); </script>' + '</body></html>');\n    printWindow.document.close();\n    printWindow.focus();\n    // tslint:disable-next-line\n    let interval = setInterval(() => {\n        if (printWindow.ready) {\n            printWindow.print();\n            printWindow.close();\n            clearInterval(interval);\n        }\n    }, 500);\n    return printWindow;\n}\n/**\n * Function to normalize the units applied to the element.\n * @param  {number|string} value\n * @return {string} result\n * @private\n */\nfunction formatUnit(value) {\n    let result = value + '';\n    if (result.match(/auto|%|px|vh|vm|vmax|vmin|em/)) {\n        return result;\n    }\n    return result + 'px';\n}\n/**\n * Function to check whether the platform is blazor or not.\n * @return {boolean} result\n * @private\n */\nfunction enableBlazorMode() {\n    isBlazorPlatform = true;\n}\n/**\n * Function to check whether the platform is blazor or not.\n * @return {boolean} result\n * @private\n */\nfunction isBlazor() {\n    return isBlazorPlatform;\n}\n/**\n * Function to convert xPath to DOM element in blazor platform\n * @return {HTMLElement} result\n * @param {HTMLElement | object} element\n * @private\n */\nfunction getElement(element) {\n    let xPath = 'xPath';\n    if (!(element instanceof Node) && isBlazor() && !isNullOrUndefined(element[xPath])) {\n        return document.evaluate(element[xPath], document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;\n    }\n    return element;\n}\n/**\n * Function to fetch the Instances of a HTML element for the given component.\n * @param {string | HTMLElement} element\n * @param {any} component\n * @return {Object} inst\n * @private\n */\n// tslint:disable-next-line\nfunction getInstance(element, component) {\n    // tslint:disable-next-line:no-any\n    let elem = (typeof (element) === 'string') ? document.querySelector(element) : element;\n    if (elem[instances]) {\n        for (let inst of elem[instances]) {\n            if (inst instanceof component) {\n                return inst;\n            }\n        }\n    }\n    return null;\n}\n/**\n * Function to add instances for the given element.\n * @param {string | HTMLElement} element\n * @param {Object} instance\n * @return {void}\n * @private\n */\nfunction addInstance(element, instance) {\n    // tslint:disable-next-line:no-any\n    let elem = (typeof (element) === 'string') ? document.querySelector(element) : element;\n    if (elem[instances]) {\n        elem[instances].push(instance);\n    }\n    else {\n        elem[instances] = [instance];\n    }\n}\n/**\n * Function to generate the unique id.\n * @return {any}\n * @private\n */\n// tslint:disable-next-line:no-any\nfunction uniqueID() {\n    // tslint:disable-next-line:no-any\n    if ((typeof window) === 'undefined') {\n        return;\n    }\n    // tslint:disable-next-line:no-any\n    let num = new Uint16Array(5);\n    let intCrypto = window.msCrypto || window.crypto;\n    return intCrypto.getRandomValues(num);\n}\nfunction combineArray(num) {\n    let ret = '';\n    for (let i = 0; i < 5; i++) {\n        ret += (i ? ',' : '') + num[i];\n    }\n    return ret;\n}\n\n/**\n * Parser\n */\nconst defaultNumberingSystem = {\n    'latn': {\n        '_digits': '0123456789',\n        '_type': 'numeric'\n    }\n};\nconst defaultNumberSymbols = {\n    'decimal': '.',\n    'group': ',',\n    'percentSign': '%',\n    'plusSign': '+',\n    'minusSign': '-',\n    'infinity': '∞',\n    'nan': 'NaN',\n    'exponential': 'E'\n};\nconst latnNumberSystem = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n/**\n * Interface for parser base\n * @private\n */\nclass ParserBase {\n    /**\n     * Returns the cldr object for the culture specifies\n     * @param {Object} obj - Specifies the object from which culture object to be acquired.\n     * @param {string} cName - Specifies the culture name.\n     * @returns {Object}\n     */\n    static getMainObject(obj, cName) {\n        let value = isBlazor() ? cName : 'main.' + cName;\n        return getValue(value, obj);\n    }\n    /**\n     * Returns the numbering system object from given cldr data.\n     * @param {Object} obj - Specifies the object from which number system is acquired.\n     * @returns {Object}\n     */\n    static getNumberingSystem(obj) {\n        return getValue('supplemental.numberingSystems', obj) || this.numberingSystems;\n    }\n    /**\n     * Returns the reverse of given object keys or keys specified.\n     * @param {Object} prop - Specifies the object to be reversed.\n     * @param {number[]} keys - Optional parameter specifies the custom keyList for reversal.\n     * @returns {Object}\n     */\n    static reverseObject(prop, keys) {\n        let propKeys = keys || Object.keys(prop);\n        let res = {};\n        for (let key of propKeys) {\n            /* tslint:disable no-any */\n            if (!res.hasOwnProperty(prop[key])) {\n                res[prop[key]] = key;\n            }\n        }\n        return res;\n    }\n    /**\n     * Returns the symbol regex by skipping the escape sequence.\n     * @param {string[]} props - Specifies the array values to be skipped.\n     * @returns {RegExp}\n     */\n    static getSymbolRegex(props) {\n        let regexStr = props.map((str) => {\n            return str.replace(/([.*+?^=!:${}()|\\[\\]\\/\\\\])/g, '\\\\$1');\n        }).join('|');\n        return new RegExp(regexStr, 'g');\n    }\n    static getSymbolMatch(prop) {\n        let matchKeys = Object.keys(defaultNumberSymbols);\n        let ret = {};\n        for (let key of matchKeys) {\n            ret[prop[key]] = defaultNumberSymbols[key];\n        }\n        return ret;\n    }\n    /**\n     * Returns regex string for provided value\n     * @param {string} val\n     * @returns {string}\n     */\n    static constructRegex(val) {\n        let len = val.length;\n        let ret = '';\n        for (let i = 0; i < len; i++) {\n            if (i !== len - 1) {\n                ret += val[i] + '|';\n            }\n            else {\n                ret += val[i];\n            }\n        }\n        return ret;\n    }\n    /**\n     * Returns the replaced value of matching regex and obj mapper.\n     * @param {string} value - Specifies the  values to be replaced.\n     * @param {RegExp} regex - Specifies the  regex to search.\n     * @param {Object} obj - Specifies the  object matcher to be replace value parts.\n     * @returns {string}\n     */\n    static convertValueParts(value, regex, obj) {\n        return value.replace(regex, (str) => {\n            return obj[str];\n        });\n    }\n    /**\n     * Returns default numbering system object for formatting from cldr data\n     * @param {Object} obj\n     * @returns {NumericObject}\n     */\n    static getDefaultNumberingSystem(obj) {\n        let ret = {};\n        ret.obj = getValue('numbers', obj);\n        ret.nSystem = getValue('defaultNumberingSystem', ret.obj);\n        return ret;\n    }\n    /**\n     * Returns the replaced value of matching regex and obj mapper.\n     */\n    static getCurrentNumericOptions(curObj, numberSystem, needSymbols, blazorMode) {\n        let ret = {};\n        let cur = this.getDefaultNumberingSystem(curObj);\n        if (!isUndefined(cur.nSystem) || blazorMode) {\n            let digits = blazorMode ? getValue('obj.mapperDigits', cur) : getValue(cur.nSystem + '._digits', numberSystem);\n            if (!isUndefined(digits)) {\n                ret.numericPair = this.reverseObject(digits, latnNumberSystem);\n                ret.numberParseRegex = new RegExp(this.constructRegex(digits), 'g');\n                ret.numericRegex = '[' + digits[0] + '-' + digits[9] + ']';\n                if (needSymbols) {\n                    ret.numericRegex = digits[0] + '-' + digits[9];\n                    ret.symbolNumberSystem = getValue(blazorMode ? 'numberSymbols' : 'symbols-numberSystem-' + cur.nSystem, cur.obj);\n                    ret.symbolMatch = this.getSymbolMatch(ret.symbolNumberSystem);\n                    ret.numberSystem = cur.nSystem;\n                }\n            }\n        }\n        return ret;\n    }\n    /**\n     * Returns number mapper object for the provided cldr data\n     * @param {Object} curObj\n     * @param {Object} numberSystem\n     * @param {boolean} isNumber\n     * @returns {NumberMapper}\n     */\n    static getNumberMapper(curObj, numberSystem, isNumber) {\n        let ret = { mapper: {} };\n        let cur = this.getDefaultNumberingSystem(curObj);\n        if (!isUndefined(cur.nSystem)) {\n            ret.numberSystem = cur.nSystem;\n            ret.numberSymbols = getValue('symbols-numberSystem-' + cur.nSystem, cur.obj);\n            ret.timeSeparator = getValue('timeSeparator', ret.numberSymbols);\n            let digits = getValue(cur.nSystem + '._digits', numberSystem);\n            if (!isUndefined(digits)) {\n                for (let i of latnNumberSystem) {\n                    ret.mapper[i] = digits[i];\n                }\n            }\n        }\n        return ret;\n    }\n}\nParserBase.nPair = 'numericPair';\nParserBase.nRegex = 'numericRegex';\nParserBase.numberingSystems = defaultNumberingSystem;\n/**\n * @private\n */\nconst blazorCurrencyData = {\n    'DJF': 'Fdj',\n    'ERN': 'Nfk',\n    'ETB': 'Br',\n    'NAD': '$',\n    'ZAR': 'R',\n    'XAF': 'FCFA',\n    'GHS': 'GH₵',\n    'XDR': 'XDR',\n    'AED': 'د.إ.‏',\n    'BHD': 'د.ب.‏',\n    'DZD': 'د.ج.‏',\n    'EGP': 'ج.م.‏',\n    'ILS': '₪',\n    'IQD': 'د.ع.‏',\n    'JOD': 'د.ا.‏',\n    'KMF': 'CF',\n    'KWD': 'د.ك.‏',\n    'LBP': 'ل.ل.‏',\n    'LYD': 'د.ل.‏',\n    'MAD': 'د.م.‏',\n    'MRU': 'أ.م.',\n    'OMR': 'ر.ع.‏',\n    'QAR': 'ر.ق.‏',\n    'SAR': 'ر.س.‏',\n    'SDG': 'ج.س.',\n    'SOS': 'S',\n    'SSP': '£',\n    'SYP': 'ل.س.‏',\n    'TND': 'د.ت.‏',\n    'YER': 'ر.ي.‏',\n    'CLP': '$',\n    'INR': '₹',\n    'TZS': 'TSh',\n    'EUR': '€',\n    'AZN': '₼',\n    'RUB': '₽',\n    'BYN': 'Br',\n    'ZMW': 'K',\n    'BGN': 'лв.',\n    'NGN': '₦',\n    'XOF': 'CFA',\n    'BDT': '৳',\n    'CNY': '¥',\n    'BAM': 'КМ',\n    'UGX': 'USh',\n    'USD': '$',\n    'CZK': 'Kč',\n    'GBP': '£',\n    'DKK': 'kr.',\n    'KES': 'Ksh',\n    'CHF': 'CHF',\n    'MVR': 'ރ.',\n    'BTN': 'Nu.',\n    'XCD': 'EC$',\n    'AUD': '$',\n    'BBD': '$',\n    'BIF': 'FBu',\n    'BMD': '$',\n    'BSD': '$',\n    'BWP': 'P',\n    'BZD': '$',\n    'CAD': '$',\n    'NZD': '$',\n    'FJD': '$',\n    'FKP': '£',\n    'GIP': '£',\n    'GMD': 'D',\n    'GYD': '$',\n    'HKD': '$',\n    'IDR': 'Rp',\n    'JMD': '$',\n    'KYD': '$',\n    'LRD': '$',\n    'MGA': 'Ar',\n    'MOP': 'MOP$',\n    'MUR': 'Rs',\n    'MWK': 'MK',\n    'MYR': 'RM',\n    'PGK': 'K',\n    'PHP': '₱',\n    'PKR': 'Rs',\n    'RWF': 'RF',\n    'SBD': '$',\n    'SCR': 'SR',\n    'SEK': 'kr',\n    'SGD': '$',\n    'SHP': '£',\n    'SLL': 'Le',\n    'ANG': 'NAf.',\n    'SZL': 'E',\n    'TOP': 'T$',\n    'TTD': '$',\n    'VUV': 'VT',\n    'WST': 'WS$',\n    'ARS': '$',\n    'BOB': 'Bs',\n    'BRL': 'R$',\n    'COP': '$',\n    'CRC': '₡',\n    'CUP': '$',\n    'DOP': '$',\n    'GTQ': 'Q',\n    'HNL': 'L',\n    'MXN': '$',\n    'NIO': 'C$',\n    'PAB': 'B/.',\n    'PEN': 'S/',\n    'PYG': '₲',\n    'UYU': '$',\n    'VES': 'Bs.S',\n    'IRR': 'ريال',\n    'GNF': 'FG',\n    'CDF': 'FC',\n    'HTG': 'G',\n    'XPF': 'FCFP',\n    'HRK': 'kn',\n    'HUF': 'Ft',\n    'AMD': '֏',\n    'ISK': 'kr',\n    'JPY': '¥',\n    'GEL': '₾',\n    'CVE': '​',\n    'KZT': '₸',\n    'KHR': '៛',\n    'KPW': '₩',\n    'KRW': '₩',\n    'KGS': 'сом',\n    'AOA': 'Kz',\n    'LAK': '₭',\n    'MZN': 'MTn',\n    'MKD': 'ден',\n    'MNT': '₮',\n    'BND': '$',\n    'MMK': 'K',\n    'NOK': 'kr',\n    'NPR': 'रु',\n    'AWG': 'Afl.',\n    'SRD': '$',\n    'PLN': 'zł',\n    'AFN': '؋',\n    'STN': 'Db',\n    'MDL': 'L',\n    'RON': 'lei',\n    'UAH': '₴',\n    'LKR': 'රු.',\n    'ALL': 'Lekë',\n    'RSD': 'дин.',\n    'TJS': 'смн',\n    'THB': '฿',\n    'TMT': 'm.',\n    'TRY': '₺',\n    'UZS': 'сўм',\n    'VND': '₫',\n    'TWD': 'NT$'\n};\nfunction getBlazorCurrencySymbol(currencyCode) {\n    return getValue(currencyCode || '', blazorCurrencyData);\n}\n\n/***\n * Hijri parser\n */\nvar HijriParser;\n(function (HijriParser) {\n    /* tslint:disable */\n    const dateCorrection = [28607, 28636, 28665, 28695, 28724, 28754, 28783, 28813, 28843, 28872, 28901, 28931, 28960, 28990, 29019, 29049, 29078, 29108, 29137, 29167,\n        29196, 29226, 29255, 29285, 29315, 29345, 29375, 29404, 29434, 29463, 29492, 29522, 29551, 29580, 29610, 29640, 29669, 29699, 29729, 29759,\n        29788, 29818, 29847, 29876, 29906, 29935, 29964, 29994, 30023, 30053, 30082, 30112, 30141, 30171, 30200, 30230, 30259, 30289, 30318, 30348,\n        30378, 30408, 30437, 30467, 30496, 30526, 30555, 30585, 30614, 30644, 30673, 30703, 30732, 30762, 30791, 30821, 30850, 30880, 30909, 30939,\n        30968, 30998, 31027, 31057, 31086, 31116, 31145, 31175, 31204, 31234, 31263, 31293, 31322, 31352, 31381, 31411, 31441, 31471, 31500, 31530,\n        31559, 31589, 31618, 31648, 31676, 31706, 31736, 31766, 31795, 31825, 31854, 31884, 31913, 31943, 31972, 32002, 32031, 32061, 32090, 32120,\n        32150, 32180, 32209, 32239, 32268, 32298, 32327, 32357, 32386, 32416, 32445, 32475, 32504, 32534, 32563, 32593, 32622, 32652, 32681, 32711,\n        32740, 32770, 32799, 32829, 32858, 32888, 32917, 32947, 32976, 33006, 33035, 33065, 33094, 33124, 33153, 33183, 33213, 33243, 33272, 33302,\n        33331, 33361, 33390, 33420, 33450, 33479, 33509, 33539, 33568, 33598, 33627, 33657, 33686, 33716, 33745, 33775, 33804, 33834, 33863, 33893,\n        33922, 33952, 33981, 34011, 34040, 34069, 34099, 34128, 34158, 34187, 34217, 34247, 34277, 34306, 34336, 34365, 34395, 34424, 34454, 34483,\n        34512, 34542, 34571, 34601, 34631, 34660, 34690, 34719, 34749, 34778, 34808, 34837, 34867, 34896, 34926, 34955, 34985, 35015, 35044, 35074,\n        35103, 35133, 35162, 35192, 35222, 35251, 35280, 35310, 35340, 35370, 35399, 35429, 35458, 35488, 35517, 35547, 35576, 35605, 35635, 35665,\n        35694, 35723, 35753, 35782, 35811, 35841, 35871, 35901, 35930, 35960, 35989, 36019, 36048, 36078, 36107, 36136, 36166, 36195, 36225, 36254,\n        36284, 36314, 36343, 36373, 36403, 36433, 36462, 36492, 36521, 36551, 36580, 36610, 36639, 36669, 36698, 36728, 36757, 36786, 36816, 36845,\n        36875, 36904, 36934, 36963, 36993, 37022, 37052, 37081, 37111, 37141, 37170, 37200, 37229, 37259, 37288, 37318, 37347, 37377, 37406, 37436,\n        37465, 37495, 37524, 37554, 37584, 37613, 37643, 37672, 37701, 37731, 37760, 37790, 37819, 37849, 37878, 37908, 37938, 37967, 37997, 38027,\n        38056, 38085, 38115, 38144, 38174, 38203, 38233, 38262, 38292, 38322, 38351, 38381, 38410, 38440, 38469, 38499, 38528, 38558, 38587, 38617,\n        38646, 38676, 38705, 38735, 38764, 38794, 38823, 38853, 38882, 38912, 38941, 38971, 39001, 39030, 39059, 39089, 39118, 39148, 39178, 39208,\n        39237, 39267, 39297, 39326, 39355, 39385, 39414, 39444, 39473, 39503, 39532, 39562, 39592, 39621, 39650, 39680, 39709, 39739, 39768, 39798,\n        39827, 39857, 39886, 39916, 39946, 39975, 40005, 40035, 40064, 40094, 40123, 40153, 40182, 40212, 40241, 40271, 40300, 40330, 40359, 40389,\n        40418, 40448, 40477, 40507, 40536, 40566, 40595, 40625, 40655, 40685, 40714, 40744, 40773, 40803, 40832, 40862, 40892, 40921, 40951, 40980,\n        41009, 41039, 41068, 41098, 41127, 41157, 41186, 41216, 41245, 41275, 41304, 41334, 41364, 41393, 41422, 41452, 41481, 41511, 41540, 41570,\n        41599, 41629, 41658, 41688, 41718, 41748, 41777, 41807, 41836, 41865, 41894, 41924, 41953, 41983, 42012, 42042, 42072, 42102, 42131, 42161,\n        42190, 42220, 42249, 42279, 42308, 42337, 42367, 42397, 42426, 42456, 42485, 42515, 42545, 42574, 42604, 42633, 42662, 42692, 42721, 42751,\n        42780, 42810, 42839, 42869, 42899, 42929, 42958, 42988, 43017, 43046, 43076, 43105, 43135, 43164, 43194, 43223, 43253, 43283, 43312, 43342,\n        43371, 43401, 43430, 43460, 43489, 43519, 43548, 43578, 43607, 43637, 43666, 43696, 43726, 43755, 43785, 43814, 43844, 43873, 43903, 43932,\n        43962, 43991, 44021, 44050, 44080, 44109, 44139, 44169, 44198, 44228, 44258, 44287, 44317, 44346, 44375, 44405, 44434, 44464, 44493, 44523,\n        44553, 44582, 44612, 44641, 44671, 44700, 44730, 44759, 44788, 44818, 44847, 44877, 44906, 44936, 44966, 44996, 45025, 45055, 45084, 45114,\n        45143, 45172, 45202, 45231, 45261, 45290, 45320, 45350, 45380, 45409, 45439, 45468, 45498, 45527, 45556, 45586, 45615, 45644, 45674, 45704,\n        45733, 45763, 45793, 45823, 45852, 45882, 45911, 45940, 45970, 45999, 46028, 46058, 46088, 46117, 46147, 46177, 46206, 46236, 46265, 46295,\n        46324, 46354, 46383, 46413, 46442, 46472, 46501, 46531, 46560, 46590, 46620, 46649, 46679, 46708, 46738, 46767, 46797, 46826, 46856, 46885,\n        46915, 46944, 46974, 47003, 47033, 47063, 47092, 47122, 47151, 47181, 47210, 47240, 47269, 47298, 47328, 47357, 47387, 47417, 47446, 47476,\n        47506, 47535, 47565, 47594, 47624, 47653, 47682, 47712, 47741, 47771, 47800, 47830, 47860, 47890, 47919, 47949, 47978, 48008, 48037, 48066,\n        48096, 48125, 48155, 48184, 48214, 48244, 48273, 48303, 48333, 48362, 48392, 48421, 48450, 48480, 48509, 48538, 48568, 48598, 48627, 48657,\n        48687, 48717, 48746, 48776, 48805, 48834, 48864, 48893, 48922, 48952, 48982, 49011, 49041, 49071, 49100, 49130, 49160, 49189, 49218, 49248,\n        49277, 49306, 49336, 49365, 49395, 49425, 49455, 49484, 49514, 49543, 49573, 49602, 49632, 49661, 49690, 49720, 49749, 49779, 49809, 49838,\n        49868, 49898, 49927, 49957, 49986, 50016, 50045, 50075, 50104, 50133, 50163, 50192, 50222, 50252, 50281, 50311, 50340, 50370, 50400, 50429,\n        50459, 50488, 50518, 50547, 50576, 50606, 50635, 50665, 50694, 50724, 50754, 50784, 50813, 50843, 50872, 50902, 50931, 50960, 50990, 51019,\n        51049, 51078, 51108, 51138, 51167, 51197, 51227, 51256, 51286, 51315, 51345, 51374, 51403, 51433, 51462, 51492, 51522, 51552, 51582, 51611,\n        51641, 51670, 51699, 51729, 51758, 51787, 51816, 51846, 51876, 51906, 51936, 51965, 51995, 52025, 52054, 52083, 52113, 52142, 52171, 52200,\n        52230, 52260, 52290, 52319, 52349, 52379, 52408, 52438, 52467, 52497, 52526, 52555, 52585, 52614, 52644, 52673, 52703, 52733, 52762, 52792,\n        52822, 52851, 52881, 52910, 52939, 52969, 52998, 53028, 53057, 53087, 53116, 53146, 53176, 53205, 53235, 53264, 53294, 53324, 53353, 53383,\n        53412, 53441, 53471, 53500, 53530, 53559, 53589, 53619, 53648, 53678, 53708, 53737, 53767, 53796, 53825, 53855, 53884, 53913, 53943, 53973,\n        54003, 54032, 54062, 54092, 54121, 54151, 54180, 54209, 54239, 54268, 54297, 54327, 54357, 54387, 54416, 54446, 54476, 54505, 54535, 54564,\n        54593, 54623, 54652, 54681, 54711, 54741, 54770, 54800, 54830, 54859, 54889, 54919, 54948, 54977, 55007, 55036, 55066, 55095, 55125, 55154,\n        55184, 55213, 55243, 55273, 55302, 55332, 55361, 55391, 55420, 55450, 55479, 55508, 55538, 55567, 55597, 55627, 55657, 55686, 55716, 55745,\n        55775, 55804, 55834, 55863, 55892, 55922, 55951, 55981, 56011, 56040, 56070, 56100, 56129, 56159, 56188, 56218, 56247, 56276, 56306, 56335,\n        56365, 56394, 56424, 56454, 56483, 56513, 56543, 56572, 56601, 56631, 56660, 56690, 56719, 56749, 56778, 56808, 56837, 56867, 56897, 56926,\n        56956, 56985, 57015, 57044, 57074, 57103, 57133, 57162, 57192, 57221, 57251, 57280, 57310, 57340, 57369, 57399, 57429, 57458, 57487, 57517,\n        57546, 57576, 57605, 57634, 57664, 57694, 57723, 57753, 57783, 57813, 57842, 57871, 57901, 57930, 57959, 57989, 58018, 58048, 58077, 58107,\n        58137, 58167, 58196, 58226, 58255, 58285, 58314, 58343, 58373, 58402, 58432, 58461, 58491, 58521, 58551, 58580, 58610, 58639, 58669, 58698,\n        58727, 58757, 58786, 58816, 58845, 58875, 58905, 58934, 58964, 58994, 59023, 59053, 59082, 59111, 59141, 59170, 59200, 59229, 59259, 59288,\n        59318, 59348, 59377, 59407, 59436, 59466, 59495, 59525, 59554, 59584, 59613, 59643, 59672, 59702, 59731, 59761, 59791, 59820, 59850, 59879,\n        59909, 59939, 59968, 59997, 60027, 60056, 60086, 60115, 60145, 60174, 60204, 60234, 60264, 60293, 60323, 60352, 60381, 60411, 60440, 60469,\n        60499, 60528, 60558, 60588, 60618, 60648, 60677, 60707, 60736, 60765, 60795, 60824, 60853, 60883, 60912, 60942, 60972, 61002, 61031, 61061,\n        61090, 61120, 61149, 61179, 61208, 61237, 61267, 61296, 61326, 61356, 61385, 61415, 61445, 61474, 61504, 61533, 61563, 61592, 61621, 61651,\n        61680, 61710, 61739, 61769, 61799, 61828, 61858, 61888, 61917, 61947, 61976, 62006, 62035, 62064, 62094, 62123, 62153, 62182, 62212, 62242,\n        62271, 62301, 62331, 62360, 62390, 62419, 62448, 62478, 62507, 62537, 62566, 62596, 62625, 62655, 62685, 62715, 62744, 62774, 62803, 62832,\n        62862, 62891, 62921, 62950, 62980, 63009, 63039, 63069, 63099, 63128, 63157, 63187, 63216, 63246, 63275, 63305, 63334, 63363, 63393, 63423,\n        63453, 63482, 63512, 63541, 63571, 63600, 63630, 63659, 63689, 63718, 63747, 63777, 63807, 63836, 63866, 63895, 63925, 63955, 63984, 64014,\n        64043, 64073, 64102, 64131, 64161, 64190, 64220, 64249, 64279, 64309, 64339, 64368, 64398, 64427, 64457, 64486, 64515, 64545, 64574, 64603,\n        64633, 64663, 64692, 64722, 64752, 64782, 64811, 64841, 64870, 64899, 64929, 64958, 64987, 65017, 65047, 65076, 65106, 65136, 65166, 65195,\n        65225, 65254, 65283, 65313, 65342, 65371, 65401, 65431, 65460, 65490, 65520, 65549, 65579, 65608, 65638, 65667, 65697, 65726, 65755, 65785,\n        65815, 65844, 65874, 65903, 65933, 65963, 65992, 66022, 66051, 66081, 66110, 66140, 66169, 66199, 66228, 66258, 66287, 66317, 66346, 66376,\n        66405, 66435, 66465, 66494, 66524, 66553, 66583, 66612, 66641, 66671, 66700, 66730, 66760, 66789, 66819, 66849, 66878, 66908, 66937, 66967,\n        66996, 67025, 67055, 67084, 67114, 67143, 67173, 67203, 67233, 67262, 67292, 67321, 67351, 67380, 67409, 67439, 67468, 67497, 67527, 67557,\n        67587, 67617, 67646, 67676, 67705, 67735, 67764, 67793, 67823, 67852, 67882, 67911, 67941, 67971, 68000, 68030, 68060, 68089, 68119, 68148,\n        68177, 68207, 68236, 68266, 68295, 68325, 68354, 68384, 68414, 68443, 68473, 68502, 68532, 68561, 68591, 68620, 68650, 68679, 68708, 68738,\n        68768, 68797, 68827, 68857, 68886, 68916, 68946, 68975, 69004, 69034, 69063, 69092, 69122, 69152, 69181, 69211, 69240, 69270, 69300, 69330,\n        69359, 69388, 69418, 69447, 69476, 69506, 69535, 69565, 69595, 69624, 69654, 69684, 69713, 69743, 69772, 69802, 69831, 69861, 69890, 69919,\n        69949, 69978, 70008, 70038, 70067, 70097, 70126, 70156, 70186, 70215, 70245, 70274, 70303, 70333, 70362, 70392, 70421, 70451, 70481, 70510,\n        70540, 70570, 70599, 70629, 70658, 70687, 70717, 70746, 70776, 70805, 70835, 70864, 70894, 70924, 70954, 70983, 71013, 71042, 71071, 71101,\n        71130, 71159, 71189, 71218, 71248, 71278, 71308, 71337, 71367, 71397, 71426, 71455, 71485, 71514, 71543, 71573, 71602, 71632, 71662, 71691,\n        71721, 71751, 71781, 71810, 71839, 71869, 71898, 71927, 71957, 71986, 72016, 72046, 72075, 72105, 72135, 72164, 72194, 72223, 72253, 72282,\n        72311, 72341, 72370, 72400, 72429, 72459, 72489, 72518, 72548, 72577, 72607, 72637, 72666, 72695, 72725, 72754, 72784, 72813, 72843, 72872,\n        72902, 72931, 72961, 72991, 73020, 73050, 73080, 73109, 73139, 73168, 73197, 73227, 73256, 73286, 73315, 73345, 73375, 73404, 73434, 73464,\n        73493, 73523, 73552, 73581, 73611, 73640, 73669, 73699, 73729, 73758, 73788, 73818, 73848, 73877, 73907, 73936, 73965, 73995, 74024, 74053,\n        74083, 74113, 74142, 74172, 74202, 74231, 74261, 74291, 74320, 74349, 74379, 74408, 74437, 74467, 74497, 74526, 74556, 74586, 74615, 74645,\n        74675, 74704, 74733, 74763, 74792, 74822, 74851, 74881, 74910, 74940, 74969, 74999, 75029, 75058, 75088, 75117, 75147, 75176, 75206, 75235,\n        75264, 75294, 75323, 75353, 75383, 75412, 75442, 75472, 75501, 75531, 75560, 75590, 75619, 75648, 75678, 75707, 75737, 75766, 75796, 75826,\n        75856, 75885, 75915, 75944, 75974, 76003, 76032, 76062, 76091, 76121, 76150, 76180, 76210, 76239, 76269, 76299, 76328, 76358, 76387, 76416,\n        76446, 76475, 76505, 76534, 76564, 76593, 76623, 76653, 76682, 76712, 76741, 76771, 76801, 76830, 76859, 76889, 76918, 76948, 76977, 77007,\n        77036, 77066, 77096, 77125, 77155, 77185, 77214, 77243, 77273, 77302, 77332, 77361, 77390, 77420, 77450, 77479, 77509, 77539, 77569, 77598,\n        77627, 77657, 77686, 77715, 77745, 77774, 77804, 77833, 77863, 77893, 77923, 77952, 77982, 78011, 78041, 78070, 78099, 78129, 78158, 78188,\n        78217, 78247, 78277, 78307, 78336, 78366, 78395, 78425, 78454, 78483, 78513, 78542, 78572, 78601, 78631, 78661, 78690, 78720, 78750, 78779,\n        78808, 78838, 78867, 78897, 78926, 78956, 78985, 79015, 79044, 79074, 79104, 79133, 79163, 79192, 79222, 79251, 79281, 79310, 79340, 79369,\n        79399, 79428, 79458, 79487, 79517, 79546, 79576, 79606, 79635, 79665, 79695, 79724, 79753, 79783, 79812, 79841, 79871, 79900, 79930, 79960,\n        79990];\n    /* tslint:enable */\n    function getHijriDate(gDate) {\n        let day = gDate.getDate();\n        let month = gDate.getMonth();\n        let year = gDate.getFullYear();\n        let tMonth = month + 1;\n        let tYear = year;\n        if (tMonth < 3) {\n            tYear -= 1;\n            tMonth += 12;\n        }\n        let yPrefix = Math.floor(tYear / 100.);\n        let julilanOffset = yPrefix - Math.floor(yPrefix / 4.) - 2;\n        let julianNumber = Math.floor(365.25 * (tYear + 4716)) + Math.floor(30.6001 * (tMonth + 1)) + day - julilanOffset - 1524;\n        yPrefix = Math.floor((julianNumber - 1867216.25) / 36524.25);\n        julilanOffset = yPrefix - Math.floor(yPrefix / 4.) + 1;\n        let b = julianNumber + julilanOffset + 1524;\n        let c = Math.floor((b - 122.1) / 365.25);\n        let d = Math.floor(365.25 * c);\n        let tempMonth = Math.floor((b - d) / 30.6001);\n        day = (b - d) - Math.floor(30.6001 * tempMonth);\n        month = Math.floor((b - d) / 20.6001);\n        if (month > 13) {\n            c += 1;\n            month -= 12;\n        }\n        month -= 1;\n        year = c - 4716;\n        let modifiedJulianDate = julianNumber - 2400000;\n        // date calculation for year after 2077\n        let iyear = 10631. / 30.;\n        let z = julianNumber - 1948084;\n        let cyc = Math.floor(z / 10631.);\n        z = z - 10631 * cyc;\n        let j = Math.floor((z - 0.1335) / iyear);\n        let iy = 30 * cyc + j;\n        z = z - Math.floor(j * iyear + 0.1335);\n        let im = Math.floor((z + 28.5001) / 29.5);\n        /* istanbul ignore next */\n        if (im === 13) {\n            im = 12;\n        }\n        let tempDay = z - Math.floor(29.5001 * im - 29);\n        let i = 0;\n        for (; i < dateCorrection.length; i++) {\n            if (dateCorrection[i] > modifiedJulianDate) {\n                break;\n            }\n        }\n        let iln = i + 16260;\n        let ii = Math.floor((iln - 1) / 12);\n        let hYear = ii + 1;\n        let hmonth = iln - 12 * ii;\n        let hDate = modifiedJulianDate - dateCorrection[i - 1] + 1;\n        if ((hDate + '').length > 2) {\n            hDate = tempDay;\n            hmonth = im;\n            hYear = iy;\n        }\n        return { year: hYear, month: hmonth, date: hDate };\n    }\n    HijriParser.getHijriDate = getHijriDate;\n    function toGregorian(year, month, day) {\n        let iy = year;\n        let im = month;\n        let id = day;\n        let ii = iy - 1;\n        let iln = (ii * 12) + 1 + (im - 1);\n        let i = iln - 16260;\n        let mcjdn = id + dateCorrection[i - 1] - 1;\n        let julianDate = mcjdn + 2400000;\n        let z = Math.floor(julianDate + 0.5);\n        let a = Math.floor((z - 1867216.25) / 36524.25);\n        a = z + 1 + a - Math.floor(a / 4);\n        let b = a + 1524;\n        let c = Math.floor((b - 122.1) / 365.25);\n        let d = Math.floor(365.25 * c);\n        let e = Math.floor((b - d) / 30.6001);\n        let gDay = b - d - Math.floor(e * 30.6001);\n        let gMonth = e - (e > 13.5 ? 13 : 1);\n        let gYear = c - (gMonth > 2.5 ? 4716 : 4715);\n        /* istanbul ignore next */\n        if (gYear <= 0) {\n            gMonth--;\n        } // No year zero\n        return new Date(gYear + '/' + (gMonth) + '/' + gDay);\n    }\n    HijriParser.toGregorian = toGregorian;\n})(HijriParser || (HijriParser = {}));\n\nconst abbreviateRegexGlobal = /\\/MMMMM|MMMM|MMM|a|LLLL|LLL|EEEEE|EEEE|E|K|cccc|ccc|WW|W|G+|z+/gi;\nconst standalone = 'stand-alone';\nconst weekdayKey = ['sun', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat'];\n\nconst timeSetter = {\n    m: 'getMinutes',\n    h: 'getHours',\n    H: 'getHours',\n    s: 'getSeconds',\n    d: 'getDate',\n    f: 'getMilliseconds'\n};\nconst datePartMatcher = {\n    'M': 'month',\n    'd': 'day',\n    'E': 'weekday',\n    'c': 'weekday',\n    'y': 'year',\n    'm': 'minute',\n    'h': 'hour',\n    'H': 'hour',\n    's': 'second',\n    'L': 'month',\n    'a': 'designator',\n    'z': 'timeZone',\n    'Z': 'timeZone',\n    'G': 'era',\n    'f': 'milliseconds'\n};\nconst timeSeparator = 'timeSeparator';\n/* tslint:disable no-any */\n/**\n * Date Format is a framework provides support for date formatting.\n * @private\n */\nclass DateFormat {\n    /**\n     * Returns the formatter function for given skeleton.\n     * @param {string} -  Specifies the culture name to be which formatting.\n     * @param {DateFormatOptions} - Specific the format in which date  will format.\n     * @param {cldr} - Specifies the global cldr data collection.\n     * @return Function.\n     */\n    static dateFormat(culture, option, cldr) {\n        let dependable = IntlBase.getDependables(cldr, culture, option.calendar);\n        let numObject = getValue('parserObject.numbers', dependable);\n        let dateObject = dependable.dateObject;\n        let formatOptions = { isIslamic: IntlBase.islamicRegex.test(option.calendar) };\n        if (isBlazor() && option.isServerRendered) {\n            option = IntlBase.compareBlazorDateFormats(option, culture);\n        }\n        let resPattern = option.format ||\n            IntlBase.getResultantPattern(option.skeleton, dependable.dateObject, option.type, false, isBlazor() ? culture : '');\n        formatOptions.dateSeperator = isBlazor() ? getValue('dateSeperator', dateObject) : IntlBase.getDateSeparator(dependable.dateObject);\n        if (isUndefined(resPattern)) {\n            throwError('Format options or type given must be invalid');\n        }\n        else {\n            resPattern = IntlBase.ConvertDateToWeekFormat(resPattern);\n            if (isBlazor()) {\n                resPattern = resPattern.replace(/tt/, 'a');\n            }\n            formatOptions.pattern = resPattern;\n            formatOptions.numMapper = isBlazor() ?\n                extend({}, numObject) : ParserBase.getNumberMapper(dependable.parserObject, ParserBase.getNumberingSystem(cldr));\n            let patternMatch = resPattern.match(abbreviateRegexGlobal) || [];\n            for (let str of patternMatch) {\n                let len = str.length;\n                let char = str[0];\n                if (char === 'K') {\n                    char = 'h';\n                }\n                /* tslint:disable no-any */\n                switch (char) {\n                    case 'E':\n                    case 'c':\n                        if (isBlazor()) {\n                            formatOptions.weekday = getValue('days.' + IntlBase.monthIndex[len], dateObject);\n                        }\n                        else {\n                            formatOptions.weekday = dependable.dateObject[IntlBase.days][standalone][IntlBase.monthIndex[len]];\n                        }\n                        break;\n                    case 'M':\n                    case 'L':\n                        if (isBlazor()) {\n                            formatOptions.month = getValue('months.' + IntlBase.monthIndex[len], dateObject);\n                        }\n                        else {\n                            formatOptions.month = dependable.dateObject[IntlBase.month][standalone][IntlBase.monthIndex[len]];\n                        }\n                        break;\n                    case 'a':\n                        formatOptions.designator = isBlazor() ?\n                            getValue('dayPeriods', dateObject) : getValue('dayPeriods.format.wide', dateObject);\n                        break;\n                    case 'G':\n                        let eText = (len <= 3) ? 'eraAbbr' : (len === 4) ? 'eraNames' : 'eraNarrow';\n                        formatOptions.era = isBlazor() ? getValue('eras', dateObject) : getValue('eras.' + eText, dependable.dateObject);\n                        break;\n                    case 'z':\n                        formatOptions.timeZone = getValue('dates.timeZoneNames', dependable.parserObject);\n                        break;\n                }\n            }\n        }\n        return (value) => {\n            if (isNaN(value.getDate())) {\n                return null;\n            }\n            return this.intDateFormatter(value, formatOptions);\n        };\n    }\n    /**\n     * Returns formatted date string based on options passed.\n     * @param {Date} value\n     * @param {FormatOptions} options\n     */\n    // tslint:disable-next-line:max-func-body-length\n    static intDateFormatter(value, options) {\n        let pattern = options.pattern;\n        let ret = '';\n        let matches = pattern.match(IntlBase.dateParseRegex);\n        let dObject = this.getCurrentDateValue(value, options.isIslamic);\n        for (let match of matches) {\n            let length = match.length;\n            let char = match[0];\n            if (char === 'K') {\n                char = 'h';\n            }\n            let curval;\n            let curvalstr = '';\n            let isNumber;\n            let processNumber;\n            let curstr = '';\n            switch (char) {\n                case 'M':\n                case 'L':\n                    curval = dObject.month;\n                    if (length > 2) {\n                        ret += options.month[curval];\n                    }\n                    else {\n                        isNumber = true;\n                    }\n                    break;\n                case 'E':\n                case 'c':\n                    ret += options.weekday[weekdayKey[value.getDay()]];\n                    break;\n                case 'H':\n                case 'h':\n                case 'm':\n                case 's':\n                case 'd':\n                case 'f':\n                    isNumber = true;\n                    if (char === 'd') {\n                        curval = dObject.date;\n                    }\n                    else if (char === 'f') {\n                        isNumber = false;\n                        processNumber = true;\n                        curvalstr = value[timeSetter[char]]().toString();\n                        curvalstr = curvalstr.substring(0, length);\n                        let curlength = curvalstr.length;\n                        if (length !== curlength) {\n                            if (length > 3) {\n                                continue;\n                            }\n                            for (let i = 0; i < length - curlength; i++) {\n                                curvalstr = '0' + curvalstr.toString();\n                            }\n                        }\n                        curstr += curvalstr;\n                    }\n                    else {\n                        curval = value[timeSetter[char]]();\n                    }\n                    if (char === 'h') {\n                        curval = curval % 12 || 12;\n                    }\n                    break;\n                case 'y':\n                    processNumber = true;\n                    curstr += dObject.year;\n                    if (length === 2) {\n                        curstr = curstr.substr(curstr.length - 2);\n                    }\n                    break;\n                case 'a':\n                    let desig = value.getHours() < 12 ? 'am' : 'pm';\n                    ret += options.designator[desig];\n                    break;\n                case 'G':\n                    let dec = value.getFullYear() < 0 ? 0 : 1;\n                    let retu = options.era[dec];\n                    if (isNullOrUndefined(retu)) {\n                        retu = options.era[dec ? 0 : 1];\n                    }\n                    ret += retu || '';\n                    break;\n                case '\\'':\n                    ret += (match === '\\'\\'') ? '\\'' : match.replace(/\\'/g, '');\n                    break;\n                case 'z':\n                    let timezone = value.getTimezoneOffset();\n                    let pattern = (length < 4) ? '+H;-H' : options.timeZone.hourFormat;\n                    pattern = pattern.replace(/:/g, options.numMapper.timeSeparator);\n                    if (timezone === 0) {\n                        ret += options.timeZone.gmtZeroFormat;\n                    }\n                    else {\n                        processNumber = true;\n                        curstr = this.getTimeZoneValue(timezone, pattern);\n                    }\n                    curstr = options.timeZone.gmtFormat.replace(/\\{0\\}/, curstr);\n                    break;\n                case ':':\n                    ret += options.numMapper.numberSymbols[timeSeparator];\n                    /* tslint:enable no-any */\n                    break;\n                case '/':\n                    ret += options.dateSeperator;\n                    break;\n                case 'W':\n                    isNumber = true;\n                    curval = IntlBase.getWeekOfYear(value);\n                    break;\n                default:\n                    ret += match;\n            }\n            if (isNumber) {\n                processNumber = true;\n                curstr = this.checkTwodigitNumber(curval, length);\n            }\n            if (processNumber) {\n                ret += ParserBase.convertValueParts(curstr, IntlBase.latnParseRegex, options.numMapper.mapper);\n            }\n        }\n        return ret;\n    }\n    static getCurrentDateValue(value, isIslamic) {\n        if (isIslamic) {\n            return HijriParser.getHijriDate(value);\n        }\n        return { year: value.getFullYear(), month: value.getMonth() + 1, date: value.getDate() };\n    }\n    /**\n     * Returns two digit numbers for given value and length\n     */\n    static checkTwodigitNumber(val, len) {\n        let ret = val + '';\n        if (len === 2 && ret.length !== 2) {\n            return '0' + ret;\n        }\n        return ret;\n    }\n    /**\n     * Returns the value of the Time Zone.\n     * @param {number} tVal\n     * @param {string} pattern\n     * @private\n     */\n    static getTimeZoneValue(tVal, pattern) {\n        let splt = pattern.split(';');\n        let curPattern = splt[tVal > 0 ? 1 : 0];\n        let no = Math.abs(tVal);\n        return curPattern = curPattern.replace(/HH?|mm/g, (str) => {\n            let len = str.length;\n            let ishour = str.indexOf('H') !== -1;\n            return this.checkTwodigitNumber(Math.floor(ishour ? (no / 60) : (no % 60)), len);\n        });\n    }\n}\n\nconst errorText = {\n    'ms': 'minimumSignificantDigits',\n    'ls': 'maximumSignificantDigits',\n    'mf': 'minimumFractionDigits',\n    'lf': 'maximumFractionDigits',\n};\nconst percentSign = 'percentSign';\nconst minusSign = 'minusSign';\nconst mapper$1 = ['infinity', 'nan', 'group', 'decimal', 'exponential'];\n/**\n * Module for number formatting.\n * @private\n */\nclass NumberFormat {\n    /**\n     * Returns the formatter function for given skeleton.\n     * @param {string} culture -  Specifies the culture name to be which formatting.\n     * @param {NumberFormatOptions} option - Specific the format in which number  will format.\n     * @param {Object} object- Specifies the global cldr data collection.\n     * @return Function.\n     */\n    static numberFormatter(culture, option, cldr) {\n        let fOptions = extend({}, option);\n        let cOptions = {};\n        let dOptions = {};\n        let symbolPattern;\n        let dependable = IntlBase.getDependables(cldr, culture, '', true);\n        let numObject = dependable.numericObject;\n        dOptions.numberMapper = isBlazor() ? extend({}, numObject) :\n            ParserBase.getNumberMapper(dependable.parserObject, ParserBase.getNumberingSystem(cldr), true);\n        dOptions.currencySymbol = isBlazor() ? getValue('currencySymbol', numObject) : IntlBase.getCurrencySymbol(dependable.numericObject, fOptions.currency || defaultCurrencyCode, option.altSymbol);\n        /* tslint:disable no-any */\n        dOptions.percentSymbol = isBlazor() ? getValue('numberSymbols.percentSign', numObject) :\n            dOptions.numberMapper.numberSymbols[percentSign];\n        dOptions.minusSymbol = isBlazor() ? getValue('numberSymbols.minusSign', numObject) :\n            dOptions.numberMapper.numberSymbols[minusSign];\n        let symbols = dOptions.numberMapper.numberSymbols;\n        if ((option.format) && !(IntlBase.formatRegex.test(option.format))) {\n            cOptions = IntlBase.customFormat(option.format, dOptions, dependable.numericObject);\n        }\n        else {\n            extend(fOptions, IntlBase.getProperNumericSkeleton(option.format || 'N'));\n            fOptions.isCurrency = fOptions.type === 'currency';\n            fOptions.isPercent = fOptions.type === 'percent';\n            if (!isBlazor()) {\n                symbolPattern = IntlBase.getSymbolPattern(fOptions.type, dOptions.numberMapper.numberSystem, dependable.numericObject, fOptions.isAccount);\n            }\n            fOptions.groupOne = this.checkValueRange(fOptions.maximumSignificantDigits, fOptions.minimumSignificantDigits, true);\n            this.checkValueRange(fOptions.maximumFractionDigits, fOptions.minimumFractionDigits, false, true);\n            if (!isUndefined(fOptions.fractionDigits)) {\n                fOptions.minimumFractionDigits = fOptions.maximumFractionDigits = fOptions.fractionDigits;\n            }\n            if (isUndefined(fOptions.useGrouping)) {\n                fOptions.useGrouping = true;\n            }\n            if (fOptions.isCurrency && !isBlazor()) {\n                symbolPattern = symbolPattern.replace(/\\u00A4/g, IntlBase.defaultCurrency);\n            }\n            if (!isBlazor()) {\n                let split = symbolPattern.split(';');\n                cOptions.nData = IntlBase.getFormatData(split[1] || '-' + split[0], true, dOptions.currencySymbol);\n                cOptions.pData = IntlBase.getFormatData(split[0], false, dOptions.currencySymbol);\n                if (fOptions.useGrouping) {\n                    fOptions.groupSeparator = symbols[mapper$1[2]];\n                    fOptions.groupData = this.getGroupingDetails(split[0]);\n                }\n            }\n            else {\n                cOptions.nData = extend({}, {}, getValue(fOptions.type + 'nData', numObject));\n                cOptions.pData = extend({}, {}, getValue(fOptions.type + 'pData', numObject));\n                if (fOptions.type === 'currency' && option.currency) {\n                    IntlBase.replaceBlazorCurrency([cOptions.pData, cOptions.nData], dOptions.currencySymbol, option.currency);\n                }\n            }\n            let minFrac = isUndefined(fOptions.minimumFractionDigits);\n            if (minFrac) {\n                fOptions.minimumFractionDigits = cOptions.nData.minimumFraction;\n            }\n            if (isUndefined(fOptions.maximumFractionDigits)) {\n                let mval = cOptions.nData.maximumFraction;\n                fOptions.maximumFractionDigits = isUndefined(mval) && fOptions.isPercent ? 0 : mval;\n            }\n            let mfrac = fOptions.minimumFractionDigits;\n            let lfrac = fOptions.maximumFractionDigits;\n            if (!isUndefined(mfrac) && !isUndefined(lfrac)) {\n                if (mfrac > lfrac) {\n                    fOptions.maximumFractionDigits = mfrac;\n                }\n            }\n        }\n        extend(cOptions.nData, fOptions);\n        extend(cOptions.pData, fOptions);\n        return (value) => {\n            if (isNaN(value)) {\n                return symbols[mapper$1[1]];\n            }\n            else if (!isFinite(value)) {\n                return symbols[mapper$1[0]];\n            }\n            return this.intNumberFormatter(value, cOptions, dOptions);\n        };\n    }\n    /**\n     * Returns grouping details for the pattern provided\n     * @param {string} pattern\n     * @returns {GroupDetails}\n     */\n    static getGroupingDetails(pattern) {\n        let ret = {};\n        let match = pattern.match(IntlBase.negativeDataRegex);\n        if (match && match[4]) {\n            let pattern = match[4];\n            let p = pattern.lastIndexOf(',');\n            if (p !== -1) {\n                let temp = pattern.split('.')[0];\n                ret.primary = (temp.length - p) - 1;\n                let s = pattern.lastIndexOf(',', p - 1);\n                if (s !== -1) {\n                    ret.secondary = p - 1 - s;\n                }\n            }\n        }\n        return ret;\n    }\n    /**\n     * Returns if the provided integer range is valid.\n     * @param {number} val1\n     * @param {number} val2\n     * @param {boolean} checkbothExist\n     * @param {boolean} isFraction\n     * @returns {boolean}\n     */\n    static checkValueRange(val1, val2, checkbothExist, isFraction) {\n        let decide = isFraction ? 'f' : 's';\n        let dint = 0;\n        let str1 = errorText['l' + decide];\n        let str2 = errorText['m' + decide];\n        if (!isUndefined(val1)) {\n            this.checkRange(val1, str1, isFraction);\n            dint++;\n        }\n        if (!isUndefined(val2)) {\n            this.checkRange(val2, str2, isFraction);\n            dint++;\n        }\n        if (dint === 2) {\n            if (val1 < val2) {\n                throwError(str2 + 'specified must be less than the' + str1);\n            }\n            else {\n                return true;\n            }\n        }\n        else if (checkbothExist && dint === 1) {\n            throwError('Both' + str2 + 'and' + str2 + 'must be present');\n        }\n        return false;\n    }\n    /**\n     * Check if the provided fraction range is valid\n     * @param {number} val\n     * @param {string} text\n     * @param {boolean} isFraction\n     * @returns {void}\n     */\n    static checkRange(val, text, isFraction) {\n        let range = isFraction ? [0, 20] : [1, 21];\n        if (val < range[0] || val > range[1]) {\n            throwError(text + 'value must be within the range' + range[0] + 'to' + range[1]);\n        }\n    }\n    /**\n     * Returns formatted numeric string for provided formatting options\n     * @param {number} value\n     * @param {base.GenericFormatOptions} fOptions\n     * @param {CommonOptions} dOptions\n     * @returns {string}\n     */\n    static intNumberFormatter(value, fOptions, dOptions) {\n        let curData;\n        if (isUndefined(fOptions.nData.type)) {\n            return undefined;\n        }\n        else {\n            if (value < 0) {\n                value = value * -1;\n                curData = fOptions.nData;\n            }\n            else if (value === 0) {\n                curData = fOptions.zeroData || fOptions.pData;\n            }\n            else {\n                curData = fOptions.pData;\n            }\n            let fValue = '';\n            if (curData.isPercent) {\n                value = value * 100;\n            }\n            if (curData.groupOne) {\n                fValue = this.processSignificantDigits(value, curData.minimumSignificantDigits, curData.maximumSignificantDigits);\n            }\n            else {\n                fValue = this.processFraction(value, curData.minimumFractionDigits, curData.maximumFractionDigits);\n                if (curData.minimumIntegerDigits) {\n                    fValue = this.processMinimumIntegers(fValue, curData.minimumIntegerDigits);\n                }\n            }\n            if (curData.type === 'scientific') {\n                fValue = value.toExponential(curData.maximumFractionDigits);\n                fValue = fValue.replace('e', dOptions.numberMapper.numberSymbols[mapper$1[4]]);\n            }\n            fValue = fValue.replace('.', dOptions.numberMapper.numberSymbols[mapper$1[3]]);\n            if (curData.useGrouping) {\n                fValue = this.groupNumbers(fValue, curData.groupData.primary, curData.groupSeparator || ',', dOptions.numberMapper.numberSymbols[mapper$1[3]] || '.', curData.groupData.secondary);\n            }\n            fValue = ParserBase.convertValueParts(fValue, IntlBase.latnParseRegex, dOptions.numberMapper.mapper);\n            if (curData.nlead === 'N/A') {\n                return curData.nlead;\n            }\n            else {\n                return curData.nlead + fValue + curData.nend;\n            }\n        }\n    }\n    /**\n     * Returns significant digits processed numeric string\n     * @param {number} value\n     * @param {number} min\n     * @param {number} max\n     * @returns {string}\n     */\n    static processSignificantDigits(value, min, max) {\n        let temp = value + '';\n        let tn;\n        let length = temp.length;\n        if (length < min) {\n            return value.toPrecision(min);\n        }\n        else {\n            temp = value.toPrecision(max);\n            tn = +temp;\n            return tn + '';\n        }\n    }\n    /**\n     * Returns grouped numeric string\n     * @param {string} val\n     * @param {number} level1\n     * @param {string} sep\n     * @param {string} decimalSymbol\n     * @param {number} level2\n     * @returns {string}\n     */\n    static groupNumbers(val, level1, sep, decimalSymbol, level2) {\n        let flag = !isNullOrUndefined(level2) && level2 !== 0;\n        let split = val.split(decimalSymbol);\n        let prefix = split[0];\n        let length = prefix.length;\n        let str = '';\n        while (length > level1) {\n            str = prefix.slice(length - level1, length) + (str.length ?\n                (sep + str) : '');\n            length -= level1;\n            if (flag) {\n                level1 = level2;\n                flag = false;\n            }\n        }\n        split[0] = prefix.slice(0, length) + (str.length ? sep : '') + str;\n        return split.join(decimalSymbol);\n    }\n    /**\n     * Returns fraction processed numeric string\n     * @param {number} value\n     * @param {number} min\n     * @param {number} max\n     * @returns {string}\n     */\n    static processFraction(value, min, max) {\n        let temp = (value + '').split('.')[1];\n        let length = temp ? temp.length : 0;\n        if (min && length < min) {\n            let ret = '';\n            if (length === 0) {\n                ret = value.toFixed(min);\n            }\n            else {\n                ret += value;\n                for (let j = 0; j < min - length; j++) {\n                    ret += '0';\n                }\n                return ret;\n            }\n            return value.toFixed(min);\n        }\n        else if (!isNullOrUndefined(max) && (length > max || max === 0)) {\n            return value.toFixed(max);\n        }\n        return value + '';\n    }\n    /**\n     * Returns integer processed numeric string\n     * @param {string} value\n     * @param {number} min\n     * @returns {string}\n     */\n    static processMinimumIntegers(value, min) {\n        let temp = value.split('.');\n        let lead = temp[0];\n        let len = lead.length;\n        if (len < min) {\n            for (let i = 0; i < min - len; i++) {\n                lead = '0' + lead;\n            }\n            temp[0] = lead;\n        }\n        return temp.join('.');\n    }\n}\n\nconst standalone$1 = 'stand-alone';\nconst latnRegex$1 = /^[0-9]*$/;\nconst timeSetter$1 = {\n    minute: 'setMinutes',\n    hour: 'setHours',\n    second: 'setSeconds',\n    day: 'setDate',\n    month: 'setMonth',\n    milliseconds: 'setMilliseconds'\n};\nconst month = 'months';\n/* tslint:disable no-any */\n/**\n * Date Parser.\n * @private\n */\nclass DateParser {\n    /**\n     * Returns the parser function for given skeleton.\n     * @param {string} -  Specifies the culture name to be which formatting.\n     * @param {DateFormatOptions} - Specific the format in which string date  will be parsed.\n     * @param {cldr} - Specifies the global cldr data collection.\n     *  @return Function.\n     */\n    // tslint:disable-next-line:max-func-body-length\n    static dateParser(culture, option, cldr) {\n        let dependable = IntlBase.getDependables(cldr, culture, option.calendar);\n        // tslint:disable-next-line\n        let numOptions = ParserBase.getCurrentNumericOptions(dependable.parserObject, ParserBase.getNumberingSystem(cldr), false, isBlazor());\n        let parseOptions = {};\n        if (isBlazor() && option.isServerRendered) {\n            option = IntlBase.compareBlazorDateFormats(option, culture);\n        }\n        let resPattern = option.format ||\n            IntlBase.getResultantPattern(option.skeleton, dependable.dateObject, option.type, false, isBlazor() ? culture : '');\n        let regexString = '';\n        let hourOnly;\n        if (isUndefined(resPattern)) {\n            throwError('Format options or type given must be invalid');\n        }\n        else {\n            resPattern = IntlBase.ConvertDateToWeekFormat(resPattern);\n            parseOptions = { isIslamic: IntlBase.islamicRegex.test(option.calendar), pattern: resPattern, evalposition: {}, culture: culture };\n            let patternMatch = resPattern.match(IntlBase.dateParseRegex) || [];\n            let length = patternMatch.length;\n            let gmtCorrection = 0;\n            let zCorrectTemp = 0;\n            let isgmtTraversed = false;\n            let nRegx = numOptions.numericRegex;\n            // tslint:disable-next-line\n            let numMapper = isBlazor() ? dependable.parserObject.numbers :\n                ParserBase.getNumberMapper(dependable.parserObject, ParserBase.getNumberingSystem(cldr));\n            for (let i = 0; i < length; i++) {\n                let str = patternMatch[i];\n                let len = str.length;\n                let char = (str[0] === 'K') ? 'h' : str[0];\n                let isNumber;\n                let canUpdate;\n                // tslint:disable-next-line\n                let charKey = datePartMatcher[char];\n                let optional = (len === 2) ? '' : '?';\n                if (isgmtTraversed) {\n                    gmtCorrection = zCorrectTemp;\n                    isgmtTraversed = false;\n                }\n                switch (char) {\n                    case 'E':\n                    case 'c':\n                        // tslint:disable\n                        let weekData;\n                        if (isBlazor()) {\n                            weekData = getValue('days.' + IntlBase.monthIndex[len], dependable.dateObject);\n                        }\n                        else {\n                            weekData = dependable.dateObject[IntlBase.days][standalone$1][IntlBase.monthIndex[len]];\n                        }\n                        let weekObject = ParserBase.reverseObject(weekData);\n                        // tslint:enable\n                        regexString += '(' + Object.keys(weekObject).join('|') + ')';\n                        break;\n                    case 'M':\n                    case 'L':\n                    case 'd':\n                    case 'm':\n                    case 's':\n                    case 'h':\n                    case 'H':\n                    case 'f':\n                        canUpdate = true;\n                        if ((char === 'M' || char === 'L') && len > 2) {\n                            let monthData;\n                            if (isBlazor()) {\n                                /* tslint:disable no-any */\n                                monthData = getValue('months.' + IntlBase.monthIndex[len], dependable.dateObject);\n                            }\n                            else {\n                                /* tslint:disable no-any */\n                                monthData = dependable.dateObject[month][standalone$1][IntlBase.monthIndex[len]];\n                            }\n                            // tslint:disable-next-line\n                            parseOptions[charKey] = ParserBase.reverseObject(monthData);\n                            /* tslint:disable no-any */\n                            regexString += '(' + Object.keys(parseOptions[charKey]).join('|') + ')';\n                        }\n                        else if (char === 'f') {\n                            if (len > 3) {\n                                continue;\n                            }\n                            isNumber = true;\n                            regexString += '(' + nRegx + nRegx + '?' + nRegx + '?' + ')';\n                        }\n                        else {\n                            isNumber = true;\n                            regexString += '(' + nRegx + nRegx + optional + ')';\n                        }\n                        if (char === 'h') {\n                            parseOptions.hour12 = true;\n                        }\n                        break;\n                    case 'W':\n                        let opt = len === 1 ? '?' : '';\n                        regexString += '(' + nRegx + opt + nRegx + ')';\n                        break;\n                    case 'y':\n                        canUpdate = isNumber = true;\n                        if (len === 2) {\n                            regexString += '(' + nRegx + nRegx + ')';\n                        }\n                        else {\n                            regexString += '(' + nRegx + '{' + len + ',})';\n                        }\n                        break;\n                    case 'a':\n                        canUpdate = true;\n                        let periodValur = isBlazor() ?\n                            getValue('dayPeriods', dependable.dateObject) :\n                            getValue('dayPeriods.format.wide', dependable.dateObject);\n                        parseOptions[charKey] = ParserBase.reverseObject(periodValur);\n                        regexString += '(' + Object.keys(parseOptions[charKey]).join('|') + ')';\n                        break;\n                    case 'G':\n                        canUpdate = true;\n                        let eText = (len <= 3) ? 'eraAbbr' : (len === 4) ? 'eraNames' : 'eraNarrow';\n                        parseOptions[charKey] = ParserBase.reverseObject(isBlazor() ?\n                            getValue('eras', dependable.dateObject) : getValue('eras.' + eText, dependable.dateObject));\n                        regexString += '(' + Object.keys(parseOptions[charKey]).join('|') + '?)';\n                        break;\n                    case 'z':\n                        let tval = new Date().getTimezoneOffset();\n                        canUpdate = (tval !== 0);\n                        parseOptions[charKey] = getValue('dates.timeZoneNames', dependable.parserObject);\n                        let tzone = parseOptions[charKey];\n                        hourOnly = (len < 4);\n                        let hpattern = hourOnly ? '+H;-H' : tzone.hourFormat;\n                        hpattern = hpattern.replace(/:/g, numMapper.timeSeparator);\n                        regexString += '(' + this.parseTimeZoneRegx(hpattern, tzone, nRegx) + ')?';\n                        isgmtTraversed = true;\n                        zCorrectTemp = hourOnly ? 6 : 12;\n                        break;\n                    case '\\'':\n                        let iString = str.replace(/\\'/g, '');\n                        regexString += '(' + iString + ')?';\n                        break;\n                    default:\n                        regexString += '([\\\\D])';\n                        break;\n                }\n                if (canUpdate) {\n                    parseOptions.evalposition[charKey] = { isNumber: isNumber, pos: i + 1 + gmtCorrection, hourOnly: hourOnly };\n                }\n                if (i === length - 1 && !isNullOrUndefined(regexString)) {\n                    parseOptions.parserRegex = new RegExp('^' + regexString + '$', 'i');\n                }\n            }\n        }\n        return (value) => {\n            let parsedDateParts = this.internalDateParse(value, parseOptions, numOptions);\n            if (isNullOrUndefined(parsedDateParts) || !Object.keys(parsedDateParts).length) {\n                return null;\n            }\n            if (parseOptions.isIslamic) {\n                let dobj = {};\n                let tYear = parsedDateParts.year;\n                let tDate = parsedDateParts.day;\n                let tMonth = parsedDateParts.month;\n                let ystrig = tYear ? (tYear + '') : '';\n                let is2DigitYear = (ystrig.length === 2);\n                if (!tYear || !tMonth || !tDate || is2DigitYear) {\n                    dobj = HijriParser.getHijriDate(new Date());\n                }\n                if (is2DigitYear) {\n                    tYear = parseInt((dobj.year + '').slice(0, 2) + ystrig, 10);\n                }\n                // tslint:disable-next-line\n                let dateObject = HijriParser.toGregorian(tYear || dobj.year, tMonth || dobj.month, tDate || dobj.date);\n                parsedDateParts.year = dateObject.getFullYear();\n                parsedDateParts.month = dateObject.getMonth() + 1;\n                parsedDateParts.day = dateObject.getDate();\n            }\n            return this.getDateObject(parsedDateParts);\n        };\n    }\n    /* tslint:disable */\n    /**\n     * Returns date object for provided date options\n     * @param {DateParts} options\n     * @param {Date} value\n     * @returns {Date}\n     */\n    static getDateObject(options, value) {\n        let res = value || new Date();\n        res.setMilliseconds(0);\n        let tKeys = ['hour', 'minute', 'second', 'milliseconds', 'month', 'day'];\n        let y = options.year;\n        let desig = options.designator;\n        let tzone = options.timeZone;\n        if (!isUndefined(y)) {\n            let len = (y + '').length;\n            if (len <= 2) {\n                let century = Math.floor(res.getFullYear() / 100) * 100;\n                y += century;\n            }\n            res.setFullYear(y);\n        }\n        for (let key of tKeys) {\n            let tValue = options[key];\n            if (isUndefined(tValue) && key === \"day\") {\n                res.setDate(1);\n            }\n            if (!isUndefined(tValue)) {\n                if (key === 'month') {\n                    tValue -= 1;\n                    if (tValue < 0 || tValue > 11) {\n                        return new Date('invalid');\n                    }\n                    let pDate = res.getDate();\n                    res.setDate(1);\n                    res[timeSetter$1[key]](tValue);\n                    let lDate = new Date(res.getFullYear(), tValue + 1, 0).getDate();\n                    res.setDate(pDate < lDate ? pDate : lDate);\n                }\n                else {\n                    if (key === 'day') {\n                        let lastDay = new Date(res.getFullYear(), res.getMonth() + 1, 0).getDate();\n                        if ((tValue < 1 || tValue > lastDay)) {\n                            return null;\n                        }\n                    }\n                    res[timeSetter$1[key]](tValue);\n                }\n            }\n        }\n        if (!isUndefined(desig)) {\n            let hour = res.getHours();\n            if (desig === 'pm') {\n                res.setHours(hour + (hour === 12 ? 0 : 12));\n            }\n            else if (hour === 12) {\n                res.setHours(0);\n            }\n        }\n        if (!isUndefined(tzone)) {\n            let tzValue = tzone - res.getTimezoneOffset();\n            if (tzValue !== 0) {\n                res.setMinutes(res.getMinutes() + tzValue);\n            }\n        }\n        return res;\n    }\n    /**\n     * Returns date parsing options for provided value along with parse and numeric options\n     * @param {string} value\n     * @param {ParseOptions} parseOptions\n     * @param {NumericOptions} num\n     * @returns {DateParts}\n     */\n    static internalDateParse(value, parseOptions, num) {\n        let matches = value.match(parseOptions.parserRegex);\n        let retOptions = { 'hour': 0, 'minute': 0, 'second': 0 };\n        let nRegx = num.numericRegex;\n        if (isNullOrUndefined(matches)) {\n            return null;\n        }\n        else {\n            let props = Object.keys(parseOptions.evalposition);\n            for (let prop of props) {\n                let curObject = parseOptions.evalposition[prop];\n                let matchString = matches[curObject.pos];\n                if (curObject.isNumber) {\n                    retOptions[prop] = this.internalNumberParser(matchString, num);\n                }\n                else {\n                    if (prop === 'timeZone' && !isUndefined(matchString)) {\n                        let pos = curObject.pos;\n                        let val;\n                        let tmatch = matches[pos + 1];\n                        let flag = !isUndefined(tmatch);\n                        if (curObject.hourOnly) {\n                            val = this.getZoneValue(flag, tmatch, matches[pos + 4], num) * 60;\n                        }\n                        else {\n                            val = this.getZoneValue(flag, tmatch, matches[pos + 7], num) * 60;\n                            val += this.getZoneValue(flag, matches[pos + 4], matches[pos + 10], num);\n                        }\n                        if (!isNullOrUndefined(val)) {\n                            retOptions[prop] = val;\n                        }\n                    }\n                    else {\n                        matchString = ((prop === 'month') && (!parseOptions.isIslamic) && (parseOptions.culture === 'en' || parseOptions.culture === 'en-GB' || parseOptions.culture === 'en-US'))\n                            ? matchString[0].toUpperCase() + matchString.substring(1).toLowerCase() : matchString;\n                        retOptions[prop] = parseOptions[prop][matchString];\n                    }\n                }\n            }\n            if (parseOptions.hour12) {\n                retOptions.hour12 = true;\n            }\n        }\n        return retOptions;\n    }\n    /**\n     * Returns parsed number for provided Numeric string and Numeric Options\n     * @param {string} value\n     * @param {NumericOptions} option\n     * @returns {number}\n     */\n    static internalNumberParser(value, option) {\n        value = ParserBase.convertValueParts(value, option.numberParseRegex, option.numericPair);\n        if (latnRegex$1.test(value)) {\n            return +value;\n        }\n        return null;\n    }\n    /**\n     * Returns parsed time zone RegExp for provided hour format and time zone\n     * @param {string} hourFormat\n     * @param {base.TimeZoneOptions} tZone\n     * @param {string} nRegex\n     * @returns {string}\n     */\n    static parseTimeZoneRegx(hourFormat, tZone, nRegex) {\n        let pattern = tZone.gmtFormat;\n        let ret;\n        let cRegex = '(' + nRegex + ')' + '(' + nRegex + ')';\n        let splitStr;\n        ret = hourFormat.replace('+', '\\\\+');\n        if (hourFormat.indexOf('HH') !== -1) {\n            ret = ret.replace(/HH|mm/g, '(' + cRegex + ')');\n        }\n        else {\n            ret = ret.replace(/H|m/g, '(' + cRegex + '?)');\n        }\n        splitStr = (ret.split(';').map((str) => {\n            return pattern.replace('{0}', str);\n        }));\n        ret = splitStr.join('|') + '|' + tZone.gmtZeroFormat;\n        return ret;\n    }\n    /**\n     * Returns zone based value.\n     * @param {boolean} flag\n     * @param {string} val1\n     * @param {string} val2\n     * @param {NumericOptions} num\n     * @returns {number}\n     */\n    static getZoneValue(flag, val1, val2, num) {\n        let ival = flag ? val1 : val2;\n        if (!ival) {\n            return 0;\n        }\n        let value = this.internalNumberParser(ival, num);\n        if (flag) {\n            return -value;\n        }\n        return value;\n    }\n}\n/* tslint:enable */\n\nconst parseRegex = /^([^0-9]*)(([0-9,]*[0-9]+)(\\.[0-9]+)?)([Ee][+-]?[0-9]+)?([^0-9]*)$/;\nconst groupRegex = /,/g;\nconst keys = ['minusSign', 'infinity'];\n/**\n * Module for Number Parser.\n * @private\n */\nclass NumberParser {\n    /**\n     * Returns the parser function for given skeleton.\n     * @param {string} -  Specifies the culture name to be which formatting.\n     * @param {NumberFormatOptions} - Specific the format in which number  will parsed.\n     * @param {cldr} - Specifies the global cldr data collection.\n     * @return Function.\n     */\n    static numberParser(culture, option, cldr) {\n        let dependable = IntlBase.getDependables(cldr, culture, '', true);\n        let parseOptions = { custom: true };\n        let numOptions;\n        if ((IntlBase.formatRegex.test(option.format)) || !(option.format)) {\n            extend(parseOptions, IntlBase.getProperNumericSkeleton(option.format || 'N'));\n            parseOptions.custom = false;\n        }\n        else {\n            extend(parseOptions, IntlBase.customFormat(option.format, null, null));\n        }\n        let numbers = getValue('numbers', dependable.parserObject);\n        numOptions = ParserBase.getCurrentNumericOptions(dependable.parserObject, ParserBase.getNumberingSystem(cldr), true, isBlazor());\n        parseOptions.symbolRegex = ParserBase.getSymbolRegex(Object.keys(numOptions.symbolMatch));\n        // tslint:disable-next-line:no-any\n        parseOptions.infinity = numOptions.symbolNumberSystem[keys[1]];\n        let symbolpattern;\n        if (!isBlazor()) {\n            symbolpattern = IntlBase.getSymbolPattern(parseOptions.type, numOptions.numberSystem, dependable.numericObject, parseOptions.isAccount);\n            if (symbolpattern) {\n                symbolpattern = symbolpattern.replace(/\\u00A4/g, IntlBase.defaultCurrency);\n                let split = symbolpattern.split(';');\n                parseOptions.nData = IntlBase.getFormatData(split[1] || '-' + split[0], true, '');\n                parseOptions.pData = IntlBase.getFormatData(split[0], true, '');\n            }\n        }\n        else {\n            parseOptions.nData = extend({}, {}, getValue(parseOptions.type + 'nData', numbers));\n            parseOptions.pData = extend({}, {}, getValue(parseOptions.type + 'pData', numbers));\n            if (parseOptions.type === 'currency' && option.currency) {\n                IntlBase.replaceBlazorCurrency([parseOptions.pData, parseOptions.nData], getValue('currencySymbol', numbers), option.currency);\n            }\n        }\n        return (value) => {\n            return this.getParsedNumber(value, parseOptions, numOptions);\n        };\n    }\n    /**\n     * Returns parsed number for the provided formatting options\n     * @param {string} value\n     * @param {NumericParts} options\n     * @param {NumericOptions} numOptions\n     * @returns {number}\n     */\n    static getParsedNumber(value, options, numOptions) {\n        let isNegative;\n        let isPercent;\n        let tempValue;\n        let lead;\n        let end;\n        let ret;\n        if (value.indexOf(options.infinity) !== -1) {\n            return Infinity;\n        }\n        else {\n            value = ParserBase.convertValueParts(value, options.symbolRegex, numOptions.symbolMatch);\n            value = ParserBase.convertValueParts(value, numOptions.numberParseRegex, numOptions.numericPair);\n            if (value.indexOf('.') === 0) {\n                value = '0' + value;\n            }\n            let matches = value.match(parseRegex);\n            if (isNullOrUndefined(matches)) {\n                return NaN;\n            }\n            lead = matches[1];\n            tempValue = matches[2];\n            let exponent = matches[5];\n            end = matches[6];\n            isNegative = options.custom ? ((lead === options.nData.nlead) && (end === options.nData.nend)) :\n                ((lead.indexOf(options.nData.nlead) !== -1) && (end.indexOf(options.nData.nend) !== -1));\n            isPercent = isNegative ?\n                options.nData.isPercent :\n                options.pData.isPercent;\n            tempValue = tempValue.replace(groupRegex, '');\n            if (exponent) {\n                tempValue += exponent;\n            }\n            ret = +tempValue;\n            if (options.type === 'percent' || isPercent) {\n                ret = ret / 100;\n            }\n            if (options.custom || options.fractionDigits) {\n                ret = parseFloat(ret.toFixed(options.custom ?\n                    (isNegative ? options.nData.maximumFractionDigits : options.pData.maximumFractionDigits) : options.fractionDigits));\n            }\n            if (isNegative) {\n                ret *= -1;\n            }\n            return ret;\n        }\n    }\n}\n\nclass Observer {\n    constructor(context) {\n        this.ranArray = [];\n        this.boundedEvents = {};\n        if (isNullOrUndefined(context)) {\n            return;\n        }\n        this.context = context;\n    }\n    ;\n    /**\n     * To attach handler for given property in current context.\n     * @param {string} property - specifies the name of the event.\n     * @param {Function} handler - Specifies the handler function to be called while event notified.\n     * @param {Object} context - Specifies the context binded to the handler.\n     * @param {string} id - specifies the random generated id.\n     * @return {void}\n     */\n    on(property, handler, context, id) {\n        if (isNullOrUndefined(handler)) {\n            return;\n        }\n        let cntxt = context || this.context;\n        if (this.notExist(property)) {\n            this.boundedEvents[property] = [{ handler: handler, context: cntxt }];\n            return;\n        }\n        if (!isNullOrUndefined(id)) {\n            if (this.ranArray.indexOf(id) === -1) {\n                this.ranArray.push(id);\n                this.boundedEvents[property].push({ handler: handler, context: cntxt, id: id });\n            }\n        }\n        else if (!this.isHandlerPresent(this.boundedEvents[property], handler)) {\n            this.boundedEvents[property].push({ handler: handler, context: cntxt });\n        }\n    }\n    /**\n     * To remove handlers from a event attached using on() function.\n     * @param {string} eventName - specifies the name of the event.\n     * @param {Function} handler - Optional argument specifies the handler function to be called while event notified.\n     * @param {string} id - specifies the random generated id.\n     * @return {void}\n     */\n    off(property, handler, id) {\n        if (this.notExist(property)) {\n            return;\n        }\n        let curObject = getValue(property, this.boundedEvents);\n        if (handler) {\n            for (let i = 0; i < curObject.length; i++) {\n                if (id) {\n                    if (curObject[i].id === id) {\n                        curObject.splice(i, 1);\n                        let indexLocation = this.ranArray.indexOf(id);\n                        if (indexLocation !== -1) {\n                            this.ranArray.splice(indexLocation, 1);\n                        }\n                        break;\n                    }\n                }\n                else if (handler === curObject[i].handler) {\n                    curObject.splice(i, 1);\n                    break;\n                }\n            }\n        }\n        else {\n            delete this.boundedEvents[property];\n        }\n    }\n    /**\n     * To notify the handlers in the specified event.\n     * @param {string} property - Specifies the event to be notify.\n     * @param {Object} args - Additional parameters to pass while calling the handler.\n     * @param {Function} successHandler - this function will invoke after event successfully triggered\n     * @param {Function} errorHandler - this function will invoke after event if it was failure to call.\n     * @return {void}\n     */\n    notify(property, argument, successHandler, errorHandler) {\n        if (this.notExist(property)) {\n            if (successHandler) {\n                successHandler.call(this, argument);\n            }\n            return;\n        }\n        if (argument) {\n            argument.name = property;\n        }\n        let blazor = 'Blazor';\n        let curObject = getValue(property, this.boundedEvents).slice(0);\n        if (window[blazor]) {\n            return this.blazorCallback(curObject, argument, successHandler, errorHandler, 0);\n        }\n        else {\n            for (let cur of curObject) {\n                cur.handler.call(cur.context, argument);\n            }\n            if (successHandler) {\n                successHandler.call(this, argument);\n            }\n        }\n    }\n    blazorCallback(objs, argument, successHandler, errorHandler, index) {\n        let isTrigger = index === objs.length - 1;\n        if (index < objs.length) {\n            let obj = objs[index];\n            let promise = obj.handler.call(obj.context, argument);\n            if (promise && typeof promise.then === 'function') {\n                if (!successHandler) {\n                    return promise;\n                }\n                promise.then((data) => {\n                    data = typeof data === 'string' && this.isJson(data) ? JSON.parse(data, this.dateReviver) : data;\n                    extend(argument, argument, data, true);\n                    if (successHandler && isTrigger) {\n                        successHandler.call(obj.context, argument);\n                    }\n                    else {\n                        return this.blazorCallback(objs, argument, successHandler, errorHandler, index + 1);\n                    }\n                }).catch((data) => {\n                    if (errorHandler) {\n                        errorHandler.call(obj.context, typeof data === 'string' &&\n                            this.isJson(data) ? JSON.parse(data, this.dateReviver) : data);\n                    }\n                });\n            }\n            else if (successHandler && isTrigger) {\n                successHandler.call(obj.context, argument);\n            }\n            else {\n                return this.blazorCallback(objs, argument, successHandler, errorHandler, index + 1);\n            }\n        }\n    }\n    // tslint:disable-next-line:no-any\n    dateReviver(key, value) {\n        let dPattern = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/;\n        if (isBlazor && typeof value === 'string' && value.match(dPattern) !== null) {\n            return (new Date(value));\n        }\n        return (value);\n    }\n    isJson(value) {\n        try {\n            JSON.parse(value);\n        }\n        catch (e) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * To destroy handlers in the event\n     */\n    destroy() {\n        this.boundedEvents = this.context = undefined;\n    }\n    /**\n     * Returns if the property exists.\n     */\n    notExist(prop) {\n        return this.boundedEvents.hasOwnProperty(prop) === false || this.boundedEvents[prop].length <= 0;\n    }\n    /**\n     * Returns if the handler is present.\n     */\n    isHandlerPresent(boundedEvents, handler) {\n        for (let cur of boundedEvents) {\n            if (cur.handler === handler) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n\n/**\n * Specifies the observer used for external change detection.\n */\nlet onIntlChange = new Observer();\n/**\n * Specifies the default rtl status for EJ2 components.\n */\nlet rightToLeft = false;\n/**\n * Specifies the CLDR data loaded for internationalization functionalities.\n * @private\n */\nlet cldrData = {};\n/**\n * Specifies the default culture value to be considered.\n * @private\n */\nlet defaultCulture = 'en-US';\n/**\n * Specifies default currency code to be considered\n * @private\n */\nlet defaultCurrencyCode = 'USD';\nconst mapper = ['numericObject', 'dateObject'];\n/**\n * Internationalization class provides support to parse and format the number and date object to the desired format.\n * ```typescript\n * // To set the culture globally\n * setCulture('en-GB');\n *\n * // To set currency code globally\n * setCurrencyCode('EUR');\n *\n * //Load cldr data\n * loadCldr(gregorainData);\n * loadCldr(timeZoneData);\n * loadCldr(numbersData);\n * loadCldr(numberSystemData);\n *\n * // To use formatter in component side\n * let Intl:Internationalization = new Internationalization();\n *\n * // Date formatting\n * let dateFormatter: Function = Intl.getDateFormat({skeleton:'long',type:'dateTime'});\n * dateFormatter(new Date('11/2/2016'));\n * dateFormatter(new Date('25/2/2030'));\n * Intl.formatDate(new Date(),{skeleton:'E'});\n *\n * //Number formatting\n * let numberFormatter: Function = Intl.getNumberFormat({skeleton:'C5'})\n * numberFormatter(24563334);\n * Intl.formatNumber(123123,{skeleton:'p2'});\n *\n * // Date parser\n * let dateParser: Function = Intl.getDateParser({skeleton:'short',type:'time'});\n * dateParser('10:30 PM');\n * Intl.parseDate('10',{skeleton:'H'});\n * ```\n */\nclass Internationalization {\n    constructor(cultureName) {\n        if (cultureName) {\n            this.culture = cultureName;\n        }\n    }\n    /**\n     * Returns the format function for given options.\n     * @param {DateFormatOptions} options - Specifies the format options in which the format function will return.\n     * @returns {Function}\n     */\n    getDateFormat(options) {\n        return DateFormat.dateFormat(this.getCulture(), options || { type: 'date', skeleton: 'short' }, cldrData);\n    }\n    /**\n     * Returns the format function for given options.\n     * @param {NumberFormatOptions} options - Specifies the format options in which the format function will return.\n     * @returns {Function}\n     */\n    getNumberFormat(options) {\n        if (options && !options.currency) {\n            options.currency = defaultCurrencyCode;\n        }\n        if (isBlazor() && options && !options.format) {\n            options.minimumFractionDigits = 0;\n        }\n        return NumberFormat.numberFormatter(this.getCulture(), options || {}, cldrData);\n    }\n    /**\n     * Returns the parser function for given options.\n     * @param {DateFormatOptions} options - Specifies the format options in which the parser function will return.\n     * @returns {Function}\n     */\n    getDateParser(options) {\n        return DateParser.dateParser(this.getCulture(), options || { skeleton: 'short', type: 'date' }, cldrData);\n    }\n    /**\n     * Returns the parser function for given options.\n     * @param {NumberFormatOptions} options - Specifies the format options in which the parser function will return.\n     * @returns {Function}\n     */\n    getNumberParser(options) {\n        if (isBlazor() && options && !options.format) {\n            options.minimumFractionDigits = 0;\n        }\n        return NumberParser.numberParser(this.getCulture(), options || { format: 'N' }, cldrData);\n    }\n    /**\n     * Returns the formatted string based on format options.\n     * @param {Number} value - Specifies the number to format.\n     * @param {NumberFormatOptions} option - Specifies the format options in which the number will be formatted.\n     * @returns {string}\n     */\n    formatNumber(value, option) {\n        return this.getNumberFormat(option)(value);\n    }\n    /**\n     * Returns the formatted date string based on format options.\n     * @param {Number} value - Specifies the number to format.\n     * @param {DateFormatOptions} option - Specifies the format options in which the number will be formatted.\n     * @returns {string}\n     */\n    formatDate(value, option) {\n        return this.getDateFormat(option)(value);\n    }\n    /**\n     * Returns the date object for given date string and options.\n     * @param {string} value - Specifies the string to parse.\n     * @param {DateFormatOptions} option - Specifies the parse options in which the date string will be parsed.\n     * @returns {Date}\n     */\n    parseDate(value, option) {\n        return this.getDateParser(option)(value);\n    }\n    /**\n     * Returns the number object from the given string value and options.\n     * @param {string} value - Specifies the string to parse.\n     * @param {NumberFormatOptions} option - Specifies the parse options in which the  string number  will be parsed.\n     * @returns {number}\n     */\n    parseNumber(value, option) {\n        return this.getNumberParser(option)(value);\n    }\n    /**\n     * Returns Native Date Time Pattern\n     * @param {DateFormatOptions} option - Specifies the parse options for resultant date time pattern.\n     * @param {boolean} isExcelFormat - Specifies format value to be converted to excel pattern.\n     * @returns {string}\n     * @private\n     */\n    getDatePattern(option, isExcelFormat) {\n        return IntlBase.getActualDateTimeFormat(this.getCulture(), option, cldrData, isExcelFormat);\n    }\n    /**\n     * Returns Native Number Pattern\n     * @param {NumberFormatOptions} option - Specifies the parse options for resultant number pattern.\n     * @returns {string}\n     * @private\n     */\n    getNumberPattern(option, isExcel) {\n        return IntlBase.getActualNumberFormat(this.getCulture(), option, cldrData, isExcel);\n    }\n    /**\n     * Returns the First Day of the Week\n     * @returns {number}\n     */\n    getFirstDayOfWeek() {\n        return IntlBase.getWeekData(this.getCulture(), cldrData);\n    }\n    getCulture() {\n        return this.culture || defaultCulture;\n    }\n}\n/**\n * Set the default culture to all EJ2 components\n * @param {string} cultureName - Specifies the culture name to be set as default culture.\n */\nfunction setCulture(cultureName) {\n    defaultCulture = cultureName;\n    onIntlChange.notify('notifyExternalChange', { 'locale': defaultCulture });\n}\n/**\n * Set the default currency code to all EJ2 components\n * @param {string} currencyCode Specifies the culture name to be set as default culture.\n * @returns {void}\n */\nfunction setCurrencyCode(currencyCode) {\n    defaultCurrencyCode = currencyCode;\n    onIntlChange.notify('notifyExternalChange', { 'currencyCode': defaultCurrencyCode });\n}\n/**\n * Load the CLDR data into context\n * @param {Object[]} obj Specifies the CLDR data's to be used for formatting and parser.\n * @returns {void}\n */\nfunction loadCldr(...data) {\n    for (let obj of data) {\n        extend(cldrData, obj, {}, true);\n    }\n}\n/**\n * To enable or disable RTL functionality for all components globally.\n * @param {boolean} status - Optional argument Specifies the status value to enable or disable rtl option.\n * @returns {void}\n */\nfunction enableRtl(status = true) {\n    rightToLeft = status;\n    onIntlChange.notify('notifyExternalChange', { enableRtl: rightToLeft });\n}\n/**\n * To get the numeric CLDR object for given culture\n * @param {string} locale - Specifies the locale for which numericObject to be returned.\n * @ignore\n * @private\n */\nfunction getNumericObject(locale, type) {\n    /* tslint:disable no-any */\n    let numObject = IntlBase.getDependables(cldrData, locale, '', true)[mapper[0]];\n    let dateObject = IntlBase.getDependables(cldrData, locale, '')[mapper[1]];\n    let numSystem = getValue('defaultNumberingSystem', numObject);\n    let symbPattern = isBlazor() ? getValue('numberSymbols', numObject) : getValue('symbols-numberSystem-' + numSystem, numObject);\n    let pattern = IntlBase.getSymbolPattern(type || 'decimal', numSystem, numObject, false);\n    return extend(symbPattern, IntlBase.getFormatData(pattern, true, '', true), { 'dateSeparator': IntlBase.getDateSeparator(dateObject) });\n}\n/**\n * To get the numeric CLDR  number base object for given culture\n * @param {string} locale - Specifies the locale for which numericObject to be returned.\n * @param {string} currency - Specifies the currency for which numericObject to be returned.\n * @ignore\n * @private\n */\nfunction getNumberDependable(locale, currency) {\n    let numObject = IntlBase.getDependables(cldrData, locale, '', true);\n    return IntlBase.getCurrencySymbol(numObject.numericObject, currency);\n}\n/**\n * To get the default date CLDR object.\n * @ignore\n * @private\n */\nfunction getDefaultDateObject(mode) {\n    return IntlBase.getDependables(cldrData, '', mode, false)[mapper[1]];\n}\n\nconst blazorCultureFormats = {\n    'en-US': {\n        'd': 'M/d/y',\n        'D': 'EEEE, MMMM d, y',\n        'f': 'EEEE, MMMM d, y h:mm a',\n        'F': 'EEEE, MMMM d, y h:mm:s a',\n        'g': 'M/d/y h:mm a',\n        'G': 'M/d/yyyy h:mm:ss tt',\n        'm': 'MMMM d',\n        'M': 'MMMM d',\n        'r': 'ddd, dd MMM yyyy HH\\':\\'mm\\':\\'ss \\'GMT\\'',\n        'R': 'ddd, dd MMM yyyy HH\\':\\'mm\\':\\'ss \\'GMT\\'',\n        's': 'yyyy\\'-\\'MM\\'-\\'dd\\'T\\'HH\\':\\'mm\\':\\'ss',\n        't': 'h:mm tt',\n        'T': 'h:m:s tt',\n        'u': 'yyyy\\'-\\'MM\\'-\\'dd HH\\':\\'mm\\':\\'ss\\'Z\\'',\n        'U': 'dddd, MMMM d, yyyy h:mm:ss tt',\n        'y': 'MMMM yyyy',\n        'Y': 'MMMM yyyy'\n    }\n};\n/**\n * Date base common constants and function for date parser and formatter.\n */\nvar IntlBase;\n(function (IntlBase) {\n    // tslint:disable-next-line:max-line-length\n    IntlBase.negativeDataRegex = /^(('[^']+'|''|[^*#@0,.E])*)(\\*.)?((([#,]*[0,]*0+)(\\.0*[0-9]*#*)?)|([#,]*@+#*))(E\\+?0+)?(('[^']+'|''|[^*#@0,.E])*)$/;\n    IntlBase.customRegex = /^(('[^']+'|''|[^*#@0,.])*)(\\*.)?((([0#,]*[0,]*[0#]*)(\\.[0#]*)?)|([#,]*@+#*))(E\\+?0+)?(('[^']+'|''|[^*#@0,.E])*)$/;\n    IntlBase.latnParseRegex = /0|1|2|3|4|5|6|7|8|9/g;\n    const fractionRegex = /[0-9]/g;\n    IntlBase.defaultCurrency = '$';\n    const mapper = ['infinity', 'nan', 'group', 'decimal'];\n    const patternRegex = /G|M|L|H|c|'| a|yy|y|EEEE|E/g;\n    const patternMatch = {\n        'G': '',\n        'M': 'm',\n        'L': 'm',\n        'H': 'h',\n        'c': 'd',\n        '\\'': '\"',\n        ' a': ' AM/PM',\n        'yy': 'yy',\n        'y': 'yyyy',\n        'EEEE': 'dddd',\n        'E': 'ddd'\n    };\n    IntlBase.dateConverterMapper = /dddd|ddd/ig;\n    const defaultFirstDay = 'sun';\n    IntlBase.islamicRegex = /^islamic/;\n    const firstDayMapper = {\n        'sun': 0,\n        'mon': 1,\n        'tue': 2,\n        'wed': 3,\n        'thu': 4,\n        'fri': 5,\n        'sat': 6\n    };\n    IntlBase.formatRegex = /(^[ncpae]{1})([0-1]?[0-9]|20)?$/i;\n    IntlBase.currencyFormatRegex = /(^[ca]{1})([0-1]?[0-9]|20)?$/i;\n    IntlBase.curWithoutNumberRegex = /(c|a)$/ig;\n    const typeMapper = {\n        '$': 'isCurrency',\n        '%': 'isPercent',\n        '-': 'isNegative',\n        0: 'nlead',\n        1: 'nend'\n    };\n    IntlBase.dateParseRegex = /([a-z])\\1*|'([^']|'')+'|''|./gi;\n    IntlBase.basicPatterns = ['short', 'medium', 'long', 'full'];\n    /* tslint:disable:quotemark */\n    IntlBase.defaultObject = {\n        'dates': {\n            'calendars': {\n                'gregorian': {\n                    'months': {\n                        'stand-alone': {\n                            'abbreviated': {\n                                '1': 'Jan',\n                                '2': 'Feb',\n                                '3': 'Mar',\n                                '4': 'Apr',\n                                '5': 'May',\n                                '6': 'Jun',\n                                '7': 'Jul',\n                                '8': 'Aug',\n                                '9': 'Sep',\n                                '10': 'Oct',\n                                '11': 'Nov',\n                                '12': 'Dec'\n                            },\n                            'narrow': {\n                                '1': 'J',\n                                '2': 'F',\n                                '3': 'M',\n                                '4': 'A',\n                                '5': 'M',\n                                '6': 'J',\n                                '7': 'J',\n                                '8': 'A',\n                                '9': 'S',\n                                '10': 'O',\n                                '11': 'N',\n                                '12': 'D'\n                            },\n                            'wide': {\n                                '1': 'January',\n                                '2': 'February',\n                                '3': 'March',\n                                '4': 'April',\n                                '5': 'May',\n                                '6': 'June',\n                                '7': 'July',\n                                '8': 'August',\n                                '9': 'September',\n                                '10': 'October',\n                                '11': 'November',\n                                '12': 'December'\n                            }\n                        }\n                    },\n                    \"days\": {\n                        \"stand-alone\": {\n                            \"abbreviated\": {\n                                \"sun\": \"Sun\",\n                                \"mon\": \"Mon\",\n                                \"tue\": \"Tue\",\n                                \"wed\": \"Wed\",\n                                \"thu\": \"Thu\",\n                                \"fri\": \"Fri\",\n                                \"sat\": \"Sat\"\n                            },\n                            \"narrow\": {\n                                \"sun\": \"S\",\n                                \"mon\": \"M\",\n                                \"tue\": \"T\",\n                                \"wed\": \"W\",\n                                \"thu\": \"T\",\n                                \"fri\": \"F\",\n                                \"sat\": \"S\"\n                            },\n                            \"short\": {\n                                \"sun\": \"Su\",\n                                \"mon\": \"Mo\",\n                                \"tue\": \"Tu\",\n                                \"wed\": \"We\",\n                                \"thu\": \"Th\",\n                                \"fri\": \"Fr\",\n                                \"sat\": \"Sa\"\n                            },\n                            \"wide\": {\n                                \"sun\": \"Sunday\",\n                                \"mon\": \"Monday\",\n                                \"tue\": \"Tuesday\",\n                                \"wed\": \"Wednesday\",\n                                \"thu\": \"Thursday\",\n                                \"fri\": \"Friday\",\n                                \"sat\": \"Saturday\"\n                            }\n                        }\n                    },\n                    \"dayPeriods\": {\n                        \"format\": {\n                            \"wide\": {\n                                \"am\": \"AM\",\n                                \"pm\": \"PM\"\n                            }\n                        }\n                    },\n                    'eras': {\n                        'eraNames': {\n                            '0': 'Before Christ',\n                            '0-alt-variant': 'Before Common Era',\n                            '1': 'Anno Domini',\n                            \"1-alt-variant\": \"Common Era\"\n                        },\n                        'eraAbbr': {\n                            '0': 'BC',\n                            '0-alt-variant': 'BCE',\n                            '1': 'AD',\n                            '1-alt-variant': 'CE'\n                        },\n                        'eraNarrow': {\n                            '0': 'B',\n                            '0-alt-variant': 'BCE',\n                            '1': 'A',\n                            '1-alt-variant': 'CE'\n                        }\n                    },\n                    'dateFormats': {\n                        'full': 'EEEE, MMMM d, y',\n                        'long': 'MMMM d, y',\n                        'medium': 'MMM d, y',\n                        'short': 'M/d/yy'\n                    },\n                    'timeFormats': {\n                        'full': 'h:mm:ss a zzzz',\n                        'long': 'h:mm:ss a z',\n                        'medium': 'h:mm:ss a',\n                        'short': 'h:mm a'\n                    },\n                    'dateTimeFormats': {\n                        'full': \"{1} 'at' {0}\",\n                        'long': \"{1} 'at' {0}\",\n                        'medium': '{1}, {0}',\n                        'short': '{1}, {0}',\n                        'availableFormats': {\n                            'd': 'd',\n                            'E': 'ccc',\n                            'Ed': 'd E',\n                            'Ehm': 'E h:mm a',\n                            'EHm': 'E HH:mm',\n                            'Ehms': 'E h:mm:ss a',\n                            'EHms': 'E HH:mm:ss',\n                            'Gy': 'y G',\n                            'GyMMM': 'MMM y G',\n                            'GyMMMd': 'MMM d, y G',\n                            'GyMMMEd': 'E, MMM d, y G',\n                            'h': 'h a',\n                            'H': 'HH',\n                            'hm': 'h:mm a',\n                            'Hm': 'HH:mm',\n                            'hms': 'h:mm:ss a',\n                            'Hms': 'HH:mm:ss',\n                            'hmsv': 'h:mm:ss a v',\n                            'Hmsv': 'HH:mm:ss v',\n                            'hmv': 'h:mm a v',\n                            'Hmv': 'HH:mm v',\n                            'M': 'L',\n                            'Md': 'M/d',\n                            'MEd': 'E, M/d',\n                            'MMM': 'LLL',\n                            'MMMd': 'MMM d',\n                            'MMMEd': 'E, MMM d',\n                            'MMMMd': 'MMMM d',\n                            'ms': 'mm:ss',\n                            'y': 'y',\n                            'yM': 'M/y',\n                            'yMd': 'M/d/y',\n                            'yMEd': 'E, M/d/y',\n                            'yMMM': 'MMM y',\n                            'yMMMd': 'MMM d, y',\n                            'yMMMEd': 'E, MMM d, y',\n                            'yMMMM': 'MMMM y',\n                        },\n                    }\n                },\n                \"islamic\": {\n                    \"months\": {\n                        \"stand-alone\": {\n                            \"abbreviated\": {\n                                \"1\": \"Muh.\",\n                                \"2\": \"Saf.\",\n                                \"3\": \"Rab. I\",\n                                \"4\": \"Rab. II\",\n                                \"5\": \"Jum. I\",\n                                \"6\": \"Jum. II\",\n                                \"7\": \"Raj.\",\n                                \"8\": \"Sha.\",\n                                \"9\": \"Ram.\",\n                                \"10\": \"Shaw.\",\n                                \"11\": \"Dhuʻl-Q.\",\n                                \"12\": \"Dhuʻl-H.\"\n                            },\n                            \"narrow\": {\n                                \"1\": \"1\",\n                                \"2\": \"2\",\n                                \"3\": \"3\",\n                                \"4\": \"4\",\n                                \"5\": \"5\",\n                                \"6\": \"6\",\n                                \"7\": \"7\",\n                                \"8\": \"8\",\n                                \"9\": \"9\",\n                                \"10\": \"10\",\n                                \"11\": \"11\",\n                                \"12\": \"12\"\n                            },\n                            \"wide\": {\n                                \"1\": \"Muharram\",\n                                \"2\": \"Safar\",\n                                \"3\": \"Rabiʻ I\",\n                                \"4\": \"Rabiʻ II\",\n                                \"5\": \"Jumada I\",\n                                \"6\": \"Jumada II\",\n                                \"7\": \"Rajab\",\n                                \"8\": \"Shaʻban\",\n                                \"9\": \"Ramadan\",\n                                \"10\": \"Shawwal\",\n                                \"11\": \"Dhuʻl-Qiʻdah\",\n                                \"12\": \"Dhuʻl-Hijjah\"\n                            }\n                        }\n                    },\n                    \"days\": {\n                        \"stand-alone\": {\n                            \"abbreviated\": {\n                                \"sun\": \"Sun\",\n                                \"mon\": \"Mon\",\n                                \"tue\": \"Tue\",\n                                \"wed\": \"Wed\",\n                                \"thu\": \"Thu\",\n                                \"fri\": \"Fri\",\n                                \"sat\": \"Sat\"\n                            },\n                            \"narrow\": {\n                                \"sun\": \"S\",\n                                \"mon\": \"M\",\n                                \"tue\": \"T\",\n                                \"wed\": \"W\",\n                                \"thu\": \"T\",\n                                \"fri\": \"F\",\n                                \"sat\": \"S\"\n                            },\n                            \"short\": {\n                                \"sun\": \"Su\",\n                                \"mon\": \"Mo\",\n                                \"tue\": \"Tu\",\n                                \"wed\": \"We\",\n                                \"thu\": \"Th\",\n                                \"fri\": \"Fr\",\n                                \"sat\": \"Sa\"\n                            },\n                            \"wide\": {\n                                \"sun\": \"Sunday\",\n                                \"mon\": \"Monday\",\n                                \"tue\": \"Tuesday\",\n                                \"wed\": \"Wednesday\",\n                                \"thu\": \"Thursday\",\n                                \"fri\": \"Friday\",\n                                \"sat\": \"Saturday\"\n                            }\n                        }\n                    },\n                    \"dayPeriods\": {\n                        \"format\": {\n                            \"wide\": {\n                                \"am\": \"AM\",\n                                \"pm\": \"PM\"\n                            }\n                        }\n                    },\n                    \"eras\": {\n                        \"eraNames\": {\n                            \"0\": \"AH\"\n                        },\n                        \"eraAbbr\": {\n                            \"0\": \"AH\"\n                        },\n                        \"eraNarrow\": {\n                            \"0\": \"AH\"\n                        }\n                    },\n                    \"dateFormats\": {\n                        \"full\": \"EEEE, MMMM d, y G\",\n                        \"long\": \"MMMM d, y G\",\n                        \"medium\": \"MMM d, y G\",\n                        \"short\": \"M/d/y GGGGG\"\n                    },\n                    \"timeFormats\": {\n                        \"full\": \"h:mm:ss a zzzz\",\n                        \"long\": \"h:mm:ss a z\",\n                        \"medium\": \"h:mm:ss a\",\n                        \"short\": \"h:mm a\"\n                    },\n                    \"dateTimeFormats\": {\n                        \"full\": \"{1} 'at' {0}\",\n                        \"long\": \"{1} 'at' {0}\",\n                        \"medium\": \"{1}, {0}\",\n                        \"short\": \"{1}, {0}\",\n                        \"availableFormats\": {\n                            \"d\": \"d\",\n                            \"E\": \"ccc\",\n                            \"Ed\": \"d E\",\n                            \"Ehm\": \"E h:mm a\",\n                            \"EHm\": \"E HH:mm\",\n                            \"Ehms\": \"E h:mm:ss a\",\n                            \"EHms\": \"E HH:mm:ss\",\n                            \"Gy\": \"y G\",\n                            \"GyMMM\": \"MMM y G\",\n                            \"GyMMMd\": \"MMM d, y G\",\n                            \"GyMMMEd\": \"E, MMM d, y G\",\n                            \"h\": \"h a\",\n                            \"H\": \"HH\",\n                            \"hm\": \"h:mm a\",\n                            \"Hm\": \"HH:mm\",\n                            \"hms\": \"h:mm:ss a\",\n                            \"Hms\": \"HH:mm:ss\",\n                            \"M\": \"L\",\n                            \"Md\": \"M/d\",\n                            \"MEd\": \"E, M/d\",\n                            \"MMM\": \"LLL\",\n                            \"MMMd\": \"MMM d\",\n                            \"MMMEd\": \"E, MMM d\",\n                            \"MMMMd\": \"MMMM d\",\n                            \"ms\": \"mm:ss\",\n                            \"y\": \"y G\",\n                            \"yyyy\": \"y G\",\n                            \"yyyyM\": \"M/y GGGGG\",\n                            \"yyyyMd\": \"M/d/y GGGGG\",\n                            \"yyyyMEd\": \"E, M/d/y GGGGG\",\n                            \"yyyyMMM\": \"MMM y G\",\n                            \"yyyyMMMd\": \"MMM d, y G\",\n                            \"yyyyMMMEd\": \"E, MMM d, y G\",\n                            \"yyyyMMMM\": \"MMMM y G\",\n                            \"yyyyQQQ\": \"QQQ y G\",\n                            \"yyyyQQQQ\": \"QQQQ y G\"\n                        }\n                    }\n                }\n            },\n            'timeZoneNames': {\n                \"hourFormat\": \"+HH:mm;-HH:mm\",\n                \"gmtFormat\": \"GMT{0}\",\n                \"gmtZeroFormat\": \"GMT\",\n            }\n        },\n        'numbers': {\n            'currencies': {\n                'USD': {\n                    'displayName': 'US Dollar',\n                    'symbol': '$',\n                    'symbol-alt-narrow': '$'\n                },\n                'EUR': {\n                    'displayName': 'Euro',\n                    'symbol': '€',\n                    'symbol-alt-narrow': '€'\n                },\n                'GBP': {\n                    'displayName': 'British Pound',\n                    'symbol-alt-narrow': '£'\n                },\n            },\n            'defaultNumberingSystem': 'latn',\n            'minimumGroupingDigits': '1',\n            'symbols-numberSystem-latn': {\n                'decimal': '.',\n                'group': ',',\n                'list': ';',\n                'percentSign': '%',\n                'plusSign': '+',\n                'minusSign': '-',\n                'exponential': 'E',\n                'superscriptingExponent': '×',\n                'perMille': '‰',\n                'infinity': '∞',\n                'nan': 'NaN',\n                'timeSeparator': ':'\n            },\n            'decimalFormats-numberSystem-latn': {\n                'standard': '#,##0.###',\n            },\n            'percentFormats-numberSystem-latn': {\n                'standard': '#,##0%'\n            },\n            'currencyFormats-numberSystem-latn': {\n                'standard': '¤#,##0.00',\n                'accounting': '¤#,##0.00;(¤#,##0.00)'\n            },\n            'scientificFormats-numberSystem-latn': {\n                'standard': '#E0'\n            }\n        }\n    };\n    IntlBase.blazorDefaultObject = {\n        \"numbers\": {\n            \"mapper\": {\n                \"0\": \"0\",\n                \"1\": \"1\",\n                \"2\": \"2\",\n                \"3\": \"3\",\n                \"4\": \"4\",\n                \"5\": \"5\",\n                \"6\": \"6\",\n                \"7\": \"7\",\n                \"8\": \"8\",\n                \"9\": \"9\"\n            },\n            \"mapperDigits\": \"0123456789\",\n            \"numberSymbols\": {\n                \"decimal\": \".\",\n                \"group\": \",\",\n                \"plusSign\": \"+\",\n                \"minusSign\": \"-\",\n                \"percentSign\": \"%\",\n                \"nan\": \"NaN\",\n                \"timeSeparator\": \":\",\n                \"infinity\": \"∞\"\n            },\n            \"timeSeparator\": \":\",\n            \"currencySymbol\": \"$\",\n            \"currencypData\": {\n                \"nlead\": \"$\",\n                \"nend\": \"\",\n                \"groupSeparator\": \",\",\n                \"groupData\": {\n                    \"primary\": 3\n                },\n                \"maximumFraction\": 2,\n                \"minimumFraction\": 2\n            },\n            \"percentpData\": {\n                \"nlead\": \"\",\n                \"nend\": \"%\",\n                \"groupSeparator\": \",\",\n                \"groupData\": {\n                    \"primary\": 3\n                },\n                \"maximumFraction\": 2,\n                \"minimumFraction\": 2\n            },\n            \"percentnData\": {\n                \"nlead\": \"-\",\n                \"nend\": \"%\",\n                \"groupSeparator\": \",\",\n                \"groupData\": {\n                    \"primary\": 3\n                },\n                \"maximumFraction\": 2,\n                \"minimumFraction\": 2\n            },\n            \"currencynData\": {\n                \"nlead\": \"($\",\n                \"nend\": \")\",\n                \"groupSeparator\": \",\",\n                \"groupData\": {\n                    \"primary\": 3\n                },\n                \"maximumFraction\": 2,\n                \"minimumFraction\": 2\n            },\n            \"decimalnData\": {\n                \"nlead\": \"-\",\n                \"nend\": \"\",\n                \"groupData\": {\n                    \"primary\": 3\n                },\n                \"maximumFraction\": 2,\n                \"minimumFraction\": 2\n            },\n            \"decimalpData\": {\n                \"nlead\": \"\",\n                \"nend\": \"\",\n                \"groupData\": {\n                    \"primary\": 3\n                },\n                \"maximumFraction\": 2,\n                \"minimumFraction\": 2\n            }\n        },\n        \"dates\": {\n            \"dayPeriods\": {\n                \"am\": \"AM\",\n                \"pm\": \"PM\"\n            },\n            \"dateSeperator\": \"/\",\n            \"days\": {\n                \"abbreviated\": {\n                    \"sun\": \"Sun\",\n                    \"mon\": \"Mon\",\n                    \"tue\": \"Tue\",\n                    \"wed\": \"Wed\",\n                    \"thu\": \"Thu\",\n                    \"fri\": \"Fri\",\n                    \"sat\": \"Sat\"\n                },\n                \"short\": {\n                    \"sun\": \"Su\",\n                    \"mon\": \"Mo\",\n                    \"tue\": \"Tu\",\n                    \"wed\": \"We\",\n                    \"thu\": \"Th\",\n                    \"fri\": \"Fr\",\n                    \"sat\": \"Sa\"\n                },\n                \"wide\": {\n                    \"sun\": \"Sunday\",\n                    \"mon\": \"Monday\",\n                    \"tue\": \"Tuesday\",\n                    \"wed\": \"Wednesday\",\n                    \"thu\": \"Thursday\",\n                    \"fri\": \"Friday\",\n                    \"sat\": \"Saturday\"\n                }\n            },\n            \"months\": {\n                \"abbreviated\": {\n                    \"1\": \"Jan\",\n                    \"2\": \"Feb\",\n                    \"3\": \"Mar\",\n                    \"4\": \"Apr\",\n                    \"5\": \"May\",\n                    \"6\": \"Jun\",\n                    \"7\": \"Jul\",\n                    \"8\": \"Aug\",\n                    \"9\": \"Sep\",\n                    \"10\": \"Oct\",\n                    \"11\": \"Nov\",\n                    \"12\": \"Dec\"\n                },\n                \"wide\": {\n                    \"1\": \"January\",\n                    \"2\": \"February\",\n                    \"3\": \"March\",\n                    \"4\": \"April\",\n                    \"5\": \"May\",\n                    \"6\": \"June\",\n                    \"7\": \"July\",\n                    \"8\": \"August\",\n                    \"9\": \"September\",\n                    \"10\": \"October\",\n                    \"11\": \"November\",\n                    \"12\": \"December\"\n                }\n            },\n            \"eras\": {\n                \"1\": \"AD\"\n            }\n        }\n    };\n    /* tslint:enable:quotemark */\n    IntlBase.monthIndex = {\n        3: 'abbreviated',\n        4: 'wide',\n        5: 'narrow',\n        1: 'abbreviated'\n    };\n    /**\n     *\n     */\n    IntlBase.month = 'months';\n    IntlBase.days = 'days';\n    /**\n     * Default numerber Object\n     */\n    IntlBase.patternMatcher = {\n        C: 'currency',\n        P: 'percent',\n        N: 'decimal',\n        A: 'currency',\n        E: 'scientific'\n    };\n    /**\n     * Returns the resultant pattern based on the skeleton, dateObject and the type provided\n     * @private\n     * @param {string} skeleton\n     * @param {Object} dateObject\n     * @param {string} type\n     * @returns {string}\n     */\n    function getResultantPattern(skeleton, dateObject, type, isIslamic, blazorCulture) {\n        let resPattern;\n        let iType = type || 'date';\n        if (blazorCulture) {\n            resPattern = compareBlazorDateFormats({ skeleton: skeleton }, blazorCulture).format ||\n                compareBlazorDateFormats({ skeleton: 'd' }, 'en-US').format;\n        }\n        else {\n            if (IntlBase.basicPatterns.indexOf(skeleton) !== -1) {\n                resPattern = getValue(iType + 'Formats.' + skeleton, dateObject);\n                if (iType === 'dateTime') {\n                    let dPattern = getValue('dateFormats.' + skeleton, dateObject);\n                    let tPattern = getValue('timeFormats.' + skeleton, dateObject);\n                    resPattern = resPattern.replace('{1}', dPattern).replace('{0}', tPattern);\n                }\n            }\n            else {\n                resPattern = getValue('dateTimeFormats.availableFormats.' + skeleton, dateObject);\n            }\n            if (isUndefined(resPattern) && skeleton === 'yMd') {\n                resPattern = 'M/d/y';\n            }\n        }\n        return resPattern;\n    }\n    IntlBase.getResultantPattern = getResultantPattern;\n    /**\n     * Returns the dependable object for provided cldr data and culture\n     * @private\n     * @param {Object} cldr\n     * @param {string} culture\n     * @param {boolean} isNumber\n     * @returns {Dependables}\n     */\n    function getDependables(cldr, culture, mode, isNumber) {\n        let ret = {};\n        let calendartype = mode || 'gregorian';\n        ret.parserObject = ParserBase.getMainObject(cldr, culture) || (isBlazor() ? IntlBase.blazorDefaultObject : IntlBase.defaultObject);\n        if (isNumber) {\n            ret.numericObject = getValue('numbers', ret.parserObject);\n        }\n        else {\n            let dateString = isBlazor() ? 'dates' : ('dates.calendars.' + calendartype);\n            ret.dateObject = getValue(dateString, ret.parserObject);\n        }\n        return ret;\n    }\n    IntlBase.getDependables = getDependables;\n    /**\n     * Returns the symbol pattern for provided parameters\n     * @private\n     * @param {string} type\n     * @param {string} numSystem\n     * @param {Object} obj\n     * @param {boolean} isAccount\n     * @returns {string}\n     */\n    function getSymbolPattern(type, numSystem, obj, isAccount) {\n        return getValue(type + 'Formats-numberSystem-' +\n            numSystem + (isAccount ? '.accounting' : '.standard'), obj) || (isAccount ? getValue(type + 'Formats-numberSystem-' +\n            numSystem + '.standard', obj) : '');\n    }\n    IntlBase.getSymbolPattern = getSymbolPattern;\n    function ConvertDateToWeekFormat(format) {\n        let convertMapper = format.match(IntlBase.dateConverterMapper);\n        if (convertMapper && isBlazor()) {\n            let tempString = convertMapper[0].length === 3 ? 'EEE' : 'EEEE';\n            return format.replace(IntlBase.dateConverterMapper, tempString);\n        }\n        return format;\n    }\n    IntlBase.ConvertDateToWeekFormat = ConvertDateToWeekFormat;\n    function compareBlazorDateFormats(formatOptions, culture) {\n        let format = formatOptions.format || formatOptions.skeleton;\n        let curFormatMapper = getValue((culture || 'en-US') + '.' + format, blazorCultureFormats);\n        if (!curFormatMapper) {\n            curFormatMapper = getValue('en-US.' + format, blazorCultureFormats);\n        }\n        if (curFormatMapper) {\n            curFormatMapper = ConvertDateToWeekFormat(curFormatMapper);\n            formatOptions.format = curFormatMapper.replace(/tt/, 'a');\n        }\n        return formatOptions;\n    }\n    IntlBase.compareBlazorDateFormats = compareBlazorDateFormats;\n    /**\n     * Returns proper numeric skeleton\n     * @private\n     * @param {string} skeleton\n     * @returns {NumericSkeleton}\n     */\n    function getProperNumericSkeleton(skeleton) {\n        let matches = skeleton.match(IntlBase.formatRegex);\n        let ret = {};\n        let pattern = matches[1].toUpperCase();\n        ret.isAccount = (pattern === 'A');\n        /* tslint:disable no-any */\n        ret.type = IntlBase.patternMatcher[pattern];\n        if (skeleton.length > 1) {\n            ret.fractionDigits = parseInt(matches[2], 10);\n        }\n        return ret;\n    }\n    IntlBase.getProperNumericSkeleton = getProperNumericSkeleton;\n    /**\n     * Returns format data for number formatting like minimum fraction, maximum fraction, etc..,\n     * @private\n     * @param {string} pattern\n     * @param {boolean} needFraction\n     * @param {string} cSymbol\n     * @param {boolean} fractionOnly\n     * @returns {NegativeData}\n     */\n    function getFormatData(pattern, needFraction, cSymbol, fractionOnly) {\n        let nData = fractionOnly ? {} : { nlead: '', nend: '' };\n        let match = pattern.match(IntlBase.customRegex);\n        if (match) {\n            if (!fractionOnly) {\n                nData.nlead = changeCurrencySymbol(match[1], cSymbol);\n                nData.nend = changeCurrencySymbol(match[10], cSymbol);\n                nData.groupPattern = match[4];\n            }\n            let fraction = match[7];\n            if (fraction && needFraction) {\n                let fmatch = fraction.match(fractionRegex);\n                if (!isNullOrUndefined(fmatch)) {\n                    nData.minimumFraction = fmatch.length;\n                }\n                else {\n                    nData.minimumFraction = 0;\n                }\n                nData.maximumFraction = fraction.length - 1;\n            }\n        }\n        return nData;\n    }\n    IntlBase.getFormatData = getFormatData;\n    /**\n     * Changes currency symbol\n     * @private\n     * @param {string} val\n     * @param {string} sym\n     * @returns {string}\n     */\n    function changeCurrencySymbol(val, sym) {\n        if (val) {\n            return val.replace(IntlBase.defaultCurrency, sym);\n        }\n        return '';\n    }\n    /**\n     * Returns currency symbol based on currency code\n     * @private\n     * @param {Object} numericObject\n     * @param {string} currencyCode\n     * @returns {string}\n     */\n    function getCurrencySymbol(numericObject, currencyCode, altSymbol) {\n        let symbol = altSymbol ? ('.' + altSymbol) : '.symbol';\n        let getCurrency = getValue('currencies.' + currencyCode + symbol, numericObject) ||\n            getValue('currencies.' + currencyCode + '.symbol-alt-narrow', numericObject) || '$';\n        return getCurrency;\n    }\n    IntlBase.getCurrencySymbol = getCurrencySymbol;\n    /**\n     * Returns formatting options for custom number format\n     * @private\n     * @param {string} format\n     * @param {CommonOptions} dOptions\n     * @param {Dependables} obj\n     * @returns {GenericFormatOptions}\n     */\n    function customFormat(format, dOptions, obj) {\n        let options = {};\n        let formatSplit = format.split(';');\n        let data = ['pData', 'nData', 'zeroData'];\n        for (let i = 0; i < formatSplit.length; i++) {\n            options[data[i]] = customNumberFormat(formatSplit[i], dOptions, obj);\n        }\n        if (isNullOrUndefined(options.nData)) {\n            options.nData = extend({}, options.pData);\n            options.nData.nlead = isNullOrUndefined(dOptions) ? '-' + options.nData.nlead : dOptions.minusSymbol + options.nData.nlead;\n        }\n        return options;\n    }\n    IntlBase.customFormat = customFormat;\n    /**\n     * Returns custom formatting options\n     * @private\n     * @param {string} format\n     * @param {CommonOptions} dOptions\n     * @param {Object} numObject\n     * @returns {NegativeData}\n     */\n    function customNumberFormat(format, dOptions, numObject) {\n        let cOptions = { type: 'decimal', minimumFractionDigits: 0, maximumFractionDigits: 0 };\n        let pattern = format.match(IntlBase.customRegex);\n        if (isNullOrUndefined(pattern) || (pattern[5] === '' && format !== 'N/A')) {\n            cOptions.type = undefined;\n            return cOptions;\n        }\n        cOptions.nlead = pattern[1];\n        cOptions.nend = pattern[10];\n        let integerPart = pattern[6];\n        cOptions.useGrouping = integerPart.indexOf(',') !== -1;\n        integerPart = integerPart.replace(/,/g, '');\n        let fractionPart = pattern[7];\n        if (integerPart.indexOf('0') !== -1) {\n            cOptions.minimumIntegerDigits = integerPart.length - integerPart.indexOf('0');\n        }\n        if (!isNullOrUndefined(fractionPart)) {\n            cOptions.minimumFractionDigits = fractionPart.lastIndexOf('0');\n            cOptions.maximumFractionDigits = fractionPart.lastIndexOf('#');\n            if (cOptions.minimumFractionDigits === -1) {\n                cOptions.minimumFractionDigits = 0;\n            }\n            if (cOptions.maximumFractionDigits === -1 || cOptions.maximumFractionDigits < cOptions.minimumFractionDigits) {\n                cOptions.maximumFractionDigits = cOptions.minimumFractionDigits;\n            }\n        }\n        if (!isNullOrUndefined(dOptions)) {\n            extend(cOptions, isCurrencyPercent([cOptions.nlead, cOptions.nend], '$', dOptions.currencySymbol));\n            if (!cOptions.isCurrency) {\n                extend(cOptions, isCurrencyPercent([cOptions.nlead, cOptions.nend], '%', dOptions.percentSymbol));\n            }\n        }\n        else {\n            extend(cOptions, isCurrencyPercent([cOptions.nlead, cOptions.nend], '%', '%'));\n        }\n        if (!isNullOrUndefined(numObject)) {\n            let symbolPattern = getSymbolPattern(cOptions.type, dOptions.numberMapper.numberSystem, numObject, false);\n            if (cOptions.useGrouping) {\n                cOptions.groupSeparator = dOptions.numberMapper.numberSymbols[mapper[2]];\n                cOptions.groupData = NumberFormat.getGroupingDetails(symbolPattern.split(';')[0]);\n            }\n            cOptions.nlead = cOptions.nlead.replace(/\\'/g, '');\n            cOptions.nend = cOptions.nend.replace(/\\'/g, '');\n        }\n        return cOptions;\n    }\n    /**\n     * Returns formatting options for currency or percent type\n     * @private\n     * @param {string[]} parts\n     * @param {string} actual\n     * @param {string} symbol\n     * @returns {NegativeData}\n     */\n    function isCurrencyPercent(parts, actual, symbol) {\n        let options = { nlead: parts[0], nend: parts[1] };\n        for (let i = 0; i < 2; i++) {\n            let part = parts[i];\n            let loc = part.indexOf(actual);\n            if ((loc !== -1) && ((loc < part.indexOf('\\'')) || (loc > part.lastIndexOf('\\'')))) {\n                options[typeMapper[i]] = part.substr(0, loc) + symbol + part.substr(loc + 1);\n                options[typeMapper[actual]] = true;\n                options.type = options.isCurrency ? 'currency' : 'percent';\n                break;\n            }\n        }\n        return options;\n    }\n    IntlBase.isCurrencyPercent = isCurrencyPercent;\n    /**\n     * Returns culture based date separator\n     * @private\n     * @param {Object} dateObj\n     * @returns {string}\n     */\n    function getDateSeparator(dateObj) {\n        let value = (getValue('dateFormats.short', dateObj) || '').match(/[d‏M‏]([^d‏M])[d‏M‏]/i);\n        return value ? value[1] : '/';\n    }\n    IntlBase.getDateSeparator = getDateSeparator;\n    /**\n     * Returns Native Date Time pattern\n     * @private\n     * @param {string} culture\n     * @param {DateFormatOptions} options\n     * @param {Object} cldr\n     * @returns {string}\n     */\n    function getActualDateTimeFormat(culture, options, cldr, isExcelFormat) {\n        let dependable = getDependables(cldr, culture, options.calendar);\n        if (isBlazor()) {\n            options = compareBlazorDateFormats(options, culture);\n        }\n        let actualPattern = options.format || getResultantPattern(options.skeleton, dependable.dateObject, options.type);\n        if (isExcelFormat) {\n            actualPattern = actualPattern.replace(patternRegex, (pattern) => {\n                return patternMatch[pattern];\n            });\n            if (actualPattern.indexOf('z') !== -1) {\n                let tLength = actualPattern.match(/z/g).length;\n                let timeZonePattern;\n                let options = { 'timeZone': {} };\n                options.numMapper = ParserBase.getNumberMapper(dependable.parserObject, ParserBase.getNumberingSystem(cldr));\n                options.timeZone = getValue('dates.timeZoneNames', dependable.parserObject);\n                let value = new Date();\n                let timezone = value.getTimezoneOffset();\n                let pattern = (tLength < 4) ? '+H;-H' : options.timeZone.hourFormat;\n                pattern = pattern.replace(/:/g, options.numMapper.timeSeparator);\n                if (timezone === 0) {\n                    timeZonePattern = options.timeZone.gmtZeroFormat;\n                }\n                else {\n                    timeZonePattern = DateFormat.getTimeZoneValue(timezone, pattern);\n                    timeZonePattern = options.timeZone.gmtFormat.replace(/\\{0\\}/, timeZonePattern);\n                }\n                actualPattern = actualPattern.replace(/[z]+/, '\"' + timeZonePattern + '\"');\n            }\n            actualPattern = actualPattern.replace(/ $/, '');\n        }\n        return actualPattern;\n    }\n    IntlBase.getActualDateTimeFormat = getActualDateTimeFormat;\n    // tslint:disable-next-line:no-any\n    function processSymbol(actual, option) {\n        if (actual.indexOf(',') !== -1) {\n            // tslint:disable-next-line:no-any\n            let split = actual.split(',');\n            actual = (split[0] + getValue('numberMapper.numberSymbols.group', option) +\n                split[1].replace('.', getValue('numberMapper.numberSymbols.decimal', option)));\n        }\n        else {\n            actual = actual.replace('.', getValue('numberMapper.numberSymbols.decimal', option));\n        }\n        return actual;\n    }\n    /**\n     * Returns Native Number pattern\n     * @private\n     * @param {string} culture\n     * @param {NumberFormatOptions} options\n     * @param {Object} cldr\n     * @returns {string}\n     */\n    function getActualNumberFormat(culture, options, cldr, isExcel) {\n        let dependable = getDependables(cldr, culture, '', true);\n        let parseOptions = { custom: true };\n        let numrericObject = dependable.numericObject;\n        let minFrac;\n        let curObj = {};\n        let curMatch = (options.format || '').match(IntlBase.currencyFormatRegex);\n        let type = IntlBase.formatRegex.test(options.format) ? getProperNumericSkeleton(options.format || 'N') : {};\n        let dOptions = {};\n        if (curMatch) {\n            dOptions.numberMapper = isBlazor() ?\n                extend({}, dependable.numericObject) :\n                ParserBase.getNumberMapper(dependable.parserObject, ParserBase.getNumberingSystem(cldr), true);\n            let curCode = isBlazor() ? getValue('currencySymbol', dependable.numericObject) :\n                getCurrencySymbol(dependable.numericObject, options.currency || defaultCurrencyCode, options.altSymbol);\n            let symbolPattern = getSymbolPattern('currency', dOptions.numberMapper.numberSystem, dependable.numericObject, (/a/i).test(options.format));\n            symbolPattern = symbolPattern.replace(/\\u00A4/g, curCode);\n            let split = symbolPattern.split(';');\n            curObj.hasNegativePattern = isBlazor() ? true : (split.length > 1);\n            curObj.nData = isBlazor() ? getValue(type.type + 'nData', numrericObject) :\n                getFormatData(split[1] || '-' + split[0], true, curCode);\n            curObj.pData = isBlazor() ? getValue(type.type + 'pData', numrericObject) :\n                getFormatData(split[0], false, curCode);\n            if (!curMatch[2] && !options.minimumFractionDigits && !options.maximumFractionDigits) {\n                minFrac = getFormatData(symbolPattern.split(';')[0], true, '', true).minimumFraction;\n            }\n        }\n        let actualPattern;\n        if ((IntlBase.formatRegex.test(options.format)) || !(options.format)) {\n            extend(parseOptions, getProperNumericSkeleton(options.format || 'N'));\n            parseOptions.custom = false;\n            actualPattern = '###0';\n            if (parseOptions.fractionDigits || options.minimumFractionDigits || options.maximumFractionDigits || minFrac) {\n                let defaultMinimum = 0;\n                if (parseOptions.fractionDigits) {\n                    options.minimumFractionDigits = options.maximumFractionDigits = parseOptions.fractionDigits;\n                }\n                actualPattern = fractionDigitsPattern(actualPattern, minFrac || parseOptions.fractionDigits ||\n                    options.minimumFractionDigits || defaultMinimum, options.maximumFractionDigits || defaultMinimum);\n            }\n            if (options.minimumIntegerDigits) {\n                actualPattern = minimumIntegerPattern(actualPattern, options.minimumIntegerDigits);\n            }\n            if (options.useGrouping) {\n                actualPattern = groupingPattern(actualPattern);\n            }\n            if (parseOptions.type === 'currency' || (parseOptions.type && isBlazor())) {\n                if (isBlazor() && parseOptions.type !== 'currency') {\n                    curObj.pData = getValue(parseOptions.type + 'pData', numrericObject);\n                    curObj.nData = getValue(parseOptions.type + 'nData', numrericObject);\n                }\n                let cPattern = actualPattern;\n                actualPattern = curObj.pData.nlead + cPattern + curObj.pData.nend;\n                if (curObj.hasNegativePattern || isBlazor()) {\n                    actualPattern += ';' + curObj.nData.nlead + cPattern + curObj.nData.nend;\n                }\n            }\n            if (parseOptions.type === 'percent' && !isBlazor()) {\n                actualPattern += ' %';\n            }\n        }\n        else {\n            actualPattern = options.format.replace(/\\'/g, '\"');\n        }\n        if (Object.keys(dOptions).length > 0) {\n            actualPattern = !isExcel ? processSymbol(actualPattern, dOptions) : actualPattern;\n        }\n        return actualPattern;\n    }\n    IntlBase.getActualNumberFormat = getActualNumberFormat;\n    function fractionDigitsPattern(pattern, minDigits, maxDigits) {\n        pattern += '.';\n        for (let a = 0; a < minDigits; a++) {\n            pattern += '0';\n        }\n        if (minDigits < maxDigits) {\n            let diff = maxDigits - minDigits;\n            for (let b = 0; b < diff; b++) {\n                pattern += '#';\n            }\n        }\n        return pattern;\n    }\n    function minimumIntegerPattern(pattern, digits) {\n        let temp = pattern.split('.');\n        let integer = '';\n        for (let x = 0; x < digits; x++) {\n            integer += '0';\n        }\n        return temp[1] ? (integer + '.' + temp[1]) : integer;\n    }\n    function groupingPattern(pattern) {\n        let temp = pattern.split('.');\n        let integer = temp[0];\n        let no = 3 - integer.length % 3;\n        let hash = (no && no === 1) ? '#' : (no === 2 ? '##' : '');\n        integer = hash + integer;\n        pattern = '';\n        for (let x = integer.length - 1; x > 0; x = x - 3) {\n            pattern = ',' + integer[x - 2] + integer[x - 1] + integer[x] + pattern;\n        }\n        pattern = pattern.slice(1);\n        return temp[1] ? (pattern + '.' + temp[1]) : pattern;\n    }\n    function getWeekData(culture, cldr) {\n        let firstDay = defaultFirstDay;\n        let mapper = getValue('supplemental.weekData.firstDay', cldr);\n        let iCulture = culture;\n        if ((/en-/).test(iCulture)) {\n            iCulture = iCulture.slice(3);\n        }\n        iCulture = iCulture.slice(0, 2).toUpperCase() + iCulture.substr(2);\n        if (mapper) {\n            firstDay = mapper[iCulture] || defaultFirstDay;\n        }\n        return firstDayMapper[firstDay];\n    }\n    IntlBase.getWeekData = getWeekData;\n    /**\n     * @private\n     * @param pData\n     * @param aCurrency\n     * @param rCurrency\n     */\n    function replaceBlazorCurrency(pData, aCurrency, rCurrency) {\n        let iCurrency = getBlazorCurrencySymbol(rCurrency);\n        if (aCurrency !== iCurrency) {\n            for (let data of pData) {\n                data.nend = data.nend.replace(aCurrency, iCurrency);\n                data.nlead = data.nlead.replace(aCurrency, iCurrency);\n            }\n        }\n    }\n    IntlBase.replaceBlazorCurrency = replaceBlazorCurrency;\n    /**\n     * @private\n     */\n    function getWeekOfYear(date) {\n        let newYear = new Date(date.getFullYear(), 0, 1);\n        let day = newYear.getDay();\n        let weeknum;\n        day = (day >= 0 ? day : day + 7);\n        let daynum = Math.floor((date.getTime() - newYear.getTime() -\n            (date.getTimezoneOffset() - newYear.getTimezoneOffset()) * 60000) / 86400000) + 1;\n        if (day < 4) {\n            weeknum = Math.floor((daynum + day - 1) / 7) + 1;\n            if (weeknum > 52) {\n                let nYear = new Date(this.getFullYear() + 1, 0, 1);\n                let nday = nYear.getDay();\n                nday = nday >= 0 ? nday : nday + 7;\n                weeknum = nday < 4 ? 1 : 53;\n            }\n        }\n        else {\n            weeknum = Math.floor((daynum + day - 1) / 7);\n        }\n        return weeknum;\n    }\n    IntlBase.getWeekOfYear = getWeekOfYear;\n})(IntlBase || (IntlBase = {}));\n\nconst headerRegex = /^(.*?):[ \\t]*([^\\r\\n]*)$/gm;\nconst defaultType = 'GET';\n/**\n * Ajax class provides ability to make asynchronous HTTP request to the server\n * ```typescript\n *   var ajax = new Ajax(\"index.html\", \"GET\", true);\n *   ajax.send().then(\n *               function (value) {\n *                   console.log(value);\n *               },\n *               function (reason) {\n *                   console.log(reason);\n *               });\n * ```\n */\nclass Ajax {\n    /**\n     * Constructor for Ajax class\n     * @param  {string|Object} options?\n     * @param  {string} type?\n     * @param  {boolean} async?\n     * @returns defaultType\n     */\n    constructor(options, type, async, contentType) {\n        /**\n         * A boolean value indicating whether the request should be sent asynchronous or not.\n         * @default true\n         */\n        this.mode = true;\n        /**\n         * A boolean value indicating whether to ignore the promise reject.\n         * @private\n         * @default true\n         */\n        this.emitError = true;\n        this.options = {};\n        if (typeof options === 'string') {\n            this.url = options;\n            this.type = type ? type.toUpperCase() : defaultType;\n            this.mode = !isNullOrUndefined(async) ? async : true;\n        }\n        else if (typeof options === 'object') {\n            this.options = options;\n            merge(this, this.options);\n        }\n        this.type = this.type ? this.type.toUpperCase() : defaultType;\n        this.contentType = (this.contentType !== undefined) ? this.contentType : contentType;\n    }\n    /**\n     * Send the request to server.\n     * @param {any} data - To send the user data\n     * @return {Promise}\n     */\n    send(data) {\n        this.data = isNullOrUndefined(data) ? this.data : data;\n        let eventArgs = {\n            cancel: false,\n            httpRequest: null\n        };\n        let promise = new Promise((resolve, reject) => {\n            this.httpRequest = new XMLHttpRequest();\n            this.httpRequest.onreadystatechange = () => { this.stateChange(resolve, reject); };\n            if (!isNullOrUndefined(this.onLoad)) {\n                this.httpRequest.onload = this.onLoad;\n            }\n            if (!isNullOrUndefined(this.onProgress)) {\n                this.httpRequest.onprogress = this.onProgress;\n            }\n            /* istanbul ignore next */\n            if (!isNullOrUndefined(this.onAbort)) {\n                this.httpRequest.onabort = this.onAbort;\n            }\n            /* istanbul ignore next */\n            if (!isNullOrUndefined(this.onError)) {\n                this.httpRequest.onerror = this.onError;\n            }\n            //** Upload Events **/\n            /* istanbul ignore next */\n            if (!isNullOrUndefined(this.onUploadProgress)) {\n                this.httpRequest.upload.onprogress = this.onUploadProgress;\n            }\n            this.httpRequest.open(this.type, this.url, this.mode);\n            // Set default headers\n            if (!isNullOrUndefined(this.data) && this.contentType !== null) {\n                this.httpRequest.setRequestHeader('Content-Type', this.contentType || 'application/json; charset=utf-8');\n            }\n            if (this.beforeSend) {\n                eventArgs.httpRequest = this.httpRequest;\n                this.beforeSend(eventArgs);\n            }\n            if (!eventArgs.cancel) {\n                this.httpRequest.send(!isNullOrUndefined(this.data) ? this.data : null);\n            }\n        });\n        return promise;\n    }\n    successHandler(data) {\n        if (this.onSuccess) {\n            this.onSuccess(data, this);\n        }\n        return data;\n    }\n    failureHandler(reason) {\n        if (this.onFailure) {\n            this.onFailure(this.httpRequest);\n        }\n        return reason;\n    }\n    stateChange(resolve, reject) {\n        let data = this.httpRequest.responseText;\n        if (this.dataType && this.dataType.toLowerCase() === 'json') {\n            if (data === '') {\n                data = undefined;\n            }\n            else {\n                try {\n                    data = JSON.parse(data);\n                }\n                catch (error) {\n                    // no exception handle\n                }\n            }\n        }\n        if (this.httpRequest.readyState === 4) {\n            //success range should be 200 to 299\n            if ((this.httpRequest.status >= 200 && this.httpRequest.status <= 299) || this.httpRequest.status === 304) {\n                resolve(this.successHandler(data));\n            }\n            else {\n                if (this.emitError) {\n                    reject(new Error(this.failureHandler(this.httpRequest.statusText)));\n                }\n                else {\n                    resolve();\n                }\n            }\n        }\n    }\n    /**\n     * To get the response header from XMLHttpRequest\n     * @param  {string} key Key to search in the response header\n     * @returns {string}\n     */\n    getResponseHeader(key) {\n        let responseHeaders;\n        let header;\n        responseHeaders = {};\n        let headers = headerRegex.exec(this.httpRequest.getAllResponseHeaders());\n        while (headers) {\n            responseHeaders[headers[1].toLowerCase()] = headers[2];\n            headers = headerRegex.exec(this.httpRequest.getAllResponseHeaders());\n        }\n        header = responseHeaders[key.toLowerCase()];\n        return isNullOrUndefined(header) ? null : header;\n    }\n}\n\nconst REGX_MOBILE = /android|webos|iphone|ipad|ipod|blackberry|iemobile|opera mini|mobile/i;\nconst REGX_IE = /msie|trident/i;\nconst REGX_IE11 = /Trident\\/7\\./;\nconst REGX_IOS = /(ipad|iphone|ipod touch)/i;\nconst REGX_IOS7 = /(ipad|iphone|ipod touch);.*os 7_\\d|(ipad|iphone|ipod touch);.*os 8_\\d/i;\nconst REGX_ANDROID = /android/i;\nconst REGX_WINDOWS = /trident|windows phone|edge/i;\nconst REGX_VERSION = /(version)[ \\/]([\\w.]+)/i;\nconst REGX_BROWSER = {\n    OPERA: /(opera|opr)(?:.*version|)[ \\/]([\\w.]+)/i,\n    EDGE: /(edge)(?:.*version|)[ \\/]([\\w.]+)/i,\n    CHROME: /(chrome|crios)[ \\/]([\\w.]+)/i,\n    PANTHOMEJS: /(phantomjs)[ \\/]([\\w.]+)/i,\n    SAFARI: /(safari)[ \\/]([\\w.]+)/i,\n    WEBKIT: /(webkit)[ \\/]([\\w.]+)/i,\n    MSIE: /(msie|trident) ([\\w.]+)/i,\n    MOZILLA: /(mozilla)(?:.*? rv:([\\w.]+)|)/i\n};\n/* istanbul ignore else  */\nif (typeof window !== 'undefined') {\n    window.browserDetails = window.browserDetails || {};\n}\n/**\n * Get configuration details for Browser\n * @private\n */\nclass Browser {\n    static extractBrowserDetail() {\n        let browserInfo = { culture: {} };\n        let keys = Object.keys(REGX_BROWSER);\n        let clientInfo = [];\n        for (let key of keys) {\n            clientInfo = Browser.userAgent.match(REGX_BROWSER[key]);\n            if (clientInfo) {\n                browserInfo.name = (clientInfo[1].toLowerCase() === 'opr' ? 'opera' : clientInfo[1].toLowerCase());\n                browserInfo.name = (clientInfo[1].toLowerCase() === 'crios' ? 'chrome' : browserInfo.name);\n                browserInfo.version = clientInfo[2];\n                browserInfo.culture.name = browserInfo.culture.language = navigator.language;\n                if (!!Browser.userAgent.match(REGX_IE11)) {\n                    browserInfo.name = 'msie';\n                    break;\n                }\n                let version = Browser.userAgent.match(REGX_VERSION);\n                if (browserInfo.name === 'safari' && version) {\n                    browserInfo.version = version[2];\n                }\n                break;\n            }\n        }\n        return browserInfo;\n    }\n    /**\n     * To get events from the browser\n     * @param {string} event - type of event triggered.\n     * @returns {Boolean}\n     */\n    static getEvent(event) {\n        // tslint:disable-next-line:no-any\n        let events = {\n            start: {\n                isPointer: 'pointerdown', isTouch: 'touchstart', isDevice: 'mousedown'\n            },\n            move: {\n                isPointer: 'pointermove', isTouch: 'touchmove', isDevice: 'mousemove'\n            },\n            end: {\n                isPointer: 'pointerup', isTouch: 'touchend', isDevice: 'mouseup'\n            },\n            cancel: {\n                isPointer: 'pointercancel', isTouch: 'touchcancel', isDevice: 'mouseleave'\n            }\n        };\n        return (Browser.isPointer ? events[event].isPointer :\n            (Browser.isTouch ? events[event].isTouch + (!Browser.isDevice ? ' ' + events[event].isDevice : '')\n                : events[event].isDevice));\n    }\n    /**\n     * To get the Touch start event from browser\n     * @returns {string}\n     */\n    static getTouchStartEvent() {\n        return Browser.getEvent('start');\n    }\n    /**\n     * To get the Touch end event from browser\n     * @returns {string}\n     */\n    static getTouchEndEvent() {\n        return Browser.getEvent('end');\n    }\n    /**\n     * To get the Touch move event from browser\n     * @returns {string}\n     */\n    static getTouchMoveEvent() {\n        return Browser.getEvent('move');\n    }\n    /**\n     * To cancel the touch event from browser\n     * @returns {string}\n     */\n    static getTouchCancelEvent() {\n        return Browser.getEvent('cancel');\n    }\n    /**\n     * To get the value based on provided key and regX\n     * @param {string} key\n     * @param {RegExp} regX\n     * @returns {Object}\n     */\n    static getValue(key, regX) {\n        let browserDetails = window.browserDetails;\n        if ('undefined' === typeof browserDetails[key]) {\n            return browserDetails[key] = regX.test(Browser.userAgent);\n        }\n        return browserDetails[key];\n    }\n    //Properties \n    /**\n     * Property specifies the userAgent of the browser. Default userAgent value is based on the browser.\n     * Also we can set our own userAgent.\n     */\n    static set userAgent(uA) {\n        Browser.uA = uA;\n        window.browserDetails = {};\n    }\n    static get userAgent() {\n        return Browser.uA;\n    }\n    //Read Only Properties\n    /**\n     * Property is to get the browser information like Name, Version and Language\n     * @returns BrowserInfo\n     */\n    static get info() {\n        if (isUndefined(window.browserDetails.info)) {\n            return window.browserDetails.info = Browser.extractBrowserDetail();\n        }\n        return window.browserDetails.info;\n    }\n    /**\n     * Property is to get whether the userAgent is based IE.\n     */\n    static get isIE() {\n        return Browser.getValue('isIE', REGX_IE);\n    }\n    /**\n     * Property is to get whether the browser has touch support.\n     */\n    static get isTouch() {\n        if (isUndefined(window.browserDetails.isTouch)) {\n            return (window.browserDetails.isTouch =\n                ('ontouchstart' in window.navigator) ||\n                    (window &&\n                        window.navigator &&\n                        (window.navigator.maxTouchPoints > 0)) || ('ontouchstart' in window));\n        }\n        return window.browserDetails.isTouch;\n    }\n    /**\n     * Property is to get whether the browser has Pointer support.\n     */\n    static get isPointer() {\n        if (isUndefined(window.browserDetails.isPointer)) {\n            return window.browserDetails.isPointer = ('pointerEnabled' in window.navigator);\n        }\n        return window.browserDetails.isPointer;\n    }\n    /**\n     * Property is to get whether the browser has MSPointer support.\n     */\n    static get isMSPointer() {\n        if (isUndefined(window.browserDetails.isMSPointer)) {\n            return window.browserDetails.isMSPointer = ('msPointerEnabled' in window.navigator);\n        }\n        return window.browserDetails.isMSPointer;\n    }\n    /**\n     * Property is to get whether the userAgent is device based.\n     */\n    static get isDevice() {\n        return Browser.getValue('isDevice', REGX_MOBILE);\n    }\n    /**\n     * Property is to get whether the userAgent is IOS.\n     */\n    static get isIos() {\n        return Browser.getValue('isIos', REGX_IOS);\n    }\n    /**\n     * Property is to get whether the userAgent is Ios7.\n     */\n    static get isIos7() {\n        return Browser.getValue('isIos7', REGX_IOS7);\n    }\n    /**\n     * Property is to get whether the userAgent is Android.\n     */\n    static get isAndroid() {\n        return Browser.getValue('isAndroid', REGX_ANDROID);\n    }\n    /**\n     * Property is to identify whether application ran in web view.\n     */\n    static get isWebView() {\n        if (isUndefined(window.browserDetails.isWebView)) {\n            window.browserDetails.isWebView = !(isUndefined(window.cordova) && isUndefined(window.PhoneGap)\n                && isUndefined(window.phonegap) && window.forge !== 'object');\n            return window.browserDetails.isWebView;\n        }\n        return window.browserDetails.isWebView;\n    }\n    /**\n     * Property is to get whether the userAgent is Windows.\n     */\n    static get isWindows() {\n        return Browser.getValue('isWindows', REGX_WINDOWS);\n    }\n    /**\n     * Property is to get the touch start event. It returns event name based on browser.\n     */\n    static get touchStartEvent() {\n        if (isUndefined(window.browserDetails.touchStartEvent)) {\n            return window.browserDetails.touchStartEvent = Browser.getTouchStartEvent();\n        }\n        return window.browserDetails.touchStartEvent;\n    }\n    /**\n     * Property is to get the touch move event. It returns event name based on browser.\n     */\n    static get touchMoveEvent() {\n        if (isUndefined(window.browserDetails.touchMoveEvent)) {\n            return window.browserDetails.touchMoveEvent = Browser.getTouchMoveEvent();\n        }\n        return window.browserDetails.touchMoveEvent;\n    }\n    /**\n     * Property is to get the touch end event. It returns event name based on browser.\n     */\n    static get touchEndEvent() {\n        if (isUndefined(window.browserDetails.touchEndEvent)) {\n            return window.browserDetails.touchEndEvent = Browser.getTouchEndEvent();\n        }\n        return window.browserDetails.touchEndEvent;\n    }\n    /**\n     * Property is to cancel the touch end event.\n     */\n    static get touchCancelEvent() {\n        if (isUndefined(window.browserDetails.touchCancelEvent)) {\n            return window.browserDetails.touchCancelEvent = Browser.getTouchCancelEvent();\n        }\n        return window.browserDetails.touchCancelEvent;\n    }\n}\n/* istanbul ignore next */\nBrowser.uA = typeof navigator !== 'undefined' ? navigator.userAgent : '';\n\n/**\n * EventHandler class provides option to add, remove, clear and trigger events to a HTML DOM element\n * @private\n * ```html\n * <div id=\"Eventdiv\">  </div>\n * <script>\n *   let node: HTMLElement = document.querySelector(\"#Eventdiv\");\n *   EventHandler.addEventListener(node, \"click\", function(){\n *       // click handler function code\n *   });\n *   EventHandler.addEventListener(node, \"onmouseover\", function(){\n *       // mouseover handler function code\n *   });\n *   EventHandler.removeEventListener(node, \"click\", function(){\n *       // click handler function code\n *   });\n *   eventObj.clearEvents();\n * </script>\n * ```\n */\nclass EventHandler {\n    // to get the event data based on element\n    static addOrGetEventData(element) {\n        if ('__eventList' in element) {\n            return element.__eventList.events;\n        }\n        else {\n            element.__eventList = {};\n            return element.__eventList.events = [];\n        }\n    }\n    /**\n     * Add an event to the specified DOM element.\n     * @param {any} element - Target HTML DOM element\n     * @param {string} eventName - A string that specifies the name of the event\n     * @param {Function} listener - Specifies the function to run when the event occurs\n     * @param {Object} bindTo - A object that binds 'this' variable in the event handler\n     * @param {number} debounce - Specifies at what interval given event listener should be triggered.\n     * @return {Function}\n     */\n    static add(element, eventName, listener, bindTo, intDebounce) {\n        let eventData = EventHandler.addOrGetEventData(element);\n        let debounceListener;\n        if (intDebounce) {\n            debounceListener = debounce(listener, intDebounce);\n        }\n        else {\n            debounceListener = listener;\n        }\n        if (bindTo) {\n            debounceListener = debounceListener.bind(bindTo);\n        }\n        let event = eventName.split(' ');\n        for (let i = 0; i < event.length; i++) {\n            eventData.push({\n                name: event[i],\n                listener: listener,\n                debounce: debounceListener\n            });\n            if (Browser.isIE) {\n                element.addEventListener(event[i], debounceListener);\n            }\n            else {\n                element.addEventListener(event[i], debounceListener, { passive: false });\n            }\n        }\n        return debounceListener;\n    }\n    /**\n     * Remove an event listener that has been attached before.\n     * @param {any} element - Specifies the target html element to remove the event\n     * @param {string} eventName - A string that specifies the name of the event to remove\n     * @param {Function} listener - Specifies the function to remove\n     * @return {void}\n     */\n    static remove(element, eventName, listener) {\n        let eventData = EventHandler.addOrGetEventData(element);\n        let event = eventName.split(' ');\n        for (let j = 0; j < event.length; j++) {\n            let index = -1;\n            let debounceListener;\n            if (eventData && eventData.length !== 0) {\n                eventData.some((x, i) => {\n                    return x.name === event[j] && x.listener === listener ?\n                        (index = i, debounceListener = x.debounce, true) : false;\n                });\n            }\n            if (index !== -1) {\n                eventData.splice(index, 1);\n            }\n            if (debounceListener) {\n                element.removeEventListener(event[j], debounceListener);\n            }\n        }\n    }\n    /**\n     * Clear all the event listeners that has been previously attached to the element.\n     * @param {any} element - Specifies the target html element to clear the events\n     * @return {void}\n     */\n    static clearEvents(element) {\n        let eventData;\n        let copyData;\n        eventData = EventHandler.addOrGetEventData(element);\n        copyData = extend([], copyData, eventData);\n        for (let i = 0; i < copyData.length; i++) {\n            element.removeEventListener(copyData[i].name, copyData[i].debounce);\n            eventData.shift();\n        }\n    }\n    /**\n     * Trigger particular event of the element.\n     * @param {any} element - Specifies the target html element to trigger the events\n     * @param {string} eventName - Specifies the event to trigger for the specified element.\n     * Can be a custom event, or any of the standard events.\n     * @param {any} eventProp - Additional parameters to pass on to the event properties\n     * @return {void}\n     */\n    static trigger(element, eventName, eventProp) {\n        let eventData = EventHandler.addOrGetEventData(element);\n        for (let event of eventData) {\n            if (event.name === eventName) {\n                event.debounce.call(this, eventProp);\n            }\n        }\n    }\n}\n\n/**\n * Template Engine\n */\nconst LINES = new RegExp('\\\\n|\\\\r|\\\\s\\\\s+', 'g');\nconst QUOTES = new RegExp(/'|\"/g);\nconst IF_STMT = new RegExp('if ?\\\\(');\nconst ELSEIF_STMT = new RegExp('else if ?\\\\(');\nconst ELSE_STMT = new RegExp('else');\nconst FOR_STMT = new RegExp('for ?\\\\(');\nconst IF_OR_FOR = new RegExp('(\\/if|\\/for)');\nconst CALL_FUNCTION = new RegExp('\\\\((.*)\\\\)', '');\nconst NOT_NUMBER = new RegExp('^[0-9]+$', 'g');\nconst WORD = new RegExp('[\\\\w\"\\'.\\\\s+]+', 'g');\nconst DBL_QUOTED_STR = new RegExp('\"(.*?)\"', 'g');\nconst WORDIF = new RegExp('[\\\\w\"\\'@#$.\\\\s+]+', 'g');\nlet exp = new RegExp('\\\\${([^}]*)}', 'g');\n// let cachedTemplate: Object = {};\nlet ARR_OBJ = /^\\..*/gm;\nlet SINGLE_SLASH = /\\\\/gi;\nlet DOUBLE_SLASH = /\\\\\\\\/gi;\nconst WORDFUNC = new RegExp('[\\\\w\"\\'@#$.\\\\s+]+', 'g');\nconst WINDOWFUNC = /\\window\\./gm;\n/**\n * The function to set regular expression for template expression string.\n * @param  {RegExp} value - Value expression.\n * @private\n */\n\n// /**\n//  * To render the template string from the given data.\n//  * @param  {string} template - String Template.\n//  * @param  {Object[]|JSON} data - DataSource for the template.\n//  * @param  {Object} helper? - custom helper object.\n//  */\n// export function template(template: string, data: JSON, helper?: Object): string {\n//     let hash: string = hashCode(template);\n//     let tmpl: Function;\n//     if (!cachedTemplate[hash]) {\n//         tmpl = cachedTemplate[hash] = compile(template, helper);\n//     } else {\n//         tmpl = cachedTemplate[hash];\n//     }\n//     return tmpl(data);\n// }\n/**\n * Compile the template string into template function.\n * @param  {string} template - The template string which is going to convert.\n * @param  {Object} helper? - Helper functions as an object.\n * @private\n */\nfunction compile$1(template, helper) {\n    let argName = 'data';\n    let evalExpResult = evalExp(template, argName, helper);\n    let fnCode = `var str=\"${evalExpResult}\"; return str;`;\n    // tslint:disable-next-line:no-function-constructor-with-string-args\n    let fn = new Function(argName, fnCode);\n    return fn.bind(helper);\n}\n// function used to evaluate the function expression\nfunction evalExp(str, nameSpace, helper) {\n    let varCOunt = 0;\n    /**\n     * Variable containing Local Keys\n     */\n    let localKeys = [];\n    let isClass = str.match(/class=\"([^\\\"]+|)\\s{2}/g);\n    let singleSpace = '';\n    if (isClass) {\n        isClass.forEach((value) => {\n            singleSpace = value.replace(/\\s\\s+/g, ' ');\n            str = str.replace(value, singleSpace);\n        });\n    }\n    return str.replace(LINES, '').replace(DBL_QUOTED_STR, '\\'$1\\'').replace(exp, (match, cnt, offset, matchStr) => {\n        const SPECIAL_CHAR = /\\@|\\#|\\$/gm;\n        let matches = cnt.match(CALL_FUNCTION);\n        // matches to detect any function calls\n        if (matches) {\n            let rlStr = matches[1];\n            if (ELSEIF_STMT.test(cnt)) {\n                //handling else-if condition\n                cnt = '\";} ' + cnt.replace(matches[1], rlStr.replace(WORD, (str) => {\n                    str = str.trim();\n                    return addNameSpace(str, !(QUOTES.test(str)) && (localKeys.indexOf(str) === -1), nameSpace, localKeys);\n                })) + '{ \\n str = str + \"';\n            }\n            else if (IF_STMT.test(cnt)) {\n                //handling if condition\n                cnt = '\"; ' + cnt.replace(matches[1], rlStr.replace(WORDIF, (strs) => {\n                    return HandleSpecialCharArrObj(strs, nameSpace, localKeys);\n                })) + '{ \\n str = str + \"';\n            }\n            else if (FOR_STMT.test(cnt)) {\n                //handling for condition\n                let rlStr = matches[1].split(' of ');\n                // replace for each into actual JavaScript\n                cnt = '\"; ' + cnt.replace(matches[1], (mtc) => {\n                    localKeys.push(rlStr[0]);\n                    localKeys.push(rlStr[0] + 'Index');\n                    varCOunt = varCOunt + 1;\n                    // tslint:disable-next-line\n                    return 'var i' + varCOunt + '=0; i' + varCOunt + ' < ' + addNameSpace(rlStr[1], true, nameSpace, localKeys) + '.length; i' + varCOunt + '++';\n                }) + '{ \\n ' + rlStr[0] + '= ' + addNameSpace(rlStr[1], true, nameSpace, localKeys)\n                    + '[i' + varCOunt + ']; \\n var ' + rlStr[0] + 'Index=i' + varCOunt + '; \\n str = str + \"';\n            }\n            else {\n                //helper function handling\n                let fnStr = cnt.split('(');\n                let fNameSpace = (helper && helper.hasOwnProperty(fnStr[0]) ? 'this.' : 'global');\n                fNameSpace = (/\\./.test(fnStr[0]) ? '' : fNameSpace);\n                let ftArray = matches[1].split(',');\n                if (matches[1].length !== 0 && !(/data/).test(ftArray[0]) && !(/window./).test(ftArray[0])) {\n                    matches[1] = (fNameSpace === 'global' ? nameSpace + '.' + matches[1] : matches[1]);\n                }\n                let splRegexp = /\\@|\\$|\\#/gm;\n                let arrObj = /\\]\\./gm;\n                if (WINDOWFUNC.test(cnt) && arrObj.test(cnt) || splRegexp.test(cnt)) {\n                    let splArrRegexp = /\\@|\\$|\\#|\\]\\./gm;\n                    if (splArrRegexp.test(cnt)) {\n                        // tslint:disable-next-line\n                        cnt = '\"+ ' + (fNameSpace === 'global' ? '' : fNameSpace) + cnt.replace(matches[1], rlStr.replace(WORDFUNC, (strs) => {\n                            return HandleSpecialCharArrObj(strs, nameSpace, localKeys);\n                        })) + '+ \"';\n                    }\n                }\n                else {\n                    cnt = '\" + ' + (fNameSpace === 'global' ? '' : fNameSpace) +\n                        cnt.replace(rlStr, addNameSpace(matches[1].replace(/,( |)data.|,/gi, ',' + nameSpace + '.').replace(/,( |)data.window/gi, ',window'), (fNameSpace === 'global' ? false : true), nameSpace, localKeys)) +\n                        '+\"';\n                }\n            }\n        }\n        else if (ELSE_STMT.test(cnt)) {\n            // handling else condition\n            cnt = '\"; ' + cnt.replace(ELSE_STMT, '} else { \\n str = str + \"');\n        }\n        else if (!!cnt.match(IF_OR_FOR)) {\n            // close condition \n            cnt = cnt.replace(IF_OR_FOR, '\"; \\n } \\n str = str + \"');\n        }\n        else if (SPECIAL_CHAR.test(cnt)) {\n            // template string with double slash with special character\n            if (cnt.match(SINGLE_SLASH)) {\n                cnt = SlashReplace(cnt);\n            }\n            cnt = '\"+' + NameSpaceForspecialChar(cnt, (localKeys.indexOf(cnt) === -1), nameSpace, localKeys) + '\"]+\"';\n        }\n        else {\n            // template string with double slash\n            if (cnt.match(SINGLE_SLASH)) {\n                cnt = SlashReplace(cnt);\n                cnt = '\"+' + NameSpaceForspecialChar(cnt, (localKeys.indexOf(cnt) === -1), nameSpace, localKeys) + '\"]+\"';\n            }\n            else {\n                // evaluate normal expression\n                cnt = '\"+' + addNameSpace(cnt.replace(/\\,/gi, '+' + nameSpace + '.'), (localKeys.indexOf(cnt) === -1), nameSpace, localKeys) + '+\"';\n            }\n        }\n        return cnt;\n    });\n}\nfunction addNameSpace(str, addNS, nameSpace, ignoreList) {\n    return ((addNS && !(NOT_NUMBER.test(str)) && ignoreList.indexOf(str.split('.')[0]) === -1) ? nameSpace + '.' + str : str);\n}\nfunction NameSpaceArrObj(str, addNS, nameSpace, ignoreList) {\n    let arrObjReg = /^\\..*/gm;\n    return ((addNS && !(NOT_NUMBER.test(str)) &&\n        ignoreList.indexOf(str.split('.')[0]) === -1 && !(arrObjReg.test(str))) ? nameSpace + '.' + str : str);\n}\n// // Create hashCode for template string to storeCached function\n// function hashCode(str: string): string {\n//     return str.split('').reduce((a: number, b: string) => { a = ((a << 5) - a) + b.charCodeAt(0); return a & a; }, 0).toString();\n// }\nfunction NameSpaceForspecialChar(str, addNS, nameSpace, ignoreList) {\n    return ((addNS && !(NOT_NUMBER.test(str)) && ignoreList.indexOf(str.split('.')[0]) === -1) ? nameSpace + '[\"' + str : str);\n}\n// tslint:disable-next-line\nfunction SlashReplace(tempStr) {\n    // tslint:disable-next-line\n    let double = `\\\\\\\\`;\n    if (tempStr.match(DOUBLE_SLASH)) {\n        tempStr = tempStr;\n    }\n    else {\n        tempStr = tempStr.replace(SINGLE_SLASH, double);\n    }\n    return tempStr;\n}\nfunction HandleSpecialCharArrObj(str, nameSpaceNew, keys) {\n    str = str.trim();\n    let windowFunc = /\\window\\./gm;\n    if (!windowFunc.test(str)) {\n        let quotes = /'|\"/gm;\n        let splRegexp = /\\@|\\$|\\#/gm;\n        if (splRegexp.test(str)) {\n            str = NameSpaceForspecialChar(str, (keys.indexOf(str) === -1), nameSpaceNew, keys) + '\"]';\n        }\n        if (ARR_OBJ.test(str)) {\n            return NameSpaceArrObj(str, !(quotes.test(str)) && (keys.indexOf(str) === -1), nameSpaceNew, keys);\n        }\n        else {\n            return addNameSpace(str, !(quotes.test(str)) && (keys.indexOf(str) === -1), nameSpaceNew, keys);\n        }\n    }\n    else {\n        return str;\n    }\n}\n\n/**\n * Template Engine Bridge\n */\nconst HAS_ROW = /^[\\n\\r.]+\\<tr|^\\<tr/;\nconst HAS_SVG = /^[\\n\\r.]+\\<svg|^\\<path|^\\<g/;\nlet blazorTemplates = {};\nfunction getRandomId() {\n    return '-' + Math.random().toString(36).substr(2, 5);\n}\n/**\n * Compile the template string into template function.\n * @param  {string} templateString - The template string which is going to convert.\n * @param  {Object} helper? - Helper functions as an object.\n * @private\n */\n//tslint:disable-next-line\nfunction compile$$1(templateString, helper) {\n    let compiler = engineObj.compile(templateString, helper);\n    //tslint:disable-next-line\n    return (data, component, propName, templateId, isStringTemplate, index, element) => {\n        let result = compiler(data, component, propName, element);\n        let blazorTemplateId = 'BlazorTemplateId';\n        if (isBlazor() && !isStringTemplate) {\n            let randomId = getRandomId();\n            let blazorId = templateId + randomId;\n            if (!blazorTemplates[templateId]) {\n                blazorTemplates[templateId] = [];\n            }\n            if (!isNullOrUndefined(index)) {\n                let keys = Object.keys(blazorTemplates[templateId][index]);\n                for (let key of keys) {\n                    if (key !== blazorTemplateId && data[key]) {\n                        blazorTemplates[templateId][index][key] = data[key];\n                    }\n                    if (key === blazorTemplateId) {\n                        blazorId = blazorTemplates[templateId][index][key];\n                    }\n                }\n            }\n            else {\n                data[blazorTemplateId] = blazorId;\n                blazorTemplates[templateId].push(data);\n            }\n            // tslint:disable-next-line:no-any\n            return propName === 'rowTemplate' ? [createElement('tr', { id: blazorId, className: 'e-blazor-template' })] :\n                // tslint:disable-next-line:no-any\n                [createElement('div', { id: blazorId, className: 'e-blazor-template' })];\n        }\n        if (typeof result === 'string') {\n            if (HAS_SVG.test(result)) {\n                let ele = createElement('svg', { innerHTML: result });\n                return ele.childNodes;\n            }\n            else {\n                let ele = createElement((HAS_ROW.test(result) ? 'table' : 'div'), { innerHTML: result });\n                return ele.childNodes;\n            }\n        }\n        else {\n            return result;\n        }\n    };\n}\nfunction updateBlazorTemplate(templateId, templateName, comp, isEmpty, callBack) {\n    if (isBlazor()) {\n        let ejsIntrop = 'sfBlazor';\n        window[ejsIntrop].updateTemplate(templateName, blazorTemplates[templateId], templateId, comp, callBack);\n        if (isEmpty !== false) {\n            blazorTemplates[templateId] = [];\n        }\n    }\n}\nfunction resetBlazorTemplate(templateId, templateName, index) {\n    let templateDiv = document.getElementById(templateId);\n    if (templateDiv) {\n        // tslint:disable-next-line:no-any\n        let innerTemplates = templateDiv.getElementsByClassName('blazor-inner-template');\n        for (let i = 0; i < innerTemplates.length; i++) {\n            let tempId = ' ';\n            if (!isNullOrUndefined(index)) {\n                tempId = innerTemplates[index].getAttribute('data-templateId');\n            }\n            else {\n                tempId = innerTemplates[i].getAttribute('data-templateId');\n            }\n            let tempElement = document.getElementById(tempId);\n            if (tempElement) {\n                let length = tempElement.childNodes.length;\n                for (let j = 0; j < length; j++) {\n                    if (!isNullOrUndefined(index)) {\n                        innerTemplates[index].appendChild(tempElement.childNodes[0]);\n                        i = innerTemplates.length;\n                    }\n                    else {\n                        innerTemplates[i].appendChild(tempElement.childNodes[0]);\n                    }\n                }\n            }\n        }\n    }\n}\n/**\n * Set your custom template engine for template rendering.\n * @param  {ITemplateEngine} classObj - Class object for custom template.\n * @private\n */\nfunction setTemplateEngine(classObj) {\n    engineObj.compile = classObj.compile;\n}\n/**\n * Get current template engine for template rendering\n * @param  {ITemplateEngine} classObj - Class object for custom template.\n * @private\n */\nfunction getTemplateEngine() {\n    return engineObj.compile;\n}\n//Default Engine Class\nclass Engine {\n    compile(templateString, helper = {}) {\n        return compile$1(templateString, helper);\n    }\n}\nlet engineObj = { compile: new Engine().compile };\n\nconst simpleRegex = /^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/;\nconst multipleSplitRegex = /(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))/g;\nconst idClassSelector = /^(\\.|#)/;\nconst selectMapper = {\n    '.': 'className',\n    '#': 'id'\n};\nconst classRegexString = '(?=.*?\\\\b{value}\\\\b)';\nconst assigner = { className: 'attributes.className', id: 'attributes.id', tagName: 'tagName' };\nconst emptyElements = ['area', 'base', 'basefont', 'br', 'col', 'frame', 'hr', 'img', 'input',\n    'link', 'meta', 'param', 'embed', 'command', 'keygen', 'source', 'track', 'wbr'];\nconst blockElements = ['a', 'address', 'article', 'applet', 'aside', 'audio', 'blockquote',\n    'button', 'canvas', 'center', 'dd', 'del', 'dir', 'div', 'dl', 'dt', 'fieldset', 'figcaption', 'figure',\n    'footer', 'form', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'header', 'hgroup', 'hr', 'iframe', 'ins',\n    'isindex', 'li', 'map', 'menu', 'noframes', 'noscript', 'object', 'ol', 'output', 'p', 'pre', 'section',\n    'script', 'table', 'tbody', 'td', 'tfoot', 'th', 'thead', 'tr', 'ul', 'video'];\nconst inlineElement = ['abbr', 'acronym', 'applet', 'b', 'basefont', 'bdo', 'big', 'br', 'button',\n    'cite', 'code', 'del', 'dfn', 'em', 'font', 'i', 'iframe', 'img', 'input', 'ins', 'kbd', 'label', 'map',\n    'object', 'q', 's', 'samp', 'script', 'select', 'small', 'span', 'strike', 'strong', 'sub', 'sup', 'textarea',\n    'tt', 'u', 'var'];\nconst selfClosingElements = ['colgroup', 'dd', 'dt', 'li', 'options', 'p', 'td', 'tfoot', 'th',\n    'thead', 'tr'];\nconst fillAttrs = ['checked', 'compact', 'declare', 'defer', 'disabled', 'ismap', 'multiple',\n    'nohref', 'noresize', 'noshade', 'nowrap', 'readonly', 'selected'];\nconst cspElement = ['Script', 'style'];\nconst nameMapper = { 'tabindex': 'tabIndex' };\nconst startRegex = /^<([-A-Za-z0-9_]+)((?:\\s+[a-zA-Z_:][-a-zA-Z0-9_:.]*(?:\\s*=\\s*(?:(?:\"[^\"]*\")|(?:'[^']*')|[^>\\s]+))?)*)\\s*(\\/?)>/;\nconst endRegex = /^<\\/([-A-Za-z0-9_]+)[^>]*>/;\nconst attributeRegex = /([a-zA-Z_:][-a-zA-Z0-9_:.]*)(?:\\s*=\\s*(?:(?:\"((?:\\\\.|[^\"])*)\")|(?:'((?:\\\\.|[^'])*)')|([^>\\s]+)))?/g;\n/**\n * Namespace for VirtualDOM\n * @private\n */\nvar VirtualDOM;\n(function (VirtualDOM) {\n    //tslint:disable:no-any\n    function createElement(tagName, properties) {\n        let children = [];\n        let extended = extend({}, {}, properties, true);\n        if (!isNullOrUndefined(properties)) {\n            let keys = Object.keys(properties);\n            if (keys.length) {\n                if (extended.innerHTML) {\n                    children = ConvertHTMLToJSon(extended.innerHTML);\n                    delete extended.innerHTML;\n                }\n                if (extended.attrs) {\n                    extend(extended, extended.attrs);\n                    delete extended.attrs;\n                }\n                if (extended.styles) {\n                    let valArr = extended.styles.split(';');\n                    let vObj = {};\n                    for (let i = 0, length = valArr.length; i < length; i++) {\n                        let cVal = valArr[i];\n                        let styleSplit = cVal.split(':');\n                        vObj[styleSplit[0]] = styleSplit[1];\n                    }\n                    delete extended.styles;\n                    extended.style = vObj;\n                }\n            }\n        }\n        return {\n            tagName: tagName,\n            attributes: extended || {},\n            children: children\n        };\n    }\n    VirtualDOM.createElement = createElement;\n    function assignParent(childrens, parent) {\n        if (parent && childrens) {\n            childrens.forEach((child) => {\n                if (isObject(child)) {\n                    if (child.parent) {\n                        detach(child);\n                    }\n                    child.parent = parent;\n                }\n                return child;\n            });\n        }\n    }\n    VirtualDOM.assignParent = assignParent;\n    function append(fromElements, toElement) {\n        assignParent(fromElements, toElement);\n        if (toElement.children) {\n            toElement.children = toElement.children.concat(fromElements);\n        }\n        else {\n            toElement.children = [].concat(fromElements);\n        }\n    }\n    VirtualDOM.append = append;\n    function prepend(child, toElement) {\n        assignParent(child, toElement);\n        if (!toElement.children || !toElement.children.length) {\n            toElement.children = [];\n            toElement.children.concat(child);\n        }\n        else {\n            for (let i = child.length - 1; i >= 0; i--) {\n                toElement.children.unshift(child[i]);\n            }\n        }\n    }\n    VirtualDOM.prepend = prepend;\n    function detach(element) {\n        let parent = element.parent;\n        if (parent) {\n            let index = parent.children.indexOf(element);\n            if (index !== -1) {\n                parent.children.splice(index);\n            }\n        }\n        return parent;\n    }\n    VirtualDOM.detach = detach;\n    //tslint:disable-next-line\n    function vDomSelector({ ele, selector, selectAll, immediateParent }) {\n        let iSelector = selector.split(' ');\n        let curColl = ele;\n        for (let i = 0, length = iSelector.length; i < length; i++) {\n            let isDescendant = false;\n            let parent = curColl;\n            let curSelector = iSelector[i];\n            let mapper = [];\n            if (simpleRegex.test(curSelector)) {\n                processSelector(curSelector, mapper);\n            }\n            else if (curSelector.indexOf('>') === -1) {\n                let splitSelector = curSelector.match(multipleSplitRegex);\n                for (let curMap of splitSelector) {\n                    processSelector(curMap, mapper);\n                }\n            }\n            else if (curSelector.indexOf('>') !== -1) {\n                isDescendant = true;\n                let dSelector = curSelector.split('>');\n                //tslint:disable-next-line\n                let dParent = ele;\n                let descendent;\n                let flag = 0;\n                for (let sel of dSelector) {\n                    if (!dParent) {\n                        break;\n                    }\n                    if (dParent.length) {\n                        let descendentChild = [];\n                        for (let child of dParent) {\n                            descendentChild = descendentChild.concat(vDomSelector({\n                                ele: child, selector: sel,\n                                selectAll, immediateParent: !!flag\n                            }));\n                        }\n                        descendent = descendentChild;\n                    }\n                    else {\n                        descendent = vDomSelector({ ele: dParent, selector: sel, selectAll, immediateParent: !!flag });\n                    }\n                    flag++;\n                    dParent = descendent;\n                }\n                if (descendent) {\n                    curColl = descendent;\n                }\n            }\n            if (!isDescendant) {\n                if (parent.length) {\n                    let iCurSelector = [];\n                    for (let curParent of parent) {\n                        iCurSelector = iCurSelector.concat(accessElement(curParent, mapper, selectAll, immediateParent));\n                    }\n                    curColl = iCurSelector;\n                }\n                else {\n                    curColl = accessElement(parent, mapper, selectAll, immediateParent);\n                }\n            }\n        }\n        if (selectAll) {\n            return curColl;\n        }\n        else {\n            return curColl[0] || null;\n        }\n    }\n    VirtualDOM.vDomSelector = vDomSelector;\n    function processSelector(selector, mapper) {\n        let match = selector.match(idClassSelector);\n        let obj = {};\n        if (match) {\n            let curMapper = selectMapper[match[0]];\n            if (curMapper === 'className') {\n                let curObj = mapper.filter((obj) => { return obj.hasOwnProperty('className'); })[0];\n                let canPush = false;\n                if (!curObj) {\n                    canPush = true;\n                    curObj = {};\n                }\n                let existValue = curObj[curMapper] || '';\n                curObj[curMapper] = existValue + classRegexString.replace('{value}', selector.replace('.', ''));\n                if (canPush) {\n                    mapper.push(curObj);\n                }\n            }\n            else {\n                obj[curMapper] = selector.replace(match[0], '');\n                mapper.push(obj);\n            }\n        }\n        else {\n            mapper.push({ tagName: selector });\n        }\n    }\n    //tslint:disable-next-line\n    function accessElement(ele, mapper, selectAll, immediateParent) {\n        if (ele.children) {\n            //tslint:disable-next-line\n            let temp = ele.children.filter(function (child) {\n                if (typeof (child) !== 'string') {\n                    let matched = true;\n                    for (let map of mapper) {\n                        let key = Object.keys(map)[0];\n                        let expected = map[key];\n                        let actualValue = getValue(assigner[key], child);\n                        if (key === 'className') {\n                            if (!(new RegExp('^' + expected + '.*$').test(actualValue))) {\n                                matched = false;\n                                break;\n                            }\n                        }\n                        else if (actualValue !== expected) {\n                            matched = false;\n                            break;\n                        }\n                    }\n                    return matched;\n                }\n                else {\n                    return false;\n                }\n            });\n            if (!immediateParent && (!temp.length || selectAll)) {\n                ele.children.forEach((child) => {\n                    if (isObject(child)) {\n                        temp = temp.concat(accessElement(child, mapper, selectAll));\n                    }\n                });\n            }\n            return temp;\n        }\n        else {\n            return [];\n        }\n    }\n    VirtualDOM.accessElement = accessElement;\n    function ConvertHTMLToJSon(htmlString) {\n        let results = [];\n        let isText;\n        let tagArray = [];\n        let nodeArray = [];\n        while (htmlString) {\n            isText = true;\n            let lastVal = getLastValue(tagArray);\n            if (!lastVal || !contains(cspElement, lastVal)) {\n                if (htmlString.indexOf('</') === 0) {\n                    let match = htmlString.match(endRegex);\n                    if (match) {\n                        htmlString = htmlString.substring(match[0].length);\n                        //tslint:disable-next-line\n                        match[0].replace(endRegex, iterateEndTag);\n                    }\n                    isText = false;\n                }\n                else if (htmlString.indexOf('<') === 0) {\n                    let match = htmlString.match(startRegex);\n                    if (match) {\n                        htmlString = htmlString.substring(match[0].length);\n                        //tslint:disable-next-line\n                        match[0].replace(startRegex, iterateStartTag);\n                    }\n                    isText = false;\n                }\n                if (isText) {\n                    let tagIndex = htmlString.indexOf('<');\n                    let text = tagIndex < 0 ? htmlString : htmlString.substring(0, tagIndex);\n                    htmlString = tagIndex < 0 ? '' : htmlString.substring(tagIndex);\n                    iterateText(text);\n                }\n            }\n            else {\n                //tslint:disable-next-line\n                htmlString = htmlString.replace(new RegExp('([\\\\s\\\\S]*?)<\\/' + getLastValue(nodeArray) + '[^>]*>'), (all, text) => {\n                    text = text.replace(/<!--([\\s\\S]*?)-->|<!\\[CDATA\\[([\\s\\S]*?)]]>/g, '$1$2');\n                    iterateText(text);\n                    return '';\n                });\n                iterateEndTag('', getLastValue(tagArray));\n            }\n            \n        }\n        function iterateStartTag(start, tagName, rest) {\n            tagName = tagName.toLowerCase();\n            if (contains(blockElements, tagName)) {\n                while (getLastValue(tagArray) && contains(inlineElement, getLastValue(tagArray))) {\n                    iterateEndTag('', getLastValue(tagArray));\n                }\n            }\n            if (contains(selfClosingElements, tagName) && getLastValue(tagArray)) {\n                iterateEndTag('', tagName);\n            }\n            let isSelfTag = contains(emptyElements, tagName);\n            if (!isSelfTag) {\n                tagArray.push(tagName);\n            }\n            let attrs = {};\n            //tslint:disable-next-line\n            rest.replace(attributeRegex, function (match, name, ...names) {\n                //tslint:disable-next-line\n                let val = names[2] ? names[2] :\n                    names[3] ? names[3] :\n                        names[4] ? names[4] :\n                            contains(fillAttrs, name) ? name : '';\n                if (name === 'style') {\n                    let valArr = val.split(';');\n                    let vObj = {};\n                    for (let i = 0, length = valArr.length; i < length; i++) {\n                        let cVal = valArr[i];\n                        let styleSplit = cVal.split(':');\n                        vObj[styleSplit[0]] = styleSplit[1];\n                    }\n                    val = vObj;\n                }\n                name = nameMapper[name] || name;\n                attrs[name] = val;\n                //tslint:disable-next-line\n            });\n            attrs['data-id'] = getRandomId();\n            let tagObject = {\n                tagName: tagName,\n                attributes: attrs\n            };\n            if (isSelfTag) {\n                let parent = (nodeArray[0] || results);\n                if (parent.children === undefined) {\n                    parent.children = [];\n                }\n                tagObject.parent = parent;\n                parent.children.push(tagObject);\n            }\n            else {\n                nodeArray.unshift(tagObject);\n            }\n        }\n        function iterateEndTag(start, tagName) {\n            let pos;\n            if (!tagName) {\n                pos = 0;\n            }\n            else {\n                for (pos = tagArray.length - 1; pos >= 0; pos--) {\n                    if (tagArray[pos] === tagName) {\n                        break;\n                    }\n                }\n            }\n            if (pos >= 0) {\n                for (let j = nodeArray.length - 1; j >= pos; j--) {\n                    //tslint:disable-next-line\n                    let node = nodeArray.shift();\n                    if (nodeArray.length === 0) {\n                        results.push(node);\n                    }\n                    else {\n                        let parent = nodeArray[0];\n                        if (parent.children === undefined) {\n                            parent.children = [];\n                        }\n                        node.parent = parent;\n                        parent.children.push(node);\n                    }\n                }\n                tagArray.length = pos;\n            }\n        }\n        function iterateText(text) {\n            if (nodeArray.length === 0) {\n                results.push(text);\n            }\n            else {\n                let parent = nodeArray[0];\n                if (parent.children === undefined) {\n                    parent.children = [];\n                }\n                parent.children.push(text);\n            }\n        }\n        return results;\n    }\n    VirtualDOM.ConvertHTMLToJSon = ConvertHTMLToJSon;\n    //tslint:disable-next-line \n    function getLastValue(arr) {\n        return arr[arr.length - 1];\n    }\n    function contains(arr, key) {\n        return arr.indexOf(key) !== -1;\n    }\n    //tslint:disable-next-line\n    function cloneNode(ele, deep) {\n        if (isObject(ele)) {\n            if (deep) {\n                return extend({}, {}, ele, true);\n            }\n            else {\n                return { tagName: ele.tagName, attributes: ele.attributes };\n            }\n        }\n        else {\n            return ele.cloneNode(deep);\n        }\n    }\n    VirtualDOM.cloneNode = cloneNode;\n    function setStyleAttribute(element, attrs) {\n        if (element.attributes.style) {\n            (element.attributes).style = extend({}, attrs);\n        }\n        else {\n            element.attributes.style = extend(element.attributes.style, attrs);\n        }\n    }\n    VirtualDOM.setStyleAttribute = setStyleAttribute;\n    //tslint:enable:no-any\n})(VirtualDOM || (VirtualDOM = {}));\n\n/**\n * Functions related to dom operations.\n */\nconst SVG_REG = /^svg|^path|^g/;\n/**\n * Function to create Html element.\n * @param tagName - Name of the tag, id and class names.\n * @param properties - Object to set properties in the element.\n * @param properties.id - To set the id to the created element.\n * @param properties.className - To add classes to the element.\n * @param properties.innerHTML - To set the innerHTML to element.\n * @param properties.styles - To set the some custom styles to element.\n * @param properties.attrs - To set the attributes to element.\n * @private\n */\nfunction createElement(tagName, properties) {\n    //tslint:disable-next-line\n    let element = (SVG_REG.test(tagName) ? document.createElementNS('http://www.w3.org/2000/svg', tagName) : document.createElement(tagName));\n    if (typeof (properties) === 'undefined') {\n        return element;\n    }\n    element.innerHTML = (properties.innerHTML ? properties.innerHTML : '');\n    if (properties.className !== undefined) {\n        element.className = properties.className;\n    }\n    if (properties.id !== undefined) {\n        element.id = properties.id;\n    }\n    if (properties.styles !== undefined) {\n        element.setAttribute('style', properties.styles);\n    }\n    if (properties.attrs !== undefined) {\n        attributes(element, properties.attrs);\n    }\n    return element;\n}\n/**\n * The function used to add the classes to array of elements\n * @param  {Element[]|NodeList} elements - An array of elements that need to add a list of classes\n * @param  {string|string[]} classes - String or array of string that need to add an individual element as a class\n * @private\n */\nfunction addClass(elements, classes) {\n    let classList = getClassList(classes);\n    for (let ele of elements) {\n        for (let className of classList) {\n            if (isObject(ele)) {\n                let curClass = getValue('attributes.className', ele);\n                if (isNullOrUndefined(curClass)) {\n                    setValue('attributes.className', className, ele);\n                }\n                else if (!new RegExp('\\\\b' + className + '\\\\b', 'i').test(curClass)) {\n                    setValue('attributes.className', curClass + ' ' + className, ele);\n                }\n            }\n            else {\n                if (!ele.classList.contains(className)) {\n                    ele.classList.add(className);\n                }\n            }\n        }\n    }\n    return elements;\n}\n/**\n * The function used to add the classes to array of elements\n * @param  {Element[]|NodeList} elements - An array of elements that need to remove a list of classes\n * @param  {string|string[]} classes - String or array of string that need to add an individual element as a class\n * @private\n */\nfunction removeClass(elements, classes) {\n    let classList = getClassList(classes);\n    for (let ele of elements) {\n        let flag = isObject(ele);\n        let canRemove = flag ? getValue('attributes.className', ele) : ele.className !== '';\n        if (canRemove) {\n            for (let className of classList) {\n                if (flag) {\n                    let classes = getValue('attributes.className', ele);\n                    let classArr = classes.split(' ');\n                    let index = classArr.indexOf(className);\n                    if (index !== -1) {\n                        classArr.splice(index, 1);\n                    }\n                    setValue('attributes.className', classArr.join(' '), ele);\n                }\n                else {\n                    ele.classList.remove(className);\n                }\n            }\n        }\n    }\n    return elements;\n}\nfunction getClassList(classes) {\n    let classList = [];\n    if (typeof classes === 'string') {\n        classList.push(classes);\n    }\n    else {\n        classList = classes;\n    }\n    return classList;\n}\n/**\n * The function used to check element is visible or not.\n * @param  {Element|Node} element - An element the need to check visibility\n * @private\n */\nfunction isVisible(element) {\n    let ele = element;\n    return (ele.style.visibility === '' && ele.offsetWidth > 0);\n}\n/**\n * The function used to insert an array of elements into a first of the element.\n * @param  {Element[]|NodeList} fromElements - An array of elements that need to prepend.\n * @param  {Element} toElement - An element that is going to prepend.\n * @private\n */\nfunction prepend(fromElements, toElement, isEval) {\n    //tslint:disable:no-any\n    if (isObject(toElement)) {\n        VirtualDOM.prepend(fromElements, toElement);\n    }\n    else {\n        let docFrag = document.createDocumentFragment();\n        for (let ele of fromElements) {\n            docFrag.appendChild(ele);\n        }\n        toElement.insertBefore(docFrag, toElement.firstElementChild);\n        if (isEval) {\n            executeScript(toElement);\n        }\n    }\n    return fromElements;\n}\n/**\n * The function used to insert an array of elements into last of the element.\n * @param  {Element[]|NodeList} fromElements - An array of elements that need to append.\n * @param  {Element} toElement - An element that is going to prepend.\n * @private\n */\nfunction append(fromElements, toElement, isEval) {\n    if (isObject(toElement)) {\n        VirtualDOM.append(fromElements, toElement);\n    }\n    else {\n        let docFrag = document.createDocumentFragment();\n        for (let ele of fromElements) {\n            docFrag.appendChild(ele);\n        }\n        toElement.appendChild(docFrag);\n        if (isEval) {\n            executeScript(toElement);\n        }\n    }\n    return fromElements;\n}\n/**\n * The function is used to evaluate script from Ajax request\n * @param ele - An element is going to evaluate the script\n */\nfunction executeScript(ele) {\n    let eleArray = ele.querySelectorAll('script');\n    eleArray.forEach((element) => {\n        let script = document.createElement('script');\n        script.text = element.innerHTML;\n        document.head.appendChild(script);\n        detach(script);\n    });\n}\n/**\n * The function used to remove the element from the\n * @param  {Element|Node|HTMLElement} element - An element that is going to detach from the Dom\n * @private\n */\nfunction detach(element) {\n    if (isObject(element)) {\n        return VirtualDOM.detach(element);\n    }\n    else {\n        let parentNode = element.parentNode;\n        if (parentNode) {\n            return parentNode.removeChild(element);\n        }\n    }\n}\n//tslint: enable:no-any\n/**\n * The function used to remove the element from Dom also clear the bounded events\n * @param  {Element|Node|HTMLElement} element - An element remove from the Dom\n * @private\n */\nfunction remove(element) {\n    if (isObject(element)) {\n        VirtualDOM.detach(element);\n    }\n    else {\n        let parentNode = element.parentNode;\n        EventHandler.clearEvents(element);\n        parentNode.removeChild(element);\n    }\n}\n/**\n * The function helps to set multiple attributes to an element\n * @param  {Element|Node} element - An element that need to set attributes.\n * @param  {{[key:string]:string}} attributes - JSON Object that is going to as attributes.\n * @private\n */\nfunction attributes(element, attributes) {\n    let keys = Object.keys(attributes);\n    let ele = element;\n    for (let key of keys) {\n        if (isObject(ele)) {\n            let iKey = key;\n            if (key === 'tabindex') {\n                iKey = 'tabIndex';\n            }\n            ele.attributes[iKey] = attributes[key];\n        }\n        else {\n            ele.setAttribute(key, attributes[key]);\n        }\n    }\n    return ele;\n}\n/**\n * The function selects the element from giving context.\n * @param  {string} selector - Selector string need fetch element from the\n * @param  {Document|Element=document} context - It is an optional type, That specifies a Dom context.\n * @private\n */\n//tslint:disable-next-line\nfunction select(selector, context = document, needsVDOM) {\n    if (isObject(context) && needsVDOM) {\n        //tslint:disable-next-line\n        return VirtualDOM.vDomSelector({ ele: context, selector, selectAll: false });\n    }\n    else {\n        selector = querySelectId(selector);\n        return context.querySelector(selector);\n    }\n}\n/**\n * The function selects an array of element from the given context.\n * @param  {string} selector - Selector string need fetch element from the\n * @param  {Document|Element=document} context - It is an optional type, That specifies a Dom context.\n * @private\n */\nfunction selectAll(selector, context = document, needsVDOM) {\n    if (isObject(context) && !needsVDOM) {\n        //tslint:disable-next-line\n        return VirtualDOM.vDomSelector({ ele: context, selector, selectAll: true });\n    }\n    else {\n        selector = querySelectId(selector);\n        let nodeList = context.querySelectorAll(selector);\n        return nodeList;\n    }\n}\nfunction querySelectId(selector) {\n    if (selector.match(/#[0-9]/g)) {\n        let idList = selector.split(',');\n        for (let i = 0; i < idList.length; i++) {\n            let list = idList[i].split(' ');\n            for (let j = 0; j < list.length; j++) {\n                if (list[j].match(/#/)) {\n                    let splitId = list[j].split('#');\n                    if (splitId[1].match(/^\\d/)) {\n                        list[j] = list[j].replace(/#/, '[id=\\'') + '\\']';\n                    }\n                }\n            }\n            idList[i] = list.join(' ');\n        }\n        return idList.join(',');\n    }\n    return selector;\n}\n/**\n * Returns single closest parent element based on class selector.\n * @param  {Element} element - An element that need to find the closest element.\n * @param  {string} selector - A classSelector of closest element.\n * @private\n */\nfunction closest(element, selector) {\n    let el = element;\n    if (typeof el.closest === 'function') {\n        return el.closest(selector);\n    }\n    while (el && el.nodeType === 1) {\n        if (matches(el, selector)) {\n            return el;\n        }\n        el = el.parentNode;\n    }\n    return null;\n}\n/**\n * Returns all sibling elements of the given element.\n * @param  {Element|Node} element - An element that need to get siblings.\n * @private\n */\nfunction siblings(element) {\n    let siblings = [];\n    let childNodes = Array.prototype.slice.call(element.parentNode.childNodes);\n    for (let curNode of childNodes) {\n        if (curNode.nodeType === Node.ELEMENT_NODE && element !== curNode) {\n            siblings.push(curNode);\n        }\n    }\n    return siblings;\n}\n/**\n * set the value if not exist. Otherwise set the existing value\n * @param  {HTMLElement} element - An element to which we need to set value.\n * @param  {string} property - Property need to get or set.\n * @param  {string} value - value need to set.\n * @private\n */\nfunction getAttributeOrDefault(element, property, value) {\n    let attrVal;\n    let isObj = isObject(element);\n    if (isObj) {\n        attrVal = getValue('attributes.' + property, element);\n    }\n    else {\n        attrVal = element.getAttribute(property);\n    }\n    if (isNullOrUndefined(attrVal) && value) {\n        if (!isObj) {\n            element.setAttribute(property, value.toString());\n        }\n        else {\n            element.attributes[property] = value;\n        }\n        attrVal = value;\n    }\n    return attrVal;\n}\n/**\n * Set the style attributes to Html element.\n * @param {HTMLElement} element - Element which we want to set attributes\n * @param {any} attrs - Set the given attributes to element\n * @return {void}\n * @private\n */\nfunction setStyleAttribute(element, attrs) {\n    if (attrs !== undefined) {\n        if (isObject(element)) {\n            // tslint:disable-next-line:no-any\n            VirtualDOM.setStyleAttribute(element, attrs);\n        }\n        else {\n            Object.keys(attrs).forEach((key) => {\n                // tslint:disable-next-line:no-any\n                element.style[key] = attrs[key];\n            });\n        }\n    }\n}\n/**\n * Method for add and remove classes to a dom element.\n * @param {Element} element - Element for add and remove classes\n * @param {string[]} addClasses - List of classes need to be add to the element\n * @param {string[]} removeClasses - List of classes need to be remove from the element\n * @return {void}\n * @private\n */\nfunction classList(element, addClasses, removeClasses) {\n    addClass([element], addClasses);\n    removeClass([element], removeClasses);\n}\n/**\n * Method to check whether the element matches the given selector.\n * @param {Element} element - Element to compare with the selector.\n * @param {string} selector - String selector which element will satisfy.\n * @return {void}\n * @private\n */\nfunction matches(element, selector) {\n    //tslint:disable-next-line\n    let matches = element.matches || element.msMatchesSelector || element.webkitMatchesSelector;\n    if (matches) {\n        return matches.call(element, selector);\n    }\n    else {\n        return [].indexOf.call(document.querySelectorAll(selector), element) !== -1;\n    }\n}\nfunction includeInnerHTML(ele, innerHTML) {\n    if (isObject(ele)) {\n        if (innerHTML === '') {\n            ele.children = [];\n        }\n        else {\n            let res = VirtualDOM.ConvertHTMLToJSon(innerHTML);\n            if (res.length) {\n                VirtualDOM.assignParent(res, ele);\n                ele.children = res;\n            }\n        }\n    }\n    else {\n        ele.innerHTML = innerHTML;\n    }\n}\n//tslint:disable-next-line\nfunction containsClass(ele, className) {\n    if (isObject(ele)) {\n        // tslint:disable-next-line:no-any\n        return new RegExp('\\\\b' + className + '\\\\b', 'i').test(ele.attributes.className);\n    }\n    else {\n        return ele.classList.contains(className);\n    }\n}\n/**\n * Method to check whether the element matches the given selector.\n * @param {} element - Element to compare with the selector.\n * @param {string} selector - String selector which element will satisfy.\n * @return {Element | VirtualObject}\n * @private\n */\n//tslint:disable:no-any\nfunction cloneNode(element, deep) {\n    if (isObject(element)) {\n        if (deep) {\n            return extend({}, {}, element, true);\n        }\n        else {\n            return { tagName: element.tagName, attributes: element.attributes };\n        }\n    }\n    else {\n        return element.cloneNode(deep);\n    }\n}\n\nconst isColEName = new RegExp('\\]');\n/* tslint:enable:no-any */\n/**\n * Base library module is common module for Framework modules like touch,keyboard and etc.,\n * @private\n */\nclass Base {\n    /**\n     * Base constructor accept options and element\n     */\n    constructor(options, element) {\n        this.isRendered = false;\n        this.isComplexArraySetter = false;\n        this.isServerRendered = false;\n        this.allowServerDataBinding = true;\n        this.isProtectedOnChange = true;\n        this.properties = {};\n        this.changedProperties = {};\n        this.oldProperties = {};\n        this.bulkChanges = {};\n        this.refreshing = false;\n        this.ignoreCollectionWatch = false;\n        // tslint:disable-next-line:no-empty\n        this.finalUpdate = () => { };\n        this.childChangedProperties = {};\n        this.modelObserver = new Observer(this);\n        if (!isUndefined(element)) {\n            if ('string' === typeof (element)) {\n                this.element = document.querySelector(element);\n            }\n            else {\n                this.element = element;\n            }\n            if (!isNullOrUndefined(this.element)) {\n                this.isProtectedOnChange = false;\n                this.addInstance();\n            }\n        }\n        if (!isUndefined(options)) {\n            this.setProperties(options, true);\n        }\n        this.isDestroyed = false;\n    }\n    /** Property base section */\n    /**\n     * Function used to set bunch of property at a time.\n     * @private\n     * @param  {Object} prop - JSON object which holds components properties.\n     * @param  {boolean} muteOnChange? - Specifies to true when we set properties.\n     */\n    setProperties(prop, muteOnChange) {\n        let prevDetection = this.isProtectedOnChange;\n        this.isProtectedOnChange = !!muteOnChange;\n        merge(this, prop);\n        if (muteOnChange !== true) {\n            merge(this.changedProperties, prop);\n            this.dataBind();\n        }\n        else if (isBlazor() && this.isRendered) {\n            this.serverDataBind(prop);\n        }\n        this.finalUpdate();\n        this.changedProperties = {};\n        this.oldProperties = {};\n        this.isProtectedOnChange = prevDetection;\n    }\n    ;\n    /**\n     * Calls for child element data bind\n     * @param {Object} obj\n     * @param {Object} parent\n     * @returns {void}\n     */\n    // tslint:disable-next-line:no-any\n    static callChildDataBind(obj, parent) {\n        let keys = Object.keys(obj);\n        for (let key of keys) {\n            if (parent[key] instanceof Array) {\n                for (let obj of parent[key]) {\n                    if (obj.dataBind !== undefined) {\n                        obj.dataBind();\n                    }\n                }\n            }\n            else {\n                parent[key].dataBind();\n            }\n        }\n    }\n    clearChanges() {\n        this.finalUpdate();\n        this.changedProperties = {};\n        this.oldProperties = {};\n        this.childChangedProperties = {};\n    }\n    /**\n     * Bind property changes immediately to components\n     */\n    dataBind() {\n        Base.callChildDataBind(this.childChangedProperties, this);\n        if (Object.getOwnPropertyNames(this.changedProperties).length) {\n            let prevDetection = this.isProtectedOnChange;\n            let newChanges = this.changedProperties;\n            let oldChanges = this.oldProperties;\n            this.clearChanges();\n            this.isProtectedOnChange = true;\n            this.onPropertyChanged(newChanges, oldChanges);\n            this.isProtectedOnChange = prevDetection;\n        }\n    }\n    ;\n    /* tslint:disable:no-any */\n    serverDataBind(newChanges) {\n        if (!isBlazor()) {\n            return;\n        }\n        newChanges = newChanges ? newChanges : {};\n        extend(this.bulkChanges, {}, newChanges, true);\n        if (this.allowServerDataBinding) {\n            let sfBlazor = 'sfBlazor';\n            window[sfBlazor].updateModel(this);\n            this.bulkChanges = {};\n        }\n    }\n    /* tslint:enable:no-any */\n    saveChanges(key, newValue, oldValue) {\n        if (isBlazor()) {\n            // tslint:disable-next-line:no-any\n            let newChanges = {};\n            newChanges[key] = newValue;\n            this.serverDataBind(newChanges);\n        }\n        if (this.isProtectedOnChange) {\n            return;\n        }\n        this.oldProperties[key] = oldValue;\n        this.changedProperties[key] = newValue;\n        this.finalUpdate();\n        this.finalUpdate = setImmediate(this.dataBind.bind(this));\n    }\n    ;\n    /** Event Base Section */\n    /**\n     * Adds the handler to the given event listener.\n     * @param {string} eventName - A String that specifies the name of the event\n     * @param {Function} listener - Specifies the call to run when the event occurs.\n     * @return {void}\n     */\n    addEventListener(eventName, handler) {\n        this.modelObserver.on(eventName, handler);\n    }\n    /**\n     * Removes the handler from the given event listener.\n     * @param {string} eventName - A String that specifies the name of the event to remove\n     * @param {Function} listener - Specifies the function to remove\n     * @return {void}\n     */\n    removeEventListener(eventName, handler) {\n        this.modelObserver.off(eventName, handler);\n    }\n    /**\n     * Triggers the handlers in the specified event.\n     * @private\n     * @param {string} eventName - Specifies the event to trigger for the specified component properties.\n     * Can be a custom event, or any of the standard events.\n     * @param {Event} eventProp - Additional parameters to pass on to the event properties\n     * @param {Function} successHandler - this function will invoke after event successfully triggered\n     * @param {Function} errorHandler - this function will invoke after event if it failured to call.\n     * @return {void}\n     */\n    trigger(eventName, eventProp, successHandler, errorHandler) {\n        if (this.isDestroyed !== true) {\n            let prevDetection = this.isProtectedOnChange;\n            this.isProtectedOnChange = false;\n            let data = this.modelObserver.notify(eventName, eventProp, successHandler, errorHandler);\n            if (isColEName.test(eventName)) {\n                let handler = getValue(eventName, this);\n                if (handler) {\n                    let blazor = 'Blazor';\n                    if (window[blazor]) {\n                        let promise = handler.call(this, eventProp);\n                        if (promise && typeof promise.then === 'function') {\n                            if (!successHandler) {\n                                data = promise;\n                            }\n                            else {\n                                promise.then((data) => {\n                                    if (successHandler) {\n                                        data = typeof data === 'string' && this.modelObserver.isJson(data) ?\n                                            JSON.parse(data) : data;\n                                        successHandler.call(this, data);\n                                    }\n                                }).catch((data) => {\n                                    if (errorHandler) {\n                                        data = typeof data === 'string' && this.modelObserver.isJson(data) ? JSON.parse(data) : data;\n                                        errorHandler.call(this, data);\n                                    }\n                                });\n                            }\n                        }\n                        else if (successHandler) {\n                            successHandler.call(this, eventProp);\n                        }\n                    }\n                    else {\n                        handler.call(this, eventProp);\n                        if (successHandler) {\n                            successHandler.call(this, eventProp);\n                        }\n                    }\n                }\n                else if (successHandler) {\n                    successHandler.call(this, eventProp);\n                }\n            }\n            this.isProtectedOnChange = prevDetection;\n            return data;\n        }\n    }\n    /**\n     * To maintain instance in base class\n     */\n    addInstance() {\n        // Add module class to the root element\n        let moduleClass = 'e-' + this.getModuleName().toLowerCase();\n        addClass([this.element], ['e-lib', moduleClass]);\n        if (!isNullOrUndefined(this.element.ej2_instances)) {\n            this.element.ej2_instances.push(this);\n        }\n        else {\n            setValue('ej2_instances', [this], this.element);\n        }\n    }\n    /**\n     * To remove the instance from the element\n     */\n    destroy() {\n        this.element.ej2_instances =\n            this.element.ej2_instances.filter((i) => { return i !== this; });\n        removeClass([this.element], ['e-' + this.getModuleName()]);\n        if (this.element.ej2_instances.length === 0) {\n            // Remove module class from the root element\n            removeClass([this.element], ['e-lib']);\n        }\n        this.clearChanges();\n        this.modelObserver.destroy();\n        this.isDestroyed = true;\n    }\n}\n/**\n * Global function to get the component instance from the rendered element.\n * @param elem Specifies the HTMLElement or element id string.\n * @param comp Specifies the component module name or Component.\n */\n// tslint:disable-next-line:no-any\nfunction getComponent(elem, comp) {\n    let instance;\n    let i;\n    let ele = typeof elem === 'string' ? document.getElementById(elem) : elem;\n    for (i = 0; i < ele.ej2_instances.length; i++) {\n        instance = ele.ej2_instances[i];\n        if (typeof comp === 'string') {\n            let compName = instance.getModuleName();\n            if (comp === compName) {\n                return instance;\n            }\n        }\n        else {\n            // tslint:disable-next-line:no-any\n            if (instance instanceof comp) {\n                return instance;\n            }\n        }\n    }\n    return undefined;\n}\n/**\n * Function to remove the child instances.\n * @return {void}\n * @private\n */\n// tslint:disable-next-line:no-any\nfunction removeChildInstance(element) {\n    // tslint:disable-next-line:no-any\n    let childEle = [].slice.call(element.getElementsByClassName('e-control'));\n    for (let i = 0; i < childEle.length; i++) {\n        let compName = childEle[i].classList[1].split('e-')[1];\n        // tslint:disable-next-line:no-any\n        let compInstance = getComponent(childEle[i], compName);\n        if (!isUndefined(compInstance)) {\n            compInstance.destroy();\n        }\n    }\n}\n\n/**\n * Returns the Class Object\n * @param {ClassObject} instance - instance of ClassObject\n * @param {string} curKey - key of the current instance\n * @param {Object} defaultValue - default Value\n * @param {Object[]} type\n */\nfunction getObject(instance, curKey, defaultValue, type) {\n    if (!instance.properties.hasOwnProperty(curKey) || !(instance.properties[curKey] instanceof type)) {\n        instance.properties[curKey] = createInstance(type, [instance, curKey, defaultValue]);\n    }\n    return instance.properties[curKey];\n}\n/**\n * Returns object array\n * @param {ClassObject} instance\n * @param {string} curKey\n * @param {Object[]} defaultValue\n * @param type\n * @param {boolean} isSetter\n * @returns {Object[]}\n */\nfunction getObjectArray(instance, curKey, defaultValue, type, isSetter, isFactory) {\n    let result = [];\n    let len = defaultValue ? defaultValue.length : 0;\n    for (let i = 0; i < len; i++) {\n        let curType = type;\n        if (isFactory) {\n            curType = type(defaultValue[i], instance);\n        }\n        if (isSetter) {\n            let inst = createInstance(curType, [instance, curKey, {}, true]);\n            inst.setProperties(defaultValue[i], true);\n            result.push(inst);\n        }\n        else {\n            result.push(createInstance(curType, [instance, curKey, defaultValue[i], false]));\n        }\n    }\n    return result;\n}\n/**\n * Returns the properties of the object\n * @param {Object} defaultValue\n * @param {string} curKey\n */\nfunction propertyGetter(defaultValue, curKey) {\n    return function () {\n        if (!this.properties.hasOwnProperty(curKey)) {\n            this.properties[curKey] = defaultValue;\n        }\n        return this.properties[curKey];\n    };\n}\n/**\n * Set the properties for the object\n * @param {Object} defaultValue\n * @param {string} curKey\n */\nfunction propertySetter(defaultValue, curKey) {\n    return function (newValue) {\n        if (this.properties[curKey] !== newValue) {\n            let oldVal = this.properties.hasOwnProperty(curKey) ? this.properties[curKey] : defaultValue;\n            this.saveChanges(curKey, newValue, oldVal);\n            this.properties[curKey] = newValue;\n        }\n    };\n}\n/**\n * Returns complex objects\n */\nfunction complexGetter(defaultValue, curKey, type) {\n    return function () {\n        return getObject(this, curKey, defaultValue, type);\n    };\n}\n/**\n * Sets complex objects\n */\nfunction complexSetter(defaultValue, curKey, type) {\n    return function (newValue) {\n        getObject(this, curKey, defaultValue, type).setProperties(newValue);\n    };\n}\nfunction complexFactoryGetter(defaultValue, curKey, type) {\n    return function () {\n        let curType = type({});\n        if (this.properties.hasOwnProperty(curKey)) {\n            return this.properties[curKey];\n        }\n        else {\n            return getObject(this, curKey, defaultValue, curType);\n        }\n    };\n}\nfunction complexFactorySetter(defaultValue, curKey, type) {\n    return function (newValue) {\n        let curType = type(newValue, this);\n        getObject(this, curKey, defaultValue, curType).setProperties(newValue);\n    };\n}\nfunction complexArrayGetter(defaultValue, curKey, type) {\n    return function () {\n        if (!this.properties.hasOwnProperty(curKey)) {\n            let defCollection = getObjectArray(this, curKey, defaultValue, type, false);\n            this.properties[curKey] = defCollection;\n        }\n        let ignore = ((this.controlParent !== undefined && this.controlParent.ignoreCollectionWatch)\n            || this.ignoreCollectionWatch);\n        if (!this.properties[curKey].hasOwnProperty('push') && !ignore) {\n            ['push', 'pop'].forEach((extendFunc) => {\n                let descriptor = {\n                    value: complexArrayDefinedCallback(extendFunc, curKey, type, this.properties[curKey]).bind(this),\n                    configurable: true\n                };\n                Object.defineProperty(this.properties[curKey], extendFunc, descriptor);\n            });\n        }\n        if (!this.properties[curKey].hasOwnProperty('isComplexArray')) {\n            Object.defineProperty(this.properties[curKey], 'isComplexArray', { value: true });\n        }\n        return this.properties[curKey];\n    };\n}\nfunction complexArraySetter(defaultValue, curKey, type) {\n    return function (newValue) {\n        this.isComplexArraySetter = true;\n        let oldValueCollection = getObjectArray(this, curKey, defaultValue, type, false);\n        let newValCollection = getObjectArray(this, curKey, newValue, type, true);\n        this.isComplexArraySetter = false;\n        this.saveChanges(curKey, newValCollection, oldValueCollection);\n        this.properties[curKey] = newValCollection;\n    };\n}\nfunction complexArrayFactorySetter(defaultValue, curKey, type) {\n    return function (newValue) {\n        let oldValueCollection = this.properties.hasOwnProperty(curKey) ? this.properties[curKey] : defaultValue;\n        let newValCollection = getObjectArray(this, curKey, newValue, type, true, true);\n        this.saveChanges(curKey, newValCollection, oldValueCollection);\n        this.properties[curKey] = newValCollection;\n    };\n}\nfunction complexArrayFactoryGetter(defaultValue, curKey, type) {\n    return function () {\n        let curType = type({});\n        if (!this.properties.hasOwnProperty(curKey)) {\n            let defCollection = getObjectArray(this, curKey, defaultValue, curType, false);\n            this.properties[curKey] = defCollection;\n        }\n        return this.properties[curKey];\n    };\n}\nfunction complexArrayDefinedCallback(dFunc, curKey, type, prop) {\n    /* tslint:disable no-function-expression */\n    return function (...newValue) {\n        let keyString = this.propName ? this.getParentKey() + '.' + curKey + '-' : curKey + '-';\n        switch (dFunc) {\n            case 'push':\n                for (let i = 0; i < newValue.length; i++) {\n                    Array.prototype[dFunc].apply(prop, [newValue[i]]);\n                    let model = getArrayModel(keyString + (prop.length - 1), newValue[i], !this.controlParent, dFunc);\n                    this.serverDataBind(model, newValue[i], false, dFunc);\n                }\n                break;\n            case 'pop':\n                Array.prototype[dFunc].apply(prop);\n                let model = getArrayModel(keyString + prop.length, null, !this.controlParent, dFunc);\n                this.serverDataBind(model, { ejsAction: 'pop' }, false, dFunc);\n                break;\n        }\n        return prop;\n    };\n    /* tslint:enable no-function-expression */\n}\nfunction getArrayModel(keyString, value, isControlParent, arrayFunction) {\n    let modelObject = keyString;\n    if (isControlParent) {\n        modelObject = {};\n        modelObject[keyString] = value;\n        if (value && typeof value === 'object') {\n            let action = 'ejsAction';\n            modelObject[keyString][action] = arrayFunction;\n        }\n    }\n    return modelObject;\n}\n/**\n * Method used to create property. General syntax below.\n * @param  {T} defaultValue? - Specifies the default value of property.\n * ```\n * @Property('TypeScript')\n * propertyName: Type;\n * ```\n * @private\n */\nfunction Property(defaultValue) {\n    return (target, key) => {\n        let propertyDescriptor = {\n            set: propertySetter(defaultValue, key),\n            get: propertyGetter(defaultValue, key),\n            enumerable: true,\n            configurable: true\n        };\n        //new property creation\n        Object.defineProperty(target, key, propertyDescriptor);\n        addPropertyCollection(target, key, 'prop', defaultValue);\n    };\n}\n/**\n * Method used to create complex property. General syntax below.\n * @param  {T} defaultValue - Specifies the default value of property.\n * @param  {Function} type - Specifies the class type of complex object.\n * ```\n * @Complex<Type>({},Type)\n * propertyName: Type;\n * ```\n * @private\n */\nfunction Complex(defaultValue, type) {\n    return (target, key) => {\n        let propertyDescriptor = {\n            set: complexSetter(defaultValue, key, type),\n            get: complexGetter(defaultValue, key, type),\n            enumerable: true,\n            configurable: true\n        };\n        //new property creation\n        Object.defineProperty(target, key, propertyDescriptor);\n        addPropertyCollection(target, key, 'complexProp', defaultValue, type);\n    };\n}\n/**\n * Method used to create complex Factory property. General syntax below.\n * @param  {Function} defaultType - Specifies the default value of property.\n * @param  {Function} type - Specifies the class factory type of complex object.\n * ```\n * @ComplexFactory(defaultType, factoryFunction)\n * propertyName: Type1 | Type2;\n * ```\n * @private\n */\nfunction ComplexFactory(type) {\n    return (target, key) => {\n        let propertyDescriptor = {\n            set: complexFactorySetter({}, key, type),\n            get: complexFactoryGetter({}, key, type),\n            enumerable: true,\n            configurable: true\n        };\n        //new property creation\n        Object.defineProperty(target, key, propertyDescriptor);\n        addPropertyCollection(target, key, 'complexProp', {}, type);\n    };\n}\n/**\n * Method used to create complex array property. General syntax below.\n * @param  {T[]} defaultValue - Specifies the default value of property.\n * @param  {Function} type - Specifies the class type of complex object.\n * ```\n * @Collection([], Type);\n * propertyName: Type;\n * ```\n * @private\n */\nfunction Collection(defaultValue, type) {\n    return (target, key) => {\n        let propertyDescriptor = {\n            set: complexArraySetter(defaultValue, key, type),\n            get: complexArrayGetter(defaultValue, key, type),\n            enumerable: true,\n            configurable: true\n        };\n        //new property creation\n        Object.defineProperty(target, key, propertyDescriptor);\n        addPropertyCollection(target, key, 'colProp', defaultValue, type);\n    };\n}\n/**\n * Method used to create complex factory array property. General syntax below.\n * @param  {T[]} defaultType - Specifies the default type of property.\n * @param  {Function} type - Specifies the class type of complex object.\n * ```\n * @Collection([], Type);\n * propertyName: Type;\n * ```\n * @private\n */\nfunction CollectionFactory(type) {\n    return (target, key) => {\n        let propertyDescriptor = {\n            set: complexArrayFactorySetter([], key, type),\n            get: complexArrayFactoryGetter([], key, type),\n            enumerable: true,\n            configurable: true\n        };\n        //new property creation\n        Object.defineProperty(target, key, propertyDescriptor);\n        addPropertyCollection(target, key, 'colProp', {}, type);\n    };\n}\n/**\n * Method used to create event property. General syntax below.\n * @param  {Function} defaultValue? - Specifies the default value of property.\n * @param  {boolean} isComplex? - Specifies the whether it is complex object.\n * ```\n * @Event(()=>{return true;})\n * ```\n * @private\n */\nfunction Event$1() {\n    return (target, key) => {\n        let eventDescriptor = {\n            set: function (newValue) {\n                let oldValue = this.properties[key];\n                if (oldValue !== newValue) {\n                    let finalContext = getParentContext(this, key);\n                    if (isUndefined(oldValue) === false) {\n                        finalContext.context.removeEventListener(finalContext.prefix, oldValue);\n                    }\n                    finalContext.context.addEventListener(finalContext.prefix, newValue);\n                    this.properties[key] = newValue;\n                }\n            },\n            get: propertyGetter(undefined, key),\n            enumerable: true,\n            configurable: true\n        };\n        Object.defineProperty(target, key, eventDescriptor);\n        addPropertyCollection(target, key, 'event');\n    };\n}\n/**\n * NotifyPropertyChanges is triggers the call back when the property has been changed.\n *\n * ```\n *  @NotifyPropertyChanges\n * class DemoClass implements INotifyPropertyChanged {\n *\n *     @Property()\n *     property1: string;\n *\n *     dataBind: () => void;\n *\n *     constructor() { }\n *\n *     onPropertyChanged(newProp: any, oldProp: any) {\n *         // Called when property changed\n *     }\n * }\n * ```\n * @private\n */\nfunction NotifyPropertyChanges(classConstructor) {\n    /** Need to code */\n}\n/**\n * Method  used to create the builderObject for the target component.\n * @private\n */\nfunction addPropertyCollection(target, key, propertyType, defaultValue, type) {\n    if (isUndefined(target.propList)) {\n        target.propList = {\n            props: [],\n            complexProps: [],\n            colProps: [],\n            events: [],\n            propNames: [],\n            complexPropNames: [],\n            colPropNames: [],\n            eventNames: []\n        };\n    }\n    /* tslint:disable no-any */\n    target.propList[propertyType + 's'].push({\n        propertyName: key,\n        defaultValue: defaultValue,\n        type: type\n    });\n    target.propList[propertyType + 'Names'].push(key);\n    /* tslint:enable no-any */\n}\n/**\n * Returns an object containing the builder properties\n * @param {Function} component\n * @private\n */\nfunction getBuilderProperties(component) {\n    if (isUndefined(component.prototype.builderObject)) {\n        component.prototype.builderObject = {\n            properties: {}, propCollections: [], add: function () {\n                this.isPropertyArray = true;\n                this.propCollections.push(extend({}, this.properties, {}));\n            }\n        };\n        let rex = /complex/;\n        for (let key of Object.keys(component.prototype.propList)) {\n            for (let prop of component.prototype.propList[key]) {\n                if (rex.test(key)) {\n                    component.prototype.builderObject[prop.propertyName] = function (value) {\n                        let childType = {};\n                        merge(childType, getBuilderProperties(prop.type));\n                        value(childType);\n                        let tempValue;\n                        if (!childType.isPropertyArray) {\n                            tempValue = extend({}, childType.properties, {});\n                        }\n                        else {\n                            tempValue = childType.propCollections;\n                        }\n                        this.properties[prop.propertyName] = tempValue;\n                        childType.properties = {};\n                        childType.propCollections = [];\n                        childType.isPropertyArray = false;\n                        return this;\n                    };\n                }\n                else {\n                    component.prototype.builderObject[prop.propertyName] = function (value) {\n                        this.properties[prop.propertyName] = value;\n                        return this;\n                    };\n                }\n            }\n        }\n    }\n    return component.prototype.builderObject;\n}\n/**\n * Method used to create builder for the components\n * @param {any} component -specifies the target component for which builder to be created.\n * @private\n */\nfunction CreateBuilder(component) {\n    let builderFunction = function (element) {\n        this.element = element;\n        return this;\n    };\n    let instanceFunction = (element) => {\n        if (!builderFunction.prototype.hasOwnProperty('create')) {\n            builderFunction.prototype = getBuilderProperties(component);\n            builderFunction.prototype.create = function () {\n                let temp = extend({}, {}, this.properties);\n                this.properties = {};\n                return new component(temp, this.element);\n            };\n        }\n        return new builderFunction(element);\n    };\n    return instanceFunction;\n}\n/**\n * Returns parent options for the object\n * @param {Object} context\n * @param {string} prefix\n * @private\n */\nfunction getParentContext(context, prefix) {\n    if (context.hasOwnProperty('parentObj') === false) {\n        return { context: context, prefix: prefix };\n    }\n    else {\n        let curText = getValue('propName', context);\n        if (curText) {\n            prefix = curText + '-' + prefix;\n        }\n        return getParentContext(getValue('parentObj', context), prefix);\n    }\n}\n\nvar __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar Animation_1;\n/**\n * The Animation framework provide options to animate the html DOM elements\n * ```typescript\n *   let animeObject = new Animation({\n *      name: 'SlideLeftIn',\n *      duration: 1000\n *   });\n *   animeObject.animate('#anime1');\n *   animeObject.animate('#anime2', { duration: 500 });\n * ```\n */\nlet Animation = Animation_1 = class Animation extends Base {\n    constructor(options) {\n        super(options, undefined);\n        /**\n         * @private\n         */\n        this.easing = {\n            ease: 'cubic-bezier(0.250, 0.100, 0.250, 1.000)',\n            linear: 'cubic-bezier(0.250, 0.250, 0.750, 0.750)',\n            easeIn: 'cubic-bezier(0.420, 0.000, 1.000, 1.000)',\n            easeOut: 'cubic-bezier(0.000, 0.000, 0.580, 1.000)',\n            easeInOut: 'cubic-bezier(0.420, 0.000, 0.580, 1.000)',\n            elasticInOut: 'cubic-bezier(0.5,-0.58,0.38,1.81)',\n            elasticIn: 'cubic-bezier(0.17,0.67,0.59,1.81)',\n            elasticOut: 'cubic-bezier(0.7,-0.75,0.99,1.01)'\n        };\n    }\n    /**\n     * Applies animation to the current element.\n     * @param {string | HTMLElement} element - Element which needs to be animated.\n     * @param {AnimationModel} options - Overriding default animation settings.\n     * @return {void}\n     */\n    animate(element, options) {\n        options = !options ? {} : options;\n        let model = this.getModel(options);\n        if (typeof element === 'string') {\n            let elements = Array.prototype.slice.call(selectAll(element, document));\n            for (let element of elements) {\n                model.element = element;\n                Animation_1.delayAnimation(model);\n            }\n        }\n        else {\n            model.element = element;\n            Animation_1.delayAnimation(model);\n        }\n    }\n    /**\n     * Stop the animation effect on animated element.\n     * @param {HTMLElement} element - Element which needs to be stop the animation.\n     * @param {AnimationOptions} model - Handling the animation model at stop function.\n     * @return {void}\n     */\n    static stop(element, model) {\n        element.style.animation = '';\n        element.removeAttribute('e-animate');\n        let animationId = element.getAttribute('e-animation-id');\n        if (animationId) {\n            let frameId = parseInt(animationId, 10);\n            cancelAnimationFrame(frameId);\n            element.removeAttribute('e-animation-id');\n        }\n        if (model && model.end) {\n            model.end.call(this, model);\n        }\n    }\n    /**\n     * Set delay to animation element\n     * @param {AnimationModel} model\n     * @returns {void}\n     */\n    static delayAnimation(model) {\n        if (model.delay) {\n            setTimeout(() => { Animation_1.applyAnimation(model); }, model.delay);\n        }\n        else {\n            Animation_1.applyAnimation(model);\n        }\n    }\n    /**\n     * Triggers animation\n     * @param {AnimationModel} model\n     * @returns {void}\n     */\n    static applyAnimation(model) {\n        model.timeStamp = 0;\n        let step = 0;\n        let timerId = 0;\n        let startTime = 0;\n        let prevTimeStamp = 0;\n        let duration = model.duration;\n        model.element.setAttribute('e-animate', 'true');\n        let startAnimation = (timeStamp) => {\n            try {\n                if (timeStamp) {\n                    // let step: number = model.timeStamp = timeStamp - startTime;\n                    /** phantomjs workaround for timestamp fix */\n                    prevTimeStamp = prevTimeStamp === 0 ? timeStamp : prevTimeStamp;\n                    model.timeStamp = (timeStamp + model.timeStamp) - prevTimeStamp;\n                    prevTimeStamp = timeStamp;\n                    /** phantomjs workaround end */\n                    // trigger animation begin event\n                    if (!step && model.begin) {\n                        model.begin.call(this, model);\n                    }\n                    step = step + 1;\n                    let avg = model.timeStamp / step;\n                    if (model.timeStamp < duration && model.timeStamp + avg < duration && model.element.getAttribute('e-animate')) {\n                        // apply animation effect to the current element                \n                        model.element.style.animation = model.name + ' ' + model.duration + 'ms ' + model.timingFunction;\n                        if (model.progress) {\n                            model.progress.call(this, model);\n                        }\n                        // repeat requestAnimationFrame \n                        requestAnimationFrame(startAnimation);\n                    }\n                    else {\n                        // clear requestAnimationFrame\n                        cancelAnimationFrame(timerId);\n                        model.element.removeAttribute('e-animation-id');\n                        model.element.removeAttribute('e-animate');\n                        model.element.style.animation = '';\n                        if (model.end) {\n                            model.end.call(this, model);\n                        }\n                    }\n                }\n                else {\n                    startTime = performance.now();\n                    // set initial requestAnimationFrame\n                    timerId = requestAnimationFrame(startAnimation);\n                    model.element.setAttribute('e-animation-id', timerId.toString());\n                }\n            }\n            catch (e) {\n                cancelAnimationFrame(timerId);\n                model.element.removeAttribute('e-animation-id');\n                if (model.fail) {\n                    model.fail.call(this, e);\n                }\n            }\n        };\n        startAnimation();\n    }\n    /**\n     * Returns Animation Model\n     * @param {AnimationModel} options\n     * @returns {AnimationModel}\n     */\n    getModel(options) {\n        return {\n            name: options.name || this.name,\n            delay: options.delay || this.delay,\n            duration: (options.duration !== undefined ? options.duration : this.duration),\n            begin: options.begin || this.begin,\n            end: options.end || this.end,\n            fail: options.fail || this.fail,\n            progress: options.progress || this.progress,\n            timingFunction: this.easing[options.timingFunction] ? this.easing[options.timingFunction] :\n                (options.timingFunction || this.easing[this.timingFunction])\n        };\n    }\n    /**\n     * @private\n     */\n    onPropertyChanged(newProp, oldProp) {\n        // no code needed\n    }\n    /**\n     * Returns module name as animation\n     * @private\n     */\n    getModuleName() {\n        return 'animation';\n    }\n    /**\n     * @private\n     */\n    destroy() {\n        //Override base destroy;\n    }\n};\n__decorate([\n    Property('FadeIn')\n], Animation.prototype, \"name\", void 0);\n__decorate([\n    Property(400)\n], Animation.prototype, \"duration\", void 0);\n__decorate([\n    Property('ease')\n], Animation.prototype, \"timingFunction\", void 0);\n__decorate([\n    Property(0)\n], Animation.prototype, \"delay\", void 0);\n__decorate([\n    Event$1()\n], Animation.prototype, \"progress\", void 0);\n__decorate([\n    Event$1()\n], Animation.prototype, \"begin\", void 0);\n__decorate([\n    Event$1()\n], Animation.prototype, \"end\", void 0);\n__decorate([\n    Event$1()\n], Animation.prototype, \"fail\", void 0);\nAnimation = Animation_1 = __decorate([\n    NotifyPropertyChanges\n], Animation);\n/**\n * Ripple provides material theme's wave effect when an element is clicked\n * ```html\n * <div id='ripple'></div>\n * <script>\n *   rippleEffect(document.getElementById('ripple'));\n * </script>\n * ```\n * @private\n * @param HTMLElement element - Target element\n * @param RippleOptions rippleOptions - Ripple options .\n */\nfunction rippleEffect(element, rippleOptions, done) {\n    let rippleModel = getRippleModel(rippleOptions);\n    if (rippleModel.rippleFlag === false || (rippleModel.rippleFlag === undefined && !isRippleEnabled)) {\n        return Function;\n    }\n    element.setAttribute('data-ripple', 'true');\n    EventHandler.add(element, 'mousedown', rippleHandler, { parent: element, rippleOptions: rippleModel });\n    EventHandler.add(element, 'mouseup', rippleUpHandler, { parent: element, rippleOptions: rippleModel, done: done });\n    EventHandler.add(element, 'mouseleave', rippleLeaveHandler, { parent: element, rippleOptions: rippleModel });\n    if (Browser.isPointer) {\n        EventHandler.add(element, 'transitionend', rippleLeaveHandler, { parent: element, rippleOptions: rippleModel });\n    }\n    return (() => {\n        element.removeAttribute('data-ripple');\n        EventHandler.remove(element, 'mousedown', rippleHandler);\n        EventHandler.remove(element, 'mouseup', rippleUpHandler);\n        EventHandler.remove(element, 'mouseleave', rippleLeaveHandler);\n        EventHandler.remove(element, 'transitionend', rippleLeaveHandler);\n    });\n}\nfunction getRippleModel(rippleOptions) {\n    let rippleModel = {\n        selector: rippleOptions && rippleOptions.selector ? rippleOptions.selector : null,\n        ignore: rippleOptions && rippleOptions.ignore ? rippleOptions.ignore : null,\n        rippleFlag: rippleOptions && rippleOptions.rippleFlag,\n        isCenterRipple: rippleOptions && rippleOptions.isCenterRipple,\n        duration: rippleOptions && rippleOptions.duration ? rippleOptions.duration : 350\n    };\n    return rippleModel;\n}\n/**\n * Handler for ripple event\n * @param {MouseEvent} e\n * @returns {void}\n * @private\n */\nfunction rippleHandler(e) {\n    let target = (e.target);\n    let selector = this.rippleOptions.selector;\n    let element = selector ? closest(target, selector) : target;\n    if (!element || (this.rippleOptions && closest(target, this.rippleOptions.ignore))) {\n        return;\n    }\n    let offset = element.getBoundingClientRect();\n    let offsetX = e.pageX - document.body.scrollLeft;\n    let offsetY = e.pageY - ((!document.body.scrollTop && document.documentElement) ?\n        document.documentElement.scrollTop : document.body.scrollTop);\n    let pageX = Math.max(Math.abs(offsetX - offset.left), Math.abs(offsetX - offset.right));\n    let pageY = Math.max(Math.abs(offsetY - offset.top), Math.abs(offsetY - offset.bottom));\n    let radius = Math.sqrt(pageX * pageX + pageY * pageY);\n    let diameter = radius * 2 + 'px';\n    let x = offsetX - offset.left - radius;\n    let y = offsetY - offset.top - radius;\n    if (this.rippleOptions && this.rippleOptions.isCenterRipple) {\n        x = 0;\n        y = 0;\n        diameter = '100%';\n    }\n    element.classList.add('e-ripple');\n    let duration = this.rippleOptions.duration.toString();\n    let styles = 'width: ' + diameter + ';height: ' + diameter + ';left: ' + x + 'px;top: ' + y + 'px;' +\n        'transition-duration: ' + duration + 'ms;';\n    let rippleElement = createElement('div', { className: 'e-ripple-element', styles: styles });\n    element.appendChild(rippleElement);\n    window.getComputedStyle(rippleElement).getPropertyValue('opacity');\n    rippleElement.style.transform = 'scale(1)';\n    if (element !== this.parent) {\n        EventHandler.add(element, 'mouseleave', rippleLeaveHandler, { parent: this.parent, rippleOptions: this.rippleOptions });\n    }\n}\n/**\n * Handler for ripple element mouse up event\n * @param {MouseEvent} e\n * @returns {void}\n * @private\n */\nfunction rippleUpHandler(e) {\n    removeRipple(e, this);\n}\n/**\n * Handler for ripple element mouse move event\n * @param {MouseEvent} e\n * @returns {void}\n * @private\n */\nfunction rippleLeaveHandler(e) {\n    removeRipple(e, this);\n}\n/**\n * Handler for removing ripple element\n * @param {MouseEvent} e\n * @param {rippleArgs} eventArgs\n * @returns {void}\n * @private\n */\nfunction removeRipple(e, eventArgs) {\n    let duration = eventArgs.rippleOptions.duration;\n    let target = (e.target);\n    let selector = eventArgs.rippleOptions.selector;\n    let element = selector ? closest(target, selector) : target;\n    if (!element || (element && element.className.indexOf('e-ripple') === -1)) {\n        return;\n    }\n    let rippleElements = selectAll('.e-ripple-element', element);\n    let rippleElement = rippleElements[rippleElements.length - 1];\n    if (rippleElement) {\n        rippleElement.style.opacity = '0.5';\n    }\n    if (eventArgs.parent !== element) {\n        EventHandler.remove(element, 'mouseleave', rippleLeaveHandler);\n    }\n    /* tslint:disable:align */\n    setTimeout(() => {\n        if (rippleElement && rippleElement.parentNode) {\n            rippleElement.parentNode.removeChild(rippleElement);\n        }\n        if (!element.getElementsByClassName('e-ripple-element').length) {\n            element.classList.remove('e-ripple');\n        }\n        if (eventArgs.done) {\n            eventArgs.done(e);\n        }\n    }, duration);\n}\nlet isRippleEnabled = false;\n/**\n * Animation Module provides support to enable ripple effect functionality to Essential JS 2 components.\n * @param {boolean} isRipple Specifies the boolean value to enable or disable ripple effect.\n * @returns {boolean}\n */\nfunction enableRipple(isRipple) {\n    isRippleEnabled = isRipple;\n    return isRippleEnabled;\n}\n\n/**\n * Module loading operations\n */\nconst MODULE_SUFFIX = 'Module';\nclass ModuleLoader {\n    constructor(parent) {\n        this.loadedModules = [];\n        this.parent = parent;\n    }\n    ;\n    /**\n     * Inject required modules in component library\n     * @return {void}\n     * @param {ModuleDeclaration[]} requiredModules - Array of modules to be required\n     * @param {Function[]} moduleList - Array of modules to be injected from sample side\n     */\n    inject(requiredModules, moduleList) {\n        let reqLength = requiredModules.length;\n        if (reqLength === 0) {\n            this.clean();\n            return;\n        }\n        if (this.loadedModules.length) {\n            this.clearUnusedModule(requiredModules);\n        }\n        for (let i = 0; i < reqLength; i++) {\n            let modl = requiredModules[i];\n            for (let module of moduleList) {\n                let modName = modl.member;\n                if (module.prototype.getModuleName() === modl.member && !this.isModuleLoaded(modName)) {\n                    let moduleObject = createInstance(module, modl.args);\n                    let memberName = this.getMemberName(modName);\n                    if (modl.isProperty) {\n                        setValue(memberName, module, this.parent);\n                    }\n                    else {\n                        setValue(memberName, moduleObject, this.parent);\n                    }\n                    let loadedModule = modl;\n                    loadedModule.member = memberName;\n                    this.loadedModules.push(loadedModule);\n                }\n            }\n        }\n    }\n    /**\n     * To remove the created object while destroying the control\n     * @return {void}\n     */\n    clean() {\n        for (let modules of this.loadedModules) {\n            if (!modules.isProperty) {\n                getValue(modules.member, this.parent).destroy();\n            }\n        }\n        this.loadedModules = [];\n    }\n    /**\n     * Removes all unused modules\n     * @param {ModuleDeclaration[]} moduleList\n     * @returns {void}\n     */\n    clearUnusedModule(moduleList) {\n        let usedModules = moduleList.map((arg) => { return this.getMemberName(arg.member); });\n        let removableModule = this.loadedModules.filter((module) => {\n            return usedModules.indexOf(module.member) === -1;\n        });\n        for (let mod of removableModule) {\n            if (!mod.isProperty) {\n                getValue(mod.member, this.parent).destroy();\n            }\n            this.loadedModules.splice(this.loadedModules.indexOf(mod), 1);\n            deleteObject(this.parent, mod.member);\n        }\n    }\n    /**\n     * To get the name of the member.\n     * @param {string} name\n     * @returns {string}\n     */\n    getMemberName(name) {\n        return name[0].toLowerCase() + name.substring(1) + MODULE_SUFFIX;\n    }\n    /**\n     * Returns boolean based on whether the module specified is loaded or not\n     * @param {string} modName\n     * @returns {boolean}\n     */\n    isModuleLoaded(modName) {\n        for (let mod of this.loadedModules) {\n            if (mod.member === this.getMemberName(modName)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n\n/**\n * To detect the changes for inner properties.\n * @private\n */\nclass ChildProperty {\n    constructor(parent, propName, defaultValue, isArray) {\n        this.isComplexArraySetter = false;\n        this.properties = {};\n        this.changedProperties = {};\n        this.childChangedProperties = {};\n        this.oldProperties = {};\n        // tslint:disable-next-line:no-empty\n        this.finalUpdate = () => { };\n        this.callChildDataBind = getValue('callChildDataBind', Base);\n        this.parentObj = parent;\n        this.controlParent = this.parentObj.controlParent || this.parentObj;\n        this.propName = propName;\n        this.isParentArray = isArray;\n        this.setProperties(defaultValue, true);\n    }\n    /**\n     * Updates the property changes\n     * @param {boolean} val\n     * @param {string} propName\n     * @returns {void}\n     */\n    updateChange(val, propName) {\n        if (val === true) {\n            this.parentObj.childChangedProperties[propName] = val;\n        }\n        else {\n            delete this.parentObj.childChangedProperties[propName];\n        }\n        if (this.parentObj.updateChange) {\n            this.parentObj.updateChange(val, this.parentObj.propName);\n        }\n    }\n    /**\n     * Updates time out duration\n     */\n    updateTimeOut() {\n        if (this.parentObj.updateTimeOut) {\n            this.parentObj.finalUpdate();\n            this.parentObj.updateTimeOut();\n        }\n        else {\n            let changeTime = setTimeout(this.parentObj.dataBind.bind(this.parentObj));\n            let clearUpdate = () => {\n                clearTimeout(changeTime);\n            };\n            this.finalUpdate = clearUpdate;\n        }\n    }\n    /**\n     * Clears changed properties\n     */\n    clearChanges() {\n        this.finalUpdate();\n        this.updateChange(false, this.propName);\n        this.oldProperties = {};\n        this.changedProperties = {};\n    }\n    /**\n     * Set property changes\n     * @param {Object} prop\n     * @param {boolean} muteOnChange\n     * {void}\n     */\n    setProperties(prop, muteOnChange) {\n        if (muteOnChange === true) {\n            merge(this, prop);\n            this.updateChange(false, this.propName);\n            this.clearChanges();\n        }\n        else {\n            merge(this, prop);\n        }\n    }\n    /**\n     * Binds data\n     */\n    dataBind() {\n        this.callChildDataBind(this.childChangedProperties, this);\n        if (this.isParentArray) {\n            let curIndex = this.parentObj[this.propName].indexOf(this);\n            if (Object.keys(this.changedProperties).length) {\n                setValue(this.propName + '.' + curIndex, this.changedProperties, this.parentObj.changedProperties);\n                setValue(this.propName + '.' + curIndex, this.oldProperties, this.parentObj.oldProperties);\n            }\n        }\n        else {\n            this.parentObj.changedProperties[this.propName] = this.changedProperties;\n            this.parentObj.oldProperties[this.propName] = this.oldProperties;\n        }\n        this.clearChanges();\n    }\n    /**\n     * Saves changes to newer values\n     * @param {string} key\n     * @param {Object} newValue\n     * @param {Object} oldValue\n     * @returns {void}\n     */\n    saveChanges(key, newValue, oldValue, restrictServerDataBind) {\n        if (this.controlParent.isProtectedOnChange) {\n            return;\n        }\n        if (!restrictServerDataBind) {\n            this.serverDataBind(key, newValue, true);\n        }\n        this.oldProperties[key] = oldValue;\n        this.changedProperties[key] = newValue;\n        this.updateChange(true, this.propName);\n        this.finalUpdate();\n        this.updateTimeOut();\n    }\n    serverDataBind(key, value, isSaveChanges, action) {\n        if (isBlazor() && !this.parentObj.isComplexArraySetter) {\n            // tslint:disable-next-line:no-any\n            let parent;\n            let newChanges = {};\n            let parentKey = isSaveChanges ? this.getParentKey(true) + '.' + key : key;\n            /* istanbul ignore else  */\n            if (parentKey.indexOf('.') !== -1) {\n                let complexKeys = parentKey.split('.');\n                parent = newChanges;\n                for (let i = 0; i < complexKeys.length; i++) {\n                    let isFinal = i === complexKeys.length - 1;\n                    parent[complexKeys[i]] = isFinal ? value : {};\n                    parent = isFinal ? parent : parent[complexKeys[i]];\n                }\n            }\n            else {\n                newChanges[parentKey] = {};\n                parent = newChanges[parentKey];\n                newChanges[parentKey][key] = value;\n            }\n            /* istanbul ignore next */\n            if (this.isParentArray) {\n                let actionProperty = 'ejsAction';\n                parent[actionProperty] = action ? action : 'none';\n            }\n            this.controlParent.serverDataBind(newChanges);\n        }\n    }\n    getParentKey(isSaveChanges) {\n        // tslint:disable-next-line:no-any\n        let index = '';\n        let propName = this.propName;\n        /* istanbul ignore next */\n        if (this.isParentArray) {\n            index = this.parentObj[this.propName].indexOf(this);\n            let valueLength = this.parentObj[this.propName].length;\n            valueLength = isSaveChanges ? valueLength : (valueLength > 0 ? valueLength - 1 : 0);\n            index = index !== -1 ? '-' + index : '-' + valueLength;\n            propName = propName + index;\n        }\n        if (this.controlParent !== this.parentObj) {\n            propName = this.parentObj.getParentKey() + '.' + this.propName + index;\n        }\n        return propName;\n    }\n}\n\nvar __decorate$1 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nlet componentCount = 0;\nlet lastPageID;\nlet lastHistoryLen = 0;\n/**\n * Base class for all Essential JavaScript components\n */\nlet Component = class Component extends Base {\n    /**\n     * Initialize the constructor for component base\n     */\n    constructor(options, selector) {\n        super(options, selector);\n        this.randomId = uniqueID();\n        /**\n         * string template option for Blazor template rendering\n         * @private\n         */\n        this.isStringTemplate = false;\n        this.needsID = false;\n        this.isReactHybrid = false;\n        if (isNullOrUndefined(this.enableRtl)) {\n            this.setProperties({ 'enableRtl': rightToLeft }, true);\n        }\n        if (isNullOrUndefined(this.locale)) {\n            this.setProperties({ 'locale': defaultCulture }, true);\n        }\n        this.moduleLoader = new ModuleLoader(this);\n        this.localObserver = new Observer(this);\n        // tslint:disable-next-line:no-function-constructor-with-string-args\n        onIntlChange.on('notifyExternalChange', this.detectFunction, this, this.randomId);\n        if (!isUndefined(selector)) {\n            this.appendTo();\n        }\n    }\n    requiredModules() {\n        return [];\n    }\n    ;\n    /**\n     * Destroys the sub modules while destroying the widget\n     */\n    destroy() {\n        if (this.isDestroyed) {\n            return;\n        }\n        if (this.enablePersistence) {\n            this.setPersistData();\n        }\n        this.localObserver.destroy();\n        if (this.refreshing) {\n            return;\n        }\n        removeClass([this.element], ['e-control']);\n        this.trigger('destroyed', { cancel: false });\n        super.destroy();\n        this.moduleLoader.clean();\n        onIntlChange.off('notifyExternalChange', this.detectFunction, this.randomId);\n    }\n    /**\n     * Applies all the pending property changes and render the component again.\n     */\n    refresh() {\n        this.refreshing = true;\n        this.moduleLoader.clean();\n        this.destroy();\n        this.clearChanges();\n        this.localObserver = new Observer(this);\n        this.preRender();\n        this.injectModules();\n        this.render();\n        this.refreshing = false;\n    }\n    accessMount() {\n        if (this.mount && !this.isReactHybrid) {\n            this.mount();\n        }\n    }\n    /**\n     * Returns the route element of the component\n     */\n    getRootElement() {\n        if (this.isReactHybrid) {\n            return this.actualElement;\n        }\n        else {\n            return this.element;\n        }\n    }\n    /**\n     * Appends the control within the given HTML element\n     * @param {string | HTMLElement} selector - Target element where control needs to be appended\n     */\n    appendTo(selector) {\n        if (!isNullOrUndefined(selector) && typeof (selector) === 'string') {\n            this.element = select(selector, document);\n        }\n        else if (!isNullOrUndefined(selector)) {\n            this.element = selector;\n        }\n        if (!isNullOrUndefined(this.element)) {\n            let moduleClass = 'e-' + this.getModuleName().toLowerCase();\n            addClass([this.element], ['e-control', moduleClass]);\n            this.isProtectedOnChange = false;\n            if (this.needsID && !this.element.id) {\n                this.element.id = this.getUniqueID(this.getModuleName());\n            }\n            if (this.enablePersistence) {\n                this.mergePersistData();\n                window.addEventListener('unload', this.setPersistData.bind(this));\n            }\n            let inst = getValue('ej2_instances', this.element);\n            if (!inst || inst.indexOf(this) === -1) {\n                super.addInstance();\n            }\n            this.preRender();\n            this.injectModules();\n            this.render();\n            if (!this.mount) {\n                this.trigger('created');\n            }\n            else {\n                this.accessMount();\n            }\n        }\n    }\n    /**\n     * It is used to process the post rendering functionalities to a component.\n     */\n    renderComplete(wrapperElement) {\n        if (isBlazor()) {\n            let sfBlazor = 'sfBlazor';\n            // tslint:disable-next-line:no-any\n            window[sfBlazor].renderComplete(this.element, wrapperElement);\n        }\n        this.isRendered = true;\n    }\n    /**\n     * When invoked, applies the pending property changes immediately to the component.\n     */\n    dataBind() {\n        this.injectModules();\n        super.dataBind();\n    }\n    ;\n    /**\n     * Attach one or more  event handler to the current component context.\n     * It is used for internal handling event internally within the component only.\n     * @param {BoundOptions[]| string} event - It is  optional type either to  Set the collection of event list or the eventName.\n     * @param {Function} handler - optional parameter Specifies the handler to run when the event occurs\n     * @param {Object} context - optional parameter Specifies the context to be bind in the handler.\n     * @return {void}\n     * @private\n     */\n    on(event, handler, context) {\n        if (typeof event === 'string') {\n            this.localObserver.on(event, handler, context);\n        }\n        else {\n            for (let arg of event) {\n                this.localObserver.on(arg.event, arg.handler, arg.context);\n            }\n        }\n    }\n    /**\n     * To remove one or more event handler that has been attached with the on() method.\n     * @param {BoundOptions[]| string} event - It is  optional type either to  Set the collection of event list or the eventName.\n     * @param {Function} handler - optional parameter Specifies the function to run when the event occurs\n     * @return {void}\n     * @private\n     */\n    off(event, handler) {\n        if (typeof event === 'string') {\n            this.localObserver.off(event, handler);\n        }\n        else {\n            for (let arg of event) {\n                this.localObserver.off(arg.event, arg.handler);\n            }\n        }\n    }\n    /**\n     * To notify the handlers in the specified event.\n     * @param {string} property - Specifies the event to be notify.\n     * @param {Object} argument - Additional parameters to pass while calling the handler.\n     * @return {void}\n     * @private\n     */\n    notify(property, argument) {\n        if (this.isDestroyed !== true) {\n            this.localObserver.notify(property, argument);\n        }\n    }\n    /**\n     * Get injected modules\n     * @private\n     */\n    getInjectedModules() {\n        return this.injectedModules;\n    }\n    ;\n    /**\n     * Dynamically injects the required modules to the component.\n     */\n    static Inject(...moduleList) {\n        if (!this.prototype.injectedModules) {\n            this.prototype.injectedModules = [];\n        }\n        for (let i = 0; i < moduleList.length; i++) {\n            if (this.prototype.injectedModules.indexOf(moduleList[i]) === -1) {\n                this.prototype.injectedModules.push(moduleList[i]);\n            }\n        }\n    }\n    /**\n     * This is a instance method to create an element.\n     * @private\n     */\n    //tslint:disable:no-any\n    createElement(tagName, prop, isVDOM) {\n        if (isVDOM && this.isReactHybrid) {\n            if (prop) {\n                prop = {};\n            }\n            prop['data-id'] = getRandomId();\n            return VirtualDOM.createElement(tagName, prop);\n        }\n        else {\n            return createElement(tagName, prop);\n        }\n    }\n    /**\n     *\n     * @param handler - handler to be triggered after state Updated.\n     * @param argument - Arguments to be passed to caller.\n     * @private\n     */\n    //tslint:disable:no-any\n    triggerStateChange(handler, argument) {\n        if (this.isReactHybrid) {\n            //tslint:disable:no-any\n            this.setState();\n            this.currentContext = { calls: handler, args: argument };\n        }\n    }\n    // tslint: enable: no-any\n    injectModules() {\n        if (this.injectedModules && this.injectedModules.length) {\n            this.moduleLoader.inject(this.requiredModules(), this.injectedModules);\n        }\n    }\n    detectFunction(args) {\n        let prop = Object.keys(args);\n        if (prop.length) {\n            this[prop[0]] = args[prop[0]];\n        }\n    }\n    mergePersistData() {\n        let data = window.localStorage.getItem(this.getModuleName() + this.element.id);\n        if (!(isNullOrUndefined(data) || (data === ''))) {\n            this.setProperties(JSON.parse(data), true);\n        }\n    }\n    setPersistData() {\n        if (!this.isDestroyed) {\n            window.localStorage.setItem(this.getModuleName() + this.element.id, this.getPersistData());\n        }\n    }\n    //tslint:disable-next-line\n    renderReactTemplates() {\n        //No Code\n    }\n    //tslint:disable-next-line\n    clearTemplate(templateName, index) {\n        //No Code\n    }\n    getUniqueID(definedName) {\n        if (this.isHistoryChanged()) {\n            componentCount = 0;\n        }\n        lastPageID = this.pageID(location.href);\n        lastHistoryLen = history.length;\n        return definedName + '_' + lastPageID + '_' + componentCount++;\n    }\n    pageID(url) {\n        let hash = 0;\n        if (url.length === 0) {\n            return hash;\n        }\n        for (let i = 0; i < url.length; i++) {\n            let char = url.charCodeAt(i);\n            hash = ((hash << 5) - hash) + char;\n            hash = hash & hash; // Convert to 32bit integer\n        }\n        return Math.abs(hash);\n    }\n    isHistoryChanged() {\n        return lastPageID !== this.pageID(location.href) || lastHistoryLen !== history.length;\n    }\n    addOnPersist(options) {\n        let persistObj = {};\n        for (let key of options) {\n            let objValue;\n            objValue = getValue(key, this);\n            if (!isUndefined(objValue)) {\n                setValue(key, this.getActualProperties(objValue), persistObj);\n            }\n        }\n        return JSON.stringify(persistObj, (key, value) => {\n            return this.getActualProperties(value);\n        });\n    }\n    getActualProperties(obj) {\n        if (obj instanceof ChildProperty) {\n            return getValue('properties', obj);\n        }\n        else {\n            return obj;\n        }\n    }\n    ignoreOnPersist(options) {\n        return JSON.stringify(this.iterateJsonProperties(this.properties, options));\n    }\n    iterateJsonProperties(obj, ignoreList) {\n        let newObj = {};\n        for (let key of Object.keys(obj)) {\n            if (ignoreList.indexOf(key) === -1) {\n                // tslint:disable-next-line:no-any\n                let value = obj[key];\n                if (typeof value === 'object' && !(value instanceof Array)) {\n                    let newList = ignoreList.filter((str) => {\n                        return new RegExp(key + '.').test(str);\n                    }).map((str) => {\n                        return str.replace(key + '.', '');\n                    });\n                    newObj[key] = this.iterateJsonProperties(this.getActualProperties(value), newList);\n                }\n                else {\n                    newObj[key] = value;\n                }\n            }\n        }\n        return newObj;\n    }\n};\n__decorate$1([\n    Property(false)\n], Component.prototype, \"enablePersistence\", void 0);\n__decorate$1([\n    Property()\n], Component.prototype, \"enableRtl\", void 0);\n__decorate$1([\n    Property()\n], Component.prototype, \"locale\", void 0);\nComponent = __decorate$1([\n    NotifyPropertyChanges\n], Component);\n//Function handling for page navigation detection \n/* istanbul ignore next */\n(() => {\n    if (typeof window !== 'undefined') {\n        window.addEventListener('popstate', \n        /* istanbul ignore next */\n        () => {\n            componentCount = 0;\n        });\n    }\n})();\n\nvar __decorate$2 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar Draggable_1;\nconst defaultPosition = { left: 0, top: 0, bottom: 0, right: 0 };\nconst isDraggedObject = { isDragged: false };\n/**\n * Specifies the position coordinates\n */\nclass Position extends ChildProperty {\n}\n__decorate$2([\n    Property(0)\n], Position.prototype, \"left\", void 0);\n__decorate$2([\n    Property(0)\n], Position.prototype, \"top\", void 0);\n/**\n * Draggable Module provides support to enable draggable functionality in Dom Elements.\n * ```html\n * <div id='drag'>Draggable</div>\n * <script>\n * var ele = document.getElementById('drag');\n * var drag:Draggable = new Draggable(ele,{\n *     clone:false,\n *     drag: function(e) {\n *      //drag handler code.\n *      },\n *     handle:'.class'\n * });\n * </script>\n * ```\n */\nlet Draggable = Draggable_1 = class Draggable extends Base {\n    constructor(element, options) {\n        super(options, element);\n        this.dragLimit = Draggable_1.getDefaultPosition();\n        this.borderWidth = Draggable_1.getDefaultPosition();\n        this.padding = Draggable_1.getDefaultPosition();\n        this.diffX = 0;\n        this.prevLeft = 0;\n        this.prevTop = 0;\n        this.dragProcessStarted = false;\n        /* tslint:disable no-any */\n        this.tapHoldTimer = 0;\n        this.externalInitialize = false;\n        this.diffY = 0;\n        this.parentScrollX = 0;\n        this.parentScrollY = 0;\n        this.droppables = {};\n        this.bind();\n    }\n    bind() {\n        this.toggleEvents();\n        if (Browser.isIE) {\n            addClass([this.element], 'e-block-touch');\n        }\n        this.droppables[this.scope] = {};\n    }\n    static getDefaultPosition() {\n        return extend({}, defaultPosition);\n    }\n    toggleEvents(isUnWire) {\n        let ele;\n        if (!isUndefined(this.handle)) {\n            ele = select(this.handle, this.element);\n        }\n        let handler = (this.enableTapHold && Browser.isDevice && Browser.isTouch) ? this.mobileInitialize : this.initialize;\n        if (isUnWire) {\n            EventHandler.remove(ele || this.element, Browser.touchStartEvent, handler);\n        }\n        else {\n            EventHandler.add(ele || this.element, Browser.touchStartEvent, handler, this);\n        }\n    }\n    /* istanbul ignore next */\n    mobileInitialize(evt) {\n        let target = evt.currentTarget;\n        this.tapHoldTimer = setTimeout(() => {\n            this.externalInitialize = true;\n            this.removeTapholdTimer();\n            this.initialize(evt, target);\n        }, this.tapHoldThreshold);\n        EventHandler.add(document, Browser.touchMoveEvent, this.removeTapholdTimer, this);\n        EventHandler.add(document, Browser.touchEndEvent, this.removeTapholdTimer, this);\n    }\n    /* istanbul ignore next */\n    removeTapholdTimer() {\n        clearTimeout(this.tapHoldTimer);\n        EventHandler.remove(document, Browser.touchMoveEvent, this.removeTapholdTimer);\n        EventHandler.remove(document, Browser.touchEndEvent, this.removeTapholdTimer);\n    }\n    /* istanbul ignore next */\n    getScrollableParent(element, axis) {\n        let scroll = { 'vertical': 'scrollHeight', 'horizontal': 'scrollWidth' };\n        let client = { 'vertical': 'clientHeight', 'horizontal': 'clientWidth' };\n        if (isNullOrUndefined(element)) {\n            return null;\n        }\n        if (element[scroll[axis]] > element[client[axis]]) {\n            if (axis === 'vertical' ? element.scrollTop > 0 : element.scrollLeft > 0) {\n                if (axis === 'vertical') {\n                    this.parentScrollY = this.parentScrollY +\n                        (this.parentScrollY === 0 ? element.scrollTop : element.scrollTop - this.parentScrollY);\n                }\n                else {\n                    this.parentScrollX = this.parentScrollX +\n                        (this.parentScrollX === 0 ? element.scrollLeft : element.scrollLeft - this.parentScrollX);\n                }\n                if (!isNullOrUndefined(element)) {\n                    return this.getScrollableParent(element.parentNode, axis);\n                }\n                else {\n                    return element;\n                }\n            }\n            else {\n                return this.getScrollableParent(element.parentNode, axis);\n            }\n        }\n        else {\n            return this.getScrollableParent(element.parentNode, axis);\n        }\n    }\n    getScrollableValues() {\n        this.parentScrollX = 0;\n        this.parentScrollY = 0;\n        let isModalDialog = this.element.classList.contains('e-dialog') && this.element.classList.contains('e-dlg-modal');\n        let verticalScrollParent = this.getScrollableParent(this.element.parentNode, 'vertical');\n        let horizontalScrollParent = this.getScrollableParent(this.element.parentNode, 'horizontal');\n    }\n    initialize(evt, curTarget) {\n        this.currentStateTarget = evt.target;\n        if (this.isDragStarted()) {\n            return;\n        }\n        else {\n            this.isDragStarted(true);\n            this.externalInitialize = false;\n        }\n        this.target = (evt.currentTarget || curTarget);\n        this.dragProcessStarted = false;\n        if (this.abort) {\n            /* tslint:disable no-any */\n            let abortSelectors = this.abort;\n            if (typeof abortSelectors === 'string') {\n                abortSelectors = [abortSelectors];\n            }\n            for (let i = 0; i < abortSelectors.length; i++) {\n                if (!isNullOrUndefined(closest(evt.target, abortSelectors[i]))) {\n                    /* istanbul ignore next */\n                    if (this.isDragStarted()) {\n                        this.isDragStarted(true);\n                    }\n                    return;\n                }\n            }\n        }\n        if (this.preventDefault && !isUndefined(evt.changedTouches) && evt.type !== 'touchstart') {\n            evt.preventDefault();\n        }\n        this.element.setAttribute('aria-grabbed', 'true');\n        let intCoord = this.getCoordinates(evt);\n        this.initialPosition = { x: intCoord.pageX, y: intCoord.pageY };\n        if (!this.clone) {\n            let pos = this.element.getBoundingClientRect();\n            this.getScrollableValues();\n            if (evt.clientX === evt.pageX) {\n                this.parentScrollX = 0;\n            }\n            if (evt.clientY === evt.pageY) {\n                this.parentScrollY = 0;\n            }\n            this.relativeXPosition = intCoord.pageX - (pos.left + this.parentScrollX);\n            this.relativeYPosition = intCoord.pageY - (pos.top + this.parentScrollY);\n        }\n        if (this.externalInitialize) {\n            this.intDragStart(evt);\n        }\n        else {\n            EventHandler.add(document, Browser.touchMoveEvent, this.intDragStart, this);\n            EventHandler.add(document, Browser.touchEndEvent, this.intDestroy, this);\n        }\n        this.toggleEvents(true);\n        document.body.classList.add('e-prevent-select');\n        this.externalInitialize = false;\n        EventHandler.trigger(document.documentElement, Browser.touchStartEvent, evt);\n    }\n    intDragStart(evt) {\n        this.removeTapholdTimer();\n        let isChangeTouch = !isUndefined(evt.changedTouches);\n        if (isChangeTouch && (evt.changedTouches.length !== 1)) {\n            return;\n        }\n        if (isChangeTouch) {\n            evt.preventDefault();\n        }\n        let intCordinate = this.getCoordinates(evt);\n        let pos;\n        let styleProp = getComputedStyle(this.element);\n        this.margin = {\n            left: parseInt(styleProp.marginLeft, 10),\n            top: parseInt(styleProp.marginTop, 10),\n            right: parseInt(styleProp.marginRight, 10),\n            bottom: parseInt(styleProp.marginBottom, 10),\n        };\n        let element = this.element;\n        if (this.clone && this.dragTarget) {\n            let intClosest = closest(evt.target, this.dragTarget);\n            if (!isNullOrUndefined(intClosest)) {\n                element = intClosest;\n            }\n        }\n        /* istanbul ignore next */\n        if (this.isReplaceDragEle) {\n            element = this.currentStateCheck(evt.target, element);\n        }\n        this.offset = this.calculateParentPosition(element);\n        this.position = this.getMousePosition(evt, this.isDragScroll);\n        let x = this.initialPosition.x - intCordinate.pageX;\n        let y = this.initialPosition.y - intCordinate.pageY;\n        let distance = Math.sqrt((x * x) + (y * y));\n        if ((distance >= this.distance || this.externalInitialize)) {\n            let ele = this.getHelperElement(evt);\n            if (!ele || isNullOrUndefined(ele)) {\n                return;\n            }\n            let dragTargetElement = this.helperElement = ele;\n            this.parentClientRect = this.calculateParentPosition(dragTargetElement.offsetParent);\n            if (this.dragStart) {\n                let curTarget = this.getProperTargetElement(evt);\n                let args = {\n                    event: evt,\n                    element: element,\n                    target: curTarget,\n                    bindEvents: isBlazor() ? this.bindDragEvents.bind(this) : null,\n                    dragElement: dragTargetElement\n                };\n                this.trigger('dragStart', args);\n            }\n            if (this.dragArea) {\n                this.setDragArea();\n            }\n            else {\n                this.dragLimit = { left: 0, right: 0, bottom: 0, top: 0 };\n                this.borderWidth = { top: 0, left: 0 };\n            }\n            pos = { left: this.position.left - this.parentClientRect.left, top: this.position.top - this.parentClientRect.top };\n            if (this.clone && !this.enableTailMode) {\n                this.diffX = this.position.left - this.offset.left;\n                this.diffY = this.position.top - this.offset.top;\n            }\n            this.getScrollableValues();\n            if (!this.clone && !this.dragArea) {\n                pos.top -= this.parentScrollY;\n                pos.left -= this.parentScrollX;\n            }\n            let posValue = this.getProcessedPositionValue({\n                top: (pos.top - this.diffY) + 'px',\n                left: (pos.left - this.diffX) + 'px'\n            });\n            this.dragElePosition = { top: pos.top, left: pos.left };\n            setStyleAttribute(dragTargetElement, this.getDragPosition({ position: 'absolute', left: posValue.left, top: posValue.top }));\n            EventHandler.remove(document, Browser.touchMoveEvent, this.intDragStart);\n            EventHandler.remove(document, Browser.touchEndEvent, this.intDestroy);\n            if (!isBlazor()) {\n                this.bindDragEvents(dragTargetElement);\n            }\n        }\n    }\n    bindDragEvents(dragTargetElement) {\n        if (isVisible(dragTargetElement)) {\n            EventHandler.add(document, Browser.touchMoveEvent, this.intDrag, this);\n            EventHandler.add(document, Browser.touchEndEvent, this.intDragStop, this);\n            this.setGlobalDroppables(false, this.element, dragTargetElement);\n        }\n        else {\n            this.toggleEvents();\n            document.body.classList.remove('e-prevent-select');\n        }\n    }\n    elementInViewport(el) {\n        this.top = el.offsetTop;\n        this.left = el.offsetLeft;\n        this.width = el.offsetWidth;\n        this.height = el.offsetHeight;\n        while (el.offsetParent) {\n            el = el.offsetParent;\n            this.top += el.offsetTop;\n            this.left += el.offsetLeft;\n        }\n        return (this.top >= window.pageYOffset &&\n            this.left >= window.pageXOffset &&\n            (this.top + this.height) <= (window.pageYOffset + window.innerHeight) &&\n            (this.left + this.width) <= (window.pageXOffset + window.innerWidth));\n    }\n    getProcessedPositionValue(value) {\n        if (this.queryPositionInfo) {\n            return this.queryPositionInfo(value);\n        }\n        return value;\n    }\n    calculateParentPosition(ele) {\n        if (isNullOrUndefined(ele)) {\n            return { left: 0, top: 0 };\n        }\n        let rect = ele.getBoundingClientRect();\n        let style = getComputedStyle(ele);\n        return {\n            left: (rect.left + window.pageXOffset) - parseInt(style.marginLeft, 10),\n            top: (rect.top + window.pageYOffset) - parseInt(style.marginTop, 10)\n        };\n    }\n    // tslint:disable-next-line:max-func-body-length\n    intDrag(evt) {\n        if (!isUndefined(evt.changedTouches) && (evt.changedTouches.length !== 1)) {\n            return;\n        }\n        let left;\n        let top;\n        this.position = this.getMousePosition(evt, this.isDragScroll);\n        let docHeight = this.getDocumentWidthHeight('Height');\n        if (docHeight < this.position.top) {\n            this.position.top = docHeight;\n        }\n        let docWidth = this.getDocumentWidthHeight('Width');\n        if (docWidth < this.position.left) {\n            this.position.left = docWidth;\n        }\n        if (this.drag) {\n            let curTarget = this.getProperTargetElement(evt);\n            this.trigger('drag', { event: evt, element: this.element, target: curTarget });\n        }\n        let eleObj = this.checkTargetElement(evt);\n        if (eleObj.target && eleObj.instance) {\n            /* tslint:disable no-any */\n            let flag = true;\n            if (this.hoverObject) {\n                if (this.hoverObject.instance !== eleObj.instance) {\n                    this.triggerOutFunction(evt, eleObj);\n                }\n                else {\n                    flag = false;\n                }\n            }\n            if (flag) {\n                eleObj.instance.dragData[this.scope] = this.droppables[this.scope];\n                eleObj.instance.intOver(evt, eleObj.target);\n                this.hoverObject = eleObj;\n            }\n        }\n        else if (this.hoverObject) {\n            this.triggerOutFunction(evt, eleObj);\n        }\n        let helperElement = this.droppables[this.scope].helper;\n        this.parentClientRect = this.calculateParentPosition(this.helperElement.offsetParent);\n        let tLeft = this.parentClientRect.left;\n        let tTop = this.parentClientRect.top;\n        let intCoord = this.getCoordinates(evt);\n        let pagex = intCoord.pageX;\n        let pagey = intCoord.pageY;\n        let dLeft = this.position.left - this.diffX;\n        let dTop = this.position.top - this.diffY;\n        if (this.dragArea) {\n            let styles = getComputedStyle(helperElement);\n            if (this.pageX !== pagex || this.skipDistanceCheck) {\n                let helperWidth = helperElement.offsetWidth + (parseFloat(styles.marginLeft)\n                    + parseFloat(styles.marginRight));\n                if (this.dragLimit.left > dLeft && dLeft > 0) {\n                    left = this.dragLimit.left;\n                }\n                else if (this.dragLimit.right + window.pageXOffset < dLeft + helperWidth && dLeft > 0) {\n                    left = dLeft - (dLeft - this.dragLimit.right) + window.pageXOffset - helperWidth;\n                }\n                else {\n                    left = dLeft < 0 ? this.dragLimit.left : dLeft;\n                }\n            }\n            if (this.pageY !== pagey || this.skipDistanceCheck) {\n                let helperHeight = helperElement.offsetHeight + (parseFloat(styles.marginTop)\n                    + parseFloat(styles.marginBottom));\n                if (this.dragLimit.top > dTop && dTop > 0) {\n                    top = this.dragLimit.top;\n                }\n                else if (this.dragLimit.bottom + window.pageYOffset < dTop + helperHeight && dTop > 0) {\n                    top = dTop - (dTop - this.dragLimit.bottom) + window.pageYOffset - helperHeight;\n                }\n                else {\n                    top = dTop < 0 ? this.dragLimit.top : dTop;\n                }\n            }\n        }\n        else {\n            left = dLeft;\n            top = dTop;\n        }\n        let iTop = tTop + this.borderWidth.top;\n        let iLeft = tLeft + this.borderWidth.left;\n        if (this.dragProcessStarted) {\n            if (isNullOrUndefined(top)) {\n                top = this.prevTop;\n            }\n            if (isNullOrUndefined(left)) {\n                left = this.prevLeft;\n            }\n        }\n        let draEleTop;\n        let draEleLeft;\n        if (this.dragArea) {\n            draEleTop = (top - iTop) < 0 ? this.dragLimit.top : (top - iTop);\n            draEleLeft = (left - iLeft) < 0 ? this.dragElePosition.left : (left - iLeft);\n        }\n        else {\n            draEleTop = top - iTop;\n            draEleLeft = left - iLeft;\n            if (!this.clone) {\n                draEleTop -= this.parentScrollY;\n                draEleLeft -= this.parentScrollX;\n            }\n        }\n        let dragValue = this.getProcessedPositionValue({ top: draEleTop + 'px', left: draEleLeft + 'px' });\n        setStyleAttribute(helperElement, this.getDragPosition(dragValue));\n        if (!this.elementInViewport(helperElement) && this.enableAutoScroll) {\n            this.helperElement.scrollIntoView();\n        }\n        this.dragProcessStarted = true;\n        this.prevLeft = left;\n        this.prevTop = top;\n        this.position.left = left;\n        this.position.top = top;\n        this.pageX = pagex;\n        this.pageY = pagey;\n    }\n    triggerOutFunction(evt, eleObj) {\n        this.hoverObject.instance.intOut(evt, eleObj.target);\n        this.hoverObject.instance.dragData[this.scope] = null;\n        this.hoverObject = null;\n    }\n    getDragPosition(dragValue) {\n        let temp = extend({}, dragValue);\n        if (this.axis) {\n            if (this.axis === 'x') {\n                delete temp.top;\n            }\n            else if (this.axis === 'y') {\n                delete temp.left;\n            }\n        }\n        return temp;\n    }\n    getDocumentWidthHeight(str) {\n        let docBody = document.body;\n        let docEle = document.documentElement;\n        let returnValue = Math.max(docBody['scroll' + str], docEle['scroll' + str], docBody['offset' + str], docEle['offset' + str], docEle['client' + str]);\n        return returnValue;\n    }\n    intDragStop(evt) {\n        this.dragProcessStarted = false;\n        if (!isUndefined(evt.changedTouches) && (evt.changedTouches.length !== 1)) {\n            return;\n        }\n        let type = ['touchend', 'pointerup', 'mouseup'];\n        if (type.indexOf(evt.type) !== -1) {\n            if (this.dragStop) {\n                let curTarget = this.getProperTargetElement(evt);\n                this.trigger('dragStop', { event: evt, element: this.element, target: curTarget, helper: this.helperElement });\n            }\n            this.intDestroy(evt);\n        }\n        else {\n            this.element.setAttribute('aria-grabbed', 'false');\n        }\n        let eleObj = this.checkTargetElement(evt);\n        if (eleObj.target && eleObj.instance) {\n            eleObj.instance.dragStopCalled = true;\n            eleObj.instance.dragData[this.scope] = this.droppables[this.scope];\n            eleObj.instance.intDrop(evt, eleObj.target);\n        }\n        this.setGlobalDroppables(true);\n        document.body.classList.remove('e-prevent-select');\n    }\n    /**\n     * @private\n     */\n    intDestroy(evt) {\n        this.dragProcessStarted = false;\n        this.toggleEvents();\n        document.body.classList.remove('e-prevent-select');\n        this.element.setAttribute('aria-grabbed', 'false');\n        EventHandler.remove(document, Browser.touchMoveEvent, this.intDragStart);\n        EventHandler.remove(document, Browser.touchEndEvent, this.intDragStop);\n        EventHandler.remove(document, Browser.touchEndEvent, this.intDestroy);\n        EventHandler.remove(document, Browser.touchMoveEvent, this.intDrag);\n        if (this.isDragStarted()) {\n            this.isDragStarted(true);\n        }\n    }\n    // triggers when property changed\n    onPropertyChanged(newProp, oldProp) {\n        //No Code to handle\n    }\n    getModuleName() {\n        return 'draggable';\n    }\n    isDragStarted(change) {\n        if (change) {\n            isDraggedObject.isDragged = !isDraggedObject.isDragged;\n        }\n        return isDraggedObject.isDragged;\n    }\n    setDragArea() {\n        let eleWidthBound;\n        let eleHeightBound;\n        let top = 0;\n        let left = 0;\n        let ele;\n        let type = typeof this.dragArea;\n        if (type === 'string') {\n            ele = select(this.dragArea);\n        }\n        else {\n            ele = this.dragArea;\n        }\n        if (ele) {\n            let elementArea = ele.getBoundingClientRect();\n            eleWidthBound = ele.scrollWidth ? ele.scrollWidth : elementArea.right - elementArea.left;\n            eleHeightBound = ele.scrollHeight ? ele.scrollHeight : elementArea.bottom - elementArea.top;\n            let keys = ['Top', 'Left', 'Bottom', 'Right'];\n            let styles = getComputedStyle(ele);\n            for (let i = 0; i < keys.length; i++) {\n                let key = keys[i];\n                let tborder = styles['border' + key + 'Width'];\n                let tpadding = styles['padding' + key];\n                let lowerKey = key.toLowerCase();\n                this.borderWidth[lowerKey] = isNaN(parseFloat(tborder)) ? 0 : parseFloat(tborder);\n                this.padding[lowerKey] = isNaN(parseFloat(tpadding)) ? 0 : parseFloat(tpadding);\n            }\n            top = elementArea.top;\n            left = elementArea.left;\n            this.dragLimit.left = left + this.borderWidth.left + this.padding.left;\n            this.dragLimit.top = ele.offsetTop + this.borderWidth.top + this.padding.top;\n            this.dragLimit.right = left + eleWidthBound - (this.borderWidth.right + this.padding.right);\n            this.dragLimit.bottom = top + eleHeightBound - (this.borderWidth.bottom + this.padding.bottom);\n        }\n    }\n    getProperTargetElement(evt) {\n        let intCoord = this.getCoordinates(evt);\n        let ele;\n        let prevStyle = this.helperElement.style.pointerEvents || '';\n        if (compareElementParent(evt.target, this.helperElement) || evt.type.indexOf('touch') !== -1) {\n            this.helperElement.style.pointerEvents = 'none';\n            ele = document.elementFromPoint(intCoord.clientX, intCoord.clientY);\n            this.helperElement.style.pointerEvents = prevStyle;\n        }\n        else {\n            ele = evt.target;\n        }\n        return ele;\n    }\n    /* istanbul ignore next */\n    currentStateCheck(ele, oldEle) {\n        let elem;\n        if (!isNullOrUndefined(this.currentStateTarget) && this.currentStateTarget !== ele) {\n            elem = this.currentStateTarget;\n        }\n        else {\n            elem = !isNullOrUndefined(oldEle) ? oldEle : ele;\n        }\n        return elem;\n    }\n    getMousePosition(evt, isdragscroll) {\n        /* tslint:disable no-any */\n        let dragEle = evt.srcElement !== undefined ? evt.srcElement : evt.target;\n        let intCoord = this.getCoordinates(evt);\n        let pageX;\n        let pageY;\n        let isOffsetParent = isNullOrUndefined(dragEle.offsetParent);\n        /* istanbul ignore next */\n        if (isdragscroll) {\n            pageX = this.clone ? intCoord.pageX :\n                (intCoord.pageX + (isOffsetParent ? 0 : dragEle.offsetParent.scrollLeft)) - this.relativeXPosition;\n            pageY = this.clone ? intCoord.pageY :\n                (intCoord.pageY + (isOffsetParent ? 0 : dragEle.offsetParent.scrollTop)) - this.relativeYPosition;\n        }\n        else {\n            pageX = this.clone ? intCoord.pageX : (intCoord.pageX + window.pageXOffset) - this.relativeXPosition;\n            pageY = this.clone ? intCoord.pageY : (intCoord.pageY + window.pageYOffset) - this.relativeYPosition;\n        }\n        return {\n            left: pageX - (this.margin.left + this.cursorAt.left),\n            top: pageY - (this.margin.top + this.cursorAt.top)\n        };\n    }\n    getCoordinates(evt) {\n        if (evt.type.indexOf('touch') > -1) {\n            return evt.changedTouches[0];\n        }\n        return evt;\n    }\n    getHelperElement(evt) {\n        let element;\n        if (this.clone) {\n            if (this.helper) {\n                element = this.helper({ sender: evt, element: this.target });\n            }\n            else {\n                element = createElement('div', { className: 'e-drag-helper e-block-touch', innerHTML: 'Draggable' });\n                document.body.appendChild(element);\n            }\n        }\n        else {\n            element = this.element;\n        }\n        return element;\n    }\n    setGlobalDroppables(reset, drag, helper) {\n        this.droppables[this.scope] = reset ? null : {\n            draggable: drag,\n            helper: helper,\n            draggedElement: this.element\n        };\n    }\n    checkTargetElement(evt) {\n        let target = this.getProperTargetElement(evt);\n        let dropIns = this.getDropInstance(target);\n        if (!dropIns && target && !isNullOrUndefined(target.parentNode)) {\n            let parent = closest(target.parentNode, '.e-droppable') || target.parentElement;\n            if (parent) {\n                dropIns = this.getDropInstance(parent);\n            }\n        }\n        return { target: target, instance: dropIns };\n    }\n    getDropInstance(ele) {\n        let name = 'getModuleName';\n        let drop;\n        let eleInst = ele && ele.ej2_instances;\n        if (eleInst) {\n            for (let inst of eleInst) {\n                if (inst[name]() === 'droppable') {\n                    drop = inst;\n                    break;\n                }\n            }\n        }\n        return drop;\n    }\n    destroy() {\n        this.toggleEvents(true);\n        super.destroy();\n    }\n};\n__decorate$2([\n    Complex({}, Position)\n], Draggable.prototype, \"cursorAt\", void 0);\n__decorate$2([\n    Property(true)\n], Draggable.prototype, \"clone\", void 0);\n__decorate$2([\n    Property()\n], Draggable.prototype, \"dragArea\", void 0);\n__decorate$2([\n    Property()\n], Draggable.prototype, \"isDragScroll\", void 0);\n__decorate$2([\n    Property()\n], Draggable.prototype, \"isReplaceDragEle\", void 0);\n__decorate$2([\n    Event$1()\n], Draggable.prototype, \"drag\", void 0);\n__decorate$2([\n    Event$1()\n], Draggable.prototype, \"dragStart\", void 0);\n__decorate$2([\n    Event$1()\n], Draggable.prototype, \"dragStop\", void 0);\n__decorate$2([\n    Property(1)\n], Draggable.prototype, \"distance\", void 0);\n__decorate$2([\n    Property()\n], Draggable.prototype, \"handle\", void 0);\n__decorate$2([\n    Property()\n], Draggable.prototype, \"abort\", void 0);\n__decorate$2([\n    Property()\n], Draggable.prototype, \"helper\", void 0);\n__decorate$2([\n    Property('default')\n], Draggable.prototype, \"scope\", void 0);\n__decorate$2([\n    Property('')\n], Draggable.prototype, \"dragTarget\", void 0);\n__decorate$2([\n    Property()\n], Draggable.prototype, \"axis\", void 0);\n__decorate$2([\n    Property()\n], Draggable.prototype, \"queryPositionInfo\", void 0);\n__decorate$2([\n    Property(false)\n], Draggable.prototype, \"enableTailMode\", void 0);\n__decorate$2([\n    Property(false)\n], Draggable.prototype, \"skipDistanceCheck\", void 0);\n__decorate$2([\n    Property(true)\n], Draggable.prototype, \"preventDefault\", void 0);\n__decorate$2([\n    Property(false)\n], Draggable.prototype, \"enableAutoScroll\", void 0);\n__decorate$2([\n    Property(false)\n], Draggable.prototype, \"enableTapHold\", void 0);\n__decorate$2([\n    Property(750)\n], Draggable.prototype, \"tapHoldThreshold\", void 0);\nDraggable = Draggable_1 = __decorate$2([\n    NotifyPropertyChanges\n], Draggable);\n\nvar __decorate$3 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n/**\n * Droppable Module provides support to enable droppable functionality in Dom Elements.\n * ```html\n * <div id='drop'>Droppable</div>\n * <script>\n * let ele:HTMLElement = document.getElementById('drop');\n * var drag:Droppable = new Droppable(ele,{\n *     accept:'.drop',\n *     drop: function(e) {\n *      //drop handler code.\n *     }\n * });\n * </script>\n * ```\n */\nlet Droppable = class Droppable extends Base {\n    constructor(element, options) {\n        super(options, element);\n        this.mouseOver = false;\n        this.dragData = {};\n        this.dragStopCalled = false;\n        this.bind();\n    }\n    bind() {\n        this.wireEvents();\n    }\n    wireEvents() {\n        EventHandler.add(this.element, Browser.touchEndEvent, this.intDrop, this);\n    }\n    // triggers when property changed\n    onPropertyChanged(newProp, oldProp) {\n        //No Code to handle\n    }\n    getModuleName() {\n        return 'droppable';\n    }\n    intOver(event, element) {\n        if (!this.mouseOver) {\n            let drag = this.dragData[this.scope];\n            this.trigger('over', { event: event, target: element, dragData: drag });\n            this.mouseOver = true;\n        }\n    }\n    intOut(event, element) {\n        if (this.mouseOver) {\n            this.trigger('out', { evt: event, target: element });\n            this.mouseOver = false;\n        }\n    }\n    intDrop(evt, element) {\n        if (!this.dragStopCalled) {\n            return;\n        }\n        else {\n            this.dragStopCalled = false;\n        }\n        let accept = true;\n        let drag = this.dragData[this.scope];\n        let isDrag = drag ? (drag.helper && isVisible(drag.helper)) : false;\n        let area;\n        if (isDrag) {\n            area = this.isDropArea(evt, drag.helper, element);\n            if (this.accept) {\n                accept = matches(drag.helper, this.accept);\n            }\n        }\n        if (isDrag && this.drop && area.canDrop && accept) {\n            this.trigger('drop', { event: evt, target: area.target, droppedElement: drag.helper, dragData: drag });\n        }\n        this.mouseOver = false;\n    }\n    isDropArea(evt, helper, element) {\n        let area = { canDrop: true, target: element || evt.target };\n        let isTouch = evt.type === 'touchend';\n        if (isTouch || area.target === helper) {\n            helper.style.display = 'none';\n            let coord = isTouch ? (evt.changedTouches[0]) : evt;\n            let ele = document.elementFromPoint(coord.clientX, coord.clientY);\n            area.canDrop = false;\n            area.canDrop = compareElementParent(ele, this.element);\n            if (area.canDrop) {\n                area.target = ele;\n            }\n            helper.style.display = '';\n        }\n        return area;\n    }\n    destroy() {\n        EventHandler.remove(this.element, Browser.touchEndEvent, this.intDrop);\n        super.destroy();\n    }\n};\n__decorate$3([\n    Property()\n], Droppable.prototype, \"accept\", void 0);\n__decorate$3([\n    Property('default')\n], Droppable.prototype, \"scope\", void 0);\n__decorate$3([\n    Event$1()\n], Droppable.prototype, \"drop\", void 0);\n__decorate$3([\n    Event$1()\n], Droppable.prototype, \"over\", void 0);\n__decorate$3([\n    Event$1()\n], Droppable.prototype, \"out\", void 0);\nDroppable = __decorate$3([\n    NotifyPropertyChanges\n], Droppable);\n\nvar __decorate$4 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar KeyboardEvents_1;\nlet keyCode = {\n    'backspace': 8,\n    'tab': 9,\n    'enter': 13,\n    'shift': 16,\n    'control': 17,\n    'alt': 18,\n    'pause': 19,\n    'capslock': 20,\n    'space': 32,\n    'escape': 27,\n    'pageup': 33,\n    'pagedown': 34,\n    'end': 35,\n    'home': 36,\n    'leftarrow': 37,\n    'uparrow': 38,\n    'rightarrow': 39,\n    'downarrow': 40,\n    'insert': 45,\n    'delete': 46,\n    'f1': 112,\n    'f2': 113,\n    'f3': 114,\n    'f4': 115,\n    'f5': 116,\n    'f6': 117,\n    'f7': 118,\n    'f8': 119,\n    'f9': 120,\n    'f10': 121,\n    'f11': 122,\n    'f12': 123,\n    'semicolon': 186,\n    'plus': 187,\n    'comma': 188,\n    'minus': 189,\n    'dot': 190,\n    'forwardslash': 191,\n    'graveaccent': 192,\n    'openbracket': 219,\n    'backslash': 220,\n    'closebracket': 221,\n    'singlequote': 222\n};\n/**\n * KeyboardEvents class enables you to bind key action desired key combinations for ex., Ctrl+A, Delete, Alt+Space etc.\n * ```html\n * <div id='testEle'>  </div>;\n * <script>\n *   let node: HTMLElement = document.querySelector('#testEle');\n *   let kbInstance = new KeyboardEvents({\n *       element: node,\n *       keyConfigs:{ selectAll : 'ctrl+a' },\n *       keyAction: function (e:KeyboardEvent, action:string) {\n *           // handler function code\n *       }\n *   });\n * </script>\n * ```\n */\nlet KeyboardEvents = KeyboardEvents_1 = class KeyboardEvents extends Base {\n    /**\n     * Initializes the KeyboardEvents\n     * @param {HTMLElement} element\n     * @param {KeyboardEventsModel} options\n     */\n    constructor(element, options) {\n        super(options, element);\n        /**\n         * To handle a key press event returns null\n         */\n        this.keyPressHandler = (e) => {\n            let isAltKey = e.altKey;\n            let isCtrlKey = e.ctrlKey;\n            let isShiftKey = e.shiftKey;\n            let curkeyCode = e.which;\n            let keys = Object.keys(this.keyConfigs);\n            for (let key of keys) {\n                let configCollection = this.keyConfigs[key].split(',');\n                for (let rconfig of configCollection) {\n                    let rKeyObj = KeyboardEvents_1.getKeyConfigData(rconfig.trim());\n                    if (isAltKey === rKeyObj.altKey && isCtrlKey === rKeyObj.ctrlKey &&\n                        isShiftKey === rKeyObj.shiftKey && curkeyCode === rKeyObj.keyCode) {\n                        e.action = key;\n                        if (this.keyAction) {\n                            this.keyAction(e);\n                        }\n                    }\n                }\n            }\n        };\n        this.bind();\n    }\n    /**\n     * Unwire bound events and destroy the instance.\n     * @return {void}\n     */\n    destroy() {\n        this.unwireEvents();\n        super.destroy();\n    }\n    /**\n     * Function can be used to specify certain action if a property is changed\n     * @param newProp\n     * @param oldProp\n     * @returns {void}\n     * @private\n     */\n    onPropertyChanged(newProp, oldProp) {\n        // No code are needed\n    }\n    ;\n    bind() {\n        this.wireEvents();\n    }\n    /**\n     * To get the module name, returns 'keyboard'.\n     * @private\n     */\n    getModuleName() {\n        return 'keyboard';\n    }\n    /**\n     * Wiring event handlers to events\n     */\n    wireEvents() {\n        this.element.addEventListener(this.eventName, this.keyPressHandler);\n    }\n    /**\n     * Unwiring event handlers to events\n     */\n    unwireEvents() {\n        this.element.removeEventListener(this.eventName, this.keyPressHandler);\n    }\n    /**\n     * To get the key configuration data\n     * @param {string} config - configuration data\n     * returns {KeyData}\n     */\n    static getKeyConfigData(config) {\n        if (config in this.configCache) {\n            return this.configCache[config];\n        }\n        let keys = config.toLowerCase().split('+');\n        let keyData = {\n            altKey: (keys.indexOf('alt') !== -1 ? true : false),\n            ctrlKey: (keys.indexOf('ctrl') !== -1 ? true : false),\n            shiftKey: (keys.indexOf('shift') !== -1 ? true : false),\n            keyCode: null\n        };\n        if (keys[keys.length - 1].length > 1 && !!Number(keys[keys.length - 1])) {\n            keyData.keyCode = Number(keys[keys.length - 1]);\n        }\n        else {\n            keyData.keyCode = KeyboardEvents_1.getKeyCode(keys[keys.length - 1]);\n        }\n        KeyboardEvents_1.configCache[config] = keyData;\n        return keyData;\n    }\n    // Return the keycode value as string \n    static getKeyCode(keyVal) {\n        return keyCode[keyVal] || keyVal.toUpperCase().charCodeAt(0);\n    }\n};\nKeyboardEvents.configCache = {};\n__decorate$4([\n    Property({})\n], KeyboardEvents.prototype, \"keyConfigs\", void 0);\n__decorate$4([\n    Property('keyup')\n], KeyboardEvents.prototype, \"eventName\", void 0);\n__decorate$4([\n    Event$1()\n], KeyboardEvents.prototype, \"keyAction\", void 0);\nKeyboardEvents = KeyboardEvents_1 = __decorate$4([\n    NotifyPropertyChanges\n], KeyboardEvents);\n\n/**\n * L10n modules provides localized text for different culture.\n * ```typescript\n * import {setCulture} from '@syncfusion/ts-base-library';\n * //load global locale object common for all components.\n * L10n.load({\n *    'fr-BE': {\n *       'button': {\n *            'check': 'vérifié'\n *        }\n *    }\n * });\n * //set globale default locale culture.\n * setCulture('fr-BE');\n * let instance: L10n = new L10n('button', {\n *    check: 'checked'\n * });\n * //Get locale text for current property.\n * instance.getConstant('check');\n * //Change locale culture in a component.\n * instance.setLocale('en-US');\n * ```\n */\nclass L10n {\n    /**\n     * Constructor\n     */\n    constructor(controlName, localeStrings, locale) {\n        this.controlName = controlName;\n        this.localeStrings = localeStrings;\n        this.setLocale(locale || defaultCulture);\n    }\n    /**\n     * Sets the locale text\n     * @param {string} locale\n     * @returns {void}\n     */\n    setLocale(locale) {\n        let intLocale = this.intGetControlConstant(L10n.locale, locale);\n        this.currentLocale = intLocale || this.localeStrings;\n    }\n    /**\n     * Sets the global locale for all components.\n     * @param {Object} localeObject - specifies the localeObject to be set as global locale.\n     */\n    static load(localeObject) {\n        this.locale = extend(this.locale, localeObject, {}, true);\n    }\n    /**\n     * Returns current locale text for the property based on the culture name and control name.\n     * @param {string} propertyName - specifies the property for which localize text to be returned.\n     * @return string\n     */\n    getConstant(prop) {\n        // Removed conditional operator because this method does not return correct value when passing 0 as value in localization\n        if (!isNullOrUndefined(this.currentLocale[prop])) {\n            return this.currentLocale[prop];\n        }\n        else {\n            return this.localeStrings[prop] || '';\n        }\n    }\n    /**\n     * Returns the control constant object for current object and the locale specified.\n     * @param {Object} curObject\n     * @param {string} locale\n     * @returns {Object}\n     */\n    intGetControlConstant(curObject, locale) {\n        if ((curObject)[locale]) {\n            return (curObject)[locale][this.controlName];\n        }\n        return null;\n    }\n}\nL10n.locale = {};\n\nvar __decorate$5 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n/**\n * SwipeSettings is a framework module that provides support to handle swipe event like swipe up, swipe right, etc..,\n */\nclass SwipeSettings extends ChildProperty {\n}\n__decorate$5([\n    Property(50)\n], SwipeSettings.prototype, \"swipeThresholdDistance\", void 0);\nconst swipeRegex = /(Up|Down)/;\n/**\n * Touch class provides support to handle the touch event like tap, double tap, tap hold, etc..,\n * ```typescript\n *    let node: HTMLElement;\n * let touchObj: Touch = new Touch({\n *    element: node,\n *    tap: function (e) {\n *        // tap handler function code\n *    }\n *    tapHold: function (e) {\n *        // tap hold handler function code\n *    }\n *    scroll: function (e) {\n *        // scroll handler function code\n *    }\n *    swipe: function (e) {\n *        // swipe handler function code\n *    }\n * });\n * ```\n */\nlet Touch = class Touch extends Base {\n    /* End-Properties */\n    constructor(element, options) {\n        super(options, element);\n        this.touchAction = true;\n        this.tapCount = 0;\n        this.startEvent = (evt) => {\n            if (this.touchAction === true) {\n                let point = this.updateChangeTouches(evt);\n                if (evt.changedTouches !== undefined) {\n                    this.touchAction = false;\n                }\n                this.isTouchMoved = false;\n                this.movedDirection = '';\n                this.startPoint = this.lastMovedPoint = { clientX: point.clientX, clientY: point.clientY };\n                this.startEventData = point;\n                this.hScrollLocked = this.vScrollLocked = false;\n                this.tStampStart = Date.now();\n                this.timeOutTapHold = setTimeout(() => { this.tapHoldEvent(evt); }, this.tapHoldThreshold);\n                EventHandler.add(this.element, Browser.touchMoveEvent, this.moveEvent, this);\n                EventHandler.add(this.element, Browser.touchEndEvent, this.endEvent, this);\n                EventHandler.add(this.element, Browser.touchCancelEvent, this.cancelEvent, this);\n            }\n        };\n        this.moveEvent = (evt) => {\n            let point = this.updateChangeTouches(evt);\n            this.movedPoint = point;\n            this.isTouchMoved = !(point.clientX === this.startPoint.clientX && point.clientY === this.startPoint.clientY);\n            let eScrollArgs = {};\n            if (this.isTouchMoved) {\n                clearTimeout(this.timeOutTapHold);\n                this.calcScrollPoints(evt);\n                let scrollArg = {\n                    startEvents: this.startEventData,\n                    originalEvent: evt, startX: this.startPoint.clientX,\n                    startY: this.startPoint.clientY, distanceX: this.distanceX,\n                    distanceY: this.distanceY, scrollDirection: this.scrollDirection,\n                    velocity: this.getVelocity(point)\n                };\n                eScrollArgs = extend(eScrollArgs, {}, scrollArg);\n                this.trigger('scroll', eScrollArgs);\n                this.lastMovedPoint = { clientX: point.clientX, clientY: point.clientY };\n            }\n        };\n        this.cancelEvent = (evt) => {\n            clearTimeout(this.timeOutTapHold);\n            clearTimeout(this.timeOutTap);\n            this.tapCount = 0;\n            this.swipeFn(evt);\n            EventHandler.remove(this.element, Browser.touchCancelEvent, this.cancelEvent);\n        };\n        this.endEvent = (evt) => {\n            this.swipeFn(evt);\n            if (!this.isTouchMoved) {\n                if (typeof this.tap === 'function') {\n                    this.trigger('tap', { originalEvent: evt, tapCount: ++this.tapCount });\n                    this.timeOutTap = setTimeout(() => {\n                        this.tapCount = 0;\n                    }, this.tapThreshold);\n                }\n            }\n            this.modeclear();\n        };\n        this.swipeFn = (evt) => {\n            clearTimeout(this.timeOutTapHold);\n            clearTimeout(this.timeOutTap);\n            let point = this.updateChangeTouches(evt);\n            let diffX = point.clientX - this.startPoint.clientX;\n            let diffY = point.clientY - this.startPoint.clientY;\n            diffX = Math.floor(diffX < 0 ? -1 * diffX : diffX);\n            diffY = Math.floor(diffY < 0 ? -1 * diffY : diffX);\n            this.isTouchMoved = diffX > 1 || diffY > 1;\n            this.endPoint = point;\n            this.calcPoints(evt);\n            let swipeArgs = {\n                originalEvent: evt,\n                startEvents: this.startEventData,\n                startX: this.startPoint.clientX,\n                startY: this.startPoint.clientY,\n                distanceX: this.distanceX, distanceY: this.distanceY, swipeDirection: this.movedDirection,\n                velocity: this.getVelocity(point)\n            };\n            if (this.isTouchMoved) {\n                let eSwipeArgs;\n                let tDistance = this.swipeSettings.swipeThresholdDistance;\n                eSwipeArgs = extend(eSwipeArgs, this.defaultArgs, swipeArgs);\n                let canTrigger = false;\n                let ele = this.element;\n                let scrollBool = this.isScrollable(ele);\n                let moved = swipeRegex.test(this.movedDirection);\n                if ((tDistance < this.distanceX && !moved) || (tDistance < this.distanceY && moved)) {\n                    if (!scrollBool) {\n                        canTrigger = true;\n                    }\n                    else {\n                        canTrigger = this.checkSwipe(ele, moved);\n                    }\n                }\n                if (canTrigger) {\n                    this.trigger('swipe', eSwipeArgs);\n                }\n            }\n            this.modeclear();\n        };\n        this.modeclear = () => {\n            this.modeClear = setTimeout(() => {\n                this.touchAction = true;\n            }, (typeof this.tap !== 'function' ? 0 : 20));\n            this.lastTapTime = new Date().getTime();\n            EventHandler.remove(this.element, Browser.touchMoveEvent, this.moveEvent);\n            EventHandler.remove(this.element, Browser.touchEndEvent, this.endEvent);\n            EventHandler.remove(this.element, Browser.touchCancelEvent, this.cancelEvent);\n        };\n        this.bind();\n    }\n    // triggers when property changed \n    /**\n     * @private\n     * @param newProp\n     * @param oldProp\n     */\n    onPropertyChanged(newProp, oldProp) {\n        //No Code to handle\n    }\n    bind() {\n        this.wireEvents();\n        if (Browser.isIE) {\n            this.element.classList.add('e-block-touch');\n        }\n    }\n    /**\n     * To destroy the touch instance.\n     * @return {void}\n     */\n    destroy() {\n        this.unwireEvents();\n        super.destroy();\n    }\n    // Need to changes the event binding once we updated the event handler.\n    wireEvents() {\n        EventHandler.add(this.element, Browser.touchStartEvent, this.startEvent, this);\n    }\n    unwireEvents() {\n        EventHandler.remove(this.element, Browser.touchStartEvent, this.startEvent);\n    }\n    /**\n     * Returns module name as touch\n     * @returns {string}\n     * @private\n     */\n    getModuleName() {\n        return 'touch';\n    }\n    /**\n     * Returns if the HTML element is Scrollable.\n     * @param {HTMLElement} element - HTML Element to check if Scrollable.\n     * @returns {boolean}\n     */\n    isScrollable(element) {\n        let eleStyle = getComputedStyle(element);\n        let style = eleStyle.overflow + eleStyle.overflowX + eleStyle.overflowY;\n        if ((/(auto|scroll)/).test(style)) {\n            return true;\n        }\n        return false;\n    }\n    tapHoldEvent(evt) {\n        this.tapCount = 0;\n        this.touchAction = true;\n        let eTapArgs;\n        EventHandler.remove(this.element, Browser.touchMoveEvent, this.moveEvent);\n        EventHandler.remove(this.element, Browser.touchEndEvent, this.endEvent);\n        eTapArgs = { originalEvent: evt };\n        this.trigger('tapHold', eTapArgs);\n        EventHandler.remove(this.element, Browser.touchCancelEvent, this.cancelEvent);\n    }\n    calcPoints(evt) {\n        let point = this.updateChangeTouches(evt);\n        this.defaultArgs = { originalEvent: evt };\n        this.distanceX = Math.abs((Math.abs(point.clientX) - Math.abs(this.startPoint.clientX)));\n        this.distanceY = Math.abs((Math.abs(point.clientY) - Math.abs(this.startPoint.clientY)));\n        if (this.distanceX > this.distanceY) {\n            this.movedDirection = (point.clientX > this.startPoint.clientX) ? 'Right' : 'Left';\n        }\n        else {\n            this.movedDirection = (point.clientY < this.startPoint.clientY) ? 'Up' : 'Down';\n        }\n    }\n    calcScrollPoints(evt) {\n        let point = this.updateChangeTouches(evt);\n        this.defaultArgs = { originalEvent: evt };\n        this.distanceX = Math.abs((Math.abs(point.clientX) - Math.abs(this.lastMovedPoint.clientX)));\n        this.distanceY = Math.abs((Math.abs(point.clientY) - Math.abs(this.lastMovedPoint.clientY)));\n        if ((this.distanceX > this.distanceY || this.hScrollLocked === true) && this.vScrollLocked === false) {\n            this.scrollDirection = (point.clientX > this.lastMovedPoint.clientX) ? 'Right' : 'Left';\n            this.hScrollLocked = true;\n        }\n        else {\n            this.scrollDirection = (point.clientY < this.lastMovedPoint.clientY) ? 'Up' : 'Down';\n            this.vScrollLocked = true;\n        }\n    }\n    getVelocity(pnt) {\n        let newX = pnt.clientX;\n        let newY = pnt.clientY;\n        let newT = Date.now();\n        let xDist = newX - this.startPoint.clientX;\n        let yDist = newY - this.startPoint.clientX;\n        let interval = newT - this.tStampStart;\n        return Math.sqrt(xDist * xDist + yDist * yDist) / interval;\n    }\n    // tslint:disable-next-line:no-any\n    checkSwipe(ele, flag) {\n        let keys = ['scroll', 'offset'];\n        let temp = flag ? ['Height', 'Top'] : ['Width', 'Left'];\n        if ((ele[keys[0] + temp[0]] <= ele[keys[1] + temp[0]])) {\n            return true;\n        }\n        return (ele[keys[0] + temp[1]] === 0) ||\n            (ele[keys[1] + temp[0]] + ele[keys[0] + temp[1]] >= ele[keys[0] + temp[0]]);\n    }\n    updateChangeTouches(evt) {\n        // tslint:disable-next-line:max-line-length\n        let point = evt.changedTouches && evt.changedTouches.length !== 0 ? evt.changedTouches[0] : evt;\n        return point;\n    }\n};\n__decorate$5([\n    Event$1()\n], Touch.prototype, \"tap\", void 0);\n__decorate$5([\n    Event$1()\n], Touch.prototype, \"tapHold\", void 0);\n__decorate$5([\n    Event$1()\n], Touch.prototype, \"swipe\", void 0);\n__decorate$5([\n    Event$1()\n], Touch.prototype, \"scroll\", void 0);\n__decorate$5([\n    Property(350)\n], Touch.prototype, \"tapThreshold\", void 0);\n__decorate$5([\n    Property(750)\n], Touch.prototype, \"tapHoldThreshold\", void 0);\n__decorate$5([\n    Complex({}, SwipeSettings)\n], Touch.prototype, \"swipeSettings\", void 0);\nTouch = __decorate$5([\n    NotifyPropertyChanges\n], Touch);\n\n/**\n * SanitizeHtmlHelper for sanitize the value.\n */\nconst removeTags = [\n    'script',\n    'style',\n    'iframe[src]',\n    'link[href*=\"javascript:\"]',\n    'object[type=\"text/x-scriptlet\"]',\n    'object[data^=\"data:text/html;base64\"]',\n    'img[src^=\"data:text/html;base64\"]',\n    '[src^=\"javascript:\"]',\n    '[dynsrc^=\"javascript:\"]',\n    '[lowsrc^=\"javascript:\"]',\n    '[type^=\"application/x-shockwave-flash\"]'\n];\nconst removeAttrs = [\n    { attribute: 'href', selector: '[href*=\"javascript:\"]' },\n    { attribute: 'background', selector: '[background^=\"javascript:\"]' },\n    { attribute: 'style', selector: '[style*=\"javascript:\"]' },\n    { attribute: 'style', selector: '[style*=\"expression(\"]' },\n    { attribute: 'href', selector: 'a[href^=\"data:text/html;base64\"]' }\n];\nconst jsEvents = ['onchange',\n    'onclick',\n    'onmouseover',\n    'onmouseout',\n    'onkeydown',\n    'onload',\n    'onerror',\n    'onblur',\n    'onfocus',\n    'onbeforeload',\n    'onbeforeunload',\n    'onkeyup',\n    'onsubmit',\n    'onafterprint',\n    'onbeforeonload',\n    'onbeforeprint',\n    'onblur',\n    'oncanplay',\n    'oncanplaythrough',\n    'onchange',\n    'onclick',\n    'oncontextmenu',\n    'ondblclick',\n    'ondrag',\n    'ondragend',\n    'ondragenter',\n    'ondragleave',\n    'ondragover',\n    'ondragstart',\n    'ondrop',\n    'ondurationchange',\n    'onemptied',\n    'onended',\n    'onerror',\n    'onerror',\n    'onfocus',\n    'onformchange',\n    'onforminput',\n    'onhaschange',\n    'oninput',\n    'oninvalid',\n    'onkeydown',\n    'onkeypress',\n    'onkeyup',\n    'onload',\n    'onloadeddata',\n    'onloadedmetadata',\n    'onloadstart',\n    'onmessage',\n    'onmousedown',\n    'onmousemove',\n    'onmouseout',\n    'onmouseover',\n    'onmouseup',\n    'onmousewheel',\n    'onoffline',\n    'onoine',\n    'ononline',\n    'onpagehide',\n    'onpageshow',\n    'onpause',\n    'onplay',\n    'onplaying',\n    'onpopstate',\n    'onprogress',\n    'onratechange',\n    'onreadystatechange',\n    'onredo',\n    'onresize',\n    'onscroll',\n    'onseeked',\n    'onseeking',\n    'onselect',\n    'onstalled',\n    'onstorage',\n    'onsubmit',\n    'onsuspend',\n    'ontimeupdate',\n    'onundo',\n    'onunload',\n    'onvolumechange',\n    'onwaiting',\n    'onmouseenter',\n    'onmouseleave',\n    'onmousewheel',\n    'onstart',\n    'onpropertychange'\n];\nclass SanitizeHtmlHelper {\n    static beforeSanitize() {\n        return {\n            selectors: {\n                tags: removeTags,\n                attributes: removeAttrs\n            }\n        };\n    }\n    ;\n    static sanitize(value) {\n        let item = this.beforeSanitize();\n        let output = this.serializeValue(item, value);\n        return output;\n    }\n    static serializeValue(item, value) {\n        this.removeAttrs = item.selectors.attributes;\n        this.removeTags = item.selectors.tags;\n        this.wrapElement = document.createElement('div');\n        this.wrapElement.innerHTML = value;\n        this.removeXssTags();\n        this.removeJsEvents();\n        this.removeXssAttrs();\n        let tempEleValue = this.wrapElement.innerHTML;\n        this.removeElement();\n        return tempEleValue;\n    }\n    static removeElement() {\n        // Removes an element's attibute to avoid html tag validation\n        let nodes = this.wrapElement.children;\n        for (let j = 0; j < nodes.length; j++) {\n            let attribute = nodes[j].attributes;\n            for (let i = 0; i < attribute.length; i++) {\n                this.wrapElement.children[j].removeAttribute(attribute[i].localName);\n            }\n        }\n    }\n    static removeXssTags() {\n        let elements = this.wrapElement.querySelectorAll(this.removeTags.join(','));\n        if (elements.length > 0) {\n            elements.forEach((element) => {\n                detach(element);\n            });\n        }\n        else {\n            return;\n        }\n    }\n    static removeJsEvents() {\n        let elements = this.wrapElement.querySelectorAll('[' + jsEvents.join('],[') + ']');\n        if (elements.length > 0) {\n            elements.forEach((element) => {\n                jsEvents.forEach((attr) => {\n                    if (element.hasAttribute(attr)) {\n                        element.removeAttribute(attr);\n                    }\n                });\n            });\n        }\n        else {\n            return;\n        }\n    }\n    static removeXssAttrs() {\n        this.removeAttrs.forEach((item, index) => {\n            let elements = this.wrapElement.querySelectorAll(item.selector);\n            if (elements.length > 0) {\n                elements.forEach((element) => {\n                    element.removeAttribute(item.attribute);\n                });\n            }\n        });\n    }\n}\n\n/**\n * Base modules\n */\n\nexport { blazorCultureFormats, IntlBase, Ajax, Animation, rippleEffect, isRippleEnabled, enableRipple, Base, getComponent, removeChildInstance, Browser, Component, ChildProperty, Position, Draggable, Droppable, EventHandler, onIntlChange, rightToLeft, cldrData, defaultCulture, defaultCurrencyCode, Internationalization, setCulture, setCurrencyCode, loadCldr, enableRtl, getNumericObject, getNumberDependable, getDefaultDateObject, KeyboardEvents, L10n, ModuleLoader, Property, Complex, ComplexFactory, Collection, CollectionFactory, Event$1 as Event, NotifyPropertyChanges, CreateBuilder, SwipeSettings, Touch, HijriParser, blazorTemplates, getRandomId, compile$$1 as compile, updateBlazorTemplate, resetBlazorTemplate, setTemplateEngine, getTemplateEngine, disableBlazorMode, createInstance, setImmediate, getValue, setValue, deleteObject, isObject, getEnumValue, merge, extend, isNullOrUndefined, isUndefined, getUniqueID, debounce, queryParams, isObjectArray, compareElementParent, throwError, print, formatUnit, enableBlazorMode, isBlazor, getElement, getInstance, addInstance, uniqueID, createElement, addClass, removeClass, isVisible, prepend, append, detach, remove, attributes, select, selectAll, closest, siblings, getAttributeOrDefault, setStyleAttribute, classList, matches, includeInnerHTML, containsClass, cloneNode, Observer, SanitizeHtmlHelper };\n//# sourceMappingURL=ej2-base.es2015.js.map\n","import { Component, Event, EventHandler, NotifyPropertyChanges, Observer, Property, SanitizeHtmlHelper, addClass, append, attributes, closest, deleteObject, detach, getElement, getInstance, getUniqueID, getValue, isBlazor, isNullOrUndefined, isRippleEnabled, removeClass, rippleEffect, setValue } from '@syncfusion/ej2-base';\n\n/**\n * Initialize wrapper element for angular.\n * @private\n */\nfunction wrapperInitialize(createElement, tag, type, element, WRAPPER, role) {\n    let input = element;\n    if (element.tagName === tag) {\n        let ejInstance = getValue('ej2_instances', element);\n        input = createElement('input', { attrs: { 'type': type } });\n        let props = ['change', 'cssClass', 'label', 'labelPosition', 'id'];\n        for (let index = 0, len = element.attributes.length; index < len; index++) {\n            if (props.indexOf(element.attributes[index].nodeName) === -1) {\n                input.setAttribute(element.attributes[index].nodeName, element.attributes[index].nodeValue);\n            }\n        }\n        attributes(element, { 'class': WRAPPER, 'role': role, 'aria-checked': 'false' });\n        element.appendChild(input);\n        setValue('ej2_instances', ejInstance, input);\n        deleteObject(element, 'ej2_instances');\n    }\n    return input;\n}\nfunction getTextNode(element) {\n    let node;\n    let childnode = element.childNodes;\n    for (let i = 0; i < childnode.length; i++) {\n        node = childnode[i];\n        if (node.nodeType === 3) {\n            return node;\n        }\n    }\n    return null;\n}\n/**\n * Destroy the button components.\n * @private\n */\nfunction destroy(ejInst, wrapper, tagName) {\n    if (tagName === 'INPUT') {\n        wrapper.parentNode.insertBefore(ejInst.element, wrapper);\n        detach(wrapper);\n        ejInst.element.checked = false;\n        ['name', 'value', 'disabled'].forEach((key) => {\n            ejInst.element.removeAttribute(key);\n        });\n    }\n    else {\n        ['role', 'aria-checked', 'class'].forEach((key) => {\n            wrapper.removeAttribute(key);\n        });\n        wrapper.innerHTML = '';\n    }\n}\nfunction preRender(proxy, control, wrapper, element, moduleName) {\n    element = wrapperInitialize(proxy.createElement, control, 'checkbox', element, wrapper, moduleName);\n    proxy.element = element;\n    if (proxy.element.getAttribute('type') !== 'checkbox') {\n        proxy.element.setAttribute('type', 'checkbox');\n    }\n    if (!proxy.element.id) {\n        proxy.element.id = getUniqueID('e-' + moduleName);\n    }\n}\n/**\n * Creates CheckBox component UI with theming and ripple support.\n * @private\n */\nfunction createCheckBox(createElement, enableRipple = false, options = {}) {\n    let wrapper = createElement('div', { className: 'e-checkbox-wrapper e-css' });\n    if (options.cssClass) {\n        addClass([wrapper], options.cssClass.split(' '));\n    }\n    if (options.enableRtl) {\n        wrapper.classList.add('e-rtl');\n    }\n    if (enableRipple) {\n        let rippleSpan = createElement('span', { className: 'e-ripple-container' });\n        rippleEffect(rippleSpan, { isCenterRipple: true, duration: 400 });\n        wrapper.appendChild(rippleSpan);\n    }\n    let frameSpan = createElement('span', { className: 'e-frame e-icons' });\n    if (options.checked) {\n        frameSpan.classList.add('e-check');\n    }\n    wrapper.appendChild(frameSpan);\n    if (options.label) {\n        let labelSpan = createElement('span', { className: 'e-label', innerHTML: options.label });\n        wrapper.appendChild(labelSpan);\n    }\n    return wrapper;\n}\nfunction rippleMouseHandler(e, rippleSpan) {\n    if (rippleSpan) {\n        let event = document.createEvent('MouseEvents');\n        event.initEvent(e.type, false, true);\n        rippleSpan.dispatchEvent(event);\n    }\n}\n/**\n * Append hidden input to given element\n * @private\n */\nfunction setHiddenInput(proxy, wrap) {\n    if (proxy.element.getAttribute('ejs-for')) {\n        wrap.appendChild(proxy.createElement('input', {\n            attrs: { 'name': proxy.name || proxy.element.name, 'value': 'false', 'type': 'hidden' }\n        }));\n    }\n}\n\n/**\n * Common modules\n */\n\nvar __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nconst buttonObserver = new Observer();\nconst cssClassName = {\n    RTL: 'e-rtl',\n    BUTTON: 'e-btn',\n    PRIMARY: 'e-primary',\n    ICONBTN: 'e-icon-btn'\n};\n/**\n * The Button is a graphical user interface element that triggers an event on its click action. It can contain a text, an image, or both.\n * ```html\n * <button id=\"button\">Button</button>\n * ```\n * ```typescript\n * <script>\n * var btnObj = new Button();\n * btnObj.appendTo(\"#button\");\n * </script>\n * ```\n */\nlet Button = class Button extends Component {\n    /**\n     * Constructor for creating the widget\n     * @param  {ButtonModel} options?\n     * @param  {string|HTMLButtonElement} element?\n     */\n    constructor(options, element) {\n        super(options, element);\n    }\n    preRender() {\n        // pre render code snippets\n    }\n    /**\n     * Initialize the control rendering\n     * @returns void\n     * @private\n     */\n    render() {\n        this.initialize();\n        this.removeRippleEffect = rippleEffect(this.element, { selector: '.' + cssClassName.BUTTON });\n        this.renderComplete();\n    }\n    initialize() {\n        if (this.cssClass) {\n            addClass([this.element], this.cssClass.split(' '));\n        }\n        if (this.isPrimary) {\n            this.element.classList.add(cssClassName.PRIMARY);\n        }\n        if (!isBlazor() || (isBlazor() && this.getModuleName() !== 'progress-btn')) {\n            if (this.content) {\n                let tempContent = (this.enableHtmlSanitizer) ? SanitizeHtmlHelper.sanitize(this.content) : this.content;\n                this.element.innerHTML = tempContent;\n            }\n            this.setIconCss();\n        }\n        if (this.enableRtl) {\n            this.element.classList.add(cssClassName.RTL);\n        }\n        if (this.disabled) {\n            this.controlStatus(this.disabled);\n        }\n        else {\n            this.wireEvents();\n        }\n    }\n    controlStatus(disabled) {\n        this.element.disabled = disabled;\n    }\n    setIconCss() {\n        if (this.iconCss) {\n            let span = this.createElement('span', { className: 'e-btn-icon ' + this.iconCss });\n            if (!this.element.textContent.trim()) {\n                this.element.classList.add(cssClassName.ICONBTN);\n            }\n            else {\n                span.classList.add('e-icon-' + this.iconPosition.toLowerCase());\n                if (this.iconPosition === 'Top' || this.iconPosition === 'Bottom') {\n                    this.element.classList.add('e-' + this.iconPosition.toLowerCase() + '-icon-btn');\n                }\n            }\n            let node = this.element.childNodes[0];\n            if (node && (this.iconPosition === 'Left' || this.iconPosition === 'Top')) {\n                this.element.insertBefore(span, node);\n            }\n            else {\n                this.element.appendChild(span);\n            }\n        }\n    }\n    wireEvents() {\n        if (this.isToggle) {\n            EventHandler.add(this.element, 'click', this.btnClickHandler, this);\n        }\n    }\n    unWireEvents() {\n        if (this.isToggle) {\n            EventHandler.remove(this.element, 'click', this.btnClickHandler);\n        }\n    }\n    btnClickHandler() {\n        if (this.element.classList.contains('e-active')) {\n            this.element.classList.remove('e-active');\n        }\n        else {\n            this.element.classList.add('e-active');\n        }\n    }\n    /**\n     * Destroys the widget.\n     * @returns void\n     */\n    destroy() {\n        let span;\n        let classList = [cssClassName.PRIMARY, cssClassName.RTL, cssClassName.ICONBTN, 'e-success', 'e-info', 'e-danger',\n            'e-warning', 'e-flat', 'e-outline', 'e-small', 'e-bigger', 'e-active', 'e-round',\n            'e-top-icon-btn', 'e-bottom-icon-btn'];\n        if (this.cssClass) {\n            classList = classList.concat(this.cssClass.split(' '));\n        }\n        super.destroy();\n        removeClass([this.element], classList);\n        if (!this.element.getAttribute('class')) {\n            this.element.removeAttribute('class');\n        }\n        if (this.disabled) {\n            this.element.removeAttribute('disabled');\n        }\n        if (this.content) {\n            this.element.innerHTML = this.element.innerHTML.replace(this.content, '');\n        }\n        span = this.element.querySelector('span.e-btn-icon');\n        if (span) {\n            detach(span);\n        }\n        this.unWireEvents();\n        if (isRippleEnabled) {\n            this.removeRippleEffect();\n        }\n    }\n    /**\n     * Get component name.\n     * @returns string\n     * @private\n     */\n    getModuleName() {\n        return 'btn';\n    }\n    /**\n     * Get the properties to be maintained in the persisted state.\n     * @returns string\n     * @private\n     */\n    getPersistData() {\n        return this.addOnPersist([]);\n    }\n    /**\n     * Dynamically injects the required modules to the component.\n     * @private\n     */\n    static Inject() {\n        // Inject code snippets\n    }\n    /**\n     * Called internally if any of the property value changed.\n     * @param  {ButtonModel} newProp\n     * @param  {ButtonModel} oldProp\n     * @returns void\n     * @private\n     */\n    onPropertyChanged(newProp, oldProp) {\n        for (let prop of Object.keys(newProp)) {\n            switch (prop) {\n                case 'isPrimary':\n                    if (newProp.isPrimary) {\n                        this.element.classList.add(cssClassName.PRIMARY);\n                    }\n                    else {\n                        this.element.classList.remove(cssClassName.PRIMARY);\n                    }\n                    break;\n                case 'disabled':\n                    this.controlStatus(newProp.disabled);\n                    break;\n                case 'iconCss':\n                    let span = this.element.querySelector('span.e-btn-icon');\n                    if (span) {\n                        if (newProp.iconCss) {\n                            span.className = 'e-btn-icon ' + newProp.iconCss;\n                            if (this.element.textContent.trim()) {\n                                if (this.iconPosition === 'Left') {\n                                    span.classList.add('e-icon-left');\n                                }\n                                else {\n                                    span.classList.add('e-icon-right');\n                                }\n                            }\n                        }\n                        else {\n                            detach(span);\n                        }\n                    }\n                    else {\n                        this.setIconCss();\n                    }\n                    break;\n                case 'iconPosition':\n                    removeClass([this.element], ['e-top-icon-btn', 'e-bottom-icon-btn']);\n                    span = this.element.querySelector('span.e-btn-icon');\n                    if (span) {\n                        detach(span);\n                    }\n                    this.setIconCss();\n                    break;\n                case 'cssClass':\n                    if (oldProp.cssClass) {\n                        removeClass([this.element], oldProp.cssClass.split(' '));\n                    }\n                    if (newProp.cssClass) {\n                        addClass([this.element], newProp.cssClass.split(' '));\n                    }\n                    break;\n                case 'enableRtl':\n                    if (newProp.enableRtl) {\n                        this.element.classList.add(cssClassName.RTL);\n                    }\n                    else {\n                        this.element.classList.remove(cssClassName.RTL);\n                    }\n                    break;\n                case 'content':\n                    let node = getTextNode(this.element);\n                    if (!node) {\n                        this.element.classList.remove(cssClassName.ICONBTN);\n                    }\n                    if (!isBlazor() || (isBlazor() && !this.isServerRendered && this.getModuleName() !== 'progress-btn')) {\n                        if (this.enableHtmlSanitizer) {\n                            newProp.content = SanitizeHtmlHelper.sanitize(newProp.content);\n                        }\n                        this.element.innerHTML = newProp.content;\n                        this.setIconCss();\n                    }\n                    break;\n                case 'isToggle':\n                    if (newProp.isToggle) {\n                        EventHandler.add(this.element, 'click', this.btnClickHandler, this);\n                    }\n                    else {\n                        EventHandler.remove(this.element, 'click', this.btnClickHandler);\n                        removeClass([this.element], ['e-active']);\n                    }\n                    break;\n            }\n        }\n    }\n    /**\n     * Click the button element\n     * its native method\n     * @public\n     */\n    click() {\n        this.element.click();\n    }\n    /**\n     * Sets the focus to Button\n     * its native method\n     * @public\n     */\n    focusIn() {\n        this.element.focus();\n    }\n};\n__decorate([\n    Property('Left')\n], Button.prototype, \"iconPosition\", void 0);\n__decorate([\n    Property('')\n], Button.prototype, \"iconCss\", void 0);\n__decorate([\n    Property(false)\n], Button.prototype, \"disabled\", void 0);\n__decorate([\n    Property(false)\n], Button.prototype, \"isPrimary\", void 0);\n__decorate([\n    Property('')\n], Button.prototype, \"cssClass\", void 0);\n__decorate([\n    Property('')\n], Button.prototype, \"content\", void 0);\n__decorate([\n    Property(false)\n], Button.prototype, \"isToggle\", void 0);\n__decorate([\n    Property()\n], Button.prototype, \"locale\", void 0);\n__decorate([\n    Property(false)\n], Button.prototype, \"enableHtmlSanitizer\", void 0);\n__decorate([\n    Event()\n], Button.prototype, \"created\", void 0);\nButton = __decorate([\n    NotifyPropertyChanges\n], Button);\n\n/**\n * Button modules\n */\n\nvar __decorate$1 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nconst CHECK = 'e-check';\nconst DISABLED = 'e-checkbox-disabled';\nconst FRAME = 'e-frame';\nconst INDETERMINATE = 'e-stop';\nconst LABEL = 'e-label';\nconst RIPPLE = 'e-ripple-container';\nconst RIPPLECHECK = 'e-ripple-check';\nconst RIPPLEINDETERMINATE = 'e-ripple-stop';\nconst RTL = 'e-rtl';\nconst WRAPPER = 'e-checkbox-wrapper';\nconst containerAttr = ['title', 'class', 'style', 'disabled', 'readonly', 'name', 'value'];\n/**\n * The CheckBox is a graphical user interface element that allows you to select one or more options from the choices.\n * It contains checked, unchecked, and indeterminate states.\n * ```html\n * <input type=\"checkbox\" id=\"checkbox\"/>\n * <script>\n * var checkboxObj = new CheckBox({ label: \"Default\" });\n * checkboxObj.appendTo(\"#checkbox\");\n * </script>\n * ```\n */\nlet CheckBox = class CheckBox extends Component {\n    /**\n     * Constructor for creating the widget\n     * @private\n     */\n    constructor(options, element) {\n        super(options, element);\n        this.isFocused = false;\n        this.isMouseClick = false;\n    }\n    changeState(state) {\n        let ariaState;\n        let rippleSpan;\n        let frameSpan = this.getWrapper().getElementsByClassName(FRAME)[0];\n        if (isRippleEnabled) {\n            rippleSpan = this.getWrapper().getElementsByClassName(RIPPLE)[0];\n        }\n        if (state === 'check') {\n            frameSpan.classList.remove(INDETERMINATE);\n            frameSpan.classList.add(CHECK);\n            if (rippleSpan) {\n                rippleSpan.classList.remove(RIPPLEINDETERMINATE);\n                rippleSpan.classList.add(RIPPLECHECK);\n            }\n            ariaState = 'true';\n            this.element.checked = true;\n        }\n        else if (state === 'uncheck') {\n            removeClass([frameSpan], [CHECK, INDETERMINATE]);\n            if (rippleSpan) {\n                removeClass([rippleSpan], [RIPPLECHECK, RIPPLEINDETERMINATE]);\n            }\n            ariaState = 'false';\n            this.element.checked = false;\n        }\n        else {\n            frameSpan.classList.remove(CHECK);\n            frameSpan.classList.add(INDETERMINATE);\n            if (rippleSpan) {\n                rippleSpan.classList.remove(RIPPLECHECK);\n                rippleSpan.classList.add(RIPPLEINDETERMINATE);\n            }\n            ariaState = 'mixed';\n            this.element.indeterminate = true;\n        }\n        this.getWrapper().setAttribute('aria-checked', ariaState);\n    }\n    clickHandler(event) {\n        if (this.isMouseClick) {\n            this.focusOutHandler();\n            this.isMouseClick = false;\n        }\n        if (this.indeterminate) {\n            this.changeState(this.checked ? 'check' : 'uncheck');\n            this.indeterminate = false;\n            this.element.indeterminate = false;\n        }\n        else if (this.checked) {\n            this.changeState('uncheck');\n            this.checked = false;\n        }\n        else {\n            this.changeState('check');\n            this.checked = true;\n        }\n        let changeEventArgs = { checked: this.element.checked, event: event };\n        this.trigger('change', changeEventArgs);\n    }\n    /**\n     * Destroys the widget.\n     * @returns void\n     */\n    destroy() {\n        let wrapper = this.getWrapper();\n        super.destroy();\n        if (this.wrapper) {\n            wrapper = this.wrapper;\n            if (!this.disabled) {\n                this.unWireEvents();\n            }\n            if (this.tagName === 'INPUT') {\n                if (this.getWrapper()) {\n                    wrapper.parentNode.insertBefore(this.element, wrapper);\n                }\n                detach(wrapper);\n                this.element.checked = false;\n                if (this.indeterminate) {\n                    this.element.indeterminate = false;\n                }\n                ['name', 'value', 'disabled'].forEach((key) => {\n                    this.element.removeAttribute(key);\n                });\n            }\n            else {\n                ['role', 'aria-checked', 'class'].forEach((key) => {\n                    wrapper.removeAttribute(key);\n                });\n                wrapper.innerHTML = '';\n            }\n        }\n    }\n    focusHandler() {\n        this.isFocused = true;\n    }\n    focusOutHandler() {\n        this.getWrapper().classList.remove('e-focus');\n        this.isFocused = false;\n    }\n    /**\n     * Gets the module name.\n     * @private\n     */\n    getModuleName() {\n        return 'checkbox';\n    }\n    /**\n     * Gets the properties to be maintained in the persistence state.\n     * @private\n     */\n    getPersistData() {\n        return this.addOnPersist(['checked', 'indeterminate']);\n    }\n    getWrapper() {\n        if (this.element.parentElement) {\n            return this.element.parentElement.parentElement;\n        }\n        else {\n            return null;\n        }\n    }\n    initialize() {\n        if (isNullOrUndefined(this.initialCheckedValue)) {\n            this.initialCheckedValue = this.checked;\n        }\n        if (this.name) {\n            this.element.setAttribute('name', this.name);\n        }\n        if (this.value) {\n            this.element.setAttribute('value', this.value);\n        }\n        if (this.checked) {\n            this.changeState('check');\n        }\n        if (this.indeterminate) {\n            this.changeState();\n        }\n        if (this.disabled) {\n            this.setDisabled();\n        }\n    }\n    initWrapper() {\n        let wrapper = this.element.parentElement;\n        if (!wrapper.classList.contains(WRAPPER)) {\n            wrapper = this.createElement('div', {\n                className: WRAPPER, attrs: { 'role': 'checkbox', 'aria-checked': 'false' }\n            });\n            this.element.parentNode.insertBefore(wrapper, this.element);\n        }\n        let label = this.createElement('label', { attrs: { for: this.element.id } });\n        let frameSpan = this.createElement('span', { className: 'e-icons ' + FRAME });\n        wrapper.classList.add('e-wrapper');\n        if (this.enableRtl) {\n            wrapper.classList.add(RTL);\n        }\n        if (this.cssClass) {\n            addClass([wrapper], this.cssClass.split(' '));\n        }\n        wrapper.appendChild(label);\n        label.appendChild(this.element);\n        setHiddenInput(this, label);\n        label.appendChild(frameSpan);\n        if (isRippleEnabled) {\n            let rippleSpan = this.createElement('span', { className: RIPPLE });\n            if (this.labelPosition === 'Before') {\n                label.appendChild(rippleSpan);\n            }\n            else {\n                label.insertBefore(rippleSpan, frameSpan);\n            }\n            rippleEffect(rippleSpan, { duration: 400, isCenterRipple: true });\n        }\n        if (this.label) {\n            this.setText(this.label);\n        }\n    }\n    keyUpHandler() {\n        if (this.isFocused) {\n            this.getWrapper().classList.add('e-focus');\n        }\n    }\n    labelMouseHandler(e) {\n        this.isMouseClick = true;\n        let rippleSpan = this.getWrapper().getElementsByClassName(RIPPLE)[0];\n        rippleMouseHandler(e, rippleSpan);\n    }\n    /**\n     * Called internally if any of the property value changes.\n     * @private\n     */\n    onPropertyChanged(newProp, oldProp) {\n        let wrapper = this.getWrapper();\n        for (let prop of Object.keys(newProp)) {\n            switch (prop) {\n                case 'checked':\n                    this.indeterminate = false;\n                    this.element.indeterminate = false;\n                    this.changeState(newProp.checked ? 'check' : 'uncheck');\n                    break;\n                case 'indeterminate':\n                    if (newProp.indeterminate) {\n                        this.changeState();\n                    }\n                    else {\n                        this.element.indeterminate = false;\n                        this.changeState(this.checked ? 'check' : 'uncheck');\n                    }\n                    break;\n                case 'disabled':\n                    if (newProp.disabled) {\n                        this.setDisabled();\n                        this.wrapper = this.getWrapper();\n                        this.unWireEvents();\n                    }\n                    else {\n                        this.element.disabled = false;\n                        wrapper.classList.remove(DISABLED);\n                        wrapper.setAttribute('aria-disabled', 'false');\n                        this.wireEvents();\n                    }\n                    break;\n                case 'cssClass':\n                    if (oldProp.cssClass) {\n                        removeClass([wrapper], oldProp.cssClass.split(' '));\n                    }\n                    if (newProp.cssClass) {\n                        addClass([wrapper], newProp.cssClass.split(' '));\n                    }\n                    break;\n                case 'enableRtl':\n                    if (newProp.enableRtl) {\n                        wrapper.classList.add(RTL);\n                    }\n                    else {\n                        wrapper.classList.remove(RTL);\n                    }\n                    break;\n                case 'label':\n                    this.setText(newProp.label);\n                    break;\n                case 'labelPosition':\n                    let label = wrapper.getElementsByClassName(LABEL)[0];\n                    let labelWrap = wrapper.getElementsByTagName('label')[0];\n                    detach(label);\n                    if (newProp.labelPosition === 'After') {\n                        labelWrap.appendChild(label);\n                    }\n                    else {\n                        labelWrap.insertBefore(label, wrapper.getElementsByClassName(FRAME)[0]);\n                    }\n                    break;\n                case 'name':\n                    this.element.setAttribute('name', newProp.name);\n                    break;\n                case 'value':\n                    this.element.setAttribute('value', newProp.value);\n                    break;\n                case 'htmlAttributes':\n                    this.updateHtmlAttributeToWrapper();\n                    break;\n            }\n        }\n    }\n    /**\n     * Initialize Angular, React and Unique ID support.\n     * @private\n     */\n    preRender() {\n        let element = this.element;\n        this.formElement = closest(this.element, 'form');\n        this.tagName = this.element.tagName;\n        element = wrapperInitialize(this.createElement, 'EJS-CHECKBOX', 'checkbox', element, WRAPPER, 'checkbox');\n        this.element = element;\n        if (this.element.getAttribute('type') !== 'checkbox') {\n            this.element.setAttribute('type', 'checkbox');\n        }\n        if (!this.element.id) {\n            this.element.id = getUniqueID('e-' + this.getModuleName());\n        }\n    }\n    /**\n     * Initialize the control rendering.\n     * @private\n     */\n    render() {\n        this.initWrapper();\n        this.initialize();\n        if (!this.disabled) {\n            this.wireEvents();\n        }\n        this.updateHtmlAttributeToWrapper();\n        this.renderComplete();\n        this.wrapper = this.getWrapper();\n    }\n    setDisabled() {\n        let wrapper = this.getWrapper();\n        this.element.disabled = true;\n        wrapper.classList.add(DISABLED);\n        wrapper.setAttribute('aria-disabled', 'true');\n    }\n    setText(text) {\n        let label = this.getWrapper().getElementsByClassName(LABEL)[0];\n        if (label) {\n            label.textContent = text;\n        }\n        else {\n            text = (this.enableHtmlSanitizer) ? SanitizeHtmlHelper.sanitize(text) : text;\n            label = this.createElement('span', { className: LABEL, innerHTML: text });\n            let labelWrap = this.getWrapper().getElementsByTagName('label')[0];\n            if (this.labelPosition === 'Before') {\n                labelWrap.insertBefore(label, this.getWrapper().getElementsByClassName(FRAME)[0]);\n            }\n            else {\n                labelWrap.appendChild(label);\n            }\n        }\n    }\n    changeHandler(e) {\n        e.stopPropagation();\n    }\n    formResetHandler() {\n        this.checked = this.initialCheckedValue;\n        this.element.checked = this.initialCheckedValue;\n    }\n    unWireEvents() {\n        let wrapper = this.wrapper;\n        EventHandler.remove(this.element, 'click', this.clickHandler);\n        EventHandler.remove(this.element, 'keyup', this.keyUpHandler);\n        EventHandler.remove(this.element, 'focus', this.focusHandler);\n        EventHandler.remove(this.element, 'focusout', this.focusOutHandler);\n        let label = wrapper.getElementsByTagName('label')[0];\n        EventHandler.remove(label, 'mousedown', this.labelMouseHandler);\n        EventHandler.remove(label, 'mouseup', this.labelMouseHandler);\n        if (this.formElement) {\n            EventHandler.remove(this.formElement, 'reset', this.formResetHandler);\n        }\n        if (this.tagName === 'EJS-CHECKBOX') {\n            EventHandler.remove(this.element, 'change', this.changeHandler);\n        }\n    }\n    wireEvents() {\n        let wrapper = this.getWrapper();\n        EventHandler.add(this.element, 'click', this.clickHandler, this);\n        EventHandler.add(this.element, 'keyup', this.keyUpHandler, this);\n        EventHandler.add(this.element, 'focus', this.focusHandler, this);\n        EventHandler.add(this.element, 'focusout', this.focusOutHandler, this);\n        let label = wrapper.getElementsByTagName('label')[0];\n        EventHandler.add(label, 'mousedown', this.labelMouseHandler, this);\n        EventHandler.add(label, 'mouseup', this.labelMouseHandler, this);\n        if (this.formElement) {\n            EventHandler.add(this.formElement, 'reset', this.formResetHandler, this);\n        }\n        if (this.tagName === 'EJS-CHECKBOX') {\n            EventHandler.add(this.element, 'change', this.changeHandler, this);\n        }\n    }\n    updateHtmlAttributeToWrapper() {\n        if (!isNullOrUndefined(this.htmlAttributes)) {\n            for (let key of Object.keys(this.htmlAttributes)) {\n                if (containerAttr.indexOf(key) > -1) {\n                    let wrapper = this.getWrapper();\n                    if (key === 'class') {\n                        addClass([wrapper], this.htmlAttributes[key].split(' '));\n                    }\n                    else if (key === 'title') {\n                        wrapper.setAttribute(key, this.htmlAttributes[key]);\n                    }\n                    else if (key === 'style') {\n                        let frameSpan = this.getWrapper().getElementsByClassName(FRAME)[0];\n                        frameSpan.setAttribute(key, this.htmlAttributes[key]);\n                    }\n                    else {\n                        this.element.setAttribute(key, this.htmlAttributes[key]);\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * Click the CheckBox element\n     * its native method\n     * @public\n     */\n    click() {\n        this.element.click();\n    }\n    /**\n     * Sets the focus to CheckBox\n     * its native method\n     * @public\n     */\n    focusIn() {\n        this.element.focus();\n    }\n};\n__decorate$1([\n    Event()\n], CheckBox.prototype, \"change\", void 0);\n__decorate$1([\n    Event()\n], CheckBox.prototype, \"created\", void 0);\n__decorate$1([\n    Property(false)\n], CheckBox.prototype, \"checked\", void 0);\n__decorate$1([\n    Property('')\n], CheckBox.prototype, \"cssClass\", void 0);\n__decorate$1([\n    Property(false)\n], CheckBox.prototype, \"disabled\", void 0);\n__decorate$1([\n    Property(false)\n], CheckBox.prototype, \"indeterminate\", void 0);\n__decorate$1([\n    Property('')\n], CheckBox.prototype, \"label\", void 0);\n__decorate$1([\n    Property('After')\n], CheckBox.prototype, \"labelPosition\", void 0);\n__decorate$1([\n    Property('')\n], CheckBox.prototype, \"name\", void 0);\n__decorate$1([\n    Property('')\n], CheckBox.prototype, \"value\", void 0);\n__decorate$1([\n    Property(false)\n], CheckBox.prototype, \"enableHtmlSanitizer\", void 0);\n__decorate$1([\n    Property({})\n], CheckBox.prototype, \"htmlAttributes\", void 0);\nCheckBox = __decorate$1([\n    NotifyPropertyChanges\n], CheckBox);\n\n/**\n * CheckBox modules\n */\n\nvar __decorate$2 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar RadioButton_1;\nconst LABEL$1 = 'e-label';\nconst RIPPLE$1 = 'e-ripple-container';\nconst RTL$1 = 'e-rtl';\nconst WRAPPER$1 = 'e-radio-wrapper';\n/**\n * The RadioButton is a graphical user interface element that allows you to select one option from the choices.\n * It contains checked and unchecked states.\n * ```html\n * <input type=\"radio\" id=\"radio\"/>\n * <script>\n * var radioObj = new RadioButton({ label: \"Default\" });\n * radioObj.appendTo(\"#radio\");\n * </script>\n * ```\n */\nlet RadioButton = RadioButton_1 = class RadioButton extends Component {\n    /**\n     * Constructor for creating the widget\n     * @private\n     */\n    constructor(options, element) {\n        super(options, element);\n        this.isFocused = false;\n    }\n    changeHandler(event) {\n        this.checked = true;\n        this.dataBind();\n        let changeEventArgs = { value: this.value, event: event };\n        this.trigger('change', changeEventArgs);\n        if (this.tagName === 'EJS-RADIOBUTTON') {\n            event.stopPropagation();\n        }\n    }\n    updateChange(state) {\n        let input;\n        let instance;\n        let radioGrp = this.getRadioGroup();\n        for (let i = 0; i < radioGrp.length; i++) {\n            input = radioGrp[i];\n            if (input !== this.element) {\n                instance = getInstance(input, RadioButton_1);\n                instance.checked = false;\n                if (this.tagName === 'EJS-RADIOBUTTON') {\n                    instance.angularValue = this.value;\n                }\n            }\n        }\n    }\n    /**\n     * Destroys the widget.\n     * @returns void\n     */\n    destroy() {\n        let radioWrap = this.element.parentElement;\n        super.destroy();\n        if (!this.disabled) {\n            this.unWireEvents();\n        }\n        if (this.tagName === 'INPUT') {\n            radioWrap.parentNode.insertBefore(this.element, radioWrap);\n            detach(radioWrap);\n            this.element.checked = false;\n            ['name', 'value', 'disabled'].forEach((key) => {\n                this.element.removeAttribute(key);\n            });\n        }\n        else {\n            ['role', 'aria-checked', 'class'].forEach((key) => {\n                radioWrap.removeAttribute(key);\n            });\n            radioWrap.innerHTML = '';\n        }\n    }\n    focusHandler() {\n        this.isFocused = true;\n    }\n    focusOutHandler() {\n        this.getLabel().classList.remove('e-focus');\n    }\n    getModuleName() {\n        return 'radio';\n    }\n    /**\n     * To get the value of selected radio button in a group.\n     * @method getSelectedValue\n     * @return {string}\n     */\n    getSelectedValue() {\n        let input;\n        let radioGrp = this.getRadioGroup();\n        for (let i = 0, len = radioGrp.length; i < len; i++) {\n            input = radioGrp[i];\n            if (input.checked) {\n                return input.value;\n            }\n        }\n        return '';\n    }\n    getRadioGroup() {\n        return document.querySelectorAll('input.e-radio[name=\"' + this.element.getAttribute('name') + '\"]');\n    }\n    /**\n     * Gets the properties to be maintained in the persistence state.\n     * @private\n     */\n    getPersistData() {\n        return this.addOnPersist(['checked']);\n    }\n    getLabel() {\n        return this.element.nextElementSibling;\n    }\n    initialize() {\n        if (isNullOrUndefined(this.initialCheckedValue)) {\n            this.initialCheckedValue = this.checked;\n        }\n        this.initWrapper();\n        if (this.name) {\n            this.element.setAttribute('name', this.name);\n        }\n        if (this.value) {\n            this.element.setAttribute('value', this.value);\n        }\n        if (this.checked) {\n            this.element.checked = true;\n        }\n        if (this.disabled) {\n            this.setDisabled();\n        }\n    }\n    initWrapper() {\n        let rippleSpan;\n        let wrapper = this.element.parentElement;\n        if (!wrapper.classList.contains(WRAPPER$1)) {\n            wrapper = this.createElement('div', { className: WRAPPER$1 });\n            this.element.parentNode.insertBefore(wrapper, this.element);\n        }\n        let label = this.createElement('label', { attrs: { for: this.element.id } });\n        wrapper.appendChild(this.element);\n        wrapper.appendChild(label);\n        if (isRippleEnabled) {\n            rippleSpan = this.createElement('span', { className: (RIPPLE$1) });\n            label.appendChild(rippleSpan);\n            rippleEffect(rippleSpan, {\n                duration: 400,\n                isCenterRipple: true\n            });\n        }\n        wrapper.classList.add('e-wrapper');\n        if (this.enableRtl) {\n            label.classList.add(RTL$1);\n        }\n        if (this.cssClass) {\n            addClass([label], this.cssClass.split(' '));\n        }\n        if (this.label) {\n            this.setText(this.label);\n        }\n    }\n    keyUpHandler() {\n        if (this.isFocused) {\n            this.getLabel().classList.add('e-focus');\n        }\n    }\n    labelRippleHandler(e) {\n        let ripple = this.getLabel().getElementsByClassName(RIPPLE$1)[0];\n        rippleMouseHandler(e, ripple);\n    }\n    formResetHandler() {\n        this.checked = this.initialCheckedValue;\n        if (this.initialCheckedValue) {\n            attributes(this.element, { 'checked': 'true' });\n        }\n    }\n    /**\n     * Called internally if any of the property value changes.\n     * @private\n     */\n    onPropertyChanged(newProp, oldProp) {\n        let label = this.getLabel();\n        for (let prop of Object.keys(newProp)) {\n            switch (prop) {\n                case 'checked':\n                    if (newProp.checked) {\n                        this.updateChange(newProp.checked);\n                    }\n                    this.element.checked = newProp.checked;\n                    break;\n                case 'disabled':\n                    if (newProp.disabled) {\n                        this.setDisabled();\n                        this.unWireEvents();\n                    }\n                    else {\n                        this.element.disabled = false;\n                        this.wireEvents();\n                    }\n                    break;\n                case 'cssClass':\n                    if (oldProp.cssClass) {\n                        removeClass([label], oldProp.cssClass.split(' '));\n                    }\n                    if (newProp.cssClass) {\n                        addClass([label], newProp.cssClass.split(' '));\n                    }\n                    break;\n                case 'enableRtl':\n                    if (newProp.enableRtl) {\n                        label.classList.add(RTL$1);\n                    }\n                    else {\n                        label.classList.remove(RTL$1);\n                    }\n                    break;\n                case 'label':\n                    this.setText(newProp.label);\n                    break;\n                case 'labelPosition':\n                    if (newProp.labelPosition === 'Before') {\n                        label.classList.add('e-right');\n                    }\n                    else {\n                        label.classList.remove('e-right');\n                    }\n                    break;\n                case 'name':\n                    this.element.setAttribute('name', newProp.name);\n                    break;\n                case 'value':\n                    this.element.setAttribute('value', newProp.value);\n                    break;\n            }\n        }\n    }\n    /**\n     * Initialize checked Property, Angular and React and Unique ID support.\n     * @private\n     */\n    preRender() {\n        let element = this.element;\n        this.formElement = closest(this.element, 'form');\n        this.tagName = this.element.tagName;\n        element = wrapperInitialize(this.createElement, 'EJS-RADIOBUTTON', 'radio', element, WRAPPER$1, 'radio');\n        this.element = element;\n        if (this.element.getAttribute('type') !== 'radio') {\n            this.element.setAttribute('type', 'radio');\n        }\n        if (!this.element.id) {\n            this.element.id = getUniqueID('e-' + this.getModuleName());\n        }\n        if (this.tagName === 'EJS-RADIOBUTTON') {\n            let formControlName = this.element.getAttribute('formcontrolname');\n            if (formControlName) {\n                this.setProperties({ 'name': formControlName }, true);\n                this.element.setAttribute('name', formControlName);\n            }\n        }\n    }\n    /**\n     * Initialize the control rendering\n     * @private\n     */\n    render() {\n        this.initialize();\n        if (!this.disabled) {\n            this.wireEvents();\n        }\n        this.renderComplete();\n    }\n    setDisabled() {\n        this.element.disabled = true;\n    }\n    setText(text) {\n        let label = this.getLabel();\n        let textLabel = label.getElementsByClassName(LABEL$1)[0];\n        if (textLabel) {\n            textLabel.textContent = text;\n        }\n        else {\n            text = (this.enableHtmlSanitizer) ? SanitizeHtmlHelper.sanitize(text) : text;\n            textLabel = this.createElement('span', { className: LABEL$1, innerHTML: text });\n            label.appendChild(textLabel);\n        }\n        if (this.labelPosition === 'Before') {\n            this.getLabel().classList.add('e-right');\n        }\n        else {\n            this.getLabel().classList.remove('e-right');\n        }\n    }\n    unWireEvents() {\n        let label = this.getLabel();\n        EventHandler.remove(this.element, 'change', this.changeHandler);\n        EventHandler.remove(this.element, 'focus', this.focusHandler);\n        EventHandler.remove(this.element, 'focusout', this.focusOutHandler);\n        EventHandler.remove(this.element, 'keyup', this.keyUpHandler);\n        let rippleLabel = label.getElementsByClassName(LABEL$1)[0];\n        if (rippleLabel) {\n            EventHandler.remove(rippleLabel, 'mousedown', this.labelRippleHandler);\n            EventHandler.remove(rippleLabel, 'mouseup', this.labelRippleHandler);\n        }\n        if (this.formElement) {\n            EventHandler.remove(this.formElement, 'reset', this.formResetHandler);\n        }\n    }\n    wireEvents() {\n        let label = this.getLabel();\n        EventHandler.add(this.element, 'change', this.changeHandler, this);\n        EventHandler.add(this.element, 'keyup', this.keyUpHandler, this);\n        EventHandler.add(this.element, 'focus', this.focusHandler, this);\n        EventHandler.add(this.element, 'focusout', this.focusOutHandler, this);\n        let rippleLabel = label.getElementsByClassName(LABEL$1)[0];\n        if (rippleLabel) {\n            EventHandler.add(rippleLabel, 'mousedown', this.labelRippleHandler, this);\n            EventHandler.add(rippleLabel, 'mouseup', this.labelRippleHandler, this);\n        }\n        if (this.formElement) {\n            EventHandler.add(this.formElement, 'reset', this.formResetHandler, this);\n        }\n    }\n    /**\n     * Click the RadioButton element\n     * its native method\n     * @public\n     */\n    click() {\n        this.element.click();\n    }\n    /**\n     * Sets the focus to RadioButton\n     * its native method\n     * @public\n     */\n    focusIn() {\n        this.element.focus();\n    }\n};\n__decorate$2([\n    Event()\n], RadioButton.prototype, \"change\", void 0);\n__decorate$2([\n    Event()\n], RadioButton.prototype, \"created\", void 0);\n__decorate$2([\n    Property(false)\n], RadioButton.prototype, \"checked\", void 0);\n__decorate$2([\n    Property('')\n], RadioButton.prototype, \"cssClass\", void 0);\n__decorate$2([\n    Property(false)\n], RadioButton.prototype, \"disabled\", void 0);\n__decorate$2([\n    Property('')\n], RadioButton.prototype, \"label\", void 0);\n__decorate$2([\n    Property('After')\n], RadioButton.prototype, \"labelPosition\", void 0);\n__decorate$2([\n    Property('')\n], RadioButton.prototype, \"name\", void 0);\n__decorate$2([\n    Property('')\n], RadioButton.prototype, \"value\", void 0);\n__decorate$2([\n    Property(false)\n], RadioButton.prototype, \"enableHtmlSanitizer\", void 0);\nRadioButton = RadioButton_1 = __decorate$2([\n    NotifyPropertyChanges\n], RadioButton);\n\n/**\n * RadioButton modules\n */\n\nvar __decorate$3 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nconst DISABLED$1 = 'e-switch-disabled';\nconst RIPPLE$2 = 'e-ripple-container';\nconst RIPPLE_CHECK = 'e-ripple-check';\nconst RTL$2 = 'e-rtl';\nconst WRAPPER$2 = 'e-switch-wrapper';\nconst ACTIVE = 'e-switch-active';\n/**\n * The Switch is a graphical user interface element that allows you to toggle between checked and unchecked states.\n * ```html\n * <input type=\"checkbox\" id=\"switch\"/>\n * <script>\n * var switchObj = new Switch({});\n * switchObj.appendTo(\"#switch\");\n * </script>\n * ```\n */\nlet Switch = class Switch extends Component {\n    /**\n     * Constructor for creating the widget.\n     * @private\n     */\n    constructor(options, element) {\n        super(options, element);\n        this.isFocused = false;\n        this.isDrag = false;\n    }\n    changeState(state) {\n        let ariaState;\n        let rippleSpan;\n        let wrapper = this.getWrapper();\n        let bar = wrapper.querySelector('.e-switch-inner');\n        let handle = wrapper.querySelector('.e-switch-handle');\n        if (isRippleEnabled) {\n            rippleSpan = wrapper.getElementsByClassName(RIPPLE$2)[0];\n        }\n        if (state) {\n            addClass([bar, handle], ACTIVE);\n            ariaState = 'true';\n            this.element.checked = true;\n            this.checked = true;\n            if (rippleSpan) {\n                addClass([rippleSpan], [RIPPLE_CHECK]);\n            }\n        }\n        else {\n            removeClass([bar, handle], ACTIVE);\n            ariaState = 'false';\n            this.element.checked = false;\n            this.checked = false;\n            if (rippleSpan) {\n                removeClass([rippleSpan], [RIPPLE_CHECK]);\n            }\n        }\n        wrapper.setAttribute('aria-checked', ariaState);\n    }\n    clickHandler(evt) {\n        this.isDrag = false;\n        this.focusOutHandler();\n        this.changeState(!this.checked);\n        this.element.focus();\n        let changeEventArgs = { checked: this.element.checked, event: evt };\n        this.trigger('change', changeEventArgs);\n    }\n    /**\n     * Destroys the Switch widget.\n     * @returns void\n     */\n    destroy() {\n        super.destroy();\n        if (!this.disabled) {\n            this.unWireEvents();\n        }\n        destroy(this, this.getWrapper(), this.tagName);\n    }\n    focusHandler() {\n        this.isFocused = true;\n    }\n    focusOutHandler() {\n        this.getWrapper().classList.remove('e-focus');\n    }\n    /**\n     * Gets the module name.\n     * @private\n     */\n    getModuleName() {\n        return 'switch';\n    }\n    /**\n     * Gets the properties to be maintained in the persistence state.\n     * @private\n     */\n    getPersistData() {\n        return this.addOnPersist(['checked']);\n    }\n    getWrapper() {\n        return this.element.parentElement;\n    }\n    initialize() {\n        if (isNullOrUndefined(this.initialSwitchCheckedValue)) {\n            this.initialSwitchCheckedValue = this.checked;\n        }\n        if (this.name) {\n            this.element.setAttribute('name', this.name);\n        }\n        if (this.value) {\n            this.element.setAttribute('value', this.value);\n        }\n        if (this.checked) {\n            this.changeState(true);\n        }\n        if (this.disabled) {\n            this.setDisabled();\n        }\n        if (this.onLabel || this.offLabel) {\n            this.setLabel(this.onLabel, this.offLabel);\n        }\n    }\n    initWrapper() {\n        let wrapper = this.element.parentElement;\n        if (!wrapper.classList.contains(WRAPPER$2)) {\n            wrapper = this.createElement('div', {\n                className: WRAPPER$2, attrs: { 'role': 'switch', 'aria-checked': 'false' }\n            });\n            this.element.parentNode.insertBefore(wrapper, this.element);\n        }\n        let switchInner = this.createElement('span', { className: 'e-switch-inner' });\n        let onLabel = this.createElement('span', { className: 'e-switch-on' });\n        let offLabel = this.createElement('span', { className: 'e-switch-off' });\n        let handle = this.createElement('span', { className: 'e-switch-handle' });\n        wrapper.appendChild(this.element);\n        setHiddenInput(this, wrapper);\n        switchInner.appendChild(onLabel);\n        switchInner.appendChild(offLabel);\n        wrapper.appendChild(switchInner);\n        wrapper.appendChild(handle);\n        if (isRippleEnabled) {\n            let rippleSpan = this.createElement('span', { className: RIPPLE$2 });\n            handle.appendChild(rippleSpan);\n            rippleEffect(rippleSpan, { duration: 400, isCenterRipple: true });\n        }\n        wrapper.classList.add('e-wrapper');\n        if (this.enableRtl) {\n            wrapper.classList.add(RTL$2);\n        }\n        if (this.cssClass) {\n            addClass([wrapper], this.cssClass.split(' '));\n        }\n    }\n    /**\n     * Called internally if any of the property value changes.\n     * @private\n     */\n    onPropertyChanged(newProp, oldProp) {\n        let wrapper = this.getWrapper();\n        for (let prop of Object.keys(newProp)) {\n            switch (prop) {\n                case 'checked':\n                    this.changeState(newProp.checked);\n                    break;\n                case 'disabled':\n                    if (newProp.disabled) {\n                        this.setDisabled();\n                        this.unWireEvents();\n                    }\n                    else {\n                        this.element.disabled = false;\n                        wrapper.classList.remove(DISABLED$1);\n                        wrapper.setAttribute('aria-disabled', 'false');\n                        this.wireEvents();\n                    }\n                    break;\n                case 'value':\n                    this.element.setAttribute('value', newProp.value);\n                    break;\n                case 'name':\n                    this.element.setAttribute('name', newProp.name);\n                    break;\n                case 'onLabel':\n                case 'offLabel':\n                    this.setLabel(newProp.onLabel, newProp.offLabel);\n                    break;\n                case 'enableRtl':\n                    if (newProp.enableRtl) {\n                        wrapper.classList.add(RTL$2);\n                    }\n                    else {\n                        wrapper.classList.remove(RTL$2);\n                    }\n                    break;\n                case 'cssClass':\n                    if (oldProp.cssClass) {\n                        removeClass([wrapper], oldProp.cssClass.split(' '));\n                    }\n                    if (newProp.cssClass) {\n                        addClass([wrapper], newProp.cssClass.split(' '));\n                    }\n                    break;\n            }\n        }\n    }\n    /**\n     * Initialize Angular, React and Unique ID support.\n     * @private\n     */\n    preRender() {\n        let element = this.element;\n        this.formElement = closest(this.element, 'form');\n        this.tagName = this.element.tagName;\n        preRender(this, 'EJS-SWITCH', WRAPPER$2, element, this.getModuleName());\n    }\n    /**\n     * Initialize control rendering.\n     * @private\n     */\n    render() {\n        this.initWrapper();\n        this.initialize();\n        if (!this.disabled) {\n            this.wireEvents();\n        }\n        this.renderComplete();\n    }\n    rippleHandler(e) {\n        let rippleSpan = this.getWrapper().getElementsByClassName(RIPPLE$2)[0];\n        rippleMouseHandler(e, rippleSpan);\n        if (e.type === 'mousedown' && e.currentTarget.classList.contains('e-switch-wrapper') && e.which === 1) {\n            this.isDrag = true;\n            this.isFocused = false;\n        }\n    }\n    rippleTouchHandler(eventType) {\n        let rippleSpan = this.getWrapper().getElementsByClassName(RIPPLE$2)[0];\n        if (rippleSpan) {\n            let event = document.createEvent('MouseEvents');\n            event.initEvent(eventType, false, true);\n            rippleSpan.dispatchEvent(event);\n        }\n    }\n    setDisabled() {\n        let wrapper = this.getWrapper();\n        this.element.disabled = true;\n        wrapper.classList.add(DISABLED$1);\n        wrapper.setAttribute('aria-disabled', 'true');\n    }\n    setLabel(onText, offText) {\n        let wrapper = this.getWrapper();\n        if (onText) {\n            wrapper.querySelector('.e-switch-on').textContent = onText;\n        }\n        if (offText) {\n            wrapper.querySelector('.e-switch-off').textContent = offText;\n        }\n    }\n    switchFocusHandler() {\n        if (this.isFocused) {\n            this.getWrapper().classList.add('e-focus');\n        }\n    }\n    switchMouseUp(e) {\n        let target = e.target;\n        let rippleSpan = this.getWrapper().getElementsByClassName(RIPPLE$2)[0];\n        if (e.type === 'touchmove') {\n            e.preventDefault();\n        }\n        if (e.type === 'touchstart') {\n            this.isDrag = true;\n            this.rippleTouchHandler('mousedown');\n        }\n        if (this.isDrag) {\n            if ((e.type === 'mouseup' && target.className.indexOf('e-switch') < 0) || e.type === 'touchend') {\n                this.clickHandler(e);\n                this.rippleTouchHandler('mouseup');\n                e.preventDefault();\n            }\n        }\n    }\n    formResetHandler() {\n        this.checked = this.initialSwitchCheckedValue;\n        this.element.checked = this.initialSwitchCheckedValue;\n    }\n    /**\n     * Toggle the Switch component state into checked/unchecked.\n     * @returns void\n     */\n    toggle() {\n        this.clickHandler();\n    }\n    wireEvents() {\n        let wrapper = this.getWrapper();\n        let handle = wrapper.querySelector('.e-switch-handle');\n        this.delegateMouseUpHandler = this.switchMouseUp.bind(this);\n        this.delegateKeyUpHandler = this.switchFocusHandler.bind(this);\n        EventHandler.add(wrapper, 'click', this.clickHandler, this);\n        EventHandler.add(this.element, 'focus', this.focusHandler, this);\n        EventHandler.add(this.element, 'focusout', this.focusOutHandler, this);\n        EventHandler.add(this.element, 'mouseup', this.delegateMouseUpHandler, this);\n        EventHandler.add(this.element, 'keyup', this.delegateKeyUpHandler, this);\n        EventHandler.add(wrapper, 'mousedown mouseup', this.rippleHandler, this);\n        EventHandler.add(wrapper, 'touchstart touchmove touchend', this.switchMouseUp, this);\n        if (this.formElement) {\n            EventHandler.add(this.formElement, 'reset', this.formResetHandler, this);\n        }\n    }\n    unWireEvents() {\n        let wrapper = this.getWrapper();\n        let handle = wrapper.querySelector('.e-switch-handle');\n        EventHandler.remove(wrapper, 'click', this.clickHandler);\n        EventHandler.remove(this.element, 'focus', this.focusHandler);\n        EventHandler.remove(this.element, 'focusout', this.focusOutHandler);\n        EventHandler.remove(this.element, 'mouseup', this.delegateMouseUpHandler);\n        EventHandler.remove(this.element, 'keyup', this.delegateKeyUpHandler);\n        EventHandler.remove(wrapper, 'mousedown mouseup', this.rippleHandler);\n        EventHandler.remove(wrapper, 'touchstart touchmove touchend', this.switchMouseUp);\n        if (this.formElement) {\n            EventHandler.remove(this.formElement, 'reset', this.formResetHandler);\n        }\n    }\n    /**\n     * Click the switch element\n     * its native method\n     * @public\n     */\n    click() {\n        this.element.click();\n    }\n    /**\n     * Sets the focus to Switch\n     * its native method\n     * @public\n     */\n    focusIn() {\n        this.element.focus();\n    }\n};\n__decorate$3([\n    Event()\n], Switch.prototype, \"change\", void 0);\n__decorate$3([\n    Event()\n], Switch.prototype, \"created\", void 0);\n__decorate$3([\n    Property(false)\n], Switch.prototype, \"checked\", void 0);\n__decorate$3([\n    Property('')\n], Switch.prototype, \"cssClass\", void 0);\n__decorate$3([\n    Property(false)\n], Switch.prototype, \"disabled\", void 0);\n__decorate$3([\n    Property('')\n], Switch.prototype, \"name\", void 0);\n__decorate$3([\n    Property('')\n], Switch.prototype, \"onLabel\", void 0);\n__decorate$3([\n    Property('')\n], Switch.prototype, \"offLabel\", void 0);\n__decorate$3([\n    Property('')\n], Switch.prototype, \"value\", void 0);\nSwitch = __decorate$3([\n    NotifyPropertyChanges\n], Switch);\n\n/**\n * Switch modules\n */\n\nvar __decorate$4 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nconst classNames = {\n    chipSet: 'e-chip-set',\n    chip: 'e-chip',\n    avatar: 'e-chip-avatar',\n    text: 'e-chip-text',\n    icon: 'e-chip-icon',\n    delete: 'e-chip-delete',\n    deleteIcon: 'e-dlt-btn',\n    multiSelection: 'e-multi-selection',\n    singleSelection: 'e-selection',\n    active: 'e-active',\n    chipWrapper: 'e-chip-avatar-wrap',\n    iconWrapper: 'e-chip-icon-wrap',\n    focused: 'e-focused',\n    disabled: 'e-disabled',\n    rtl: 'e-rtl',\n};\n/**\n * A chip component is a small block of essential information, mostly used on contacts or filter tags.\n * ```html\n * <div id=\"chip\"></div>\n * ```\n * ```typescript\n * <script>\n * var chipObj = new ChipList();\n * chipObj.appendTo(\"#chip\");\n * </script>\n * ```\n */\nlet ChipList = class ChipList extends Component {\n    constructor(options, element) {\n        super(options, element);\n        this.multiSelectedChip = [];\n    }\n    /**\n     * Initialize the event handler\n     * @private\n     */\n    preRender() {\n        //prerender\n    }\n    /**\n     * To find the chips length.\n     * @returns boolean\n     * @private\n     */\n    chipType() {\n        return (this.chips && this.chips.length && this.chips.length > 0);\n    }\n    /**\n     * To Initialize the control rendering.\n     * @returns void\n     * @private\n     */\n    render() {\n        this.type = this.chips.length ? 'chipset' : (this.text || this.element.innerText ? 'chip' : 'chipset');\n        if (!isBlazor() || !this.isServerRendered) {\n            this.setAttributes();\n            this.createChip();\n            this.setRtl();\n            this.select(this.selectedChips);\n        }\n        this.wireEvent(false);\n        this.rippleFunction = rippleEffect(this.element, {\n            selector: '.e-chip'\n        });\n        this.renderComplete();\n    }\n    createChip() {\n        this.innerText = this.element.innerText.trim();\n        if (isBlazor()) {\n            let childElement = this.element.querySelectorAll('.e-chip');\n            for (let i = 0; i < childElement.length; i++) {\n                if (childElement[i] != null) {\n                    detach(childElement[i]);\n                }\n            }\n        }\n        else {\n            this.element.innerHTML = '';\n        }\n        this.chipCreation(this.type === 'chip' ? [this.innerText ? this.innerText : this.text] : this.chips);\n    }\n    setAttributes() {\n        if (this.type === 'chip') {\n            this.element.tabIndex = 0;\n            this.element.setAttribute('role', 'option');\n        }\n        else {\n            this.element.classList.add(classNames.chipSet);\n            this.element.setAttribute('role', 'listbox');\n            if (this.selection === 'Multiple') {\n                this.element.classList.add(classNames.multiSelection);\n                this.element.setAttribute('aria-multiselectable', 'true');\n            }\n            else if (this.selection === 'Single') {\n                this.element.classList.add(classNames.singleSelection);\n                this.element.setAttribute('aria-multiselectable', 'false');\n            }\n            else {\n                this.element.setAttribute('aria-multiselectable', 'false');\n            }\n        }\n    }\n    setRtl() {\n        this.element.classList[this.enableRtl ? 'add' : 'remove'](classNames.rtl);\n    }\n    chipCreation(data) {\n        let chipListArray = [];\n        for (let i = 0; i < data.length; i++) {\n            let fieldsData = this.getFieldValues(data[i]);\n            let chipArray = this.elementCreation(fieldsData);\n            let className = (classNames.chip + ' ' + (fieldsData.enabled ? ' ' : classNames.disabled) + ' ' +\n                (fieldsData.avatarIconCss || fieldsData.avatarText ? classNames.chipWrapper : (fieldsData.leadingIconCss ?\n                    classNames.iconWrapper : ' ')) + ' ' + fieldsData.cssClass).split(' ').filter((css) => css);\n            if (!this.chipType()) {\n                chipListArray = chipArray;\n                addClass([this.element], className);\n                this.element.setAttribute('aria-label', fieldsData.text);\n                if (fieldsData.value) {\n                    this.element.setAttribute('data-value', fieldsData.value.toString());\n                }\n            }\n            else {\n                let wrapper = this.createElement('DIV', {\n                    className: className.join(' '), attrs: {\n                        tabIndex: '0', role: 'option',\n                        'aria-label': fieldsData.text, 'aria-selected': 'false'\n                    }\n                });\n                if (fieldsData.value) {\n                    wrapper.setAttribute('data-value', fieldsData.value.toString());\n                }\n                append(chipArray, wrapper);\n                chipListArray.push(wrapper);\n            }\n        }\n        append(chipListArray, this.element);\n    }\n    getFieldValues(data) {\n        let chipEnabled = !(this.enabled.toString() === 'false');\n        let fields = {\n            text: typeof data === 'object' ? (data.text ? data.text.toString() : this.text.toString()) :\n                (!this.chipType() ? (this.innerText ? this.innerText : this.text.toString()) : data.toString()),\n            cssClass: typeof data === 'object' ? (data.cssClass ? data.cssClass.toString() : this.cssClass.toString()) :\n                (this.cssClass.toString()),\n            leadingIconCss: typeof data === 'object' ? (data.leadingIconCss ? data.leadingIconCss.toString() :\n                this.leadingIconCss.toString()) : (this.leadingIconCss.toString()),\n            avatarIconCss: typeof data === 'object' ? (data.avatarIconCss ? data.avatarIconCss.toString() :\n                this.avatarIconCss.toString()) : (this.avatarIconCss.toString()),\n            avatarText: typeof data === 'object' ? (data.avatarText ? data.avatarText.toString() : this.avatarText.toString()) :\n                (this.avatarText.toString()),\n            trailingIconCss: typeof data === 'object' ? (data.trailingIconCss ? data.trailingIconCss.toString() :\n                this.trailingIconCss.toString()) : (this.trailingIconCss.toString()),\n            enabled: typeof data === 'object' ? (!isNullOrUndefined(data.enabled) ? (data.enabled.toString() === 'false' ? false : true) :\n                chipEnabled) : (chipEnabled),\n            value: typeof data === 'object' ? ((data.value ? data.value.toString() : null)) : null,\n            leadingIconUrl: typeof data === 'object' ? (data.leadingIconUrl ? data.leadingIconUrl.toString() : this.leadingIconUrl) :\n                this.leadingIconUrl,\n            trailingIconUrl: typeof data === 'object' ? (data.trailingIconUrl ? data.trailingIconUrl.toString() : this.trailingIconUrl) :\n                this.trailingIconUrl\n        };\n        return fields;\n    }\n    elementCreation(fields) {\n        let chipArray = [];\n        if (fields.avatarText || fields.avatarIconCss) {\n            let className = (classNames.avatar + ' ' + fields.avatarIconCss).trim();\n            let chipAvatarElement = this.createElement('span', { className: className });\n            chipAvatarElement.innerText = fields.avatarText;\n            chipArray.push(chipAvatarElement);\n        }\n        else if (fields.leadingIconCss) {\n            let className = (classNames.icon + ' ' + fields.leadingIconCss).trim();\n            let chipIconElement = this.createElement('span', { className: className });\n            chipArray.push(chipIconElement);\n        }\n        else if (fields.leadingIconUrl) {\n            let className = (classNames.avatar + ' ' + 'image-url').trim();\n            let chipIconElement = this.createElement('span', { className: className });\n            chipIconElement.style.backgroundImage = 'url(' + fields.leadingIconUrl + ')';\n            chipArray.push(chipIconElement);\n        }\n        let chipTextElement = this.createElement('span', { className: classNames.text });\n        chipTextElement.innerText = fields.text;\n        chipArray.push(chipTextElement);\n        if (fields.trailingIconCss || (this.chipType() && this.enableDelete)) {\n            let className = (classNames.delete + ' ' +\n                (fields.trailingIconCss ? fields.trailingIconCss : classNames.deleteIcon)).trim();\n            let chipdeleteElement = this.createElement('span', { className: className });\n            chipArray.push(chipdeleteElement);\n        }\n        else if (fields.trailingIconUrl) {\n            let className = ('trailing-icon-url').trim();\n            let chipIconsElement = this.createElement('span', { className: className });\n            chipIconsElement.style.backgroundImage = 'url(' + fields.trailingIconUrl + ')';\n            chipArray.push(chipIconsElement);\n        }\n        return chipArray;\n    }\n    /**\n     * A function that finds chip based on given input.\n     * @param  {number | HTMLElement } fields - We can pass index number or element of chip.\n     * {% codeBlock src='chips/find/index.md' %}{% endcodeBlock %}\n     */\n    find(fields) {\n        let chipData;\n        let chipElement = fields instanceof HTMLElement ?\n            fields : this.element.querySelectorAll('.' + classNames.chip)[fields];\n        if (chipElement && this.chipType()) {\n            chipData = { text: undefined, index: undefined, element: undefined, data: undefined };\n            chipData.index = Array.prototype.slice.call(this.element.querySelectorAll('.' + classNames.chip)).indexOf(chipElement);\n            chipData.text = typeof this.chips[chipData.index] === 'object' ?\n                (this.chips[chipData.index].text ?\n                    this.chips[chipData.index].text.toString() : '') :\n                this.chips[chipData.index].toString();\n            chipData.data = this.chips[chipData.index];\n            chipData.element = chipElement;\n        }\n        return chipData;\n    }\n    /**\n     * Allows adding the chip item(s) by passing a single or array of string, number, or ChipModel values.\n     * @param  {string[] | number[] | ChipModel[] | string | number | ChipModel} chipsData - We can pass array of string or\n     *  array of number or array of chip model or string data or number data or chip model.\n     * {% codeBlock src='chips/add/index.md' %}{% endcodeBlock %}\n     * @deprecated\n     */\n    add(chipsData) {\n        if (this.type !== 'chip') {\n            let fieldData = chipsData instanceof Array ?\n                chipsData : [chipsData];\n            this.chips.push(...fieldData);\n            this.chipCreation(fieldData);\n        }\n    }\n    /**\n     * Allows selecting the chip item(s) by passing a single or array of string, number, or ChipModel values.\n     * @param  {number | number[] | HTMLElement | HTMLElement[]} fields - We can pass number or array of number\n     *  or chip element or array of chip element.\n     * {% codeBlock src='chips/select/index.md' %}{% endcodeBlock %}\n     */\n    select(fields) {\n        this.onSelect(fields, false);\n    }\n    multiSelection(newProp) {\n        const items = this.element.querySelectorAll('.' + 'e-chip');\n        for (let j = 0; j < newProp.length; j++) {\n            if (typeof newProp[j] === 'string') {\n                for (let k = 0; k < items.length; k++) {\n                    if (newProp[j] !== k) {\n                        if (newProp[j] === items[k].attributes[5].value) {\n                            this.multiSelectedChip.push(k);\n                            break;\n                        }\n                    }\n                }\n            }\n            else {\n                this.multiSelectedChip.push(newProp[j]);\n            }\n        }\n    }\n    onSelect(fields, callFromProperty) {\n        if (this.chipType() && this.selection !== 'None') {\n            if (callFromProperty) {\n                let chipElements = this.element.querySelectorAll('.' + classNames.chip);\n                for (let i = 0; i < chipElements.length; i++) {\n                    chipElements[i].setAttribute('aria-selected', 'false');\n                    chipElements[i].classList.remove(classNames.active);\n                }\n            }\n            let fieldData = fields instanceof Array ? fields : [fields];\n            for (let i = 0; i < fieldData.length; i++) {\n                let chipElement = fieldData[i] instanceof HTMLElement ? fieldData[i]\n                    : this.element.querySelectorAll('.' + classNames.chip)[fieldData[i]];\n                if (chipElement instanceof HTMLElement) {\n                    this.selectionHandler(chipElement);\n                }\n            }\n        }\n    }\n    /**\n     * Allows removing the chip item(s) by passing a single or array of string, number, or ChipModel values.\n     * @param  {number | number[] | HTMLElement | HTMLElement[]} fields - We can pass number or array of number\n     *  or chip element or array of chip element.\n     * {% codeBlock src='chips/remove/index.md' %}{% endcodeBlock %}\n     */\n    remove(fields) {\n        if (this.chipType()) {\n            let fieldData = fields instanceof Array ? fields : [fields];\n            let chipElements = [];\n            let chipCollection = this.element.querySelectorAll('.' + classNames.chip);\n            fieldData.forEach((data) => {\n                let chipElement = data instanceof HTMLElement ? data\n                    : chipCollection[data];\n                if (chipElement instanceof HTMLElement) {\n                    chipElements.push(chipElement);\n                }\n            });\n            chipElements.forEach((element) => {\n                let chips = this.element.querySelectorAll('.' + classNames.chip);\n                let index = Array.prototype.slice.call(chips).indexOf(element);\n                this.deleteHandler(element, index);\n            });\n        }\n    }\n    /**\n     * Returns the selected chip(s) data.\n     * {% codeBlock src='chips/getSelectedChips/index.md' %}{% endcodeBlock %}\n     */\n    getSelectedChips() {\n        let selectedChips;\n        if (this.chipType() && this.selection !== 'None') {\n            let selectedItems = { texts: [], Indexes: [], data: [], elements: [] };\n            const items = this.element.querySelectorAll('.' + classNames.active);\n            for (let i = 0; i < items.length; i++) {\n                const chip = items[i];\n                selectedItems.elements.push(chip);\n                let index = Array.prototype.slice.call(this.element.querySelectorAll('.' + classNames.chip)).indexOf(chip);\n                selectedItems.Indexes.push(index);\n                selectedItems.data.push(this.chips[index]);\n                let text = typeof this.chips[index] === 'object' ?\n                    this.chips[index].text ? this.chips[index].text.toString()\n                        : null : this.chips[index].toString();\n                selectedItems.texts.push(text);\n            }\n            let selectedItem = {\n                text: selectedItems.texts[0], index: selectedItems.Indexes[0],\n                data: selectedItems.data[0], element: selectedItems.elements[0]\n            };\n            selectedChips = !isNullOrUndefined(selectedItem.index) ?\n                (this.selection === 'Multiple' ? selectedItems : selectedItem) : undefined;\n        }\n        return selectedChips;\n    }\n    wireEvent(unWireEvent) {\n        if (!unWireEvent) {\n            EventHandler.add(this.element, 'click', this.clickHandler, this);\n            EventHandler.add(this.element, 'focusout', this.focusOutHandler, this);\n            EventHandler.add(this.element, 'keydown', this.keyHandler, this);\n            EventHandler.add(this.element, 'keyup', this.keyHandler, this);\n        }\n        else {\n            EventHandler.remove(this.element, 'click', this.clickHandler);\n            EventHandler.remove(this.element, 'focusout', this.focusOutHandler);\n            EventHandler.remove(this.element, 'keydown', this.keyHandler);\n            EventHandler.remove(this.element, 'keyup', this.keyHandler);\n        }\n    }\n    keyHandler(e) {\n        if (e.target.classList.contains(classNames.chip)) {\n            if (e.type === 'keydown') {\n                if (e.keyCode === 13) {\n                    this.clickHandler(e);\n                }\n                else if (e.keyCode === 46 && this.enableDelete) {\n                    this.clickHandler(e, true);\n                }\n            }\n            else if (e.keyCode === 9) {\n                this.focusInHandler(e.target);\n            }\n        }\n    }\n    focusInHandler(chipWrapper) {\n        if (!chipWrapper.classList.contains(classNames.focused)) {\n            chipWrapper.classList.add(classNames.focused);\n        }\n    }\n    focusOutHandler(e) {\n        let chipWrapper = closest(e.target, '.' + classNames.chip);\n        let focusedElement = !this.chipType() ? (this.element.classList.contains(classNames.focused) ?\n            this.element : null) : this.element.querySelector('.' + classNames.focused);\n        if (chipWrapper && focusedElement) {\n            focusedElement.classList.remove(classNames.focused);\n        }\n    }\n    clickHandler(e, del = false) {\n        let chipWrapper = closest(e.target, '.' + classNames.chip);\n        if (chipWrapper) {\n            let chipDataArgs;\n            if (this.chipType()) {\n                chipDataArgs = this.find(chipWrapper);\n            }\n            else {\n                let index = Array.prototype.slice.call(this.element.querySelectorAll('.' + classNames.chip)).indexOf(chipWrapper);\n                chipDataArgs = {\n                    text: this.innerText ? this.innerText : this.text,\n                    element: chipWrapper, data: this.text, index: index\n                };\n            }\n            chipDataArgs.event = e;\n            chipDataArgs.cancel = false;\n            this.trigger('beforeClick', chipDataArgs, (observedArgs) => {\n                if (!observedArgs.cancel) {\n                    observedArgs.element = isBlazor() ? getElement(observedArgs.element) : observedArgs.element;\n                    this.clickEventHandler(observedArgs.element, e, del);\n                }\n            });\n        }\n    }\n    clickEventHandler(chipWrapper, e, del) {\n        if (this.chipType()) {\n            let chipData = this.find(chipWrapper);\n            chipData.event = e;\n            let deleteElement = e.target.classList.contains(classNames.deleteIcon) ?\n                e.target : (del ? chipWrapper.querySelector('.' + classNames.deleteIcon) : undefined);\n            if (deleteElement && this.enableDelete) {\n                chipData.cancel = false;\n                let deletedItemArgs = chipData;\n                this.trigger('delete', deletedItemArgs, (observedArgs) => {\n                    if (!observedArgs.cancel) {\n                        observedArgs.element = isBlazor() ? getElement(observedArgs.element) : observedArgs.element;\n                        this.deleteHandler(observedArgs.element, observedArgs.index);\n                    }\n                });\n            }\n            else if (this.selection !== 'None') {\n                this.selectionHandler(chipWrapper);\n                chipData.selected = chipWrapper.classList.contains(classNames.active);\n                let selectedItemArgs = chipData;\n                this.trigger('click', selectedItemArgs);\n            }\n            else {\n                this.focusInHandler(chipWrapper);\n                let clickedItemArgs = chipData;\n                this.trigger('click', clickedItemArgs);\n            }\n        }\n        else {\n            this.focusInHandler(chipWrapper);\n            let clickedItemArgs = {\n                text: this.innerText ? this.innerText : this.text,\n                element: chipWrapper, data: this.text, event: e\n            };\n            this.trigger('click', clickedItemArgs);\n        }\n    }\n    selectionHandler(chipWrapper) {\n        if (this.selection === 'Single') {\n            let activeElement = this.element.querySelector('.' + classNames.active);\n            if (activeElement && activeElement !== chipWrapper) {\n                activeElement.classList.remove(classNames.active);\n                activeElement.setAttribute('aria-selected', 'false');\n            }\n            this.setProperties({ selectedChips: null }, true);\n        }\n        else {\n            this.setProperties({ selectedChips: [] }, true);\n        }\n        if (chipWrapper.classList.contains(classNames.active)) {\n            chipWrapper.classList.remove(classNames.active);\n            chipWrapper.setAttribute('aria-selected', 'false');\n        }\n        else {\n            chipWrapper.classList.add(classNames.active);\n            chipWrapper.setAttribute('aria-selected', 'true');\n        }\n        this.updateSelectedChips();\n    }\n    updateSelectedChips() {\n        let chipListEle = this.element.querySelectorAll('.e-chip');\n        let chipCollIndex = [];\n        let chipCollValue = [];\n        let chip = null;\n        let value;\n        for (let i = 0; i < chipListEle.length; i++) {\n            let selectedEle = this.element.querySelectorAll('.e-chip')[i];\n            if (selectedEle.getAttribute('aria-selected') === 'true') {\n                value = selectedEle.getAttribute('data-value');\n                if (this.selection === 'Single' && selectedEle.classList.contains('e-active')) {\n                    chip = value ? value : i;\n                    break;\n                }\n                else {\n                    value ? chipCollValue.push(value) : chipCollIndex.push(i);\n                }\n            }\n        }\n        this.setProperties({ selectedChips: this.selection === 'Single' ? chip : value ? chipCollValue : chipCollIndex }, true);\n    }\n    deleteHandler(chipWrapper, index) {\n        this.allowServerDataBinding = true;\n        this.chips.splice(index, 1);\n        this.setProperties({ chips: this.chips }, true);\n        this.serverDataBind();\n        this.allowServerDataBinding = false;\n        if (!(isBlazor() && this.isServerRendered)) {\n            detach(chipWrapper);\n        }\n    }\n    /**\n     * Removes the component from the DOM and detaches all its related event handlers. Also, it removes the attributes and classes.\n     * {% codeBlock src='chips/destroy/index.md' %}{% endcodeBlock %}\n     */\n    destroy() {\n        removeClass([this.element], [classNames.chipSet, classNames.chip, classNames.rtl,\n            classNames.multiSelection, classNames.singleSelection, classNames.disabled, classNames.chipWrapper, classNames.iconWrapper,\n            classNames.active, classNames.focused].concat(this.cssClass.toString().split(' ').filter((css) => css)));\n        this.removeMultipleAttributes(['tabindex', 'role', 'aria-label', 'aria-multiselectable'], this.element);\n        this.wireEvent(true);\n        this.rippleFunction();\n        if (isBlazor()) {\n            let chipChildElement = !this.chipType() ? this.element.querySelectorAll('.e-chip-text') :\n                this.element.querySelectorAll('.e-chip');\n            for (let i = 0; i < chipChildElement.length; i++) {\n                if (chipChildElement[i] != null) {\n                    detach(chipChildElement[i]);\n                }\n            }\n        }\n        else {\n            super.destroy();\n            this.element.innerHTML = '';\n            this.element.innerText = this.innerText;\n        }\n    }\n    removeMultipleAttributes(attributes$$1, element) {\n        attributes$$1.forEach((attr) => {\n            element.removeAttribute(attr);\n        });\n    }\n    getPersistData() {\n        return this.addOnPersist([]);\n    }\n    getModuleName() {\n        return 'chip-list';\n    }\n    /**\n     * Called internally if any of the property value changed.\n     * @returns void\n     * @private\n     */\n    onPropertyChanged(newProp, oldProp) {\n        for (let prop of Object.keys(newProp)) {\n            switch (prop) {\n                case 'chips':\n                case 'text':\n                case 'avatarText':\n                case 'avatarIconCss':\n                case 'leadingIconCss':\n                case 'trailingIconCss':\n                case 'selection':\n                case 'enableDelete':\n                case 'enabled':\n                    if (!(isBlazor() && this.isServerRendered)) {\n                        this.isServerRendered = false;\n                        this.refresh();\n                        this.isServerRendered = true;\n                    }\n                    break;\n                case 'cssClass':\n                    if (!(isBlazor() && this.isServerRendered)) {\n                        if (!this.chipType()) {\n                            removeClass([this.element], oldProp.cssClass.toString().split(' ').filter((css) => css));\n                            addClass([this.element], newProp.cssClass.toString().split(' ').filter((css) => css));\n                        }\n                        else {\n                            this.isServerRendered = false;\n                            this.refresh();\n                            this.isServerRendered = true;\n                        }\n                    }\n                    break;\n                case 'selectedChips':\n                    removeClass(this.element.querySelectorAll('.e-active'), 'e-active');\n                    if (this.selection === 'Multiple') {\n                        this.multiSelectedChip = [];\n                        this.multiSelection(newProp.selectedChips);\n                        this.onSelect(this.multiSelectedChip, true);\n                        this.updateSelectedChips();\n                    }\n                    else {\n                        this.onSelect(newProp.selectedChips, true);\n                    }\n                    break;\n                case 'enableRtl':\n                    this.setRtl();\n                    break;\n            }\n        }\n    }\n};\n__decorate$4([\n    Property([])\n], ChipList.prototype, \"chips\", void 0);\n__decorate$4([\n    Property('')\n], ChipList.prototype, \"text\", void 0);\n__decorate$4([\n    Property('')\n], ChipList.prototype, \"avatarText\", void 0);\n__decorate$4([\n    Property('')\n], ChipList.prototype, \"avatarIconCss\", void 0);\n__decorate$4([\n    Property('')\n], ChipList.prototype, \"leadingIconCss\", void 0);\n__decorate$4([\n    Property('')\n], ChipList.prototype, \"trailingIconCss\", void 0);\n__decorate$4([\n    Property('')\n], ChipList.prototype, \"leadingIconUrl\", void 0);\n__decorate$4([\n    Property('')\n], ChipList.prototype, \"trailingIconUrl\", void 0);\n__decorate$4([\n    Property('')\n], ChipList.prototype, \"cssClass\", void 0);\n__decorate$4([\n    Property(true)\n], ChipList.prototype, \"enabled\", void 0);\n__decorate$4([\n    Property([])\n], ChipList.prototype, \"selectedChips\", void 0);\n__decorate$4([\n    Property('None')\n], ChipList.prototype, \"selection\", void 0);\n__decorate$4([\n    Property(false)\n], ChipList.prototype, \"enableDelete\", void 0);\n__decorate$4([\n    Event()\n], ChipList.prototype, \"created\", void 0);\n__decorate$4([\n    Event()\n], ChipList.prototype, \"click\", void 0);\n__decorate$4([\n    Event()\n], ChipList.prototype, \"beforeClick\", void 0);\n__decorate$4([\n    Event()\n], ChipList.prototype, \"delete\", void 0);\nChipList = __decorate$4([\n    NotifyPropertyChanges\n], ChipList);\n\n/**\n * Represents ChipList `Chip` model class.\n */\nclass Chip {\n}\n\n/**\n * Chip modules\n */\n\n/**\n * Button all modules\n */\n\nexport { wrapperInitialize, getTextNode, destroy, preRender, createCheckBox, rippleMouseHandler, setHiddenInput, buttonObserver, Button, CheckBox, RadioButton, Switch, classNames, ChipList, Chip };\n//# sourceMappingURL=ej2-buttons.es2015.js.map\n","import { Ajax, extend, getValue, isNullOrUndefined, merge, setValue } from '@syncfusion/ej2-base';\n\n/**\n * Query class is used to build query which is used by the DataManager to communicate with datasource.\n */\nclass Query {\n    /**\n     * Constructor for Query class.\n     * @param  {string|string[]} from?\n     * @hidden\n     */\n    constructor(from) {\n        /** @hidden */\n        this.subQuery = null;\n        /** @hidden */\n        this.isChild = false;\n        /** @hidden */\n        this.distincts = [];\n        this.queries = [];\n        this.key = '';\n        this.fKey = '';\n        if (typeof from === 'string') {\n            this.fromTable = from;\n        }\n        else if (from && from instanceof Array) {\n            this.lookups = from;\n        }\n        this.expands = [];\n        this.sortedColumns = [];\n        this.groupedColumns = [];\n        this.subQuery = null;\n        this.isChild = false;\n        this.params = [];\n        this.lazyLoad = [];\n        return this;\n    }\n    /**\n     * Sets the primary key.\n     * @param  {string} field - Defines the column field.\n     */\n    setKey(field) {\n        this.key = field;\n        return this;\n    }\n    /**\n     * Sets default DataManager to execute query.\n     * @param  {DataManager} dataManager - Defines the DataManager.\n     */\n    using(dataManager) {\n        this.dataManager = dataManager;\n        return this;\n    }\n    /**\n     * Executes query with the given DataManager.\n     * @param  {DataManager} dataManager - Defines the DataManager.\n     * @param  {Function} done - Defines the success callback.\n     * @param  {Function} fail - Defines the failure callback.\n     * @param  {Function} always - Defines the callback which will be invoked on either success or failure.\n     *\n     * <pre>\n     * let dataManager: DataManager = new DataManager([{ ID: '10' }, { ID: '2' }, { ID: '1' }, { ID: '20' }]);\n     * let query: Query = new Query();\n     * query.sortBy('ID', (x: string, y: string): number => { return parseInt(x, 10) - parseInt(y, 10) });\n     * let promise: Promise< Object > = query.execute(dataManager);\n     * promise.then((e: { result: Object }) => { });\n     * </pre>\n     */\n    execute(dataManager, done, fail, always) {\n        dataManager = dataManager || this.dataManager;\n        if (dataManager) {\n            return dataManager.executeQuery(this, done, fail, always);\n        }\n        return DataUtil.throwError('Query - execute() : dataManager needs to be is set using \"using\" function or should be passed as argument');\n    }\n    /**\n     * Executes query with the local datasource.\n     * @param  {DataManager} dataManager - Defines the DataManager.\n     */\n    executeLocal(dataManager) {\n        dataManager = dataManager || this.dataManager;\n        if (dataManager) {\n            return dataManager.executeLocal(this);\n        }\n        return DataUtil.throwError('Query - executeLocal() : dataManager needs to be is set using \"using\" function or should be passed as argument');\n    }\n    /**\n     * Creates deep copy of the Query object.\n     */\n    clone() {\n        let cloned = new Query();\n        cloned.queries = this.queries.slice(0);\n        cloned.key = this.key;\n        cloned.isChild = this.isChild;\n        cloned.dataManager = this.dataManager;\n        cloned.fromTable = this.fromTable;\n        cloned.params = this.params.slice(0);\n        cloned.expands = this.expands.slice(0);\n        cloned.sortedColumns = this.sortedColumns.slice(0);\n        cloned.groupedColumns = this.groupedColumns.slice(0);\n        cloned.subQuerySelector = this.subQuerySelector;\n        cloned.subQuery = this.subQuery;\n        cloned.fKey = this.fKey;\n        cloned.isCountRequired = this.isCountRequired;\n        cloned.distincts = this.distincts.slice(0);\n        cloned.lazyLoad = this.lazyLoad.slice(0);\n        return cloned;\n    }\n    /**\n     * Specifies the name of table to retrieve data in query execution.\n     * @param  {string} tableName - Defines the table name.\n     */\n    from(tableName) {\n        this.fromTable = tableName;\n        return this;\n    }\n    /**\n     * Adds additional parameter which will be sent along with the request which will be generated while DataManager execute.\n     * @param  {string} key - Defines the key of additional parameter.\n     * @param  {Function|string} value - Defines the value for the key.\n     */\n    addParams(key, value) {\n        if (typeof value === 'function') {\n            this.params.push({ key: key, fn: value });\n        }\n        else {\n            this.params.push({ key: key, value: value });\n        }\n        return this;\n    }\n    /**\n     * @hidden\n     */\n    distinct(fields) {\n        if (typeof fields === 'string') {\n            this.distincts = [].slice.call([fields], 0);\n        }\n        else {\n            this.distincts = fields.slice(0);\n        }\n        return this;\n    }\n    /**\n     * Expands the related table.\n     * @param  {string|Object[]} tables\n     */\n    expand(tables) {\n        if (typeof tables === 'string') {\n            this.expands = [].slice.call([tables], 0);\n        }\n        else {\n            this.expands = tables.slice(0);\n        }\n        return this;\n    }\n    /**\n     * Filter data with given filter criteria.\n     * @param  {string|Predicate} fieldName - Defines the column field or Predicate.\n     * @param  {string} operator - Defines the operator how to filter data.\n     * @param  {string|number|boolean} value - Defines the values to match with data.\n     * @param  {boolean} ignoreCase - If ignore case set to false, then filter data with exact match or else\n     * filter data with case insensitive.\n     */\n    where(fieldName, operator, value, ignoreCase, ignoreAccent) {\n        operator = operator ? (operator).toLowerCase() : null;\n        let predicate = null;\n        if (typeof fieldName === 'string') {\n            predicate = new Predicate(fieldName, operator, value, ignoreCase, ignoreAccent);\n        }\n        else if (fieldName instanceof Predicate) {\n            predicate = fieldName;\n        }\n        this.queries.push({\n            fn: 'onWhere',\n            e: predicate\n        });\n        return this;\n    }\n    /**\n     * Search data with given search criteria.\n     * @param  {string|number|boolean} searchKey - Defines the search key.\n     * @param  {string|string[]} fieldNames - Defines the collection of column fields.\n     * @param  {string} operator - Defines the operator how to search data.\n     * @param  {boolean} ignoreCase - If ignore case set to false, then filter data with exact match or else\n     * filter data with case insensitive.\n     */\n    search(searchKey, fieldNames, operator, ignoreCase, ignoreAccent) {\n        if (typeof fieldNames === 'string') {\n            fieldNames = [fieldNames];\n        }\n        if (!operator || operator === 'none') {\n            operator = 'contains';\n        }\n        let comparer = DataUtil.fnOperators[operator];\n        this.queries.push({\n            fn: 'onSearch',\n            e: {\n                fieldNames: fieldNames,\n                operator: operator,\n                searchKey: searchKey,\n                ignoreCase: ignoreCase,\n                ignoreAccent: ignoreAccent,\n                comparer: comparer\n            }\n        });\n        return this;\n    }\n    /**\n     * Sort the data with given sort criteria.\n     * By default, sort direction is ascending.\n     * @param  {string|string[]} fieldName - Defines the single or collection of column fields.\n     * @param  {string|Function} comparer - Defines the sort direction or custom sort comparer function.\n     */\n    sortBy(fieldName, comparer, isFromGroup) {\n        return this.sortByForeignKey(fieldName, comparer, isFromGroup);\n    }\n    /**\n     * Sort the data with given sort criteria.\n     * By default, sort direction is ascending.\n     * @param  {string|string[]} fieldName - Defines the single or collection of column fields.\n     * @param  {string|Function} comparer - Defines the sort direction or custom sort comparer function.\n     * @param  {string} direction - Defines the sort direction .\n     */\n    sortByForeignKey(fieldName, comparer, isFromGroup, direction) {\n        let order = !isNullOrUndefined(direction) ? direction : 'ascending';\n        let sorts;\n        let temp;\n        if (typeof fieldName === 'string' && DataUtil.endsWith(fieldName.toLowerCase(), ' desc')) {\n            fieldName = fieldName.replace(/ desc$/i, '');\n            comparer = 'descending';\n        }\n        if (!comparer || typeof comparer === 'string') {\n            order = comparer ? comparer.toLowerCase() : 'ascending';\n            comparer = DataUtil.fnSort(comparer);\n        }\n        if (isFromGroup) {\n            sorts = Query.filterQueries(this.queries, 'onSortBy');\n            for (let i = 0; i < sorts.length; i++) {\n                temp = sorts[i].e.fieldName;\n                if (typeof temp === 'string') {\n                    if (temp === fieldName) {\n                        return this;\n                    }\n                }\n                else if (temp instanceof Array) {\n                    for (let j = 0; j < temp.length; j++) {\n                        if (temp[j] === fieldName || fieldName.toLowerCase() === temp[j] + ' desc') {\n                            return this;\n                        }\n                    }\n                }\n            }\n        }\n        this.queries.push({\n            fn: 'onSortBy',\n            e: {\n                fieldName: fieldName,\n                comparer: comparer,\n                direction: order\n            }\n        });\n        return this;\n    }\n    /**\n     * Sorts data in descending order.\n     * @param  {string} fieldName - Defines the column field.\n     */\n    sortByDesc(fieldName) {\n        return this.sortBy(fieldName, 'descending');\n    }\n    /**\n     * Groups data with the given field name.\n     * @param  {string} fieldName - Defines the column field.\n     */\n    group(fieldName, fn, format) {\n        this.sortBy(fieldName, null, true);\n        this.queries.push({\n            fn: 'onGroup',\n            e: {\n                fieldName: fieldName,\n                comparer: fn ? fn : null,\n                format: format ? format : null\n            }\n        });\n        return this;\n    }\n    /**\n     * Gets data based on the given page index and size.\n     * @param  {number} pageIndex - Defines the current page index.\n     * @param  {number} pageSize - Defines the no of records per page.\n     */\n    page(pageIndex, pageSize) {\n        this.queries.push({\n            fn: 'onPage',\n            e: {\n                pageIndex: pageIndex,\n                pageSize: pageSize\n            }\n        });\n        return this;\n    }\n    /**\n     * Gets data based on the given start and end index.\n     * @param  {number} start - Defines the start index of the datasource.\n     * @param  {number} end - Defines the end index of the datasource.\n     */\n    range(start, end) {\n        this.queries.push({\n            fn: 'onRange',\n            e: {\n                start: start,\n                end: end\n            }\n        });\n        return this;\n    }\n    /**\n     * Gets data from the top of the data source based on given number of records count.\n     * @param  {number} nos - Defines the no of records to retrieve from datasource.\n     */\n    take(nos) {\n        this.queries.push({\n            fn: 'onTake',\n            e: {\n                nos: nos\n            }\n        });\n        return this;\n    }\n    /**\n     * Skips data with given number of records count from the top of the data source.\n     * @param  {number} nos - Defines the no of records skip in the datasource.\n     */\n    skip(nos) {\n        this.queries.push({\n            fn: 'onSkip',\n            e: { nos: nos }\n        });\n        return this;\n    }\n    /**\n     * Selects specified columns from the data source.\n     * @param  {string|string[]} fieldNames - Defines the collection of column fields.\n     */\n    select(fieldNames) {\n        if (typeof fieldNames === 'string') {\n            fieldNames = [].slice.call([fieldNames], 0);\n        }\n        this.queries.push({\n            fn: 'onSelect',\n            e: { fieldNames: fieldNames }\n        });\n        return this;\n    }\n    /**\n     * Gets the records in hierarchical relationship from two tables. It requires the foreign key to relate two tables.\n     * @param  {Query} query - Defines the query to relate two tables.\n     * @param  {Function} selectorFn - Defines the custom function to select records.\n     */\n    hierarchy(query, selectorFn) {\n        this.subQuerySelector = selectorFn;\n        this.subQuery = query;\n        return this;\n    }\n    /**\n     * Sets the foreign key which is used to get data from the related table.\n     * @param  {string} key - Defines the foreign key.\n     */\n    foreignKey(key) {\n        this.fKey = key;\n        return this;\n    }\n    /**\n     * It is used to get total number of records in the DataManager execution result.\n     */\n    requiresCount() {\n        this.isCountRequired = true;\n        return this;\n    }\n    //type - sum, avg, min, max\n    /**\n     * Aggregate the data with given type and field name.\n     * @param  {string} type - Defines the aggregate type.\n     * @param  {string} field - Defines the column field to aggregate.\n     */\n    aggregate(type, field) {\n        this.queries.push({\n            fn: 'onAggregates',\n            e: { field: field, type: type }\n        });\n        return this;\n    }\n    /**\n     * Pass array of filterColumn query for performing filter operation.\n     * @param  {QueryOptions[]} queries\n     * @param  {string} name\n     * @hidden\n     */\n    static filterQueries(queries, name) {\n        return queries.filter((q) => {\n            return q.fn === name;\n        });\n    }\n    /**\n     * To get the list of queries which is already filtered in current data source.\n     * @param  {Object[]} queries\n     * @param  {string[]} singles\n     * @hidden\n     */\n    static filterQueryLists(queries, singles) {\n        let filtered = queries.filter((q) => {\n            return singles.indexOf(q.fn) !== -1;\n        });\n        let res = {};\n        for (let i = 0; i < filtered.length; i++) {\n            if (!res[filtered[i].fn]) {\n                res[filtered[i].fn] = filtered[i].e;\n            }\n        }\n        return res;\n    }\n}\n/**\n * Predicate class is used to generate complex filter criteria.\n * This will be used by DataManager to perform multiple filtering operation.\n */\nclass Predicate {\n    /**\n     * Constructor for Predicate class.\n     * @param  {string|Predicate} field\n     * @param  {string} operator\n     * @param  {string|number|boolean|Predicate|Predicate[]} value\n     * @param  {boolean=false} ignoreCase\n     * @hidden\n     */\n    constructor(field, operator, value, ignoreCase = false, ignoreAccent) {\n        /** @hidden */\n        this.ignoreAccent = false;\n        /** @hidden */\n        this.isComplex = false;\n        if (typeof field === 'string') {\n            this.field = field;\n            this.operator = operator.toLowerCase();\n            this.value = value;\n            this.ignoreCase = ignoreCase;\n            this.ignoreAccent = ignoreAccent;\n            this.isComplex = false;\n            this.comparer = DataUtil.fnOperators.processOperator(this.operator);\n        }\n        else if (field instanceof Predicate && value instanceof Predicate || value instanceof Array) {\n            this.isComplex = true;\n            this.condition = operator.toLowerCase();\n            this.predicates = [field];\n            if (value instanceof Array) {\n                [].push.apply(this.predicates, value);\n            }\n            else {\n                this.predicates.push(value);\n            }\n        }\n        return this;\n    }\n    /**\n     * Adds n-number of new predicates on existing predicate with “and” condition.\n     * @param  {Object[]} args - Defines the collection of predicates.\n     */\n    static and(...args) {\n        return Predicate.combinePredicates([].slice.call(args, 0), 'and');\n    }\n    /**\n     * Adds new predicate on existing predicate with “and” condition.\n     * @param  {string} field - Defines the column field.\n     * @param  {string} operator - Defines the operator how to filter data.\n     * @param  {string} value - Defines the values to match with data.\n     * @param  {boolean} ignoreCase? - If ignore case set to false, then filter data with exact match or else\n     * filter data with case insensitive.\n     */\n    and(field, operator, value, ignoreCase, ignoreAccent) {\n        return Predicate.combine(this, field, operator, value, 'and', ignoreCase, ignoreAccent);\n    }\n    /**\n     * Adds n-number of new predicates on existing predicate with “or” condition.\n     * @param  {Object[]} args - Defines the collection of predicates.\n     */\n    static or(...args) {\n        return Predicate.combinePredicates([].slice.call(args, 0), 'or');\n    }\n    /**\n     * Adds new predicate on existing predicate with “or” condition.\n     * @param  {string} field - Defines the column field.\n     * @param  {string} operator - Defines the operator how to filter data.\n     * @param  {string} value - Defines the values to match with data.\n     * @param  {boolean} ignoreCase? - If ignore case set to false, then filter data with exact match or else\n     * filter data with case insensitive.\n     */\n    or(field, operator, value, ignoreCase, ignoreAccent) {\n        return Predicate.combine(this, field, operator, value, 'or', ignoreCase, ignoreAccent);\n    }\n    /**\n     * Converts plain JavaScript object to Predicate object.\n     * @param  {Predicate[]|Predicate} json - Defines single or collection of Predicate.\n     */\n    static fromJson(json) {\n        if (json instanceof Array) {\n            let res = [];\n            for (let i = 0, len = json.length; i < len; i++) {\n                res.push(this.fromJSONData(json[i]));\n            }\n            return res;\n        }\n        let pred = json;\n        return this.fromJSONData(pred);\n    }\n    /**\n     * Validate the record based on the predicates.\n     * @param  {Object} record - Defines the datasource record.\n     */\n    validate(record) {\n        let predicate = this.predicates ? this.predicates : [];\n        let isAnd;\n        let ret;\n        if (!this.isComplex && this.comparer) {\n            return this.comparer.call(this, DataUtil.getObject(this.field, record), this.value, this.ignoreCase, this.ignoreAccent);\n        }\n        isAnd = this.condition === 'and';\n        for (let i = 0; i < predicate.length; i++) {\n            ret = predicate[i].validate(record);\n            if (isAnd) {\n                if (!ret) {\n                    return false;\n                }\n            }\n            else {\n                if (ret) {\n                    return true;\n                }\n            }\n        }\n        return isAnd;\n    }\n    /**\n     * Converts predicates to plain JavaScript.\n     * This method is uses Json stringify when serializing Predicate object.\n     */\n    toJson() {\n        let predicates;\n        let p;\n        if (this.isComplex) {\n            predicates = [];\n            p = this.predicates;\n            for (let i = 0; i < p.length; i++) {\n                predicates.push(p[i].toJson());\n            }\n        }\n        return {\n            isComplex: this.isComplex,\n            field: this.field,\n            operator: this.operator,\n            value: this.value,\n            ignoreCase: this.ignoreCase,\n            ignoreAccent: this.ignoreAccent,\n            condition: this.condition,\n            predicates: predicates\n        };\n    }\n    static combinePredicates(predicates, operator) {\n        if (predicates.length === 1) {\n            if (!(predicates[0] instanceof Array)) {\n                return predicates[0];\n            }\n            predicates = predicates[0];\n        }\n        return new Predicate(predicates[0], operator, predicates.slice(1));\n    }\n    static combine(pred, field, operator, value, condition, ignoreCase, ignoreAccent) {\n        if (field instanceof Predicate) {\n            return Predicate[condition](pred, field);\n        }\n        if (typeof field === 'string') {\n            return Predicate[condition](pred, new Predicate(field, operator, value, ignoreCase, ignoreAccent));\n        }\n        return DataUtil.throwError('Predicate - ' + condition + ' : invalid arguments');\n    }\n    static fromJSONData(json) {\n        let preds = json.predicates || [];\n        let len = preds.length;\n        let predicates = [];\n        let result;\n        for (let i = 0; i < len; i++) {\n            predicates.push(this.fromJSONData(preds[i]));\n        }\n        if (!json.isComplex) {\n            result = new Predicate(json.field, json.operator, json.value, json.ignoreCase, json.ignoreAccent);\n        }\n        else {\n            result = new Predicate(predicates[0], json.condition, predicates.slice(1));\n        }\n        return result;\n    }\n}\n\nconst consts = { GroupGuid: '{271bbba0-1ee7}' };\n/**\n * Data manager common utility methods.\n * @hidden\n */\nclass DataUtil {\n    /**\n     * Returns the value by invoking the provided parameter function.\n     * If the paramater is not of type function then it will be returned as it is.\n     * @param  {Function|string|string[]|number} value\n     * @param  {Object} inst?\n     * @hidden\n     */\n    static getValue(value, inst) {\n        if (typeof value === 'function') {\n            return value.call(inst || {});\n        }\n        return value;\n    }\n    /**\n     * Returns true if the input string ends with given string.\n     * @param  {string} input\n     * @param  {string} substr\n     */\n    static endsWith(input, substr) {\n        return input.slice && input.slice(-substr.length) === substr;\n    }\n    /**\n     * Returns true if the input string starts with given string.\n     * @param  {string} str\n     * @param  {string} startstr\n     */\n    static startsWith(input, start) {\n        return input.slice(0, start.length) === start;\n    }\n    /**\n     * To return the sorting function based on the string.\n     * @param  {string} order\n     * @hidden\n     */\n    static fnSort(order) {\n        order = order ? DataUtil.toLowerCase(order) : 'ascending';\n        if (order === 'ascending') {\n            return this.fnAscending;\n        }\n        return this.fnDescending;\n    }\n    /**\n     * Comparer function which is used to sort the data in ascending order.\n     * @param  {string|number} x\n     * @param  {string|number} y\n     * @returns number\n     */\n    static fnAscending(x, y) {\n        if (isNullOrUndefined(x) && isNullOrUndefined(y)) {\n            return -1;\n        }\n        if (y === null || y === undefined) {\n            return -1;\n        }\n        if (typeof x === 'string') {\n            return x.localeCompare(y);\n        }\n        if (x === null || x === undefined) {\n            return 1;\n        }\n        return x - y;\n    }\n    /**\n     * Comparer function which is used to sort the data in descending order.\n     * @param  {string|number} x\n     * @param  {string|number} y\n     * @returns number\n     */\n    static fnDescending(x, y) {\n        if (isNullOrUndefined(x) && isNullOrUndefined(y)) {\n            return -1;\n        }\n        if (y === null || y === undefined) {\n            return 1;\n        }\n        if (typeof x === 'string') {\n            return x.localeCompare(y) * -1;\n        }\n        if (x === null || x === undefined) {\n            return -1;\n        }\n        return y - x;\n    }\n    static extractFields(obj, fields) {\n        let newObj = {};\n        for (let i = 0; i < fields.length; i++) {\n            newObj = this.setValue(fields[i], this.getObject(fields[i], obj), newObj);\n        }\n        return newObj;\n    }\n    /**\n     * Select objects by given fields from jsonArray.\n     * @param  {Object[]} jsonArray\n     * @param  {string[]} fields\n     */\n    static select(jsonArray, fields) {\n        let newData = [];\n        for (let i = 0; i < jsonArray.length; i++) {\n            newData.push(this.extractFields(jsonArray[i], fields));\n        }\n        return newData;\n    }\n    /**\n     * Group the input data based on the field name.\n     * It also performs aggregation of the grouped records based on the aggregates paramater.\n     * @param  {Object[]} jsonArray\n     * @param  {string} field?\n     * @param  {Object[]} agg?\n     * @param  {number} level?\n     * @param  {Object[]} groupDs?\n     */\n    static group(jsonArray, field, aggregates, level, groupDs, format, isLazyLoad) {\n        level = level || 1;\n        let jsonData = jsonArray;\n        let guid = 'GroupGuid';\n        if (jsonData.GroupGuid === consts[guid]) {\n            for (let j = 0; j < jsonData.length; j++) {\n                if (!isNullOrUndefined(groupDs)) {\n                    let indx = -1;\n                    let temp = groupDs.filter((e) => { return e.key === jsonData[j].key; });\n                    indx = groupDs.indexOf(temp[0]);\n                    jsonData[j].items = this.group(jsonData[j].items, field, aggregates, jsonData.level + 1, groupDs[indx].items, format, isLazyLoad);\n                    jsonData[j].count = groupDs[indx].count;\n                }\n                else {\n                    jsonData[j].items = this.group(jsonData[j].items, field, aggregates, jsonData.level + 1, null, format, isLazyLoad);\n                    jsonData[j].count = jsonData[j].items.length;\n                }\n            }\n            jsonData.childLevels += 1;\n            return jsonData;\n        }\n        let grouped = {};\n        let groupedArray = [];\n        groupedArray.GroupGuid = consts[guid];\n        groupedArray.level = level;\n        groupedArray.childLevels = 0;\n        groupedArray.records = jsonData;\n        for (let i = 0; i < jsonData.length; i++) {\n            let val = this.getVal(jsonData, i, field);\n            if (!isNullOrUndefined(format)) {\n                val = format(val, field);\n            }\n            if (!grouped[val]) {\n                grouped[val] = {\n                    key: val,\n                    count: 0,\n                    items: [],\n                    aggregates: {},\n                    field: field\n                };\n                groupedArray.push(grouped[val]);\n                if (!isNullOrUndefined(groupDs)) {\n                    let tempObj = groupDs.filter((e) => { return e.key === grouped[val].key; });\n                    grouped[val].count = tempObj[0].count;\n                }\n            }\n            grouped[val].count = !isNullOrUndefined(groupDs) ? grouped[val].count : grouped[val].count += 1;\n            if (!isLazyLoad || (isLazyLoad && aggregates.length)) {\n                grouped[val].items.push(jsonData[i]);\n            }\n        }\n        if (aggregates && aggregates.length) {\n            for (let i = 0; i < groupedArray.length; i++) {\n                let res = {};\n                let fn;\n                let aggs = aggregates;\n                for (let j = 0; j < aggregates.length; j++) {\n                    fn = DataUtil.aggregates[aggregates[j].type];\n                    if (!isNullOrUndefined(groupDs)) {\n                        let temp = groupDs.filter((e) => { return e.key === groupedArray[i].key; });\n                        if (fn) {\n                            res[aggs[j].field + ' - ' + aggs[j].type] = fn(temp[0].items, aggs[j].field);\n                        }\n                    }\n                    else {\n                        if (fn) {\n                            res[aggs[j].field + ' - ' + aggs[j].type] = fn(groupedArray[i].items, aggs[j].field);\n                        }\n                    }\n                }\n                groupedArray[i].aggregates = res;\n            }\n        }\n        if (isLazyLoad && groupedArray.length && aggregates.length) {\n            for (let i = 0; i < groupedArray.length; i++) {\n                groupedArray[i].items = [];\n            }\n        }\n        return jsonData.length && groupedArray || jsonData;\n    }\n    /**\n     * It is used to categorize the multiple items based on a specific field in jsonArray.\n     * The hierarchical queries are commonly required when you use foreign key binding.\n     * @param  {string} fKey\n     * @param  {string} from\n     * @param  {Object[]} source\n     * @param  {Group} lookup?\n     * @param  {string} pKey?\n     * @hidden\n     */\n    static buildHierarchy(fKey, from, source, lookup, pKey) {\n        let i;\n        let grp = {};\n        let temp;\n        if (lookup.result) {\n            lookup = lookup.result;\n        }\n        if (lookup.GroupGuid) {\n            this.throwError('DataManager: Do not have support Grouping in hierarchy');\n        }\n        for (i = 0; i < lookup.length; i++) {\n            let fKeyData = this.getObject(fKey, lookup[i]);\n            temp = grp[fKeyData] || (grp[fKeyData] = []);\n            temp.push(lookup[i]);\n        }\n        for (i = 0; i < source.length; i++) {\n            let fKeyData = this.getObject(pKey || fKey, source[i]);\n            source[i][from] = grp[fKeyData];\n        }\n    }\n    /**\n     * The method used to get the field names which started with specified characters.\n     * @param  {Object} obj\n     * @param  {string[]} fields?\n     * @param  {string} prefix?\n     * @hidden\n     */\n    static getFieldList(obj, fields, prefix) {\n        if (prefix === undefined) {\n            prefix = '';\n        }\n        if (fields === undefined || fields === null) {\n            return this.getFieldList(obj, [], prefix);\n        }\n        let copyObj = obj;\n        let keys = Object.keys(obj);\n        for (let prop of keys) {\n            if (typeof copyObj[prop] === 'object' && !(copyObj[prop] instanceof Array)) {\n                this.getFieldList(copyObj[prop], fields, prefix + prop + '.');\n            }\n            else {\n                fields.push(prefix + prop);\n            }\n        }\n        return fields;\n    }\n    /**\n     * Gets the value of the property in the given object.\n     * The complex object can be accessed by providing the field names concatenated with dot(.).\n     * @param  {string} nameSpace - The name of the property to be accessed.\n     * @param  {Object} from - Defines the source object.\n     */\n    static getObject(nameSpace, from) {\n        if (!nameSpace) {\n            return from;\n        }\n        if (!from) {\n            return undefined;\n        }\n        if (nameSpace.indexOf('.') === -1) {\n            return from[nameSpace];\n        }\n        let value = from;\n        let splits = nameSpace.split('.');\n        for (let i = 0; i < splits.length; i++) {\n            if (value == null) {\n                break;\n            }\n            value = value[splits[i]];\n        }\n        return value;\n    }\n    /**\n     * To set value for the nameSpace in desired object.\n     * @param {string} nameSpace - String value to the get the inner object.\n     * @param {Object} value - Value that you need to set.\n     * @param {Object} obj - Object to get the inner object value.\n     * @return { [key: string]: Object; } | Object\n     * @hidden\n     */\n    static setValue(nameSpace, value, obj) {\n        let keys = nameSpace.toString().split('.');\n        let start = obj || {};\n        let fromObj = start;\n        let i;\n        let length = keys.length;\n        let key;\n        for (i = 0; i < length; i++) {\n            key = keys[i];\n            if (i + 1 === length) {\n                fromObj[key] = value === undefined ? undefined : value;\n            }\n            else if (isNullOrUndefined(fromObj[key])) {\n                fromObj[key] = {};\n            }\n            fromObj = fromObj[key];\n        }\n        return start;\n    }\n    /**\n     * Sort the given data based on the field and comparer.\n     * @param  {Object[]} ds - Defines the input data.\n     * @param  {string} field - Defines the field to be sorted.\n     * @param  {Function} comparer - Defines the comparer function used to sort the records.\n     */\n    static sort(ds, field, comparer) {\n        if (ds.length <= 1) {\n            return ds;\n        }\n        let middle = parseInt((ds.length / 2).toString(), 10);\n        let left = ds.slice(0, middle);\n        let right = ds.slice(middle);\n        left = this.sort(left, field, comparer);\n        right = this.sort(right, field, comparer);\n        return this.merge(left, right, field, comparer);\n    }\n    static ignoreDiacritics(value) {\n        if (typeof value !== 'string') {\n            return value;\n        }\n        let result = value.split('');\n        let newValue = result.map((temp) => temp in DataUtil.diacritics ? DataUtil.diacritics[temp] : temp);\n        return newValue.join('');\n    }\n    static merge(left, right, fieldName, comparer) {\n        let result = [];\n        let current;\n        while (left.length > 0 || right.length > 0) {\n            if (left.length > 0 && right.length > 0) {\n                if (comparer) {\n                    current = comparer(this.getVal(left, 0, fieldName), this.getVal(right, 0, fieldName), left[0], right[0]) <= 0 ? left : right;\n                }\n                else {\n                    current = left[0][fieldName] < left[0][fieldName] ? left : right;\n                }\n            }\n            else {\n                current = left.length > 0 ? left : right;\n            }\n            result.push(current.shift());\n        }\n        return result;\n    }\n    static getVal(array, index, field) {\n        return field ? this.getObject(field, array[index]) : array[index];\n    }\n    static toLowerCase(val) {\n        return val ? typeof val === 'string' ? val.toLowerCase() : val.toString() : (val === 0 || val === false) ? val.toString() : '';\n    }\n    /**\n     * To perform the filter operation with specified adaptor and returns the result.\n     * @param  {Object} adaptor\n     * @param  {string} fnName\n     * @param  {Object} param1?\n     * @param  {Object} param2?\n     * @hidden\n     */\n    static callAdaptorFunction(adaptor, fnName, param1, param2) {\n        if (fnName in adaptor) {\n            let res = adaptor[fnName](param1, param2);\n            if (!isNullOrUndefined(res)) {\n                param1 = res;\n            }\n        }\n        return param1;\n    }\n    static getAddParams(adp, dm, query) {\n        let req = {};\n        DataUtil.callAdaptorFunction(adp, 'addParams', {\n            dm: dm,\n            query: query,\n            params: query.params,\n            reqParams: req\n        });\n        return req;\n    }\n    /**\n     * Checks wheather the given input is a plain object or not.\n     * @param  {Object|Object[]} obj\n     */\n    static isPlainObject(obj) {\n        return (!!obj) && (obj.constructor === Object);\n    }\n    /**\n     * Returns true when the browser cross origin request.\n     */\n    static isCors() {\n        let xhr = null;\n        let request = 'XMLHttpRequest';\n        try {\n            xhr = new window[request]();\n        }\n        catch (e) {\n            // No exception handling\n        }\n        return !!xhr && ('withCredentials' in xhr);\n    }\n    /**\n     * Generate random GUID value which will be prefixed with the given value.\n     * @param  {string} prefix\n     */\n    static getGuid(prefix) {\n        let hexs = '0123456789abcdef';\n        let rand;\n        return (prefix || '') + '00000000-0000-4000-0000-000000000000'.replace(/0/g, (val, i) => {\n            if ('crypto' in window && 'getRandomValues' in crypto) {\n                let arr = new Uint8Array(1);\n                window.crypto.getRandomValues(arr);\n                rand = arr[0] % 16 | 0;\n            }\n            else {\n                rand = Math.random() * 16 | 0;\n            }\n            return hexs[i === 19 ? rand & 0x3 | 0x8 : rand];\n        });\n    }\n    /**\n     * Checks wheather the given value is null or not.\n     * @param  {string|Object} val\n     * @returns boolean\n     */\n    static isNull(val) {\n        return val === undefined || val === null;\n    }\n    /**\n     * To get the required items from collection of objects.\n     * @param  {Object[]} array\n     * @param  {string} field\n     * @param  {Function} comparer\n     * @returns Object\n     * @hidden\n     */\n    static getItemFromComparer(array, field, comparer) {\n        let keyVal;\n        let current;\n        let key;\n        let i = 0;\n        let castRequired = typeof DataUtil.getVal(array, 0, field) === 'string';\n        if (array.length) {\n            while (isNullOrUndefined(keyVal) && i < array.length) {\n                keyVal = DataUtil.getVal(array, i, field);\n                key = array[i++];\n            }\n        }\n        for (; i < array.length; i++) {\n            current = DataUtil.getVal(array, i, field);\n            if (isNullOrUndefined(current)) {\n                continue;\n            }\n            if (castRequired) {\n                keyVal = +keyVal;\n                current = +current;\n            }\n            if (comparer(keyVal, current) > 0) {\n                keyVal = current;\n                key = array[i];\n            }\n        }\n        return key;\n    }\n    /**\n     * To get distinct values of Array or Array of Objects.\n     * @param  {Object[]} json\n     * @param  {string} field\n     * @param  {boolean} requiresCompleteRecord\n     * @returns Object[]\n     * * distinct array of objects is return when requiresCompleteRecord set as true.\n     * @hidden\n     */\n    static distinct(json, fieldName, requiresCompleteRecord) {\n        requiresCompleteRecord = isNullOrUndefined(requiresCompleteRecord) ? false : requiresCompleteRecord;\n        let result = [];\n        let val;\n        let tmp = {};\n        json.forEach((data, index) => {\n            val = typeof (json[index]) === 'object' ? DataUtil.getVal(json, index, fieldName) : json[index];\n            if (!(val in tmp)) {\n                result.push(!requiresCompleteRecord ? val : json[index]);\n                tmp[val] = 1;\n            }\n        });\n        return result;\n    }\n}\n/**\n * Specifies the value which will be used to adjust the date value to server timezone.\n * @default null\n */\nDataUtil.serverTimezoneOffset = null;\n/**\n * Species whether are not to be parsed with serverTimezoneOffset value.\n * @hidden\n */\nDataUtil.timeZoneHandling = true;\n/**\n * Throw error with the given string as message.\n * @param  {string} er\n */\nDataUtil.throwError = (error) => {\n    try {\n        throw new Error(error);\n    }\n    catch (e) {\n        throw e.message + '\\n' + e.stack;\n    }\n};\nDataUtil.aggregates = {\n    /**\n     * Calculate sum of the given field in the data.\n     * @param  {Object[]} ds\n     * @param  {string} field\n     */\n    sum: (ds, field) => {\n        let result = 0;\n        let val;\n        let castRequired = typeof DataUtil.getVal(ds, 0, field) !== 'number';\n        for (let i = 0; i < ds.length; i++) {\n            val = DataUtil.getVal(ds, i, field);\n            if (!isNaN(val) && val !== null) {\n                if (castRequired) {\n                    val = +val;\n                }\n                result += val;\n            }\n        }\n        return result;\n    },\n    /**\n     * Calculate average value of the given field in the data.\n     * @param  {Object[]} ds\n     * @param  {string} field\n     */\n    average: (ds, field) => {\n        return DataUtil.aggregates.sum(ds, field) / ds.length;\n    },\n    /**\n     * Returns the min value of the data based on the field.\n     * @param  {Object[]} ds\n     * @param  {string|Function} field\n     */\n    min: (ds, field) => {\n        let comparer;\n        if (typeof field === 'function') {\n            comparer = field;\n            field = null;\n        }\n        return DataUtil.getObject(field, DataUtil.getItemFromComparer(ds, field, comparer || DataUtil.fnAscending));\n    },\n    /**\n     * Returns the max value of the data based on the field.\n     * @param  {Object[]} ds\n     * @param  {string} field\n     * @returns number\n     */\n    max: (ds, field) => {\n        let comparer;\n        if (typeof field === 'function') {\n            comparer = field;\n            field = null;\n        }\n        return DataUtil.getObject(field, DataUtil.getItemFromComparer(ds, field, comparer || DataUtil.fnDescending));\n    },\n    /**\n     * Returns the total number of true value present in the data based on the given boolean field name.\n     * @param  {Object[]} ds\n     * @param  {string} field\n     */\n    truecount: (ds, field) => {\n        return new DataManager(ds).executeLocal(new Query().where(field, 'equal', true, true)).length;\n    },\n    /**\n     * Returns the total number of false value present in the data based on the given boolean field name.\n     * @param  {Object[]} ds\n     * @param  {string} field\n     */\n    falsecount: (ds, field) => {\n        return new DataManager(ds).executeLocal(new Query().where(field, 'equal', false, true)).length;\n    },\n    /**\n     * Returns the length of the given data.\n     * @param  {Object[]} ds\n     * @param  {string} field?\n     * @returns number\n     */\n    count: (ds, field) => {\n        return ds.length;\n    }\n};\n/**\n * Specifies the Object with filter operators.\n */\nDataUtil.operatorSymbols = {\n    '<': 'lessthan',\n    '>': 'greaterthan',\n    '<=': 'lessthanorequal',\n    '>=': 'greaterthanorequal',\n    '==': 'equal',\n    '!=': 'notequal',\n    '*=': 'contains',\n    '$=': 'endswith',\n    '^=': 'startswith'\n};\n/**\n * Specifies the Object with filter operators which will be used for OData filter query generation.\n * * It will be used for date/number type filter query.\n */\nDataUtil.odBiOperator = {\n    '<': ' lt ',\n    '>': ' gt ',\n    '<=': ' le ',\n    '>=': ' ge ',\n    '==': ' eq ',\n    '!=': ' ne ',\n    'lessthan': ' lt ',\n    'lessthanorequal': ' le ',\n    'greaterthan': ' gt ',\n    'greaterthanorequal': ' ge ',\n    'equal': ' eq ',\n    'notequal': ' ne '\n};\n/**\n * Specifies the Object with filter operators which will be used for OData filter query generation.\n * It will be used for string type filter query.\n */\nDataUtil.odUniOperator = {\n    '$=': 'endswith',\n    '^=': 'startswith',\n    '*=': 'substringof',\n    'endswith': 'endswith',\n    'startswith': 'startswith',\n    'contains': 'substringof'\n};\n/**\n * Specifies the Object with filter operators which will be used for ODataV4 filter query generation.\n * It will be used for string type filter query.\n */\nDataUtil.odv4UniOperator = {\n    '$=': 'endswith',\n    '^=': 'startswith',\n    '*=': 'contains',\n    'endswith': 'endswith',\n    'startswith': 'startswith',\n    'contains': 'contains'\n};\nDataUtil.diacritics = {\n    '\\u24B6': 'A',\n    '\\uFF21': 'A',\n    '\\u00C0': 'A',\n    '\\u00C1': 'A',\n    '\\u00C2': 'A',\n    '\\u1EA6': 'A',\n    '\\u1EA4': 'A',\n    '\\u1EAA': 'A',\n    '\\u1EA8': 'A',\n    '\\u00C3': 'A',\n    '\\u0100': 'A',\n    '\\u0102': 'A',\n    '\\u1EB0': 'A',\n    '\\u1EAE': 'A',\n    '\\u1EB4': 'A',\n    '\\u1EB2': 'A',\n    '\\u0226': 'A',\n    '\\u01E0': 'A',\n    '\\u00C4': 'A',\n    '\\u01DE': 'A',\n    '\\u1EA2': 'A',\n    '\\u00C5': 'A',\n    '\\u01FA': 'A',\n    '\\u01CD': 'A',\n    '\\u0200': 'A',\n    '\\u0202': 'A',\n    '\\u1EA0': 'A',\n    '\\u1EAC': 'A',\n    '\\u1EB6': 'A',\n    '\\u1E00': 'A',\n    '\\u0104': 'A',\n    '\\u023A': 'A',\n    '\\u2C6F': 'A',\n    '\\uA732': 'AA',\n    '\\u00C6': 'AE',\n    '\\u01FC': 'AE',\n    '\\u01E2': 'AE',\n    '\\uA734': 'AO',\n    '\\uA736': 'AU',\n    '\\uA738': 'AV',\n    '\\uA73A': 'AV',\n    '\\uA73C': 'AY',\n    '\\u24B7': 'B',\n    '\\uFF22': 'B',\n    '\\u1E02': 'B',\n    '\\u1E04': 'B',\n    '\\u1E06': 'B',\n    '\\u0243': 'B',\n    '\\u0182': 'B',\n    '\\u0181': 'B',\n    '\\u24B8': 'C',\n    '\\uFF23': 'C',\n    '\\u0106': 'C',\n    '\\u0108': 'C',\n    '\\u010A': 'C',\n    '\\u010C': 'C',\n    '\\u00C7': 'C',\n    '\\u1E08': 'C',\n    '\\u0187': 'C',\n    '\\u023B': 'C',\n    '\\uA73E': 'C',\n    '\\u24B9': 'D',\n    '\\uFF24': 'D',\n    '\\u1E0A': 'D',\n    '\\u010E': 'D',\n    '\\u1E0C': 'D',\n    '\\u1E10': 'D',\n    '\\u1E12': 'D',\n    '\\u1E0E': 'D',\n    '\\u0110': 'D',\n    '\\u018B': 'D',\n    '\\u018A': 'D',\n    '\\u0189': 'D',\n    '\\uA779': 'D',\n    '\\u01F1': 'DZ',\n    '\\u01C4': 'DZ',\n    '\\u01F2': 'Dz',\n    '\\u01C5': 'Dz',\n    '\\u24BA': 'E',\n    '\\uFF25': 'E',\n    '\\u00C8': 'E',\n    '\\u00C9': 'E',\n    '\\u00CA': 'E',\n    '\\u1EC0': 'E',\n    '\\u1EBE': 'E',\n    '\\u1EC4': 'E',\n    '\\u1EC2': 'E',\n    '\\u1EBC': 'E',\n    '\\u0112': 'E',\n    '\\u1E14': 'E',\n    '\\u1E16': 'E',\n    '\\u0114': 'E',\n    '\\u0116': 'E',\n    '\\u00CB': 'E',\n    '\\u1EBA': 'E',\n    '\\u011A': 'E',\n    '\\u0204': 'E',\n    '\\u0206': 'E',\n    '\\u1EB8': 'E',\n    '\\u1EC6': 'E',\n    '\\u0228': 'E',\n    '\\u1E1C': 'E',\n    '\\u0118': 'E',\n    '\\u1E18': 'E',\n    '\\u1E1A': 'E',\n    '\\u0190': 'E',\n    '\\u018E': 'E',\n    '\\u24BB': 'F',\n    '\\uFF26': 'F',\n    '\\u1E1E': 'F',\n    '\\u0191': 'F',\n    '\\uA77B': 'F',\n    '\\u24BC': 'G',\n    '\\uFF27': 'G',\n    '\\u01F4': 'G',\n    '\\u011C': 'G',\n    '\\u1E20': 'G',\n    '\\u011E': 'G',\n    '\\u0120': 'G',\n    '\\u01E6': 'G',\n    '\\u0122': 'G',\n    '\\u01E4': 'G',\n    '\\u0193': 'G',\n    '\\uA7A0': 'G',\n    '\\uA77D': 'G',\n    '\\uA77E': 'G',\n    '\\u24BD': 'H',\n    '\\uFF28': 'H',\n    '\\u0124': 'H',\n    '\\u1E22': 'H',\n    '\\u1E26': 'H',\n    '\\u021E': 'H',\n    '\\u1E24': 'H',\n    '\\u1E28': 'H',\n    '\\u1E2A': 'H',\n    '\\u0126': 'H',\n    '\\u2C67': 'H',\n    '\\u2C75': 'H',\n    '\\uA78D': 'H',\n    '\\u24BE': 'I',\n    '\\uFF29': 'I',\n    '\\u00CC': 'I',\n    '\\u00CD': 'I',\n    '\\u00CE': 'I',\n    '\\u0128': 'I',\n    '\\u012A': 'I',\n    '\\u012C': 'I',\n    '\\u0130': 'I',\n    '\\u00CF': 'I',\n    '\\u1E2E': 'I',\n    '\\u1EC8': 'I',\n    '\\u01CF': 'I',\n    '\\u0208': 'I',\n    '\\u020A': 'I',\n    '\\u1ECA': 'I',\n    '\\u012E': 'I',\n    '\\u1E2C': 'I',\n    '\\u0197': 'I',\n    '\\u24BF': 'J',\n    '\\uFF2A': 'J',\n    '\\u0134': 'J',\n    '\\u0248': 'J',\n    '\\u24C0': 'K',\n    '\\uFF2B': 'K',\n    '\\u1E30': 'K',\n    '\\u01E8': 'K',\n    '\\u1E32': 'K',\n    '\\u0136': 'K',\n    '\\u1E34': 'K',\n    '\\u0198': 'K',\n    '\\u2C69': 'K',\n    '\\uA740': 'K',\n    '\\uA742': 'K',\n    '\\uA744': 'K',\n    '\\uA7A2': 'K',\n    '\\u24C1': 'L',\n    '\\uFF2C': 'L',\n    '\\u013F': 'L',\n    '\\u0139': 'L',\n    '\\u013D': 'L',\n    '\\u1E36': 'L',\n    '\\u1E38': 'L',\n    '\\u013B': 'L',\n    '\\u1E3C': 'L',\n    '\\u1E3A': 'L',\n    '\\u0141': 'L',\n    '\\u023D': 'L',\n    '\\u2C62': 'L',\n    '\\u2C60': 'L',\n    '\\uA748': 'L',\n    '\\uA746': 'L',\n    '\\uA780': 'L',\n    '\\u01C7': 'LJ',\n    '\\u01C8': 'Lj',\n    '\\u24C2': 'M',\n    '\\uFF2D': 'M',\n    '\\u1E3E': 'M',\n    '\\u1E40': 'M',\n    '\\u1E42': 'M',\n    '\\u2C6E': 'M',\n    '\\u019C': 'M',\n    '\\u24C3': 'N',\n    '\\uFF2E': 'N',\n    '\\u01F8': 'N',\n    '\\u0143': 'N',\n    '\\u00D1': 'N',\n    '\\u1E44': 'N',\n    '\\u0147': 'N',\n    '\\u1E46': 'N',\n    '\\u0145': 'N',\n    '\\u1E4A': 'N',\n    '\\u1E48': 'N',\n    '\\u0220': 'N',\n    '\\u019D': 'N',\n    '\\uA790': 'N',\n    '\\uA7A4': 'N',\n    '\\u01CA': 'NJ',\n    '\\u01CB': 'Nj',\n    '\\u24C4': 'O',\n    '\\uFF2F': 'O',\n    '\\u00D2': 'O',\n    '\\u00D3': 'O',\n    '\\u00D4': 'O',\n    '\\u1ED2': 'O',\n    '\\u1ED0': 'O',\n    '\\u1ED6': 'O',\n    '\\u1ED4': 'O',\n    '\\u00D5': 'O',\n    '\\u1E4C': 'O',\n    '\\u022C': 'O',\n    '\\u1E4E': 'O',\n    '\\u014C': 'O',\n    '\\u1E50': 'O',\n    '\\u1E52': 'O',\n    '\\u014E': 'O',\n    '\\u022E': 'O',\n    '\\u0230': 'O',\n    '\\u00D6': 'O',\n    '\\u022A': 'O',\n    '\\u1ECE': 'O',\n    '\\u0150': 'O',\n    '\\u01D1': 'O',\n    '\\u020C': 'O',\n    '\\u020E': 'O',\n    '\\u01A0': 'O',\n    '\\u1EDC': 'O',\n    '\\u1EDA': 'O',\n    '\\u1EE0': 'O',\n    '\\u1EDE': 'O',\n    '\\u1EE2': 'O',\n    '\\u1ECC': 'O',\n    '\\u1ED8': 'O',\n    '\\u01EA': 'O',\n    '\\u01EC': 'O',\n    '\\u00D8': 'O',\n    '\\u01FE': 'O',\n    '\\u0186': 'O',\n    '\\u019F': 'O',\n    '\\uA74A': 'O',\n    '\\uA74C': 'O',\n    '\\u01A2': 'OI',\n    '\\uA74E': 'OO',\n    '\\u0222': 'OU',\n    '\\u24C5': 'P',\n    '\\uFF30': 'P',\n    '\\u1E54': 'P',\n    '\\u1E56': 'P',\n    '\\u01A4': 'P',\n    '\\u2C63': 'P',\n    '\\uA750': 'P',\n    '\\uA752': 'P',\n    '\\uA754': 'P',\n    '\\u24C6': 'Q',\n    '\\uFF31': 'Q',\n    '\\uA756': 'Q',\n    '\\uA758': 'Q',\n    '\\u024A': 'Q',\n    '\\u24C7': 'R',\n    '\\uFF32': 'R',\n    '\\u0154': 'R',\n    '\\u1E58': 'R',\n    '\\u0158': 'R',\n    '\\u0210': 'R',\n    '\\u0212': 'R',\n    '\\u1E5A': 'R',\n    '\\u1E5C': 'R',\n    '\\u0156': 'R',\n    '\\u1E5E': 'R',\n    '\\u024C': 'R',\n    '\\u2C64': 'R',\n    '\\uA75A': 'R',\n    '\\uA7A6': 'R',\n    '\\uA782': 'R',\n    '\\u24C8': 'S',\n    '\\uFF33': 'S',\n    '\\u1E9E': 'S',\n    '\\u015A': 'S',\n    '\\u1E64': 'S',\n    '\\u015C': 'S',\n    '\\u1E60': 'S',\n    '\\u0160': 'S',\n    '\\u1E66': 'S',\n    '\\u1E62': 'S',\n    '\\u1E68': 'S',\n    '\\u0218': 'S',\n    '\\u015E': 'S',\n    '\\u2C7E': 'S',\n    '\\uA7A8': 'S',\n    '\\uA784': 'S',\n    '\\u24C9': 'T',\n    '\\uFF34': 'T',\n    '\\u1E6A': 'T',\n    '\\u0164': 'T',\n    '\\u1E6C': 'T',\n    '\\u021A': 'T',\n    '\\u0162': 'T',\n    '\\u1E70': 'T',\n    '\\u1E6E': 'T',\n    '\\u0166': 'T',\n    '\\u01AC': 'T',\n    '\\u01AE': 'T',\n    '\\u023E': 'T',\n    '\\uA786': 'T',\n    '\\uA728': 'TZ',\n    '\\u24CA': 'U',\n    '\\uFF35': 'U',\n    '\\u00D9': 'U',\n    '\\u00DA': 'U',\n    '\\u00DB': 'U',\n    '\\u0168': 'U',\n    '\\u1E78': 'U',\n    '\\u016A': 'U',\n    '\\u1E7A': 'U',\n    '\\u016C': 'U',\n    '\\u00DC': 'U',\n    '\\u01DB': 'U',\n    '\\u01D7': 'U',\n    '\\u01D5': 'U',\n    '\\u01D9': 'U',\n    '\\u1EE6': 'U',\n    '\\u016E': 'U',\n    '\\u0170': 'U',\n    '\\u01D3': 'U',\n    '\\u0214': 'U',\n    '\\u0216': 'U',\n    '\\u01AF': 'U',\n    '\\u1EEA': 'U',\n    '\\u1EE8': 'U',\n    '\\u1EEE': 'U',\n    '\\u1EEC': 'U',\n    '\\u1EF0': 'U',\n    '\\u1EE4': 'U',\n    '\\u1E72': 'U',\n    '\\u0172': 'U',\n    '\\u1E76': 'U',\n    '\\u1E74': 'U',\n    '\\u0244': 'U',\n    '\\u24CB': 'V',\n    '\\uFF36': 'V',\n    '\\u1E7C': 'V',\n    '\\u1E7E': 'V',\n    '\\u01B2': 'V',\n    '\\uA75E': 'V',\n    '\\u0245': 'V',\n    '\\uA760': 'VY',\n    '\\u24CC': 'W',\n    '\\uFF37': 'W',\n    '\\u1E80': 'W',\n    '\\u1E82': 'W',\n    '\\u0174': 'W',\n    '\\u1E86': 'W',\n    '\\u1E84': 'W',\n    '\\u1E88': 'W',\n    '\\u2C72': 'W',\n    '\\u24CD': 'X',\n    '\\uFF38': 'X',\n    '\\u1E8A': 'X',\n    '\\u1E8C': 'X',\n    '\\u24CE': 'Y',\n    '\\uFF39': 'Y',\n    '\\u1EF2': 'Y',\n    '\\u00DD': 'Y',\n    '\\u0176': 'Y',\n    '\\u1EF8': 'Y',\n    '\\u0232': 'Y',\n    '\\u1E8E': 'Y',\n    '\\u0178': 'Y',\n    '\\u1EF6': 'Y',\n    '\\u1EF4': 'Y',\n    '\\u01B3': 'Y',\n    '\\u024E': 'Y',\n    '\\u1EFE': 'Y',\n    '\\u24CF': 'Z',\n    '\\uFF3A': 'Z',\n    '\\u0179': 'Z',\n    '\\u1E90': 'Z',\n    '\\u017B': 'Z',\n    '\\u017D': 'Z',\n    '\\u1E92': 'Z',\n    '\\u1E94': 'Z',\n    '\\u01B5': 'Z',\n    '\\u0224': 'Z',\n    '\\u2C7F': 'Z',\n    '\\u2C6B': 'Z',\n    '\\uA762': 'Z',\n    '\\u24D0': 'a',\n    '\\uFF41': 'a',\n    '\\u1E9A': 'a',\n    '\\u00E0': 'a',\n    '\\u00E1': 'a',\n    '\\u00E2': 'a',\n    '\\u1EA7': 'a',\n    '\\u1EA5': 'a',\n    '\\u1EAB': 'a',\n    '\\u1EA9': 'a',\n    '\\u00E3': 'a',\n    '\\u0101': 'a',\n    '\\u0103': 'a',\n    '\\u1EB1': 'a',\n    '\\u1EAF': 'a',\n    '\\u1EB5': 'a',\n    '\\u1EB3': 'a',\n    '\\u0227': 'a',\n    '\\u01E1': 'a',\n    '\\u00E4': 'a',\n    '\\u01DF': 'a',\n    '\\u1EA3': 'a',\n    '\\u00E5': 'a',\n    '\\u01FB': 'a',\n    '\\u01CE': 'a',\n    '\\u0201': 'a',\n    '\\u0203': 'a',\n    '\\u1EA1': 'a',\n    '\\u1EAD': 'a',\n    '\\u1EB7': 'a',\n    '\\u1E01': 'a',\n    '\\u0105': 'a',\n    '\\u2C65': 'a',\n    '\\u0250': 'a',\n    '\\uA733': 'aa',\n    '\\u00E6': 'ae',\n    '\\u01FD': 'ae',\n    '\\u01E3': 'ae',\n    '\\uA735': 'ao',\n    '\\uA737': 'au',\n    '\\uA739': 'av',\n    '\\uA73B': 'av',\n    '\\uA73D': 'ay',\n    '\\u24D1': 'b',\n    '\\uFF42': 'b',\n    '\\u1E03': 'b',\n    '\\u1E05': 'b',\n    '\\u1E07': 'b',\n    '\\u0180': 'b',\n    '\\u0183': 'b',\n    '\\u0253': 'b',\n    '\\u24D2': 'c',\n    '\\uFF43': 'c',\n    '\\u0107': 'c',\n    '\\u0109': 'c',\n    '\\u010B': 'c',\n    '\\u010D': 'c',\n    '\\u00E7': 'c',\n    '\\u1E09': 'c',\n    '\\u0188': 'c',\n    '\\u023C': 'c',\n    '\\uA73F': 'c',\n    '\\u2184': 'c',\n    '\\u24D3': 'd',\n    '\\uFF44': 'd',\n    '\\u1E0B': 'd',\n    '\\u010F': 'd',\n    '\\u1E0D': 'd',\n    '\\u1E11': 'd',\n    '\\u1E13': 'd',\n    '\\u1E0F': 'd',\n    '\\u0111': 'd',\n    '\\u018C': 'd',\n    '\\u0256': 'd',\n    '\\u0257': 'd',\n    '\\uA77A': 'd',\n    '\\u01F3': 'dz',\n    '\\u01C6': 'dz',\n    '\\u24D4': 'e',\n    '\\uFF45': 'e',\n    '\\u00E8': 'e',\n    '\\u00E9': 'e',\n    '\\u00EA': 'e',\n    '\\u1EC1': 'e',\n    '\\u1EBF': 'e',\n    '\\u1EC5': 'e',\n    '\\u1EC3': 'e',\n    '\\u1EBD': 'e',\n    '\\u0113': 'e',\n    '\\u1E15': 'e',\n    '\\u1E17': 'e',\n    '\\u0115': 'e',\n    '\\u0117': 'e',\n    '\\u00EB': 'e',\n    '\\u1EBB': 'e',\n    '\\u011B': 'e',\n    '\\u0205': 'e',\n    '\\u0207': 'e',\n    '\\u1EB9': 'e',\n    '\\u1EC7': 'e',\n    '\\u0229': 'e',\n    '\\u1E1D': 'e',\n    '\\u0119': 'e',\n    '\\u1E19': 'e',\n    '\\u1E1B': 'e',\n    '\\u0247': 'e',\n    '\\u025B': 'e',\n    '\\u01DD': 'e',\n    '\\u24D5': 'f',\n    '\\uFF46': 'f',\n    '\\u1E1F': 'f',\n    '\\u0192': 'f',\n    '\\uA77C': 'f',\n    '\\u24D6': 'g',\n    '\\uFF47': 'g',\n    '\\u01F5': 'g',\n    '\\u011D': 'g',\n    '\\u1E21': 'g',\n    '\\u011F': 'g',\n    '\\u0121': 'g',\n    '\\u01E7': 'g',\n    '\\u0123': 'g',\n    '\\u01E5': 'g',\n    '\\u0260': 'g',\n    '\\uA7A1': 'g',\n    '\\u1D79': 'g',\n    '\\uA77F': 'g',\n    '\\u24D7': 'h',\n    '\\uFF48': 'h',\n    '\\u0125': 'h',\n    '\\u1E23': 'h',\n    '\\u1E27': 'h',\n    '\\u021F': 'h',\n    '\\u1E25': 'h',\n    '\\u1E29': 'h',\n    '\\u1E2B': 'h',\n    '\\u1E96': 'h',\n    '\\u0127': 'h',\n    '\\u2C68': 'h',\n    '\\u2C76': 'h',\n    '\\u0265': 'h',\n    '\\u0195': 'hv',\n    '\\u24D8': 'i',\n    '\\uFF49': 'i',\n    '\\u00EC': 'i',\n    '\\u00ED': 'i',\n    '\\u00EE': 'i',\n    '\\u0129': 'i',\n    '\\u012B': 'i',\n    '\\u012D': 'i',\n    '\\u00EF': 'i',\n    '\\u1E2F': 'i',\n    '\\u1EC9': 'i',\n    '\\u01D0': 'i',\n    '\\u0209': 'i',\n    '\\u020B': 'i',\n    '\\u1ECB': 'i',\n    '\\u012F': 'i',\n    '\\u1E2D': 'i',\n    '\\u0268': 'i',\n    '\\u0131': 'i',\n    '\\u24D9': 'j',\n    '\\uFF4A': 'j',\n    '\\u0135': 'j',\n    '\\u01F0': 'j',\n    '\\u0249': 'j',\n    '\\u24DA': 'k',\n    '\\uFF4B': 'k',\n    '\\u1E31': 'k',\n    '\\u01E9': 'k',\n    '\\u1E33': 'k',\n    '\\u0137': 'k',\n    '\\u1E35': 'k',\n    '\\u0199': 'k',\n    '\\u2C6A': 'k',\n    '\\uA741': 'k',\n    '\\uA743': 'k',\n    '\\uA745': 'k',\n    '\\uA7A3': 'k',\n    '\\u24DB': 'l',\n    '\\uFF4C': 'l',\n    '\\u0140': 'l',\n    '\\u013A': 'l',\n    '\\u013E': 'l',\n    '\\u1E37': 'l',\n    '\\u1E39': 'l',\n    '\\u013C': 'l',\n    '\\u1E3D': 'l',\n    '\\u1E3B': 'l',\n    '\\u017F': 'l',\n    '\\u0142': 'l',\n    '\\u019A': 'l',\n    '\\u026B': 'l',\n    '\\u2C61': 'l',\n    '\\uA749': 'l',\n    '\\uA781': 'l',\n    '\\uA747': 'l',\n    '\\u01C9': 'lj',\n    '\\u24DC': 'm',\n    '\\uFF4D': 'm',\n    '\\u1E3F': 'm',\n    '\\u1E41': 'm',\n    '\\u1E43': 'm',\n    '\\u0271': 'm',\n    '\\u026F': 'm',\n    '\\u24DD': 'n',\n    '\\uFF4E': 'n',\n    '\\u01F9': 'n',\n    '\\u0144': 'n',\n    '\\u00F1': 'n',\n    '\\u1E45': 'n',\n    '\\u0148': 'n',\n    '\\u1E47': 'n',\n    '\\u0146': 'n',\n    '\\u1E4B': 'n',\n    '\\u1E49': 'n',\n    '\\u019E': 'n',\n    '\\u0272': 'n',\n    '\\u0149': 'n',\n    '\\uA791': 'n',\n    '\\uA7A5': 'n',\n    '\\u01CC': 'nj',\n    '\\u24DE': 'o',\n    '\\uFF4F': 'o',\n    '\\u00F2': 'o',\n    '\\u00F3': 'o',\n    '\\u00F4': 'o',\n    '\\u1ED3': 'o',\n    '\\u1ED1': 'o',\n    '\\u1ED7': 'o',\n    '\\u1ED5': 'o',\n    '\\u00F5': 'o',\n    '\\u1E4D': 'o',\n    '\\u022D': 'o',\n    '\\u1E4F': 'o',\n    '\\u014D': 'o',\n    '\\u1E51': 'o',\n    '\\u1E53': 'o',\n    '\\u014F': 'o',\n    '\\u022F': 'o',\n    '\\u0231': 'o',\n    '\\u00F6': 'o',\n    '\\u022B': 'o',\n    '\\u1ECF': 'o',\n    '\\u0151': 'o',\n    '\\u01D2': 'o',\n    '\\u020D': 'o',\n    '\\u020F': 'o',\n    '\\u01A1': 'o',\n    '\\u1EDD': 'o',\n    '\\u1EDB': 'o',\n    '\\u1EE1': 'o',\n    '\\u1EDF': 'o',\n    '\\u1EE3': 'o',\n    '\\u1ECD': 'o',\n    '\\u1ED9': 'o',\n    '\\u01EB': 'o',\n    '\\u01ED': 'o',\n    '\\u00F8': 'o',\n    '\\u01FF': 'o',\n    '\\u0254': 'o',\n    '\\uA74B': 'o',\n    '\\uA74D': 'o',\n    '\\u0275': 'o',\n    '\\u01A3': 'oi',\n    '\\u0223': 'ou',\n    '\\uA74F': 'oo',\n    '\\u24DF': 'p',\n    '\\uFF50': 'p',\n    '\\u1E55': 'p',\n    '\\u1E57': 'p',\n    '\\u01A5': 'p',\n    '\\u1D7D': 'p',\n    '\\uA751': 'p',\n    '\\uA753': 'p',\n    '\\uA755': 'p',\n    '\\u24E0': 'q',\n    '\\uFF51': 'q',\n    '\\u024B': 'q',\n    '\\uA757': 'q',\n    '\\uA759': 'q',\n    '\\u24E1': 'r',\n    '\\uFF52': 'r',\n    '\\u0155': 'r',\n    '\\u1E59': 'r',\n    '\\u0159': 'r',\n    '\\u0211': 'r',\n    '\\u0213': 'r',\n    '\\u1E5B': 'r',\n    '\\u1E5D': 'r',\n    '\\u0157': 'r',\n    '\\u1E5F': 'r',\n    '\\u024D': 'r',\n    '\\u027D': 'r',\n    '\\uA75B': 'r',\n    '\\uA7A7': 'r',\n    '\\uA783': 'r',\n    '\\u24E2': 's',\n    '\\uFF53': 's',\n    '\\u00DF': 's',\n    '\\u015B': 's',\n    '\\u1E65': 's',\n    '\\u015D': 's',\n    '\\u1E61': 's',\n    '\\u0161': 's',\n    '\\u1E67': 's',\n    '\\u1E63': 's',\n    '\\u1E69': 's',\n    '\\u0219': 's',\n    '\\u015F': 's',\n    '\\u023F': 's',\n    '\\uA7A9': 's',\n    '\\uA785': 's',\n    '\\u1E9B': 's',\n    '\\u24E3': 't',\n    '\\uFF54': 't',\n    '\\u1E6B': 't',\n    '\\u1E97': 't',\n    '\\u0165': 't',\n    '\\u1E6D': 't',\n    '\\u021B': 't',\n    '\\u0163': 't',\n    '\\u1E71': 't',\n    '\\u1E6F': 't',\n    '\\u0167': 't',\n    '\\u01AD': 't',\n    '\\u0288': 't',\n    '\\u2C66': 't',\n    '\\uA787': 't',\n    '\\uA729': 'tz',\n    '\\u24E4': 'u',\n    '\\uFF55': 'u',\n    '\\u00F9': 'u',\n    '\\u00FA': 'u',\n    '\\u00FB': 'u',\n    '\\u0169': 'u',\n    '\\u1E79': 'u',\n    '\\u016B': 'u',\n    '\\u1E7B': 'u',\n    '\\u016D': 'u',\n    '\\u00FC': 'u',\n    '\\u01DC': 'u',\n    '\\u01D8': 'u',\n    '\\u01D6': 'u',\n    '\\u01DA': 'u',\n    '\\u1EE7': 'u',\n    '\\u016F': 'u',\n    '\\u0171': 'u',\n    '\\u01D4': 'u',\n    '\\u0215': 'u',\n    '\\u0217': 'u',\n    '\\u01B0': 'u',\n    '\\u1EEB': 'u',\n    '\\u1EE9': 'u',\n    '\\u1EEF': 'u',\n    '\\u1EED': 'u',\n    '\\u1EF1': 'u',\n    '\\u1EE5': 'u',\n    '\\u1E73': 'u',\n    '\\u0173': 'u',\n    '\\u1E77': 'u',\n    '\\u1E75': 'u',\n    '\\u0289': 'u',\n    '\\u24E5': 'v',\n    '\\uFF56': 'v',\n    '\\u1E7D': 'v',\n    '\\u1E7F': 'v',\n    '\\u028B': 'v',\n    '\\uA75F': 'v',\n    '\\u028C': 'v',\n    '\\uA761': 'vy',\n    '\\u24E6': 'w',\n    '\\uFF57': 'w',\n    '\\u1E81': 'w',\n    '\\u1E83': 'w',\n    '\\u0175': 'w',\n    '\\u1E87': 'w',\n    '\\u1E85': 'w',\n    '\\u1E98': 'w',\n    '\\u1E89': 'w',\n    '\\u2C73': 'w',\n    '\\u24E7': 'x',\n    '\\uFF58': 'x',\n    '\\u1E8B': 'x',\n    '\\u1E8D': 'x',\n    '\\u24E8': 'y',\n    '\\uFF59': 'y',\n    '\\u1EF3': 'y',\n    '\\u00FD': 'y',\n    '\\u0177': 'y',\n    '\\u1EF9': 'y',\n    '\\u0233': 'y',\n    '\\u1E8F': 'y',\n    '\\u00FF': 'y',\n    '\\u1EF7': 'y',\n    '\\u1E99': 'y',\n    '\\u1EF5': 'y',\n    '\\u01B4': 'y',\n    '\\u024F': 'y',\n    '\\u1EFF': 'y',\n    '\\u24E9': 'z',\n    '\\uFF5A': 'z',\n    '\\u017A': 'z',\n    '\\u1E91': 'z',\n    '\\u017C': 'z',\n    '\\u017E': 'z',\n    '\\u1E93': 'z',\n    '\\u1E95': 'z',\n    '\\u01B6': 'z',\n    '\\u0225': 'z',\n    '\\u0240': 'z',\n    '\\u2C6C': 'z',\n    '\\uA763': 'z',\n    '\\u0386': '\\u0391',\n    '\\u0388': '\\u0395',\n    '\\u0389': '\\u0397',\n    '\\u038A': '\\u0399',\n    '\\u03AA': '\\u0399',\n    '\\u038C': '\\u039F',\n    '\\u038E': '\\u03A5',\n    '\\u03AB': '\\u03A5',\n    '\\u038F': '\\u03A9',\n    '\\u03AC': '\\u03B1',\n    '\\u03AD': '\\u03B5',\n    '\\u03AE': '\\u03B7',\n    '\\u03AF': '\\u03B9',\n    '\\u03CA': '\\u03B9',\n    '\\u0390': '\\u03B9',\n    '\\u03CC': '\\u03BF',\n    '\\u03CD': '\\u03C5',\n    '\\u03CB': '\\u03C5',\n    '\\u03B0': '\\u03C5',\n    '\\u03C9': '\\u03C9',\n    '\\u03C2': '\\u03C3'\n};\nDataUtil.fnOperators = {\n    /**\n     * Returns true when the actual input is equal to the given input.\n     * @param  {string|number|boolean} actual\n     * @param  {string|number|boolean} expected\n     * @param  {boolean} ignoreCase?\n     * @param  {boolean} ignoreAccent?\n     */\n    equal: (actual, expected, ignoreCase, ignoreAccent) => {\n        if (ignoreAccent) {\n            actual = DataUtil.ignoreDiacritics(actual);\n            expected = DataUtil.ignoreDiacritics(expected);\n        }\n        if (ignoreCase) {\n            return DataUtil.toLowerCase(actual) === DataUtil.toLowerCase(expected);\n        }\n        return actual === expected;\n    },\n    /**\n     * Returns true when the actual input is not equal to the given input.\n     * @param  {string|number|boolean} actual\n     * @param  {string|number|boolean} expected\n     * @param  {boolean} ignoreCase?\n     */\n    notequal: (actual, expected, ignoreCase, ignoreAccent) => {\n        if (ignoreAccent) {\n            actual = DataUtil.ignoreDiacritics(actual);\n            expected = DataUtil.ignoreDiacritics(expected);\n        }\n        return !DataUtil.fnOperators.equal(actual, expected, ignoreCase);\n    },\n    /**\n     * Returns true when the actual input is less than to the given input.\n     * @param  {string|number|boolean} actual\n     * @param  {string|number|boolean} expected\n     * @param  {boolean} ignoreCase?\n     */\n    lessthan: (actual, expected, ignoreCase) => {\n        if (ignoreCase) {\n            return DataUtil.toLowerCase(actual) < DataUtil.toLowerCase(expected);\n        }\n        return actual < expected;\n    },\n    /**\n     * Returns true when the actual input is greater than to the given input.\n     * @param  {string|number|boolean} actual\n     * @param  {string|number|boolean} expected\n     * @param  {boolean} ignoreCase?\n     */\n    greaterthan: (actual, expected, ignoreCase) => {\n        if (ignoreCase) {\n            return DataUtil.toLowerCase(actual) > DataUtil.toLowerCase(expected);\n        }\n        return actual > expected;\n    },\n    /**\n     * Returns true when the actual input is less than or equal to the given input.\n     * @param  {string|number|boolean} actual\n     * @param  {string|number|boolean} expected\n     * @param  {boolean} ignoreCase?\n     */\n    lessthanorequal: (actual, expected, ignoreCase) => {\n        if (ignoreCase) {\n            return DataUtil.toLowerCase(actual) <= DataUtil.toLowerCase(expected);\n        }\n        return actual <= expected;\n    },\n    /**\n     * Returns true when the actual input is greater than or equal to the given input.\n     * @param  {string|number|boolean} actual\n     * @param  {string|number|boolean} expected\n     * @param  {boolean} ignoreCase?\n     */\n    greaterthanorequal: (actual, expected, ignoreCase) => {\n        if (ignoreCase) {\n            return DataUtil.toLowerCase(actual) >= DataUtil.toLowerCase(expected);\n        }\n        return actual >= expected;\n    },\n    /**\n     * Returns true when the actual input contains the given string.\n     * @param  {string|number} actual\n     * @param  {string|number} expected\n     * @param  {boolean} ignoreCase?\n     */\n    contains: (actual, expected, ignoreCase, ignoreAccent) => {\n        if (ignoreAccent) {\n            actual = DataUtil.ignoreDiacritics(actual);\n            expected = DataUtil.ignoreDiacritics(expected);\n        }\n        if (ignoreCase) {\n            return !isNullOrUndefined(actual) && !isNullOrUndefined(expected) &&\n                DataUtil.toLowerCase(actual).indexOf(DataUtil.toLowerCase(expected)) !== -1;\n        }\n        return !isNullOrUndefined(actual) && !isNullOrUndefined(expected) &&\n            actual.toString().indexOf(expected) !== -1;\n    },\n    /**\n     * Returns true when the given input value is not null.\n     * @param  {string|number} actual\n     * @returns boolean\n     */\n    notnull: (actual) => {\n        return actual !== null;\n    },\n    /**\n     * Returns true when the given input value is null.\n     * @param  {string|number} actual\n     * @returns boolean\n     */\n    isnull: (actual) => {\n        return actual === null;\n    },\n    /**\n     * Returns true when the actual input starts with the given string\n     * @param  {string} actual\n     * @param  {string} expected\n     * @param  {boolean} ignoreCase?\n     */\n    startswith: (actual, expected, ignoreCase, ignoreAccent) => {\n        if (ignoreAccent) {\n            actual = DataUtil.ignoreDiacritics(actual);\n            expected = DataUtil.ignoreDiacritics(expected);\n        }\n        if (ignoreCase) {\n            return actual && expected && DataUtil.startsWith(DataUtil.toLowerCase(actual), DataUtil.toLowerCase(expected));\n        }\n        return actual && expected && DataUtil.startsWith(actual, expected);\n    },\n    /**\n     * Returns true when the actual input ends with the given string.\n     * @param  {string} actual\n     * @param  {string} expected\n     * @param  {boolean} ignoreCase?\n     */\n    endswith: (actual, expected, ignoreCase, ignoreAccent) => {\n        if (ignoreAccent) {\n            actual = DataUtil.ignoreDiacritics(actual);\n            expected = DataUtil.ignoreDiacritics(expected);\n        }\n        if (ignoreCase) {\n            return actual && expected && DataUtil.endsWith(DataUtil.toLowerCase(actual), DataUtil.toLowerCase(expected));\n        }\n        return actual && expected && DataUtil.endsWith(actual, expected);\n    },\n    /**\n     * It will return the filter operator based on the filter symbol.\n     * @param  {string} operator\n     * @hidden\n     */\n    processSymbols: (operator) => {\n        let fnName = DataUtil.operatorSymbols[operator];\n        if (fnName) {\n            let fn = DataUtil.fnOperators[fnName];\n            return fn;\n        }\n        return DataUtil.throwError('Query - Process Operator : Invalid operator');\n    },\n    /**\n     * It will return the valid filter operator based on the specified operators.\n     * @param  {string} operator\n     * @hidden\n     */\n    processOperator: (operator) => {\n        let fn = DataUtil.fnOperators[operator];\n        if (fn) {\n            return fn;\n        }\n        return DataUtil.fnOperators.processSymbols(operator);\n    }\n};\n/**\n * To perform the parse operation on JSON data, like convert to string from JSON or convert to JSON from string.\n */\nDataUtil.parse = {\n    /**\n     * Parse the given string to the plain JavaScript object.\n     * @param  {string|Object|Object[]} jsonText\n     */\n    parseJson: (jsonText) => {\n        if (typeof jsonText === 'string') {\n            jsonText = JSON.parse(jsonText, DataUtil.parse.jsonReviver);\n        }\n        else if (jsonText instanceof Array) {\n            DataUtil.parse.iterateAndReviveArray(jsonText);\n        }\n        else if (typeof jsonText === 'object' && jsonText !== null) {\n            DataUtil.parse.iterateAndReviveJson(jsonText);\n        }\n        return jsonText;\n    },\n    /**\n     * It will perform on array of values.\n     * @param  {string[]|Object[]} array\n     * @hidden\n     */\n    iterateAndReviveArray: (array) => {\n        for (let i = 0; i < array.length; i++) {\n            if (typeof array[i] === 'object' && array[i] !== null) {\n                DataUtil.parse.iterateAndReviveJson(array[i]);\n            }\n            else if (typeof array[i] === 'string' && !/^[\\s]*\\[|^[\\s]*\\{(.)+:|\\\"/g.test(array[i])) {\n                array[i] = DataUtil.parse.jsonReviver('', array[i]);\n            }\n            else {\n                array[i] = DataUtil.parse.parseJson(array[i]);\n            }\n        }\n    },\n    /**\n     * It will perform on JSON values\n     * @param  {JSON} json\n     * @hidden\n     */\n    iterateAndReviveJson: (json) => {\n        let value;\n        let keys = Object.keys(json);\n        for (let prop of keys) {\n            if (DataUtil.startsWith(prop, '__')) {\n                continue;\n            }\n            value = json[prop];\n            if (typeof value === 'object') {\n                if (value instanceof Array) {\n                    DataUtil.parse.iterateAndReviveArray(value);\n                }\n                else if (value) {\n                    DataUtil.parse.iterateAndReviveJson(value);\n                }\n            }\n            else {\n                json[prop] = DataUtil.parse.jsonReviver(json[prop], value);\n            }\n        }\n    },\n    /**\n     * It will perform on JSON values\n     * @param  {string} field\n     * @param  {string|Date} value\n     * @hidden\n     */\n    jsonReviver: (field, value) => {\n        if (typeof value === 'string') {\n            let ms = /^\\/Date\\(([+-]?[0-9]+)([+-][0-9]{4})?\\)\\/$/.exec(value);\n            let offSet = DataUtil.timeZoneHandling ? DataUtil.serverTimezoneOffset : null;\n            if (ms) {\n                return DataUtil.dateParse.toTimeZone(new Date(parseInt(ms[1], 10)), offSet, true);\n            }\n            else if (/^(\\d{4}\\-\\d\\d\\-\\d\\d([tT][\\d:\\.]*){1})([zZ]|([+\\-])(\\d\\d):?(\\d\\d))?$/.test(value)) {\n                let isUTC = value.indexOf('Z') > -1 || value.indexOf('z') > -1;\n                let arr = value.split(/[^0-9.]/);\n                if (isUTC) {\n                    value = DataUtil.dateParse\n                        .toTimeZone(new Date(parseInt(arr[0], 10), parseInt(arr[1], 10) - 1, parseInt(arr[2], 10), parseInt(arr[3], 10), parseInt(arr[4], 10), parseInt(arr[5], 10)), DataUtil.serverTimezoneOffset, false);\n                }\n                else {\n                    let utcFormat = new Date(parseInt(arr[0], 10), parseInt(arr[1], 10) - 1, parseInt(arr[2], 10), parseInt(arr[3], 10), parseInt(arr[4], 10), parseInt(arr[5], 10));\n                    let hrs = parseInt(arr[6], 10);\n                    let mins = parseInt(arr[7], 10);\n                    if (isNaN(hrs) && isNaN(mins)) {\n                        return utcFormat;\n                    }\n                    if (value.indexOf('+') > -1) {\n                        utcFormat.setHours(utcFormat.getHours() - hrs, utcFormat.getMinutes() - mins);\n                    }\n                    else {\n                        utcFormat.setHours(utcFormat.getHours() + hrs, utcFormat.getMinutes() + mins);\n                    }\n                    value = DataUtil.dateParse\n                        .toTimeZone(utcFormat, DataUtil.serverTimezoneOffset, false);\n                }\n                if (DataUtil.serverTimezoneOffset == null) {\n                    value = DataUtil.dateParse.addSelfOffset(value);\n                }\n            }\n        }\n        return value;\n    },\n    /**\n     * Check wheather the given value is JSON or not.\n     * @param  {Object[]} jsonData\n     */\n    isJson: (jsonData) => {\n        if (typeof jsonData[0] === 'string') {\n            return jsonData;\n        }\n        return DataUtil.parse.parseJson(jsonData);\n    },\n    /**\n     * Checks wheather the given value is GUID or not.\n     * @param  {string} value\n     */\n    isGuid: (value) => {\n        let regex = /[A-Fa-f0-9]{8}(?:-[A-Fa-f0-9]{4}){3}-[A-Fa-f0-9]{12}/i;\n        let match = regex.exec(value);\n        return match != null;\n    },\n    /**\n     * The method used to replace the value based on the type.\n     * @param  {Object} value\n     * @param  {boolean} stringify\n     * @hidden\n     */\n    replacer: (value, stringify) => {\n        if (DataUtil.isPlainObject(value)) {\n            return DataUtil.parse.jsonReplacer(value, stringify);\n        }\n        if (value instanceof Array) {\n            return DataUtil.parse.arrayReplacer(value);\n        }\n        if (value instanceof Date) {\n            return DataUtil.parse.jsonReplacer({ val: value }, stringify).val;\n        }\n        return value;\n    },\n    /**\n     * It will replace the JSON value.\n     * @param  {string} key\n     * @param  {Object} val\n     * @hidden\n     */\n    jsonReplacer: (val, stringify) => {\n        let value;\n        let keys = Object.keys(val);\n        for (let prop of keys) {\n            value = val[prop];\n            if (!(value instanceof Date)) {\n                continue;\n            }\n            let d = value;\n            if (DataUtil.serverTimezoneOffset == null) {\n                val[prop] = DataUtil.dateParse.toTimeZone(d, null).toJSON();\n            }\n            else {\n                d = new Date(+d + DataUtil.serverTimezoneOffset * 3600000);\n                val[prop] = DataUtil.dateParse.toTimeZone(DataUtil.dateParse.addSelfOffset(d), null).toJSON();\n            }\n        }\n        return val;\n    },\n    /**\n     * It will replace the Array of value.\n     * @param  {string} key\n     * @param  {Object[]} val\n     * @hidden\n     */\n    arrayReplacer: (val) => {\n        for (let i = 0; i < val.length; i++) {\n            if (DataUtil.isPlainObject(val[i])) {\n                val[i] = DataUtil.parse.jsonReplacer(val[i]);\n            }\n            else if (val[i] instanceof Date) {\n                val[i] = DataUtil.parse.jsonReplacer({ date: val[i] }).date;\n            }\n        }\n        return val;\n    },\n    /**\n     * It will replace the Date object with respective to UTC format value.\n     * @param  {string} key\n     * @param  {any} value\n     * @hidden\n     */\n    /* tslint:disable-next-line:no-any */\n    jsonDateReplacer: (key, value) => {\n        if (key === 'value' && value) {\n            if (typeof value === 'string') {\n                let ms = /^\\/Date\\(([+-]?[0-9]+)([+-][0-9]{4})?\\)\\/$/.exec(value);\n                if (ms) {\n                    value = DataUtil.dateParse.toTimeZone(new Date(parseInt(ms[1], 10)), null, true);\n                }\n                else if (/^(\\d{4}\\-\\d\\d\\-\\d\\d([tT][\\d:\\.]*){1})([zZ]|([+\\-])(\\d\\d):?(\\d\\d))?$/.test(value)) {\n                    let arr = value.split(/[^0-9]/);\n                    value = DataUtil.dateParse\n                        .toTimeZone(new Date(parseInt(arr[0], 10), parseInt(arr[1], 10) - 1, parseInt(arr[2], 10), parseInt(arr[3], 10), parseInt(arr[4], 10), parseInt(arr[5], 10)), null, true);\n                }\n            }\n            if (value instanceof Date) {\n                value = DataUtil.dateParse.addSelfOffset(value);\n                if (DataUtil.serverTimezoneOffset === null) {\n                    return DataUtil.dateParse.toTimeZone(DataUtil.dateParse.addSelfOffset(value), null).toJSON();\n                }\n                else {\n                    value = DataUtil.dateParse.toTimeZone(value, (((value.getTimezoneOffset() / 60) * 2)\n                        - DataUtil.serverTimezoneOffset), false);\n                    return value.toJSON();\n                }\n            }\n        }\n        return value;\n    }\n};\n/**\n * @hidden\n */\nDataUtil.dateParse = {\n    addSelfOffset: (input) => {\n        return new Date(+input - (input.getTimezoneOffset() * 60000));\n    },\n    toUTC: (input) => {\n        return new Date(+input + (input.getTimezoneOffset() * 60000));\n    },\n    toTimeZone: (input, offset, utc) => {\n        if (offset === null) {\n            return input;\n        }\n        let unix = utc ? DataUtil.dateParse.toUTC(input) : input;\n        return new Date(+unix - (offset * 3600000));\n    },\n    toLocalTime: (input) => {\n        let datefn = input;\n        let timeZone = -datefn.getTimezoneOffset();\n        let differenceString = timeZone >= 0 ? '+' : '-';\n        let localtimefn = (num) => {\n            let norm = Math.floor(Math.abs(num));\n            return (norm < 10 ? '0' : '') + norm;\n        };\n        let val = datefn.getFullYear() + '-' + localtimefn(datefn.getMonth() + 1) + '-' + localtimefn(datefn.getDate()) +\n            'T' + localtimefn(datefn.getHours()) +\n            ':' + localtimefn(datefn.getMinutes()) +\n            ':' + localtimefn(datefn.getSeconds()) +\n            differenceString + localtimefn(timeZone / 60) +\n            ':' + localtimefn(timeZone % 60);\n        return val;\n    }\n};\n\nconst consts$1 = { GroupGuid: '{271bbba0-1ee7}' };\n/**\n * Adaptors are specific data source type aware interfaces that are used by DataManager to communicate with DataSource.\n * This is the base adaptor class that other adaptors can extend.\n * @hidden\n */\nclass Adaptor {\n    /**\n     * Constructor for Adaptor class\n     * @param  {DataOptions} ds?\n     * @hidden\n     * @returns aggregates\n     */\n    constructor(ds) {\n        // common options for all the adaptors \n        this.options = {\n            from: 'table',\n            requestType: 'json',\n            sortBy: 'sorted',\n            select: 'select',\n            skip: 'skip',\n            group: 'group',\n            take: 'take',\n            search: 'search',\n            count: 'requiresCounts',\n            where: 'where',\n            aggregates: 'aggregates',\n            expand: 'expand'\n        };\n        /**\n         * Specifies the type of adaptor.\n         * @default Adaptor\n         */\n        this.type = Adaptor;\n        this.dataSource = ds;\n        this.pvt = {};\n    }\n    /**\n     * Returns the data from the query processing.\n     * @param  {Object} data\n     * @param  {DataOptions} ds?\n     * @param  {Query} query?\n     * @param  {XMLHttpRequest} xhr?\n     * @returns Object\n     */\n    processResponse(data, ds, query, xhr) {\n        return data;\n    }\n}\n/**\n * JsonAdaptor is used to process JSON data. It contains methods to process the given JSON data based on the queries.\n * @hidden\n */\nclass JsonAdaptor extends Adaptor {\n    /**\n     * Process the JSON data based on the provided queries.\n     * @param  {DataManager} dataManager\n     * @param  {Query} query\n     * @returns Object\n     */\n    processQuery(dataManager, query) {\n        let result = dataManager.dataSource.json.slice(0);\n        let count = result.length;\n        let countFlg = true;\n        let ret;\n        let key;\n        let lazyLoad = {};\n        let keyCount = 0;\n        let group = [];\n        let page;\n        for (let i = 0; i < query.lazyLoad.length; i++) {\n            keyCount++;\n            lazyLoad[query.lazyLoad[i].key] = query.lazyLoad[i].value;\n        }\n        let agg = {};\n        for (let i = 0; i < query.queries.length; i++) {\n            key = query.queries[i];\n            if ((key.fn === 'onPage' || key.fn === 'onGroup') && query.lazyLoad.length) {\n                if (key.fn === 'onGroup') {\n                    group.push(key.e);\n                }\n                if (key.fn === 'onPage') {\n                    page = key.e;\n                }\n                continue;\n            }\n            ret = this[key.fn].call(this, result, key.e, query);\n            if (key.fn === 'onAggregates') {\n                agg[key.e.field + ' - ' + key.e.type] = ret;\n            }\n            else {\n                result = ret !== undefined ? ret : result;\n            }\n            if (key.fn === 'onPage' || key.fn === 'onSkip' || key.fn === 'onTake' || key.fn === 'onRange') {\n                countFlg = false;\n            }\n            if (countFlg) {\n                count = result.length;\n            }\n        }\n        if (keyCount) {\n            let args = {\n                query: query, lazyLoad: lazyLoad, result: result, group: group, page: page\n            };\n            let lazyLoadData = this.lazyLoadGroup(args);\n            result = lazyLoadData.result;\n            count = lazyLoadData.count;\n        }\n        if (query.isCountRequired) {\n            result = {\n                result: result,\n                count: count,\n                aggregates: agg\n            };\n        }\n        return result;\n    }\n    /**\n     * Perform lazy load grouping in JSON array based on the given query and lazy load details.\n     * @param  {LazyLoadGroupArgs} args\n     */\n    lazyLoadGroup(args) {\n        let count = 0;\n        let agg = this.getAggregate(args.query);\n        let result = args.result;\n        if (!isNullOrUndefined(args.lazyLoad.onDemandGroupInfo)) {\n            let req = args.lazyLoad.onDemandGroupInfo;\n            for (let i = req.where.length - 1; i >= 0; i--) {\n                result = this.onWhere(result, req.where[i]);\n            }\n            if (args.group.length !== req.level) {\n                let field = args.group[req.level].fieldName;\n                result = DataUtil.group(result, field, agg, null, null, args.group[0].comparer, true);\n            }\n            count = result.length;\n            let data = result;\n            result = result.slice(req.skip);\n            result = result.slice(0, req.take);\n            if (args.group.length !== req.level) {\n                this.formGroupResult(result, data);\n            }\n        }\n        else {\n            let field = args.group[0].fieldName;\n            result = DataUtil.group(result, field, agg, null, null, args.group[0].comparer, true);\n            count = result.length;\n            let data = result;\n            result = this.onPage(result, args.page, args.query);\n            this.formGroupResult(result, data);\n        }\n        return { result: result, count: count };\n    }\n    formGroupResult(result, data) {\n        if (result.length && data.length) {\n            let uid = 'GroupGuid';\n            let childLevel = 'childLevels';\n            let level = 'level';\n            let records = 'records';\n            result[uid] = data[uid];\n            result[childLevel] = data[childLevel];\n            result[level] = data[level];\n            result[records] = data[records];\n        }\n        return result;\n    }\n    /**\n     * Separate the aggregate query from the given queries\n     * @param  {Query} query\n     */\n    getAggregate(query) {\n        let aggQuery = Query.filterQueries(query.queries, 'onAggregates');\n        let agg = [];\n        if (aggQuery.length) {\n            let tmp;\n            for (let i = 0; i < aggQuery.length; i++) {\n                tmp = aggQuery[i].e;\n                agg.push({ type: tmp.type, field: DataUtil.getValue(tmp.field, query) });\n            }\n        }\n        return agg;\n    }\n    /**\n     * Performs batch update in the JSON array which add, remove and update records.\n     * @param  {DataManager} dm\n     * @param  {CrudOptions} changes\n     * @param  {RemoteArgs} e\n     */\n    batchRequest(dm, changes, e) {\n        let i;\n        let deletedRecordsLen = changes.deletedRecords.length;\n        for (i = 0; i < changes.addedRecords.length; i++) {\n            this.insert(dm, changes.addedRecords[i]);\n        }\n        for (i = 0; i < changes.changedRecords.length; i++) {\n            this.update(dm, e.key, changes.changedRecords[i]);\n        }\n        for (i = 0; i < deletedRecordsLen; i++) {\n            this.remove(dm, e.key, changes.deletedRecords[i]);\n        }\n        return changes;\n    }\n    /**\n     * Performs filter operation with the given data and where query.\n     * @param  {Object[]} ds\n     * @param  {{validate:Function}} e\n     */\n    onWhere(ds, e) {\n        if (!ds || !ds.length) {\n            return ds;\n        }\n        return ds.filter((obj) => {\n            if (e) {\n                return e.validate(obj);\n            }\n        });\n    }\n    /**\n     * Returns aggregate function based on the aggregate type.\n     * @param  {Object[]} ds\n     * @param  {{field:string} e\n     * @param  {string}} type\n     */\n    onAggregates(ds, e) {\n        let fn = DataUtil.aggregates[e.type];\n        if (!ds || !fn || ds.length === 0) {\n            return null;\n        }\n        return fn(ds, e.field);\n    }\n    /**\n     * Performs search operation based on the given query.\n     * @param  {Object[]} ds\n     * @param  {QueryOptions} e\n     */\n    onSearch(ds, e) {\n        if (!ds || !ds.length) {\n            return ds;\n        }\n        if (e.fieldNames.length === 0) {\n            DataUtil.getFieldList(ds[0], e.fieldNames);\n        }\n        return ds.filter((obj) => {\n            for (let j = 0; j < e.fieldNames.length; j++) {\n                if (e.comparer.call(obj, DataUtil.getObject(e.fieldNames[j], obj), e.searchKey, e.ignoreCase, e.ignoreAccent)) {\n                    return true;\n                }\n            }\n            return false;\n        });\n    }\n    /**\n     * Sort the data with given direction and field.\n     * @param  {Object[]} ds\n     * @param  {{comparer:(a:Object} e\n     * @param  {Object} b\n     */\n    onSortBy(ds, e, query) {\n        if (!ds || !ds.length) {\n            return ds;\n        }\n        let fnCompare;\n        let field = DataUtil.getValue(e.fieldName, query);\n        if (!field) {\n            return ds.sort(e.comparer);\n        }\n        if (field instanceof Array) {\n            field = field.slice(0);\n            for (let i = field.length - 1; i >= 0; i--) {\n                if (!field[i]) {\n                    continue;\n                }\n                fnCompare = e.comparer;\n                if (DataUtil.endsWith(field[i], ' desc')) {\n                    fnCompare = DataUtil.fnSort('descending');\n                    field[i] = field[i].replace(' desc', '');\n                }\n                ds = DataUtil.sort(ds, field[i], fnCompare);\n            }\n            return ds;\n        }\n        return DataUtil.sort(ds, field, e.comparer);\n    }\n    /**\n     * Group the data based on the given query.\n     * @param  {Object[]} ds\n     * @param  {QueryOptions} e\n     * @param  {Query} query\n     */\n    onGroup(ds, e, query) {\n        if (!ds || !ds.length) {\n            return ds;\n        }\n        let agg = this.getAggregate(query);\n        return DataUtil.group(ds, DataUtil.getValue(e.fieldName, query), agg, null, null, e.comparer);\n    }\n    /**\n     * Retrieves records based on the given page index and size.\n     * @param  {Object[]} ds\n     * @param  {{pageSize:number} e\n     * @param  {number}} pageIndex\n     * @param  {Query} query\n     */\n    onPage(ds, e, query) {\n        let size = DataUtil.getValue(e.pageSize, query);\n        let start = (DataUtil.getValue(e.pageIndex, query) - 1) * size;\n        let end = start + size;\n        if (!ds || !ds.length) {\n            return ds;\n        }\n        return ds.slice(start, end);\n    }\n    /**\n     * Retrieves records based on the given start and end index from query.\n     * @param  {Object[]} ds\n     * @param  {{start:number} e\n     * @param  {number}} end\n     */\n    onRange(ds, e) {\n        if (!ds || !ds.length) {\n            return ds;\n        }\n        return ds.slice(DataUtil.getValue(e.start), DataUtil.getValue(e.end));\n    }\n    /**\n     * Picks the given count of records from the top of the datasource.\n     * @param  {Object[]} ds\n     * @param  {{nos:number}} e\n     */\n    onTake(ds, e) {\n        if (!ds || !ds.length) {\n            return ds;\n        }\n        return ds.slice(0, DataUtil.getValue(e.nos));\n    }\n    /**\n     * Skips the given count of records from the data source.\n     * @param  {Object[]} ds\n     * @param  {{nos:number}} e\n     */\n    onSkip(ds, e) {\n        if (!ds || !ds.length) {\n            return ds;\n        }\n        return ds.slice(DataUtil.getValue(e.nos));\n    }\n    /**\n     * Selects specified columns from the data source.\n     * @param  {Object[]} ds\n     * @param  {{fieldNames:string}} e\n     */\n    onSelect(ds, e) {\n        if (!ds || !ds.length) {\n            return ds;\n        }\n        return DataUtil.select(ds, DataUtil.getValue(e.fieldNames));\n    }\n    /**\n     * Inserts new record in the table.\n     * @param  {DataManager} dm\n     * @param  {Object} data\n     * @param  {number} position\n     */\n    insert(dm, data, tableName, query, position) {\n        if (isNullOrUndefined(position)) {\n            return dm.dataSource.json.push(data);\n        }\n        else {\n            return dm.dataSource.json.splice(position, 0, data);\n        }\n    }\n    /**\n     * Remove the data from the dataSource based on the key field value.\n     * @param  {DataManager} dm\n     * @param  {string} keyField\n     * @param  {Object} value\n     * @param  {string} tableName?\n     * @returns null\n     */\n    remove(dm, keyField, value, tableName) {\n        let ds = dm.dataSource.json;\n        let i;\n        if (typeof value === 'object' && !(value instanceof Date)) {\n            value = DataUtil.getObject(keyField, value);\n        }\n        for (i = 0; i < ds.length; i++) {\n            if (DataUtil.getObject(keyField, ds[i]) === value) {\n                break;\n            }\n        }\n        return i !== ds.length ? ds.splice(i, 1) : null;\n    }\n    /**\n     * Updates existing record and saves the changes to the table.\n     * @param  {DataManager} dm\n     * @param  {string} keyField\n     * @param  {Object} value\n     * @param  {string} tableName?\n     * @returns null\n     */\n    update(dm, keyField, value, tableName) {\n        let ds = dm.dataSource.json;\n        let i;\n        let key;\n        if (!isNullOrUndefined(keyField)) {\n            key = getValue(keyField, value);\n        }\n        for (i = 0; i < ds.length; i++) {\n            if (!isNullOrUndefined(keyField) && (getValue(keyField, ds[i])) === key) {\n                break;\n            }\n        }\n        return i < ds.length ? merge(ds[i], value) : null;\n    }\n}\n/**\n * URL Adaptor of DataManager can be used when you are required to use remote service to retrieve data.\n * It interacts with server-side for all DataManager Queries and CRUD operations.\n * @hidden\n */\nclass UrlAdaptor extends Adaptor {\n    /**\n     * Process the query to generate request body.\n     * @param  {DataManager} dm\n     * @param  {Query} query\n     * @param  {Object[]} hierarchyFilters?\n     * @returns p\n     */\n    // tslint:disable-next-line:max-func-body-length\n    processQuery(dm, query, hierarchyFilters) {\n        let queries = this.getQueryRequest(query);\n        let singles = Query.filterQueryLists(query.queries, ['onSelect', 'onPage', 'onSkip', 'onTake', 'onRange']);\n        let params = query.params;\n        let url = dm.dataSource.url;\n        let temp;\n        let skip;\n        let take = null;\n        let options = this.options;\n        let request = { sorts: [], groups: [], filters: [], searches: [], aggregates: [] };\n        // calc Paging & Range\n        if ('onPage' in singles) {\n            temp = singles.onPage;\n            skip = DataUtil.getValue(temp.pageIndex, query);\n            take = DataUtil.getValue(temp.pageSize, query);\n            skip = (skip - 1) * take;\n        }\n        else if ('onRange' in singles) {\n            temp = singles.onRange;\n            skip = temp.start;\n            take = temp.end - temp.start;\n        }\n        // Sorting\n        for (let i = 0; i < queries.sorts.length; i++) {\n            temp = DataUtil.getValue(queries.sorts[i].e.fieldName, query);\n            request.sorts.push(DataUtil.callAdaptorFunction(this, 'onEachSort', { name: temp, direction: queries.sorts[i].e.direction }, query));\n        }\n        // hierarchy\n        if (hierarchyFilters) {\n            temp = this.getFiltersFrom(hierarchyFilters, query);\n            if (temp) {\n                request.filters.push(DataUtil.callAdaptorFunction(this, 'onEachWhere', temp.toJson(), query));\n            }\n        }\n        // Filters\n        for (let i = 0; i < queries.filters.length; i++) {\n            request.filters.push(DataUtil.callAdaptorFunction(this, 'onEachWhere', queries.filters[i].e.toJson(), query));\n            let keys = typeof request.filters[i] === 'object' ? Object.keys(request.filters[i]) : [];\n            for (let prop of keys) {\n                if (DataUtil.isNull((request)[prop])) {\n                    delete request[prop];\n                }\n            }\n        }\n        // Searches\n        for (let i = 0; i < queries.searches.length; i++) {\n            temp = queries.searches[i].e;\n            request.searches.push(DataUtil.callAdaptorFunction(this, 'onEachSearch', {\n                fields: temp.fieldNames,\n                operator: temp.operator,\n                key: temp.searchKey,\n                ignoreCase: temp.ignoreCase\n            }, query));\n        }\n        // Grouping\n        for (let i = 0; i < queries.groups.length; i++) {\n            request.groups.push(DataUtil.getValue(queries.groups[i].e.fieldName, query));\n        }\n        // aggregates\n        for (let i = 0; i < queries.aggregates.length; i++) {\n            temp = queries.aggregates[i].e;\n            request.aggregates.push({ type: temp.type, field: DataUtil.getValue(temp.field, query) });\n        }\n        let req = {};\n        this.getRequestQuery(options, query, singles, request, req);\n        // Params\n        DataUtil.callAdaptorFunction(this, 'addParams', { dm: dm, query: query, params: params, reqParams: req });\n        if (query.lazyLoad.length) {\n            for (let i = 0; i < query.lazyLoad.length; i++) {\n                req[query.lazyLoad[i].key] = query.lazyLoad[i].value;\n            }\n        }\n        // cleanup\n        let keys = Object.keys(req);\n        for (let prop of keys) {\n            if (DataUtil.isNull(req[prop]) || req[prop] === '' || req[prop].length === 0) {\n                delete req[prop];\n            }\n        }\n        if (!(options.skip in req && options.take in req) && take !== null) {\n            req[options.skip] = DataUtil.callAdaptorFunction(this, 'onSkip', skip, query);\n            req[options.take] = DataUtil.callAdaptorFunction(this, 'onTake', take, query);\n        }\n        let p = this.pvt;\n        this.pvt = {};\n        if (this.options.requestType === 'json') {\n            return {\n                data: JSON.stringify(req, DataUtil.parse.jsonDateReplacer),\n                url: url,\n                pvtData: p,\n                type: 'POST',\n                contentType: 'application/json; charset=utf-8'\n            };\n        }\n        temp = this.convertToQueryString(req, query, dm);\n        temp = (dm.dataSource.url.indexOf('?') !== -1 ? '&' : '/') + temp;\n        return {\n            type: 'GET', url: temp.length ? url.replace(/\\/*$/, temp) : url, pvtData: p\n        };\n    }\n    getRequestQuery(options, query, singles, request, request1) {\n        let param = 'param';\n        let req = request1;\n        req[options.from] = query.fromTable;\n        if (options.apply && query.distincts.length) {\n            req[options.apply] = 'onDistinct' in this ? DataUtil.callAdaptorFunction(this, 'onDistinct', query.distincts) : '';\n        }\n        if (!query.distincts.length && options.expand) {\n            req[options.expand] = 'onExpand' in this && 'onSelect' in singles ?\n                DataUtil.callAdaptorFunction(this, 'onExpand', { selects: DataUtil.getValue(singles.onSelect.fieldNames, query), expands: query.expands }, query) : query.expands;\n        }\n        req[options.select] = 'onSelect' in singles && !query.distincts.length ?\n            DataUtil.callAdaptorFunction(this, 'onSelect', DataUtil.getValue(singles.onSelect.fieldNames, query), query) : '';\n        req[options.count] = query.isCountRequired ? DataUtil.callAdaptorFunction(this, 'onCount', query.isCountRequired, query) : '';\n        req[options.search] = request.searches.length ? DataUtil.callAdaptorFunction(this, 'onSearch', request.searches, query) : '';\n        req[options.skip] = 'onSkip' in singles ?\n            DataUtil.callAdaptorFunction(this, 'onSkip', DataUtil.getValue(singles.onSkip.nos, query), query) : '';\n        req[options.take] = 'onTake' in singles ?\n            DataUtil.callAdaptorFunction(this, 'onTake', DataUtil.getValue(singles.onTake.nos, query), query) : '';\n        req[options.where] = request.filters.length || request.searches.length ?\n            DataUtil.callAdaptorFunction(this, 'onWhere', request.filters, query) : '';\n        req[options.sortBy] = request.sorts.length ? DataUtil.callAdaptorFunction(this, 'onSortBy', request.sorts, query) : '';\n        req[options.group] = request.groups.length ? DataUtil.callAdaptorFunction(this, 'onGroup', request.groups, query) : '';\n        req[options.aggregates] = request.aggregates.length ?\n            DataUtil.callAdaptorFunction(this, 'onAggregates', request.aggregates, query) : '';\n        req[param] = [];\n    }\n    /**\n     * Convert the object from processQuery to string which can be added query string.\n     * @param  {Object} req\n     * @param  {Query} query\n     * @param  {DataManager} dm\n     */\n    convertToQueryString(request, query, dm) {\n        return '';\n        // this needs to be overridden\n    }\n    /**\n     * Return the data from the data manager processing.\n     * @param  {DataResult} data\n     * @param  {DataOptions} ds?\n     * @param  {Query} query?\n     * @param  {XMLHttpRequest} xhr?\n     * @param  {Object} request?\n     * @param  {CrudOptions} changes?\n     */\n    processResponse(data, ds, query, xhr, request, changes) {\n        if (xhr && xhr.getResponseHeader('Content-Type') &&\n            xhr.getResponseHeader('Content-Type').indexOf('application/json') !== -1) {\n            let handleTimeZone = DataUtil.timeZoneHandling;\n            if (ds && !ds.timeZoneHandling) {\n                DataUtil.timeZoneHandling = false;\n            }\n            data = DataUtil.parse.parseJson(data);\n            DataUtil.timeZoneHandling = handleTimeZone;\n        }\n        let requests = request;\n        let pvt = requests.pvtData || {};\n        let groupDs = data ? data.groupDs : [];\n        if (xhr && xhr.getResponseHeader('Content-Type') &&\n            xhr.getResponseHeader('Content-Type').indexOf('xml') !== -1) {\n            return (query.isCountRequired ? { result: [], count: 0 } : []);\n        }\n        let d = JSON.parse(requests.data);\n        if (d && d.action === 'batch' && data && data.addedRecords) {\n            changes.addedRecords = data.addedRecords;\n            return changes;\n        }\n        if (data && data.d) {\n            data = data.d;\n        }\n        let args = {};\n        if (data && 'count' in data) {\n            args.count = data.count;\n        }\n        args.result = data && data.result ? data.result : data;\n        let isExpand = false;\n        if (Array.isArray(data.result) && data.result.length) {\n            let key = 'key';\n            let val = 'value';\n            let level = 'level';\n            if (!isNullOrUndefined(data.result[0][key])) {\n                args.result = this.formRemoteGroupedData(args.result, 1, pvt.groups.length - 1);\n            }\n            if (query && query.lazyLoad.length && pvt.groups.length) {\n                for (let i = 0; i < query.lazyLoad.length; i++) {\n                    if (query.lazyLoad[i][key] === 'onDemandGroupInfo') {\n                        let value = query.lazyLoad[i][val][level];\n                        if (pvt.groups.length === value) {\n                            isExpand = true;\n                        }\n                    }\n                }\n            }\n        }\n        if (!isExpand) {\n            this.getAggregateResult(pvt, data, args, groupDs, query);\n        }\n        return DataUtil.isNull(args.count) ? args.result : { result: args.result, count: args.count, aggregates: args.aggregates };\n    }\n    formRemoteGroupedData(data, level, childLevel) {\n        for (let i = 0; i < data.length; i++) {\n            if (data[i].items.length && Object.keys(data[i].items[0]).indexOf('key') > -1) {\n                this.formRemoteGroupedData(data[i].items, level + 1, childLevel - 1);\n            }\n        }\n        let uid = 'GroupGuid';\n        let childLvl = 'childLevels';\n        let lvl = 'level';\n        let records = 'records';\n        data[uid] = consts$1[uid];\n        data[lvl] = level;\n        data[childLvl] = childLevel;\n        data[records] = data[0].items.length ? this.getGroupedRecords(data, !isNullOrUndefined(data[0].items[records])) : [];\n        return data;\n    }\n    getGroupedRecords(data, hasRecords) {\n        let childGroupedRecords = [];\n        let records = 'records';\n        for (let i = 0; i < data.length; i++) {\n            if (!hasRecords) {\n                for (let j = 0; j < data[i].items.length; j++) {\n                    childGroupedRecords.push(data[i].items[j]);\n                }\n            }\n            else {\n                childGroupedRecords = childGroupedRecords.concat(data[i].items[records]);\n            }\n        }\n        return childGroupedRecords;\n    }\n    /**\n     * Add the group query to the adaptor`s option.\n     * @param  {Object[]} e\n     * @returns void\n     */\n    onGroup(e) {\n        this.pvt.groups = e;\n        return e;\n    }\n    /**\n     * Add the aggregate query to the adaptor`s option.\n     * @param  {Aggregates[]} e\n     * @returns void\n     */\n    onAggregates(e) {\n        this.pvt.aggregates = e;\n    }\n    /**\n     * Prepare the request body based on the newly added, removed and updated records.\n     * The result is used by the batch request.\n     * @param  {DataManager} dm\n     * @param  {CrudOptions} changes\n     * @param  {Object} e\n     */\n    batchRequest(dm, changes, e, query, original) {\n        let url;\n        let key;\n        return {\n            type: 'POST',\n            url: dm.dataSource.batchUrl || dm.dataSource.crudUrl || dm.dataSource.removeUrl || dm.dataSource.url,\n            contentType: 'application/json; charset=utf-8',\n            dataType: 'json',\n            data: JSON.stringify(extend({}, {\n                changed: changes.changedRecords,\n                added: changes.addedRecords,\n                deleted: changes.deletedRecords,\n                action: 'batch',\n                table: e[url],\n                key: e[key]\n            }, DataUtil.getAddParams(this, dm, query)))\n        };\n    }\n    /**\n     * Method will trigger before send the request to server side.\n     * Used to set the custom header or modify the request options.\n     * @param  {DataManager} dm\n     * @param  {XMLHttpRequest} request\n     * @returns void\n     */\n    beforeSend(dm, request) {\n        // need to extend this method\n    }\n    /**\n     * Prepare and returns request body which is used to insert a new record in the table.\n     * @param  {DataManager} dm\n     * @param  {Object} data\n     * @param  {string} tableName\n     */\n    insert(dm, data, tableName, query) {\n        return {\n            url: dm.dataSource.insertUrl || dm.dataSource.crudUrl || dm.dataSource.url,\n            data: JSON.stringify(extend({}, {\n                value: data,\n                table: tableName,\n                action: 'insert'\n            }, DataUtil.getAddParams(this, dm, query)))\n        };\n    }\n    /**\n     * Prepare and return request body which is used to remove record from the table.\n     * @param  {DataManager} dm\n     * @param  {string} keyField\n     * @param  {number|string} value\n     * @param  {string} tableName\n     */\n    remove(dm, keyField, value, tableName, query) {\n        return {\n            type: 'POST',\n            url: dm.dataSource.removeUrl || dm.dataSource.crudUrl || dm.dataSource.url,\n            data: JSON.stringify(extend({}, {\n                key: value,\n                keyColumn: keyField,\n                table: tableName,\n                action: 'remove'\n            }, DataUtil.getAddParams(this, dm, query)))\n        };\n    }\n    /**\n     * Prepare and return request body which is used to update record.\n     * @param  {DataManager} dm\n     * @param  {string} keyField\n     * @param  {Object} value\n     * @param  {string} tableName\n     */\n    update(dm, keyField, value, tableName, query) {\n        return {\n            type: 'POST',\n            url: dm.dataSource.updateUrl || dm.dataSource.crudUrl || dm.dataSource.url,\n            data: JSON.stringify(extend({}, {\n                value: value,\n                action: 'update',\n                keyColumn: keyField,\n                key: DataUtil.getObject(keyField, value),\n                table: tableName\n            }, DataUtil.getAddParams(this, dm, query)))\n        };\n    }\n    /**\n     * To generate the predicate based on the filtered query.\n     * @param  {Object[]|string[]|number[]} data\n     * @param  {Query} query\n     * @hidden\n     */\n    getFiltersFrom(data, query) {\n        let key = query.fKey;\n        let value;\n        let prop = key;\n        let pKey = query.key;\n        let predicats = [];\n        if (typeof data[0] !== 'object') {\n            prop = null;\n        }\n        for (let i = 0; i < data.length; i++) {\n            if (typeof data[0] === 'object') {\n                value = DataUtil.getObject(pKey || prop, data[i]);\n            }\n            else {\n                value = data[i];\n            }\n            predicats.push(new Predicate(key, 'equal', value));\n        }\n        return Predicate.or(predicats);\n    }\n    getAggregateResult(pvt, data, args, groupDs, query) {\n        let pData = data;\n        if (data && data.result) {\n            pData = data.result;\n        }\n        if (pvt && pvt.aggregates && pvt.aggregates.length) {\n            let agg = pvt.aggregates;\n            let fn;\n            let aggregateData = pData;\n            let res = {};\n            if (data.aggregate) {\n                aggregateData = data.aggregate;\n            }\n            for (let i = 0; i < agg.length; i++) {\n                fn = DataUtil.aggregates[agg[i].type];\n                if (fn) {\n                    res[agg[i].field + ' - ' + agg[i].type] = fn(aggregateData, agg[i].field);\n                }\n            }\n            args.aggregates = res;\n        }\n        let key = 'key';\n        let isServerGrouping = Array.isArray(data.result) && data.result.length && !isNullOrUndefined(data.result[0][key]);\n        if (pvt && pvt.groups && pvt.groups.length && !isServerGrouping) {\n            let groups = pvt.groups;\n            for (let i = 0; i < groups.length; i++) {\n                let level = null;\n                if (!isNullOrUndefined(groupDs)) {\n                    groupDs = DataUtil.group(groupDs, groups[i]);\n                }\n                let groupQuery = Query.filterQueries(query.queries, 'onGroup')[i].e;\n                pData = DataUtil.group(pData, groups[i], pvt.aggregates, level, groupDs, groupQuery.comparer);\n            }\n            args.result = pData;\n        }\n        return args;\n    }\n    getQueryRequest(query) {\n        let req = { sorts: [], groups: [], filters: [], searches: [], aggregates: [] };\n        req.sorts = Query.filterQueries(query.queries, 'onSortBy');\n        req.groups = Query.filterQueries(query.queries, 'onGroup');\n        req.filters = Query.filterQueries(query.queries, 'onWhere');\n        req.searches = Query.filterQueries(query.queries, 'onSearch');\n        req.aggregates = Query.filterQueries(query.queries, 'onAggregates');\n        return req;\n    }\n    addParams(options) {\n        let req = options.reqParams;\n        if (options.params.length) {\n            req.params = {};\n        }\n        for (let tmp of options.params) {\n            if (req[tmp.key]) {\n                throw new Error('Query() - addParams: Custom Param is conflicting other request arguments');\n            }\n            req[tmp.key] = tmp.value;\n            if (tmp.fn) {\n                req[tmp.key] = tmp.fn.call(options.query, tmp.key, options.query, options.dm);\n            }\n            req.params[tmp.key] = req[tmp.key];\n        }\n    }\n}\n/**\n * OData Adaptor that is extended from URL Adaptor, is used for consuming data through OData Service.\n * @hidden\n */\nclass ODataAdaptor extends UrlAdaptor {\n    constructor(props) {\n        super();\n        // options replaced the default adaptor options\n        this.options = extend({}, this.options, {\n            requestType: 'get',\n            accept: 'application/json;odata=light;q=1,application/json;odata=verbose;q=0.5',\n            multipartAccept: 'multipart/mixed',\n            sortBy: '$orderby',\n            select: '$select',\n            skip: '$skip',\n            take: '$top',\n            count: '$inlinecount',\n            where: '$filter',\n            expand: '$expand',\n            batch: '$batch',\n            changeSet: '--changeset_',\n            batchPre: 'batch_',\n            contentId: 'Content-Id: ',\n            batchContent: 'Content-Type: multipart/mixed; boundary=',\n            changeSetContent: 'Content-Type: application/http\\nContent-Transfer-Encoding: binary ',\n            batchChangeSetContentType: 'Content-Type: application/json; charset=utf-8 ',\n            updateType: 'PUT'\n        });\n        extend(this.options, props || {});\n    }\n    getModuleName() {\n        return 'ODataAdaptor';\n    }\n    /**\n     * Generate request string based on the filter criteria from query.\n     * @param  {Predicate} pred\n     * @param  {boolean} requiresCast?\n     */\n    onPredicate(predicate, query, requiresCast) {\n        let returnValue = '';\n        let operator;\n        let guid;\n        let val = predicate.value;\n        let type = typeof val;\n        let field = predicate.field ? ODataAdaptor.getField(predicate.field) : null;\n        if (val instanceof Date) {\n            val = 'datetime\\'' + DataUtil.parse.replacer(val) + '\\'';\n        }\n        if (type === 'string') {\n            val = encodeURIComponent(val);\n            val = '\\'' + val + '\\'';\n            if (requiresCast) {\n                field = 'cast(' + field + ', \\'Edm.String\\')';\n            }\n            if (DataUtil.parse.isGuid(val)) {\n                guid = 'guid';\n            }\n            if (predicate.ignoreCase) {\n                if (!guid) {\n                    field = 'tolower(' + field + ')';\n                }\n                val = val.toLowerCase();\n            }\n        }\n        operator = DataUtil.odBiOperator[predicate.operator];\n        if (operator) {\n            returnValue += field;\n            returnValue += operator;\n            if (guid) {\n                returnValue += guid;\n            }\n            return returnValue + val;\n        }\n        if (!isNullOrUndefined(this.getModuleName) && this.getModuleName() === 'ODataV4Adaptor') {\n            operator = DataUtil.odv4UniOperator[predicate.operator];\n        }\n        else {\n            operator = DataUtil.odUniOperator[predicate.operator];\n        }\n        if (operator === 'substringof') {\n            let temp = val;\n            val = field;\n            field = temp;\n        }\n        returnValue += operator + '(';\n        returnValue += field + ',';\n        if (guid) {\n            returnValue += guid;\n        }\n        returnValue += val + ')';\n        return returnValue;\n    }\n    addParams(options) {\n        super.addParams(options);\n        delete options.reqParams.params;\n    }\n    /**\n     * Generate request string based on the multiple filter criteria from query.\n     * @param  {Predicate} pred\n     * @param  {boolean} requiresCast?\n     */\n    onComplexPredicate(predicate, query, requiresCast) {\n        let res = [];\n        for (let i = 0; i < predicate.predicates.length; i++) {\n            res.push('(' + this.onEachWhere(predicate.predicates[i], query, requiresCast) + ')');\n        }\n        return res.join(' ' + predicate.condition + ' ');\n    }\n    /**\n     * Generate query string based on the multiple filter criteria from query.\n     * @param  {Predicate} filter\n     * @param  {boolean} requiresCast?\n     */\n    onEachWhere(filter, query, requiresCast) {\n        return filter.isComplex ? this.onComplexPredicate(filter, query, requiresCast) : this.onPredicate(filter, query, requiresCast);\n    }\n    /**\n     * Generate query string based on the multiple filter criteria from query.\n     * @param  {string[]} filters\n     */\n    onWhere(filters) {\n        if (this.pvt.search) {\n            filters.push(this.onEachWhere(this.pvt.search, null, true));\n        }\n        return filters.join(' and ');\n    }\n    /**\n     * Generate query string based on the multiple search criteria from query.\n     * @param  {{fields:string[]} e\n     * @param  {string} operator\n     * @param  {string} key\n     * @param  {boolean}} ignoreCase\n     */\n    onEachSearch(e) {\n        if (e.fields && e.fields.length === 0) {\n            DataUtil.throwError('Query() - Search : oData search requires list of field names to search');\n        }\n        let filter = this.pvt.search || [];\n        for (let i = 0; i < e.fields.length; i++) {\n            filter.push(new Predicate(e.fields[i], e.operator, e.key, e.ignoreCase));\n        }\n        this.pvt.search = filter;\n    }\n    /**\n     * Generate query string based on the search criteria from query.\n     * @param  {Object} e\n     */\n    onSearch(e) {\n        this.pvt.search = Predicate.or(this.pvt.search);\n        return '';\n    }\n    /**\n     * Generate query string based on multiple sort criteria from query.\n     * @param  {QueryOptions} e\n     */\n    onEachSort(e) {\n        let res = [];\n        if (e.name instanceof Array) {\n            for (let i = 0; i < e.name.length; i++) {\n                res.push(ODataAdaptor.getField(e.name[i]) + (e.direction === 'descending' ? ' desc' : ''));\n            }\n        }\n        else {\n            res.push(ODataAdaptor.getField(e.name) + (e.direction === 'descending' ? ' desc' : ''));\n        }\n        return res.join(',');\n    }\n    /**\n     * Returns sort query string.\n     * @param  {string[]} e\n     */\n    onSortBy(e) {\n        return e.reverse().join(',');\n    }\n    /**\n     * Adds the group query to the adaptor option.\n     * @param  {Object[]} e\n     * @returns string\n     */\n    onGroup(e) {\n        this.pvt.groups = e;\n        return [];\n    }\n    /**\n     * Returns the select query string.\n     * @param  {string[]} e\n     */\n    onSelect(e) {\n        for (let i = 0; i < e.length; i++) {\n            e[i] = ODataAdaptor.getField(e[i]);\n        }\n        return e.join(',');\n    }\n    /**\n     * Add the aggregate query to the adaptor option.\n     * @param  {Object[]} e\n     * @returns string\n     */\n    onAggregates(e) {\n        this.pvt.aggregates = e;\n        return '';\n    }\n    /**\n     * Returns the query string which requests total count from the data source.\n     * @param  {boolean} e\n     * @returns string\n     */\n    onCount(e) {\n        return e === true ? 'allpages' : '';\n    }\n    /**\n     * Method will trigger before send the request to server side.\n     * Used to set the custom header or modify the request options.\n     * @param  {DataManager} dm\n     * @param  {XMLHttpRequest} request\n     * @param  {Ajax} settings?\n     */\n    beforeSend(dm, request, settings) {\n        if (DataUtil.endsWith(settings.url, this.options.batch) && settings.type.toLowerCase() === 'post') {\n            request.setRequestHeader('Accept', this.options.multipartAccept);\n            request.setRequestHeader('DataServiceVersion', '2.0');\n            request.overrideMimeType('text/plain; charset=x-user-defined');\n        }\n        else {\n            request.setRequestHeader('Accept', this.options.accept);\n        }\n        request.setRequestHeader('DataServiceVersion', '2.0');\n        request.setRequestHeader('MaxDataServiceVersion', '2.0');\n    }\n    /**\n     * Returns the data from the query processing.\n     * @param  {DataResult} data\n     * @param  {DataOptions} ds?\n     * @param  {Query} query?\n     * @param  {XMLHttpRequest} xhr?\n     * @param  {Ajax} request?\n     * @param  {CrudOptions} changes?\n     * @returns aggregateResult\n     */\n    processResponse(data, ds, query, xhr, request, changes) {\n        let metaCheck = 'odata.metadata';\n        if ((request && request.type === 'GET') && !this.rootUrl && data[metaCheck]) {\n            let dataUrls = data[metaCheck].split('/$metadata#');\n            this.rootUrl = dataUrls[0];\n            this.resourceTableName = dataUrls[1];\n        }\n        let pvtData = 'pvtData';\n        if (!isNullOrUndefined(data.d)) {\n            let dataCopy = ((query && query.isCountRequired) ? data.d.results : data.d);\n            let metaData = '__metadata';\n            if (!isNullOrUndefined(dataCopy)) {\n                for (let i = 0; i < dataCopy.length; i++) {\n                    if (!isNullOrUndefined(dataCopy[i][metaData])) {\n                        delete dataCopy[i][metaData];\n                    }\n                }\n            }\n        }\n        let pvt = request && request[pvtData];\n        let emptyAndBatch = this.processBatchResponse(data, query, xhr, request, changes);\n        if (emptyAndBatch) {\n            return emptyAndBatch;\n        }\n        let versionCheck = xhr && request.getResponseHeader('DataServiceVersion');\n        let count = null;\n        let version = (versionCheck && parseInt(versionCheck, 10)) || 2;\n        if (query && query.isCountRequired) {\n            let oDataCount = '__count';\n            if (data[oDataCount] || data['odata.count']) {\n                count = data[oDataCount] || data['odata.count'];\n            }\n            if (data.d) {\n                data = data.d;\n            }\n            if (data[oDataCount] || data['odata.count']) {\n                count = data[oDataCount] || data['odata.count'];\n            }\n        }\n        if (version === 3 && data.value) {\n            data = data.value;\n        }\n        if (data.d) {\n            data = data.d;\n        }\n        if (version < 3 && data.results) {\n            data = data.results;\n        }\n        let args = {};\n        args.count = count;\n        args.result = data;\n        this.getAggregateResult(pvt, data, args, null, query);\n        return DataUtil.isNull(count) ? args.result : { result: args.result, count: args.count, aggregates: args.aggregates };\n    }\n    /**\n     * Converts the request object to query string.\n     * @param  {Object} req\n     * @param  {Query} query\n     * @param  {DataManager} dm\n     * @returns tableName\n     */\n    convertToQueryString(request, query, dm) {\n        let res = [];\n        let table = 'table';\n        let tableName = request[table] || '';\n        let format = '$format';\n        delete request[table];\n        if (dm.dataSource.requiresFormat) {\n            request[format] = 'json';\n        }\n        let keys = Object.keys(request);\n        for (let prop of keys) {\n            res.push(prop + '=' + request[prop]);\n        }\n        res = res.join('&');\n        if (dm.dataSource.url && dm.dataSource.url.indexOf('?') !== -1 && !tableName) {\n            return res;\n        }\n        return res.length ? tableName + '?' + res : tableName || '';\n    }\n    localTimeReplacer(key, convertObj) {\n        for (let prop of !isNullOrUndefined(convertObj) ? Object.keys(convertObj) : []) {\n            if ((convertObj[prop] instanceof Date)) {\n                convertObj[prop] = DataUtil.dateParse.toLocalTime(convertObj[prop]);\n            }\n        }\n        return convertObj;\n    }\n    /**\n     * Prepare and returns request body which is used to insert a new record in the table.\n     * @param  {DataManager} dm\n     * @param  {Object} data\n     * @param  {string} tableName?\n     */\n    insert(dm, data, tableName) {\n        return {\n            url: (dm.dataSource.insertUrl || dm.dataSource.url).replace(/\\/*$/, tableName ? '/' + tableName : ''),\n            data: JSON.stringify(data, this.options.localTime ? this.localTimeReplacer : null)\n        };\n    }\n    /**\n     * Prepare and return request body which is used to remove record from the table.\n     * @param  {DataManager} dm\n     * @param  {string} keyField\n     * @param  {number} value\n     * @param  {string} tableName?\n     */\n    remove(dm, keyField, value, tableName) {\n        let url;\n        if (typeof value === 'string' && !DataUtil.parse.isGuid(value)) {\n            url = `('${value}')`;\n        }\n        else {\n            url = `(${value})`;\n        }\n        return {\n            type: 'DELETE',\n            url: (dm.dataSource.removeUrl || dm.dataSource.url).replace(/\\/*$/, tableName ? '/' + tableName : '') + url\n        };\n    }\n    /**\n     * Updates existing record and saves the changes to the table.\n     * @param  {DataManager} dm\n     * @param  {string} keyField\n     * @param  {Object} value\n     * @param  {string} tableName?\n     * @returns this\n     */\n    update(dm, keyField, value, tableName, query, original) {\n        if (this.options.updateType === 'PATCH' && !isNullOrUndefined(original)) {\n            value = this.compareAndRemove(value, original, keyField);\n        }\n        let url;\n        if (typeof value[keyField] === 'string' && !DataUtil.parse.isGuid(value[keyField])) {\n            url = `('${value[keyField]}')`;\n        }\n        else {\n            url = `(${value[keyField]})`;\n        }\n        return {\n            type: this.options.updateType,\n            url: (dm.dataSource.updateUrl || dm.dataSource.url).replace(/\\/*$/, tableName ? '/' + tableName : '') + url,\n            data: JSON.stringify(value, this.options.localTime ? this.localTimeReplacer : null),\n            accept: this.options.accept\n        };\n    }\n    /**\n     * Prepare the request body based on the newly added, removed and updated records.\n     * The result is used by the batch request.\n     * @param  {DataManager} dm\n     * @param  {CrudOptions} changes\n     * @param  {RemoteArgs} e\n     * @returns {Object}\n     */\n    batchRequest(dm, changes, e, query, original) {\n        let initialGuid = e.guid = DataUtil.getGuid(this.options.batchPre);\n        let url = this.rootUrl ? this.rootUrl + '/' + this.options.batch :\n            dm.dataSource.url.replace(/\\/*$/, '/' + this.options.batch);\n        e.url = this.resourceTableName ? this.resourceTableName : e.url;\n        let args = {\n            url: e.url,\n            key: e.key,\n            cid: 1,\n            cSet: DataUtil.getGuid(this.options.changeSet)\n        };\n        let req = '--' + initialGuid + '\\n';\n        req += 'Content-Type: multipart/mixed; boundary=' + args.cSet.replace('--', '') + '\\n';\n        this.pvt.changeSet = 0;\n        req += this.generateInsertRequest(changes.addedRecords, args, dm);\n        req += this.generateUpdateRequest(changes.changedRecords, args, dm, original ? original.changedRecords : []);\n        req += this.generateDeleteRequest(changes.deletedRecords, args, dm);\n        req += args.cSet + '--\\n';\n        req += '--' + initialGuid + '--';\n        return {\n            type: 'POST',\n            url: url,\n            dataType: 'json',\n            contentType: 'multipart/mixed; charset=UTF-8;boundary=' + initialGuid,\n            data: req\n        };\n    }\n    /**\n     * Generate the string content from the removed records.\n     * The result will be send during batch update.\n     * @param  {Object[]} arr\n     * @param  {RemoteArgs} e\n     * @returns this\n     */\n    generateDeleteRequest(arr, e, dm) {\n        if (!arr) {\n            return '';\n        }\n        let req = '';\n        let stat = {\n            'method': 'DELETE ',\n            'url': (data, i, key) => {\n                let url = DataUtil.getObject(key, data[i]);\n                if (typeof url === 'number' || DataUtil.parse.isGuid(url)) {\n                    return '(' + url + ')';\n                }\n                else if (url instanceof Date) {\n                    let dateTime = data[i][key];\n                    return '(' + dateTime.toJSON() + ')';\n                }\n                else {\n                    return `('${url}')`;\n                }\n            },\n            'data': (data, i) => ''\n        };\n        req = this.generateBodyContent(arr, e, stat, dm);\n        return req + '\\n';\n    }\n    /**\n     * Generate the string content from the inserted records.\n     * The result will be send during batch update.\n     * @param  {Object[]} arr\n     * @param  {RemoteArgs} e\n     */\n    generateInsertRequest(arr, e, dm) {\n        if (!arr) {\n            return '';\n        }\n        let req = '';\n        let stat = {\n            'method': 'POST ',\n            'url': (data, i, key) => '',\n            'data': (data, i) => JSON.stringify(data[i]) + '\\n\\n'\n        };\n        req = this.generateBodyContent(arr, e, stat, dm);\n        return req;\n    }\n    /**\n     * Generate the string content from the updated records.\n     * The result will be send during batch update.\n     * @param  {Object[]} arr\n     * @param  {RemoteArgs} e\n     */\n    generateUpdateRequest(arr, e, dm, org) {\n        if (!arr) {\n            return '';\n        }\n        let req = '';\n        arr.forEach((change) => change = this.compareAndRemove(change, org.filter((o) => DataUtil.getObject(e.key, o) === DataUtil.getObject(e.key, change))[0], e.key));\n        let stat = {\n            'method': this.options.updateType + ' ',\n            'url': (data, i, key) => {\n                if (typeof data[i][key] === 'number' || DataUtil.parse.isGuid(data[i][key])) {\n                    return '(' + data[i][key] + ')';\n                }\n                else if (data[i][key] instanceof Date) {\n                    let date = data[i][key];\n                    return '(' + date.toJSON() + ')';\n                }\n                else {\n                    return `('${data[i][key]}')`;\n                }\n            },\n            'data': (data, i) => JSON.stringify(data[i]) + '\\n\\n'\n        };\n        req = this.generateBodyContent(arr, e, stat, dm);\n        return req;\n    }\n    static getField(prop) {\n        return prop.replace(/\\./g, '/');\n    }\n    generateBodyContent(arr, e, stat, dm) {\n        let req = '';\n        for (let i = 0; i < arr.length; i++) {\n            req += '\\n' + e.cSet + '\\n';\n            req += this.options.changeSetContent + '\\n\\n';\n            req += stat.method;\n            if (stat.method === 'POST ') {\n                req += (dm.dataSource.insertUrl || dm.dataSource.crudUrl || e.url) + stat.url(arr, i, e.key) + ' HTTP/1.1\\n';\n            }\n            else if (stat.method === 'PUT ' || stat.method === 'PATCH ') {\n                req += (dm.dataSource.updateUrl || dm.dataSource.crudUrl || e.url) + stat.url(arr, i, e.key) + ' HTTP/1.1\\n';\n            }\n            else if (stat.method === 'DELETE ') {\n                req += (dm.dataSource.removeUrl || dm.dataSource.crudUrl || e.url) + stat.url(arr, i, e.key) + ' HTTP/1.1\\n';\n            }\n            req += 'Accept: ' + this.options.accept + '\\n';\n            req += 'Content-Id: ' + this.pvt.changeSet++ + '\\n';\n            req += this.options.batchChangeSetContentType + '\\n';\n            if (!isNullOrUndefined(arr[i]['@odata.etag'])) {\n                req += 'If-Match: ' + arr[i]['@odata.etag'] + '\\n\\n';\n                delete arr[i]['@odata.etag'];\n            }\n            else {\n                req += '\\n';\n            }\n            req += stat.data(arr, i);\n        }\n        return req;\n    }\n    processBatchResponse(data, query, xhr, request, changes) {\n        if (xhr && xhr.getResponseHeader('Content-Type') && xhr.getResponseHeader('Content-Type').indexOf('xml') !== -1) {\n            return (query.isCountRequired ? { result: [], count: 0 } : []);\n        }\n        if (request && this.options.batch && DataUtil.endsWith(request.url, this.options.batch) && request.type.toLowerCase() === 'post') {\n            let guid = xhr.getResponseHeader('Content-Type');\n            let cIdx;\n            let jsonObj;\n            let d = data + '';\n            guid = guid.substring(guid.indexOf('=batchresponse') + 1);\n            d = d.split(guid);\n            if (d.length < 2) {\n                return {};\n            }\n            d = d[1];\n            let exVal = /(?:\\bContent-Type.+boundary=)(changesetresponse.+)/i.exec(d);\n            if (exVal) {\n                d.replace(exVal[0], '');\n            }\n            let changeGuid = exVal ? exVal[1] : '';\n            d = d.split(changeGuid);\n            for (let i = d.length; i > -1; i--) {\n                if (!/\\bContent-ID:/i.test(d[i]) || !/\\bHTTP.+201/.test(d[i])) {\n                    continue;\n                }\n                cIdx = parseInt(/\\bContent-ID: (\\d+)/i.exec(d[i])[1], 10);\n                if (changes.addedRecords[cIdx]) {\n                    jsonObj = DataUtil.parse.parseJson(/^\\{.+\\}/m.exec(d[i])[0]);\n                    extend({}, changes.addedRecords[cIdx], this.processResponse(jsonObj));\n                }\n            }\n            return changes;\n        }\n        return null;\n    }\n    compareAndRemove(data, original, key) {\n        if (isNullOrUndefined(original)) {\n            return data;\n        }\n        Object.keys(data).forEach((prop) => {\n            if (prop !== key && prop !== '@odata.etag') {\n                if (DataUtil.isPlainObject(data[prop])) {\n                    this.compareAndRemove(data[prop], original[prop]);\n                    let final = Object.keys(data[prop]).filter((data) => data !== '@odata.etag');\n                    if (final.length === 0) {\n                        delete data[prop];\n                    }\n                }\n                else if (data[prop] === original[prop]) {\n                    delete data[prop];\n                }\n                else if (data[prop] && original[prop] && data[prop].valueOf() === original[prop].valueOf()) {\n                    delete data[prop];\n                }\n            }\n        });\n        return data;\n    }\n}\n/**\n * The OData v4 is an improved version of OData protocols.\n * The DataManager uses the ODataV4Adaptor to consume OData v4 services.\n * @hidden\n */\nclass ODataV4Adaptor extends ODataAdaptor {\n    constructor(props) {\n        super(props);\n        // options replaced the default adaptor options\n        this.options = extend({}, this.options, {\n            requestType: 'get',\n            accept: 'application/json, text/javascript, */*; q=0.01',\n            multipartAccept: 'multipart/mixed',\n            sortBy: '$orderby',\n            select: '$select',\n            skip: '$skip',\n            take: '$top',\n            count: '$count',\n            search: '$search',\n            where: '$filter',\n            expand: '$expand',\n            batch: '$batch',\n            changeSet: '--changeset_',\n            batchPre: 'batch_',\n            contentId: 'Content-Id: ',\n            batchContent: 'Content-Type: multipart/mixed; boundary=',\n            changeSetContent: 'Content-Type: application/http\\nContent-Transfer-Encoding: binary ',\n            batchChangeSetContentType: 'Content-Type: application/json; charset=utf-8 ',\n            updateType: 'PATCH',\n            localTime: false,\n            apply: '$apply'\n        });\n        extend(this.options, props || {});\n    }\n    /**\n     * @hidden\n     */\n    getModuleName() {\n        return 'ODataV4Adaptor';\n    }\n    /**\n     * Returns the query string which requests total count from the data source.\n     * @param  {boolean} e\n     * @returns string\n     */\n    onCount(e) {\n        return e === true ? 'true' : '';\n    }\n    /**\n     * Generate request string based on the filter criteria from query.\n     * @param  {Predicate} pred\n     * @param  {boolean} requiresCast?\n     */\n    onPredicate(predicate, query, requiresCast) {\n        let returnValue = '';\n        let val = predicate.value;\n        let isDate = val instanceof Date;\n        if (query instanceof Query) {\n            let queries = this.getQueryRequest(query);\n            for (let i = 0; i < queries.filters.length; i++) {\n                if (queries.filters[i].e.key === predicate.value) {\n                    requiresCast = true;\n                }\n            }\n        }\n        returnValue = super.onPredicate.call(this, predicate, query, requiresCast);\n        if (isDate) {\n            returnValue = returnValue.replace(/datetime'(.*)'$/, '$1');\n        }\n        if (DataUtil.parse.isGuid(val)) {\n            returnValue = returnValue.replace('guid', '').replace(/'/g, '');\n        }\n        return returnValue;\n    }\n    /**\n     *  Generate query string based on the multiple search criteria from query.\n     * @param  {{fields:string[]} e\n     * @param  {string} operator\n     * @param  {string} key\n     * @param  {boolean}} ignoreCase\n     */\n    onEachSearch(e) {\n        let search = this.pvt.searches || [];\n        search.push(e.key);\n        this.pvt.searches = search;\n    }\n    /**\n     *  Generate query string based on the search criteria from query.\n     * @param  {Object} e\n     */\n    onSearch(e) {\n        return this.pvt.searches.join(' OR ');\n    }\n    /**\n     * Returns the expand query string.\n     * @param  {string} e\n     */\n    onExpand(e) {\n        let selected = {};\n        let expanded = {};\n        let expands = e.expands.slice();\n        let exArr = [];\n        let selects = e.selects.filter((item) => item.indexOf('.') > -1);\n        selects.forEach((select) => {\n            let splits = select.split('.');\n            if (!(splits[0] in selected)) {\n                selected[splits[0]] = [];\n            }\n            selected[splits[0]].push(splits[1]);\n        });\n        //Auto expand from select query\n        Object.keys(selected).forEach((expand) => {\n            if ((expands.indexOf(expand) === -1)) {\n                expands.push(expand);\n            }\n        });\n        expands.forEach((expand) => {\n            expanded[expand] = expand in selected ? `${expand}(${this.options.select}=${selected[expand].join(',')})` : expand;\n        });\n        Object.keys(expanded).forEach((ex) => exArr.push(expanded[ex]));\n        return exArr.join(',');\n    }\n    /**\n     * Returns the groupby query string.\n     * @param  {string} e\n     */\n    onDistinct(distinctFields) {\n        let fields = distinctFields.map((field) => ODataAdaptor.getField(field)).join(',');\n        return `groupby((${fields}))`;\n    }\n    /**\n     * Returns the select query string.\n     * @param  {string[]} e\n     */\n    onSelect(e) {\n        return super.onSelect(e.filter((item) => item.indexOf('.') === -1));\n    }\n    /**\n     * Method will trigger before send the request to server side.\n     * Used to set the custom header or modify the request options.\n     * @param  {DataManager} dm\n     * @param  {XMLHttpRequest} request\n     * @param  {Ajax} settings\n     * @returns void\n     */\n    beforeSend(dm, request, settings) {\n        if (settings.type === 'POST' || settings.type === 'PUT' || settings.type === 'PATCH') {\n            request.setRequestHeader('Prefer', 'return=representation');\n        }\n        request.setRequestHeader('Accept', this.options.accept);\n    }\n    /**\n     * Returns the data from the query processing.\n     * @param  {DataResult} data\n     * @param  {DataOptions} ds?\n     * @param  {Query} query?\n     * @param  {XMLHttpRequest} xhr?\n     * @param  {Ajax} request?\n     * @param  {CrudOptions} changes?\n     * @returns aggregateResult\n     */\n    processResponse(data, ds, query, xhr, request, changes) {\n        let metaName = '@odata.context';\n        if ((request && request.type === 'GET') && !this.rootUrl && data[metaName]) {\n            let dataUrl = data[metaName].split('/$metadata#');\n            this.rootUrl = dataUrl[0];\n            this.resourceTableName = dataUrl[1];\n        }\n        let pvtData = 'pvtData';\n        let pvt = request && request[pvtData];\n        let emptyAndBatch = super.processBatchResponse(data, query, xhr, request, changes);\n        if (emptyAndBatch) {\n            return emptyAndBatch;\n        }\n        let count = null;\n        let dataCount = '@odata.count';\n        if (query && query.isCountRequired) {\n            if (dataCount in data) {\n                count = data[dataCount];\n            }\n        }\n        data = !isNullOrUndefined(data.value) ? data.value : data;\n        let args = {};\n        args.count = count;\n        args.result = data;\n        this.getAggregateResult(pvt, data, args, null, query);\n        return DataUtil.isNull(count) ? args.result : { result: args.result, count: count, aggregates: args.aggregates };\n    }\n}\n/**\n * The Web API is a programmatic interface to define the request and response messages system that is mostly exposed in JSON or XML.\n * The DataManager uses the WebApiAdaptor to consume Web API.\n * Since this adaptor is targeted to interact with Web API created using OData endpoint, it is extended from ODataAdaptor\n * @hidden\n */\nclass WebApiAdaptor extends ODataAdaptor {\n    getModuleName() {\n        return 'WebApiAdaptor';\n    }\n    /**\n     * Prepare and returns request body which is used to insert a new record in the table.\n     * @param  {DataManager} dm\n     * @param  {Object} data\n     * @param  {string} tableName?\n     */\n    insert(dm, data, tableName) {\n        return {\n            type: 'POST',\n            url: dm.dataSource.url,\n            data: JSON.stringify(data)\n        };\n    }\n    /**\n     * Prepare and return request body which is used to remove record from the table.\n     * @param  {DataManager} dm\n     * @param  {string} keyField\n     * @param  {number} value\n     * @param  {string} tableName?\n     */\n    remove(dm, keyField, value, tableName) {\n        return {\n            type: 'DELETE',\n            url: dm.dataSource.url + '/' + value,\n            data: JSON.stringify(value)\n        };\n    }\n    /**\n     * Prepare and return request body which is used to update record.\n     * @param  {DataManager} dm\n     * @param  {string} keyField\n     * @param  {Object} value\n     * @param  {string} tableName?\n     */\n    update(dm, keyField, value, tableName) {\n        return {\n            type: 'PUT',\n            url: dm.dataSource.url,\n            data: JSON.stringify(value)\n        };\n    }\n    batchRequest(dm, changes, e) {\n        let initialGuid = e.guid = DataUtil.getGuid(this.options.batchPre);\n        let url = dm.dataSource.url.replace(/\\/*$/, '/' + this.options.batch);\n        e.url = this.resourceTableName ? this.resourceTableName : e.url;\n        let req = [];\n        //insertion\n        for (let i = 0, x = changes.addedRecords.length; i < x; i++) {\n            changes.addedRecords.forEach((j, d) => {\n                let stat = {\n                    'method': 'POST ',\n                    'url': (data, i, key) => '',\n                    'data': (data, i) => JSON.stringify(data[i]) + '\\n\\n'\n                };\n                req.push('--' + initialGuid);\n                req.push('Content-Type: application/http; msgtype=request', '');\n                req.push('POST ' + '/api/' + (dm.dataSource.insertUrl || dm.dataSource.crudUrl || e.url)\n                    + stat.url(changes.addedRecords, i, e.key) + ' HTTP/1.1');\n                req.push('Content-Type: ' + 'application/json; charset=utf-8');\n                req.push('Host: ' + location.host);\n                req.push('', j ? JSON.stringify(j) : '');\n            });\n        }\n        //updation \n        for (let i = 0, x = changes.changedRecords.length; i < x; i++) {\n            changes.changedRecords.forEach((j, d) => {\n                let stat = {\n                    'method': this.options.updateType + ' ',\n                    'url': (data, i, key) => '',\n                    'data': (data, i) => JSON.stringify(data[i]) + '\\n\\n'\n                };\n                req.push('--' + initialGuid);\n                req.push('Content-Type: application/http; msgtype=request', '');\n                req.push('PUT ' + '/api/' + (dm.dataSource.updateUrl || dm.dataSource.crudUrl || e.url)\n                    + stat.url(changes.changedRecords, i, e.key) + ' HTTP/1.1');\n                req.push('Content-Type: ' + 'application/json; charset=utf-8');\n                req.push('Host: ' + location.host);\n                req.push('', j ? JSON.stringify(j) : '');\n            });\n        }\n        //deletion\n        for (let i = 0, x = changes.deletedRecords.length; i < x; i++) {\n            changes.deletedRecords.forEach((j, d) => {\n                let state = {\n                    'mtd': 'DELETE ',\n                    'url': (data, i, key) => {\n                        let url = DataUtil.getObject(key, data[i]);\n                        if (typeof url === 'number' || DataUtil.parse.isGuid(url)) {\n                            return '/' + url;\n                        }\n                        else if (url instanceof Date) {\n                            let datTime = data[i][key];\n                            return '/' + datTime.toJSON();\n                        }\n                        else {\n                            return `/'${url}'`;\n                        }\n                    },\n                    'data': (data, i) => ''\n                };\n                req.push('--' + initialGuid);\n                req.push('Content-Type: application/http; msgtype=request', '');\n                req.push('DELETE ' + '/api/' + (dm.dataSource.removeUrl || dm.dataSource.crudUrl || e.url)\n                    + state.url(changes.deletedRecords, i, e.key) + ' HTTP/1.1');\n                req.push('Content-Type: ' + 'application/json; charset=utf-8');\n                req.push('Host: ' + location.host);\n                req.push('', j ? JSON.stringify(j) : '');\n            });\n        }\n        req.push('--' + initialGuid + '--', '');\n        return {\n            type: 'POST',\n            url: url,\n            contentType: 'multipart/mixed; boundary=' + initialGuid,\n            data: req.join('\\r\\n')\n        };\n    }\n    /**\n     * Method will trigger before send the request to server side.\n     * Used to set the custom header or modify the request options.\n     * @param  {DataManager} dm\n     * @param  {XMLHttpRequest} request\n     * @param  {Ajax} settings\n     * @returns void\n     */\n    beforeSend(dm, request, settings) {\n        request.setRequestHeader('Accept', 'application/json, text/javascript, */*; q=0.01');\n    }\n    /**\n     * Returns the data from the query processing.\n     * @param  {DataResult} data\n     * @param  {DataOptions} ds?\n     * @param  {Query} query?\n     * @param  {XMLHttpRequest} xhr?\n     * @param  {Ajax} request?\n     * @param  {CrudOptions} changes?\n     * @returns aggregateResult\n     */\n    processResponse(data, ds, query, xhr, request, changes) {\n        let pvtData = 'pvtData';\n        let pvt = request && request[pvtData];\n        let count = null;\n        let args = {};\n        if (request && request.type.toLowerCase() !== 'post') {\n            let versionCheck = xhr && request.getResponseHeader('DataServiceVersion');\n            let version = (versionCheck && parseInt(versionCheck, 10)) || 2;\n            if (query && query.isCountRequired) {\n                if (!DataUtil.isNull(data.Count)) {\n                    count = data.Count;\n                }\n            }\n            if (version < 3 && data.Items) {\n                data = data.Items;\n            }\n            args.count = count;\n            args.result = data;\n            this.getAggregateResult(pvt, data, args, null, query);\n        }\n        args.result = args.result || data;\n        return DataUtil.isNull(count) ? args.result : { result: args.result, count: args.count, aggregates: args.aggregates };\n    }\n}\n/**\n * WebMethodAdaptor can be used by DataManager to interact with web method.\n * @hidden\n */\nclass WebMethodAdaptor extends UrlAdaptor {\n    /**\n     * Prepare the request body based on the query.\n     * The query information can be accessed at the WebMethod using variable named `value`.\n     * @param  {DataManager} dm\n     * @param  {Query} query\n     * @param  {Object[]} hierarchyFilters?\n     * @returns application\n     */\n    processQuery(dm, query, hierarchyFilters) {\n        let obj = new UrlAdaptor().processQuery(dm, query, hierarchyFilters);\n        let getData = 'data';\n        let data = DataUtil.parse.parseJson(obj[getData]);\n        let result = {};\n        let value = 'value';\n        if (data.param) {\n            for (let i = 0; i < data.param.length; i++) {\n                let param = data.param[i];\n                let key = Object.keys(param)[0];\n                result[key] = param[key];\n            }\n        }\n        result[value] = data;\n        let pvtData = 'pvtData';\n        let url = 'url';\n        return {\n            data: JSON.stringify(result),\n            url: obj[url],\n            pvtData: obj[pvtData],\n            type: 'POST',\n            contentType: 'application/json; charset=utf-8'\n        };\n    }\n}\n/**\n * RemoteSaveAdaptor, extended from JsonAdaptor and it is used for binding local data and performs all DataManager queries in client-side.\n * It interacts with server-side only for CRUD operations.\n * @hidden\n */\nclass RemoteSaveAdaptor extends JsonAdaptor {\n    /**\n     * @hidden\n     */\n    constructor() {\n        super();\n        setValue('beforeSend', UrlAdaptor.prototype.beforeSend, this);\n    }\n    insert(dm, data, tableName, query, position) {\n        this.pvt.position = position;\n        this.updateType = 'add';\n        return {\n            url: dm.dataSource.insertUrl || dm.dataSource.crudUrl || dm.dataSource.url,\n            data: JSON.stringify(extend({}, {\n                value: data,\n                table: tableName,\n                action: 'insert'\n            }, DataUtil.getAddParams(this, dm, query)))\n        };\n    }\n    remove(dm, keyField, val, tableName, query) {\n        super.remove(dm, keyField, val);\n        return {\n            type: 'POST',\n            url: dm.dataSource.removeUrl || dm.dataSource.crudUrl || dm.dataSource.url,\n            data: JSON.stringify(extend({}, {\n                key: val,\n                keyColumn: keyField,\n                table: tableName,\n                action: 'remove'\n            }, DataUtil.getAddParams(this, dm, query)))\n        };\n    }\n    update(dm, keyField, val, tableName, query) {\n        this.updateType = 'update';\n        this.updateKey = keyField;\n        return {\n            type: 'POST',\n            url: dm.dataSource.updateUrl || dm.dataSource.crudUrl || dm.dataSource.url,\n            data: JSON.stringify(extend({}, {\n                value: val,\n                action: 'update',\n                keyColumn: keyField,\n                key: val[keyField],\n                table: tableName\n            }, DataUtil.getAddParams(this, dm, query)))\n        };\n    }\n    processResponse(data, ds, query, xhr, request, changes, e) {\n        let i;\n        if (this.updateType === 'add') {\n            super.insert(ds, data, null, null, this.pvt.position);\n        }\n        if (this.updateType === 'update') {\n            super.update(ds, this.updateKey, data);\n        }\n        this.updateType = undefined;\n        if (data.added) {\n            for (i = 0; i < data.added.length; i++) {\n                super.insert(ds, data.added[i]);\n            }\n        }\n        if (data.changed) {\n            for (i = 0; i < data.changed.length; i++) {\n                super.update(ds, e.key, data.changed[i]);\n            }\n        }\n        if (data.deleted) {\n            for (i = 0; i < data.deleted.length; i++) {\n                super.remove(ds, e.key, data.deleted[i]);\n            }\n        }\n        return data;\n    }\n    /**\n     * Prepare the request body based on the newly added, removed and updated records.\n     * Also perform the changes in the locally cached data to sync with the remote data.\n     * The result is used by the batch request.\n     * @param  {DataManager} dm\n     * @param  {CrudOptions} changes\n     * @param  {RemoteArgs} e\n     */\n    batchRequest(dm, changes, e, query, original) {\n        return {\n            type: 'POST',\n            url: dm.dataSource.batchUrl || dm.dataSource.crudUrl || dm.dataSource.url,\n            contentType: 'application/json; charset=utf-8',\n            dataType: 'json',\n            data: JSON.stringify(extend({}, {\n                changed: changes.changedRecords,\n                added: changes.addedRecords,\n                deleted: changes.deletedRecords,\n                action: 'batch',\n                table: e.url,\n                key: e.key\n            }, DataUtil.getAddParams(this, dm, query)))\n        };\n    }\n    addParams(options) {\n        let urlParams = new UrlAdaptor();\n        urlParams.addParams(options);\n    }\n}\n/**\n * Cache Adaptor is used to cache the data of the visited pages. It prevents new requests for the previously visited pages.\n * You can configure cache page size and duration of caching by using cachingPageSize and timeTillExpiration properties of the DataManager\n * @hidden\n */\nclass CacheAdaptor extends UrlAdaptor {\n    /**\n     * Constructor for CacheAdaptor class.\n     * @param  {CacheAdaptor} adaptor?\n     * @param  {number} timeStamp?\n     * @param  {number} pageSize?\n     * @hidden\n     */\n    constructor(adaptor, timeStamp, pageSize) {\n        super();\n        this.isCrudAction = false;\n        this.isInsertAction = false;\n        if (!isNullOrUndefined(adaptor)) {\n            this.cacheAdaptor = adaptor;\n        }\n        this.pageSize = pageSize;\n        this.guidId = DataUtil.getGuid('cacheAdaptor');\n        let obj = { keys: [], results: [] };\n        window.localStorage.setItem(this.guidId, JSON.stringify(obj));\n        let guid = this.guidId;\n        if (!isNullOrUndefined(timeStamp)) {\n            setInterval(() => {\n                let data;\n                data = DataUtil.parse.parseJson(window.localStorage.getItem(guid));\n                let forDel = [];\n                for (let i = 0; i < data.results.length; i++) {\n                    let currentTime = +new Date();\n                    let requestTime = +new Date(data.results[i].timeStamp);\n                    data.results[i].timeStamp = currentTime - requestTime;\n                    if (currentTime - requestTime > timeStamp) {\n                        forDel.push(i);\n                    }\n                }\n                for (let i = 0; i < forDel.length; i++) {\n                    data.results.splice(forDel[i], 1);\n                    data.keys.splice(forDel[i], 1);\n                }\n                window.localStorage.removeItem(guid);\n                window.localStorage.setItem(guid, JSON.stringify(data));\n            }, timeStamp);\n        }\n    }\n    /**\n     * It will generate the key based on the URL when we send a request to server.\n     * @param  {string} url\n     * @param  {Query} query?\n     * @hidden\n     */\n    generateKey(url, query) {\n        let queries = this.getQueryRequest(query);\n        let singles = Query.filterQueryLists(query.queries, ['onSelect', 'onPage', 'onSkip', 'onTake', 'onRange']);\n        let key = url;\n        let page = 'onPage';\n        if (page in singles) {\n            key += singles[page].pageIndex;\n        }\n        queries.sorts.forEach((obj) => {\n            key += obj.e.direction + obj.e.fieldName;\n        });\n        queries.groups.forEach((obj) => {\n            key += obj.e.fieldName;\n        });\n        queries.searches.forEach((obj) => {\n            key += obj.e.searchKey;\n        });\n        for (let filter = 0; filter < queries.filters.length; filter++) {\n            let currentFilter = queries.filters[filter];\n            if (currentFilter.e.isComplex) {\n                let newQuery = query.clone();\n                newQuery.queries = [];\n                for (let i = 0; i < currentFilter.e.predicates.length; i++) {\n                    newQuery.queries.push({ fn: 'onWhere', e: currentFilter.e.predicates[i], filter: query.queries.filter });\n                }\n                key += currentFilter.e.condition + this.generateKey(url, newQuery);\n            }\n            else {\n                key += currentFilter.e.field + currentFilter.e.operator + currentFilter.e.value;\n            }\n        }\n        return key;\n    }\n    /**\n     * Process the query to generate request body.\n     * If the data is already cached, it will return the cached data.\n     * @param  {DataManager} dm\n     * @param  {Query} query?\n     * @param  {Object[]} hierarchyFilters?\n     */\n    processQuery(dm, query, hierarchyFilters) {\n        let key = this.generateKey(dm.dataSource.url, query);\n        let cachedItems;\n        cachedItems = DataUtil.parse.parseJson(window.localStorage.getItem(this.guidId));\n        let data = cachedItems ? cachedItems.results[cachedItems.keys.indexOf(key)] : null;\n        if (data != null && !this.isCrudAction && !this.isInsertAction) {\n            return data;\n        }\n        this.isCrudAction = null;\n        this.isInsertAction = null;\n        return this.cacheAdaptor.processQuery.apply(this.cacheAdaptor, [].slice.call(arguments, 0));\n    }\n    /**\n     * Returns the data from the query processing.\n     * It will also cache the data for later usage.\n     * @param  {DataResult} data\n     * @param  {DataManager} ds?\n     * @param  {Query} query?\n     * @param  {XMLHttpRequest} xhr?\n     * @param  {Ajax} request?\n     * @param  {CrudOptions} changes?\n     */\n    processResponse(data, ds, query, xhr, request, changes) {\n        if (this.isInsertAction || (request && this.cacheAdaptor.options.batch &&\n            DataUtil.endsWith(request.url, this.cacheAdaptor.options.batch) && request.type.toLowerCase() === 'post')) {\n            return this.cacheAdaptor.processResponse(data, ds, query, xhr, request, changes);\n        }\n        data = this.cacheAdaptor.processResponse.apply(this.cacheAdaptor, [].slice.call(arguments, 0));\n        let key = query ? this.generateKey(ds.dataSource.url, query) : ds.dataSource.url;\n        let obj = {};\n        obj = DataUtil.parse.parseJson(window.localStorage.getItem(this.guidId));\n        let index = obj.keys.indexOf(key);\n        if (index !== -1) {\n            obj.results.splice(index, 1);\n            obj.keys.splice(index, 1);\n        }\n        obj.results[obj.keys.push(key) - 1] = { keys: key, result: data.result, timeStamp: new Date(), count: data.count };\n        while (obj.results.length > this.pageSize) {\n            obj.results.splice(0, 1);\n            obj.keys.splice(0, 1);\n        }\n        window.localStorage.setItem(this.guidId, JSON.stringify(obj));\n        return data;\n    }\n    /**\n     * Method will trigger before send the request to server side. Used to set the custom header or modify the request options.\n     * @param  {DataManager} dm\n     * @param  {XMLHttpRequest} request\n     * @param  {Ajax} settings?\n     */\n    beforeSend(dm, request, settings) {\n        if (!isNullOrUndefined(this.cacheAdaptor.options.batch) && DataUtil.endsWith(settings.url, this.cacheAdaptor.options.batch)\n            && settings.type.toLowerCase() === 'post') {\n            request.setRequestHeader('Accept', this.cacheAdaptor.options.multipartAccept);\n        }\n        if (!dm.dataSource.crossDomain) {\n            request.setRequestHeader('Accept', this.cacheAdaptor.options.accept);\n        }\n    }\n    /**\n     * Updates existing record and saves the changes to the table.\n     * @param  {DataManager} dm\n     * @param  {string} keyField\n     * @param  {Object} value\n     * @param  {string} tableName\n     */\n    update(dm, keyField, value, tableName) {\n        this.isCrudAction = true;\n        return this.cacheAdaptor.update(dm, keyField, value, tableName);\n    }\n    /**\n     * Prepare and returns request body which is used to insert a new record in the table.\n     * @param  {DataManager} dm\n     * @param  {Object} data\n     * @param  {string} tableName?\n     */\n    insert(dm, data, tableName) {\n        this.isInsertAction = true;\n        return this.cacheAdaptor.insert(dm, data, tableName);\n    }\n    /**\n     * Prepare and return request body which is used to remove record from the table.\n     * @param  {DataManager} dm\n     * @param  {string} keyField\n     * @param  {Object} value\n     * @param  {string} tableName?\n     */\n    remove(dm, keyField, value, tableName) {\n        this.isCrudAction = true;\n        return this.cacheAdaptor.remove(dm, keyField, value, tableName);\n    }\n    /**\n     * Prepare the request body based on the newly added, removed and updated records.\n     * The result is used by the batch request.\n     * @param  {DataManager} dm\n     * @param  {CrudOptions} changes\n     * @param  {RemoteArgs} e\n     */\n    batchRequest(dm, changes, e) {\n        return this.cacheAdaptor.batchRequest(dm, changes, e);\n    }\n}\n\n/**\n * DataManager is used to manage and manipulate relational data.\n */\nclass DataManager {\n    /**\n     * Constructor for DataManager class\n     * @param  {DataOptions|JSON[]} dataSource?\n     * @param  {Query} query?\n     * @param  {AdaptorOptions|string} adaptor?\n     * @hidden\n     */\n    constructor(dataSource, query, adaptor) {\n        /** @hidden */\n        this.dateParse = true;\n        /** @hidden */\n        this.timeZoneHandling = true;\n        this.requests = [];\n        if (!dataSource && !this.dataSource) {\n            dataSource = [];\n        }\n        adaptor = adaptor || dataSource.adaptor;\n        if (dataSource && dataSource.timeZoneHandling === false) {\n            this.timeZoneHandling = dataSource.timeZoneHandling;\n        }\n        let data;\n        if (dataSource instanceof Array) {\n            data = {\n                json: dataSource,\n                offline: true\n            };\n        }\n        else if (typeof dataSource === 'object') {\n            if (!dataSource.json) {\n                dataSource.json = [];\n            }\n            data = {\n                url: dataSource.url,\n                insertUrl: dataSource.insertUrl,\n                removeUrl: dataSource.removeUrl,\n                updateUrl: dataSource.updateUrl,\n                crudUrl: dataSource.crudUrl,\n                batchUrl: dataSource.batchUrl,\n                json: dataSource.json,\n                headers: dataSource.headers,\n                accept: dataSource.accept,\n                data: dataSource.data,\n                timeTillExpiration: dataSource.timeTillExpiration,\n                cachingPageSize: dataSource.cachingPageSize,\n                enableCaching: dataSource.enableCaching,\n                requestType: dataSource.requestType,\n                key: dataSource.key,\n                crossDomain: dataSource.crossDomain,\n                jsonp: dataSource.jsonp,\n                dataType: dataSource.dataType,\n                offline: dataSource.offline !== undefined ? dataSource.offline\n                    : dataSource.adaptor instanceof RemoteSaveAdaptor ? false : dataSource.url ? false : true,\n                requiresFormat: dataSource.requiresFormat\n            };\n        }\n        else {\n            DataUtil.throwError('DataManager: Invalid arguments');\n        }\n        if (data.requiresFormat === undefined && !DataUtil.isCors()) {\n            data.requiresFormat = isNullOrUndefined(data.crossDomain) ? true : data.crossDomain;\n        }\n        if (data.dataType === undefined) {\n            data.dataType = 'json';\n        }\n        this.dataSource = data;\n        this.defaultQuery = query;\n        if (data.url && data.offline && !data.json.length) {\n            this.isDataAvailable = false;\n            this.adaptor = adaptor || new ODataAdaptor();\n            this.dataSource.offline = false;\n            this.ready = this.executeQuery(query || new Query());\n            this.ready.then((e) => {\n                this.dataSource.offline = true;\n                this.isDataAvailable = true;\n                data.json = e.result;\n                this.adaptor = new JsonAdaptor();\n            });\n        }\n        else {\n            this.adaptor = data.offline ? new JsonAdaptor() : new ODataAdaptor();\n        }\n        if (!data.jsonp && this.adaptor instanceof ODataAdaptor) {\n            data.jsonp = 'callback';\n        }\n        this.adaptor = adaptor || this.adaptor;\n        if (data.enableCaching) {\n            this.adaptor = new CacheAdaptor(this.adaptor, data.timeTillExpiration, data.cachingPageSize);\n        }\n        return this;\n    }\n    /**\n     * Overrides DataManager's default query with given query.\n     * @param  {Query} query - Defines the new default query.\n     */\n    setDefaultQuery(query) {\n        this.defaultQuery = query;\n        return this;\n    }\n    /**\n     * Executes the given query with local data source.\n     * @param  {Query} query - Defines the query to retrieve data.\n     */\n    executeLocal(query) {\n        if (!this.defaultQuery && !(query instanceof Query)) {\n            DataUtil.throwError('DataManager - executeLocal() : A query is required to execute');\n        }\n        if (!this.dataSource.json) {\n            DataUtil.throwError('DataManager - executeLocal() : Json data is required to execute');\n        }\n        query = query || this.defaultQuery;\n        let result = this.adaptor.processQuery(this, query);\n        if (query.subQuery) {\n            let from = query.subQuery.fromTable;\n            let lookup = query.subQuery.lookups;\n            let res = query.isCountRequired ? result.result :\n                result;\n            if (lookup && lookup instanceof Array) {\n                DataUtil.buildHierarchy(query.subQuery.fKey, from, res, lookup, query.subQuery.key);\n            }\n            for (let j = 0; j < res.length; j++) {\n                if (res[j][from] instanceof Array) {\n                    res[j] = extend({}, {}, res[j]);\n                    res[j][from] = this.adaptor.processResponse(query.subQuery.using(new DataManager(res[j][from].slice(0))).executeLocal(), this, query);\n                }\n            }\n        }\n        return this.adaptor.processResponse(result, this, query);\n    }\n    /**\n     * Executes the given query with either local or remote data source.\n     * It will be executed as asynchronously and returns Promise object which will be resolved or rejected after action completed.\n     * @param  {Query|Function} query - Defines the query to retrieve data.\n     * @param  {Function} done - Defines the callback function and triggers when the Promise is resolved.\n     * @param  {Function} fail - Defines the callback function and triggers when the Promise is rejected.\n     * @param  {Function} always - Defines the callback function and triggers when the Promise is resolved or rejected.\n     */\n    executeQuery(query, done, fail, always) {\n        let makeRequest = 'makeRequest';\n        if (typeof query === 'function') {\n            always = fail;\n            fail = done;\n            done = query;\n            query = null;\n        }\n        if (!query) {\n            query = this.defaultQuery;\n        }\n        if (!(query instanceof Query)) {\n            DataUtil.throwError('DataManager - executeQuery() : A query is required to execute');\n        }\n        let deffered = new Deferred();\n        let args = { query: query };\n        if (!this.dataSource.offline && (this.dataSource.url !== undefined && this.dataSource.url !== '')\n            || (!isNullOrUndefined(this.adaptor[makeRequest]))) {\n            let result = this.adaptor.processQuery(this, query);\n            if (!isNullOrUndefined(this.adaptor[makeRequest])) {\n                this.adaptor[makeRequest](result, deffered, args, query);\n            }\n            else if (!isNullOrUndefined(result.url)) {\n                this.makeRequest(result, deffered, args, query);\n            }\n            else {\n                args = DataManager.getDeferedArgs(query, result, args);\n                deffered.resolve(args);\n            }\n        }\n        else {\n            DataManager.nextTick(() => {\n                let res = this.executeLocal(query);\n                args = DataManager.getDeferedArgs(query, res, args);\n                deffered.resolve(args);\n            });\n        }\n        if (done || fail) {\n            deffered.promise.then(done, fail);\n        }\n        if (always) {\n            deffered.promise.then(always, always);\n        }\n        return deffered.promise;\n    }\n    static getDeferedArgs(query, result, args) {\n        if (query.isCountRequired) {\n            args.result = result.result;\n            args.count = result.count;\n            args.aggregates = result.aggregates;\n        }\n        else {\n            args.result = result;\n        }\n        return args;\n    }\n    static nextTick(fn) {\n        (window.setImmediate || window.setTimeout)(fn, 0);\n    }\n    extendRequest(url, fnSuccess, fnFail) {\n        return extend({}, {\n            type: 'GET',\n            dataType: this.dataSource.dataType,\n            crossDomain: this.dataSource.crossDomain,\n            jsonp: this.dataSource.jsonp,\n            cache: true,\n            processData: false,\n            onSuccess: fnSuccess,\n            onFailure: fnFail\n        }, url);\n    }\n    makeRequest(url, deffered, args, query) {\n        let isSelector = !!query.subQuerySelector;\n        let fnFail = (e) => {\n            args.error = e;\n            deffered.reject(args);\n        };\n        let process = (data, count, xhr, request, actual, aggregates, virtualSelectRecords) => {\n            args.xhr = xhr;\n            args.count = count ? parseInt(count.toString(), 10) : 0;\n            args.result = data;\n            args.request = request;\n            args.aggregates = aggregates;\n            args.actual = actual;\n            args.virtualSelectRecords = virtualSelectRecords;\n            deffered.resolve(args);\n        };\n        let fnQueryChild = (data, selector) => {\n            let subDeffer = new Deferred();\n            let childArgs = { parent: args };\n            query.subQuery.isChild = true;\n            let subUrl = this.adaptor.processQuery(this, query.subQuery, data ? this.adaptor.processResponse(data) : selector);\n            let childReq = this.makeRequest(subUrl, subDeffer, childArgs, query.subQuery);\n            if (!isSelector) {\n                subDeffer.then((subData) => {\n                    if (data) {\n                        DataUtil.buildHierarchy(query.subQuery.fKey, query.subQuery.fromTable, data, subData, query.subQuery.key);\n                        process(data, subData.count, subData.xhr);\n                    }\n                }, fnFail);\n            }\n            return childReq;\n        };\n        let fnSuccess = (data, request) => {\n            if (request.httpRequest.getResponseHeader('Content-Type').indexOf('xml') === -1 && this.dateParse) {\n                data = DataUtil.parse.parseJson(data);\n            }\n            let result = this.adaptor.processResponse(data, this, query, request.httpRequest, request);\n            let count = 0;\n            let aggregates = null;\n            let virtualSelectRecords = 'virtualSelectRecords';\n            let virtualRecords = data[virtualSelectRecords];\n            if (query.isCountRequired) {\n                count = result.count;\n                aggregates = result.aggregates;\n                result = result.result;\n            }\n            if (!query.subQuery) {\n                process(result, count, request.httpRequest, request.type, data, aggregates, virtualRecords);\n                return;\n            }\n            if (!isSelector) {\n                fnQueryChild(result, request);\n            }\n        };\n        let req = this.extendRequest(url, fnSuccess, fnFail);\n        let ajax = new Ajax(req);\n        ajax.beforeSend = () => {\n            this.beforeSend(ajax.httpRequest, ajax);\n        };\n        req = ajax.send();\n        req.catch((e) => true); // to handle failure remote requests.        \n        this.requests.push(ajax);\n        if (isSelector) {\n            let promise;\n            let res = query.subQuerySelector.call(this, { query: query.subQuery, parent: query });\n            if (res && res.length) {\n                promise = Promise.all([req, fnQueryChild(null, res)]);\n                promise.then((...args) => {\n                    let result = args[0];\n                    let pResult = this.adaptor.processResponse(result[0], this, query, this.requests[0].httpRequest, this.requests[0]);\n                    let count = 0;\n                    if (query.isCountRequired) {\n                        count = pResult.count;\n                        pResult = pResult.result;\n                    }\n                    let cResult = this.adaptor.processResponse(result[1], this, query.subQuery, this.requests[1].httpRequest, this.requests[1]);\n                    count = 0;\n                    if (query.subQuery.isCountRequired) {\n                        count = cResult.count;\n                        cResult = cResult.result;\n                    }\n                    DataUtil.buildHierarchy(query.subQuery.fKey, query.subQuery.fromTable, pResult, cResult, query.subQuery.key);\n                    isSelector = false;\n                    process(pResult, count, this.requests[0].httpRequest);\n                });\n            }\n            else {\n                isSelector = false;\n            }\n        }\n        return req;\n    }\n    beforeSend(request, settings) {\n        this.adaptor.beforeSend(this, request, settings);\n        let headers = this.dataSource.headers;\n        let props;\n        for (let i = 0; headers && i < headers.length; i++) {\n            props = [];\n            let keys = Object.keys(headers[i]);\n            for (let prop of keys) {\n                props.push(prop);\n                request.setRequestHeader(prop, headers[i][prop]);\n            }\n        }\n    }\n    /**\n     * Save bulk changes to the given table name.\n     * User can add a new record, edit an existing record, and delete a record at the same time.\n     * If the datasource from remote, then updated in a single post.\n     * @param  {Object} changes - Defines the CrudOptions.\n     * @param  {string} key - Defines the column field.\n     * @param  {string|Query} tableName - Defines the table name.\n     * @param  {Query} query - Sets default query for the DataManager.\n     */\n    saveChanges(changes, key, tableName, query, original) {\n        if (tableName instanceof Query) {\n            query = tableName;\n            tableName = null;\n        }\n        let args = {\n            url: tableName,\n            key: key || this.dataSource.key\n        };\n        let req = this.adaptor.batchRequest(this, changes, args, query || new Query(), original);\n        let doAjaxRequest = 'doAjaxRequest';\n        if (this.dataSource.offline) {\n            return req;\n        }\n        if (!isNullOrUndefined(this.adaptor[doAjaxRequest])) {\n            return this.adaptor[doAjaxRequest](req);\n        }\n        else {\n            let deff = new Deferred();\n            let ajax = new Ajax(req);\n            ajax.beforeSend = () => {\n                this.beforeSend(ajax.httpRequest, ajax);\n            };\n            ajax.onSuccess = (data, request) => {\n                deff.resolve(this.adaptor.processResponse(data, this, null, request.httpRequest, request, changes, args));\n            };\n            ajax.onFailure = (e) => {\n                deff.reject([{ error: e }]);\n            };\n            ajax.send().catch((e) => true); // to handle the failure requests.        \n            return deff.promise;\n        }\n    }\n    /**\n     * Inserts new record in the given table.\n     * @param  {Object} data - Defines the data to insert.\n     * @param  {string|Query} tableName - Defines the table name.\n     * @param  {Query} query - Sets default query for the DataManager.\n     */\n    insert(data, tableName, query, position) {\n        if (tableName instanceof Query) {\n            query = tableName;\n            tableName = null;\n        }\n        let req = this.adaptor.insert(this, data, tableName, query, position);\n        let doAjaxRequest = 'doAjaxRequest';\n        if (this.dataSource.offline) {\n            return req;\n        }\n        if (!isNullOrUndefined(this.adaptor[doAjaxRequest])) {\n            return this.adaptor[doAjaxRequest](req);\n        }\n        else {\n            return this.doAjaxRequest(req);\n        }\n    }\n    /**\n     * Removes data from the table with the given key.\n     * @param  {string} keyField - Defines the column field.\n     * @param  {Object} value - Defines the value to find the data in the specified column.\n     * @param  {string|Query} tableName - Defines the table name\n     * @param  {Query} query - Sets default query for the DataManager.\n     */\n    remove(keyField, value, tableName, query) {\n        if (typeof value === 'object') {\n            value = DataUtil.getObject(keyField, value);\n        }\n        if (tableName instanceof Query) {\n            query = tableName;\n            tableName = null;\n        }\n        let res = this.adaptor.remove(this, keyField, value, tableName, query);\n        let doAjaxRequest = 'doAjaxRequest';\n        if (this.dataSource.offline) {\n            return res;\n        }\n        if (!isNullOrUndefined(this.adaptor[doAjaxRequest])) {\n            return this.adaptor[doAjaxRequest](res);\n        }\n        else {\n            return this.doAjaxRequest(res);\n        }\n    }\n    /**\n     * Updates existing record in the given table.\n     * @param  {string} keyField - Defines the column field.\n     * @param  {Object} value - Defines the value to find the data in the specified column.\n     * @param  {string|Query} tableName - Defines the table name\n     * @param  {Query} query - Sets default query for the DataManager.\n     */\n    update(keyField, value, tableName, query, original) {\n        if (tableName instanceof Query) {\n            query = tableName;\n            tableName = null;\n        }\n        let res = this.adaptor.update(this, keyField, value, tableName, query, original);\n        let doAjaxRequest = 'doAjaxRequest';\n        if (this.dataSource.offline) {\n            return res;\n        }\n        if (!isNullOrUndefined(this.adaptor[doAjaxRequest])) {\n            return this.adaptor[doAjaxRequest](res);\n        }\n        else {\n            return this.doAjaxRequest(res);\n        }\n    }\n    doAjaxRequest(res) {\n        let defer = new Deferred();\n        res = extend({}, {\n            type: 'POST',\n            contentType: 'application/json; charset=utf-8',\n            processData: false\n        }, res);\n        let ajax = new Ajax(res);\n        ajax.beforeSend = () => {\n            this.beforeSend(ajax.httpRequest, ajax);\n        };\n        ajax.onSuccess = (record, request) => {\n            try {\n                DataUtil.parse.parseJson(record);\n            }\n            catch (e) {\n                record = [];\n            }\n            record = this.adaptor.processResponse(DataUtil.parse.parseJson(record), this, null, request.httpRequest, request);\n            defer.resolve(record);\n        };\n        ajax.onFailure = (e) => {\n            defer.reject([{ error: e }]);\n        };\n        ajax.send().catch((e) => true); // to handle the failure requests.\n        return defer.promise;\n    }\n}\n/**\n * Deferred is used to handle asynchronous operation.\n */\nclass Deferred {\n    constructor() {\n        /**\n         * Promise is an object that represents a value that may not be available yet, but will be resolved at some point in the future.\n         */\n        this.promise = new Promise((resolve, reject) => {\n            this.resolve = resolve;\n            this.reject = reject;\n        });\n        /**\n         * Defines the callback function triggers when the Deferred object is resolved.\n         */\n        this.then = this.promise.then.bind(this.promise);\n        /**\n         * Defines the callback function triggers when the Deferred object is rejected.\n         */\n        this.catch = this.promise.catch.bind(this.promise);\n    }\n}\n\n/**\n * Data modules\n */\n\nexport { DataManager, Deferred, Query, Predicate, Adaptor, JsonAdaptor, UrlAdaptor, ODataAdaptor, ODataV4Adaptor, WebApiAdaptor, WebMethodAdaptor, RemoteSaveAdaptor, CacheAdaptor, DataUtil };\n//# sourceMappingURL=ej2-data.es2015.js.map\n","import { Ajax, Animation, Base, Browser, ChildProperty, Collection, Complex, Component, Event, EventHandler, Internationalization, KeyboardEvents, L10n, NotifyPropertyChanges, Property, SanitizeHtmlHelper, addClass, append, attributes, classList, closest, compile, createElement, detach, extend, formatUnit, getInstance, getNumericObject, getUniqueID, getValue, isBlazor, isNullOrUndefined, merge, onIntlChange, remove, removeClass, resetBlazorTemplate, rippleEffect, select, selectAll, setStyleAttribute, setValue, updateBlazorTemplate } from '@syncfusion/ej2-base';\nimport { Popup, Tooltip, createSpinner, getZindexPartial, hideSpinner, showSpinner } from '@syncfusion/ej2-popups';\nimport { Deferred, SplitButton, getModel } from '@syncfusion/ej2-splitbuttons';\n\nconst CLASSNAMES = {\n    RTL: 'e-rtl',\n    DISABLE: 'e-disabled',\n    INPUT: 'e-input',\n    TEXTAREA: 'e-multi-line-input',\n    INPUTGROUP: 'e-input-group',\n    FLOATINPUT: 'e-float-input',\n    FLOATLINE: 'e-float-line',\n    FLOATTEXT: 'e-float-text',\n    CLEARICON: 'e-clear-icon',\n    CLEARICONHIDE: 'e-clear-icon-hide',\n    LABELTOP: 'e-label-top',\n    LABELBOTTOM: 'e-label-bottom',\n    NOFLOATLABEL: 'e-no-float-label',\n    INPUTCUSTOMTAG: 'e-input-custom-tag',\n    FLOATCUSTOMTAG: 'e-float-custom-tag'\n};\n/**\n * Base for Input creation through util methods.\n */\nvar Input;\n(function (Input) {\n    let floatType;\n    /**\n     * Create a wrapper to input element with multiple span elements and set the basic properties to input based components.\n     * ```\n     * E.g : Input.createInput({ element: element, floatLabelType : \"Auto\", properties: { placeholder: 'Search' } });\n     * ```\n     * @param args\n     */\n    function createInput(args, internalCreateElement) {\n        let makeElement = !isNullOrUndefined(internalCreateElement) ? internalCreateElement : createElement;\n        let inputObject = { container: null, buttons: [], clearButton: null };\n        floatType = args.floatLabelType;\n        if (isNullOrUndefined(args.floatLabelType) || args.floatLabelType === 'Never') {\n            inputObject.container = createInputContainer(args, CLASSNAMES.INPUTGROUP, CLASSNAMES.INPUTCUSTOMTAG, 'span', makeElement);\n            args.element.parentNode.insertBefore(inputObject.container, args.element);\n            addClass([args.element], CLASSNAMES.INPUT);\n            inputObject.container.appendChild(args.element);\n        }\n        else {\n            createFloatingInput(args, inputObject, makeElement);\n        }\n        bindInitialEvent(args);\n        if (!isNullOrUndefined(args.properties) && !isNullOrUndefined(args.properties.showClearButton) &&\n            args.properties.showClearButton && args.element.tagName !== 'TEXTAREA') {\n            setClearButton(args.properties.showClearButton, args.element, inputObject, true, makeElement);\n            inputObject.clearButton.setAttribute('role', 'button');\n            if (inputObject.container.classList.contains(CLASSNAMES.FLOATINPUT)) {\n                addClass([inputObject.container], CLASSNAMES.INPUTGROUP);\n            }\n        }\n        if (!isNullOrUndefined(args.buttons) && args.element.tagName !== 'TEXTAREA') {\n            for (let i = 0; i < args.buttons.length; i++) {\n                inputObject.buttons.push(appendSpan(args.buttons[i], inputObject.container, makeElement));\n            }\n        }\n        if (!isNullOrUndefined(args.element) && args.element.tagName === 'TEXTAREA') {\n            addClass([inputObject.container], CLASSNAMES.TEXTAREA);\n        }\n        validateInputType(inputObject.container, args.element);\n        inputObject = setPropertyValue(args, inputObject);\n        return inputObject;\n    }\n    Input.createInput = createInput;\n    function bindInitialEvent(args) {\n        checkInputValue(args.floatLabelType, args.element);\n        args.element.addEventListener('focus', function () {\n            let parent = getParentNode(this);\n            if (parent.classList.contains('e-input-group') || parent.classList.contains('e-outline')\n                || parent.classList.contains('e-filled')) {\n                parent.classList.add('e-input-focus');\n            }\n        });\n        args.element.addEventListener('blur', function () {\n            let parent = getParentNode(this);\n            if (parent.classList.contains('e-input-group') || parent.classList.contains('e-outline')\n                || parent.classList.contains('e-filled')) {\n                parent.classList.remove('e-input-focus');\n            }\n        });\n        args.element.addEventListener('input', () => {\n            checkInputValue(floatType, args.element);\n        });\n    }\n    Input.bindInitialEvent = bindInitialEvent;\n    function checkInputValue(floatLabelType, inputElement) {\n        let inputValue = inputElement.value;\n        if (inputValue !== '' && !isNullOrUndefined(inputValue)) {\n            inputElement.parentElement.classList.add('e-valid-input');\n        }\n        else if (floatLabelType !== 'Always' && inputElement.parentElement) {\n            inputElement.parentElement.classList.remove('e-valid-input');\n        }\n    }\n    function _focusFn() {\n        let label = getParentNode(this).getElementsByClassName('e-float-text')[0];\n        if (!isNullOrUndefined(label)) {\n            addClass([label], CLASSNAMES.LABELTOP);\n            if (label.classList.contains(CLASSNAMES.LABELBOTTOM)) {\n                removeClass([label], CLASSNAMES.LABELBOTTOM);\n            }\n        }\n    }\n    function _blurFn() {\n        let parent = getParentNode(this);\n        if ((parent.getElementsByTagName('textarea')[0]) ? parent.getElementsByTagName('textarea')[0].value === '' :\n            parent.getElementsByTagName('input')[0].value === '') {\n            let label = parent.getElementsByClassName('e-float-text')[0];\n            if (!isNullOrUndefined(label)) {\n                if (label.classList.contains(CLASSNAMES.LABELTOP)) {\n                    removeClass([label], CLASSNAMES.LABELTOP);\n                }\n                addClass([label], CLASSNAMES.LABELBOTTOM);\n            }\n        }\n    }\n    function wireFloatingEvents(element) {\n        element.addEventListener('focus', _focusFn);\n        element.addEventListener('blur', _blurFn);\n    }\n    Input.wireFloatingEvents = wireFloatingEvents;\n    function unwireFloatingEvents(element) {\n        element.removeEventListener('focus', _focusFn);\n        element.removeEventListener('blur', _blurFn);\n    }\n    function createFloatingInput(args, inputObject, internalCreateElement) {\n        let makeElement = !isNullOrUndefined(internalCreateElement) ? internalCreateElement : createElement;\n        let floatLinelement;\n        let floatLabelElement;\n        if (args.floatLabelType === 'Auto') {\n            wireFloatingEvents(args.element);\n        }\n        if (isNullOrUndefined(inputObject.container)) {\n            inputObject.container = createInputContainer(args, CLASSNAMES.FLOATINPUT, CLASSNAMES.FLOATCUSTOMTAG, 'div', makeElement);\n            args.element.parentNode.insertBefore(inputObject.container, args.element);\n        }\n        else {\n            if (!isNullOrUndefined(args.customTag)) {\n                inputObject.container.classList.add(CLASSNAMES.FLOATCUSTOMTAG);\n            }\n            inputObject.container.classList.add(CLASSNAMES.FLOATINPUT);\n        }\n        floatLinelement = makeElement('span', { className: CLASSNAMES.FLOATLINE });\n        floatLabelElement = makeElement('label', { className: CLASSNAMES.FLOATTEXT });\n        if (!isNullOrUndefined(args.element.id) && args.element.id !== '') {\n            floatLabelElement.id = 'label_' + args.element.id.replace(/ /g, '_');\n            attributes(args.element, { 'aria-labelledby': floatLabelElement.id });\n        }\n        if (!isNullOrUndefined(args.element.placeholder) && args.element.placeholder !== '') {\n            floatLabelElement.innerText = encodePlaceHolder(args.element.placeholder);\n            args.element.removeAttribute('placeholder');\n        }\n        if (!isNullOrUndefined(args.properties) && !isNullOrUndefined(args.properties.placeholder) &&\n            args.properties.placeholder !== '') {\n            floatLabelElement.innerText = encodePlaceHolder(args.properties.placeholder);\n        }\n        if (!floatLabelElement.innerText) {\n            inputObject.container.classList.add(CLASSNAMES.NOFLOATLABEL);\n        }\n        if (inputObject.container.classList.contains('e-float-icon-left')) {\n            let inputWrap = inputObject.container.querySelector('.e-input-in-wrap');\n            inputWrap.appendChild(args.element);\n            inputWrap.appendChild(floatLinelement);\n            inputWrap.appendChild(floatLabelElement);\n        }\n        else {\n            inputObject.container.appendChild(args.element);\n            inputObject.container.appendChild(floatLinelement);\n            inputObject.container.appendChild(floatLabelElement);\n        }\n        updateLabelState(args.element.value, floatLabelElement);\n        if (args.floatLabelType === 'Always') {\n            if (floatLabelElement.classList.contains(CLASSNAMES.LABELBOTTOM)) {\n                removeClass([floatLabelElement], CLASSNAMES.LABELBOTTOM);\n            }\n            addClass([floatLabelElement], CLASSNAMES.LABELTOP);\n        }\n        if (args.floatLabelType === 'Auto') {\n            args.element.addEventListener('input', (event) => {\n                updateLabelState(args.element.value, floatLabelElement);\n            });\n            args.element.addEventListener('blur', (event) => {\n                updateLabelState(args.element.value, floatLabelElement);\n            });\n        }\n        if (!isNullOrUndefined(args.element.getAttribute('id'))) {\n            floatLabelElement.setAttribute('for', args.element.getAttribute('id'));\n        }\n    }\n    function checkFloatLabelType(type, container) {\n        if (type === 'Always' && container.classList.contains('e-outline')) {\n            container.classList.add('e-valid-input');\n        }\n    }\n    function setPropertyValue(args, inputObject) {\n        if (!isNullOrUndefined(args.properties)) {\n            for (let prop of Object.keys(args.properties)) {\n                switch (prop) {\n                    case 'cssClass':\n                        setCssClass(args.properties.cssClass, [inputObject.container]);\n                        checkFloatLabelType(args.floatLabelType, inputObject.container);\n                        break;\n                    case 'enabled':\n                        setEnabled(args.properties.enabled, args.element, args.floatLabelType, inputObject.container);\n                        break;\n                    case 'enableRtl':\n                        setEnableRtl(args.properties.enableRtl, [inputObject.container]);\n                        break;\n                    case 'placeholder':\n                        setPlaceholder(args.properties.placeholder, args.element);\n                        break;\n                    case 'readonly':\n                        setReadonly(args.properties.readonly, args.element);\n                        break;\n                }\n            }\n        }\n        return inputObject;\n    }\n    function updateIconState(value, button) {\n        if (value) {\n            removeClass([button], CLASSNAMES.CLEARICONHIDE);\n        }\n        else {\n            addClass([button], CLASSNAMES.CLEARICONHIDE);\n        }\n    }\n    function updateLabelState(value, label) {\n        if (value) {\n            addClass([label], CLASSNAMES.LABELTOP);\n            if (label.classList.contains(CLASSNAMES.LABELBOTTOM)) {\n                removeClass([label], CLASSNAMES.LABELBOTTOM);\n            }\n        }\n        else {\n            if (label.classList.contains(CLASSNAMES.LABELTOP)) {\n                removeClass([label], CLASSNAMES.LABELTOP);\n            }\n            addClass([label], CLASSNAMES.LABELBOTTOM);\n        }\n    }\n    function getParentNode(element) {\n        let parentNode = isNullOrUndefined(element.parentNode) ? element\n            : element.parentNode;\n        if (parentNode && parentNode.classList.contains('e-input-in-wrap')) {\n            parentNode = parentNode.parentNode;\n        }\n        return parentNode;\n    }\n    /**\n     * To create clear button.\n     */\n    function createClearButton(element, inputObject, initial, internalCreateElement) {\n        let makeElement = !isNullOrUndefined(internalCreateElement) ? internalCreateElement : createElement;\n        let button = makeElement('span', { className: CLASSNAMES.CLEARICON });\n        let container = inputObject.container;\n        if (!isNullOrUndefined(initial)) {\n            container.appendChild(button);\n        }\n        else {\n            let baseElement = inputObject.container.classList.contains(CLASSNAMES.FLOATINPUT) ?\n                inputObject.container.querySelector('.' + CLASSNAMES.FLOATTEXT) : element;\n            baseElement.insertAdjacentElement('afterend', button);\n        }\n        if (!isNullOrUndefined(container) &&\n            container.classList.contains(CLASSNAMES.FLOATINPUT)) {\n            addClass([container], CLASSNAMES.INPUTGROUP);\n        }\n        addClass([button], CLASSNAMES.CLEARICONHIDE);\n        wireClearBtnEvents(element, button, container);\n        button.setAttribute('aria-label', 'close');\n        return button;\n    }\n    function wireClearBtnEvents(element, button, container) {\n        button.addEventListener('click', (event) => {\n            if (!(element.classList.contains(CLASSNAMES.DISABLE) || element.readOnly)) {\n                event.preventDefault();\n                if (element !== document.activeElement) {\n                    element.focus();\n                }\n                element.value = '';\n                addClass([button], CLASSNAMES.CLEARICONHIDE);\n            }\n        });\n        element.addEventListener('input', (event) => {\n            updateIconState(element.value, button);\n        });\n        element.addEventListener('focus', (event) => {\n            updateIconState(element.value, button);\n        });\n        element.addEventListener('blur', (event) => {\n            setTimeout(() => { addClass([button], CLASSNAMES.CLEARICONHIDE); }, 200);\n        });\n    }\n    Input.wireClearBtnEvents = wireClearBtnEvents;\n    function validateLabel(element, floatLabelType) {\n        let parent = getParentNode(element);\n        if (parent.classList.contains(CLASSNAMES.FLOATINPUT) && floatLabelType === 'Auto') {\n            let label = getParentNode(element).getElementsByClassName('e-float-text')[0];\n            updateLabelState(element.value, label);\n        }\n    }\n    /**\n     * To create input box contianer.\n     */\n    function createInputContainer(args, className, tagClass, tag, internalCreateElement) {\n        let makeElement = !isNullOrUndefined(internalCreateElement) ? internalCreateElement : createElement;\n        let container;\n        if (!isNullOrUndefined(args.customTag)) {\n            container = makeElement(args.customTag, { className: className });\n            container.classList.add(tagClass);\n        }\n        else {\n            container = makeElement(tag, { className: className });\n        }\n        container.classList.add('e-control-wrapper');\n        return container;\n    }\n    function encodePlaceHolder(placeholder) {\n        let result = '';\n        if (!isNullOrUndefined(placeholder) && placeholder !== '') {\n            let spanEle = document.createElement('span');\n            spanEle.innerHTML = '<input  placeholder=\"' + placeholder + '\"/>';\n            let hiddenInput = (spanEle.children[0]);\n            result = hiddenInput.placeholder;\n        }\n        return result;\n    }\n    /**\n     * Sets the value to the input element.\n     * ```\n     * E.g : Input.setValue('content', element, \"Auto\", true );\n     * ```\n     * @param value - Specify the value of the input element.\n     * @param element - The element on which the specified value is updated.\n     * @param floatLabelType - Specify the float label type of the input element.\n     * @param clearButton - Boolean value to specify whether the clear icon is enabled / disabled on the input.\n     */\n    function setValue$$1(value, element, floatLabelType, clearButton) {\n        element.value = value;\n        if ((!isNullOrUndefined(floatLabelType)) && floatLabelType === 'Auto') {\n            validateLabel(element, floatLabelType);\n        }\n        if (!isNullOrUndefined(clearButton) && clearButton) {\n            let parentElement = getParentNode(element);\n            if (!isNullOrUndefined(parentElement)) {\n                let button = parentElement.getElementsByClassName(CLASSNAMES.CLEARICON)[0];\n                if (element.value && parentElement.classList.contains('e-input-focus')) {\n                    removeClass([button], CLASSNAMES.CLEARICONHIDE);\n                }\n                else {\n                    addClass([button], CLASSNAMES.CLEARICONHIDE);\n                }\n            }\n        }\n        checkInputValue(floatLabelType, element);\n    }\n    Input.setValue = setValue$$1;\n    /**\n     * Sets the single or multiple cssClass to wrapper of input element.\n     * ```\n     * E.g : Input.setCssClass('e-custom-class', [element]);\n     * ```\n     * @param cssClass - Css class names which are needed to add.\n     * @param elements - The elements which are needed to add / remove classes.\n     * @param oldClass - Css class names which are needed to remove. If old classes are need to remove, can give this optional parameter.\n     */\n    function setCssClass(cssClass, elements, oldClass) {\n        if (!isNullOrUndefined(oldClass) && oldClass !== '') {\n            removeClass(elements, oldClass.split(' '));\n        }\n        if (!isNullOrUndefined(cssClass) && cssClass !== '') {\n            addClass(elements, cssClass.split(' '));\n        }\n    }\n    Input.setCssClass = setCssClass;\n    /**\n     * Set the width to the wrapper of input element.\n     * ```\n     * E.g : Input.setWidth('200px', container);\n     * ```\n     * @param width - Width value which is need to add.\n     * @param container - The element on which the width is need to add.\n     */\n    function setWidth(width, container) {\n        if (typeof width === 'number') {\n            container.style.width = formatUnit(width);\n        }\n        else if (typeof width === 'string') {\n            container.style.width = (width.match(/px|%|em/)) ? (width) : (formatUnit(width));\n        }\n    }\n    Input.setWidth = setWidth;\n    /**\n     * Set the placeholder attribute to the input element.\n     * ```\n     * E.g : Input.setPlaceholder('Search here', element);\n     * ```\n     * @param placeholder - Placeholder value which is need to add.\n     * @param element - The element on which the placeholder is need to add.\n     */\n    function setPlaceholder(placeholder, element) {\n        let parentElement;\n        placeholder = encodePlaceHolder(placeholder);\n        parentElement = getParentNode(element);\n        if (parentElement.classList.contains(CLASSNAMES.FLOATINPUT)) {\n            if (!isNullOrUndefined(placeholder) && placeholder !== '') {\n                parentElement.getElementsByClassName(CLASSNAMES.FLOATTEXT)[0].textContent = placeholder;\n                parentElement.classList.remove(CLASSNAMES.NOFLOATLABEL);\n                element.removeAttribute('placeholder');\n            }\n            else {\n                parentElement.classList.add(CLASSNAMES.NOFLOATLABEL);\n                parentElement.getElementsByClassName(CLASSNAMES.FLOATTEXT)[0].textContent = '';\n            }\n        }\n        else {\n            if (!isNullOrUndefined(placeholder) && placeholder !== '') {\n                attributes(element, { 'placeholder': placeholder, 'aria-placeholder': placeholder });\n            }\n            else {\n                element.removeAttribute('placeholder');\n                element.removeAttribute('aria-placeholder');\n            }\n        }\n    }\n    Input.setPlaceholder = setPlaceholder;\n    /**\n     * Set the read only attribute to the input element\n     * ```\n     * E.g : Input.setReadonly(true, element);\n     * ```\n     * @param isReadonly\n     * - Boolean value to specify whether to set read only. Setting \"True\" value enables read only.\n     * @param element\n     * - The element which is need to enable read only.\n     */\n    function setReadonly(isReadonly, element, floatLabelType) {\n        if (isReadonly) {\n            attributes(element, { readonly: '' });\n        }\n        else {\n            element.removeAttribute('readonly');\n        }\n        if (!isNullOrUndefined(floatLabelType)) {\n            validateLabel(element, floatLabelType);\n        }\n    }\n    Input.setReadonly = setReadonly;\n    /**\n     * Displays the element direction from right to left when its enabled.\n     * ```\n     * E.g : Input.setEnableRtl(true, [inputObj.container]);\n     * ```\n     * @param isRtl\n     * - Boolean value to specify whether to set RTL. Setting \"True\" value enables the RTL mode.\n     * @param elements\n     * - The elements that are needed to enable/disable RTL.\n     */\n    function setEnableRtl(isRtl, elements) {\n        if (isRtl) {\n            addClass(elements, CLASSNAMES.RTL);\n        }\n        else {\n            removeClass(elements, CLASSNAMES.RTL);\n        }\n    }\n    Input.setEnableRtl = setEnableRtl;\n    /**\n     * Enables or disables the given input element.\n     * ```\n     * E.g : Input.setEnabled(false, element);\n     * ```\n     * @param isEnable\n     * - Boolean value to specify whether to enable or disable.\n     * @param element\n     * - Element to be enabled or disabled.\n     */\n    function setEnabled(isEnable, element, floatLabelType, inputContainer) {\n        let disabledAttrs = { 'disabled': 'disabled', 'aria-disabled': 'true' };\n        let considerWrapper = isNullOrUndefined(inputContainer) ? false : true;\n        if (isEnable) {\n            element.classList.remove(CLASSNAMES.DISABLE);\n            removeAttributes(disabledAttrs, element);\n            if (considerWrapper) {\n                removeClass([inputContainer], CLASSNAMES.DISABLE);\n            }\n        }\n        else {\n            element.classList.add(CLASSNAMES.DISABLE);\n            addAttributes(disabledAttrs, element);\n            if (considerWrapper) {\n                addClass([inputContainer], CLASSNAMES.DISABLE);\n            }\n        }\n        if (!isNullOrUndefined(floatLabelType)) {\n            validateLabel(element, floatLabelType);\n        }\n    }\n    Input.setEnabled = setEnabled;\n    function setClearButton(isClear, element, inputObject, initial, internalCreateElement) {\n        let makeElement = !isNullOrUndefined(internalCreateElement) ? internalCreateElement : createElement;\n        if (isClear) {\n            inputObject.clearButton = createClearButton(element, inputObject, initial, makeElement);\n        }\n        else {\n            inputObject.clearButton.remove();\n            inputObject.clearButton = null;\n        }\n    }\n    Input.setClearButton = setClearButton;\n    /**\n     * Removing the multiple attributes from the given element such as \"disabled\",\"id\" , etc.\n     * ```\n     * E.g : Input.removeAttributes({ 'disabled': 'disabled', 'aria-disabled': 'true' }, element);\n     * ```\n     * @param attrs\n     *  - Array of attributes which are need to removed from the element.\n     * @param element\n     *  - Element on which the attributes are needed to be removed.\n     */\n    function removeAttributes(attrs, element) {\n        for (let key of Object.keys(attrs)) {\n            let parentElement;\n            parentElement = getParentNode(element);\n            if (key === 'disabled') {\n                element.classList.remove(CLASSNAMES.DISABLE);\n            }\n            if (key === 'disabled' && parentElement.classList.contains(CLASSNAMES.INPUTGROUP)) {\n                parentElement.classList.remove(CLASSNAMES.DISABLE);\n            }\n            if (key === 'placeholder' && parentElement.classList.contains(CLASSNAMES.FLOATINPUT)) {\n                parentElement.getElementsByClassName(CLASSNAMES.FLOATTEXT)[0].textContent = '';\n            }\n            else {\n                element.removeAttribute(key);\n            }\n        }\n    }\n    Input.removeAttributes = removeAttributes;\n    /**\n     * Adding the multiple attributes to the given element such as \"disabled\",\"id\" , etc.\n     * ```\n     * E.g : Input.addAttributes({ 'id': 'inputpopup' }, element);\n     * ```\n     * @param attrs\n     * - Array of attributes which is added to element.\n     * @param element\n     * - Element on which the attributes are needed to be added.\n     */\n    function addAttributes(attrs, element) {\n        for (let key of Object.keys(attrs)) {\n            let parentElement;\n            parentElement = getParentNode(element);\n            if (key === 'disabled') {\n                element.classList.add(CLASSNAMES.DISABLE);\n            }\n            if (key === 'disabled' && parentElement.classList.contains(CLASSNAMES.INPUTGROUP)) {\n                parentElement.classList.add(CLASSNAMES.DISABLE);\n            }\n            if (key === 'placeholder' && parentElement.classList.contains(CLASSNAMES.FLOATINPUT)) {\n                parentElement.getElementsByClassName(CLASSNAMES.FLOATTEXT)[0].textContent = attrs[key];\n            }\n            else {\n                element.setAttribute(key, attrs[key]);\n            }\n        }\n    }\n    Input.addAttributes = addAttributes;\n    function removeFloating(input) {\n        let container = input.container;\n        if (!isNullOrUndefined(container) && container.classList.contains(CLASSNAMES.FLOATINPUT)) {\n            let inputEle = container.querySelector('textarea') ? container.querySelector('textarea') :\n                container.querySelector('input');\n            let placeholder = container.querySelector('.' + CLASSNAMES.FLOATTEXT).textContent;\n            let clearButton = container.querySelector('.e-clear-icon') !== null;\n            detach(container.querySelector('.' + CLASSNAMES.FLOATLINE));\n            detach(container.querySelector('.' + CLASSNAMES.FLOATTEXT));\n            classList(container, [CLASSNAMES.INPUTGROUP], [CLASSNAMES.FLOATINPUT]);\n            unwireFloatingEvents(inputEle);\n            attributes(inputEle, { 'placeholder': placeholder });\n            inputEle.classList.add(CLASSNAMES.INPUT);\n            if (!clearButton && inputEle.tagName === 'INPUT') {\n                inputEle.removeAttribute('required');\n            }\n        }\n    }\n    Input.removeFloating = removeFloating;\n    function addFloating(input, type, placeholder, internalCreateElement) {\n        let makeElement = !isNullOrUndefined(internalCreateElement) ? internalCreateElement : createElement;\n        let container = closest(input, '.' + CLASSNAMES.INPUTGROUP);\n        floatType = type;\n        if (type !== 'Never') {\n            let customTag = container.tagName;\n            customTag = customTag !== 'DIV' && customTag !== 'SPAN' ? customTag : null;\n            let args = { element: input, floatLabelType: type, customTag: customTag, properties: { placeholder: placeholder } };\n            let iconEle = container.querySelector('.e-clear-icon');\n            let inputObj = { container: container };\n            input.classList.remove(CLASSNAMES.INPUT);\n            createFloatingInput(args, inputObj, makeElement);\n            let isPrependIcon = container.classList.contains('e-float-icon-left');\n            if (isNullOrUndefined(iconEle)) {\n                if (isPrependIcon) {\n                    let inputWrap = container.querySelector('.e-input-in-wrap');\n                    iconEle = inputWrap.querySelector('.e-input-group-icon');\n                }\n                else {\n                    iconEle = container.querySelector('.e-input-group-icon');\n                }\n            }\n            if (isNullOrUndefined(iconEle)) {\n                if (isPrependIcon) {\n                    iconEle = container.querySelector('.e-input-group-icon');\n                }\n                if (isNullOrUndefined(iconEle)) {\n                    container.classList.remove(CLASSNAMES.INPUTGROUP);\n                }\n            }\n            else {\n                let floatLine = container.querySelector('.' + CLASSNAMES.FLOATLINE);\n                let floatText = container.querySelector('.' + CLASSNAMES.FLOATTEXT);\n                let wrapper = isPrependIcon ? container.querySelector('.e-input-in-wrap') : container;\n                wrapper.insertBefore(input, iconEle);\n                wrapper.insertBefore(floatLine, iconEle);\n                wrapper.insertBefore(floatText, iconEle);\n            }\n        }\n        checkFloatLabelType(type, input.parentElement);\n    }\n    Input.addFloating = addFloating;\n    /**\n     * Enable or Disable the ripple effect on the icons inside the Input. Ripple effect is only applicable for material theme.\n     * ```\n     * E.g : Input.setRipple(true, [inputObjects]);\n     * ```\n     * @param isRipple\n     * - Boolean value to specify whether to enable the ripple effect.\n     * @param inputObject\n     * - Specify the collection of input objects.\n     */\n    function setRipple(isRipple, inputObj) {\n        for (let i = 0; i < inputObj.length; i++) {\n            _internalRipple(isRipple, inputObj[i].container);\n        }\n    }\n    Input.setRipple = setRipple;\n    function _internalRipple(isRipple, container, button) {\n        let argsButton = [];\n        argsButton.push(button);\n        let buttons = isNullOrUndefined(button) ?\n            container.querySelectorAll('.e-input-group-icon') : argsButton;\n        if (isRipple && buttons.length > 0) {\n            for (let index = 0; index < buttons.length; index++) {\n                buttons[index].addEventListener('mousedown', _onMouseDownRipple, false);\n                buttons[index].addEventListener('mouseup', _onMouseUpRipple, false);\n            }\n        }\n        else if (buttons.length > 0) {\n            for (let index = 0; index < buttons.length; index++) {\n                buttons[index].removeEventListener('mousedown', _onMouseDownRipple, this);\n                buttons[index].removeEventListener('mouseup', _onMouseUpRipple, this);\n            }\n        }\n    }\n    function _onMouseRipple(container, button) {\n        if (!container.classList.contains('e-disabled') && !container.querySelector('input').readOnly) {\n            button.classList.add('e-input-btn-ripple');\n        }\n    }\n    function _onMouseDownRipple() {\n        let ele = this;\n        let parentEle = this.parentElement;\n        while (!parentEle.classList.contains('e-input-group')) {\n            parentEle = parentEle.parentElement;\n        }\n        _onMouseRipple(parentEle, ele);\n    }\n    function _onMouseUpRipple() {\n        let ele = this;\n        setTimeout(() => { ele.classList.remove('e-input-btn-ripple'); }, 500);\n    }\n    function createIconEle(iconClass, makeElement) {\n        let button = makeElement('span', { className: iconClass });\n        button.classList.add('e-input-group-icon');\n        return button;\n    }\n    /**\n     * Creates a new span element with the given icons added and append it in container element.\n     * ```\n     * E.g : Input.addIcon('append', 'e-icon-spin', inputObj.container, inputElement);\n     * ```\n     * @param position - Specify the icon placement on the input.Possible values are append and prepend.\n     * @param iconClass - Icon classes which are need to add to the span element which is going to created.\n     * Span element acts as icon or button element for input.\n     * @param container - The container on which created span element is going to append.\n     * @param inputElement - The inputElement on which created span element is going to prepend.\n     */\n    // tslint:disable\n    function addIcon(position, icons, container, input, internalCreate) {\n        // tslint:enable\n        let result = typeof (icons) === 'string' ? icons.split(',')\n            : icons;\n        if (position.toLowerCase() === 'append') {\n            for (let icon of result) {\n                appendSpan(icon, container, internalCreate);\n            }\n        }\n        else {\n            for (let icon of result) {\n                prependSpan(icon, container, input, internalCreate);\n            }\n        }\n    }\n    Input.addIcon = addIcon;\n    /**\n     * Creates a new span element with the given icons added and prepend it in input element.\n     * ```\n     * E.g : Input.prependSpan('e-icon-spin', inputObj.container, inputElement);\n     * ```\n     * @param iconClass - Icon classes which are need to add to the span element which is going to created.\n     * Span element acts as icon or button element for input.\n     * @param container - The container on which created span element is going to append.\n     * @param inputElement - The inputElement on which created span element is going to prepend.\n     */\n    // tslint:disable\n    function prependSpan(iconClass, container, inputElement, internalCreateElement) {\n        // tslint:enable\n        let makeElement = !isNullOrUndefined(internalCreateElement) ? internalCreateElement : createElement;\n        let button = createIconEle(iconClass, makeElement);\n        container.classList.add('e-float-icon-left');\n        let innerWrapper = container.querySelector('.e-input-in-wrap');\n        if (isNullOrUndefined(innerWrapper)) {\n            innerWrapper = makeElement('span', { className: 'e-input-in-wrap' });\n            inputElement.parentNode.insertBefore(innerWrapper, inputElement);\n            let result = container.querySelectorAll(inputElement.tagName + ' ~ *');\n            innerWrapper.appendChild(inputElement);\n            for (let i = 0; i < result.length; i++) {\n                innerWrapper.appendChild(result[i]);\n            }\n        }\n        innerWrapper.parentNode.insertBefore(button, innerWrapper);\n        if (!container.classList.contains(CLASSNAMES.INPUTGROUP)) {\n            container.classList.add(CLASSNAMES.INPUTGROUP);\n        }\n        _internalRipple(true, container, button);\n        return button;\n    }\n    Input.prependSpan = prependSpan;\n    /**\n     * Creates a new span element with the given icons added and append it in container element.\n     * ```\n     * E.g : Input.appendSpan('e-icon-spin', inputObj.container);\n     * ```\n     * @param iconClass - Icon classes which are need to add to the span element which is going to created.\n     * Span element acts as icon or button element for input.\n     * @param container - The container on which created span element is going to append.\n     */\n    function appendSpan(iconClass, container, internalCreateElement) {\n        let makeElement = !isNullOrUndefined(internalCreateElement) ? internalCreateElement : createElement;\n        let button = createIconEle(iconClass, makeElement);\n        if (!container.classList.contains(CLASSNAMES.INPUTGROUP)) {\n            container.classList.add(CLASSNAMES.INPUTGROUP);\n        }\n        let wrap = (container.classList.contains('e-float-icon-left')) ? container.querySelector('.e-input-in-wrap') :\n            container;\n        wrap.appendChild(button);\n        _internalRipple(true, container, button);\n        return button;\n    }\n    Input.appendSpan = appendSpan;\n    function validateInputType(containerElement, input) {\n        if (input.type === 'hidden') {\n            containerElement.classList.add('e-hidden');\n        }\n        else if (containerElement.classList.contains('e-hidden')) {\n            containerElement.classList.remove('e-hidden');\n        }\n    }\n    Input.validateInputType = validateInputType;\n})(Input || (Input = {}));\n\nvar __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nconst ROOT = 'e-control-wrapper e-numeric';\nconst SPINICON = 'e-input-group-icon';\nconst SPINUP = 'e-spin-up';\nconst SPINDOWN = 'e-spin-down';\nconst ERROR = 'e-error';\nconst INCREMENT = 'increment';\nconst DECREMENT = 'decrement';\nconst INTREGEXP = new RegExp('^(-)?(\\\\d*)$');\nconst DECIMALSEPARATOR = '.';\nconst COMPONENT = 'e-numerictextbox';\nconst CONTROL = 'e-control';\nconst NUMERIC_FOCUS = 'e-input-focus';\nconst HIDDENELEMENT = 'e-numeric-hidden';\nconst wrapperAttributes = ['title', 'style', 'class'];\n/**\n * Represents the NumericTextBox component that allows the user to enter only numeric values.\n * ```html\n * <input type='text' id=\"numeric\"/>\n * ```\n * ```typescript\n * <script>\n *   var numericObj = new NumericTextBox({ value: 10 });\n *   numericObj.appendTo(\"#numeric\");\n * </script>\n * ```\n */\nlet NumericTextBox = class NumericTextBox extends Component {\n    constructor(options, element) {\n        super(options, element);\n        this.isVue = false;\n        this.preventChange = false;\n        this.numericOptions = options;\n    }\n    preRender() {\n        this.isPrevFocused = false;\n        this.decimalSeparator = '.';\n        this.intRegExp = new RegExp('/^(-)?(\\d*)$/');\n        this.isCalled = false;\n        let ejInstance = getValue('ej2_instances', this.element);\n        this.cloneElement = this.element.cloneNode(true);\n        removeClass([this.cloneElement], [CONTROL, COMPONENT, 'e-lib']);\n        this.angularTagName = null;\n        this.formEle = closest(this.element, 'form');\n        if (this.element.tagName === 'EJS-NUMERICTEXTBOX') {\n            this.angularTagName = this.element.tagName;\n            let input = this.createElement('input');\n            let index = 0;\n            for (index; index < this.element.attributes.length; index++) {\n                let attributeName = this.element.attributes[index].nodeName;\n                if (attributeName !== 'id') {\n                    input.setAttribute(this.element.attributes[index].nodeName, this.element.attributes[index].nodeValue);\n                    input.innerHTML = this.element.innerHTML;\n                }\n            }\n            if (this.element.hasAttribute('name')) {\n                this.element.removeAttribute('name');\n            }\n            this.element.classList.remove('e-control', 'e-numerictextbox');\n            this.element.appendChild(input);\n            this.element = input;\n            setValue('ej2_instances', ejInstance, this.element);\n        }\n        if (!(isBlazor() && this.isServerRendered)) {\n            attributes(this.element, { 'role': 'spinbutton', 'tabindex': '0', 'autocomplete': 'off', 'aria-live': 'assertive' });\n            let localeText = {\n                incrementTitle: 'Increment value', decrementTitle: 'Decrement value', placeholder: this.placeholder\n            };\n            this.l10n = new L10n('numerictextbox', localeText, this.locale);\n            if (this.l10n.getConstant('placeholder') !== '') {\n                this.setProperties({ placeholder: this.placeholder || this.l10n.getConstant('placeholder') }, true);\n            }\n        }\n        this.isValidState = true;\n        this.inputStyle = null;\n        this.inputName = null;\n        this.cultureInfo = {};\n        this.initCultureInfo();\n        this.initCultureFunc();\n        this.prevValue = this.value;\n        if (!(isBlazor() && this.isServerRendered)) {\n            this.updateHTMLAttrToElement();\n            this.checkAttributes(false);\n            if (this.formEle) {\n                this.inputEleValue = this.value;\n            }\n        }\n        this.validateMinMax();\n        this.validateStep();\n        if (this.placeholder === null && !(isBlazor() && this.isServerRendered)) {\n            this.updatePlaceholder();\n        }\n    }\n    /**\n     * To Initialize the control rendering\n     * @private\n     */\n    render() {\n        if (this.element.tagName.toLowerCase() === 'input') {\n            if (!(isBlazor() && this.isServerRendered)) {\n                this.createWrapper();\n                if (this.showSpinButton) {\n                    this.spinBtnCreation();\n                }\n                this.setElementWidth(this.width);\n                if (!this.container.classList.contains('e-input-group')) {\n                    this.container.classList.add('e-input-group');\n                }\n                this.changeValue(this.value === null || isNaN(this.value) ?\n                    null : this.strictMode ? this.trimValue(this.value) : this.value);\n            }\n            else {\n                this.container = this.element.parentElement;\n                this.inputWrapper = { container: this.container };\n                this.hiddenInput = this.container.querySelector('input[type=\"hidden\"]');\n                if (this.showClearButton) {\n                    this.inputWrapper.clearButton = this.container.querySelector('.e-clear-icon');\n                    Input.wireClearBtnEvents(this.element, this.inputWrapper.clearButton, this.inputWrapper.container);\n                }\n                if (this.showSpinButton) {\n                    this.spinDown = this.container.querySelector('.' + SPINDOWN);\n                    this.spinUp = this.container.querySelector('.' + SPINUP);\n                    this.wireSpinBtnEvents();\n                }\n                Input.bindInitialEvent({\n                    element: this.element, buttons: null, customTag: null, floatLabelType: this.floatLabelType, properties: this.properties\n                });\n            }\n            this.wireEvents();\n            if (!(isBlazor() && this.isServerRendered)) {\n                if (this.value !== null && !isNaN(this.value)) {\n                    if (this.decimals) {\n                        this.setProperties({ value: this.roundNumber(this.value, this.decimals) }, true);\n                    }\n                }\n                if (this.element.getAttribute('value') || this.value) {\n                    this.element.setAttribute('value', this.element.value);\n                    this.hiddenInput.setAttribute('value', this.hiddenInput.value);\n                }\n            }\n            this.elementPrevValue = this.element.value;\n            this.renderComplete();\n        }\n    }\n    checkAttributes(isDynamic) {\n        let attributes$$1 = isDynamic ? isNullOrUndefined(this.htmlAttributes) ? [] : Object.keys(this.htmlAttributes) :\n            ['value', 'min', 'max', 'step', 'disabled', 'readonly', 'style', 'name', 'placeholder'];\n        for (let prop of attributes$$1) {\n            if (!isNullOrUndefined(this.element.getAttribute(prop))) {\n                switch (prop) {\n                    case 'disabled':\n                        // tslint:disable-next-line\n                        if ((isNullOrUndefined(this.numericOptions) || (this.numericOptions['enabled'] === undefined)) || isDynamic) {\n                            let enabled = this.element.getAttribute(prop) === 'disabled' || this.element.getAttribute(prop) === ''\n                                || this.element.getAttribute(prop) === 'true' ? false : true;\n                            this.setProperties({ enabled: enabled }, !isDynamic);\n                        }\n                        break;\n                    case 'readonly':\n                        // tslint:disable-next-line\n                        if ((isNullOrUndefined(this.numericOptions) || (this.numericOptions['readonly'] === undefined)) || isDynamic) {\n                            let readonly = this.element.getAttribute(prop) === 'readonly' || this.element.getAttribute(prop) === ''\n                                || this.element.getAttribute(prop) === 'true' ? true : false;\n                            this.setProperties({ readonly: readonly }, !isDynamic);\n                        }\n                        break;\n                    case 'placeholder':\n                        // tslint:disable-next-line\n                        if ((isNullOrUndefined(this.numericOptions) || (this.numericOptions['placeholder'] === undefined)) || isDynamic) {\n                            this.setProperties({ placeholder: this.element.placeholder }, !isDynamic);\n                        }\n                        break;\n                    case 'value':\n                        // tslint:disable-next-line\n                        if ((isNullOrUndefined(this.numericOptions) || (this.numericOptions['value'] === undefined)) || isDynamic) {\n                            let setNumber = this.instance.getNumberParser({ format: 'n' })(this.element.getAttribute(prop));\n                            this.setProperties(setValue(prop, setNumber, {}), !isDynamic);\n                        }\n                        break;\n                    case 'min':\n                        // tslint:disable-next-line\n                        if ((isNullOrUndefined(this.numericOptions) || (this.numericOptions['min'] === undefined)) || isDynamic) {\n                            let minValue = this.instance.getNumberParser({ format: 'n' })(this.element.getAttribute(prop));\n                            if (minValue !== null && !isNaN(minValue)) {\n                                this.setProperties(setValue(prop, minValue, {}), !isDynamic);\n                            }\n                        }\n                        break;\n                    case 'max':\n                        // tslint:disable-next-line\n                        if ((isNullOrUndefined(this.numericOptions) || (this.numericOptions['max'] === undefined)) || isDynamic) {\n                            let maxValue = this.instance.getNumberParser({ format: 'n' })(this.element.getAttribute(prop));\n                            if (maxValue !== null && !isNaN(maxValue)) {\n                                this.setProperties(setValue(prop, maxValue, {}), !isDynamic);\n                            }\n                        }\n                        break;\n                    case 'step':\n                        // tslint:disable-next-line\n                        if ((isNullOrUndefined(this.numericOptions) || (this.numericOptions['step'] === undefined)) || isDynamic) {\n                            let stepValue = this.instance.getNumberParser({ format: 'n' })(this.element.getAttribute(prop));\n                            if (stepValue !== null && !isNaN(stepValue)) {\n                                this.setProperties(setValue(prop, stepValue, {}), !isDynamic);\n                            }\n                        }\n                        break;\n                    case 'style':\n                        this.inputStyle = this.element.getAttribute(prop);\n                        break;\n                    case 'name':\n                        this.inputName = this.element.getAttribute(prop);\n                        break;\n                    default:\n                        let value = this.instance.getNumberParser({ format: 'n' })(this.element.getAttribute(prop));\n                        if ((value !== null && !isNaN(value)) || (prop === 'value')) {\n                            this.setProperties(setValue(prop, value, {}), true);\n                        }\n                        break;\n                }\n            }\n        }\n    }\n    updatePlaceholder() {\n        this.setProperties({ placeholder: this.l10n.getConstant('placeholder') }, true);\n    }\n    initCultureFunc() {\n        this.instance = new Internationalization(this.locale);\n    }\n    initCultureInfo() {\n        this.cultureInfo.format = this.format;\n        if (getValue('currency', this) !== null) {\n            setValue('currency', this.currency, this.cultureInfo);\n            this.setProperties({ currencyCode: this.currency }, true);\n        }\n    }\n    /* Wrapper creation */\n    createWrapper() {\n        let updatedCssClassValue = this.cssClass;\n        if (!isNullOrUndefined(this.cssClass) && this.cssClass !== '') {\n            updatedCssClassValue = this.getNumericValidClassList(this.cssClass);\n        }\n        let inputObj = Input.createInput({\n            element: this.element,\n            floatLabelType: this.floatLabelType,\n            properties: {\n                readonly: this.readonly,\n                placeholder: this.placeholder,\n                cssClass: updatedCssClassValue,\n                enableRtl: this.enableRtl,\n                showClearButton: this.showClearButton,\n                enabled: this.enabled\n            }\n        }, this.createElement);\n        this.inputWrapper = inputObj;\n        this.container = inputObj.container;\n        this.container.setAttribute('class', ROOT + ' ' + this.container.getAttribute('class'));\n        this.updateHTMLAttrToWrapper();\n        if (this.readonly) {\n            attributes(this.element, { 'aria-readonly': 'true' });\n        }\n        this.hiddenInput = (this.createElement('input', { attrs: { type: 'text',\n                'validateHidden': 'true', 'class': HIDDENELEMENT } }));\n        this.inputName = this.inputName !== null ? this.inputName : this.element.id;\n        this.element.removeAttribute('name');\n        attributes(this.hiddenInput, { 'name': this.inputName });\n        this.container.insertBefore(this.hiddenInput, this.container.childNodes[1]);\n        this.updateDataAttribute(false);\n        if (this.inputStyle !== null) {\n            attributes(this.container, { 'style': this.inputStyle });\n        }\n    }\n    updateDataAttribute(isDynamic) {\n        let attr = {};\n        if (!isDynamic) {\n            for (let a = 0; a < this.element.attributes.length; a++) {\n                attr[this.element.attributes[a].name] = this.element.getAttribute(this.element.attributes[a].name);\n            }\n        }\n        else {\n            attr = this.htmlAttributes;\n        }\n        for (let key of Object.keys(attr)) {\n            if (key.indexOf('data') === 0) {\n                this.hiddenInput.setAttribute(key, attr[key]);\n            }\n        }\n    }\n    updateHTMLAttrToElement() {\n        if (!isNullOrUndefined(this.htmlAttributes)) {\n            for (let pro of Object.keys(this.htmlAttributes)) {\n                if (wrapperAttributes.indexOf(pro) < 0) {\n                    this.element.setAttribute(pro, this.htmlAttributes[pro]);\n                }\n            }\n        }\n    }\n    updateCssClass(newClass, oldClass) {\n        Input.setCssClass(this.getNumericValidClassList(newClass), [this.container], this.getNumericValidClassList(oldClass));\n    }\n    getNumericValidClassList(numericClassName) {\n        let result = numericClassName;\n        if (!isNullOrUndefined(numericClassName) && numericClassName !== '') {\n            result = (numericClassName.replace(/\\s+/g, ' ')).trim();\n        }\n        return result;\n    }\n    updateHTMLAttrToWrapper() {\n        if (!isNullOrUndefined(this.htmlAttributes)) {\n            for (let pro of Object.keys(this.htmlAttributes)) {\n                if (wrapperAttributes.indexOf(pro) > -1) {\n                    if (pro === 'class') {\n                        let updatedClassValue = this.getNumericValidClassList(this.htmlAttributes[pro]);\n                        if (updatedClassValue !== '') {\n                            addClass([this.container], updatedClassValue.split(' '));\n                        }\n                    }\n                    else if (pro === 'style') {\n                        let numericStyle = this.container.getAttribute(pro);\n                        numericStyle = !isNullOrUndefined(numericStyle) ? (numericStyle + this.htmlAttributes[pro]) :\n                            this.htmlAttributes[pro];\n                        this.container.setAttribute(pro, numericStyle);\n                    }\n                    else {\n                        this.container.setAttribute(pro, this.htmlAttributes[pro]);\n                    }\n                }\n            }\n        }\n    }\n    setElementWidth(width) {\n        if (!isNullOrUndefined(width)) {\n            if (typeof width === 'number') {\n                this.container.style.width = formatUnit(width);\n            }\n            else if (typeof width === 'string') {\n                this.container.style.width = (width.match(/px|%|em/)) ? (width) : (formatUnit(width));\n            }\n        }\n    }\n    /* Spinner creation */\n    spinBtnCreation() {\n        this.spinDown = Input.appendSpan(SPINICON + ' ' + SPINDOWN, this.container, this.createElement);\n        attributes(this.spinDown, {\n            'title': this.l10n.getConstant('decrementTitle'),\n            'aria-label': this.l10n.getConstant('decrementTitle')\n        });\n        this.spinUp = Input.appendSpan(SPINICON + ' ' + SPINUP, this.container, this.createElement);\n        attributes(this.spinUp, {\n            'title': this.l10n.getConstant('incrementTitle'),\n            'aria-label': this.l10n.getConstant('incrementTitle')\n        });\n        this.wireSpinBtnEvents();\n    }\n    validateMinMax() {\n        if (!(typeof (this.min) === 'number' && !isNaN(this.min))) {\n            this.setProperties({ min: -(Number.MAX_VALUE) }, true);\n        }\n        if (!(typeof (this.max) === 'number' && !isNaN(this.max))) {\n            this.setProperties({ max: Number.MAX_VALUE }, true);\n        }\n        if (this.decimals !== null) {\n            if (this.min !== -(Number.MAX_VALUE)) {\n                this.setProperties({ min: this.instance.getNumberParser({ format: 'n' })(this.formattedValue(this.decimals, this.min)) }, true);\n            }\n            if (this.max !== (Number.MAX_VALUE)) {\n                this.setProperties({ max: this.instance.getNumberParser({ format: 'n' })(this.formattedValue(this.decimals, this.max)) }, true);\n            }\n        }\n        this.setProperties({ min: this.min > this.max ? this.max : this.min }, true);\n        attributes(this.element, { 'aria-valuemin': this.min.toString(), 'aria-valuemax': this.max.toString() });\n    }\n    formattedValue(decimals, value) {\n        return this.instance.getNumberFormat({\n            maximumFractionDigits: decimals,\n            minimumFractionDigits: decimals, useGrouping: false\n        })(value);\n    }\n    validateStep() {\n        if (this.decimals !== null) {\n            this.setProperties({ step: this.instance.getNumberParser({ format: 'n' })(this.formattedValue(this.decimals, this.step)) }, true);\n        }\n    }\n    action(operation, event) {\n        this.isInteract = true;\n        let value = this.isFocused ? this.instance.getNumberParser({ format: 'n' })(this.element.value) : this.value;\n        this.changeValue(this.performAction(value, this.step, operation));\n        this.raiseChangeEvent(event);\n    }\n    checkErrorClass() {\n        if (this.isValidState) {\n            removeClass([this.container], ERROR);\n        }\n        else {\n            addClass([this.container], ERROR);\n        }\n        attributes(this.element, { 'aria-invalid': this.isValidState ? 'false' : 'true' });\n    }\n    bindClearEvent() {\n        if (this.showClearButton) {\n            EventHandler.add(this.inputWrapper.clearButton, 'mousedown touchstart', this.resetHandler, this);\n        }\n    }\n    resetHandler(e) {\n        e.preventDefault();\n        if (!(this.inputWrapper.clearButton.classList.contains('e-clear-icon-hide'))) {\n            this.clear(e);\n        }\n        this.isInteract = true;\n        this.raiseChangeEvent(e);\n    }\n    clear(event) {\n        this.setProperties({ value: null }, true);\n        this.setElementValue('');\n        this.hiddenInput.value = '';\n        let formElement = closest(this.element, 'form');\n        if (formElement) {\n            let element = this.element.nextElementSibling;\n            let keyupEvent = document.createEvent('KeyboardEvent');\n            keyupEvent.initEvent('keyup', false, true);\n            element.dispatchEvent(keyupEvent);\n        }\n    }\n    resetFormHandler() {\n        if (this.element.tagName === 'EJS-NUMERICTEXTBOX') {\n            this.updateValue(null);\n        }\n        else {\n            this.updateValue(this.inputEleValue);\n        }\n    }\n    setSpinButton() {\n        if (!isNullOrUndefined(this.spinDown)) {\n            attributes(this.spinDown, {\n                'title': this.l10n.getConstant('decrementTitle'),\n                'aria-label': this.l10n.getConstant('decrementTitle')\n            });\n        }\n        if (!isNullOrUndefined(this.spinUp)) {\n            attributes(this.spinUp, {\n                'title': this.l10n.getConstant('incrementTitle'),\n                'aria-label': this.l10n.getConstant('incrementTitle')\n            });\n        }\n    }\n    wireEvents() {\n        EventHandler.add(this.element, 'focus', this.focusHandler, this);\n        EventHandler.add(this.element, 'blur', this.focusOutHandler, this);\n        EventHandler.add(this.element, 'keydown', this.keyDownHandler, this);\n        EventHandler.add(this.element, 'keyup', this.keyUpHandler, this);\n        EventHandler.add(this.element, 'input', this.inputHandler, this);\n        EventHandler.add(this.element, 'keypress', this.keyPressHandler, this);\n        EventHandler.add(this.element, 'change', this.changeHandler, this);\n        EventHandler.add(this.element, 'paste', this.pasteHandler, this);\n        if (this.enabled) {\n            this.bindClearEvent();\n            if (this.formEle) {\n                EventHandler.add(this.formEle, 'reset', this.resetFormHandler, this);\n            }\n        }\n    }\n    wireSpinBtnEvents() {\n        /* bind spin button events */\n        EventHandler.add(this.spinUp, Browser.touchStartEvent, this.mouseDownOnSpinner, this);\n        EventHandler.add(this.spinDown, Browser.touchStartEvent, this.mouseDownOnSpinner, this);\n        EventHandler.add(this.spinUp, Browser.touchEndEvent, this.mouseUpOnSpinner, this);\n        EventHandler.add(this.spinDown, Browser.touchEndEvent, this.mouseUpOnSpinner, this);\n        EventHandler.add(this.spinUp, Browser.touchMoveEvent, this.touchMoveOnSpinner, this);\n        EventHandler.add(this.spinDown, Browser.touchMoveEvent, this.touchMoveOnSpinner, this);\n    }\n    unwireEvents() {\n        EventHandler.remove(this.element, 'focus', this.focusHandler);\n        EventHandler.remove(this.element, 'blur', this.focusOutHandler);\n        EventHandler.remove(this.element, 'keyup', this.keyUpHandler);\n        EventHandler.remove(this.element, 'input', this.inputHandler);\n        EventHandler.remove(this.element, 'keydown', this.keyDownHandler);\n        EventHandler.remove(this.element, 'keypress', this.keyPressHandler);\n        EventHandler.remove(this.element, 'change', this.changeHandler);\n        EventHandler.remove(this.element, 'paste', this.pasteHandler);\n        if (this.formEle) {\n            EventHandler.remove(this.formEle, 'reset', this.resetFormHandler);\n        }\n    }\n    unwireSpinBtnEvents() {\n        /* unbind spin button events */\n        EventHandler.remove(this.spinUp, Browser.touchStartEvent, this.mouseDownOnSpinner);\n        EventHandler.remove(this.spinDown, Browser.touchStartEvent, this.mouseDownOnSpinner);\n        EventHandler.remove(this.spinUp, Browser.touchEndEvent, this.mouseUpOnSpinner);\n        EventHandler.remove(this.spinDown, Browser.touchEndEvent, this.mouseUpOnSpinner);\n        EventHandler.remove(this.spinUp, Browser.touchMoveEvent, this.touchMoveOnSpinner);\n        EventHandler.remove(this.spinDown, Browser.touchMoveEvent, this.touchMoveOnSpinner);\n    }\n    changeHandler(event) {\n        event.stopPropagation();\n        if (!this.element.value.length) {\n            this.setProperties({ value: null }, true);\n        }\n        let parsedInput = this.instance.getNumberParser({ format: 'n' })(this.element.value);\n        this.updateValue(parsedInput, event);\n    }\n    raiseChangeEvent(event) {\n        if (this.prevValue !== this.value) {\n            let eventArgs = {};\n            this.changeEventArgs = { value: this.value, previousValue: this.prevValue, isInteracted: this.isInteract,\n                isInteraction: this.isInteract, event: event };\n            if (event) {\n                this.changeEventArgs.event = event;\n            }\n            if (this.changeEventArgs.event === undefined) {\n                this.changeEventArgs.isInteracted = false;\n                this.changeEventArgs.isInteraction = false;\n            }\n            merge(eventArgs, this.changeEventArgs);\n            this.prevValue = this.value;\n            this.isInteract = false;\n            this.elementPrevValue = this.element.value;\n            this.preventChange = false;\n            this.trigger('change', eventArgs);\n        }\n    }\n    pasteHandler() {\n        if (!this.enabled || this.readonly) {\n            return;\n        }\n        let beforeUpdate = this.element.value;\n        setTimeout(() => {\n            if (!this.numericRegex().test(this.element.value)) {\n                this.setElementValue(beforeUpdate);\n            }\n        });\n    }\n    preventHandler() {\n        let iOS = !!navigator.platform && /iPad|iPhone|iPod/.test(navigator.platform);\n        setTimeout(() => {\n            if (this.element.selectionStart > 0) {\n                let currentPos = this.element.selectionStart;\n                let prevPos = this.element.selectionStart - 1;\n                let start = 0;\n                let ignoreKeyCode;\n                let valArray = this.element.value.split('');\n                let numericObject = getNumericObject(this.locale);\n                let decimalSeparator = getValue('decimal', numericObject);\n                ignoreKeyCode = decimalSeparator.charCodeAt(0);\n                if (this.element.value[prevPos] === ' ' && this.element.selectionStart > 0 && !iOS) {\n                    if (isNullOrUndefined(this.prevVal)) {\n                        this.element.value = this.element.value.trim();\n                    }\n                    else if (prevPos !== 0) {\n                        this.element.value = this.prevVal;\n                    }\n                    else if (prevPos === 0) {\n                        this.element.value = this.element.value.trim();\n                    }\n                    this.element.setSelectionRange(prevPos, prevPos);\n                }\n                else if (isNaN(parseFloat(this.element.value[this.element.selectionStart - 1])) &&\n                    this.element.value[this.element.selectionStart - 1].charCodeAt(0) !== 45) {\n                    if ((valArray.indexOf(this.element.value[this.element.selectionStart - 1]) !==\n                        valArray.lastIndexOf(this.element.value[this.element.selectionStart - 1]) &&\n                        this.element.value[this.element.selectionStart - 1].charCodeAt(0) === ignoreKeyCode) ||\n                        this.element.value[this.element.selectionStart - 1].charCodeAt(0) !== ignoreKeyCode) {\n                        this.element.value = this.element.value.substring(0, prevPos) +\n                            this.element.value.substring(currentPos, this.element.value.length);\n                        this.element.setSelectionRange(prevPos, prevPos);\n                        if (isNaN(parseFloat(this.element.value[this.element.selectionStart - 1])) && this.element.selectionStart > 0\n                            && this.element.value.length) {\n                            this.preventHandler();\n                        }\n                    }\n                }\n                else if (isNaN(parseFloat(this.element.value[this.element.selectionStart - 2])) && this.element.selectionStart > 1 &&\n                    this.element.value[this.element.selectionStart - 2].charCodeAt(0) !== 45) {\n                    if ((valArray.indexOf(this.element.value[this.element.selectionStart - 2]) !==\n                        valArray.lastIndexOf(this.element.value[this.element.selectionStart - 2]) &&\n                        this.element.value[this.element.selectionStart - 2].charCodeAt(0) === ignoreKeyCode) ||\n                        this.element.value[this.element.selectionStart - 2].charCodeAt(0) !== ignoreKeyCode) {\n                        this.element.setSelectionRange(prevPos, prevPos);\n                        this.nextEle = this.element.value[this.element.selectionStart];\n                        this.cursorPosChanged = true;\n                        this.preventHandler();\n                    }\n                }\n                if (this.cursorPosChanged === true && this.element.value[this.element.selectionStart] === this.nextEle &&\n                    isNaN(parseFloat(this.element.value[this.element.selectionStart - 1]))) {\n                    this.element.setSelectionRange(this.element.selectionStart + 1, this.element.selectionStart + 1);\n                    this.cursorPosChanged = false;\n                    this.nextEle = null;\n                }\n                if (this.element.value.trim() === '') {\n                    this.element.setSelectionRange(start, start);\n                }\n                if (this.element.selectionStart > 0) {\n                    if ((this.element.value[this.element.selectionStart - 1].charCodeAt(0) === 45) && this.element.selectionStart > 1) {\n                        if (isNullOrUndefined(this.prevVal)) {\n                            this.element.value = this.element.value;\n                        }\n                        else {\n                            this.element.value = this.prevVal;\n                        }\n                        this.element.setSelectionRange(this.element.selectionStart, this.element.selectionStart);\n                    }\n                }\n                this.prevVal = this.element.value;\n            }\n        });\n    }\n    keyUpHandler(event) {\n        if (!this.enabled || this.readonly) {\n            return;\n        }\n        let iOS = !!navigator.platform && /iPad|iPhone|iPod/.test(navigator.platform);\n        if (!iOS && Browser.isDevice) {\n            this.preventHandler();\n        }\n        let parseValue = this.instance.getNumberParser({ format: 'n' })(this.element.value);\n        parseValue = parseValue === null || isNaN(parseValue) ? null : parseValue;\n        this.hiddenInput.value = parseValue || parseValue === 0 ? parseValue.toString() : null;\n        let formElement = closest(this.element, 'form');\n        if (formElement) {\n            let element = this.element.nextElementSibling;\n            let keyupEvent = document.createEvent('KeyboardEvent');\n            keyupEvent.initEvent('keyup', false, true);\n            element.dispatchEvent(keyupEvent);\n        }\n    }\n    ;\n    inputHandler(event) {\n        if (!this.enabled || this.readonly) {\n            return;\n        }\n        let iOS = !!navigator.platform && /iPad|iPhone|iPod/.test(navigator.platform);\n        let fireFox = navigator.userAgent.toLowerCase().indexOf('firefox') > -1;\n        if ((fireFox || iOS) && Browser.isDevice) {\n            this.preventHandler();\n        }\n        if (this.isVue) {\n            let current = this.instance.getNumberParser({ format: 'n' })(this.element.value);\n            let previous = this.instance.getNumberParser({ format: 'n' })(this.elementPrevValue);\n            let eventArgs = {\n                event: event,\n                value: (current === null || isNaN(current) ? null : current),\n                previousValue: (previous === null || isNaN(previous) ? null : previous)\n            };\n            this.preventChange = true;\n            this.elementPrevValue = this.element.value;\n            this.trigger('input', eventArgs);\n        }\n    }\n    ;\n    keyDownHandler(event) {\n        if (!this.readonly) {\n            switch (event.keyCode) {\n                case 38:\n                    event.preventDefault();\n                    this.action(INCREMENT, event);\n                    break;\n                case 40:\n                    event.preventDefault();\n                    this.action(DECREMENT, event);\n                    break;\n                default: break;\n            }\n        }\n    }\n    ;\n    performAction(value, step, operation) {\n        if (value === null || isNaN(value)) {\n            value = 0;\n        }\n        let updatedValue = operation === INCREMENT ? value + step : value - step;\n        updatedValue = this.correctRounding(value, step, updatedValue);\n        return this.strictMode ? this.trimValue(updatedValue) : updatedValue;\n    }\n    ;\n    correctRounding(value, step, result) {\n        let floatExp = new RegExp('[,.](.*)');\n        let valueText = value.toString();\n        let stepText = step.toString();\n        let floatValue = floatExp.test(value.toString());\n        let floatStep = floatExp.test(step.toString());\n        if (floatValue || floatStep) {\n            let valueCount = floatValue ? floatExp.exec(value.toString())[0].length : 0;\n            let stepCount = floatStep ? floatExp.exec(step.toString())[0].length : 0;\n            let max = Math.max(valueCount, stepCount);\n            return value = this.roundValue(result, max);\n        }\n        return result;\n    }\n    ;\n    roundValue(result, precision) {\n        precision = precision || 0;\n        let divide = Math.pow(10, precision);\n        return result *= divide, result = Math.round(result) / divide;\n    }\n    ;\n    updateValue(value, event) {\n        if (event) {\n            this.isInteract = true;\n        }\n        if (value !== null && !isNaN(value)) {\n            if (this.decimals) {\n                value = this.roundNumber(value, this.decimals);\n            }\n        }\n        this.changeValue(value === null || isNaN(value) ? null : this.strictMode ? this.trimValue(value) : value);\n        if ((!this.isVue) || (this.isVue && !this.preventChange)) {\n            this.raiseChangeEvent(event);\n        }\n    }\n    updateCurrency(prop, propVal) {\n        setValue(prop, propVal, this.cultureInfo);\n        this.updateValue(this.value);\n    }\n    changeValue(value) {\n        if (!(value || value === 0)) {\n            value = null;\n            this.setProperties({ value: value }, true);\n        }\n        else {\n            let numberOfDecimals;\n            numberOfDecimals = this.getNumberOfDecimals(value);\n            this.setProperties({ value: this.roundNumber(value, numberOfDecimals) }, true);\n        }\n        this.modifyText();\n        if (!this.strictMode) {\n            this.validateState();\n        }\n    }\n    ;\n    modifyText() {\n        if (this.value || this.value === 0) {\n            let value = this.formatNumber();\n            let elementValue = this.isFocused ? value : this.instance.getNumberFormat(this.cultureInfo)(this.value);\n            this.setElementValue(elementValue);\n            attributes(this.element, { 'aria-valuenow': value });\n            this.hiddenInput.value = this.value.toString();\n            if (this.value !== null && this.serverDecimalSeparator) {\n                this.hiddenInput.value = this.hiddenInput.value.replace('.', this.serverDecimalSeparator);\n            }\n        }\n        else {\n            this.setElementValue('');\n            this.element.removeAttribute('aria-valuenow');\n            this.hiddenInput.value = null;\n        }\n    }\n    ;\n    setElementValue(val, element) {\n        Input.setValue(val, (element ? element : this.element), this.floatLabelType, this.showClearButton);\n    }\n    validateState() {\n        this.isValidState = true;\n        if (this.value || this.value === 0) {\n            this.isValidState = !(this.value > this.max || this.value < this.min);\n        }\n        this.checkErrorClass();\n    }\n    getNumberOfDecimals(value) {\n        let numberOfDecimals;\n        let EXPREGEXP = new RegExp('[eE][\\-+]?([0-9]+)');\n        let valueString = value.toString();\n        if (EXPREGEXP.test(valueString)) {\n            let result = EXPREGEXP.exec(valueString);\n            if (!isNullOrUndefined(result)) {\n                valueString = value.toFixed(Math.min(parseInt(result[1], 10), 20));\n            }\n        }\n        let decimalPart = valueString.split('.')[1];\n        numberOfDecimals = !decimalPart || !decimalPart.length ? 0 : decimalPart.length;\n        if (this.decimals !== null) {\n            numberOfDecimals = numberOfDecimals < this.decimals ? numberOfDecimals : this.decimals;\n        }\n        return numberOfDecimals;\n    }\n    formatNumber() {\n        let numberOfDecimals;\n        numberOfDecimals = this.getNumberOfDecimals(this.value);\n        return this.instance.getNumberFormat({\n            maximumFractionDigits: numberOfDecimals,\n            minimumFractionDigits: numberOfDecimals, useGrouping: false\n        })(this.value);\n    }\n    ;\n    trimValue(value) {\n        if (value > this.max) {\n            return this.max;\n        }\n        if (value < this.min) {\n            return this.min;\n        }\n        return value;\n    }\n    ;\n    roundNumber(value, precision) {\n        let result = value;\n        let decimals = precision || 0;\n        let result1 = result.toString().split('e');\n        result = Math.round(Number(result1[0] + 'e' + (result1[1] ? (Number(result1[1]) + decimals) : decimals)));\n        let result2 = result.toString().split('e');\n        result = Number(result2[0] + 'e' + (result2[1] ? (Number(result2[1]) - decimals) : -decimals));\n        return Number(result.toFixed(decimals));\n    }\n    ;\n    cancelEvent(event) {\n        event.preventDefault();\n        return false;\n    }\n    keyPressHandler(event) {\n        if (!this.enabled || this.readonly) {\n            return true;\n        }\n        if (!Browser.isDevice && Browser.info.version === '11.0' && event.keyCode === 13) {\n            let parsedInput = this.instance.getNumberParser({ format: 'n' })(this.element.value);\n            this.updateValue(parsedInput, event);\n            return true;\n        }\n        if (event.which === 0 || event.metaKey || event.ctrlKey || event.keyCode === 8 || event.keyCode === 13) {\n            return true;\n        }\n        let currentChar = String.fromCharCode(event.which);\n        let text = this.element.value;\n        text = text.substring(0, this.element.selectionStart) + currentChar + text.substring(this.element.selectionEnd);\n        if (!this.numericRegex().test(text)) {\n            event.preventDefault();\n            event.stopPropagation();\n            return false;\n        }\n        else {\n            return true;\n        }\n    }\n    ;\n    numericRegex() {\n        let numericObject = getNumericObject(this.locale);\n        let decimalSeparator = getValue('decimal', numericObject);\n        let fractionRule = '*';\n        if (decimalSeparator === DECIMALSEPARATOR) {\n            decimalSeparator = '\\\\' + decimalSeparator;\n        }\n        if (this.decimals === 0 && this.validateDecimalOnType) {\n            return INTREGEXP;\n        }\n        if (this.decimals && this.validateDecimalOnType) {\n            fractionRule = '{0,' + this.decimals + '}';\n        }\n        return new RegExp('^(-)?(((\\\\d+(' + decimalSeparator + '\\\\d' + fractionRule +\n            ')?)|(' + decimalSeparator + '\\\\d' + fractionRule + ')))?$');\n    }\n    ;\n    mouseWheel(event) {\n        event.preventDefault();\n        let delta;\n        let rawEvent = event;\n        if (rawEvent.wheelDelta) {\n            delta = rawEvent.wheelDelta / 120;\n        }\n        else if (rawEvent.detail) {\n            delta = -rawEvent.detail / 3;\n        }\n        if (delta > 0) {\n            this.action(INCREMENT, event);\n        }\n        else if (delta < 0) {\n            this.action(DECREMENT, event);\n        }\n        this.cancelEvent(event);\n    }\n    focusHandler(event) {\n        this.focusEventArgs = { event: event, value: this.value, container: this.container };\n        this.trigger('focus', this.focusEventArgs);\n        if (!this.enabled || this.readonly) {\n            return;\n        }\n        this.isFocused = true;\n        removeClass([this.container], ERROR);\n        this.prevValue = this.value;\n        if ((this.value || this.value === 0)) {\n            let formatValue = this.formatNumber();\n            this.setElementValue(formatValue);\n            if (!this.isPrevFocused) {\n                if (!Browser.isDevice && Browser.info.version === '11.0') {\n                    this.element.setSelectionRange(0, formatValue.length);\n                }\n                else {\n                    let delay = (Browser.isDevice && Browser.isIos) ? 600 : 0;\n                    setTimeout(() => {\n                        this.element.setSelectionRange(0, formatValue.length);\n                    }, delay);\n                }\n            }\n        }\n        if (!Browser.isDevice) {\n            EventHandler.add(this.element, 'mousewheel DOMMouseScroll', this.mouseWheel, this);\n        }\n    }\n    ;\n    focusOutHandler(event) {\n        this.blurEventArgs = { event: event, value: this.value, container: this.container };\n        this.trigger('blur', this.blurEventArgs);\n        if (!this.enabled || this.readonly) {\n            return;\n        }\n        if (this.isPrevFocused) {\n            event.preventDefault();\n            if (Browser.isDevice) {\n                let value = this.element.value;\n                this.element.focus();\n                this.isPrevFocused = false;\n                let ele = this.element;\n                setTimeout(() => {\n                    this.setElementValue(value, ele);\n                }, 200);\n            }\n        }\n        else {\n            this.isFocused = false;\n            if (!this.element.value.length) {\n                this.setProperties({ value: null }, true);\n            }\n            let parsedInput = this.instance.getNumberParser({ format: 'n' })(this.element.value);\n            this.updateValue(parsedInput);\n            if (!Browser.isDevice) {\n                EventHandler.remove(this.element, 'mousewheel DOMMouseScroll', this.mouseWheel);\n            }\n        }\n        let formElement = closest(this.element, 'form');\n        if (formElement) {\n            let element = this.element.nextElementSibling;\n            let focusEvent = document.createEvent('FocusEvent');\n            focusEvent.initEvent('focusout', false, true);\n            element.dispatchEvent(focusEvent);\n        }\n    }\n    ;\n    mouseDownOnSpinner(event) {\n        if (this.isFocused) {\n            this.isPrevFocused = true;\n            event.preventDefault();\n        }\n        if (!this.getElementData(event)) {\n            return;\n        }\n        let result = this.getElementData(event);\n        let target = event.currentTarget;\n        let action = (target.classList.contains(SPINUP)) ? INCREMENT : DECREMENT;\n        EventHandler.add(target, 'mouseleave', this.mouseUpClick, this);\n        this.timeOut = setInterval(() => { this.isCalled = true; this.action(action, event); }, 150);\n        EventHandler.add(document, 'mouseup', this.mouseUpClick, this);\n    }\n    touchMoveOnSpinner(event) {\n        let target = document.elementFromPoint(event.clientX, event.clientY);\n        if (!(target.classList.contains(SPINICON))) {\n            clearInterval(this.timeOut);\n        }\n    }\n    mouseUpOnSpinner(event) {\n        if (this.isPrevFocused) {\n            this.element.focus();\n            if (!Browser.isDevice) {\n                this.isPrevFocused = false;\n            }\n        }\n        if (!Browser.isDevice) {\n            event.preventDefault();\n        }\n        if (!this.getElementData(event)) {\n            return;\n        }\n        let target = event.currentTarget;\n        let action = (target.classList.contains(SPINUP)) ? INCREMENT : DECREMENT;\n        EventHandler.remove(target, 'mouseleave', this.mouseUpClick);\n        if (!this.isCalled) {\n            this.action(action, event);\n        }\n        this.isCalled = false;\n        EventHandler.remove(document, 'mouseup', this.mouseUpClick);\n        let formElement = closest(this.element, 'form');\n        if (formElement) {\n            let element = this.element.nextElementSibling;\n            let keyupEvent = document.createEvent('KeyboardEvent');\n            keyupEvent.initEvent('keyup', false, true);\n            element.dispatchEvent(keyupEvent);\n        }\n    }\n    getElementData(event) {\n        if ((event.which && event.which === 3) || (event.button && event.button === 2)\n            || !this.enabled || this.readonly) {\n            return false;\n        }\n        clearInterval(this.timeOut);\n        return true;\n    }\n    floatLabelTypeUpdate() {\n        Input.removeFloating(this.inputWrapper);\n        let hiddenInput = this.hiddenInput;\n        this.hiddenInput.remove();\n        Input.addFloating(this.element, this.floatLabelType, this.placeholder, this.createElement);\n        this.container.insertBefore(hiddenInput, this.container.childNodes[1]);\n    }\n    mouseUpClick(event) {\n        event.stopPropagation();\n        clearInterval(this.timeOut);\n        this.isCalled = false;\n        EventHandler.remove(this.spinUp, 'mouseleave', this.mouseUpClick);\n        EventHandler.remove(this.spinDown, 'mouseleave', this.mouseUpClick);\n    }\n    /**\n     * Increments the NumericTextBox value with the specified step value.\n     * @param  {number} step - Specifies the value used to increment the NumericTextBox value.\n     * if its not given then numeric value will be incremented based on the step property value.\n     */\n    increment(step = this.step) {\n        this.isInteract = false;\n        this.changeValue(this.performAction(this.value, step, INCREMENT));\n        this.raiseChangeEvent();\n    }\n    /**\n     * Decrements the NumericTextBox value with specified step value.\n     * @param  {number} step - Specifies the value used to decrement the NumericTextBox value.\n     * if its not given then numeric value will be decremented based on the step property value.\n     */\n    decrement(step = this.step) {\n        this.isInteract = false;\n        this.changeValue(this.performAction(this.value, step, DECREMENT));\n        this.raiseChangeEvent();\n    }\n    /**\n     * Removes the component from the DOM and detaches all its related event handlers.\n     * Also it maintains the initial input element from the DOM.\n     * @method destroy\n     * @return {void}\n     */\n    destroy() {\n        this.unwireEvents();\n        if (!(isBlazor() && this.isServerRendered)) {\n            detach(this.hiddenInput);\n            if (this.showSpinButton) {\n                this.unwireSpinBtnEvents();\n                detach(this.spinUp);\n                detach(this.spinDown);\n            }\n            let attrArray = ['aria-labelledby', 'role', 'autocomplete', 'aria-readonly',\n                'autocorrect', 'aria-disabled', 'aria-placeholder', 'autocapitalize',\n                'spellcheck', 'aria-autocomplete', 'tabindex', 'aria-valuemin',\n                'aria-valuemax', 'aria-live', 'aria-valuenow', 'aria-invalid'];\n            for (let i = 0; i < attrArray.length; i++) {\n                this.element.removeAttribute(attrArray[i]);\n            }\n            this.element.classList.remove('e-input');\n            this.container.insertAdjacentElement('afterend', this.element);\n            detach(this.container);\n            super.destroy();\n        }\n    }\n    /**\n     * Returns the value of NumericTextBox with the format applied to the NumericTextBox.\n     */\n    getText() {\n        return this.element.value;\n    }\n    /**\n     * Sets the focus to widget for interaction.\n     * @returns void\n     */\n    focusIn() {\n        if (document.activeElement !== this.element && this.enabled) {\n            this.element.focus();\n            addClass([this.container], [NUMERIC_FOCUS]);\n        }\n    }\n    /**\n     * Remove the focus from widget, if the widget is in focus state.\n     * @returns void\n     */\n    focusOut() {\n        if (document.activeElement === this.element && this.enabled) {\n            this.element.blur();\n            removeClass([this.container], [NUMERIC_FOCUS]);\n        }\n    }\n    /**\n     * Gets the properties to be maintained in the persisted state.\n     * @return {string}\n     */\n    getPersistData() {\n        let keyEntity = ['value'];\n        return this.addOnPersist(keyEntity);\n    }\n    /**\n     * Calls internally if any of the property value is changed.\n     * @private\n     */\n    onPropertyChanged(newProp, oldProp) {\n        for (let prop of Object.keys(newProp)) {\n            switch (prop) {\n                case 'width':\n                    this.setElementWidth(newProp.width);\n                    break;\n                case 'cssClass':\n                    this.updateCssClass(newProp.cssClass, oldProp.cssClass);\n                    break;\n                case 'enabled':\n                    Input.setEnabled(newProp.enabled, this.element);\n                    break;\n                case 'enableRtl':\n                    Input.setEnableRtl(newProp.enableRtl, [this.container]);\n                    break;\n                case 'readonly':\n                    Input.setReadonly(newProp.readonly, this.element);\n                    if (this.readonly) {\n                        attributes(this.element, { 'aria-readonly': 'true' });\n                    }\n                    else {\n                        this.element.removeAttribute('aria-readonly');\n                    }\n                    break;\n                case 'htmlAttributes':\n                    this.updateHTMLAttrToElement();\n                    this.updateHTMLAttrToWrapper();\n                    this.updateDataAttribute(true);\n                    this.checkAttributes(true);\n                    Input.validateInputType(this.container, this.element);\n                    break;\n                case 'placeholder':\n                    Input.setPlaceholder(newProp.placeholder, this.element);\n                    break;\n                case 'step':\n                    this.step = newProp.step;\n                    this.validateStep();\n                    break;\n                case 'showSpinButton':\n                    this.updateSpinButton(newProp);\n                    break;\n                case 'showClearButton':\n                    this.updateClearButton(newProp);\n                    break;\n                case 'floatLabelType':\n                    this.floatLabelType = newProp.floatLabelType;\n                    this.floatLabelTypeUpdate();\n                    break;\n                case 'value':\n                    this.updateValue(newProp.value);\n                    if (this.isVue && this.preventChange) {\n                        this.preventChange = false;\n                    }\n                    break;\n                case 'min':\n                case 'max':\n                    setValue(prop, getValue(prop, newProp), this);\n                    this.validateMinMax();\n                    this.updateValue(this.value);\n                    break;\n                case 'strictMode':\n                    this.strictMode = newProp.strictMode;\n                    this.updateValue(this.value);\n                    this.validateState();\n                    break;\n                case 'locale':\n                    this.initCultureFunc();\n                    this.l10n.setLocale(this.locale);\n                    this.setSpinButton();\n                    this.updatePlaceholder();\n                    Input.setPlaceholder(this.placeholder, this.element);\n                    this.updateValue(this.value);\n                    break;\n                case 'currency':\n                    let propVal = getValue(prop, newProp);\n                    this.setProperties({ currencyCode: propVal }, true);\n                    this.updateCurrency(prop, propVal);\n                    break;\n                case 'currencyCode':\n                    let propValue = getValue(prop, newProp);\n                    this.setProperties({ currency: propValue }, true);\n                    this.updateCurrency('currency', propValue);\n                    break;\n                case 'format':\n                    setValue(prop, getValue(prop, newProp), this);\n                    this.initCultureInfo();\n                    this.updateValue(this.value);\n                    break;\n                case 'decimals':\n                    this.decimals = newProp.decimals;\n                    this.updateValue(this.value);\n            }\n        }\n    }\n    updateClearButton(newProp) {\n        if (isBlazor()) {\n            if (this.showClearButton) {\n                this.inputWrapper.clearButton = this.container.querySelector('.e-clear-icon');\n                Input.wireClearBtnEvents(this.element, this.inputWrapper.clearButton, this.inputWrapper.container);\n            }\n        }\n        else {\n            Input.setClearButton(newProp.showClearButton, this.element, this.inputWrapper, undefined, this.createElement);\n            this.bindClearEvent();\n        }\n    }\n    updateSpinButton(newProp) {\n        if (isBlazor()) {\n            if (this.showSpinButton) {\n                this.spinDown = this.container.querySelector('.' + SPINDOWN);\n                this.spinUp = this.container.querySelector('.' + SPINUP);\n                this.wireSpinBtnEvents();\n            }\n        }\n        else {\n            if (newProp.showSpinButton) {\n                this.spinBtnCreation();\n            }\n            else {\n                detach(this.spinUp);\n                detach(this.spinDown);\n            }\n        }\n    }\n    /**\n     * Gets the component name\n     * @private\n     */\n    getModuleName() {\n        return 'numerictextbox';\n    }\n};\n__decorate([\n    Property('')\n], NumericTextBox.prototype, \"cssClass\", void 0);\n__decorate([\n    Property(null)\n], NumericTextBox.prototype, \"value\", void 0);\n__decorate([\n    Property(-(Number.MAX_VALUE))\n], NumericTextBox.prototype, \"min\", void 0);\n__decorate([\n    Property(Number.MAX_VALUE)\n], NumericTextBox.prototype, \"max\", void 0);\n__decorate([\n    Property(1)\n], NumericTextBox.prototype, \"step\", void 0);\n__decorate([\n    Property(null)\n], NumericTextBox.prototype, \"width\", void 0);\n__decorate([\n    Property(null)\n], NumericTextBox.prototype, \"placeholder\", void 0);\n__decorate([\n    Property({})\n], NumericTextBox.prototype, \"htmlAttributes\", void 0);\n__decorate([\n    Property(true)\n], NumericTextBox.prototype, \"showSpinButton\", void 0);\n__decorate([\n    Property(false)\n], NumericTextBox.prototype, \"readonly\", void 0);\n__decorate([\n    Property(true)\n], NumericTextBox.prototype, \"enabled\", void 0);\n__decorate([\n    Property(false)\n], NumericTextBox.prototype, \"showClearButton\", void 0);\n__decorate([\n    Property(false)\n], NumericTextBox.prototype, \"enablePersistence\", void 0);\n__decorate([\n    Property('n2')\n], NumericTextBox.prototype, \"format\", void 0);\n__decorate([\n    Property(null)\n], NumericTextBox.prototype, \"decimals\", void 0);\n__decorate([\n    Property(null)\n], NumericTextBox.prototype, \"currency\", void 0);\n__decorate([\n    Property(null)\n], NumericTextBox.prototype, \"currencyCode\", void 0);\n__decorate([\n    Property(true)\n], NumericTextBox.prototype, \"strictMode\", void 0);\n__decorate([\n    Property(false)\n], NumericTextBox.prototype, \"validateDecimalOnType\", void 0);\n__decorate([\n    Property('Never')\n], NumericTextBox.prototype, \"floatLabelType\", void 0);\n__decorate([\n    Event()\n], NumericTextBox.prototype, \"created\", void 0);\n__decorate([\n    Event()\n], NumericTextBox.prototype, \"destroyed\", void 0);\n__decorate([\n    Event()\n], NumericTextBox.prototype, \"change\", void 0);\n__decorate([\n    Event()\n], NumericTextBox.prototype, \"focus\", void 0);\n__decorate([\n    Event()\n], NumericTextBox.prototype, \"blur\", void 0);\nNumericTextBox = __decorate([\n    NotifyPropertyChanges\n], NumericTextBox);\n\n/**\n * NumericTextBox modules\n */\n\n/**\n * MaskedTextBox base module\n */\nconst ERROR$1 = 'e-error';\nconst INPUTGROUP = 'e-input-group';\nconst FLOATINPUT = 'e-float-input';\nconst UTILMASK = 'e-utility-mask';\nconst TOPLABEL = 'e-label-top';\nconst BOTTOMLABEL = 'e-label-bottom';\n/**\n * @hidden\n * Built-in masking elements collection.\n */\nlet regularExpressions = {\n    '0': '[0-9]',\n    '9': '[0-9 ]',\n    '#': '[0-9 +-]',\n    'L': '[A-Za-z]',\n    '?': '[A-Za-z ]',\n    '&': '[^\\x7f ]+',\n    'C': '[^\\x7f]+',\n    'A': '[A-Za-z0-9]',\n    'a': '[A-Za-z0-9 ]',\n};\n/**\n * @hidden\n * Generate required masking elements to the MaskedTextBox from user mask input.\n */\nfunction createMask() {\n    attributes(this.element, {\n        'role': 'textbox', 'autocomplete': 'off', 'autocorrect': 'off', 'autocapitalize': 'off',\n        'spellcheck': 'false', 'aria-live': 'assertive', 'aria-valuenow': ''\n    });\n    if (this.mask) {\n        let splitMask = this.mask.split(']');\n        for (let i = 0; i < splitMask.length; i++) {\n            if (splitMask[i][splitMask[i].length - 1] === '\\\\') {\n                splitMask[i] = splitMask[i] + ']';\n                let splitInnerMask = splitMask[i].split('[');\n                for (let j = 0; j < splitInnerMask.length; j++) {\n                    if (splitInnerMask[j][splitInnerMask[j].length - 1] === '\\\\') {\n                        splitInnerMask[j] = splitInnerMask[j] + '[';\n                    }\n                    pushIntoRegExpCollec.call(this, splitInnerMask[j]);\n                }\n            }\n            else {\n                let splitInnerMask = splitMask[i].split('[');\n                if (splitInnerMask.length > 1) {\n                    let chkSpace = false;\n                    for (let j = 0; j < splitInnerMask.length; j++) {\n                        if (splitInnerMask[j] === '\\\\') {\n                            this.customRegExpCollec.push('[');\n                            this.hiddenMask += splitInnerMask[j] + '[';\n                        }\n                        else if (splitInnerMask[j] === '') {\n                            chkSpace = true;\n                        }\n                        else if ((splitInnerMask[j] !== '' && chkSpace) || j === splitInnerMask.length - 1) {\n                            this.customRegExpCollec.push('[' + splitInnerMask[j] + ']');\n                            this.hiddenMask += this.promptChar;\n                            chkSpace = false;\n                        }\n                        else {\n                            pushIntoRegExpCollec.call(this, splitInnerMask[j]);\n                        }\n                    }\n                }\n                else {\n                    pushIntoRegExpCollec.call(this, splitInnerMask[0]);\n                }\n            }\n        }\n        this.escapeMaskValue = this.hiddenMask;\n        this.promptMask = this.hiddenMask.replace(/[09?LCAa#&]/g, this.promptChar);\n        if (!isNullOrUndefined(this.customCharacters)) {\n            for (let i = 0; i < this.promptMask.length; i++) {\n                if (!isNullOrUndefined(this.customCharacters[this.promptMask[i]])) {\n                    this.promptMask = this.promptMask.replace(new RegExp(this.promptMask[i], 'g'), this.promptChar);\n                }\n            }\n        }\n        let escapeNumber = 0;\n        if (this.hiddenMask.match(new RegExp(/\\\\/))) {\n            for (let i = 0; i < this.hiddenMask.length; i++) {\n                let j = 0;\n                if (i >= 1) {\n                    j = i;\n                }\n                escapeNumber = this.hiddenMask.length - this.promptMask.length;\n                j = j - escapeNumber;\n                if ((i > 0 && this.hiddenMask[i - 1] !== '\\\\') && (this.hiddenMask[i] === '>' ||\n                    this.hiddenMask[i] === '<' || this.hiddenMask[i] === '|')) {\n                    this.promptMask = this.promptMask.substring(0, j) +\n                        this.promptMask.substring((i + 1) - escapeNumber, this.promptMask.length);\n                    this.escapeMaskValue = this.escapeMaskValue.substring(0, j) +\n                        this.escapeMaskValue.substring((i + 1) - escapeNumber, this.escapeMaskValue.length);\n                }\n                if (this.hiddenMask[i] === '\\\\') {\n                    this.promptMask = this.promptMask.substring(0, j) + this.hiddenMask[i + 1] +\n                        this.promptMask.substring((i + 2) - escapeNumber, this.promptMask.length);\n                    this.escapeMaskValue = this.escapeMaskValue.substring(0, j) + this.escapeMaskValue[i + 1] +\n                        this.escapeMaskValue.substring((i + 2) - escapeNumber, this.escapeMaskValue.length);\n                }\n            }\n        }\n        else {\n            this.promptMask = this.promptMask.replace(/[>|<]/g, '');\n            this.escapeMaskValue = this.hiddenMask.replace(/[>|<]/g, '');\n        }\n        attributes(this.element, { 'aria-invalid': 'false' });\n    }\n}\n/**\n * @hidden\n * Apply mask ability with masking elements to the MaskedTextBox.\n */\nfunction applyMask() {\n    setElementValue.call(this, this.promptMask);\n    setMaskValue.call(this, this.value);\n}\n/**\n * @hidden\n * To wire required events to the MaskedTextBox.\n */\nfunction wireEvents() {\n    EventHandler.add(this.element, 'keydown', maskInputKeyDownHandler, this);\n    EventHandler.add(this.element, 'keypress', maskInputKeyPressHandler, this);\n    EventHandler.add(this.element, 'keyup', maskInputKeyUpHandler, this);\n    EventHandler.add(this.element, 'input', maskInputHandler, this);\n    EventHandler.add(this.element, 'focus', maskInputFocusHandler, this);\n    EventHandler.add(this.element, 'blur', maskInputBlurHandler, this);\n    EventHandler.add(this.element, 'paste', maskInputPasteHandler, this);\n    EventHandler.add(this.element, 'cut', maskInputCutHandler, this);\n    EventHandler.add(this.element, 'drop', maskInputDropHandler, this);\n    if (this.enabled) {\n        bindClearEvent.call(this);\n        if (this.formElement) {\n            EventHandler.add(this.formElement, 'reset', resetFormHandler, this);\n        }\n    }\n}\n/**\n * @hidden\n * To unwire events attached to the MaskedTextBox.\n */\nfunction unwireEvents() {\n    EventHandler.remove(this.element, 'keydown', maskInputKeyDownHandler);\n    EventHandler.remove(this.element, 'keypress', maskInputKeyPressHandler);\n    EventHandler.remove(this.element, 'keyup', maskInputKeyUpHandler);\n    EventHandler.remove(this.element, 'input', maskInputHandler);\n    EventHandler.remove(this.element, 'focus', maskInputFocusHandler);\n    EventHandler.remove(this.element, 'blur', maskInputBlurHandler);\n    EventHandler.remove(this.element, 'paste', maskInputPasteHandler);\n    EventHandler.remove(this.element, 'cut', maskInputCutHandler);\n    if (this.formElement) {\n        EventHandler.remove(this.formElement, 'reset', resetFormHandler);\n    }\n}\n/**\n * @hidden\n * To bind required events to the MaskedTextBox clearButton.\n */\nfunction bindClearEvent() {\n    if (this.showClearButton) {\n        EventHandler.add(this.inputObj.clearButton, 'mousedown touchstart', resetHandler, this);\n    }\n}\nfunction resetHandler(e) {\n    e.preventDefault();\n    if (!this.inputObj.clearButton.classList.contains('e-clear-icon-hide')) {\n        clear.call(this, e);\n        this.value = '';\n    }\n}\nfunction clear(event) {\n    let value = this.element.value;\n    setElementValue.call(this, this.promptMask);\n    this.redoCollec.unshift({\n        value: this.promptMask, startIndex: this.element.selectionStart, endIndex: this.element.selectionEnd\n    });\n    triggerMaskChangeEvent.call(this, event, value);\n    this.element.setSelectionRange(0, 0);\n}\nfunction resetFormHandler() {\n    if (this.element.tagName === 'EJS-MASKEDTEXTBOX') {\n        setElementValue.call(this, this.promptMask);\n    }\n    else {\n        this.value = this.initInputValue;\n    }\n}\n/**\n * @hidden\n * To get masked value from the MaskedTextBox.\n */\nfunction unstrippedValue(element) {\n    return element.value;\n}\n/**\n * @hidden\n * To extract raw value from the MaskedTextBox.\n */\nfunction strippedValue(element, maskValues) {\n    let value = '';\n    let k = 0;\n    let checkMask = false;\n    let maskValue = (!isNullOrUndefined(maskValues)) ? maskValues : (!isNullOrUndefined(element) &&\n        !isNullOrUndefined(this)) ? element.value : maskValues;\n    if (maskValue !== this.promptMask) {\n        for (let i = 0; i < this.customRegExpCollec.length; i++) {\n            if (checkMask) {\n                checkMask = false;\n            }\n            if (this.customRegExpCollec[k] === '>' || this.customRegExpCollec[k] === '<' ||\n                this.customRegExpCollec[k] === '|' || this.customRegExpCollec[k] === '\\\\') {\n                --i;\n                checkMask = true;\n            }\n            if (!checkMask) {\n                if ((maskValue[i] !== this.promptChar) && (!isNullOrUndefined(this.customRegExpCollec[k]) &&\n                    ((this._callPasteHandler || !isNullOrUndefined(this.regExpCollec[this.customRegExpCollec[k]])) ||\n                        (this.customRegExpCollec[k].length > 2 && this.customRegExpCollec[k][0] === '[' &&\n                            this.customRegExpCollec[k][this.customRegExpCollec[k].length - 1] === ']') ||\n                        (!isNullOrUndefined(this.customCharacters) &&\n                            (!isNullOrUndefined(this.customCharacters[this.customRegExpCollec[k]]))))) && (maskValue !== '')) {\n                    value += maskValue[i];\n                }\n            }\n            ++k;\n        }\n    }\n    if (this.mask === null || this.mask === '' && this.value !== undefined) {\n        value = maskValue;\n    }\n    return value;\n}\nfunction pushIntoRegExpCollec(value) {\n    for (let k = 0; k < value.length; k++) {\n        this.hiddenMask += value[k];\n        if (value[k] !== '\\\\') {\n            this.customRegExpCollec.push(value[k]);\n        }\n    }\n}\nfunction maskInputFocusHandler(event) {\n    let eventArgs = {\n        selectionStart: 0,\n        event: event,\n        value: this.value,\n        maskedValue: this.element.value,\n        container: this.inputObj.container,\n        selectionEnd: (this.promptMask.length > 0) ? this.promptMask.length : this.element.value.length,\n    };\n    this.trigger('focus', eventArgs, (eventArgs) => {\n        if (this.mask) {\n            this.isFocus = true;\n            if (this.element.value === '') {\n                setElementValue.call(this, this.promptMask);\n            }\n            else {\n                setElementValue.call(this, this.element.value);\n            }\n            if (!Browser.isDevice && Browser.info.version === '11.0') {\n                this.element.setSelectionRange(eventArgs.selectionStart, eventArgs.selectionEnd);\n            }\n            else {\n                let delay = (Browser.isDevice && Browser.isIos) ? 450 : 0;\n                setTimeout(() => {\n                    this.element.setSelectionRange(eventArgs.selectionStart, eventArgs.selectionEnd);\n                }, delay);\n            }\n        }\n    });\n}\nfunction maskInputBlurHandler(event) {\n    this.blurEventArgs = {\n        event: event,\n        value: this.value,\n        maskedValue: this.element.value,\n        container: this.inputObj.container\n    };\n    this.trigger('blur', this.blurEventArgs);\n    if (this.mask) {\n        this.isFocus = false;\n        if (this.placeholder && this.element.value === this.promptMask && this.floatLabelType !== 'Always') {\n            setElementValue.call(this, '');\n            let labelElement = this.element.parentNode.querySelector('.e-float-text');\n            if (this.floatLabelType === 'Auto' && !isNullOrUndefined(labelElement) && labelElement.classList.contains(TOPLABEL)) {\n                removeClass([labelElement], TOPLABEL);\n            }\n        }\n    }\n}\nfunction maskInputPasteHandler(event) {\n    if (this.mask && !this.readonly) {\n        let sIndex = this.element.selectionStart;\n        let eIndex = this.element.selectionEnd;\n        let oldValue = this.element.value;\n        setElementValue.call(this, '');\n        this._callPasteHandler = true;\n        setTimeout(() => {\n            let value = this.element.value.replace(/ /g, '');\n            if (this.redoCollec.length > 0 && this.redoCollec[0].value === this.element.value) {\n                value = strippedValue.call(this, this.element);\n            }\n            setElementValue.call(this, oldValue);\n            this.element.selectionStart = sIndex;\n            this.element.selectionEnd = eIndex;\n            let i = 0;\n            this.maskKeyPress = true;\n            do {\n                validateValue.call(this, value[i], false, null);\n                ++i;\n            } while (i < value.length);\n            this.maskKeyPress = false;\n            this._callPasteHandler = false;\n            if (this.element.value === oldValue) {\n                let i = 0;\n                this.maskKeyPress = true;\n                do {\n                    validateValue.call(this, value[i], false, null);\n                    ++i;\n                } while (i < value.length);\n                this.maskKeyPress = false;\n            }\n            else {\n                triggerMaskChangeEvent.call(this, event, oldValue);\n            }\n        }, 1);\n    }\n}\nfunction maskInputCutHandler(event) {\n    if (this.mask && !this.readonly) {\n        let preValue = this.element.value;\n        let sIndex = this.element.selectionStart;\n        let eIndex = this.element.selectionEnd;\n        this.undoCollec.push({ value: this.element.value, startIndex: this.element.selectionStart, endIndex: this.element.selectionEnd });\n        let value = this.element.value.substring(0, sIndex) + this.promptMask.substring(sIndex, eIndex) +\n            this.element.value.substring(eIndex);\n        setTimeout(() => {\n            setElementValue.call(this, value);\n            this.element.selectionStart = this.element.selectionEnd = sIndex;\n            if (this.element.value !== preValue) {\n                triggerMaskChangeEvent.call(this, event, null);\n            }\n        }, 0);\n    }\n}\nfunction maskInputDropHandler(event) {\n    event.preventDefault();\n}\nfunction maskInputHandler(event) {\n    if (Browser.isIE === true && this.element.value === '' && this.floatLabelType === 'Never') {\n        return;\n    }\n    let eventArgs = { ctrlKey: false, keyCode: 229 };\n    // tslint:disable-next-line\n    extend(event, eventArgs);\n    if (this.mask) {\n        if (this.element.value === '') {\n            this.redoCollec.unshift({\n                value: this.promptMask, startIndex: this.element.selectionStart, endIndex: this.element.selectionEnd\n            });\n        }\n        if (this.element.value.length === 1) {\n            this.element.value = this.element.value + this.promptMask;\n            this.element.setSelectionRange(1, 1);\n        }\n        if (!this._callPasteHandler) {\n            removeMaskInputValues.call(this, event);\n        }\n        if (this.element.value.length > this.promptMask.length) {\n            let startIndex = this.element.selectionStart;\n            let addedValues = this.element.value.length - this.promptMask.length;\n            let value = this.element.value.substring(startIndex - addedValues, startIndex);\n            this.maskKeyPress = false;\n            let i = 0;\n            do {\n                validateValue.call(this, value[i], event.ctrlKey, event);\n                ++i;\n            } while (i < value.length);\n            if (this.element.value !== this.preEleVal) {\n                triggerMaskChangeEvent.call(this, event, null);\n            }\n        }\n        let val = strippedValue.call(this, this.element);\n        this.prevValue = val;\n        this.value = val;\n        if (val === '') {\n            setElementValue.call(this, this.promptMask);\n            this.element.setSelectionRange(0, 0);\n        }\n    }\n}\nfunction maskInputKeyDownHandler(event) {\n    if (this.mask && !this.readonly) {\n        if (event.keyCode !== 229) {\n            if (event.ctrlKey && (event.keyCode === 89 || event.keyCode === 90)) {\n                event.preventDefault();\n            }\n            removeMaskInputValues.call(this, event);\n        }\n        let startValue = this.element.value;\n        if (event.ctrlKey && (event.keyCode === 89 || event.keyCode === 90)) {\n            let collec;\n            if (event.keyCode === 90 && this.undoCollec.length > 0 && startValue !== this.undoCollec[this.undoCollec.length - 1].value) {\n                collec = this.undoCollec[this.undoCollec.length - 1];\n                this.redoCollec.unshift({\n                    value: this.element.value, startIndex: this.element.selectionStart,\n                    endIndex: this.element.selectionEnd\n                });\n                setElementValue.call(this, collec.value);\n                this.element.selectionStart = collec.startIndex;\n                this.element.selectionEnd = collec.endIndex;\n                this.undoCollec.splice(this.undoCollec.length - 1, 1);\n            }\n            else if (event.keyCode === 89 && this.redoCollec.length > 0 && startValue !== this.redoCollec[0].value) {\n                collec = this.redoCollec[0];\n                this.undoCollec.push({\n                    value: this.element.value, startIndex: this.element.selectionStart,\n                    endIndex: this.element.selectionEnd\n                });\n                setElementValue.call(this, collec.value);\n                this.element.selectionStart = collec.startIndex;\n                this.element.selectionEnd = collec.endIndex;\n                this.redoCollec.splice(0, 1);\n            }\n        }\n    }\n}\nfunction mobileRemoveFunction() {\n    let collec;\n    let sIndex = this.element.selectionStart;\n    let eIndex = this.element.selectionEnd;\n    if (this.redoCollec.length > 0) {\n        collec = this.redoCollec[0];\n        setElementValue.call(this, collec.value);\n        if ((collec.startIndex - sIndex) === 1) {\n            this.element.selectionStart = collec.startIndex;\n            this.element.selectionEnd = collec.endIndex;\n        }\n        else {\n            this.element.selectionStart = sIndex + 1;\n            this.element.selectionEnd = eIndex + 1;\n        }\n    }\n    else {\n        setElementValue.call(this, this.promptMask);\n        this.element.selectionStart = this.element.selectionEnd = sIndex;\n    }\n}\nfunction autoFillMaskInputValues(isRemove, oldEventVal, event) {\n    if (event.type === 'input') {\n        isRemove = false;\n        oldEventVal = this.element.value;\n        setElementValue.call(this, this.promptMask);\n        setMaskValue.call(this, oldEventVal);\n    }\n    return isRemove;\n}\nfunction removeMaskInputValues(event) {\n    let isRemove = false;\n    let oldEventVal;\n    let isDeleted = false;\n    if (this.element.value.length < this.promptMask.length) {\n        isRemove = true;\n        oldEventVal = this.element.value;\n        isRemove = autoFillMaskInputValues.call(this, isRemove, oldEventVal, event);\n        mobileRemoveFunction.call(this);\n    }\n    if (this.element.value.length >= this.promptMask.length && event.type === 'input') {\n        isRemove = autoFillMaskInputValues.call(this, isRemove, oldEventVal, event);\n    }\n    let initStartIndex = this.element.selectionStart;\n    let initEndIndex = this.element.selectionEnd;\n    let startIndex = this.element.selectionStart;\n    let endIndex = this.element.selectionEnd;\n    let maskValue = this.hiddenMask.replace(/[>|\\\\<]/g, '');\n    let curMask = maskValue[startIndex - 1];\n    let parentElement = this.element.parentNode;\n    if (isRemove || event.keyCode === 8 || event.keyCode === 46) {\n        this.undoCollec.push({ value: this.element.value, startIndex: this.element.selectionStart, endIndex: endIndex });\n        let multipleDel = false;\n        let preValue = this.element.value;\n        if (startIndex > 0 || ((event.keyCode === 8 || event.keyCode === 46) && startIndex < this.element.value.length\n            && ((this.element.selectionEnd - startIndex) !== this.element.value.length))) {\n            let index = startIndex;\n            if (startIndex !== endIndex) {\n                startIndex = endIndex;\n                if (event.keyCode === 46) {\n                    multipleDel = true;\n                }\n            }\n            else if (event.keyCode === 46) {\n                ++index;\n            }\n            else {\n                --index;\n            }\n            for (let k = startIndex; (event.keyCode === 8 || isRemove || multipleDel) ? k > index : k < index; (event.keyCode === 8 || isRemove || multipleDel) ? k-- : k++) {\n                for (let i = startIndex; (event.keyCode === 8 || isRemove || multipleDel) ? i > 0 : i < this.element.value.length; (event.keyCode === 8 || isRemove || multipleDel) ? i-- : i++) {\n                    let sIndex;\n                    if (((event.keyCode === 8 || multipleDel) && ((initStartIndex !== initEndIndex && initStartIndex !== startIndex) ||\n                        (initStartIndex === initEndIndex))) || isRemove) {\n                        curMask = maskValue[i - 1];\n                        sIndex = startIndex - 1;\n                    }\n                    else {\n                        curMask = maskValue[i];\n                        sIndex = startIndex;\n                        ++startIndex;\n                    }\n                    let oldValue = this.element.value[sIndex];\n                    if ((isNullOrUndefined(this.regExpCollec[curMask]) && (!isNullOrUndefined(this.customCharacters)\n                        && isNullOrUndefined(this.customCharacters[curMask]))\n                        && ((this.hiddenMask[sIndex] !== this.promptChar && this.customRegExpCollec[sIndex][0] !== '['\n                            && this.customRegExpCollec[sIndex][this.customRegExpCollec[sIndex].length - 1] !== ']')))\n                        || (this.promptMask[sIndex] !== this.promptChar && isNullOrUndefined(this.customCharacters))) {\n                        this.element.selectionStart = this.element.selectionEnd = sIndex;\n                        event.preventDefault();\n                        if (event.keyCode === 46 && !multipleDel) {\n                            ++this.element.selectionStart;\n                        }\n                    }\n                    else {\n                        let value = this.element.value;\n                        let prompt = this.promptChar;\n                        let elementValue = value.substring(0, sIndex) + prompt + value.substring(startIndex, value.length);\n                        setElementValue.call(this, elementValue);\n                        event.preventDefault();\n                        this.element.selectionStart = this.element.selectionEnd = sIndex;\n                        isDeleted = true;\n                    }\n                    startIndex = this.element.selectionStart;\n                    if ((!isDeleted && event.keyCode === 8) || multipleDel || (!isDeleted && !(event.keyCode === 46))) {\n                        sIndex = startIndex - 1;\n                    }\n                    else {\n                        sIndex = startIndex;\n                        isDeleted = false;\n                    }\n                    oldValue = this.element.value[sIndex];\n                    if (((initStartIndex !== initEndIndex) && (this.element.selectionStart === initStartIndex))\n                        || (this.promptMask[sIndex] === this.promptChar) || ((oldValue !== this.promptMask[sIndex]) &&\n                        (this.promptMask[sIndex] !== this.promptChar) && !isNullOrUndefined(this.customCharacters))) {\n                        break;\n                    }\n                }\n            }\n        }\n        if (this.element.selectionStart === 0 && (this.element.selectionEnd === this.element.value.length)) {\n            setElementValue.call(this, this.promptMask);\n            event.preventDefault();\n            this.element.selectionStart = this.element.selectionEnd = startIndex;\n        }\n        this.redoCollec.unshift({\n            value: this.element.value, startIndex: this.element.selectionStart,\n            endIndex: this.element.selectionEnd\n        });\n        if (this.element.value !== preValue) {\n            triggerMaskChangeEvent.call(this, event, oldEventVal);\n        }\n    }\n}\nfunction maskInputKeyPressHandler(event) {\n    if (this.mask && !this.readonly) {\n        let oldValue = this.element.value;\n        if ((!event.ctrlKey) || (event.ctrlKey && event.code !== 'KeyA' && event.code !== 'KeyY'\n            && event.code !== 'KeyZ' && event.code !== 'KeyX' && event.code !== 'KeyC' && event.code !== 'KeyV')) {\n            this.maskKeyPress = true;\n            let key = event.key;\n            if (key === 'Spacebar') {\n                key = String.fromCharCode(event.keyCode);\n            }\n            if (!key) {\n                this.isIosInvalid = true;\n                validateValue.call(this, String.fromCharCode(event.keyCode), event.ctrlKey, event);\n                event.preventDefault();\n                this.isIosInvalid = false;\n            }\n            else if (key && key.length === 1) {\n                validateValue.call(this, key, event.ctrlKey, event);\n                event.preventDefault();\n            }\n            if (event.keyCode === 32 && key === ' ' && this.promptChar === ' ') {\n                this.element.selectionStart = this.element.selectionEnd = this.element.selectionStart - key.length;\n            }\n        }\n        if (this.element.value !== oldValue) {\n            triggerMaskChangeEvent.call(this, event, oldValue);\n        }\n    }\n}\nfunction triggerMaskChangeEvent(event, oldValue) {\n    let prevOnChange = this.isProtectedOnChange;\n    if (!isNullOrUndefined(this.changeEventArgs) && !this.isInitial) {\n        let eventArgs = {};\n        this.changeEventArgs = { value: this.element.value, maskedValue: this.element.value, isInteraction: false, isInteracted: false };\n        if (this.mask) {\n            this.changeEventArgs.value = strippedValue.call(this, this.element);\n        }\n        if (!isNullOrUndefined(event)) {\n            this.changeEventArgs.isInteracted = true;\n            this.changeEventArgs.isInteraction = true;\n            this.changeEventArgs.event = event;\n        }\n        this.isProtectedOnChange = true;\n        this.value = this.changeEventArgs.value;\n        this.isProtectedOnChange = prevOnChange;\n        merge(eventArgs, this.changeEventArgs);\n        this.trigger('change', eventArgs);\n    }\n    this.preEleVal = this.element.value;\n    this.prevValue = strippedValue.call(this, this.element);\n    attributes(this.element, { 'aria-valuenow': this.element.value });\n}\nfunction maskInputKeyUpHandler(event) {\n    if (this.mask && !this.readonly) {\n        let collec;\n        if (!this.maskKeyPress && event.keyCode === 229) {\n            let oldEventVal;\n            if (this.element.value.length === 1) {\n                this.element.value = this.element.value + this.promptMask;\n                this.element.setSelectionRange(1, 1);\n            }\n            if (this.element.value.length > this.promptMask.length) {\n                let startIndex = this.element.selectionStart;\n                let addedValues = this.element.value.length - this.promptMask.length;\n                let val = this.element.value.substring(startIndex - addedValues, startIndex);\n                if (this.undoCollec.length > 0) {\n                    collec = this.undoCollec[this.undoCollec.length - 1];\n                    let startIndex = this.element.selectionStart;\n                    oldEventVal = collec.value;\n                    let oldVal = collec.value.substring(startIndex - addedValues, startIndex);\n                    collec = this.redoCollec[0];\n                    val = val.trim();\n                    let isSpace = Browser.isAndroid && val === '';\n                    if (!isSpace && oldVal !== val && collec.value.substring(startIndex - addedValues, startIndex) !== val) {\n                        validateValue.call(this, val, event.ctrlKey, event);\n                    }\n                    else if (isSpace) {\n                        preventUnsupportedValues.call(this, event, startIndex - 1, this.element.selectionEnd - 1, val, event.ctrlKey, false);\n                    }\n                }\n                else {\n                    oldEventVal = this.promptMask;\n                    validateValue.call(this, val, event.ctrlKey, event);\n                }\n                this.maskKeyPress = false;\n                triggerMaskChangeEvent.call(this, event, oldEventVal);\n            }\n        }\n        else {\n            removeMaskError.call(this);\n        }\n        let val = strippedValue.call(this, this.element);\n        if (!((this.element.selectionStart === 0) && (this.promptMask === this.element.value) && val === '')\n            || (val === '' && this.value !== val)) {\n            this.prevValue = val;\n            this.value = val;\n        }\n    }\n    else {\n        triggerMaskChangeEvent.call(this, event);\n    }\n    if (this.element.selectionStart === 0 && this.element.selectionEnd === 0) {\n        // tslint:disable-next-line\n        let temp = this.element;\n        setTimeout(() => {\n            temp.setSelectionRange(0, 0);\n        }, 0);\n    }\n}\nfunction mobileSwipeCheck(key) {\n    if (key.length > 1 && ((this.promptMask.length + key.length) < this.element.value.length)) {\n        let elementValue = this.redoCollec[0].value.substring(0, this.redoCollec[0].startIndex) + key +\n            this.redoCollec[0].value.substring(this.redoCollec[0].startIndex, this.redoCollec[0].value.length);\n        setElementValue.call(this, elementValue);\n        this.element.selectionStart = this.element.selectionEnd = this.redoCollec[0].startIndex + key.length;\n    }\n    this.element.selectionStart = this.element.selectionStart - key.length;\n    this.element.selectionEnd = this.element.selectionEnd - key.length;\n}\nfunction mobileValidation(key) {\n    if (!this.maskKeyPress) {\n        mobileSwipeCheck.call(this, key);\n    }\n}\nfunction validateValue(key, isCtrlKey, event) {\n    mobileValidation.call(this, key);\n    if (isNullOrUndefined(this) || isNullOrUndefined(key)) {\n        return;\n    }\n    let startIndex = this.element.selectionStart;\n    let initStartIndex = startIndex;\n    let endIndex = this.element.selectionEnd;\n    let curMask;\n    let allowText = false;\n    let value = this.element.value;\n    let eventOldVal;\n    let prevSupport = false;\n    let isEqualVal = false;\n    for (let k = 0; k < key.length; k++) {\n        let keyValue = key[k];\n        startIndex = this.element.selectionStart;\n        endIndex = this.element.selectionEnd;\n        if (!this.maskKeyPress && initStartIndex === startIndex) {\n            startIndex = startIndex + k;\n        }\n        if ((!this.maskKeyPress || startIndex < this.promptMask.length)) {\n            for (let i = startIndex; i < this.promptMask.length; i++) {\n                let maskValue = this.escapeMaskValue;\n                curMask = maskValue[startIndex];\n                if (this.hiddenMask[startIndex] === '\\\\' && this.hiddenMask[startIndex + 1] === key) {\n                    isEqualVal = true;\n                }\n                if ((isNullOrUndefined(this.regExpCollec[curMask]) && (isNullOrUndefined(this.customCharacters)\n                    || (!isNullOrUndefined(this.customCharacters) && isNullOrUndefined(this.customCharacters[curMask])))\n                    && ((this.hiddenMask[startIndex] !== this.promptChar && this.customRegExpCollec[startIndex][0] !== '['\n                        && this.customRegExpCollec[startIndex][this.customRegExpCollec[startIndex].length - 1] !== ']')))\n                    || ((this.promptMask[startIndex] !== this.promptChar) && isNullOrUndefined(this.customCharacters))\n                    || (this.promptChar === curMask && this.escapeMaskValue === this.mask)) {\n                    this.element.selectionStart = this.element.selectionEnd = startIndex + 1;\n                    startIndex = this.element.selectionStart;\n                    curMask = this.hiddenMask[startIndex];\n                }\n            }\n            if (!isNullOrUndefined(this.customCharacters) && !isNullOrUndefined(this.customCharacters[curMask])) {\n                let customValStr = this.customCharacters[curMask];\n                let customValArr = customValStr.split(',');\n                for (let i = 0; i < customValArr.length; i++) {\n                    if (keyValue.match(new RegExp('[' + customValArr[i] + ']'))) {\n                        allowText = true;\n                        break;\n                    }\n                }\n            }\n            else if (!isNullOrUndefined(this.regExpCollec[curMask]) && keyValue.match(new RegExp(this.regExpCollec[curMask]))\n                && this.promptMask[startIndex] === this.promptChar) {\n                allowText = true;\n            }\n            else if (this.promptMask[startIndex] === this.promptChar && this.customRegExpCollec[startIndex][0] === '['\n                && this.customRegExpCollec[startIndex][this.customRegExpCollec[startIndex].length - 1] === ']'\n                && keyValue.match(new RegExp(this.customRegExpCollec[startIndex]))) {\n                allowText = true;\n            }\n            if ((!this.maskKeyPress || startIndex < this.hiddenMask.length) && allowText) {\n                if (k === 0) {\n                    if (this.maskKeyPress) {\n                        this.undoCollec.push({ value: value, startIndex: startIndex, endIndex: startIndex });\n                    }\n                    else {\n                        let sIndex = this.element.selectionStart;\n                        let eIndex = this.element.selectionEnd;\n                        if (this.redoCollec.length > 0) {\n                            eventOldVal = this.redoCollec[0].value;\n                            setElementValue.call(this, eventOldVal);\n                            this.undoCollec.push(this.redoCollec[0]);\n                        }\n                        else {\n                            this.undoCollec.push({ value: this.promptMask, startIndex: startIndex, endIndex: startIndex });\n                            eventOldVal = this.promptMask;\n                            setElementValue.call(this, eventOldVal);\n                        }\n                        this.element.selectionStart = sIndex;\n                        this.element.selectionEnd = eIndex;\n                    }\n                }\n                startIndex = this.element.selectionStart;\n                applySupportedValues.call(this, event, startIndex, keyValue, eventOldVal, isEqualVal);\n                prevSupport = true;\n                if (k === key.length - 1) {\n                    this.redoCollec.unshift({\n                        value: this.element.value, startIndex: this.element.selectionStart, endIndex: this.element.selectionEnd\n                    });\n                }\n                allowText = false;\n            }\n            else {\n                startIndex = this.element.selectionStart;\n                preventUnsupportedValues.call(this, event, startIndex, initStartIndex, key, isCtrlKey, prevSupport);\n            }\n            if (k === key.length - 1 && !allowText) {\n                if (!Browser.isAndroid || (Browser.isAndroid && startIndex < this.promptMask.length)) {\n                    this.redoCollec.unshift({\n                        value: this.element.value, startIndex: this.element.selectionStart, endIndex: this.element.selectionEnd\n                    });\n                }\n            }\n        }\n        else {\n            if (key.length === 1 && !isCtrlKey && !isNullOrUndefined(event)) {\n                addMaskErrorClass.call(this);\n            }\n        }\n    }\n}\nfunction applySupportedValues(event, startIndex, keyValue, eventOldVal, isEqualVal) {\n    if (this.hiddenMask.length > this.promptMask.length) {\n        keyValue = changeToLowerUpperCase.call(this, keyValue, this.element.value);\n    }\n    if (!isEqualVal) {\n        let value = this.element.value;\n        let elementValue = value.substring(0, startIndex) + keyValue + value.substring(startIndex + 1, value.length);\n        setElementValue.call(this, elementValue);\n        this.element.selectionStart = this.element.selectionEnd = startIndex + 1;\n    }\n}\nfunction preventUnsupportedValues(event, sIdx, idx, key, ctrl, chkSupport) {\n    if (!this.maskKeyPress) {\n        let eventOldVal;\n        let value = this.element.value;\n        if (sIdx >= this.promptMask.length) {\n            setElementValue.call(this, value.substring(0, sIdx));\n        }\n        else {\n            if (idx === sIdx) {\n                setElementValue.call(this, value.substring(0, sIdx) + value.substring(sIdx + 1, value.length));\n            }\n            else {\n                if (this.promptMask.length === this.element.value.length) {\n                    setElementValue.call(this, value.substring(0, sIdx) + value.substring(sIdx, value.length));\n                }\n                else {\n                    setElementValue.call(this, value.substring(0, idx) + value.substring(idx + 1, value.length));\n                }\n            }\n            this.element.selectionStart = this.element.selectionEnd = (chkSupport ||\n                this.element.value[idx] !== this.promptChar) ? sIdx : idx;\n        }\n        eventOldVal = this.element.value;\n        addMaskErrorClass.call(this);\n    }\n    if (key.length === 1 && !ctrl && !isNullOrUndefined(event)) {\n        addMaskErrorClass.call(this);\n    }\n}\nfunction addMaskErrorClass() {\n    let parentElement = this.element.parentNode;\n    let timer = 200;\n    if (parentElement.classList.contains(INPUTGROUP) || parentElement.classList.contains(FLOATINPUT)) {\n        addClass([parentElement], ERROR$1);\n    }\n    else {\n        addClass([this.element], ERROR$1);\n    }\n    if (this.isIosInvalid === true) {\n        timer = 400;\n    }\n    attributes(this.element, { 'aria-invalid': 'true' });\n    setTimeout(() => {\n        if (!this.maskKeyPress) {\n            removeMaskError.call(this);\n        }\n    }, timer);\n}\nfunction removeMaskError() {\n    let parentElement = this.element.parentNode;\n    if (!isNullOrUndefined(parentElement)) {\n        removeClass([parentElement], ERROR$1);\n    }\n    removeClass([this.element], ERROR$1);\n    attributes(this.element, { 'aria-invalid': 'false' });\n}\n/**\n * @hidden\n * Validates user input using masking elements '<' , '>' and '|'.\n */\nfunction changeToLowerUpperCase(key, value) {\n    let promptMask;\n    let i;\n    let curVal = value;\n    let caseCount = 0;\n    for (i = 0; i < this.hiddenMask.length; i++) {\n        if (this.hiddenMask[i] === '\\\\') {\n            promptMask = curVal.substring(0, i) + '\\\\' + curVal.substring(i, curVal.length);\n        }\n        if (this.hiddenMask[i] === '>' || this.hiddenMask[i] === '<' || this.hiddenMask[i] === '|') {\n            if (this.hiddenMask[i] !== curVal[i]) {\n                promptMask = curVal.substring(0, i) + this.hiddenMask[i] + curVal.substring(i, curVal.length);\n            }\n            ++caseCount;\n        }\n        if (promptMask) {\n            if (((promptMask[i] === this.promptChar) && (i > this.element.selectionStart)) ||\n                (this.element.value.indexOf(this.promptChar) < 0 && (this.element.selectionStart + caseCount) === i)) {\n                caseCount = 0;\n                break;\n            }\n            curVal = promptMask;\n        }\n    }\n    while (i >= 0 && promptMask) {\n        if (i === 0 || promptMask[i - 1] !== '\\\\') {\n            let val = this.element.value;\n            if (promptMask[i] === '>') {\n                key = key.toUpperCase();\n                break;\n            }\n            else if (promptMask[i] === '<') {\n                key = key.toLowerCase();\n                break;\n            }\n            else if (promptMask[i] === '|') {\n                break;\n            }\n        }\n        --i;\n    }\n    return key;\n}\n/**\n * @hidden\n * To set updated values in the MaskedTextBox.\n */\nfunction setMaskValue(val) {\n    if (this.mask && val !== undefined && (this.prevValue === undefined || this.prevValue !== val)) {\n        this.maskKeyPress = true;\n        setElementValue.call(this, this.promptMask);\n        if (val !== '' && !(val === null && this.floatLabelType === 'Never' && this.placeholder)) {\n            this.element.selectionStart = 0;\n            this.element.selectionEnd = 0;\n        }\n        if (val !== null) {\n            for (let i = 0; i < val.length; i++) {\n                validateValue.call(this, val[i], false, null);\n            }\n        }\n        let newVal = strippedValue.call(this, this.element);\n        this.prevValue = newVal;\n        this.value = newVal;\n        triggerMaskChangeEvent.call(this, null, null);\n        this.maskKeyPress = false;\n        let labelElement = this.element.parentNode.querySelector('.e-float-text');\n        if (this.element.value === this.promptMask && this.floatLabelType === 'Auto' && this.placeholder &&\n            !isNullOrUndefined(labelElement) && labelElement.classList.contains(TOPLABEL) && !this.isFocus) {\n            removeClass([labelElement], TOPLABEL);\n            addClass([labelElement], BOTTOMLABEL);\n            setElementValue.call(this, '');\n        }\n    }\n    if (this.mask === null || this.mask === '' && this.value !== undefined) {\n        setElementValue.call(this, this.value);\n    }\n}\n/**\n * @hidden\n * To set updated values in the input element.\n */\nfunction setElementValue(val, element) {\n    if (!this.isFocus && this.floatLabelType === 'Auto' && this.placeholder && isNullOrUndefined(this.value)) {\n        val = '';\n    }\n    let value = strippedValue.call(this, (element ? element : this.element), val);\n    if (value === null || value === '') {\n        Input.setValue(val, (element ? element : this.element), this.floatLabelType, false);\n        if (this.showClearButton) {\n            this.inputObj.clearButton.classList.add('e-clear-icon-hide');\n        }\n    }\n    else {\n        Input.setValue(val, (element ? element : this.element), this.floatLabelType, this.showClearButton);\n    }\n}\n/**\n * @hidden\n * Provide mask support to input textbox through utility method.\n */\nfunction maskInput(args) {\n    let inputEle = getMaskInput(args);\n    applyMask.call(inputEle);\n    let val = strippedValue.call(this, this.element);\n    this.prevValue = val;\n    this.value = val;\n    if (args.mask) {\n        unwireEvents.call(inputEle);\n        wireEvents.call(inputEle);\n    }\n}\nfunction getMaskInput(args) {\n    addClass([args.element], UTILMASK);\n    let inputEle = {\n        element: args.element,\n        mask: args.mask,\n        promptMask: '',\n        hiddenMask: '',\n        escapeMaskValue: '',\n        promptChar: args.promptChar ? (args.promptChar.length > 1) ? args.promptChar = args.promptChar[0]\n            : args.promptChar : '_',\n        value: args.value ? args.value : null,\n        regExpCollec: regularExpressions,\n        customRegExpCollec: [],\n        customCharacters: args.customCharacters,\n        undoCollec: [],\n        redoCollec: [],\n        maskKeyPress: false,\n        prevValue: ''\n    };\n    createMask.call(inputEle);\n    return inputEle;\n}\n/**\n * @hidden\n * Gets raw value of the textbox which has been masked through utility method.\n */\nfunction getVal(args) {\n    return strippedValue.call(getUtilMaskEle(args), args.element);\n}\n/**\n * @hidden\n * Gets masked value of the textbox which has been masked through utility method.\n */\nfunction getMaskedVal(args) {\n    return unstrippedValue.call(getUtilMaskEle(args), args.element);\n}\nfunction getUtilMaskEle(args) {\n    let inputEle;\n    if (!isNullOrUndefined(args) && args.element.classList.contains(UTILMASK)) {\n        inputEle = getMaskInput(args);\n    }\n    return inputEle;\n}\n/**\n * @hidden\n * Arguments to perform undo and redo functionalities.\n */\nclass MaskUndo {\n}\n\n/**\n * MaskedTextbox base modules\n */\n\nvar __decorate$1 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nconst ROOT$1 = 'e-control-wrapper e-mask';\nconst INPUT = 'e-input';\nconst COMPONENT$1 = 'e-maskedtextbox';\nconst CONTROL$1 = 'e-control';\nconst MASKINPUT_FOCUS = 'e-input-focus';\nconst wrapperAttr = ['title', 'style', 'class'];\n/**\n * The MaskedTextBox allows the user to enter the valid input only based on the provided mask.\n * ```html\n * <input id=\"mask\" type=\"text\" />\n * ```\n * ```typescript\n * <script>\n * var maskObj = new MaskedTextBox({ mask: \"(999) 9999-999\" });\n * maskObj.appendTo('#mask');\n * </script>\n * ```\n */\nlet MaskedTextBox = class MaskedTextBox extends Component {\n    constructor(options, element) {\n        super(options, element);\n        this.initInputValue = '';\n        this.maskOptions = options;\n    }\n    /**\n     * Gets the component name\n     * @private\n     */\n    getModuleName() {\n        return 'maskedtextbox';\n    }\n    /**\n     * Initializes the event handler\n     * @private\n     */\n    preRender() {\n        this.promptMask = '';\n        this.hiddenMask = '';\n        this.escapeMaskValue = '';\n        this.regExpCollec = regularExpressions;\n        this.customRegExpCollec = [];\n        this.undoCollec = [];\n        this.redoCollec = [];\n        this.changeEventArgs = {};\n        this.focusEventArgs = {};\n        this.blurEventArgs = {};\n        this.maskKeyPress = false;\n        this.isFocus = false;\n        this.isInitial = false;\n        this.isIosInvalid = false;\n        let ejInstance = getValue('ej2_instances', this.element);\n        this.cloneElement = this.element.cloneNode(true);\n        removeClass([this.cloneElement], [CONTROL$1, COMPONENT$1, 'e-lib']);\n        this.angularTagName = null;\n        this.formElement = closest(this.element, 'form');\n        if (this.element.tagName === 'EJS-MASKEDTEXTBOX') {\n            this.angularTagName = this.element.tagName;\n            let input = this.createElement('input');\n            for (let i = 0; i < this.element.attributes.length; i++) {\n                input.setAttribute(this.element.attributes[i].nodeName, this.element.attributes[i].nodeValue);\n                input.innerHTML = this.element.innerHTML;\n            }\n            if (this.element.hasAttribute('id')) {\n                this.element.removeAttribute('id');\n            }\n            this.element.classList.remove('e-control', 'e-maskedtextbox');\n            this.element.classList.add('e-mask-container');\n            this.element.appendChild(input);\n            this.element = input;\n            setValue('ej2_instances', ejInstance, this.element);\n        }\n        this.updateHTMLAttrToElement();\n        this.checkHtmlAttributes(false);\n        if (this.formElement) {\n            this.initInputValue = this.value;\n        }\n    }\n    /**\n     * Gets the properties to be maintained in the persisted state.\n     * @return {string}\n     */\n    getPersistData() {\n        let keyEntity = ['value'];\n        return this.addOnPersist(keyEntity);\n    }\n    /**\n     * Initializes the component rendering.\n     * @private\n     */\n    render() {\n        if (this.element.tagName.toLowerCase() === 'input') {\n            if (this.floatLabelType === 'Never') {\n                addClass([this.element], INPUT);\n            }\n            this.createWrapper();\n            this.updateHTMLAttrToWrapper();\n            if (this.element.name === '') {\n                this.element.setAttribute('name', this.element.id);\n            }\n            this.isInitial = true;\n            this.resetMaskedTextBox();\n            this.isInitial = false;\n            this.setMaskPlaceholder(true, false);\n            this.setWidth(this.width);\n            this.preEleVal = this.element.value;\n            if (!Browser.isDevice && (Browser.info.version === '11.0' || Browser.info.name === 'edge')) {\n                this.element.blur();\n            }\n            if (Browser.isDevice && Browser.isIos) {\n                this.element.blur();\n            }\n            if (this.element.getAttribute('value') || this.value) {\n                this.element.setAttribute('value', this.element.value);\n            }\n            this.renderComplete();\n        }\n    }\n    updateHTMLAttrToElement() {\n        if (!isNullOrUndefined(this.htmlAttributes)) {\n            for (let key of Object.keys(this.htmlAttributes)) {\n                if (wrapperAttr.indexOf(key) < 0) {\n                    this.element.setAttribute(key, this.htmlAttributes[key]);\n                }\n            }\n        }\n    }\n    updateCssClass(newClass, oldClass) {\n        Input.setCssClass(this.getValidClassList(newClass), [this.inputObj.container], this.getValidClassList(oldClass));\n    }\n    getValidClassList(maskClassName) {\n        let result = maskClassName;\n        if (!isNullOrUndefined(maskClassName) && maskClassName !== '') {\n            result = (maskClassName.replace(/\\s+/g, ' ')).trim();\n        }\n        return result;\n    }\n    updateHTMLAttrToWrapper() {\n        if (!isNullOrUndefined(this.htmlAttributes)) {\n            for (let key of Object.keys(this.htmlAttributes)) {\n                if (wrapperAttr.indexOf(key) > -1) {\n                    if (key === 'class') {\n                        let updatedClassValues = (this.htmlAttributes[key].replace(/\\s+/g, ' ')).trim();\n                        if (updatedClassValues !== '') {\n                            addClass([this.inputObj.container], updatedClassValues.split(' '));\n                        }\n                    }\n                    else if (key === 'style') {\n                        let maskStyle = this.inputObj.container.getAttribute(key);\n                        maskStyle = !isNullOrUndefined(maskStyle) ? (maskStyle + this.htmlAttributes[key]) :\n                            this.htmlAttributes[key];\n                        this.inputObj.container.setAttribute(key, maskStyle);\n                    }\n                    else {\n                        this.inputObj.container.setAttribute(key, this.htmlAttributes[key]);\n                    }\n                }\n            }\n        }\n    }\n    resetMaskedTextBox() {\n        this.promptMask = '';\n        this.hiddenMask = '';\n        this.escapeMaskValue = '';\n        this.customRegExpCollec = [];\n        this.undoCollec = [];\n        this.redoCollec = [];\n        if (this.promptChar.length > 1) {\n            this.promptChar = this.promptChar[0];\n        }\n        createMask.call(this);\n        applyMask.call(this);\n        if (this.mask === null || this.mask === '' && this.value !== undefined) {\n            setElementValue.call(this, this.value);\n        }\n        let val = strippedValue.call(this, this.element);\n        this.prevValue = val;\n        this.value = val;\n        if (!this.isInitial) {\n            unwireEvents.call(this);\n        }\n        wireEvents.call(this);\n    }\n    setMaskPlaceholder(setVal, dynamicPlaceholder) {\n        if (dynamicPlaceholder || this.placeholder) {\n            Input.setPlaceholder(this.placeholder, this.element);\n            if (this.element.value === this.promptMask && setVal && this.floatLabelType !== 'Always') {\n                setElementValue.call(this, '');\n            }\n            if (this.floatLabelType === 'Never') {\n                maskInputBlurHandler.call(this);\n            }\n        }\n    }\n    setWidth(width) {\n        if (!isNullOrUndefined(width)) {\n            if (typeof width === 'number') {\n                this.inputObj.container.style.width = formatUnit(width);\n                this.element.style.width = formatUnit(width);\n            }\n            else if (typeof width === 'string') {\n                let elementWidth = (width.match(/px|%|em/)) ? (width) : (formatUnit(width));\n                this.inputObj.container.style.width = elementWidth;\n                this.element.style.width = elementWidth;\n            }\n        }\n    }\n    checkHtmlAttributes(isDynamic) {\n        let attributes$$1 = isDynamic ? isNullOrUndefined(this.htmlAttributes) ? [] : Object.keys(this.htmlAttributes)\n            : ['placeholder', 'disabled', 'value', 'readonly'];\n        for (let key of attributes$$1) {\n            if (!isNullOrUndefined(this.element.getAttribute(key))) {\n                switch (key) {\n                    case 'placeholder':\n                        // tslint:disable-next-line\n                        if ((isNullOrUndefined(this.maskOptions) || (this.maskOptions['placeholder'] === undefined)) || isDynamic) {\n                            this.setProperties({ placeholder: this.element.placeholder }, !isDynamic);\n                        }\n                        break;\n                    case 'disabled':\n                        // tslint:disable-next-line\n                        if ((isNullOrUndefined(this.maskOptions) || (this.maskOptions['enabled'] === undefined)) || isDynamic) {\n                            let enabled = this.element.getAttribute(key) === 'disabled' || this.element.getAttribute(key) === '' ||\n                                this.element.getAttribute(key) === 'true' ? false : true;\n                            this.setProperties({ enabled: enabled }, !isDynamic);\n                        }\n                        break;\n                    case 'value':\n                        // tslint:disable-next-line\n                        if ((isNullOrUndefined(this.maskOptions) || (this.maskOptions['value'] === undefined)) || isDynamic) {\n                            this.setProperties({ value: this.element.value }, !isDynamic);\n                        }\n                        break;\n                    case 'readonly':\n                        // tslint:disable-next-line\n                        if ((isNullOrUndefined(this.maskOptions) || (this.maskOptions['readonly'] === undefined)) || isDynamic) {\n                            let readonly = this.element.getAttribute(key) === 'readonly' || this.element.getAttribute(key) === ''\n                                || this.element.getAttribute(key) === 'true' ? true : false;\n                            this.setProperties({ readonly: readonly }, !isDynamic);\n                        }\n                        break;\n                }\n            }\n        }\n    }\n    createWrapper() {\n        let updatedCssClassValues = this.cssClass;\n        if (!isNullOrUndefined(this.cssClass) && this.cssClass !== '') {\n            updatedCssClassValues = this.getValidClassList(this.cssClass);\n        }\n        this.inputObj = Input.createInput({\n            element: this.element,\n            floatLabelType: this.floatLabelType,\n            properties: {\n                enableRtl: this.enableRtl,\n                cssClass: updatedCssClassValues,\n                enabled: this.enabled,\n                readonly: this.readonly,\n                placeholder: this.placeholder,\n                showClearButton: this.showClearButton\n            }\n        }, this.createElement);\n        this.inputObj.container.setAttribute('class', ROOT$1 + ' ' + this.inputObj.container.getAttribute('class'));\n    }\n    /**\n     * Calls internally if any of the property value is changed.\n     * @hidden\n     */\n    onPropertyChanged(newProp, oldProp) {\n        for (let prop of Object.keys(newProp)) {\n            switch (prop) {\n                case 'value':\n                    setMaskValue.call(this, this.value);\n                    if (this.placeholder) {\n                        this.setMaskPlaceholder(false, false);\n                    }\n                    break;\n                case 'placeholder':\n                    this.setMaskPlaceholder(true, true);\n                    break;\n                case 'width':\n                    this.setWidth(newProp.width);\n                    break;\n                case 'cssClass':\n                    this.updateCssClass(newProp.cssClass, oldProp.cssClass);\n                    break;\n                case 'enabled':\n                    Input.setEnabled(newProp.enabled, this.element, this.floatLabelType, this.inputObj.container);\n                    break;\n                case 'readonly':\n                    Input.setReadonly(newProp.readonly, this.element);\n                    break;\n                case 'enableRtl':\n                    Input.setEnableRtl(newProp.enableRtl, [this.inputObj.container]);\n                    break;\n                case 'customCharacters':\n                    this.customCharacters = newProp.customCharacters;\n                    this.resetMaskedTextBox();\n                    break;\n                case 'showClearButton':\n                    Input.setClearButton(newProp.showClearButton, this.element, this.inputObj, undefined, this.createElement);\n                    bindClearEvent.call(this);\n                    break;\n                case 'floatLabelType':\n                    this.floatLabelType = newProp.floatLabelType;\n                    Input.removeFloating(this.inputObj);\n                    Input.addFloating(this.element, this.floatLabelType, this.placeholder, this.createElement);\n                    break;\n                case 'htmlAttributes':\n                    this.updateHTMLAttrToElement();\n                    this.updateHTMLAttrToWrapper();\n                    this.checkHtmlAttributes(true);\n                    break;\n                case 'mask':\n                    let strippedValue$$1 = this.value;\n                    this.mask = newProp.mask;\n                    this.updateValue(strippedValue$$1);\n                    break;\n                case 'promptChar':\n                    if (newProp.promptChar.length > 1) {\n                        newProp.promptChar = newProp.promptChar[0];\n                    }\n                    if (newProp.promptChar) {\n                        this.promptChar = newProp.promptChar;\n                    }\n                    else {\n                        this.promptChar = '_';\n                    }\n                    let value = this.element.value.replace(new RegExp('[' + oldProp.promptChar + ']', 'g'), this.promptChar);\n                    if (this.promptMask === this.element.value) {\n                        value = this.promptMask.replace(new RegExp('[' + oldProp.promptChar + ']', 'g'), this.promptChar);\n                    }\n                    this.promptMask = this.promptMask.replace(new RegExp('[' + oldProp.promptChar + ']', 'g'), this.promptChar);\n                    this.undoCollec = this.redoCollec = [];\n                    setElementValue.call(this, value);\n                    break;\n            }\n        }\n    }\n    updateValue(strippedVal) {\n        this.resetMaskedTextBox();\n        setMaskValue.call(this, strippedVal);\n    }\n    /**\n     * Gets the value of the MaskedTextBox with the masked format.\n     * By using `value` property, you can get the raw value of maskedtextbox without literals and prompt characters.\n     * @return {string}\n     */\n    getMaskedValue() {\n        return unstrippedValue.call(this, this.element);\n    }\n    /**\n     * Sets the focus to widget for interaction.\n     * @returns void\n     */\n    focusIn() {\n        if (document.activeElement !== this.element && this.enabled) {\n            this.element.focus();\n            addClass([this.inputObj.container], [MASKINPUT_FOCUS]);\n        }\n    }\n    /**\n     * Remove the focus from widget, if the widget is in focus state.\n     * @returns void\n     */\n    focusOut() {\n        if (document.activeElement === this.element && this.enabled) {\n            this.element.blur();\n            removeClass([this.inputObj.container], [MASKINPUT_FOCUS]);\n        }\n    }\n    /**\n     * Removes the component from the DOM and detaches all its related event handlers.\n     * Also it maintains the initial input element from the DOM.\n     * @method destroy\n     * @return {void}\n     */\n    destroy() {\n        unwireEvents.call(this);\n        let attrArray = ['aria-labelledby', 'role', 'autocomplete', 'aria-readonly',\n            'autocorrect', 'aria-disabled', 'aria-placeholder', 'autocapitalize',\n            'spellcheck', 'aria-autocomplete',\n            'aria-live', 'aria-valuenow', 'aria-invalid'];\n        for (let i = 0; i < attrArray.length; i++) {\n            this.element.removeAttribute(attrArray[i]);\n        }\n        this.element.classList.remove('e-input');\n        this.inputObj.container.insertAdjacentElement('afterend', this.element);\n        detach(this.inputObj.container);\n        super.destroy();\n    }\n};\n__decorate$1([\n    Property(null)\n], MaskedTextBox.prototype, \"cssClass\", void 0);\n__decorate$1([\n    Property(null)\n], MaskedTextBox.prototype, \"width\", void 0);\n__decorate$1([\n    Property(null)\n], MaskedTextBox.prototype, \"placeholder\", void 0);\n__decorate$1([\n    Property('Never')\n], MaskedTextBox.prototype, \"floatLabelType\", void 0);\n__decorate$1([\n    Property({})\n], MaskedTextBox.prototype, \"htmlAttributes\", void 0);\n__decorate$1([\n    Property(true)\n], MaskedTextBox.prototype, \"enabled\", void 0);\n__decorate$1([\n    Property(false)\n], MaskedTextBox.prototype, \"readonly\", void 0);\n__decorate$1([\n    Property(false)\n], MaskedTextBox.prototype, \"showClearButton\", void 0);\n__decorate$1([\n    Property(false)\n], MaskedTextBox.prototype, \"enablePersistence\", void 0);\n__decorate$1([\n    Property(null)\n], MaskedTextBox.prototype, \"mask\", void 0);\n__decorate$1([\n    Property('_')\n], MaskedTextBox.prototype, \"promptChar\", void 0);\n__decorate$1([\n    Property(null)\n], MaskedTextBox.prototype, \"value\", void 0);\n__decorate$1([\n    Property(null)\n], MaskedTextBox.prototype, \"customCharacters\", void 0);\n__decorate$1([\n    Event()\n], MaskedTextBox.prototype, \"created\", void 0);\n__decorate$1([\n    Event()\n], MaskedTextBox.prototype, \"destroyed\", void 0);\n__decorate$1([\n    Event()\n], MaskedTextBox.prototype, \"change\", void 0);\n__decorate$1([\n    Event()\n], MaskedTextBox.prototype, \"focus\", void 0);\n__decorate$1([\n    Event()\n], MaskedTextBox.prototype, \"blur\", void 0);\nMaskedTextBox = __decorate$1([\n    NotifyPropertyChanges\n], MaskedTextBox);\n\n/**\n * MaskedTextbox modules\n */\n\n/**\n * MaskedTextbox modules\n */\n\n/**\n * Input box Component\n */\n\nvar __decorate$2 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n/**\n * Configures the ticks data of the Slider.\n */\nclass TicksData extends ChildProperty {\n}\n__decorate$2([\n    Property('None')\n], TicksData.prototype, \"placement\", void 0);\n__decorate$2([\n    Property(10)\n], TicksData.prototype, \"largeStep\", void 0);\n__decorate$2([\n    Property(1)\n], TicksData.prototype, \"smallStep\", void 0);\n__decorate$2([\n    Property(false)\n], TicksData.prototype, \"showSmallTicks\", void 0);\n__decorate$2([\n    Property(null)\n], TicksData.prototype, \"format\", void 0);\n/**\n * It illustrates the color track data in slider.\n * {% codeBlock src='slider/colorrange/index.md' %}{% endcodeBlock %}\n */\nclass ColorRangeData extends ChildProperty {\n}\n__decorate$2([\n    Property(null)\n], ColorRangeData.prototype, \"color\", void 0);\n__decorate$2([\n    Property(null)\n], ColorRangeData.prototype, \"start\", void 0);\n__decorate$2([\n    Property(null)\n], ColorRangeData.prototype, \"end\", void 0);\n/**\n * It illustrates the limit data in slider.\n * {% codeBlock src='slider/limits/index.md' %}{% endcodeBlock %}\n */\nclass LimitData extends ChildProperty {\n}\n__decorate$2([\n    Property(false)\n], LimitData.prototype, \"enabled\", void 0);\n__decorate$2([\n    Property(null)\n], LimitData.prototype, \"minStart\", void 0);\n__decorate$2([\n    Property(null)\n], LimitData.prototype, \"minEnd\", void 0);\n__decorate$2([\n    Property(null)\n], LimitData.prototype, \"maxStart\", void 0);\n__decorate$2([\n    Property(null)\n], LimitData.prototype, \"maxEnd\", void 0);\n__decorate$2([\n    Property(false)\n], LimitData.prototype, \"startHandleFixed\", void 0);\n__decorate$2([\n    Property(false)\n], LimitData.prototype, \"endHandleFixed\", void 0);\n/**\n * It illustrates the tooltip data in slider.\n */\nclass TooltipData extends ChildProperty {\n}\n__decorate$2([\n    Property('')\n], TooltipData.prototype, \"cssClass\", void 0);\n__decorate$2([\n    Property('Before')\n], TooltipData.prototype, \"placement\", void 0);\n__decorate$2([\n    Property('Focus')\n], TooltipData.prototype, \"showOn\", void 0);\n__decorate$2([\n    Property(false)\n], TooltipData.prototype, \"isVisible\", void 0);\n__decorate$2([\n    Property(null)\n], TooltipData.prototype, \"format\", void 0);\nconst bootstrapTooltipOffset = 6;\nconst bootstrap4TooltipOffset = 3;\nconst classNames = {\n    root: 'e-slider',\n    rtl: 'e-rtl',\n    sliderHiddenInput: 'e-slider-input',\n    controlWrapper: 'e-control-wrapper',\n    sliderHandle: 'e-handle',\n    rangeBar: 'e-range',\n    sliderButton: 'e-slider-button',\n    firstButton: 'e-first-button',\n    secondButton: 'e-second-button',\n    scale: 'e-scale',\n    tick: 'e-tick',\n    large: 'e-large',\n    tickValue: 'e-tick-value',\n    sliderTooltip: 'e-slider-tooltip',\n    sliderHover: 'e-slider-hover',\n    sliderFirstHandle: 'e-handle-first',\n    sliderSecondHandle: 'e-handle-second',\n    sliderDisabled: 'e-disabled',\n    sliderContainer: 'e-slider-container',\n    horizontalTooltipBefore: 'e-slider-horizontal-before',\n    horizontalTooltipAfter: 'e-slider-horizontal-after',\n    verticalTooltipBefore: 'e-slider-vertical-before',\n    verticalTooltipAfter: 'e-slider-vertical-after',\n    materialTooltip: 'e-material-tooltip',\n    materialTooltipOpen: 'e-material-tooltip-open',\n    materialTooltipActive: 'e-tooltip-active',\n    materialSlider: 'e-material-slider',\n    sliderTrack: 'e-slider-track',\n    sliderHorizantalColor: 'e-slider-horizantal-color',\n    sliderVerticalColor: 'e-slider-vertical-color',\n    sliderHandleFocused: 'e-handle-focused',\n    verticalSlider: 'e-vertical',\n    horizontalSlider: 'e-horizontal',\n    sliderHandleStart: 'e-handle-start',\n    sliderTooltipStart: 'e-material-tooltip-start',\n    sliderTabHandle: 'e-tab-handle',\n    sliderButtonIcon: 'e-button-icon',\n    sliderSmallSize: 'e-small-size',\n    sliderTickPosition: 'e-tick-pos',\n    sliderFirstTick: 'e-first-tick',\n    sliderLastTick: 'e-last-tick',\n    sliderButtonClass: 'e-slider-btn',\n    sliderTooltipWrapper: 'e-tooltip-wrap',\n    sliderTabTrack: 'e-tab-track',\n    sliderTabRange: 'e-tab-range',\n    sliderActiveHandle: 'e-handle-active',\n    sliderMaterialHandle: 'e-material-handle',\n    sliderMaterialRange: 'e-material-range',\n    sliderMaterialDefault: 'e-material-default',\n    materialTooltipShow: 'e-material-tooltip-show',\n    materialTooltipHide: 'e-material-tooltip-hide',\n    readonly: 'e-read-only',\n    limits: 'e-limits',\n    limitBarDefault: 'e-limit-bar',\n    limitBarFirst: 'e-limit-first',\n    limitBarSecond: 'e-limit-second',\n    dragHorizontal: 'e-drag-horizontal',\n    dragVertical: 'e-drag-vertical'\n};\n/**\n * The Slider component allows the user to select a value or range\n * of values in-between a min and max range, by dragging the handle over the slider bar.\n * ```html\n * <div id='slider'></div>\n * ```\n * ```typescript\n * <script>\n *   var sliderObj = new Slider({ value: 10 });\n *   sliderObj.appendTo('#slider');\n * </script>\n * ```\n */\nlet Slider = class Slider extends Component {\n    constructor(options, element) {\n        super(options, element);\n        this.horDir = 'left';\n        this.verDir = 'bottom';\n        this.transition = {\n            handle: 'left .4s cubic-bezier(.25, .8, .25, 1), right .4s cubic-bezier(.25, .8, .25, 1), ' +\n                'top .4s cubic-bezier(.25, .8, .25, 1) , bottom .4s cubic-bezier(.25, .8, .25, 1)',\n            rangeBar: 'all .4s cubic-bezier(.25, .8, .25, 1)'\n        };\n        this.transitionOnMaterialTooltip = {\n            handle: 'left 1ms ease-out, right 1ms ease-out, bottom 1ms ease-out, top 1ms ease-out',\n            rangeBar: 'left 1ms ease-out, right 1ms ease-out, bottom 1ms ease-out, width 1ms ease-out, height 1ms ease-out'\n        };\n        this.scaleTransform = 'transform .4s cubic-bezier(.25, .8, .25, 1)';\n        this.customAriaText = null;\n        this.drag = true;\n        this.initialTooltip = true;\n    }\n    preRender() {\n        let localeText = { incrementTitle: 'Increase', decrementTitle: 'Decrease' };\n        this.l10n = new L10n('slider', localeText, this.locale);\n        this.isElementFocused = false;\n        this.tickElementCollection = [];\n        this.tooltipFormatInfo = {};\n        this.ticksFormatInfo = {};\n        this.initCultureInfo();\n        this.initCultureFunc();\n        this.formChecker();\n    }\n    formChecker() {\n        const formElement = closest(this.element, 'form');\n        if (formElement) {\n            this.isForm = true;\n            // this condition needs to be checked, if the slider is going to be refreshed by `refresh()`\n            // then we need to revert the slider `value` back to `formResetValue` to preserve the initial value\n            if (!isNullOrUndefined(this.formResetValue)) {\n                this.setProperties({ 'value': this.formResetValue }, true);\n            }\n            this.formResetValue = this.value;\n            if (this.type === 'Range' &&\n                (isNullOrUndefined(this.formResetValue) || typeof (this.formResetValue) !== 'object')) {\n                this.formResetValue = [parseFloat(formatUnit(this.min)), parseFloat(formatUnit(this.max))];\n            }\n            else if (isNullOrUndefined(this.formResetValue)) {\n                this.formResetValue = parseFloat(formatUnit(this.min));\n            }\n            this.formElement = formElement;\n        }\n        else {\n            this.isForm = false;\n        }\n    }\n    initCultureFunc() {\n        this.internationalization = new Internationalization(this.locale);\n    }\n    initCultureInfo() {\n        this.tooltipFormatInfo.format = (!isNullOrUndefined(this.tooltip.format)) ? this.tooltip.format : null;\n        this.ticksFormatInfo.format = (!isNullOrUndefined(this.ticks.format)) ? this.ticks.format : null;\n    }\n    formatString(value, formatInfo) {\n        let formatValue = null;\n        let formatString = null;\n        if ((value || value === 0)) {\n            formatValue = this.formatNumber(value);\n            let numberOfDecimals = this.numberOfDecimals(value);\n            formatString = this.internationalization.getNumberFormat(formatInfo)(this.makeRoundNumber(value, numberOfDecimals));\n        }\n        return { elementVal: formatValue, formatString: formatString };\n    }\n    ;\n    formatNumber(value) {\n        let numberOfDecimals = this.numberOfDecimals(value);\n        return this.internationalization.getNumberFormat({\n            maximumFractionDigits: numberOfDecimals,\n            minimumFractionDigits: numberOfDecimals, useGrouping: false\n        })(value);\n    }\n    ;\n    numberOfDecimals(value) {\n        let decimalPart = value.toString().split('.')[1];\n        let numberOfDecimals = !decimalPart || !decimalPart.length ? 0 : decimalPart.length;\n        return numberOfDecimals;\n    }\n    makeRoundNumber(value, precision) {\n        let decimals = precision || 0;\n        return Number(value.toFixed(decimals));\n    }\n    ;\n    fractionalToInteger(value) {\n        value = (this.numberOfDecimals(value) === 0) ? Number(value).toFixed(this.noOfDecimals) : value;\n        let tens = 1;\n        for (let i = 0; i < this.noOfDecimals; i++) {\n            tens *= 10;\n        }\n        value = Number((value * tens).toFixed(0));\n        return value;\n    }\n    /**\n     * To Initialize the control rendering\n     * @private\n     */\n    render() {\n        if (!isBlazor() || !this.isServerRendered) {\n            this.initialize();\n        }\n        this.initRender();\n        this.wireEvents();\n        this.setZindex();\n        this.renderComplete();\n    }\n    initialize() {\n        addClass([this.element], classNames.root);\n        this.setCSSClass();\n    }\n    setElementWidth(width) {\n        if (!isNullOrUndefined(width)) {\n            if (typeof width === 'number') {\n                this.sliderContainer.style.width = formatUnit(width);\n            }\n            else if (typeof width === 'string') {\n                this.sliderContainer.style.width = (width.match(/px|%|em/)) ? (width) : (formatUnit(width));\n            }\n        }\n    }\n    setCSSClass(oldCSSClass) {\n        if (oldCSSClass) {\n            removeClass([this.element], oldCSSClass.split(' '));\n        }\n        if (this.cssClass) {\n            addClass([this.element], this.cssClass.split(' '));\n        }\n    }\n    setEnabled() {\n        if (!this.enabled) {\n            addClass([this.sliderContainer], [classNames.sliderDisabled]);\n            if (this.tooltip.isVisible && this.tooltipElement && this.tooltip.showOn === 'Always') {\n                this.tooltipElement.classList.add(classNames.sliderDisabled);\n            }\n            this.unwireEvents();\n        }\n        else {\n            removeClass([this.sliderContainer], [classNames.sliderDisabled]);\n            if (this.tooltip.isVisible && this.tooltipElement && this.tooltip.showOn === 'Always') {\n                this.tooltipElement.classList.remove(classNames.sliderDisabled);\n            }\n            this.wireEvents();\n        }\n    }\n    getTheme(container) {\n        let theme = window.getComputedStyle(container, ':after').getPropertyValue('content');\n        return theme.replace(/['\"]+/g, '');\n    }\n    /**\n     * Initialize the rendering\n     * @private\n     */\n    initRender() {\n        if (isBlazor() && this.isServerRendered) {\n            this.sliderContainer = this.element.parentElement;\n            this.sliderTrack = this.element.querySelector('.e-slider-track');\n            this.hiddenInput = this.element.parentElement.querySelector('.e-slider-input');\n        }\n        else {\n            this.sliderContainer = this.createElement('div', { className: classNames.sliderContainer + ' ' + classNames.controlWrapper });\n            this.element.parentNode.insertBefore(this.sliderContainer, this.element);\n            this.sliderContainer.appendChild(this.element);\n            this.sliderTrack = this.createElement('div', { className: classNames.sliderTrack });\n            this.element.appendChild(this.sliderTrack);\n        }\n        this.setElementWidth(this.width);\n        this.element.tabIndex = -1;\n        this.getThemeInitialization();\n        this.setHandler();\n        this.createRangeBar();\n        if (this.limits.enabled) {\n            this.createLimitBar();\n        }\n        if (!isBlazor() || !this.isServerRendered) {\n            this.setOrientClass();\n            this.hiddenInput = (this.createElement('input', {\n                attrs: {\n                    type: 'hidden', value: (isNullOrUndefined(this.value) ? this.min.toString() : this.value.toString()),\n                    name: this.element.getAttribute('name') || this.element.getAttribute('id') ||\n                        '_' + (Math.random() * 1000).toFixed(0) + 'slider', class: classNames.sliderHiddenInput\n                }\n            }));\n            this.hiddenInput.tabIndex = -1;\n            this.sliderContainer.appendChild(this.hiddenInput);\n        }\n        if (this.showButtons) {\n            this.setButtons();\n        }\n        this.setEnableRTL();\n        if (this.type === 'Range') {\n            this.rangeValueUpdate();\n        }\n        else {\n            this.value = isNullOrUndefined(this.value) ? parseFloat(formatUnit(this.min.toString())) : this.value;\n        }\n        this.previousVal = this.type !== 'Range' ? this.checkHandleValue(parseFloat(formatUnit(this.value.toString()))) :\n            [this.checkHandleValue(parseFloat(formatUnit(this.value[0].toString()))),\n                this.checkHandleValue(parseFloat(formatUnit(this.value[1].toString())))];\n        this.previousChanged = this.previousVal;\n        if (!isNullOrUndefined(this.element.hasAttribute('name'))) {\n            this.element.removeAttribute('name');\n        }\n        this.setValue();\n        if (this.limits.enabled) {\n            this.setLimitBar();\n        }\n        if (this.ticks.placement !== 'None') {\n            this.renderScale();\n        }\n        if (this.tooltip.isVisible) {\n            this.renderTooltip();\n        }\n        if (!isBlazor() || !this.isServerRendered) {\n            if (!this.enabled) {\n                addClass([this.sliderContainer], [classNames.sliderDisabled]);\n            }\n            else {\n                removeClass([this.sliderContainer], [classNames.sliderDisabled]);\n            }\n            if (this.readonly) {\n                addClass([this.sliderContainer], [classNames.readonly]);\n            }\n            else {\n                removeClass([this.sliderContainer], [classNames.readonly]);\n            }\n        }\n    }\n    getThemeInitialization() {\n        this.isMaterial = this.getTheme(this.sliderContainer) === 'material'\n            || this.getTheme(this.sliderContainer) === 'material-dark';\n        this.isBootstrap = this.getTheme(this.sliderContainer) === 'bootstrap'\n            || this.getTheme(this.sliderContainer) === 'bootstrap-dark';\n        this.isBootstrap4 = this.getTheme(this.sliderContainer) === 'bootstrap4';\n        this.isMaterialTooltip = this.isMaterial && this.type !== 'Range' && this.tooltip.isVisible;\n    }\n    createRangeBar() {\n        if (this.type !== 'Default') {\n            this.rangeBar = (this.createElement('div', { attrs: { class: classNames.rangeBar } }));\n            this.element.appendChild(this.rangeBar);\n            if (this.drag && this.type === 'Range') {\n                if (this.orientation === 'Horizontal') {\n                    this.rangeBar.classList.add(classNames.dragHorizontal);\n                }\n                else {\n                    this.rangeBar.classList.add(classNames.dragVertical);\n                }\n            }\n        }\n    }\n    createLimitBar() {\n        if (isBlazor() && this.isServerRendered) {\n            this.limitBarFirst = this.element.querySelectorAll('.e-limits')[0];\n            if (this.type === 'Range') {\n                this.limitBarSecond = this.element.querySelectorAll('.e-limit-second')[0];\n            }\n        }\n        else {\n            let firstElementClassName = this.type !== 'Range' ? classNames.limitBarDefault :\n                classNames.limitBarFirst;\n            firstElementClassName += ' ' + classNames.limits;\n            this.limitBarFirst = (this.createElement('div', {\n                attrs: { class: firstElementClassName }\n            }));\n            this.element.appendChild(this.limitBarFirst);\n            if (this.type === 'Range') {\n                this.limitBarSecond = (this.createElement('div', {\n                    attrs: {\n                        class: classNames.limitBarSecond + ' ' + classNames.limits\n                    }\n                }));\n                this.element.appendChild(this.limitBarSecond);\n            }\n        }\n    }\n    setOrientClass() {\n        if (this.orientation !== 'Vertical') {\n            this.sliderContainer.classList.remove(classNames.verticalSlider);\n            this.sliderContainer.classList.add(classNames.horizontalSlider);\n            this.firstHandle.setAttribute('aria-orientation', 'horizontal');\n            if (this.type === 'Range') {\n                this.secondHandle.setAttribute('aria-orientation', 'horizontal');\n            }\n        }\n        else {\n            this.sliderContainer.classList.remove(classNames.horizontalSlider);\n            this.sliderContainer.classList.add(classNames.verticalSlider);\n            this.firstHandle.setAttribute('aria-orientation', 'vertical');\n            if (this.type === 'Range') {\n                this.secondHandle.setAttribute('aria-orientation', 'vertical');\n            }\n        }\n    }\n    setAriaAttributes(element) {\n        let min = this.min;\n        let max = this.max;\n        if (!isNullOrUndefined(this.customValues) && this.customValues.length > 0) {\n            min = this.customValues[0];\n            max = this.customValues[this.customValues.length - 1];\n        }\n        if (this.type !== 'Range') {\n            attributes(element, {\n                'aria-valuemin': min.toString(), 'aria-valuemax': max.toString()\n            });\n        }\n        else {\n            let range = !isNullOrUndefined(this.customValues) && this.customValues.length > 0 ?\n                [[min.toString(), (this.customValues[this.value[1]]).toString()],\n                    [(this.customValues[this.value[0]]).toString(), max.toString()]] :\n                [[min.toString(), this.value[1].toString()], [this.value[0].toString(), max.toString()]];\n            range.forEach((range, index) => {\n                let element = index === 0 ? this.firstHandle : this.secondHandle;\n                if (element) {\n                    attributes(element, {\n                        'aria-valuemin': range[0], 'aria-valuemax': range[1]\n                    });\n                }\n            });\n        }\n    }\n    createSecondHandle() {\n        if (isBlazor() && this.isServerRendered) {\n            this.secondHandle = this.element.querySelector('.e-handle-second');\n        }\n        else {\n            this.secondHandle = this.createElement('div', {\n                attrs: {\n                    class: classNames.sliderHandle, 'role': 'slider', tabIndex: '0'\n                }\n            });\n            this.secondHandle.classList.add(classNames.sliderSecondHandle);\n            this.element.appendChild(this.secondHandle);\n        }\n    }\n    createFirstHandle() {\n        if (isBlazor() && this.isServerRendered) {\n            this.firstHandle = this.element.querySelector('.e-handle-first');\n        }\n        else {\n            this.firstHandle = this.createElement('div', {\n                attrs: {\n                    class: classNames.sliderHandle, 'role': 'slider', tabIndex: '0'\n                }\n            });\n            this.firstHandle.classList.add(classNames.sliderFirstHandle);\n            this.element.appendChild(this.firstHandle);\n        }\n        if (this.isMaterialTooltip) {\n            this.materialHandle = this.createElement('div', {\n                attrs: {\n                    class: classNames.sliderHandle + ' ' +\n                        classNames.sliderMaterialHandle\n                }\n            });\n            this.element.appendChild(this.materialHandle);\n        }\n    }\n    wireFirstHandleEvt(destroy) {\n        if (!destroy) {\n            EventHandler.add(this.firstHandle, 'mousedown touchstart', this.handleFocus, this);\n            EventHandler.add(this.firstHandle, 'transitionend', this.transitionEnd, this);\n            EventHandler.add(this.firstHandle, 'mouseenter touchenter', this.handleOver, this);\n            EventHandler.add(this.firstHandle, 'mouseleave touchend', this.handleLeave, this);\n        }\n        else {\n            EventHandler.remove(this.firstHandle, 'mousedown touchstart', this.handleFocus);\n            EventHandler.remove(this.firstHandle, 'transitionend', this.transitionEnd);\n            EventHandler.remove(this.firstHandle, 'mouseenter touchenter', this.handleOver);\n            EventHandler.remove(this.firstHandle, 'mouseleave touchend', this.handleLeave);\n        }\n    }\n    wireSecondHandleEvt(destroy) {\n        if (!destroy) {\n            EventHandler.add(this.secondHandle, 'mousedown touchstart', this.handleFocus, this);\n            EventHandler.add(this.secondHandle, 'transitionend', this.transitionEnd, this);\n            EventHandler.add(this.secondHandle, 'mouseenter touchenter', this.handleOver, this);\n            EventHandler.add(this.secondHandle, 'mouseleave touchend', this.handleLeave, this);\n        }\n        else {\n            EventHandler.remove(this.secondHandle, 'mousedown touchstart', this.handleFocus);\n            EventHandler.remove(this.secondHandle, 'transitionend', this.transitionEnd);\n            EventHandler.remove(this.secondHandle, 'mouseenter touchenter', this.handleOver);\n            EventHandler.remove(this.secondHandle, 'mouseleave touchend', this.handleLeave);\n        }\n    }\n    handleStart() {\n        if (this.type !== 'Range') {\n            this.firstHandle.classList[this.handlePos1 === 0 ? 'add' : 'remove'](classNames.sliderHandleStart);\n            if (this.isMaterialTooltip) {\n                this.materialHandle.classList[this.handlePos1 === 0 ? 'add' : 'remove'](classNames.sliderHandleStart);\n                if (this.tooltipElement) {\n                    this.tooltipElement.classList[this.handlePos1 === 0 ? 'add' : 'remove'](classNames.sliderTooltipStart);\n                }\n            }\n        }\n    }\n    transitionEnd(e) {\n        if (e.propertyName !== 'transform') {\n            this.handleStart();\n            this.getHandle().style.transition = 'none';\n            if (this.type !== 'Default') {\n                this.rangeBar.style.transition = 'none';\n            }\n            if (this.isMaterial && this.tooltip.isVisible && this.type === 'Default') {\n                this.tooltipElement.style.transition = this.transition.handle;\n            }\n            this.tooltipToggle(this.getHandle());\n            this.closeTooltip();\n        }\n    }\n    handleFocusOut() {\n        if (this.firstHandle.classList.contains(classNames.sliderHandleFocused)) {\n            this.firstHandle.classList.remove(classNames.sliderHandleFocused);\n        }\n        if (this.type === 'Range') {\n            if (this.secondHandle.classList.contains(classNames.sliderHandleFocused)) {\n                this.secondHandle.classList.remove(classNames.sliderHandleFocused);\n            }\n        }\n    }\n    handleFocus(e) {\n        this.focusSliderElement();\n        this.sliderBarClick(e);\n        if (e.currentTarget === this.firstHandle) {\n            this.firstHandle.classList.add(classNames.sliderHandleFocused);\n        }\n        else {\n            this.secondHandle.classList.add(classNames.sliderHandleFocused);\n        }\n        EventHandler.add(document, 'mousemove touchmove', this.sliderBarMove, this);\n        EventHandler.add(document, 'mouseup touchend', this.sliderBarUp, this);\n    }\n    handleOver(e) {\n        if (this.tooltip.isVisible && this.tooltip.showOn === 'Hover') {\n            this.tooltipToggle(e.currentTarget);\n        }\n    }\n    handleLeave(e) {\n        if (this.tooltip.isVisible && this.tooltip.showOn === 'Hover' &&\n            !e.currentTarget.classList.contains(classNames.sliderHandleFocused) &&\n            !e.currentTarget.classList.contains(classNames.sliderTabHandle)) {\n            this.closeTooltip();\n        }\n    }\n    setHandler() {\n        if (this.min > this.max) {\n            this.min = this.max;\n        }\n        this.createFirstHandle();\n        if (this.type === 'Range') {\n            this.createSecondHandle();\n        }\n    }\n    setEnableRTL() {\n        if (!isBlazor() || !this.isServerRendered) {\n            this.enableRtl && this.orientation !== 'Vertical' ? addClass([this.sliderContainer], classNames.rtl) :\n                removeClass([this.sliderContainer], classNames.rtl);\n            let preDir = (this.orientation !== 'Vertical') ? this.horDir : this.verDir;\n            if (this.enableRtl) {\n                this.horDir = 'right';\n                this.verDir = 'bottom';\n            }\n            else {\n                this.horDir = 'left';\n                this.verDir = 'bottom';\n            }\n            let currDir = (this.orientation !== 'Vertical') ? this.horDir : this.verDir;\n            if (preDir !== currDir) {\n                if (this.orientation === 'Horizontal') {\n                    setStyleAttribute(this.firstHandle, { 'right': '', 'left': 'auto' });\n                    if (this.type === 'Range') {\n                        setStyleAttribute(this.secondHandle, { 'top': '', 'left': 'auto' });\n                    }\n                }\n            }\n        }\n        this.setBarColor();\n    }\n    tooltipValue() {\n        let text;\n        let args = {\n            value: this.value,\n            text: ''\n        };\n        if (this.initialTooltip) {\n            this.initialTooltip = false;\n            if (isBlazor() && this.isServerRendered) {\n                args.text = this.formatContent(this.tooltipFormatInfo, false);\n            }\n            else {\n                this.setTooltipContent();\n                args.text = text = this.tooltipObj.content;\n            }\n            this.trigger('tooltipChange', args, (observedArgs) => {\n                this.addTooltipClass(observedArgs.text);\n                if (text !== observedArgs.text) {\n                    this.customAriaText = observedArgs.text;\n                    this.tooltipObj.content = observedArgs.text;\n                    this.setAriaAttrValue(this.firstHandle);\n                    if (this.type === 'Range') {\n                        this.setAriaAttrValue(this.secondHandle);\n                    }\n                }\n            });\n            if (this.isMaterialTooltip) {\n                this.setPreviousVal('change', this.value);\n            }\n        }\n    }\n    setTooltipContent() {\n        let content;\n        content = this.formatContent(this.tooltipFormatInfo, false);\n        this.tooltipObj.content = content;\n    }\n    formatContent(formatInfo, ariaContent) {\n        let content = '';\n        let handle1 = this.handleVal1;\n        let handle2 = this.handleVal2;\n        if (!isNullOrUndefined(this.customValues) && this.customValues.length > 0) {\n            handle1 = this.customValues[this.handleVal1];\n            handle2 = this.customValues[this.handleVal2];\n        }\n        if (!ariaContent) {\n            if (this.type === 'Range') {\n                if (this.enableRtl && this.orientation !== 'Vertical') {\n                    content = (!isNullOrUndefined(formatInfo.format)) ? (this.formatString(handle2, formatInfo)\n                        .formatString + ' - ' + this.formatString(handle1, formatInfo).formatString) :\n                        (handle2.toString() + ' - ' + handle1.toString());\n                }\n                else {\n                    content = (!isNullOrUndefined(formatInfo.format)) ? (this.formatString(handle1, formatInfo)\n                        .formatString + ' - ' + this.formatString(handle2, formatInfo).formatString) :\n                        (handle1.toString() + ' - ' + handle2.toString());\n                }\n            }\n            else {\n                if (!isNullOrUndefined(handle1)) {\n                    content = (!isNullOrUndefined(formatInfo.format)) ?\n                        this.formatString(handle1, formatInfo).formatString : handle1.toString();\n                }\n            }\n            return content;\n        }\n        else {\n            if (this.type === 'Range') {\n                if (this.enableRtl && this.orientation !== 'Vertical') {\n                    content = (!isNullOrUndefined(this.tooltip) && !isNullOrUndefined(this.tooltip.format)) ?\n                        (this.formatString(handle2, formatInfo).elementVal + ' - ' +\n                            this.formatString(handle1, formatInfo).elementVal) :\n                        (handle2.toString() + ' - ' + handle1.toString());\n                }\n                else {\n                    content = (!isNullOrUndefined(this.tooltip) && !isNullOrUndefined(this.tooltip.format)) ?\n                        (this.formatString(handle1, formatInfo).elementVal + ' - ' +\n                            this.formatString(handle2, formatInfo).elementVal) :\n                        (handle1.toString() + ' - ' + handle2.toString());\n                }\n            }\n            else {\n                if (!isNullOrUndefined(handle1)) {\n                    content = (!isNullOrUndefined(this.tooltip) && !isNullOrUndefined(this.tooltip.format)) ?\n                        this.formatString(handle1, formatInfo).elementVal : handle1.toString();\n                }\n            }\n            return content;\n        }\n    }\n    addTooltipClass(content) {\n        if (this.isMaterialTooltip) {\n            let count = content.toString().length;\n            if (!this.tooltipElement) {\n                let cssClass = count > 4 ? classNames.sliderMaterialRange : classNames.sliderMaterialDefault;\n                this.tooltipObj.cssClass = classNames.sliderTooltip + ' ' + cssClass;\n            }\n            else {\n                let cssClass = count > 4 ?\n                    { oldCss: classNames.sliderMaterialDefault, newCss: classNames.sliderMaterialRange } :\n                    { oldCss: classNames.sliderMaterialRange, newCss: classNames.sliderMaterialDefault };\n                this.tooltipElement.classList.remove(cssClass.oldCss);\n                if (!this.tooltipElement.classList.contains(cssClass.newCss)) {\n                    this.tooltipElement.classList.add(cssClass.newCss);\n                    this.tooltipElement.style.transform = count > 4 ? 'scale(1)' :\n                        this.getTooltipTransformProperties(this.previousTooltipClass).rotate;\n                }\n            }\n        }\n    }\n    tooltipPlacement() {\n        return this.orientation === 'Horizontal' ? (this.tooltip.placement === 'Before' ? 'TopCenter' : 'BottomCenter') :\n            (this.tooltip.placement === 'Before' ? 'LeftCenter' : 'RightCenter');\n    }\n    tooltipBeforeOpen(args) {\n        this.tooltipElement = args.element;\n        if (this.tooltip.cssClass) {\n            addClass([this.tooltipElement], this.tooltip.cssClass.split(' ').filter((css) => css));\n        }\n        args.target.removeAttribute('aria-describedby');\n        if (this.isMaterialTooltip) {\n            this.tooltipElement.firstElementChild.classList.add(classNames.materialTooltipHide);\n            this.handleStart();\n            this.setTooltipTransform();\n        }\n    }\n    tooltipCollision(position) {\n        if (this.isBootstrap || this.isBootstrap4 || (this.isMaterial && !this.isMaterialTooltip)) {\n            const tooltipOffsetValue = this.isBootstrap4 ? bootstrap4TooltipOffset : bootstrapTooltipOffset;\n            switch (position) {\n                case 'TopCenter':\n                    this.tooltipObj.setProperties({ 'offsetY': -(tooltipOffsetValue) }, false);\n                    break;\n                case 'BottomCenter':\n                    this.tooltipObj.setProperties({ 'offsetY': tooltipOffsetValue }, false);\n                    break;\n                case 'LeftCenter':\n                    this.tooltipObj.setProperties({ 'offsetX': -(tooltipOffsetValue) }, false);\n                    break;\n                case 'RightCenter':\n                    this.tooltipObj.setProperties({ 'offsetX': tooltipOffsetValue }, false);\n                    break;\n            }\n        }\n    }\n    materialTooltipEventCallBack(event) {\n        this.sliderBarClick(event);\n        EventHandler.add(document, 'mousemove touchmove', this.sliderBarMove, this);\n        EventHandler.add(document, 'mouseup touchend', this.sliderBarUp, this);\n    }\n    wireMaterialTooltipEvent(destroy) {\n        if (this.isMaterialTooltip) {\n            if (!destroy) {\n                EventHandler.add(this.tooltipElement, 'mousedown touchstart', this.materialTooltipEventCallBack, this);\n            }\n            else {\n                EventHandler.remove(this.tooltipElement, 'mousedown touchstart', this.materialTooltipEventCallBack);\n            }\n        }\n    }\n    tooltipPositionCalculation(position) {\n        let cssClass;\n        switch (position) {\n            case 'TopCenter':\n                cssClass = classNames.horizontalTooltipBefore;\n                break;\n            case 'BottomCenter':\n                cssClass = classNames.horizontalTooltipAfter;\n                break;\n            case 'LeftCenter':\n                cssClass = classNames.verticalTooltipBefore;\n                break;\n            case 'RightCenter':\n                cssClass = classNames.verticalTooltipAfter;\n                break;\n        }\n        return cssClass;\n    }\n    getTooltipTransformProperties(className) {\n        let transformProperties;\n        if (this.tooltipElement) {\n            let position = this.orientation === 'Horizontal' ?\n                ((this.tooltipElement.clientHeight + 14) - (this.tooltipElement.clientHeight / 2)) :\n                ((this.tooltipElement.clientWidth + 14) - (this.tooltipElement.clientWidth / 2));\n            transformProperties = this.orientation === 'Horizontal' ?\n                (className === classNames.horizontalTooltipBefore ? { rotate: 'rotate(45deg)', translate: `translateY(${position}px)` } :\n                    { rotate: 'rotate(225deg)', translate: `translateY(${-(position)}px)` }) :\n                (className === classNames.verticalTooltipBefore ? { rotate: 'rotate(-45deg)', translate: `translateX(${position}px)` } :\n                    { rotate: 'rotate(-225deg)', translate: `translateX(${(-position)}px)` });\n        }\n        return transformProperties;\n    }\n    openMaterialTooltip() {\n        if (this.isMaterialTooltip) {\n            this.refreshTooltip(this.firstHandle);\n            let tooltipContentElement = this.tooltipElement.firstElementChild;\n            tooltipContentElement.classList.remove(classNames.materialTooltipHide);\n            tooltipContentElement.classList.add(classNames.materialTooltipShow);\n            this.firstHandle.style.cursor = 'default';\n            this.tooltipElement.style.transition = this.scaleTransform;\n            this.tooltipElement.classList.add(classNames.materialTooltipOpen);\n            this.materialHandle.style.transform = 'scale(0)';\n            if (tooltipContentElement.innerText.length > 4) {\n                this.tooltipElement.style.transform = 'scale(1)';\n            }\n            else {\n                this.tooltipElement.style.transform = this.getTooltipTransformProperties(this.previousTooltipClass).rotate;\n            }\n            if (this.type === 'Default') {\n                setTimeout(() => { this.tooltipElement.style.transition = this.transition.handle; }, 2500);\n            }\n            else {\n                setTimeout(() => { this.tooltipElement.style.transition = 'none'; }, 2500);\n            }\n        }\n    }\n    closeMaterialTooltip() {\n        if (this.isMaterialTooltip) {\n            let tooltipContentElement = this.tooltipElement.firstElementChild;\n            this.tooltipElement.style.transition = this.scaleTransform;\n            tooltipContentElement.classList.remove(classNames.materialTooltipShow);\n            tooltipContentElement.classList.add(classNames.materialTooltipHide);\n            this.firstHandle.style.cursor = '-webkit-grab';\n            this.firstHandle.style.cursor = 'grab';\n            if (this.materialHandle) {\n                this.materialHandle.style.transform = 'scale(1)';\n            }\n            this.tooltipElement.classList.remove(classNames.materialTooltipOpen);\n            this.setTooltipTransform();\n            this.tooltipTarget = undefined;\n            setTimeout(() => { this.tooltipElement.style.transition = 'none'; }, 2500);\n        }\n    }\n    checkTooltipPosition(args) {\n        if (this.tooltipCollidedPosition === undefined ||\n            this.tooltipCollidedPosition !== args.collidedPosition) {\n            if (this.isMaterialTooltip) {\n                let tooltipClass = this.tooltipPositionCalculation(args.collidedPosition);\n                if (tooltipClass !== undefined) {\n                    args.element.classList.remove(this.previousTooltipClass);\n                    args.element.classList.add(tooltipClass);\n                    this.previousTooltipClass = tooltipClass;\n                }\n                if (args.element.style.transform && args.element.classList.contains(classNames.materialTooltipOpen) &&\n                    args.element.firstElementChild.innerText.length <= 4) {\n                    args.element.style.transform = this.getTooltipTransformProperties(this.previousTooltipClass).rotate;\n                }\n            }\n            this.tooltipCollidedPosition = args.collidedPosition;\n        }\n        if (this.isMaterialTooltip && this.tooltipElement && this.tooltipElement.style.transform.indexOf('translate') !== -1) {\n            this.setTooltipTransform();\n        }\n    }\n    setTooltipTransform() {\n        let transformProperties = this.getTooltipTransformProperties(this.previousTooltipClass);\n        if (this.tooltipElement.firstElementChild.innerText.length > 4) {\n            this.tooltipElement.style.transform = `${transformProperties.translate} scale(0.01)`;\n        }\n        else {\n            this.tooltipElement.style.transform = `${transformProperties.translate} ${transformProperties.rotate} scale(0.01)`;\n        }\n    }\n    renderTooltip() {\n        this.tooltipObj = new Tooltip({\n            showTipPointer: this.isBootstrap || this.isMaterial || this.isBootstrap4,\n            cssClass: classNames.sliderTooltip,\n            height: this.isMaterial ? 30 : 'auto',\n            animation: { open: { effect: 'None' }, close: { effect: 'FadeOut', duration: 500 } },\n            opensOn: 'Custom',\n            beforeOpen: this.tooltipBeforeOpen.bind(this),\n            beforeCollision: this.checkTooltipPosition.bind(this),\n            beforeClose: this.tooltipBeforeClose.bind(this),\n            enableHtmlSanitizer: this.enableHtmlSanitizer\n        });\n        this.tooltipObj.appendTo(this.firstHandle);\n        this.initializeTooltipProps();\n    }\n    initializeTooltipProps() {\n        let tooltipShowOn = this.isMaterialTooltip ? 'Always' : (this.tooltip.showOn === 'Auto' ? 'Hover' : this.tooltip.showOn);\n        this.setProperties({ tooltip: { showOn: tooltipShowOn } }, true);\n        this.tooltipObj.position = this.tooltipPlacement();\n        this.tooltipCollision(this.tooltipObj.position);\n        [this.firstHandle, this.rangeBar, this.secondHandle].forEach((handle) => {\n            if (!isNullOrUndefined(handle)) {\n                handle.style.transition = 'none';\n            }\n        });\n        if (this.isMaterialTooltip) {\n            this.sliderContainer.classList.add(classNames.materialSlider);\n            if (!isBlazor()) {\n                this.tooltipValue();\n            }\n            this.tooltipObj.animation.close.effect = 'None';\n            this.tooltipObj.open(this.firstHandle);\n        }\n    }\n    tooltipBeforeClose() {\n        this.tooltipElement = undefined;\n        this.tooltipCollidedPosition = undefined;\n    }\n    setButtons() {\n        if (isBlazor() && this.isServerRendered) {\n            this.firstBtn = this.element.parentElement.querySelector('.e-slider-button.e-first-button');\n            this.secondBtn = this.element.parentElement.querySelector('.e-slider-button.e-second-button');\n        }\n        else {\n            this.firstBtn = this.createElement('div', { className: classNames.sliderButton + ' ' + classNames.firstButton });\n            this.firstBtn.appendChild(this.createElement('span', { className: classNames.sliderButtonIcon }));\n            this.firstBtn.tabIndex = -1;\n            this.secondBtn = this.createElement('div', { className: classNames.sliderButton + ' ' + classNames.secondButton });\n            this.secondBtn.appendChild(this.createElement('span', { className: classNames.sliderButtonIcon }));\n            this.secondBtn.tabIndex = -1;\n            this.sliderContainer.classList.add(classNames.sliderButtonClass);\n            this.sliderContainer.appendChild(this.firstBtn);\n            this.sliderContainer.appendChild(this.secondBtn);\n            this.sliderContainer.appendChild(this.element);\n            this.buttonTitle();\n        }\n    }\n    buttonTitle() {\n        let enabledRTL = this.enableRtl && this.orientation !== 'Vertical';\n        this.l10n.setLocale(this.locale);\n        let decrementTitle = this.l10n.getConstant('decrementTitle');\n        let incrementTitle = this.l10n.getConstant('incrementTitle');\n        attributes(enabledRTL ? this.secondBtn : this.firstBtn, { 'aria-label': decrementTitle, title: decrementTitle });\n        attributes(enabledRTL ? this.firstBtn : this.secondBtn, { 'aria-label': incrementTitle, title: incrementTitle });\n    }\n    buttonFocusOut() {\n        if (this.isMaterial) {\n            this.getHandle().classList.remove('e-large-thumb-size');\n        }\n    }\n    repeatButton(args) {\n        let hVal = this.handleValueUpdate();\n        let enabledRTL = this.enableRtl && this.orientation !== 'Vertical';\n        let value;\n        if (args.target.parentElement.classList.contains(classNames.firstButton)\n            || args.target.classList.contains(classNames.firstButton)) {\n            enabledRTL ? (value = this.add(hVal, parseFloat(this.step.toString()), true)) :\n                (value = this.add(hVal, parseFloat(this.step.toString()), false));\n        }\n        else if (args.target.parentElement.classList.contains(classNames.secondButton)\n            || (args.target.classList.contains(classNames.secondButton))) {\n            enabledRTL ? (value = this.add(hVal, parseFloat(this.step.toString()), false)) :\n                (value = this.add(hVal, parseFloat(this.step.toString()), true));\n        }\n        if (this.limits.enabled) {\n            value = this.getLimitCorrectedValues(value);\n        }\n        if (value >= this.min && value <= this.max) {\n            this.changeHandleValue(value);\n            this.tooltipToggle(this.getHandle());\n        }\n    }\n    repeatHandlerMouse(args) {\n        args.preventDefault();\n        if (args.type === ('mousedown') || args.type === ('touchstart')) {\n            this.buttonClick(args);\n            this.repeatInterval = setInterval(this.repeatButton.bind(this), 180, args);\n        }\n    }\n    materialChange() {\n        if (!this.getHandle().classList.contains('e-large-thumb-size')) {\n            this.getHandle().classList.add('e-large-thumb-size');\n        }\n    }\n    repeatHandlerUp(e) {\n        this.changeEvent('changed', e);\n        this.closeTooltip();\n        clearInterval(this.repeatInterval);\n        this.getHandle().focus();\n    }\n    customTickCounter(bigNum) {\n        let tickCount = 4;\n        if (!isNullOrUndefined(this.customValues) && this.customValues.length > 0) {\n            if (bigNum > 4) {\n                tickCount = 3;\n            }\n            if (bigNum > 7) {\n                tickCount = 2;\n            }\n            if (bigNum > 14) {\n                tickCount = 1;\n            }\n            if (bigNum > 28) {\n                tickCount = 0;\n            }\n        }\n        return tickCount;\n    }\n    // tslint:disable-next-line:max-func-body-length\n    renderScale() {\n        let liElementPosition = 0;\n        let orien = this.orientation === 'Vertical' ? 'v' : 'h';\n        this.noOfDecimals = this.numberOfDecimals(this.step);\n        if (isBlazor() && this.isServerRendered) {\n            this.ul = this.element.querySelector('ul');\n        }\n        else {\n            this.ul = this.createElement('ul', {\n                className: classNames.scale + ' ' + 'e-' + orien + '-scale ' + classNames.tick + '-' + this.ticks.placement.toLowerCase(),\n                attrs: { role: 'presentation', tabIndex: '-1', 'aria-hidden': 'true' }\n            });\n        }\n        this.ul.style.zIndex = '-1';\n        if (Browser.isAndroid && orien === 'h') {\n            this.ul.classList.add(classNames.sliderTickPosition);\n        }\n        let smallStep = this.ticks.smallStep;\n        if (!this.ticks.showSmallTicks) {\n            this.ticks.largeStep > 0 ? (smallStep = this.ticks.largeStep) :\n                (smallStep = (parseFloat(formatUnit(this.max))) - (parseFloat(formatUnit(this.min))));\n        }\n        else if (smallStep <= 0) {\n            smallStep = parseFloat(formatUnit(this.step));\n        }\n        let min = this.fractionalToInteger(this.min);\n        let max = this.fractionalToInteger(this.max);\n        let steps = this.fractionalToInteger(smallStep);\n        let bigNum = !isNullOrUndefined(this.customValues) && this.customValues.length > 0 && this.customValues.length - 1;\n        let customStep = this.customTickCounter(bigNum);\n        let count = !isNullOrUndefined(this.customValues) && this.customValues.length > 0 ?\n            (bigNum * customStep) + bigNum : Math.abs((max - min) / steps);\n        if (!isBlazor() || !this.isServerRendered) {\n            this.element.appendChild(this.ul);\n        }\n        let li;\n        let start = parseFloat(this.min.toString());\n        if (orien === 'v') {\n            start = parseFloat(this.max.toString());\n        }\n        let left = 0;\n        let islargeTick;\n        let tickWidth = 100 / count;\n        if (tickWidth === Infinity) {\n            tickWidth = 5;\n        }\n        for (let i = 0, y = !isNullOrUndefined(this.customValues) && this.customValues.length > 0 ?\n            this.customValues.length - 1 : 0, k = 0; i <= count; i++) {\n            li = (this.createElement('li', {\n                attrs: {\n                    class: classNames.tick, role: 'presentation', tabIndex: '-1',\n                    'aria-hidden': 'true'\n                }\n            }));\n            if (!isNullOrUndefined(this.customValues) && this.customValues.length > 0) {\n                islargeTick = i % (customStep + 1) === 0;\n                if (islargeTick) {\n                    if (orien === 'h') {\n                        start = this.customValues[k];\n                        k++;\n                    }\n                    else {\n                        start = this.customValues[y];\n                        y--;\n                    }\n                    li.setAttribute('title', start.toString());\n                }\n            }\n            else {\n                li.setAttribute('title', start.toString());\n                if (this.numberOfDecimals(this.max) === 0 && this.numberOfDecimals(this.min) === 0 &&\n                    this.numberOfDecimals(this.step) === 0) {\n                    if (orien === 'h') {\n                        islargeTick = ((start - parseFloat(this.min.toString())) % this.ticks.largeStep === 0) ? true : false;\n                    }\n                    else {\n                        islargeTick = (Math.abs(start - parseFloat(this.max.toString())) % this.ticks.largeStep === 0) ? true : false;\n                    }\n                }\n                else {\n                    let largestep = this.fractionalToInteger(this.ticks.largeStep);\n                    let startValue = this.fractionalToInteger(start);\n                    if (orien === 'h') {\n                        islargeTick = ((startValue - min) % largestep === 0) ? true : false;\n                    }\n                    else {\n                        islargeTick = (Math.abs(startValue - parseFloat(max.toString())) % largestep === 0) ? true : false;\n                    }\n                }\n            }\n            if (islargeTick) {\n                li.classList.add(classNames.large);\n            }\n            (orien === 'h') ? (li.style.width = tickWidth + '%') : (li.style.height = tickWidth + '%');\n            let repeat = islargeTick ? (this.ticks.placement === 'Both' ? 2 : 1) : 0;\n            if (islargeTick) {\n                for (let j = 0; j < repeat; j++) {\n                    this.createTick(li, start, tickWidth);\n                }\n                if (isBlazor() && this.isServerRendered && isNullOrUndefined(this.customValues)) {\n                    this.updateTicksValues(start, this.ul.children[liElementPosition]);\n                    liElementPosition++;\n                }\n            }\n            else if (isNullOrUndefined(this.customValues)) {\n                this.formatTicksValue(li, start);\n                if (isBlazor() && this.isServerRendered && isNullOrUndefined(this.customValues)) {\n                    this.updateTicksValues(start, this.ul.children[liElementPosition]);\n                    liElementPosition++;\n                }\n            }\n            if (!isBlazor() || !this.isServerRendered) {\n                this.ul.appendChild(li);\n            }\n            this.tickElementCollection.push(li);\n            let decimalPoints;\n            if (isNullOrUndefined(this.customValues)) {\n                if (this.numberOfDecimals(smallStep) > this.numberOfDecimals(start)) {\n                    decimalPoints = this.numberOfDecimals(smallStep);\n                }\n                else {\n                    decimalPoints = this.numberOfDecimals(start);\n                }\n                if (orien === 'h') {\n                    start = this.makeRoundNumber(start + smallStep, decimalPoints);\n                }\n                else {\n                    start = this.makeRoundNumber(start - smallStep, decimalPoints);\n                }\n                left = this.makeRoundNumber(left + smallStep, decimalPoints);\n            }\n        }\n        this.ticksAlignment(orien, tickWidth);\n    }\n    updateTicksValues(start, liElement) {\n        if (liElement.childElementCount > 0) {\n            for (let i = 0; i < liElement.childElementCount; i++) {\n                this.blazortTicksValue(liElement, start, liElement.children[i]);\n            }\n        }\n        else {\n            this.blazortTicksValue(liElement, start, null);\n        }\n    }\n    blazortTicksValue(li, start, span) {\n        const tickText = this.formatNumber(start);\n        const text = !isNullOrUndefined(this.ticks) && !isNullOrUndefined(this.ticks.format) ?\n            this.formatString(start, this.ticksFormatInfo).formatString : tickText;\n        let eventArgs = { value: start, text: text, tickElement: li };\n        this.trigger('renderingTicks', eventArgs, (observedArgs) => {\n            li.setAttribute('title', observedArgs.text.toString());\n            if (span) {\n                if (this.enableHtmlSanitizer) {\n                    span.innerHTML = SanitizeHtmlHelper.sanitize(observedArgs.text.toString());\n                }\n                else {\n                    span.innerHTML = observedArgs.text.toString();\n                }\n            }\n        });\n    }\n    ticksAlignment(orien, tickWidth, triggerEvent = true) {\n        this.firstChild = this.ul.firstElementChild;\n        this.lastChild = this.ul.lastElementChild;\n        this.firstChild.classList.add(classNames.sliderFirstTick);\n        this.lastChild.classList.add(classNames.sliderLastTick);\n        this.sliderContainer.classList.add(classNames.scale + '-' + this.ticks.placement.toLowerCase());\n        if (orien === 'h') {\n            this.firstChild.style.width = tickWidth / 2 + '%';\n            this.lastChild.style.width = tickWidth / 2 + '%';\n        }\n        else {\n            this.firstChild.style.height = tickWidth / 2 + '%';\n            this.lastChild.style.height = tickWidth / 2 + '%';\n        }\n        let eventArgs = { ticksWrapper: this.ul, tickElements: this.tickElementCollection };\n        if (triggerEvent) {\n            this.trigger('renderedTicks', eventArgs);\n        }\n        this.scaleAlignment();\n    }\n    createTick(li, start, tickWidth) {\n        let span = this.createElement('span', {\n            className: classNames.tickValue + ' ' + classNames.tick + '-' + this.ticks.placement.toLowerCase(),\n            attrs: { role: 'presentation', tabIndex: '-1', 'aria-hidden': 'true' }\n        });\n        li.appendChild(span);\n        if (isNullOrUndefined(this.customValues)) {\n            this.formatTicksValue(li, start, span, tickWidth);\n        }\n        else {\n            if (this.enableHtmlSanitizer) {\n                span.innerHTML = SanitizeHtmlHelper.sanitize(start.toString());\n            }\n            else {\n                span.innerHTML = start.toString();\n            }\n        }\n    }\n    formatTicksValue(li, start, spanElement, tickWidth) {\n        const tickText = this.formatNumber(start);\n        const text = !isNullOrUndefined(this.ticks) && !isNullOrUndefined(this.ticks.format) ?\n            this.formatString(start, this.ticksFormatInfo).formatString : tickText;\n        const eventArgs = { value: start, text: text, tickElement: li };\n        this.trigger('renderingTicks', eventArgs, (observedArgs) => {\n            li.setAttribute('title', observedArgs.text.toString());\n            if (spanElement) {\n                if (this.enableHtmlSanitizer) {\n                    spanElement.innerHTML = SanitizeHtmlHelper.sanitize(observedArgs.text.toString());\n                }\n                else {\n                    spanElement.innerHTML = observedArgs.text.toString();\n                }\n            }\n            if (!isNullOrUndefined(this.renderingTicks) && isBlazor()) {\n                const orien = this.orientation === 'Horizontal' ? 'h' : 'v';\n                this.ticksAlignment(orien, tickWidth, false);\n            }\n        });\n    }\n    scaleAlignment() {\n        this.tickValuePosition();\n        let orien = this.orientation === 'Vertical' ? 'v' : 'h';\n        if (this.orientation === 'Vertical') {\n            (this.element.getBoundingClientRect().width <= 15) ?\n                this.sliderContainer.classList.add(classNames.sliderSmallSize) :\n                this.sliderContainer.classList.remove(classNames.sliderSmallSize);\n        }\n        else {\n            (this.element.getBoundingClientRect().height <= 15) ?\n                this.sliderContainer.classList.add(classNames.sliderSmallSize) :\n                this.sliderContainer.classList.remove(classNames.sliderSmallSize);\n        }\n    }\n    tickValuePosition() {\n        this.firstChild = this.element.querySelector('ul').children[0];\n        let first = this.firstChild.getBoundingClientRect();\n        let firstChild;\n        let otherChild;\n        let smallStep = this.ticks.smallStep;\n        let count = Math.abs((parseFloat(formatUnit(this.max))) - (parseFloat(formatUnit(this.min)))) / smallStep;\n        if (this.firstChild.children.length > 0) {\n            firstChild = this.firstChild.children[0].getBoundingClientRect();\n        }\n        let tickElements = [this.sliderContainer.querySelectorAll('.' + classNames.tick + '.' +\n                classNames.large + ' .' + classNames.tickValue)];\n        let other;\n        if (this.ticks.placement === 'Both') {\n            other = [].slice.call(tickElements[0], 2);\n        }\n        else {\n            other = [].slice.call(tickElements[0], 1);\n        }\n        let tickWidth = this.orientation === 'Vertical' ?\n            (first.height * 2) : (first.width * 2);\n        for (let i = 0; i < this.firstChild.children.length; i++) {\n            if (this.orientation === 'Vertical') {\n                if (!isBlazor() || !this.isServerRendered) {\n                    this.firstChild.children[i].style.top = -(firstChild.height / 2) + 'px';\n                }\n            }\n            else {\n                if (!this.enableRtl) {\n                    this.firstChild.children[i].style.left = -(firstChild.width / 2) + 'px';\n                }\n                else {\n                    this.firstChild.children[i].style.left = (tickWidth -\n                        this.firstChild.children[i].getBoundingClientRect().width) / 2 + 'px';\n                }\n            }\n        }\n        for (let i = 0; i < other.length; i++) {\n            otherChild = other[i].getBoundingClientRect();\n            if (this.orientation === 'Vertical') {\n                if (!isBlazor() || !this.isServerRendered) {\n                    setStyleAttribute(other[i], { top: (tickWidth - otherChild.height) / 2 + 'px' });\n                }\n            }\n            else {\n                setStyleAttribute(other[i], { left: (tickWidth - otherChild.width) / 2 + 'px' });\n            }\n        }\n        if (this.enableRtl && this.lastChild.children.length && count !== 0) {\n            this.lastChild.children[0].style.left = -(this.lastChild.getBoundingClientRect().width / 2) + 'px';\n            if (this.ticks.placement === 'Both') {\n                if (!isBlazor()) {\n                    this.lastChild.children[1].style.left = -(this.lastChild.getBoundingClientRect().width / 2) + 'px';\n                }\n            }\n        }\n        if (count === 0) {\n            if (this.orientation === 'Horizontal') {\n                if (!this.enableRtl) {\n                    this.firstChild.classList.remove(classNames.sliderLastTick);\n                    if (!isBlazor()) {\n                        this.firstChild.style.left = this.firstHandle.style.left;\n                    }\n                }\n                else {\n                    this.firstChild.classList.remove(classNames.sliderLastTick);\n                    this.firstChild.style.right = this.firstHandle.style.right;\n                    if (!isBlazor()) {\n                        this.firstChild.children[0].style.left =\n                            (this.firstChild.getBoundingClientRect().width / 2) + 2 + 'px';\n                        if (this.ticks.placement === 'Both') {\n                            this.firstChild.children[1].style.left =\n                                (this.firstChild.getBoundingClientRect().width / 2) + 2 + 'px';\n                        }\n                    }\n                }\n            }\n            if (!isBlazor() || !this.isServerRendered) {\n                if (this.orientation === 'Vertical') {\n                    this.firstChild.classList.remove(classNames.sliderLastTick);\n                }\n            }\n        }\n        if (isBlazor() && this.isServerRendered) {\n            let args;\n            if (this.firstChild != null) {\n                if (this.orientation === 'Horizontal') {\n                    args = { firstTickPostion: this.firstChild.children[0].style.left };\n                }\n                else {\n                    args = { firstTickPostion: -(firstChild.height / 2) + 'px' };\n                }\n            }\n            if (other[0] != null) {\n                if (this.orientation === 'Horizontal') {\n                    args = { otherTicksPosition: other[0].style.left };\n                }\n                else {\n                    args = { otherTicksPosition: (tickWidth - otherChild.height) / 2 + 'px' };\n                }\n            }\n            if (this.firstChild != null && other[0] != null) {\n                if (this.orientation === 'Horizontal') {\n                    args = {\n                        firstTickPostion: this.firstChild.children[0].style.left,\n                        otherTicksPosition: other[0].style.left\n                    };\n                }\n                else {\n                    args = {\n                        firstTickPostion: -(firstChild.height / 2) + 'px',\n                        otherTicksPosition: (tickWidth - otherChild.height) / 2 + 'px'\n                    };\n                }\n            }\n            // tslint:disable\n            this.interopAdaptor.invokeMethodAsync('SliderTicksData', args);\n            // tslint:enable\n        }\n    }\n    setAriaAttrValue(element) {\n        let ariaValueText;\n        let isTickFormatted = ((!isNullOrUndefined(this.ticks) && !isNullOrUndefined(this.ticks.format))) ? true : false;\n        let text = !isTickFormatted ?\n            this.formatContent(this.ticksFormatInfo, false) : this.formatContent(this.tooltipFormatInfo, false);\n        let valuenow = isTickFormatted ? this.formatContent(this.ticksFormatInfo, true) :\n            this.formatContent(this.tooltipFormatInfo, true);\n        text = (!this.customAriaText) ? (text) : (this.customAriaText);\n        if (text.split(' - ').length === 2) {\n            ariaValueText = text.split(' - ');\n        }\n        else {\n            ariaValueText = [text, text];\n        }\n        this.setAriaAttributes(element);\n        if (this.type !== 'Range') {\n            attributes(element, { 'aria-valuenow': valuenow, 'aria-valuetext': text });\n        }\n        else {\n            (!this.enableRtl) ? ((element === this.firstHandle) ?\n                attributes(element, { 'aria-valuenow': valuenow.split(' - ')[0], 'aria-valuetext': ariaValueText[0] }) :\n                attributes(element, { 'aria-valuenow': valuenow.split(' - ')[1], 'aria-valuetext': ariaValueText[1] })) :\n                ((element === this.firstHandle) ?\n                    attributes(element, { 'aria-valuenow': valuenow.split(' - ')[1], 'aria-valuetext': ariaValueText[1] }) :\n                    attributes(element, { 'aria-valuenow': valuenow.split(' - ')[0], 'aria-valuetext': ariaValueText[0] }));\n        }\n    }\n    handleValueUpdate() {\n        let hVal;\n        if (this.type === 'Range') {\n            if (this.activeHandle === 1) {\n                hVal = this.handleVal1;\n            }\n            else {\n                hVal = this.handleVal2;\n            }\n        }\n        else {\n            hVal = this.handleVal1;\n        }\n        return hVal;\n    }\n    getLimitCorrectedValues(value) {\n        if (this.type === 'MinRange' || this.type === 'Default') {\n            value = (this.getLimitValueAndPosition(value, this.limits.minStart, this.limits.minEnd))[0];\n        }\n        else {\n            if (this.activeHandle === 1) {\n                value = (this.getLimitValueAndPosition(value, this.limits.minStart, this.limits.minEnd))[0];\n            }\n            else {\n                value = (this.getLimitValueAndPosition(value, this.limits.maxStart, this.limits.maxEnd))[0];\n            }\n        }\n        return value;\n    }\n    focusSliderElement() {\n        if (!this.isElementFocused) {\n            this.element.focus();\n            this.isElementFocused = true;\n        }\n    }\n    buttonClick(args) {\n        this.focusSliderElement();\n        let value;\n        let enabledRTL = this.enableRtl && this.orientation !== 'Vertical';\n        let hVal = this.handleValueUpdate();\n        if ((args.keyCode === 40) || (args.keyCode === 37)\n            || args.currentTarget.classList.contains(classNames.firstButton)) {\n            enabledRTL ? (value = this.add(hVal, parseFloat(this.step.toString()), true)) :\n                (value = this.add(hVal, parseFloat(this.step.toString()), false));\n        }\n        else if ((args.keyCode === 38) || (args.keyCode === 39) ||\n            args.currentTarget.classList.contains(classNames.secondButton)) {\n            enabledRTL ? (value = this.add(hVal, parseFloat(this.step.toString()), false)) :\n                (value = this.add(hVal, parseFloat(this.step.toString()), true));\n        }\n        else if ((args.keyCode === 33\n            || args.currentTarget.classList.contains(classNames.firstButton))) {\n            enabledRTL ? (value = this.add(hVal, parseFloat(this.ticks.largeStep.toString()), false)) :\n                (value = this.add(hVal, parseFloat(this.ticks.largeStep.toString()), true));\n        }\n        else if ((args.keyCode === 34) ||\n            args.currentTarget.classList.contains(classNames.secondButton)) {\n            enabledRTL ? (value = this.add(hVal, parseFloat(this.ticks.largeStep.toString()), true)) :\n                (value = this.add(hVal, parseFloat(this.ticks.largeStep.toString()), false));\n        }\n        else if ((args.keyCode === 36)) {\n            value = parseFloat(this.min.toString());\n        }\n        else if ((args.keyCode === 35)) {\n            value = parseFloat(this.max.toString());\n        }\n        if (this.limits.enabled) {\n            value = this.getLimitCorrectedValues(value);\n        }\n        this.changeHandleValue(value);\n        if (this.isMaterial && !this.tooltip.isVisible &&\n            !this.getHandle().classList.contains(classNames.sliderTabHandle)) {\n            this.materialChange();\n        }\n        this.tooltipToggle(this.getHandle());\n        this.getHandle().focus();\n        if (args.currentTarget.classList.contains(classNames.firstButton)) {\n            EventHandler.add(this.firstBtn, 'mouseup touchend', this.buttonUp, this);\n        }\n        if (args.currentTarget.classList.contains(classNames.secondButton)) {\n            EventHandler.add(this.secondBtn, 'mouseup touchend', this.buttonUp, this);\n        }\n    }\n    tooltipToggle(target) {\n        if (this.isMaterialTooltip) {\n            !this.tooltipElement.classList.contains(classNames.materialTooltipOpen) ?\n                this.openMaterialTooltip() : this.refreshTooltip(this.firstHandle);\n        }\n        else {\n            !this.tooltipElement ? this.openTooltip(target) : this.refreshTooltip(target);\n        }\n    }\n    buttonUp(args) {\n        if (args.currentTarget.classList.contains(classNames.firstButton)) {\n            EventHandler.remove(this.firstBtn, 'mouseup touchend', this.buttonUp);\n        }\n        if (args.currentTarget.classList.contains(classNames.secondButton)) {\n            EventHandler.remove(this.secondBtn, 'mouseup touchend', this.buttonUp);\n        }\n    }\n    setRangeBar() {\n        if (this.orientation === 'Horizontal') {\n            if (this.type === 'MinRange') {\n                this.enableRtl ? (this.rangeBar.style.right = '0px') : (this.rangeBar.style.left = '0px');\n                setStyleAttribute(this.rangeBar, { 'width': isNullOrUndefined(this.handlePos1) ? 0 : this.handlePos1 + 'px' });\n            }\n            else {\n                this.enableRtl ? (this.rangeBar.style.right =\n                    this.handlePos1 + 'px') : (this.rangeBar.style.left = this.handlePos1 + 'px');\n                setStyleAttribute(this.rangeBar, { 'width': this.handlePos2 - this.handlePos1 + 'px' });\n            }\n        }\n        else {\n            if (this.type === 'MinRange') {\n                this.rangeBar.style.bottom = '0px';\n                setStyleAttribute(this.rangeBar, { 'height': isNullOrUndefined(this.handlePos1) ? 0 : this.handlePos1 + 'px' });\n            }\n            else {\n                this.rangeBar.style.bottom = this.handlePos1 + 'px';\n                setStyleAttribute(this.rangeBar, { 'height': this.handlePos2 - this.handlePos1 + 'px' });\n            }\n        }\n    }\n    checkValidValueAndPos(value) {\n        value = this.checkHandleValue(value);\n        value = this.checkHandlePosition(value);\n        return value;\n    }\n    setLimitBarPositions(fromMinPostion, fromMaxpostion, toMinPostion, toMaxpostion) {\n        if (this.orientation === 'Horizontal') {\n            if (!this.enableRtl) {\n                this.limitBarFirst.style.left = fromMinPostion + 'px';\n                this.limitBarFirst.style.width = (fromMaxpostion - fromMinPostion) + 'px';\n            }\n            else {\n                this.limitBarFirst.style.right = fromMinPostion + 'px';\n                this.limitBarFirst.style.width = (fromMaxpostion - fromMinPostion) + 'px';\n            }\n        }\n        else {\n            this.limitBarFirst.style.bottom = fromMinPostion + 'px';\n            this.limitBarFirst.style.height = (fromMaxpostion - fromMinPostion) + 'px';\n        }\n        if (this.type === 'Range') {\n            if (this.orientation === 'Horizontal') {\n                if (!this.enableRtl) {\n                    this.limitBarSecond.style.left = toMinPostion + 'px';\n                    this.limitBarSecond.style.width = (toMaxpostion - toMinPostion) + 'px';\n                }\n                else {\n                    this.limitBarSecond.style.right = toMinPostion + 'px';\n                    this.limitBarSecond.style.width = (toMaxpostion - toMinPostion) + 'px';\n                }\n            }\n            else {\n                this.limitBarSecond.style.bottom = toMinPostion + 'px';\n                this.limitBarSecond.style.height = (toMaxpostion - toMinPostion) + 'px';\n            }\n        }\n    }\n    setLimitBar() {\n        if (this.type === 'Default' || this.type === 'MinRange') {\n            let fromPosition = (this.getLimitValueAndPosition(this.limits.minStart, this.limits.minStart, this.limits.minEnd, true))[0];\n            fromPosition = this.checkValidValueAndPos(fromPosition);\n            let toPosition = (this.getLimitValueAndPosition(this.limits.minEnd, this.limits.minStart, this.limits.minEnd, true))[0];\n            toPosition = this.checkValidValueAndPos(toPosition);\n            this.setLimitBarPositions(fromPosition, toPosition);\n        }\n        else if (this.type === 'Range') {\n            let fromMinPostion = (this.getLimitValueAndPosition(this.limits.minStart, this.limits.minStart, this.limits.minEnd, true))[0];\n            fromMinPostion = this.checkValidValueAndPos(fromMinPostion);\n            let fromMaxpostion = (this.getLimitValueAndPosition(this.limits.minEnd, this.limits.minStart, this.limits.minEnd, true))[0];\n            fromMaxpostion = this.checkValidValueAndPos(fromMaxpostion);\n            let toMinPostion = (this.getLimitValueAndPosition(this.limits.maxStart, this.limits.maxStart, this.limits.maxEnd, true))[0];\n            toMinPostion = this.checkValidValueAndPos(toMinPostion);\n            let toMaxpostion = (this.getLimitValueAndPosition(this.limits.maxEnd, this.limits.maxStart, this.limits.maxEnd, true))[0];\n            toMaxpostion = this.checkValidValueAndPos(toMaxpostion);\n            this.setLimitBarPositions(fromMinPostion, fromMaxpostion, toMinPostion, toMaxpostion);\n        }\n    }\n    getLimitValueAndPosition(currentValue, minValue, maxValue, limitBar) {\n        if (isNullOrUndefined(minValue)) {\n            minValue = this.min;\n            if (isNullOrUndefined(currentValue) && limitBar) {\n                currentValue = minValue;\n            }\n        }\n        if (isNullOrUndefined(maxValue)) {\n            maxValue = this.max;\n            if (isNullOrUndefined(currentValue) && limitBar) {\n                currentValue = maxValue;\n            }\n        }\n        if (currentValue < minValue) {\n            currentValue = minValue;\n        }\n        if (currentValue > maxValue) {\n            currentValue = maxValue;\n        }\n        return [currentValue, this.checkHandlePosition(currentValue)];\n    }\n    setValue() {\n        if (!isNullOrUndefined(this.customValues) && this.customValues.length > 0) {\n            this.min = 0;\n            this.max = this.customValues.length - 1;\n            this.setBarColor();\n        }\n        this.setAriaAttributes(this.firstHandle);\n        this.handleVal1 = isNullOrUndefined(this.value) ? this.checkHandleValue(parseFloat(this.min.toString())) :\n            this.checkHandleValue(parseFloat(this.value.toString()));\n        this.handlePos1 = this.checkHandlePosition(this.handleVal1);\n        this.preHandlePos1 = this.handlePos1;\n        isNullOrUndefined(this.activeHandle) ? (this.type === 'Range' ? this.activeHandle = 2 : this.activeHandle = 1) :\n            this.activeHandle = this.activeHandle;\n        if (this.type === 'Default' || this.type === 'MinRange') {\n            if (this.limits.enabled) {\n                let values = this.getLimitValueAndPosition(this.handleVal1, this.limits.minStart, this.limits.minEnd);\n                this.handleVal1 = values[0];\n                this.handlePos1 = values[1];\n                this.preHandlePos1 = this.handlePos1;\n            }\n            this.setHandlePosition(null);\n            this.handleStart();\n            this.value = this.handleVal1;\n            this.setAriaAttrValue(this.firstHandle);\n            this.changeEvent('changed', null);\n        }\n        else {\n            this.validateRangeValue();\n        }\n        if (this.type !== 'Default') {\n            this.setRangeBar();\n        }\n        if (this.limits.enabled) {\n            this.setLimitBar();\n        }\n    }\n    rangeValueUpdate() {\n        if (this.value === null || typeof (this.value) !== 'object') {\n            this.value = [parseFloat(formatUnit(this.min)), parseFloat(formatUnit(this.max))];\n        }\n    }\n    validateRangeValue() {\n        this.rangeValueUpdate();\n        this.setRangeValue();\n    }\n    modifyZindex() {\n        if (this.type === 'Range') {\n            if (this.activeHandle === 1) {\n                this.firstHandle.style.zIndex = (this.zIndex + 4) + '';\n                this.secondHandle.style.zIndex = (this.zIndex + 3) + '';\n            }\n            else {\n                this.firstHandle.style.zIndex = (this.zIndex + 3) + '';\n                this.secondHandle.style.zIndex = (this.zIndex + 4) + '';\n            }\n        }\n        else if (this.isMaterialTooltip && this.tooltipElement) {\n            this.tooltipElement.style.zIndex = getZindexPartial(this.element) + '';\n        }\n    }\n    setHandlePosition(event) {\n        let handle;\n        let pos = (this.activeHandle === 1) ? this.handlePos1 : this.handlePos2;\n        if (this.isMaterialTooltip) {\n            handle = [this.firstHandle, this.materialHandle];\n        }\n        else {\n            handle = [this.getHandle()];\n        }\n        this.handleStart();\n        handle.forEach((handle) => {\n            if (this.orientation === 'Horizontal') {\n                this.enableRtl ? (handle.style.right =\n                    `${pos}px`) : (handle.style.left = `${pos}px`);\n            }\n            else {\n                handle.style.bottom = `${pos}px`;\n            }\n            if (isBlazor() && this.isServerRendered) {\n                handle.style.removeProperty('visibility');\n            }\n        });\n        this.changeEvent('change', event);\n    }\n    getHandle() {\n        return (this.activeHandle === 1) ? this.firstHandle : this.secondHandle;\n    }\n    setRangeValue() {\n        this.updateRangeValue();\n        this.activeHandle = 1;\n        this.setHandlePosition(null);\n        this.activeHandle = 2;\n        this.setHandlePosition(null);\n        this.activeHandle = 1;\n    }\n    changeEvent(eventName, e) {\n        let previous = eventName === 'change' ? this.previousVal : this.previousChanged;\n        if (this.type !== 'Range') {\n            this.setProperties({ 'value': this.handleVal1 }, true);\n            if (previous !== this.value && (!this.isMaterialTooltip || !this.initialTooltip)) {\n                this.trigger(eventName, this.changeEventArgs(eventName, e));\n                this.initialTooltip = true;\n                this.setPreviousVal(eventName, this.value);\n            }\n            this.setAriaAttrValue(this.firstHandle);\n        }\n        else {\n            let value = this.value = [this.handleVal1, this.handleVal2];\n            this.setProperties({ 'value': value }, true);\n            if (previous.length === this.value.length\n                && this.value[0] !== previous[0] || this.value[1] !== previous[1]) {\n                this.initialTooltip = false;\n                this.trigger(eventName, this.changeEventArgs(eventName, e));\n                this.initialTooltip = true;\n                this.setPreviousVal(eventName, this.value);\n            }\n            this.setAriaAttrValue(this.getHandle());\n        }\n        this.hiddenInput.value = this.value.toString();\n    }\n    changeEventArgs(eventName, e) {\n        let eventArgs;\n        if (this.tooltip.isVisible && this.tooltipObj && this.initialTooltip) {\n            if (!isBlazor() || !this.isServerRendered) {\n                this.tooltipValue();\n            }\n            eventArgs = {\n                value: this.value,\n                previousValue: eventName === 'change' ? this.previousVal : this.previousChanged,\n                action: eventName, text: this.tooltipObj.content, isInteracted: isNullOrUndefined(e) ? false : true\n            };\n        }\n        else {\n            eventArgs = {\n                value: this.value,\n                previousValue: eventName === 'change' ? this.previousVal : this.previousChanged,\n                action: eventName, text: isNullOrUndefined(this.ticksFormatInfo.format) ? this.value.toString() :\n                    (this.type !== 'Range' ? this.formatString(this.value, this.ticksFormatInfo).formatString :\n                        (this.formatString(this.value[0], this.ticksFormatInfo).formatString + ' - ' +\n                            this.formatString(this.value[1], this.ticksFormatInfo).formatString)),\n                isInteracted: isNullOrUndefined(e) ? false : true\n            };\n        }\n        return eventArgs;\n    }\n    setPreviousVal(eventName, value) {\n        if (eventName === 'change') {\n            this.previousVal = value;\n        }\n        else {\n            this.previousChanged = value;\n        }\n    }\n    updateRangeValue() {\n        let values = this.value.toString().split(',').map(Number);\n        if ((this.enableRtl && this.orientation !== 'Vertical') || this.rtl) {\n            this.value = [values[1], values[0]];\n        }\n        else {\n            this.value = [values[0], values[1]];\n        }\n        if (this.enableRtl && this.orientation !== 'Vertical') {\n            this.handleVal1 = this.checkHandleValue(this.value[1]);\n            this.handleVal2 = this.checkHandleValue(this.value[0]);\n        }\n        else {\n            this.handleVal1 = this.checkHandleValue(this.value[0]);\n            this.handleVal2 = this.checkHandleValue(this.value[1]);\n        }\n        this.handlePos1 = this.checkHandlePosition(this.handleVal1);\n        this.handlePos2 = this.checkHandlePosition(this.handleVal2);\n        if (this.handlePos1 > this.handlePos2) {\n            this.handlePos1 = this.handlePos2;\n            this.handleVal1 = this.handleVal2;\n        }\n        this.preHandlePos1 = this.handlePos1;\n        this.preHandlePos2 = this.handlePos2;\n        if (this.limits.enabled) {\n            this.activeHandle = 1;\n            let values = this.getLimitValueAndPosition(this.handleVal1, this.limits.minStart, this.limits.minEnd);\n            this.handleVal1 = values[0];\n            this.handlePos1 = values[1];\n            this.preHandlePos1 = this.handlePos1;\n            this.activeHandle = 2;\n            values = this.getLimitValueAndPosition(this.handleVal2, this.limits.maxStart, this.limits.maxEnd);\n            this.handleVal2 = values[0];\n            this.handlePos2 = values[1];\n            this.preHandlePos2 = this.handlePos2;\n        }\n    }\n    checkHandlePosition(value) {\n        let pos;\n        value = (100 *\n            (value - (parseFloat(formatUnit(this.min))))) / ((parseFloat(formatUnit(this.max))) - (parseFloat(formatUnit(this.min))));\n        if (this.orientation === 'Horizontal') {\n            pos = this.element.getBoundingClientRect().width * (value / 100);\n        }\n        else {\n            pos = this.element.getBoundingClientRect().height * (value / 100);\n        }\n        if (((parseFloat(formatUnit(this.max))) === (parseFloat(formatUnit(this.min))))) {\n            if (this.orientation === 'Horizontal') {\n                pos = this.element.getBoundingClientRect().width;\n            }\n            else {\n                pos = this.element.getBoundingClientRect().height;\n            }\n        }\n        return pos;\n    }\n    checkHandleValue(value) {\n        if (this.min > this.max) {\n            this.min = this.max;\n        }\n        if (this.min === this.max) {\n            return (parseFloat(formatUnit(this.max)));\n        }\n        let handle = this.tempStartEnd();\n        if (value < handle.start) {\n            value = handle.start;\n        }\n        else if (value > handle.end) {\n            value = handle.end;\n        }\n        return value;\n    }\n    /**\n     * It is used to reposition slider.\n     * @returns void\n     */\n    reposition() {\n        this.firstHandle.style.transition = 'none';\n        if (this.type !== 'Default') {\n            this.rangeBar.style.transition = 'none';\n        }\n        if (this.type === 'Range') {\n            this.secondHandle.style.transition = 'none';\n        }\n        this.handlePos1 = this.checkHandlePosition(this.handleVal1);\n        if (this.handleVal2) {\n            this.handlePos2 = this.checkHandlePosition(this.handleVal2);\n        }\n        if (this.orientation === 'Horizontal') {\n            this.enableRtl ? this.firstHandle.style.right =\n                `${this.handlePos1}px` : this.firstHandle.style.left = `${this.handlePos1}px`;\n            if (this.isMaterialTooltip) {\n                this.enableRtl ? this.materialHandle.style.right =\n                    `${this.handlePos1}px` : this.materialHandle.style.left = `${this.handlePos1}px`;\n            }\n            if (this.type === 'MinRange') {\n                this.enableRtl ? (this.rangeBar.style.right = '0px') : (this.rangeBar.style.left = '0px');\n                setStyleAttribute(this.rangeBar, { 'width': isNullOrUndefined(this.handlePos1) ? 0 : this.handlePos1 + 'px' });\n            }\n            else if (this.type === 'Range') {\n                this.enableRtl ? this.secondHandle.style.right =\n                    `${this.handlePos2}px` : this.secondHandle.style.left = `${this.handlePos2}px`;\n                this.enableRtl ? (this.rangeBar.style.right =\n                    this.handlePos1 + 'px') : (this.rangeBar.style.left = this.handlePos1 + 'px');\n                setStyleAttribute(this.rangeBar, { 'width': this.handlePos2 - this.handlePos1 + 'px' });\n            }\n        }\n        else {\n            this.firstHandle.style.bottom = `${this.handlePos1}px`;\n            if (this.isMaterialTooltip) {\n                this.materialHandle.style.bottom = `${this.handlePos1}px`;\n            }\n            if (this.type === 'MinRange') {\n                this.rangeBar.style.bottom = '0px';\n                setStyleAttribute(this.rangeBar, { 'height': isNullOrUndefined(this.handlePos1) ? 0 : this.handlePos1 + 'px' });\n            }\n            else if (this.type === 'Range') {\n                this.secondHandle.style.bottom = `${this.handlePos2}px`;\n                this.rangeBar.style.bottom = this.handlePos1 + 'px';\n                setStyleAttribute(this.rangeBar, { 'height': this.handlePos2 - this.handlePos1 + 'px' });\n            }\n        }\n        if (this.limits.enabled) {\n            this.setLimitBar();\n        }\n        if (this.ticks.placement !== 'None' && this.ul) {\n            if (!isBlazor()) {\n                this.removeElement(this.ul);\n                this.ul = undefined;\n            }\n            this.renderScale();\n            if (isBlazor()) {\n                this.tickValuePosition();\n            }\n        }\n        this.handleStart();\n        if (!this.tooltip.isVisible) {\n            setTimeout(() => {\n                this.firstHandle.style.transition = this.scaleTransform;\n                if (this.type === 'Range') {\n                    this.secondHandle.style.transition = this.scaleTransform;\n                }\n            });\n        }\n        if (!isBlazor() || !this.isServerRendered) {\n            this.refreshTooltip(this.tooltipTarget);\n        }\n        this.setBarColor();\n    }\n    changeHandleValue(value) {\n        let position = null;\n        if (this.activeHandle === 1) {\n            if (!(this.limits.enabled && this.limits.startHandleFixed)) {\n                this.handleVal1 = this.checkHandleValue(value);\n                this.handlePos1 = this.checkHandlePosition(this.handleVal1);\n                if (this.type === 'Range' && this.handlePos1 > this.handlePos2) {\n                    this.handlePos1 = this.handlePos2;\n                    this.handleVal1 = this.handleVal2;\n                }\n                if (this.handlePos1 !== this.preHandlePos1) {\n                    position = this.preHandlePos1 = this.handlePos1;\n                }\n            }\n            this.modifyZindex();\n        }\n        else {\n            if (!(this.limits.enabled && this.limits.endHandleFixed)) {\n                this.handleVal2 = this.checkHandleValue(value);\n                this.handlePos2 = this.checkHandlePosition(this.handleVal2);\n                if (this.type === 'Range' && this.handlePos2 < this.handlePos1) {\n                    this.handlePos2 = this.handlePos1;\n                    this.handleVal2 = this.handleVal1;\n                }\n                if (this.handlePos2 !== this.preHandlePos2) {\n                    position = this.preHandlePos2 = this.handlePos2;\n                }\n            }\n            this.modifyZindex();\n        }\n        if (position !== null) {\n            if (this.type !== 'Default') {\n                this.setRangeBar();\n            }\n            this.setHandlePosition(null);\n        }\n    }\n    tempStartEnd() {\n        if (this.min > this.max) {\n            return {\n                start: this.max,\n                end: this.min\n            };\n        }\n        else {\n            return {\n                start: this.min,\n                end: this.max\n            };\n        }\n    }\n    xyToPosition(position) {\n        let pos;\n        if (this.min === this.max) {\n            return 100;\n        }\n        if (this.orientation === 'Horizontal') {\n            let left = position.x - this.element.getBoundingClientRect().left;\n            let num = this.element.offsetWidth / 100;\n            this.val = (left / num);\n        }\n        else {\n            let top = position.y - this.element.getBoundingClientRect().top;\n            let num = this.element.offsetHeight / 100;\n            this.val = 100 - (top / num);\n        }\n        let val = this.stepValueCalculation(this.val);\n        if (val < 0) {\n            val = 0;\n        }\n        else if (val > 100) {\n            val = 100;\n        }\n        if (this.enableRtl && this.orientation !== 'Vertical') {\n            val = 100 - val;\n        }\n        if (this.orientation === 'Horizontal') {\n            pos = this.element.getBoundingClientRect().width * (val / 100);\n        }\n        else {\n            pos = this.element.getBoundingClientRect().height * (val / 100);\n        }\n        return pos;\n    }\n    stepValueCalculation(value) {\n        if (this.step === 0) {\n            this.step = 1;\n        }\n        let percentStep = (parseFloat(formatUnit(this.step))) / ((parseFloat(formatUnit(this.max)) - parseFloat(formatUnit(this.min))) / 100);\n        let remain = value % Math.abs(percentStep);\n        if (remain !== 0) {\n            if ((percentStep / 2) > remain) {\n                value -= remain;\n            }\n            else {\n                value += Math.abs(percentStep) - remain;\n            }\n        }\n        return value;\n    }\n    add(a, b, addition) {\n        let precision;\n        let x = Math.pow(10, precision || 3);\n        let val;\n        if (addition) {\n            val = (Math.round(a * x) + Math.round(b * x)) / x;\n        }\n        else {\n            val = (Math.round(a * x) - Math.round(b * x)) / x;\n        }\n        return val;\n    }\n    positionToValue(pos) {\n        let val;\n        let diff = parseFloat(formatUnit(this.max)) - parseFloat(formatUnit(this.min));\n        if (this.orientation === 'Horizontal') {\n            val = (pos / this.element.getBoundingClientRect().width) * diff;\n        }\n        else {\n            val = (pos / this.element.getBoundingClientRect().height) * diff;\n        }\n        let total = this.add(val, parseFloat(this.min.toString()), true);\n        return (total);\n    }\n    sliderBarClick(evt) {\n        evt.preventDefault();\n        let pos;\n        if (evt.type === 'mousedown' || evt.type === 'mouseup' || evt.type === 'click') {\n            pos = { x: evt.clientX, y: evt.clientY };\n        }\n        else if (evt.type === 'touchend' || evt.type === 'touchstart') {\n            pos = { x: evt.changedTouches[0].clientX, y: evt.changedTouches[0].clientY };\n        }\n        let handlepos = this.xyToPosition(pos);\n        let handleVal = this.positionToValue(handlepos);\n        if (this.type === 'Range' && (this.handlePos2 - handlepos) < (handlepos - this.handlePos1)) {\n            this.activeHandle = 2;\n            if (!(this.limits.enabled && this.limits.endHandleFixed)) {\n                if (this.limits.enabled) {\n                    let value = this.getLimitValueAndPosition(handleVal, this.limits.maxStart, this.limits.maxEnd);\n                    handleVal = value[0];\n                    handlepos = value[1];\n                }\n                this.secondHandle.classList.add(classNames.sliderActiveHandle);\n                this.handlePos2 = this.preHandlePos2 = handlepos;\n                this.handleVal2 = handleVal;\n            }\n            this.modifyZindex();\n            this.secondHandle.focus();\n        }\n        else {\n            this.activeHandle = 1;\n            if (!(this.limits.enabled && this.limits.startHandleFixed)) {\n                if (this.limits.enabled) {\n                    let value = this.getLimitValueAndPosition(handleVal, this.limits.minStart, this.limits.minEnd);\n                    handleVal = value[0];\n                    handlepos = value[1];\n                }\n                this.firstHandle.classList.add(classNames.sliderActiveHandle);\n                this.handlePos1 = this.preHandlePos1 = handlepos;\n                this.handleVal1 = handleVal;\n            }\n            this.modifyZindex();\n            this.firstHandle.focus();\n        }\n        if (this.isMaterialTooltip) {\n            this.tooltipElement.classList.add(classNames.materialTooltipActive);\n        }\n        let focusedElement = this.element.querySelector('.' + classNames.sliderTabHandle);\n        if (focusedElement && this.getHandle() !== focusedElement) {\n            focusedElement.classList.remove(classNames.sliderTabHandle);\n        }\n        let handle = this.activeHandle === 1 ? this.firstHandle : this.secondHandle;\n        if (evt.target === handle) {\n            if (this.isMaterial && !this.tooltip.isVisible &&\n                !this.getHandle().classList.contains(classNames.sliderTabHandle)) {\n                this.materialChange();\n            }\n            this.sliderBarUp(evt);\n            this.tooltipToggle(this.getHandle());\n            return;\n        }\n        if (!this.checkRepeatedValue(handleVal)) {\n            return;\n        }\n        let transition = this.isMaterial && this.tooltip.isVisible ?\n            this.transitionOnMaterialTooltip : this.transition;\n        this.getHandle().style.transition = transition.handle;\n        if (this.type !== 'Default') {\n            this.rangeBar.style.transition = transition.rangeBar;\n        }\n        this.setHandlePosition(evt);\n        if (this.isMaterialTooltip) {\n            this.initialTooltip = false;\n        }\n        this.changeEvent('changed', evt);\n        if (this.type !== 'Default') {\n            this.setRangeBar();\n        }\n    }\n    handleValueAdjust(handleValue, assignValue, handleNumber) {\n        if (handleNumber === 1) {\n            this.handleVal1 = assignValue;\n            this.handleVal2 = this.handleVal1 + this.minDiff;\n        }\n        else if (handleNumber === 2) {\n            this.handleVal2 = assignValue;\n            this.handleVal1 = this.handleVal2 - this.minDiff;\n        }\n        this.handlePos1 = this.checkHandlePosition(this.handleVal1);\n        this.handlePos2 = this.checkHandlePosition(this.handleVal2);\n    }\n    dragRangeBarMove(event) {\n        if (event.type !== 'touchmove') {\n            event.preventDefault();\n        }\n        this.rangeBarDragged = true;\n        let pos;\n        this.rangeBar.style.transition = 'none';\n        this.firstHandle.style.transition = 'none';\n        this.secondHandle.style.transition = 'none';\n        let xPostion;\n        let yPostion;\n        if (event.type === 'mousemove') {\n            [xPostion, yPostion] = [event.clientX, event.clientY];\n        }\n        else {\n            [xPostion, yPostion] = [event.changedTouches[0].clientX, event.changedTouches[0].clientY];\n        }\n        if (!(this.limits.enabled && this.limits.startHandleFixed) && !(this.limits.enabled && this.limits.endHandleFixed)) {\n            if (!this.enableRtl) {\n                pos = { x: xPostion - this.firstPartRemain, y: yPostion + this.secondPartRemain };\n            }\n            else {\n                pos = { x: xPostion + this.secondPartRemain, y: yPostion + this.secondPartRemain };\n            }\n            this.handlePos1 = this.xyToPosition(pos);\n            this.handleVal1 = this.positionToValue(this.handlePos1);\n            if (!this.enableRtl) {\n                pos = { x: xPostion + this.secondPartRemain, y: yPostion - this.firstPartRemain };\n            }\n            else {\n                pos = { x: xPostion - this.firstPartRemain, y: yPostion - this.firstPartRemain };\n            }\n            this.handlePos2 = this.xyToPosition(pos);\n            this.handleVal2 = this.positionToValue(this.handlePos2);\n            if (this.limits.enabled) {\n                let value = this.getLimitValueAndPosition(this.handleVal1, this.limits.minStart, this.limits.minEnd);\n                this.handleVal1 = value[0];\n                this.handlePos1 = value[1];\n                if (this.handleVal1 === this.limits.minEnd) {\n                    this.handleValueAdjust(this.handleVal1, this.limits.minEnd, 1);\n                }\n                if (this.handleVal1 === this.limits.minStart) {\n                    this.handleValueAdjust(this.handleVal1, this.limits.minStart, 1);\n                }\n                value = this.getLimitValueAndPosition(this.handleVal2, this.limits.maxStart, this.limits.maxEnd);\n                this.handleVal2 = value[0];\n                this.handlePos2 = value[1];\n                if (this.handleVal2 === this.limits.maxStart) {\n                    this.handleValueAdjust(this.handleVal2, this.limits.maxStart, 2);\n                }\n                if (this.handleVal2 === this.limits.maxEnd) {\n                    this.handleValueAdjust(this.handleVal2, this.limits.maxEnd, 2);\n                }\n            }\n            if (this.handleVal2 === this.max) {\n                this.handleValueAdjust(this.handleVal2, this.max, 2);\n            }\n            if (this.handleVal1 === this.min) {\n                this.handleValueAdjust(this.handleVal1, this.min, 1);\n            }\n        }\n        this.activeHandle = 1;\n        this.setHandlePosition(event);\n        this.activeHandle = 2;\n        this.setHandlePosition(event);\n        this.tooltipToggle(this.rangeBar);\n        this.setRangeBar();\n    }\n    sliderBarUp(event) {\n        this.changeEvent('changed', event);\n        this.handleFocusOut();\n        this.firstHandle.classList.remove(classNames.sliderActiveHandle);\n        if (this.type === 'Range') {\n            this.initialTooltip = false;\n            this.secondHandle.classList.remove(classNames.sliderActiveHandle);\n        }\n        this.closeTooltip();\n        if (this.isMaterial) {\n            this.getHandle().classList.remove('e-large-thumb-size');\n            if (this.isMaterialTooltip) {\n                this.tooltipElement.classList.remove(classNames.materialTooltipActive);\n            }\n        }\n        EventHandler.remove(document, 'mousemove touchmove', this.sliderBarMove);\n        EventHandler.remove(document, 'mouseup touchend', this.sliderBarUp);\n    }\n    sliderBarMove(evt) {\n        if (evt.type !== 'touchmove') {\n            evt.preventDefault();\n        }\n        let pos;\n        if (evt.type === 'mousemove') {\n            pos = { x: evt.clientX, y: evt.clientY };\n        }\n        else {\n            pos = { x: evt.changedTouches[0].clientX, y: evt.changedTouches[0].clientY };\n        }\n        let handlepos = this.xyToPosition(pos);\n        let handleVal = this.positionToValue(handlepos);\n        handlepos = Math.round(handlepos);\n        if (this.type !== 'Range' && this.activeHandle === 1) {\n            if (!(this.limits.enabled && this.limits.startHandleFixed)) {\n                if (this.limits.enabled) {\n                    let valueAndPostion = this.getLimitValueAndPosition(handleVal, this.limits.minStart, this.limits.minEnd);\n                    handlepos = valueAndPostion[1];\n                    handleVal = valueAndPostion[0];\n                }\n                this.handlePos1 = handlepos;\n                this.handleVal1 = handleVal;\n            }\n            this.firstHandle.classList.add(classNames.sliderActiveHandle);\n        }\n        if (this.type === 'Range') {\n            if (this.activeHandle === 1) {\n                this.firstHandle.classList.add(classNames.sliderActiveHandle);\n                if (!(this.limits.enabled && this.limits.startHandleFixed)) {\n                    if (handlepos > this.handlePos2) {\n                        handlepos = this.handlePos2;\n                        handleVal = this.handleVal2;\n                    }\n                    if (handlepos !== this.preHandlePos1) {\n                        if (this.limits.enabled) {\n                            let value = this.getLimitValueAndPosition(handleVal, this.limits.minStart, this.limits.minEnd);\n                            handleVal = value[0];\n                            handlepos = value[1];\n                        }\n                        this.handlePos1 = this.preHandlePos1 = handlepos;\n                        this.handleVal1 = handleVal;\n                        this.activeHandle = 1;\n                    }\n                }\n            }\n            else if (this.activeHandle === 2) {\n                this.secondHandle.classList.add(classNames.sliderActiveHandle);\n                if (!(this.limits.enabled && this.limits.endHandleFixed)) {\n                    if (handlepos < this.handlePos1) {\n                        handlepos = this.handlePos1;\n                        handleVal = this.handleVal1;\n                    }\n                    if (handlepos !== this.preHandlePos2) {\n                        if (this.limits.enabled) {\n                            let value = this.getLimitValueAndPosition(handleVal, this.limits.maxStart, this.limits.maxEnd);\n                            handleVal = value[0];\n                            handlepos = value[1];\n                        }\n                        this.handlePos2 = this.preHandlePos2 = handlepos;\n                        this.handleVal2 = handleVal;\n                        this.activeHandle = 2;\n                    }\n                }\n            }\n        }\n        if (!this.checkRepeatedValue(handleVal)) {\n            return;\n        }\n        this.getHandle().style.transition = this.scaleTransform;\n        if (this.type !== 'Default') {\n            this.rangeBar.style.transition = 'none';\n        }\n        this.setHandlePosition(evt);\n        if (this.isMaterial && !this.tooltip.isVisible &&\n            !this.getHandle().classList.contains(classNames.sliderTabHandle)) {\n            this.materialChange();\n        }\n        this.tooltipToggle(this.getHandle());\n        if (this.type !== 'Default') {\n            this.setRangeBar();\n        }\n    }\n    dragRangeBarUp(event) {\n        if (!this.rangeBarDragged) {\n            this.focusSliderElement();\n            this.sliderBarClick(event);\n        }\n        this.changeEvent('changed', event);\n        this.closeTooltip();\n        EventHandler.remove(document, 'mousemove touchmove', this.dragRangeBarMove);\n        EventHandler.remove(document, 'mouseup touchend', this.dragRangeBarUp);\n        this.rangeBarDragged = false;\n    }\n    checkRepeatedValue(currentValue) {\n        if (this.type === 'Range') {\n            let previousVal = this.enableRtl && this.orientation !== 'Vertical' ? (this.activeHandle === 1 ?\n                this.previousVal[1] : this.previousVal[0]) :\n                (this.activeHandle === 1 ? this.previousVal[0] : this.previousVal[1]);\n            if (currentValue === previousVal) {\n                return 0;\n            }\n        }\n        else {\n            if (currentValue === this.previousVal) {\n                return 0;\n            }\n        }\n        return 1;\n    }\n    refreshTooltip(target) {\n        if (this.tooltip.isVisible && this.tooltipObj) {\n            this.tooltipValue();\n            if (target) {\n                this.tooltipObj.refresh(target);\n                this.tooltipTarget = target;\n            }\n        }\n    }\n    openTooltip(target) {\n        if (this.tooltip.isVisible && this.tooltipObj && !this.isMaterialTooltip) {\n            this.tooltipValue();\n            this.tooltipObj.open(target);\n            this.tooltipTarget = target;\n        }\n    }\n    closeTooltip() {\n        if (this.tooltip.isVisible && this.tooltipObj && this.tooltip.showOn !== 'Always' && !this.isMaterialTooltip) {\n            this.tooltipValue();\n            this.tooltipObj.close();\n            this.tooltipTarget = undefined;\n        }\n    }\n    keyDown(event) {\n        switch (event.keyCode) {\n            case 37:\n            case 38:\n            case 39:\n            case 40:\n            case 33:\n            case 34:\n            case 36:\n            case 35:\n                event.preventDefault();\n                this.buttonClick(event);\n                break;\n        }\n    }\n    wireButtonEvt(destroy) {\n        if (!destroy) {\n            EventHandler.add(this.firstBtn, 'mouseleave touchleave', this.buttonFocusOut, this);\n            EventHandler.add(this.secondBtn, 'mouseleave touchleave', this.buttonFocusOut, this);\n            EventHandler.add(this.firstBtn, 'mousedown touchstart', this.repeatHandlerMouse, this);\n            EventHandler.add(this.firstBtn, 'mouseup mouseleave touchup touchend', this.repeatHandlerUp, this);\n            EventHandler.add(this.secondBtn, 'mousedown touchstart', this.repeatHandlerMouse, this);\n            EventHandler.add(this.secondBtn, 'mouseup mouseleave touchup touchend', this.repeatHandlerUp, this);\n            EventHandler.add(this.firstBtn, 'focusout', this.sliderFocusOut, this);\n            EventHandler.add(this.secondBtn, 'focusout', this.sliderFocusOut, this);\n        }\n        else {\n            EventHandler.remove(this.firstBtn, 'mouseleave touchleave', this.buttonFocusOut);\n            EventHandler.remove(this.secondBtn, 'mouseleave touchleave', this.buttonFocusOut);\n            EventHandler.remove(this.firstBtn, 'mousedown touchstart', this.repeatHandlerMouse);\n            EventHandler.remove(this.firstBtn, 'mouseup mouseleave touchup touchend', this.repeatHandlerUp);\n            EventHandler.remove(this.secondBtn, 'mousedown touchstart', this.repeatHandlerMouse);\n            EventHandler.remove(this.secondBtn, 'mouseup mouseleave touchup touchend', this.repeatHandlerUp);\n            EventHandler.remove(this.firstBtn, 'focusout', this.sliderFocusOut);\n            EventHandler.remove(this.secondBtn, 'focusout', this.sliderFocusOut);\n        }\n    }\n    rangeBarMousedown(event) {\n        event.preventDefault();\n        this.focusSliderElement();\n        if (this.type === 'Range' && this.drag && event.target === this.rangeBar) {\n            let xPostion;\n            let yPostion;\n            if (event.type === 'mousedown') {\n                [xPostion, yPostion] = [event.clientX, event.clientY];\n            }\n            else if (event.type === 'touchstart') {\n                [xPostion, yPostion] = [event.changedTouches[0].clientX, event.changedTouches[0].clientY];\n            }\n            if (this.orientation === 'Horizontal') {\n                this.firstPartRemain = xPostion - this.rangeBar.getBoundingClientRect().left;\n                this.secondPartRemain = this.rangeBar.getBoundingClientRect().right - xPostion;\n            }\n            else {\n                this.firstPartRemain = yPostion - this.rangeBar.getBoundingClientRect().top;\n                this.secondPartRemain = this.rangeBar.getBoundingClientRect().bottom - yPostion;\n            }\n            this.minDiff = this.handleVal2 - this.handleVal1;\n            this.tooltipToggle(this.rangeBar);\n            let focusedElement = this.element.querySelector('.' + classNames.sliderTabHandle);\n            if (focusedElement) {\n                focusedElement.classList.remove(classNames.sliderTabHandle);\n            }\n            EventHandler.add(document, 'mousemove touchmove', this.dragRangeBarMove, this);\n            EventHandler.add(document, 'mouseup touchend', this.dragRangeBarUp, this);\n        }\n    }\n    elementClick(event) {\n        event.preventDefault();\n        this.focusSliderElement();\n        this.sliderBarClick(event);\n    }\n    wireEvents() {\n        this.onresize = this.reposition.bind(this);\n        window.addEventListener('resize', this.onresize);\n        if (this.enabled && !this.readonly) {\n            EventHandler.add(this.element, 'click', this.elementClick, this);\n            if (this.type === 'Range' && this.drag) {\n                EventHandler.add(this.rangeBar, 'mousedown touchstart', this.rangeBarMousedown, this);\n            }\n            EventHandler.add(this.sliderContainer, 'keydown', this.keyDown, this);\n            EventHandler.add(this.sliderContainer, 'keyup', this.keyUp, this);\n            EventHandler.add(this.element, 'focusout', this.sliderFocusOut, this);\n            EventHandler.add(this.sliderContainer, 'mouseover mouseout touchstart touchend', this.hover, this);\n            this.wireFirstHandleEvt(false);\n            if (this.type === 'Range') {\n                this.wireSecondHandleEvt(false);\n            }\n            if (this.showButtons) {\n                this.wireButtonEvt(false);\n            }\n            this.wireMaterialTooltipEvent(false);\n            if (this.isForm) {\n                EventHandler.add(this.formElement, 'reset', this.formResetHandler, this);\n            }\n        }\n    }\n    unwireEvents() {\n        EventHandler.remove(this.element, 'click', this.elementClick);\n        if (this.type === 'Range' && this.drag) {\n            EventHandler.remove(this.rangeBar, 'mousedown touchstart', this.rangeBarMousedown);\n        }\n        EventHandler.remove(this.sliderContainer, 'keydown', this.keyDown);\n        EventHandler.remove(this.sliderContainer, 'keyup', this.keyUp);\n        EventHandler.remove(this.element, 'focusout', this.sliderFocusOut);\n        EventHandler.remove(this.sliderContainer, 'mouseover mouseout touchstart touchend', this.hover);\n        this.wireFirstHandleEvt(true);\n        if (this.type === 'Range') {\n            this.wireSecondHandleEvt(true);\n        }\n        if (this.showButtons) {\n            this.wireButtonEvt(true);\n        }\n        this.wireMaterialTooltipEvent(true);\n        EventHandler.remove(this.element, 'reset', this.formResetHandler);\n    }\n    formResetHandler() {\n        this.setProperties({ 'value': this.formResetValue }, true);\n        this.setValue();\n    }\n    keyUp(event) {\n        if (event.keyCode === 9 && event.target.classList.contains(classNames.sliderHandle)) {\n            this.focusSliderElement();\n            if (!event.target.classList.contains(classNames.sliderTabHandle)) {\n                if (this.element.querySelector('.' + classNames.sliderTabHandle)) {\n                    this.element.querySelector('.' + classNames.sliderTabHandle).classList.remove(classNames.sliderTabHandle);\n                }\n                event.target.classList.add(classNames.sliderTabHandle);\n                let parentElement = event.target.parentElement;\n                if (parentElement === this.element) {\n                    parentElement.querySelector('.' + classNames.sliderTrack).classList.add(classNames.sliderTabTrack);\n                    if (this.type === 'Range' || this.type === 'MinRange') {\n                        parentElement.querySelector('.' + classNames.rangeBar).classList.add(classNames.sliderTabRange);\n                    }\n                }\n                if (this.type === 'Range') {\n                    (event.target.previousSibling).classList.contains(classNames.sliderHandle) ?\n                        this.activeHandle = 2 : this.activeHandle = 1;\n                }\n                this.getHandle().focus();\n                this.tooltipToggle(this.getHandle());\n            }\n        }\n        this.closeTooltip();\n        this.changeEvent('changed', event);\n    }\n    hover(event) {\n        if (!isNullOrUndefined(event)) {\n            if (event.type === 'mouseover' || event.type === 'touchmove' || event.type === 'mousemove' ||\n                event.type === 'pointermove' || event.type === 'touchstart') {\n                this.sliderContainer.classList.add(classNames.sliderHover);\n            }\n            else {\n                this.sliderContainer.classList.remove(classNames.sliderHover);\n            }\n        }\n    }\n    sliderFocusOut(event) {\n        if (event.relatedTarget !== this.secondHandle && event.relatedTarget !== this.firstHandle &&\n            event.relatedTarget !== this.element && event.relatedTarget !== this.firstBtn && event.relatedTarget !== this.secondBtn) {\n            this.closeMaterialTooltip();\n            if (this.element.querySelector('.' + classNames.sliderTabHandle)) {\n                this.element.querySelector('.' + classNames.sliderTabHandle).classList.remove(classNames.sliderTabHandle);\n            }\n            if (this.element.querySelector('.' + classNames.sliderTabTrack)) {\n                this.element.querySelector('.' + classNames.sliderTabTrack).classList.remove(classNames.sliderTabTrack);\n                if ((this.type === 'Range' || this.type === 'MinRange') &&\n                    this.element.querySelector('.' + classNames.sliderTabRange)) {\n                    this.element.querySelector('.' + classNames.sliderTabRange).classList.remove(classNames.sliderTabRange);\n                }\n            }\n            this.hiddenInput.focus();\n            this.hiddenInput.blur();\n            this.isElementFocused = false;\n        }\n    }\n    removeElement(element) {\n        if (element.parentNode) {\n            element.parentNode.removeChild(element);\n        }\n    }\n    changeSliderType(type, args) {\n        if (this.isMaterialTooltip && this.materialHandle) {\n            this.sliderContainer.classList.remove(classNames.materialSlider);\n            this.removeElement(this.materialHandle);\n            this.materialHandle = undefined;\n        }\n        this.removeElement(this.firstHandle);\n        this.firstHandle = undefined;\n        if (type !== 'Default') {\n            if (type === 'Range') {\n                this.removeElement(this.secondHandle);\n                this.secondHandle = undefined;\n            }\n            this.removeElement(this.rangeBar);\n            this.rangeBar = undefined;\n        }\n        if (this.tooltip.isVisible && !isNullOrUndefined(this.tooltipObj)) {\n            this.tooltipObj.destroy();\n            this.tooltipElement = undefined;\n            this.tooltipCollidedPosition = undefined;\n        }\n        if (this.limits.enabled) {\n            if (type === 'MinRange' || type === 'Default') {\n                if (!isNullOrUndefined(this.limitBarFirst)) {\n                    this.removeElement(this.limitBarFirst);\n                    this.limitBarFirst = undefined;\n                }\n            }\n            else {\n                if (!isNullOrUndefined(this.limitBarSecond)) {\n                    this.removeElement(this.limitBarSecond);\n                    this.limitBarSecond = undefined;\n                }\n            }\n        }\n        this.activeHandle = 1;\n        this.getThemeInitialization();\n        if (this.type === 'Range') {\n            this.rangeValueUpdate();\n        }\n        this.createRangeBar();\n        if (this.limits.enabled) {\n            this.createLimitBar();\n        }\n        this.setHandler();\n        this.setOrientClass();\n        this.wireFirstHandleEvt(false);\n        if (this.type === 'Range') {\n            this.wireSecondHandleEvt(false);\n        }\n        this.setValue();\n        if (this.tooltip.isVisible) {\n            this.renderTooltip();\n            this.wireMaterialTooltipEvent(false);\n        }\n        this.setBarColor();\n        if ((!isBlazor() && !this.isServerRendered) || args !== 'tooltip') {\n            this.updateConfig();\n        }\n    }\n    changeRtl() {\n        if (!this.enableRtl && this.type === 'Range') {\n            this.value = [this.handleVal2, this.handleVal1];\n        }\n        this.updateConfig();\n        if (this.tooltip.isVisible) {\n            this.tooltipObj.refresh(this.firstHandle);\n        }\n        if (this.showButtons) {\n            let enabledRTL = this.enableRtl && this.orientation !== 'Vertical';\n            attributes(enabledRTL ? this.secondBtn : this.firstBtn, { 'aria-label': 'Decrease', title: 'Decrease' });\n            attributes(enabledRTL ? this.firstBtn : this.secondBtn, { 'aria-label': 'Increase', title: 'Increase' });\n        }\n    }\n    changeOrientation() {\n        this.changeSliderType(this.type, 'null');\n    }\n    updateConfig() {\n        this.setEnableRTL();\n        this.setValue();\n        if (this.tooltip.isVisible) {\n            if (!isBlazor()) {\n                this.refreshTooltip(this.tooltipTarget);\n            }\n        }\n        if (this.ticks.placement !== 'None') {\n            if (this.ul) {\n                this.removeElement(this.ul);\n                this.ul = undefined;\n                this.renderScale();\n            }\n        }\n        this.limitsPropertyChange();\n    }\n    limitsPropertyChange() {\n        if (this.limits.enabled) {\n            if (isNullOrUndefined(this.limitBarFirst) && this.type !== 'Range') {\n                this.createLimitBar();\n            }\n            if (isNullOrUndefined(this.limitBarFirst) && isNullOrUndefined(this.limitBarSecond) && this.type === 'Range') {\n                this.createLimitBar();\n            }\n            this.setLimitBar();\n            this.setValue();\n        }\n        else {\n            if (!isNullOrUndefined(this.limitBarFirst)) {\n                detach(this.limitBarFirst);\n            }\n            if (!isNullOrUndefined(this.limitBarSecond)) {\n                detach(this.limitBarSecond);\n            }\n        }\n    }\n    /**\n     * Get the properties to be maintained in the persisted state.\n     * @private\n     */\n    getPersistData() {\n        let keyEntity = ['value'];\n        return this.addOnPersist(keyEntity);\n    }\n    /**\n     * Removes the component from the DOM and detaches all its related event handlers.\n     * Also it removes the attributes and classes.\n     * @method destroy\n     * @return {void}\n     */\n    destroy() {\n        super.destroy();\n        this.unwireEvents();\n        window.removeEventListener('resize', this.onresize);\n        removeClass([this.sliderContainer], [classNames.sliderDisabled]);\n        this.firstHandle.removeAttribute('aria-orientation');\n        if (this.type === 'Range') {\n            this.secondHandle.removeAttribute('aria-orientation');\n        }\n        if (!isBlazor() && !this.isServerRendered) {\n            this.sliderContainer.parentNode.insertBefore(this.element, this.sliderContainer);\n            detach(this.sliderContainer);\n        }\n        if (this.tooltip.isVisible) {\n            this.tooltipObj.destroy();\n        }\n        if (!isBlazor() && !this.isServerRendered) {\n            this.element.innerHTML = '';\n        }\n    }\n    /**\n     * Calls internally if any of the property value is changed.\n     * @private\n     */\n    // tslint:disable-next-line\n    onPropertyChanged(newProp, oldProp) {\n        for (let prop of Object.keys(newProp)) {\n            switch (prop) {\n                case 'cssClass':\n                    this.setCSSClass(oldProp.cssClass);\n                    break;\n                case 'value':\n                    if (newProp && oldProp) {\n                        let value = isNullOrUndefined(newProp.value) ?\n                            (this.type === 'Range' ? [this.min, this.max] : this.min) : newProp.value;\n                        this.setProperties({ 'value': value }, true);\n                        if (!isNullOrUndefined(oldProp.value) && oldProp.value.toString() !== value.toString()) {\n                            this.setValue();\n                            if (!isBlazor() || !this.isServerRendered) {\n                                this.refreshTooltip(this.tooltipTarget);\n                            }\n                            if (this.type === 'Range') {\n                                if (isNullOrUndefined(newProp.value) || oldProp.value[1] === value[1]) {\n                                    this.activeHandle = 1;\n                                }\n                                else {\n                                    this.activeHandle = 2;\n                                }\n                            }\n                        }\n                    }\n                    break;\n                case 'min':\n                case 'step':\n                case 'max':\n                    if (isBlazor() && this.isServerRendered) {\n                        this.isServerRendered = false;\n                    }\n                    this.setMinMaxValue();\n                    if (isBlazor() && !this.isServerRendered) {\n                        this.isServerRendered = true;\n                    }\n                    break;\n                case 'tooltip':\n                    if (isBlazor() && this.isServerRendered) {\n                        this.isServerRendered = false;\n                    }\n                    if (!isNullOrUndefined(newProp.tooltip) && !isNullOrUndefined(oldProp.tooltip)) {\n                        this.setTooltip(prop);\n                    }\n                    if (isBlazor() && !this.isServerRendered) {\n                        this.isServerRendered = true;\n                    }\n                    break;\n                case 'type':\n                    if (isBlazor() && this.isServerRendered) {\n                        this.isServerRendered = false;\n                    }\n                    if (!isNullOrUndefined(oldProp) && Object.keys(oldProp).length\n                        && !isNullOrUndefined(oldProp.type)) {\n                        this.changeSliderType(oldProp.type, prop);\n                        this.setZindex();\n                    }\n                    if (isBlazor() && !this.isServerRendered) {\n                        this.isServerRendered = true;\n                    }\n                    break;\n                case 'enableRtl':\n                    if (isBlazor() && this.isServerRendered) {\n                        if (this.isMaterialTooltip) {\n                            this.sliderContainer.classList.add(classNames.materialSlider);\n                        }\n                        this.isServerRendered = false;\n                    }\n                    if (oldProp.enableRtl !== newProp.enableRtl && this.orientation !== 'Vertical') {\n                        this.rtl = oldProp.enableRtl;\n                        this.changeRtl();\n                    }\n                    if (isBlazor() && !this.isServerRendered) {\n                        this.isServerRendered = true;\n                    }\n                    break;\n                case 'limits':\n                    this.limitsPropertyChange();\n                    break;\n                case 'orientation':\n                    if (isBlazor() && this.isServerRendered) {\n                        this.isServerRendered = false;\n                    }\n                    this.changeOrientation();\n                    if (isBlazor() && !this.isServerRendered) {\n                        this.isServerRendered = true;\n                    }\n                    break;\n                case 'ticks':\n                    if (!isNullOrUndefined(this.sliderContainer.querySelector('.' + classNames.scale))) {\n                        if (!isBlazor() || !this.isServerRendered) {\n                            detach(this.ul);\n                        }\n                        Array.prototype.forEach.call(this.sliderContainer.classList, (className) => {\n                            if (className.match(/e-scale-/)) {\n                                this.sliderContainer.classList.remove(className);\n                            }\n                        });\n                    }\n                    if (this.ticks.placement !== 'None') {\n                        this.renderScale();\n                        this.setZindex();\n                    }\n                    break;\n                case 'locale':\n                    if (this.showButtons) {\n                        this.buttonTitle();\n                    }\n                    break;\n                case 'showButtons':\n                    if (newProp.showButtons) {\n                        this.setButtons();\n                        this.reposition();\n                        if (this.enabled && !this.readonly) {\n                            this.wireButtonEvt(false);\n                        }\n                    }\n                    else {\n                        if (!isBlazor() || !this.isServerRendered) {\n                            if (this.firstBtn && this.secondBtn) {\n                                this.sliderContainer.removeChild(this.firstBtn);\n                                this.sliderContainer.removeChild(this.secondBtn);\n                                this.sliderContainer.classList.remove(classNames.sliderButtonClass);\n                                this.firstBtn = undefined;\n                                this.secondBtn = undefined;\n                                this.reposition();\n                            }\n                        }\n                    }\n                    if (isBlazor() && this.isServerRendered) {\n                        if (this.isMaterialTooltip) {\n                            this.sliderContainer.classList.add(classNames.materialSlider);\n                        }\n                    }\n                    break;\n                case 'enabled':\n                    this.setEnabled();\n                    if (isBlazor() && this.isServerRendered) {\n                        if (this.isMaterialTooltip) {\n                            this.sliderContainer.classList.add(classNames.materialSlider);\n                        }\n                    }\n                    break;\n                case 'readonly':\n                    this.setReadOnly();\n                    if (isBlazor() && this.isServerRendered) {\n                        if (this.isMaterialTooltip) {\n                            this.sliderContainer.classList.add(classNames.materialSlider);\n                        }\n                    }\n                    break;\n                case 'customValues':\n                    if (isBlazor() && this.isServerRendered) {\n                        this.isServerRendered = false;\n                    }\n                    this.setValue();\n                    this.reposition();\n                    if (isBlazor() && !this.isServerRendered) {\n                        this.isServerRendered = true;\n                    }\n                    break;\n                case 'colorRange':\n                    if (isBlazor() && this.isServerRendered) {\n                        this.isServerRendered = false;\n                    }\n                    this.reposition();\n                    if (isBlazor() && !this.isServerRendered) {\n                        this.isServerRendered = true;\n                    }\n                    break;\n                case 'width':\n                    this.setElementWidth(newProp.width);\n                    this.setMinMaxValue();\n                    if (this.limits) {\n                        this.limitsPropertyChange();\n                    }\n                    break;\n            }\n        }\n    }\n    setReadOnly() {\n        if (this.readonly) {\n            this.unwireEvents();\n            this.sliderContainer.classList.add(classNames.readonly);\n        }\n        else {\n            this.wireEvents();\n            this.sliderContainer.classList.remove(classNames.readonly);\n        }\n    }\n    setMinMaxValue() {\n        this.setValue();\n        if (!isBlazor()) {\n            this.refreshTooltip(this.tooltipTarget);\n        }\n        if (!isNullOrUndefined(this.sliderContainer.querySelector('.' + classNames.scale))) {\n            if (this.ul) {\n                detach(this.ul);\n                Array.prototype.forEach.call(this.sliderContainer.classList, (className) => {\n                    if (className.match(/e-scale-/)) {\n                        this.sliderContainer.classList.remove(className);\n                    }\n                });\n            }\n        }\n        if (this.ticks.placement !== 'None') {\n            this.renderScale();\n            this.setZindex();\n        }\n    }\n    setZindex() {\n        this.zIndex = 6;\n        if (!isNullOrUndefined(this.ticks) && this.ticks.placement !== 'None') {\n            this.ul.style.zIndex = (this.zIndex + -7) + '';\n            this.element.style.zIndex = (this.zIndex + 2) + '';\n        }\n        if (!this.isMaterial && !isNullOrUndefined(this.ticks) && this.ticks.placement === 'Both') {\n            this.element.style.zIndex = (this.zIndex + 2) + '';\n        }\n        this.firstHandle.style.zIndex = (this.zIndex + 3) + '';\n        if (this.type === 'Range') {\n            this.secondHandle.style.zIndex = (this.zIndex + 4) + '';\n        }\n    }\n    setTooltip(args) {\n        this.changeSliderType(this.type, args);\n    }\n    setBarColor() {\n        let trackPosition;\n        let trackClassName;\n        let child = this.sliderTrack.lastElementChild;\n        while (child) {\n            this.sliderTrack.removeChild(child);\n            child = this.sliderTrack.lastElementChild;\n        }\n        for (let i = 0; i < this.colorRange.length; i++) {\n            if (!isNullOrUndefined(this.colorRange[i].start) && !isNullOrUndefined(this.colorRange[i].end)) {\n                if (this.colorRange[i].end > this.colorRange[i].start) {\n                    if (this.colorRange[i].start < this.min) {\n                        this.colorRange[i].start = this.min;\n                    }\n                    if (this.colorRange[i].end > this.max) {\n                        this.colorRange[i].end = this.max;\n                    }\n                    let startingPosition = this.checkHandlePosition(this.colorRange[i].start);\n                    let endPosition = this.checkHandlePosition(this.colorRange[i].end);\n                    let trackContainer = this.createElement('div');\n                    trackContainer.style.backgroundColor = this.colorRange[i].color;\n                    trackContainer.style.border = '1px solid ' + this.colorRange[i].color;\n                    if (this.orientation === 'Horizontal') {\n                        trackClassName = classNames.sliderHorizantalColor;\n                        if (this.enableRtl) {\n                            if (isNullOrUndefined(this.customValues)) {\n                                trackPosition = this.checkHandlePosition(this.max) - this.checkHandlePosition(this.colorRange[i].end);\n                            }\n                            else {\n                                trackPosition = this.checkHandlePosition(this.customValues.length - this.colorRange[i].end - 1);\n                            }\n                        }\n                        else {\n                            trackPosition = this.checkHandlePosition(this.colorRange[i].start);\n                        }\n                        trackContainer.style.width = endPosition - startingPosition + 'px';\n                        trackContainer.style.left = trackPosition + 'px';\n                    }\n                    else {\n                        trackClassName = classNames.sliderVerticalColor;\n                        trackPosition = this.checkHandlePosition(this.colorRange[i].start);\n                        trackContainer.style.height = endPosition - startingPosition + 'px';\n                        trackContainer.style.bottom = trackPosition + 'px';\n                    }\n                    trackContainer.classList.add(trackClassName);\n                    this.sliderTrack.appendChild(trackContainer);\n                }\n            }\n        }\n    }\n    /**\n     * Gets the component name\n     * @private\n     */\n    getModuleName() {\n        return 'slider';\n    }\n};\n__decorate$2([\n    Property(null)\n], Slider.prototype, \"value\", void 0);\n__decorate$2([\n    Property(null)\n], Slider.prototype, \"customValues\", void 0);\n__decorate$2([\n    Property(1)\n], Slider.prototype, \"step\", void 0);\n__decorate$2([\n    Property(null)\n], Slider.prototype, \"width\", void 0);\n__decorate$2([\n    Property(0)\n], Slider.prototype, \"min\", void 0);\n__decorate$2([\n    Property(100)\n], Slider.prototype, \"max\", void 0);\n__decorate$2([\n    Property(false)\n], Slider.prototype, \"readonly\", void 0);\n__decorate$2([\n    Property('Default')\n], Slider.prototype, \"type\", void 0);\n__decorate$2([\n    Collection([{}], ColorRangeData)\n], Slider.prototype, \"colorRange\", void 0);\n__decorate$2([\n    Complex({}, TicksData)\n], Slider.prototype, \"ticks\", void 0);\n__decorate$2([\n    Complex({}, LimitData)\n], Slider.prototype, \"limits\", void 0);\n__decorate$2([\n    Property(true)\n], Slider.prototype, \"enabled\", void 0);\n__decorate$2([\n    Complex({}, TooltipData)\n], Slider.prototype, \"tooltip\", void 0);\n__decorate$2([\n    Property(false)\n], Slider.prototype, \"showButtons\", void 0);\n__decorate$2([\n    Property(true)\n], Slider.prototype, \"enableAnimation\", void 0);\n__decorate$2([\n    Property('Horizontal')\n], Slider.prototype, \"orientation\", void 0);\n__decorate$2([\n    Property('')\n], Slider.prototype, \"cssClass\", void 0);\n__decorate$2([\n    Property(false)\n], Slider.prototype, \"enableHtmlSanitizer\", void 0);\n__decorate$2([\n    Event()\n], Slider.prototype, \"created\", void 0);\n__decorate$2([\n    Event()\n], Slider.prototype, \"change\", void 0);\n__decorate$2([\n    Event()\n], Slider.prototype, \"changed\", void 0);\n__decorate$2([\n    Event()\n], Slider.prototype, \"renderingTicks\", void 0);\n__decorate$2([\n    Event()\n], Slider.prototype, \"renderedTicks\", void 0);\n__decorate$2([\n    Event()\n], Slider.prototype, \"tooltipChange\", void 0);\nSlider = __decorate$2([\n    NotifyPropertyChanges\n], Slider);\n\n/**\n * Slider modules\n */\n\nvar __decorate$3 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar FormValidator_1;\n/**\n * global declarations\n */\n// tslint:disable-next-line:no-any\nlet regex = {\n    EMAIL: new RegExp('^[A-Za-z0-9._%+-]{1,}@[A-Za-z0-9._%+-]{1,}([.]{1}[a-zA-Z0-9]{2,}' +\n        '|[.]{1}[a-zA-Z0-9]{2,4}[.]{1}[a-zA-Z0-9]{2,4})$'),\n    URL: /^(?:http(s)?:\\/\\/)?[\\w.-]+(?:\\.[\\w\\.-]+)+[\\w\\-\\._~:/?#[\\]@!\\$&'\\(\\)\\*\\+,;=.]+$/m,\n    DATE_ISO: new RegExp('^([0-9]{4})-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$'),\n    DIGITS: new RegExp('^[0-9]*$'),\n    PHONE: new RegExp('^[+]?[0-9]{9,13}$'),\n    CREDITCARD: new RegExp('^\\\\d{13,16}$')\n};\n/**\n * ErrorOption values\n * @private\n */\nvar ErrorOption;\n(function (ErrorOption) {\n    /**\n     * Defines the error message.\n     */\n    ErrorOption[ErrorOption[\"Message\"] = 0] = \"Message\";\n    /**\n     * Defines the error element type.\n     */\n    ErrorOption[ErrorOption[\"Label\"] = 1] = \"Label\";\n})(ErrorOption || (ErrorOption = {}));\n/**\n * FormValidator class enables you to validate the form fields based on your defined rules\n * ```html\n * <form id='formId'>\n *  <input type='text' name='Name' />\n *  <input type='text' name='Age' />\n * </form>\n * <script>\n *   let formObject = new FormValidator('#formId', {\n *      rules: { Name: { required: true }, Age: { range: [18, 30] } };\n *   });\n *   formObject.validate();\n * </script>\n * ```\n */\nlet FormValidator = FormValidator_1 = class FormValidator extends Base {\n    // Initializes the FormValidator \n    constructor(element, options) {\n        super(options, element);\n        this.validated = [];\n        this.errorRules = [];\n        this.allowSubmit = false;\n        this.required = 'required';\n        this.infoElement = null;\n        this.inputElement = null;\n        this.selectQuery = 'input:not([type=reset]):not([type=button]), select, textarea';\n        // tslint:disable-next-line:no-any\n        this.localyMessage = {};\n        /**\n         * Specifies the default messages for validation rules.\n         * @default { List of validation message }\n         */\n        this.defaultMessages = {\n            required: 'This field is required.',\n            email: 'Please enter a valid email address.',\n            url: 'Please enter a valid URL.',\n            date: 'Please enter a valid date.',\n            dateIso: 'Please enter a valid date ( ISO ).',\n            creditcard: 'Please enter valid card number',\n            number: 'Please enter a valid number.',\n            digits: 'Please enter only digits.',\n            maxLength: 'Please enter no more than {0} characters.',\n            minLength: 'Please enter at least {0} characters.',\n            rangeLength: 'Please enter a value between {0} and {1} characters long.',\n            range: 'Please enter a value between {0} and {1}.',\n            max: 'Please enter a value less than or equal to {0}.',\n            min: 'Please enter a value greater than or equal to {0}.',\n            regex: 'Please enter a correct value.',\n            tel: 'Please enter a valid phone number.',\n            pattern: 'Please enter a correct pattern value.',\n            equalTo: 'Please enter the valid match text',\n        };\n        if (typeof this.rules === 'undefined') {\n            this.rules = {};\n        }\n        this.l10n = new L10n('formValidator', this.defaultMessages, this.locale);\n        if (this.locale) {\n            this.localeFunc();\n        }\n        onIntlChange.on('notifyExternalChange', this.afterLocalization, this);\n        element = typeof element === 'string' ? select(element, document) : element;\n        // Set novalidate to prevent default HTML5 form validation\n        if (this.element != null) {\n            this.element.setAttribute('novalidate', '');\n            this.inputElements = selectAll(this.selectQuery, this.element);\n            this.createHTML5Rules();\n            this.wireEvents();\n        }\n        else {\n            return undefined;\n        }\n    }\n    // tslint:enable\n    /**\n     * Add validation rules to the corresponding input element based on `name` attribute.\n     * @param {string} name `name` of form field.\n     * @param {Object} rules Validation rules for the corresponding element.\n     * @return {void}\n     */\n    addRules(name, rules) {\n        if (name) {\n            if (this.rules.hasOwnProperty(name)) {\n                extend(this.rules[name], rules, {});\n            }\n            else {\n                this.rules[name] = rules;\n            }\n        }\n    }\n    /**\n     * Remove validation to the corresponding field based on name attribute.\n     * When no parameter is passed, remove all the validations in the form.\n     * @param {string} name Input name attribute value.\n     * @param {string[]} rules List of validation rules need to be remove from the corresponding element.\n     * @return {void}\n     */\n    removeRules(name, rules) {\n        if (!name && !rules) {\n            this.rules = {};\n        }\n        else if (this.rules[name] && !rules) {\n            delete this.rules[name];\n        }\n        else if (!isNullOrUndefined(this.rules[name] && rules)) {\n            for (let i = 0; i < rules.length; i++) {\n                delete this.rules[name][rules[i]];\n            }\n        }\n        else {\n            return;\n        }\n    }\n    /**\n     * Validate the current form values using defined rules.\n     * Returns `true` when the form is valid otherwise `false`\n     * @param {string} selected - Optional parameter to validate specified element.\n     * @return {boolean}\n     */\n    validate(selected) {\n        let rules = Object.keys(this.rules);\n        if (selected && rules.length) {\n            this.validateRules(selected);\n            //filter the selected element it don't have any valid input element\n            return rules.indexOf(selected) !== -1 && this.errorRules.filter((data) => {\n                return data.name === selected;\n            }).length === 0;\n        }\n        else {\n            this.errorRules = [];\n            for (let name of rules) {\n                this.validateRules(name);\n            }\n            return this.errorRules.length === 0;\n        }\n    }\n    /**\n     * Reset the value of all the fields in form.\n     * @return {void}\n     */\n    reset() {\n        this.element.reset();\n        this.clearForm();\n    }\n    /**\n     * Get input element by name.\n     * @param {string} name - Input element name attribute value.\n     * @return {HTMLInputElement}\n     */\n    getInputElement(name) {\n        this.inputElement = (select('[name=\"' + name + '\"]', this.element));\n        return this.inputElement;\n    }\n    /**\n     * Destroy the form validator object and error elements.\n     * @return {void}\n     */\n    destroy() {\n        this.reset();\n        this.unwireEvents();\n        this.rules = {};\n        let elements = selectAll('.' + this.errorClass + ', .' + this.validClass, this.element);\n        for (let element of elements) {\n            detach(element);\n        }\n        super.destroy();\n        onIntlChange.off('notifyExternalChange', this.afterLocalization);\n    }\n    /**\n     * @private\n     */\n    onPropertyChanged(newProp, oldProp) {\n        for (let prop of Object.keys(newProp)) {\n            switch (prop) {\n                case 'locale':\n                    this.localeFunc();\n                    break;\n            }\n        }\n    }\n    ;\n    /**\n     * @private\n     */\n    localeFunc() {\n        for (let key of Object.keys(this.defaultMessages)) {\n            this.l10n.setLocale(this.locale);\n            let value = this.l10n.getConstant(key);\n            this.localyMessage[key] = value;\n        }\n    }\n    /**\n     * @private\n     */\n    getModuleName() {\n        return 'formValidator';\n    }\n    /**\n     * @private\n     */\n    // tslint:disable-next-line:no-any\n    afterLocalization(args) {\n        this.locale = args.locale;\n        this.localeFunc();\n    }\n    /**\n     * Allows you to refresh the form validator base events to the elements inside the form.\n     * @return {void}\n     */\n    refresh() {\n        this.unwireEvents();\n        this.inputElements = selectAll(this.selectQuery, this.element);\n        this.wireEvents();\n    }\n    clearForm() {\n        this.errorRules = [];\n        this.validated = [];\n        let elements = selectAll(this.selectQuery, this.element);\n        for (let element of elements) {\n            let input = element;\n            input.removeAttribute('aria-invalid');\n            input.classList.remove(this.errorClass);\n            if (input.name.length > 0) {\n                this.getInputElement(input.name);\n                this.getErrorElement(input.name);\n                this.hideMessage(input.name);\n            }\n            input.classList.remove(this.validClass);\n        }\n    }\n    createHTML5Rules() {\n        let defRules = ['required', 'validateHidden', 'regex', 'rangeLength', 'maxLength', 'minLength', 'dateIso', 'digits',\n            'pattern', 'data-val-required', 'type', 'data-validation', 'min', 'max', 'range', 'equalTo', 'data-val-minlength-min',\n            'data-val-equalto-other', 'data-val-maxlength-max', 'data-val-range-min', 'data-val-regex-pattern', 'data-val-length-max',\n            'data-val-creditcard', 'data-val-phone'];\n        let acceptedTypes = ['hidden', 'email', 'url', 'date', 'number', 'tel'];\n        for (let input of (this.inputElements)) {\n            // Default attribute rules \n            let allRule = {};\n            for (let rule of defRules) {\n                if (input.getAttribute(rule) !== null) {\n                    switch (rule) {\n                        case 'required':\n                            this.defRule(input, allRule, rule, input.required);\n                            break;\n                        case 'data-validation':\n                            rule = input.getAttribute(rule);\n                            this.defRule(input, allRule, rule, true);\n                            break;\n                        case 'type':\n                            if (acceptedTypes.indexOf(input.type) !== -1) {\n                                this.defRule(input, allRule, input.type, true);\n                            }\n                            break;\n                        case 'rangeLength':\n                        case 'range':\n                            this.defRule(input, allRule, rule, JSON.parse(input.getAttribute(rule)));\n                            break;\n                        case 'equalTo':\n                            let id = input.getAttribute(rule);\n                            this.defRule(input, allRule, rule, id);\n                            break;\n                        default:\n                            if (input.getAttribute('data-val') === 'true') {\n                                this.annotationRule(input, allRule, rule, input.getAttribute(rule));\n                            }\n                            else {\n                                this.defRule(input, allRule, rule, input.getAttribute(rule));\n                            }\n                    }\n                }\n            }\n            //adding pattern type validation\n            if (Object.keys(allRule).length !== 0) {\n                this.addRules(input.name, allRule);\n            }\n        }\n    }\n    annotationRule(input, ruleCon, ruleName, value) {\n        let annotationRule = ruleName.split('-');\n        let rulesList = ['required', 'creditcard', 'phone', 'maxlength', 'minlength', 'range', 'regex', 'equalto'];\n        let ruleFirstName = annotationRule[annotationRule.length - 1];\n        let ruleSecondName = annotationRule[annotationRule.length - 2];\n        if (rulesList.indexOf(ruleFirstName) !== -1) {\n            switch (ruleFirstName) {\n                case 'required':\n                    this.defRule(input, ruleCon, 'required', value);\n                    break;\n                case 'creditcard':\n                    this.defRule(input, ruleCon, 'creditcard', value);\n                    break;\n                case 'phone':\n                    this.defRule(input, ruleCon, 'tel', value);\n                    break;\n            }\n        }\n        else if (rulesList.indexOf(ruleSecondName) !== -1) {\n            switch (ruleSecondName) {\n                case 'maxlength':\n                    this.defRule(input, ruleCon, 'maxLength', value);\n                    break;\n                case 'minlength':\n                    this.defRule(input, ruleCon, 'minLength', value);\n                    break;\n                case 'range':\n                    let minvalue = input.getAttribute('data-val-range-min');\n                    let maxvalue = input.getAttribute('data-val-range-max');\n                    this.defRule(input, ruleCon, 'range', [minvalue, maxvalue]);\n                    break;\n                case 'equalto':\n                    let id = input.getAttribute(ruleName).split('.');\n                    this.defRule(input, ruleCon, 'equalTo', id[id.length - 1]);\n                    break;\n                case 'regex':\n                    this.defRule(input, ruleCon, 'regex', value);\n                    break;\n            }\n        }\n    }\n    defRule(input, ruleCon, ruleName, value) {\n        let message = input.getAttribute('data-' + ruleName + '-message');\n        let annotationMessage = input.getAttribute('data-val-' + ruleName);\n        let customMessage;\n        if (this.rules[input.name] && ruleName !== 'validateHidden' && ruleName !== 'hidden') {\n            this.getInputElement(input.name);\n            customMessage = this.getErrorMessage(this.rules[input.name][ruleName], ruleName);\n        }\n        if (message) {\n            value = [value, message];\n        }\n        else if (annotationMessage) {\n            value = [value, annotationMessage];\n        }\n        else if (customMessage) {\n            value = [value, customMessage];\n        }\n        ruleCon[ruleName] = value;\n    }\n    // Wire events to the form elements\n    wireEvents() {\n        for (let input of (this.inputElements)) {\n            if (FormValidator_1.isCheckable(input)) {\n                EventHandler.add(input, 'click', this.clickHandler, this);\n            }\n            else if (input.tagName === 'SELECT') {\n                EventHandler.add(input, 'change', this.changeHandler, this);\n            }\n            else {\n                EventHandler.add(input, 'focusout', this.focusOutHandler, this);\n                EventHandler.add(input, 'keyup', this.keyUpHandler, this);\n            }\n        }\n        EventHandler.add(this.element, 'submit', this.submitHandler, this);\n        EventHandler.add(this.element, 'reset', this.resetHandler, this);\n    }\n    // UnWire events to the form elements\n    unwireEvents() {\n        for (let input of (this.inputElements)) {\n            EventHandler.clearEvents(input);\n        }\n        EventHandler.remove(this.element, 'submit', this.submitHandler);\n        EventHandler.remove(this.element, 'reset', this.resetHandler);\n    }\n    // Handle input element focusout event\n    focusOutHandler(e) {\n        this.trigger('focusout', e);\n        //FormValidator.triggerCallback(this.focusout, e);\n        let element = e.target;\n        if (this.rules[element.name]) {\n            if (this.rules[element.name][this.required] || element.value.length > 0) {\n                this.validate(element.name);\n            }\n            else if (this.validated.indexOf(element.name) === -1) {\n                this.validated.push(element.name);\n            }\n        }\n    }\n    // Handle input element keyup event\n    keyUpHandler(e) {\n        this.trigger('keyup', e);\n        let element = e.target;\n        // List of keys need to prevent while validation\n        let excludeKeys = [16, 17, 18, 20, 35, 36, 37, 38, 39, 40, 45, 144, 225];\n        if (e.which === 9 && (!this.rules[element.name] || (this.rules[element.name] && !this.rules[element.name][this.required]))) {\n            return;\n        }\n        if (this.validated.indexOf(element.name) !== -1 && this.rules[element.name] && excludeKeys.indexOf(e.which) === -1) {\n            this.validate(element.name);\n        }\n    }\n    // Handle input click event\n    clickHandler(e) {\n        this.trigger('click', e);\n        let element = e.target;\n        // If element type is not submit allow validation\n        if (element.type !== 'submit') {\n            this.validate(element.name);\n        }\n        else if (element.getAttribute('formnovalidate') !== null) {\n            // Prevent form validation, if submit button has formnovalidate attribute\n            this.allowSubmit = true;\n        }\n    }\n    // Handle input change event\n    changeHandler(e) {\n        this.trigger('change', e);\n        let element = e.target;\n        this.validate(element.name);\n    }\n    // Handle form submit event\n    submitHandler(e) {\n        this.trigger('submit', e);\n        //FormValidator.triggerCallback(this.submit, e);\n        // Prevent form submit if validation failed\n        if (!this.allowSubmit && !this.validate()) {\n            e.preventDefault();\n        }\n        else {\n            this.allowSubmit = false;\n        }\n    }\n    // Handle form reset\n    resetHandler() {\n        this.clearForm();\n    }\n    // Validate each rule based on input element name\n    validateRules(name) {\n        if (!this.rules[name]) {\n            return;\n        }\n        let rules = Object.keys(this.rules[name]);\n        let hiddenType = false;\n        let validateHiddenType = false;\n        let vhPos = rules.indexOf('validateHidden');\n        let hPos = rules.indexOf('hidden');\n        this.getInputElement(name);\n        if (hPos !== -1) {\n            hiddenType = true;\n        }\n        if (vhPos !== -1) {\n            validateHiddenType = true;\n        }\n        if (!hiddenType || (hiddenType && validateHiddenType)) {\n            if (vhPos !== -1) {\n                rules.splice(vhPos, 1);\n            }\n            if (hPos !== -1) {\n                rules.splice((hPos - 1), 1);\n            }\n            this.getErrorElement(name);\n            for (let rule of rules) {\n                let errorMessage = this.getErrorMessage(this.rules[name][rule], rule);\n                let errorRule = { name: name, message: errorMessage };\n                let eventArgs = {\n                    inputName: name,\n                    element: this.inputElement,\n                    message: errorMessage\n                };\n                if (!this.isValid(name, rule) && !this.inputElement.classList.contains(this.ignore)) {\n                    this.removeErrorRules(name);\n                    this.errorRules.push(errorRule);\n                    // Set aria attributes to invalid elements\n                    this.inputElement.setAttribute('aria-invalid', 'true');\n                    this.inputElement.setAttribute('aria-describedby', this.inputElement.id + '-info');\n                    this.inputElement.classList.add(this.errorClass);\n                    this.inputElement.classList.remove(this.validClass);\n                    if (!this.infoElement) {\n                        this.createErrorElement(name, errorRule.message, this.inputElement);\n                    }\n                    else {\n                        this.showMessage(errorRule);\n                    }\n                    eventArgs.errorElement = this.infoElement;\n                    eventArgs.status = 'failure';\n                    this.inputElement.classList.add(this.errorClass);\n                    this.inputElement.classList.remove(this.validClass);\n                    this.optionalValidationStatus(name, eventArgs);\n                    this.trigger('validationComplete', eventArgs);\n                    // Set aria-required to required rule elements\n                    if (rule === 'required') {\n                        this.inputElement.setAttribute('aria-required', 'true');\n                    }\n                    break;\n                }\n                else {\n                    this.hideMessage(name);\n                    eventArgs.status = 'success';\n                    this.trigger('validationComplete', eventArgs);\n                }\n            }\n        }\n        else {\n            return;\n        }\n    }\n    // Update the optional validation status\n    optionalValidationStatus(name, refer) {\n        if (!this.rules[name][this.required] && !this.inputElement.value.length && !isNullOrUndefined(this.infoElement)) {\n            this.infoElement.innerHTML = this.inputElement.value;\n            this.infoElement.setAttribute('aria-invalid', 'false');\n            refer.status = '';\n            this.hideMessage(name);\n        }\n    }\n    // Check the input element whether it's value satisfy the validation rule or not\n    isValid(name, rule) {\n        let params = this.rules[name][rule];\n        let param = (params instanceof Array && typeof params[1] === 'string') ? params[0] : params;\n        let currentRule = this.rules[name][rule];\n        let args = { value: this.inputElement.value, param: param, element: this.inputElement, formElement: this.element };\n        this.trigger('validationBegin', args);\n        if (currentRule && typeof currentRule[0] === 'function') {\n            let fn = currentRule[0];\n            return fn.call(this, { element: this.inputElement, value: this.inputElement.value });\n        }\n        else if (FormValidator_1.isCheckable(this.inputElement)) {\n            if (rule !== 'required') {\n                return true;\n            }\n            return selectAll('input[name=' + name + ']:checked', this.element).length > 0;\n        }\n        else {\n            return FormValidator_1.checkValidator[rule](args);\n        }\n    }\n    // Return default error message or custom error message \n    getErrorMessage(ruleValue, rule) {\n        let message = this.inputElement.getAttribute('data-' + rule + '-message') ?\n            this.inputElement.getAttribute('data-' + rule + '-message') :\n            (ruleValue instanceof Array && typeof ruleValue[1] === 'string') ? ruleValue[1] :\n                (Object.keys(this.localyMessage).length !== 0) ? this.localyMessage[rule] : this.defaultMessages[rule];\n        let formats = message.match(/{(\\d)}/g);\n        if (!isNullOrUndefined(formats)) {\n            for (let i = 0; i < formats.length; i++) {\n                let value = ruleValue instanceof Array ? ruleValue[i] : ruleValue;\n                message = message.replace(formats[i], value);\n            }\n        }\n        return message;\n    }\n    // Create error element based on name and error message\n    createErrorElement(name, message, input) {\n        let errorElement = createElement(this.errorElement, {\n            className: this.errorClass,\n            innerHTML: message,\n            attrs: { for: name }\n        });\n        // Create message design if errorOption is message\n        if (this.errorOption === ErrorOption.Message) {\n            errorElement.classList.remove(this.errorClass);\n            errorElement.classList.add('e-message');\n            errorElement = createElement(this.errorContainer, { className: this.errorClass, innerHTML: errorElement.outerHTML });\n        }\n        errorElement.id = this.inputElement.name + '-info';\n        // Append error message into MVC error message element\n        if (this.element.querySelector('[data-valmsg-for=\"' + input.id + '\"]')) {\n            this.element.querySelector('[data-valmsg-for=\"' + input.id + '\"]').appendChild(errorElement);\n        }\n        else if (input.hasAttribute('data-msg-containerid') === true) {\n            // Append error message into custom div element\n            let containerId = input.getAttribute('data-msg-containerid');\n            let divElement = this.element.querySelector('#' + containerId);\n            divElement.appendChild(errorElement);\n        }\n        else if (this.customPlacement != null) {\n            // Call custom placement function if customPlacement is not null\n            this.customPlacement.call(this, this.inputElement, errorElement);\n        }\n        else {\n            this.inputElement.parentNode.insertBefore(errorElement, this.inputElement.nextSibling);\n        }\n        errorElement.style.display = 'block';\n        this.getErrorElement(name);\n        this.validated.push(name);\n        this.checkRequired(name);\n    }\n    // Get error element by name\n    getErrorElement(name) {\n        this.infoElement = select(this.errorElement + '.' + this.errorClass, this.inputElement.parentElement);\n        if (!this.infoElement) {\n            this.infoElement = select(this.errorElement + '.' + this.errorClass + '[for=\"' + name + '\"]', this.element);\n        }\n        return this.infoElement;\n    }\n    // Remove existing rule from errorRules object\n    removeErrorRules(name) {\n        for (let i = 0; i < this.errorRules.length; i++) {\n            let rule = this.errorRules[i];\n            if (rule.name === name) {\n                this.errorRules.splice(i, 1);\n            }\n        }\n    }\n    // Show error message to the input element\n    showMessage(errorRule) {\n        this.infoElement.style.display = 'block';\n        this.infoElement.innerHTML = errorRule.message;\n        this.checkRequired(errorRule.name);\n    }\n    // Hide error message based on input name\n    hideMessage(name) {\n        if (this.infoElement) {\n            this.infoElement.style.display = 'none';\n            this.removeErrorRules(name);\n            this.inputElement.classList.add(this.validClass);\n            this.inputElement.classList.remove(this.errorClass);\n            this.inputElement.setAttribute('aria-invalid', 'false');\n        }\n    }\n    // Check whether the input element have required rule and its value is not empty\n    checkRequired(name) {\n        if (!this.rules[name][this.required] && !this.inputElement.value.length && !isNullOrUndefined(this.infoElement)) {\n            this.infoElement.innerHTML = this.inputElement.value;\n            this.infoElement.setAttribute('aria-invalid', 'false');\n            this.hideMessage(name);\n        }\n    }\n    // Return boolean result if the input have chekcable or submit types\n    static isCheckable(input) {\n        let inputType = input.getAttribute('type');\n        return inputType && (inputType === 'checkbox' || inputType === 'radio' || inputType === 'submit');\n    }\n};\n// List of function to validate the rules\nFormValidator.checkValidator = {\n    required: (option) => {\n        return !isNaN(Date.parse(option.value)) ? !isNaN(new Date(option.value).getTime()) : option.value.toString().length > 0;\n    },\n    email: (option) => {\n        return regex.EMAIL.test(option.value);\n    },\n    url: (option) => {\n        return regex.URL.test(option.value);\n    },\n    dateIso: (option) => {\n        return regex.DATE_ISO.test(option.value);\n    },\n    tel: (option) => {\n        return regex.PHONE.test(option.value);\n    },\n    creditcard: (option) => {\n        return regex.CREDITCARD.test(option.value);\n    },\n    number: (option) => {\n        return !isNaN(Number(option.value)) && option.value.indexOf(' ') === -1;\n    },\n    digits: (option) => {\n        return regex.DIGITS.test(option.value);\n    },\n    maxLength: (option) => {\n        return option.value.length <= option.param;\n    },\n    minLength: (option) => {\n        return option.value.length >= option.param;\n    },\n    rangeLength: (option) => {\n        let param = option.param;\n        return option.value.length >= param[0] && option.value.length <= param[1];\n    },\n    range: (option) => {\n        let param = option.param;\n        return !isNaN(Number(option.value)) && Number(option.value) >= param[0] && Number(option.value) <= param[1];\n    },\n    date: (option) => {\n        return !isNaN(new Date(option.value).getTime());\n    },\n    max: (option) => {\n        if (!isNaN(Number(option.value))) {\n            // Maximum rule validation for number\n            return +option.value <= option.param;\n        }\n        // Maximum rule validation for date\n        return new Date(option.value).getTime() <= new Date(JSON.parse(JSON.stringify(option.param))).getTime();\n    },\n    min: (option) => {\n        if (!isNaN(Number(option.value))) {\n            // Minimum rule validation for number\n            return +option.value >= option.param;\n        }\n        else if ((option.value).indexOf(',') !== -1) {\n            let uNum = (option.value).replace(/,/g, '');\n            return parseFloat(uNum) >= option.param;\n        }\n        else {\n            // Minimum rule validation for date\n            return new Date(option.value).getTime() >= new Date(JSON.parse(JSON.stringify(option.param))).getTime();\n        }\n    },\n    regex: (option) => {\n        return new RegExp(option.param).test(option.value);\n    },\n    equalTo: (option) => {\n        let compareTo = option.formElement.querySelector('#' + option.param);\n        option.param = compareTo.value;\n        return option.param === option.value;\n    },\n};\n__decorate$3([\n    Property('')\n], FormValidator.prototype, \"locale\", void 0);\n__decorate$3([\n    Property('e-hidden')\n], FormValidator.prototype, \"ignore\", void 0);\n__decorate$3([\n    Property()\n], FormValidator.prototype, \"rules\", void 0);\n__decorate$3([\n    Property('e-error')\n], FormValidator.prototype, \"errorClass\", void 0);\n__decorate$3([\n    Property('e-valid')\n], FormValidator.prototype, \"validClass\", void 0);\n__decorate$3([\n    Property('label')\n], FormValidator.prototype, \"errorElement\", void 0);\n__decorate$3([\n    Property('div')\n], FormValidator.prototype, \"errorContainer\", void 0);\n__decorate$3([\n    Property(ErrorOption.Label)\n], FormValidator.prototype, \"errorOption\", void 0);\n__decorate$3([\n    Event()\n], FormValidator.prototype, \"focusout\", void 0);\n__decorate$3([\n    Event()\n], FormValidator.prototype, \"keyup\", void 0);\n__decorate$3([\n    Event()\n], FormValidator.prototype, \"click\", void 0);\n__decorate$3([\n    Event()\n], FormValidator.prototype, \"change\", void 0);\n__decorate$3([\n    Event()\n], FormValidator.prototype, \"submit\", void 0);\n__decorate$3([\n    Event()\n], FormValidator.prototype, \"validationBegin\", void 0);\n__decorate$3([\n    Event()\n], FormValidator.prototype, \"validationComplete\", void 0);\n__decorate$3([\n    Event()\n], FormValidator.prototype, \"customPlacement\", void 0);\nFormValidator = FormValidator_1 = __decorate$3([\n    NotifyPropertyChanges\n], FormValidator);\n\n/**\n * Input box Component\n */\n\nvar __decorate$4 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nconst CONTROL_WRAPPER = 'e-upload e-control-wrapper';\nconst INPUT_WRAPPER = 'e-file-select';\nconst DROP_AREA = 'e-file-drop';\nconst DROP_WRAPPER = 'e-file-select-wrap';\nconst LIST_PARENT = 'e-upload-files';\nconst FILE = 'e-upload-file-list';\nconst STATUS = 'e-file-status';\nconst ACTION_BUTTONS = 'e-upload-actions';\nconst UPLOAD_BUTTONS = 'e-file-upload-btn e-css e-btn e-flat e-primary';\nconst CLEAR_BUTTONS = 'e-file-clear-btn e-css e-btn e-flat';\nconst FILE_NAME = 'e-file-name';\nconst FILE_TYPE = 'e-file-type';\nconst FILE_SIZE = 'e-file-size';\nconst REMOVE_ICON = 'e-file-remove-btn';\nconst DELETE_ICON = 'e-file-delete-btn';\nconst SPINNER_PANE = 'e-spinner-pane';\nconst ABORT_ICON = 'e-file-abort-btn';\nconst RETRY_ICON = 'e-file-reload-btn';\nconst DRAG_HOVER = 'e-upload-drag-hover';\nconst PROGRESS_WRAPPER = 'e-upload-progress-wrap';\nconst PROGRESSBAR = 'e-upload-progress-bar';\nconst PROGRESSBAR_TEXT = 'e-progress-bar-text';\nconst UPLOAD_INPROGRESS = 'e-upload-progress';\nconst UPLOAD_SUCCESS = 'e-upload-success';\nconst UPLOAD_FAILED = 'e-upload-fails';\nconst TEXT_CONTAINER = 'e-file-container';\nconst VALIDATION_FAILS = 'e-validation-fails';\nconst RTL = 'e-rtl';\nconst DISABLED = 'e-disabled';\nconst RTL_CONTAINER = 'e-rtl-container';\nconst ICON_FOCUSED = 'e-clear-icon-focus';\nconst PROGRESS_INNER_WRAPPER = 'e-progress-inner-wrap';\nconst PAUSE_UPLOAD = 'e-file-pause-btn';\nconst RESUME_UPLOAD = 'e-file-play-btn';\nconst RESTRICT_RETRY = 'e-restrict-retry';\nconst wrapperAttr$1 = ['title', 'style', 'class'];\nconst FORM_UPLOAD = 'e-form-upload';\nconst HIDDEN_INPUT = 'e-hidden-file-input';\nconst INVALID_FILE = 'e-file-invalid';\nconst INFORMATION = 'e-file-information';\nclass FilesProp extends ChildProperty {\n}\n__decorate$4([\n    Property('')\n], FilesProp.prototype, \"name\", void 0);\n__decorate$4([\n    Property(null)\n], FilesProp.prototype, \"size\", void 0);\n__decorate$4([\n    Property('')\n], FilesProp.prototype, \"type\", void 0);\nclass ButtonsProps extends ChildProperty {\n}\n__decorate$4([\n    Property('Browse...')\n], ButtonsProps.prototype, \"browse\", void 0);\n__decorate$4([\n    Property('Upload')\n], ButtonsProps.prototype, \"upload\", void 0);\n__decorate$4([\n    Property('Clear')\n], ButtonsProps.prototype, \"clear\", void 0);\nclass AsyncSettings extends ChildProperty {\n}\n__decorate$4([\n    Property('')\n], AsyncSettings.prototype, \"saveUrl\", void 0);\n__decorate$4([\n    Property('')\n], AsyncSettings.prototype, \"removeUrl\", void 0);\n__decorate$4([\n    Property(0)\n], AsyncSettings.prototype, \"chunkSize\", void 0);\n__decorate$4([\n    Property(3)\n], AsyncSettings.prototype, \"retryCount\", void 0);\n__decorate$4([\n    Property(500)\n], AsyncSettings.prototype, \"retryAfterDelay\", void 0);\n/**\n * The uploader component allows to upload images, documents, and other files from local to server.\n * ```html\n * <input type='file' name='images[]' id='upload'/>\n * ```\n * ```typescript\n * <script>\n *   var uploadObj = new Uploader();\n *   uploadObj.appendTo('#upload');\n * </script>\n * ```\n */\nlet Uploader = class Uploader extends Component {\n    /**\n     * Triggers when change the Uploader value.\n     */\n    constructor(options, element) {\n        super(options, element);\n        this.initialAttr = { accept: null, multiple: false, disabled: false };\n        this.uploadedFilesData = [];\n        this.base64String = [];\n        this.isForm = false;\n        this.allTypes = false;\n        this.pausedData = [];\n        this.uploadMetaData = [];\n        this.tabIndex = '0';\n        this.btnTabIndex = '0';\n        this.disableKeyboardNavigation = false;\n        this.count = -1;\n        this.actionCompleteCount = 0;\n        this.flag = true;\n        this.selectedFiles = [];\n        this.uploaderName = 'UploadFiles';\n        this.fileStreams = [];\n        this.newFileRef = 0;\n        this.isFirstFileOnSelection = false;\n        /**\n         * Get the file item(li) which are shown in file list.\n         * @private\n         */\n        this.fileList = [];\n        /**\n         * Get the data of files which are shown in file list.\n         * @private\n         */\n        this.filesData = [];\n        this.uploaderOptions = options;\n    }\n    /**\n     * Calls internally if any of the property value is changed.\n     * @private\n     */\n    onPropertyChanged(newProp, oldProp) {\n        for (let prop of Object.keys(newProp)) {\n            switch (prop) {\n                case 'allowedExtensions':\n                    this.setExtensions(this.allowedExtensions);\n                    this.clearAll();\n                    break;\n                case 'enabled':\n                    this.setControlStatus();\n                    break;\n                case 'multiple':\n                    this.setMultipleSelection();\n                    break;\n                case 'enableRtl':\n                    this.setRTL();\n                    this.reRenderFileList();\n                    break;\n                case 'buttons':\n                    this.buttons.browse = isNullOrUndefined(this.buttons.browse) ? '' : this.buttons.browse;\n                    this.buttons.clear = isNullOrUndefined(this.buttons.clear) ? '' : this.buttons.clear;\n                    this.buttons.upload = isNullOrUndefined(this.buttons.upload) ? '' : this.buttons.upload;\n                    this.renderButtonTemplates();\n                    break;\n                case 'dropArea':\n                    this.unBindDropEvents();\n                    this.updateDropArea();\n                    break;\n                case 'htmlAttributes':\n                    this.updateHTMLAttrToElement();\n                    this.updateHTMLAttrToWrapper();\n                    this.checkHTMLAttributes(true);\n                    break;\n                case 'files':\n                    this.renderPreLoadFiles();\n                    break;\n                case 'directoryUpload':\n                    this.updateDirectoryAttributes();\n                    break;\n                case 'template':\n                    if (!this.isServerBlazor) {\n                        this.clearAll();\n                    }\n                    break;\n                case 'minFileSize':\n                case 'maxFileSize':\n                case 'autoUpload':\n                    this.clearAll();\n                    break;\n                case 'sequentialUpload':\n                    this.clearAll();\n                    break;\n                case 'locale':\n                    this.l10n.setLocale(this.locale);\n                    this.setLocalizedTexts();\n                    this.preLocaleObj = getValue('currentLocale', this.l10n);\n                    break;\n                case 'cssClass':\n                    this.setCSSClass(oldProp.cssClass);\n                    break;\n            }\n        }\n    }\n    setLocalizedTexts() {\n        if (isNullOrUndefined(this.template)) {\n            if (typeof (this.buttons.browse) === 'string') {\n                this.browseButton.innerText = (this.buttons.browse === 'Browse...') ?\n                    this.localizedTexts('Browse') : this.buttons.browse;\n                this.browseButton.setAttribute('title', this.browseButton.innerText);\n                if (this.uploadWrapper && !isNullOrUndefined(this.uploadWrapper.querySelector('.' + DROP_AREA))) {\n                    this.uploadWrapper.querySelector('.' + DROP_AREA).innerHTML = this.localizedTexts('dropFilesHint');\n                }\n            }\n            this.updateFileList();\n        }\n    }\n    getKeyValue(val) {\n        let keyValue;\n        for (let key of Object.keys(this.preLocaleObj)) {\n            if (this.preLocaleObj[key] === val) {\n                keyValue = key;\n            }\n        }\n        return keyValue;\n    }\n    updateFileList() {\n        let element;\n        /* istanbul ignore next */\n        if (this.fileList.length > 0 && !isNullOrUndefined(this.uploadWrapper.querySelector('.' + LIST_PARENT))) {\n            for (let i = 0; i < this.fileList.length; i++) {\n                element = this.fileList[i].querySelector('.e-file-status');\n                element.innerHTML = this.localizedTexts(this.getKeyValue(this.filesData[i].status));\n                this.filesData[i].status = this.localizedTexts(this.getKeyValue(this.filesData[i].status));\n                if (this.fileList[i].classList.contains(UPLOAD_SUCCESS)) {\n                    this.fileList[i].querySelector('.e-icons').setAttribute('title', this.localizedTexts('delete'));\n                }\n                if (this.fileList[i].querySelector('.e-file-play-btn')) {\n                    this.fileList[i].querySelector('.e-icons').setAttribute('title', this.localizedTexts('resume'));\n                }\n                if (this.fileList[i].querySelector('.e-file-remove-btn')) {\n                    this.fileList[i].querySelector('.e-icons').setAttribute('title', this.localizedTexts('remove'));\n                }\n                if (this.fileList[i].querySelector('.e-file-reload-btn')) {\n                    this.fileList[i].querySelector('.e-icons').setAttribute('title', this.localizedTexts('retry'));\n                }\n                if (!this.autoUpload) {\n                    this.uploadButton.innerText = (this.buttons.upload === 'Upload') ?\n                        this.localizedTexts('Upload') : this.buttons.upload;\n                    this.uploadButton.setAttribute('title', this.localizedTexts('Upload'));\n                    this.clearButton.innerText = (this.buttons.clear === 'Clear') ?\n                        this.localizedTexts('Clear') : this.buttons.clear;\n                    this.clearButton.setAttribute('title', this.localizedTexts('Clear'));\n                }\n            }\n        }\n    }\n    reRenderFileList() {\n        if (this.listParent) {\n            detach(this.listParent);\n            this.listParent = null;\n            this.fileList = [];\n            this.createFileList(this.filesData);\n            if (this.actionButtons) {\n                this.removeActionButtons();\n                this.renderActionButtons();\n                this.checkActionButtonStatus();\n            }\n        }\n    }\n    preRender() {\n        this.localeText = { Browse: 'Browse...', Clear: 'Clear', Upload: 'Upload',\n            dropFilesHint: 'Or drop files here', invalidMaxFileSize: 'File size is too large',\n            invalidMinFileSize: 'File size is too small', invalidFileType: 'File type is not allowed',\n            uploadFailedMessage: 'File failed to upload', uploadSuccessMessage: 'File uploaded successfully',\n            removedSuccessMessage: 'File removed successfully', removedFailedMessage: 'Unable to remove file', inProgress: 'Uploading',\n            readyToUploadMessage: 'Ready to upload', abort: 'Abort', remove: 'Remove', cancel: 'Cancel', delete: 'Delete file',\n            pauseUpload: 'File upload paused', pause: 'Pause', resume: 'Resume', retry: 'Retry',\n            fileUploadCancel: 'File upload canceled', invalidFileSelection: 'Invalid files selected', totalFiles: 'Total files',\n            size: 'Size'\n        };\n        this.l10n = new L10n('uploader', this.localeText, this.locale);\n        this.preLocaleObj = getValue('currentLocale', this.l10n);\n        this.isServerBlazor = (isBlazor() && this.isServerRendered) ? true : false;\n        this.isBlazorTemplate = this.isServerBlazor && this.template !== '' && !isNullOrUndefined(this.template) ? true : false;\n        this.isBlazorSaveUrl = (this.isServerRendered &&\n            (this.asyncSettings.saveUrl === '' || isNullOrUndefined(this.asyncSettings.saveUrl))) ? true : false;\n        if (this.isBlazorSaveUrl && this.sequentialUpload) {\n            this.sequentialUpload = false;\n        }\n        if (!this.isBlazorSaveUrl) {\n            this.formRendered();\n        }\n        if (!this.isServerBlazor) {\n            this.updateHTMLAttrToElement();\n            this.checkHTMLAttributes(false);\n            // tslint:disable-next-line\n            let ejInstance = getValue('ej2_instances', this.element);\n            /* istanbul ignore next */\n            if (this.element.tagName === 'EJS-UPLOADER') {\n                let inputElement = this.createElement('input', { attrs: { type: 'file' } });\n                let index = 0;\n                for (index; index < this.element.attributes.length; index++) {\n                    inputElement.setAttribute(this.element.attributes[index].nodeName, this.element.attributes[index].nodeValue);\n                    inputElement.innerHTML = this.element.innerHTML;\n                }\n                if (!inputElement.hasAttribute('name')) {\n                    inputElement.setAttribute('name', 'UploadFiles');\n                }\n                this.element.appendChild(inputElement);\n                this.element = inputElement;\n                setValue('ej2_instances', ejInstance, this.element);\n            }\n            /* istanbul ignore next */\n            if (ejInstance[0].isPureReactComponent) {\n                if (!isNullOrUndefined(ejInstance[0].props.name)) {\n                    this.element.setAttribute('name', ejInstance[0].props.name);\n                }\n                else if (!isNullOrUndefined(ejInstance[0].props.id) && isNullOrUndefined(ejInstance[0].props.name)) {\n                    this.element.setAttribute('name', ejInstance[0].props.id);\n                }\n                else {\n                    this.element.setAttribute('name', 'UploadFiles');\n                }\n            }\n            if (isNullOrUndefined(this.element.getAttribute('name'))) {\n                this.element.setAttribute('name', this.element.getAttribute('id'));\n            }\n            if (!this.element.hasAttribute('type')) {\n                this.element.setAttribute('type', 'file');\n            }\n            this.updateDirectoryAttributes();\n        }\n        this.keyConfigs = {\n            enter: 'enter'\n        };\n        if (this.element.hasAttribute('tabindex')) {\n            this.tabIndex = this.element.getAttribute('tabindex');\n        }\n        this.browserName = Browser.info.name;\n        this.uploaderName = this.element.getAttribute('name');\n    }\n    formRendered() {\n        let parentEle = closest(this.element, 'form');\n        if (!isNullOrUndefined(parentEle)) {\n            for (; parentEle && parentEle !== document.documentElement; parentEle = parentEle.parentElement) {\n                if (parentEle.tagName === 'FORM') {\n                    this.isForm = true;\n                    this.formElement = parentEle;\n                    parentEle.setAttribute('enctype', 'multipart/form-data');\n                    parentEle.setAttribute('encoding', 'multipart/form-data');\n                }\n            }\n        }\n    }\n    getPersistData() {\n        return this.addOnPersist(['filesData']);\n    }\n    /**\n     * Return the module name of the component.\n     */\n    getModuleName() {\n        return 'uploader';\n    }\n    updateDirectoryAttributes() {\n        if (this.directoryUpload) {\n            this.element.setAttribute('directory', 'true');\n            this.element.setAttribute('webkitdirectory', 'true');\n        }\n        else {\n            this.element.removeAttribute('directory');\n            this.element.removeAttribute('webkitdirectory');\n        }\n    }\n    /**\n     * To Initialize the control rendering\n     * @private\n     */\n    render() {\n        if (!this.isServerBlazor) {\n            this.renderBrowseButton();\n            this.initializeUpload();\n            this.updateHTMLAttrToWrapper();\n            this.wireEvents();\n            this.setMultipleSelection();\n            this.setExtensions(this.allowedExtensions);\n            this.setRTL();\n            this.renderPreLoadFiles();\n            this.setControlStatus();\n            this.setCSSClass();\n        }\n        else {\n            this.dropAreaWrapper = closest(this.element, '.' + DROP_WRAPPER);\n            this.uploadWrapper = closest(this.element, '.e-upload.e-control-wrapper');\n            this.browseButton = this.dropAreaWrapper.querySelector('button.e-upload-browse-btn');\n            this.setDropArea();\n            this.renderPreLoadFiles();\n            this.wireEvents();\n        }\n        this.renderComplete();\n    }\n    renderBrowseButton() {\n        this.browseButton = this.createElement('button', { className: 'e-css e-btn', attrs: { 'type': 'button' } });\n        this.browseButton.setAttribute('tabindex', this.tabIndex);\n        if (typeof (this.buttons.browse) === 'string') {\n            this.browseButton.textContent = (this.buttons.browse === 'Browse...') ?\n                this.localizedTexts('Browse') : this.buttons.browse;\n            this.browseButton.setAttribute('title', this.browseButton.innerText);\n        }\n        else {\n            this.browseButton.appendChild(this.buttons.browse);\n        }\n        this.element.setAttribute('aria-label', 'Uploader');\n    }\n    renderActionButtons() {\n        this.element.setAttribute('tabindex', '-1');\n        if (!(this.isBlazorSaveUrl || this.isBlazorTemplate)) {\n            this.actionButtons = this.createElement('div', { className: ACTION_BUTTONS });\n            this.uploadButton = this.createElement('button', { className: UPLOAD_BUTTONS,\n                attrs: { 'type': 'button', 'tabindex': this.btnTabIndex } });\n            this.clearButton = this.createElement('button', { className: CLEAR_BUTTONS,\n                attrs: { 'type': 'button', 'tabindex': this.btnTabIndex } });\n            this.actionButtons.appendChild(this.clearButton);\n            this.actionButtons.appendChild(this.uploadButton);\n            this.renderButtonTemplates();\n            this.uploadWrapper.appendChild(this.actionButtons);\n            this.browseButton.blur();\n            this.uploadButton.focus();\n            this.wireActionButtonEvents();\n        }\n    }\n    /* istanbul ignore next */\n    serverActionButtonsEventBind(element) {\n        if (element && !this.isForm) {\n            this.browseButton.blur();\n            this.actionButtons = element;\n            this.uploadButton = this.actionButtons.querySelector('.e-file-upload-btn');\n            this.clearButton = this.actionButtons.querySelector('.e-file-clear-btn');\n            this.uploadButton.focus();\n            this.unwireActionButtonEvents();\n            this.wireActionButtonEvents();\n            this.checkActionButtonStatus();\n        }\n    }\n    /* istanbul ignore next */\n    serverUlElement(element) {\n        if (element) {\n            if (this.isBlazorSaveUrl || this.isBlazorTemplate) {\n                this.listParent = element;\n                this.fileList = [].slice.call(this.listParent.querySelectorAll('li'));\n                this.serverRemoveIconBindEvent();\n                if (!this.isForm) {\n                    this.checkAutoUpload(this.filesData);\n                }\n            }\n        }\n    }\n    wireActionButtonEvents() {\n        EventHandler.add(this.uploadButton, 'click', this.uploadButtonClick, this);\n        EventHandler.add(this.clearButton, 'click', this.clearButtonClick, this);\n    }\n    unwireActionButtonEvents() {\n        EventHandler.remove(this.uploadButton, 'click', this.uploadButtonClick);\n        EventHandler.remove(this.clearButton, 'click', this.clearButtonClick);\n    }\n    removeActionButtons() {\n        if (this.actionButtons) {\n            this.unwireActionButtonEvents();\n            if (!(this.isBlazorSaveUrl || this.isBlazorTemplate)) {\n                detach(this.actionButtons);\n            }\n            this.actionButtons = null;\n        }\n    }\n    renderButtonTemplates() {\n        if (typeof (this.buttons.browse) === 'string') {\n            this.browseButton.textContent = (this.buttons.browse === 'Browse...') ?\n                this.localizedTexts('Browse') : this.buttons.browse;\n            this.browseButton.setAttribute('title', this.browseButton.textContent);\n        }\n        else {\n            this.browseButton.innerHTML = '';\n            this.browseButton.appendChild(this.buttons.browse);\n        }\n        if (this.uploadButton) {\n            let uploadText;\n            uploadText = isNullOrUndefined(this.buttons.upload) ? 'Upload' : this.buttons.upload;\n            this.buttons.upload = uploadText;\n            if (typeof (this.buttons.upload) === 'string') {\n                this.uploadButton.textContent = (this.buttons.upload === 'Upload') ?\n                    this.localizedTexts('Upload') : this.buttons.upload;\n                this.uploadButton.setAttribute('title', this.uploadButton.textContent);\n            }\n            else {\n                this.uploadButton.innerHTML = '';\n                this.uploadButton.appendChild(this.buttons.upload);\n            }\n        }\n        if (this.clearButton) {\n            let clearText;\n            clearText = isNullOrUndefined(this.buttons.clear) ? 'Clear' : this.buttons.clear;\n            this.buttons.clear = clearText;\n            if (typeof (this.buttons.clear) === 'string') {\n                this.clearButton.textContent = (this.buttons.clear === 'Clear') ?\n                    this.localizedTexts('Clear') : this.buttons.clear;\n                this.clearButton.setAttribute('title', this.clearButton.textContent);\n            }\n            else {\n                this.clearButton.innerHTML = '';\n                this.clearButton.appendChild(this.buttons.clear);\n            }\n        }\n    }\n    initializeUpload() {\n        this.element.setAttribute('tabindex', '-1');\n        let inputWrapper = this.createElement('span', { className: INPUT_WRAPPER });\n        this.element.parentElement.insertBefore(inputWrapper, this.element);\n        this.dropAreaWrapper = this.createElement('div', { className: DROP_WRAPPER });\n        this.element.parentElement.insertBefore(this.dropAreaWrapper, this.element);\n        inputWrapper.appendChild(this.element);\n        this.dropAreaWrapper.appendChild(this.browseButton);\n        this.dropAreaWrapper.appendChild(inputWrapper);\n        this.uploadWrapper = this.createElement('div', { className: CONTROL_WRAPPER });\n        this.dropAreaWrapper.parentElement.insertBefore(this.uploadWrapper, this.dropAreaWrapper);\n        this.uploadWrapper.appendChild(this.dropAreaWrapper);\n        this.setDropArea();\n    }\n    renderPreLoadFiles() {\n        if (this.files.length) {\n            if (this.enablePersistence && this.filesData.length) {\n                this.createFileList(this.filesData);\n                return;\n            }\n            if (isNullOrUndefined(this.files[0].size)) {\n                return;\n            }\n            let files = [].slice.call(this.files);\n            let filesData = [];\n            if (!this.multiple) {\n                this.clearData();\n                files = [files[0]];\n            }\n            for (let data of files) {\n                let fileData = {\n                    name: data.name + '.' + data.type.split('.')[data.type.split('.').length - 1],\n                    rawFile: '',\n                    size: data.size,\n                    status: this.localizedTexts('uploadSuccessMessage'),\n                    type: data.type,\n                    validationMessages: { minSize: '', maxSize: '' },\n                    statusCode: '2'\n                };\n                filesData.push(fileData);\n                this.filesData.push(fileData);\n            }\n            this.createFileList(filesData);\n            if (!this.autoUpload && this.listParent && !this.actionButtons && (!this.isForm || this.allowUpload()) && this.showFileList) {\n                this.renderActionButtons();\n            }\n            this.checkActionButtonStatus();\n            if (this.sequentialUpload) {\n                this.count = this.filesData.length - 1;\n            }\n        }\n    }\n    checkActionButtonStatus() {\n        if (this.actionButtons) {\n            let length = this.uploadWrapper.querySelectorAll('.' + VALIDATION_FAILS).length +\n                this.uploadWrapper.querySelectorAll('.e-upload-fails:not(.e-upload-progress)').length +\n                this.uploadWrapper.querySelectorAll('span.' + UPLOAD_SUCCESS).length +\n                this.uploadWrapper.querySelectorAll('span.' + UPLOAD_INPROGRESS).length;\n            if (length > 0 && length === this.uploadWrapper.querySelectorAll('li').length) {\n                this.uploadButton.setAttribute('disabled', 'disabled');\n            }\n            else {\n                this.uploadButton.removeAttribute('disabled');\n            }\n        }\n    }\n    setDropArea() {\n        let dropTextArea = this.dropAreaWrapper.querySelector('.e-file-drop');\n        if (this.dropArea) {\n            this.dropZoneElement = (typeof (this.dropArea) !== 'string') ? this.dropArea :\n                document.querySelector(this.dropArea);\n            let element = this.element;\n            let enableDropText = false;\n            while (element.parentNode) {\n                element = element.parentNode;\n                if (element === this.dropZoneElement) {\n                    enableDropText = true;\n                    if (!dropTextArea) {\n                        this.createDropTextHint();\n                    }\n                    else if (!this.isServerBlazor) {\n                        dropTextArea.innerHTML = this.localizedTexts('dropFilesHint');\n                    }\n                }\n            }\n            if (!enableDropText && dropTextArea) {\n                remove(dropTextArea);\n            }\n        }\n        else if (!isNullOrUndefined(this.uploaderOptions) && this.uploaderOptions.dropArea === undefined) {\n            this.createDropTextHint();\n            this.dropZoneElement = this.uploadWrapper;\n            this.setProperties({ dropArea: this.uploadWrapper }, true);\n        }\n        this.bindDropEvents();\n    }\n    updateDropArea() {\n        if (this.dropArea) {\n            this.setDropArea();\n        }\n        else {\n            this.dropZoneElement = null;\n            let dropTextArea = this.dropAreaWrapper.querySelector('.e-file-drop');\n            if (dropTextArea) {\n                remove(dropTextArea);\n            }\n        }\n    }\n    createDropTextHint() {\n        if (!this.isServerBlazor) {\n            let fileDropArea = this.createElement('span', { className: DROP_AREA });\n            fileDropArea.innerHTML = this.localizedTexts('dropFilesHint');\n            this.dropAreaWrapper.appendChild(fileDropArea);\n        }\n    }\n    updateHTMLAttrToElement() {\n        if (!isNullOrUndefined(this.htmlAttributes)) {\n            for (let pro of Object.keys(this.htmlAttributes)) {\n                if (wrapperAttr$1.indexOf(pro) < 0) {\n                    this.element.setAttribute(pro, this.htmlAttributes[pro]);\n                }\n            }\n        }\n    }\n    updateHTMLAttrToWrapper() {\n        if (!isNullOrUndefined(this.htmlAttributes)) {\n            for (let pro of Object.keys(this.htmlAttributes)) {\n                if (wrapperAttr$1.indexOf(pro) > -1) {\n                    if (pro === 'class') {\n                        let updatedClassValues = (this.htmlAttributes[pro].replace(/\\s+/g, ' ')).trim();\n                        if (updatedClassValues !== '') {\n                            addClass([this.uploadWrapper], updatedClassValues.split(' '));\n                        }\n                    }\n                    else if (pro === 'style') {\n                        let uploadStyle = this.uploadWrapper.getAttribute(pro);\n                        uploadStyle = !isNullOrUndefined(uploadStyle) ? (uploadStyle + this.htmlAttributes[pro]) :\n                            this.htmlAttributes[pro];\n                        this.uploadWrapper.setAttribute(pro, uploadStyle);\n                    }\n                    else {\n                        this.uploadWrapper.setAttribute(pro, this.htmlAttributes[pro]);\n                    }\n                }\n            }\n        }\n    }\n    setMultipleSelection() {\n        if (this.multiple && !this.element.hasAttribute('multiple')) {\n            let newAttr = document.createAttribute('multiple');\n            newAttr.value = 'multiple';\n            this.element.setAttributeNode(newAttr);\n        }\n        else if (!this.multiple) {\n            this.element.removeAttribute('multiple');\n        }\n    }\n    checkAutoUpload(fileData) {\n        if (this.autoUpload) {\n            if (this.sequentialUpload) {\n                /* istanbul ignore next */\n                this.sequenceUpload(fileData);\n            }\n            else {\n                this.upload(fileData);\n            }\n            this.removeActionButtons();\n        }\n        else if (!this.actionButtons) {\n            this.renderActionButtons();\n        }\n        this.checkActionButtonStatus();\n    }\n    sequenceUpload(fileData) {\n        if (this.filesData.length - fileData.length === 0 ||\n            this.filesData[(this.filesData.length - fileData.length - 1)].statusCode !== '1') {\n            ++this.count;\n            let isFileListCreated = this.showFileList ? false : true;\n            if (typeof this.filesData[this.count] === 'object') {\n                this.isFirstFileOnSelection = false;\n                this.upload(this.filesData[this.count], isFileListCreated);\n                if (this.filesData[this.count].statusCode === '0') {\n                    this.sequenceUpload(fileData);\n                }\n            }\n            else {\n                --this.count;\n            }\n        }\n    }\n    setCSSClass(oldCSSClass) {\n        let updatedCssClassValue = this.cssClass;\n        if (!isNullOrUndefined(this.cssClass) && this.cssClass !== '') {\n            updatedCssClassValue = (this.cssClass.replace(/\\s+/g, ' ')).trim();\n        }\n        if (!isNullOrUndefined(this.cssClass) && updatedCssClassValue !== '') {\n            addClass([this.uploadWrapper], updatedCssClassValue.split(updatedCssClassValue.indexOf(',') > -1 ? ',' : ' '));\n        }\n        let updatedOldCssClass = oldCSSClass;\n        if (!isNullOrUndefined(oldCSSClass)) {\n            updatedOldCssClass = (oldCSSClass.replace(/\\s+/g, ' ')).trim();\n        }\n        if (!isNullOrUndefined(oldCSSClass) && updatedOldCssClass !== '') {\n            removeClass([this.uploadWrapper], updatedOldCssClass.split(' '));\n        }\n    }\n    wireEvents() {\n        EventHandler.add(this.browseButton, 'click', this.browseButtonClick, this);\n        EventHandler.add(this.element, 'change', this.onSelectFiles, this);\n        EventHandler.add(document, 'click', this.removeFocus, this);\n        this.keyboardModule = new KeyboardEvents(this.uploadWrapper, {\n            keyAction: this.keyActionHandler.bind(this),\n            keyConfigs: this.keyConfigs,\n            eventName: 'keydown',\n        });\n        if (this.isForm) {\n            EventHandler.add(this.formElement, 'reset', this.resetForm, this);\n        }\n    }\n    unWireEvents() {\n        EventHandler.remove(this.browseButton, 'click', this.browseButtonClick);\n        EventHandler.remove(this.element, 'change', this.onSelectFiles);\n        EventHandler.remove(document, 'click', this.removeFocus);\n        if (this.isForm) {\n            EventHandler.remove(this.formElement, 'reset', this.resetForm);\n        }\n        if (this.keyboardModule) {\n            this.keyboardModule.destroy();\n        }\n    }\n    resetForm() {\n        this.clearAll();\n    }\n    keyActionHandler(e) {\n        let targetElement = e.target;\n        switch (e.action) {\n            case 'enter':\n                if (e.target === this.clearButton) {\n                    this.clearButtonClick();\n                }\n                else if (e.target === this.uploadButton) {\n                    this.uploadButtonClick();\n                }\n                else if (e.target === this.browseButton) {\n                    this.browseButtonClick();\n                }\n                else if (targetElement.classList.contains(PAUSE_UPLOAD)) {\n                    let metaData = this.getCurrentMetaData(null, e);\n                    metaData.file.statusCode = '4';\n                    metaData.file.status = this.localizedTexts('pauseUpload');\n                    this.abortUpload(metaData, false);\n                }\n                else if (targetElement.classList.contains(RESUME_UPLOAD)) {\n                    this.resumeUpload(this.getCurrentMetaData(null, e), e);\n                }\n                else if (targetElement.classList.contains(RETRY_ICON)) {\n                    let metaData = this.getCurrentMetaData(null, e);\n                    if (!isNullOrUndefined(metaData)) {\n                        metaData.file.statusCode = '1';\n                        metaData.file.status = this.localizedTexts('readyToUploadMessage');\n                        this.chunkUpload(metaData.file);\n                    }\n                    else {\n                        let target = e.target.parentElement;\n                        let fileData = this.filesData[this.fileList.indexOf(target)];\n                        this.retry(fileData);\n                    }\n                }\n                else {\n                    this.removeFiles(e);\n                    if (!targetElement.classList.contains(ABORT_ICON)) {\n                        this.browseButton.focus();\n                    }\n                }\n                e.preventDefault();\n                e.stopPropagation();\n                break;\n        }\n    }\n    getCurrentMetaData(fileInfo, e) {\n        let fileData;\n        let targetMetaData;\n        if (isNullOrUndefined(fileInfo)) {\n            let target = e.target.parentElement;\n            fileData = this.filesData[this.fileList.indexOf(target)];\n        }\n        else {\n            fileData = fileInfo;\n        }\n        for (let i = 0; i < this.uploadMetaData.length; i++) {\n            if (this.uploadMetaData[i].file.name === fileData.name) {\n                targetMetaData = this.uploadMetaData[i];\n            }\n        }\n        return targetMetaData;\n    }\n    removeFocus() {\n        if (this.uploadWrapper && this.listParent && this.listParent.querySelector('.' + ICON_FOCUSED)) {\n            document.activeElement.blur();\n            this.listParent.querySelector('.' + ICON_FOCUSED).classList.remove(ICON_FOCUSED);\n        }\n    }\n    browseButtonClick() {\n        this.element.click();\n    }\n    uploadButtonClick() {\n        if (this.sequentialUpload) {\n            this.sequenceUpload(this.filesData);\n        }\n        else {\n            this.upload(this.filesData);\n        }\n    }\n    clearButtonClick() {\n        this.clearAll();\n        /* istanbul ignore next */\n        if (this.sequentialUpload) {\n            this.count = -1;\n        }\n        this.actionCompleteCount = 0;\n    }\n    bindDropEvents() {\n        if (this.dropZoneElement) {\n            EventHandler.add(this.dropZoneElement, 'drop', this.dropElement, this);\n            EventHandler.add(this.dropZoneElement, 'dragover', this.dragHover, this);\n            EventHandler.add(this.dropZoneElement, 'dragleave', this.onDragLeave, this);\n            EventHandler.add(this.dropZoneElement, 'paste', this.onPasteFile, this);\n        }\n    }\n    unBindDropEvents() {\n        if (this.dropZoneElement) {\n            EventHandler.remove(this.dropZoneElement, 'drop', this.dropElement);\n            EventHandler.remove(this.dropZoneElement, 'dragover', this.dragHover);\n            EventHandler.remove(this.dropZoneElement, 'dragleave', this.onDragLeave);\n        }\n    }\n    onDragLeave(e) {\n        this.dropZoneElement.classList.remove(DRAG_HOVER);\n    }\n    dragHover(e) {\n        if (!this.enabled) {\n            return;\n        }\n        this.dropZoneElement.classList.add(DRAG_HOVER);\n        if (this.dropEffect !== 'Default') {\n            e.dataTransfer.dropEffect = this.dropEffect.toLowerCase();\n        }\n        e.preventDefault();\n        e.stopPropagation();\n    }\n    /* istanbul ignore next */\n    dropElement(e) {\n        this.dropZoneElement.classList.remove(DRAG_HOVER);\n        this.onSelectFiles(e);\n        e.preventDefault();\n        e.stopPropagation();\n    }\n    /* istanbul ignore next */\n    onPasteFile(event) {\n        let item = event.clipboardData.items;\n        if (item.length !== 1) {\n            return;\n        }\n        let pasteFile = [].slice.call(item)[0];\n        if ((pasteFile.kind === 'file') && pasteFile.type.match('^image/')) {\n            this.renderSelectedFiles(event, [pasteFile.getAsFile()], false, true);\n        }\n    }\n    getSelectedFiles(index) {\n        let data = [];\n        let liElement = this.fileList[index];\n        let allFiles = this.getFilesData();\n        let nameElements = +liElement.getAttribute('data-files-count');\n        let startIndex = 0;\n        for (let i = 0; i < index; i++) {\n            startIndex += (+this.fileList[i].getAttribute('data-files-count'));\n        }\n        for (let j = startIndex; j < (startIndex + nameElements); j++) {\n            data.push(allFiles[j]);\n        }\n        return data;\n    }\n    removeFiles(args) {\n        if (!this.enabled) {\n            return;\n        }\n        let selectedElement = args.target.parentElement;\n        if (this.isBlazorSaveUrl) {\n            this.fileList = [].slice.call(this.uploadWrapper.querySelectorAll('li'));\n        }\n        let index = this.fileList.indexOf(selectedElement);\n        let liElement = this.fileList[index];\n        let formUpload = this.isFormUpload();\n        let fileData = formUpload ? this.getSelectedFiles(index) : this.getFilesInArray(this.filesData[index]);\n        if (isNullOrUndefined(fileData)) {\n            return;\n        }\n        if (args.target.classList.contains(ABORT_ICON) && !formUpload) {\n            fileData[0].statusCode = '5';\n            if (!isNullOrUndefined(liElement)) {\n                let spinnerTarget = liElement.querySelector('.' + ABORT_ICON);\n                createSpinner({ target: spinnerTarget, width: '20px' });\n                showSpinner(spinnerTarget);\n            }\n            if (this.sequentialUpload) {\n                /* istanbul ignore next */\n                this.uploadSequential();\n            }\n            if (!(liElement.classList.contains(RESTRICT_RETRY))) {\n                this.checkActionComplete(true);\n            }\n        }\n        else if (!closest(args.target, '.' + SPINNER_PANE)) {\n            this.remove(fileData, false, false, true, args);\n        }\n        this.element.value = '';\n        this.checkActionButtonStatus();\n    }\n    removeFilesData(file, customTemplate) {\n        let index;\n        if (customTemplate) {\n            if (!this.showFileList) {\n                index = this.filesData.indexOf(file);\n                this.filesData.splice(index, 1);\n            }\n            return;\n        }\n        let selectedElement = this.getLiElement(file);\n        if (isNullOrUndefined(selectedElement)) {\n            return;\n        }\n        if (!this.isBlazorSaveUrl) {\n            detach(selectedElement);\n        }\n        index = this.fileList.indexOf(selectedElement);\n        this.fileList.splice(index, 1);\n        this.filesData.splice(index, 1);\n        if (!this.isBlazorSaveUrl) {\n            if (this.fileList.length === 0 && !isNullOrUndefined(this.listParent)) {\n                detach(this.listParent);\n                this.listParent = null;\n                this.removeActionButtons();\n            }\n            if (this.sequentialUpload) {\n                /* istanbul ignore next */\n                if (index <= this.count) {\n                    --this.count;\n                }\n            }\n        }\n        else {\n            // tslint:disable-next-line\n            this.interopAdaptor.invokeMethodAsync('removeFileData', index);\n        }\n    }\n    removeUploadedFile(file, eventArgs, removeDirectly, custom) {\n        let selectedFiles = file;\n        let ajax = new Ajax(this.asyncSettings.removeUrl, 'POST', true, null);\n        ajax.emitError = false;\n        let formData = new FormData();\n        ajax.beforeSend = (e) => {\n            eventArgs.currentRequest = ajax.httpRequest;\n            if (isBlazor()) {\n                if (this.currentRequestHeader) {\n                    this.updateCustomheader(ajax.httpRequest, this.currentRequestHeader);\n                }\n                if (this.customFormDatas) {\n                    this.updateFormData(formData, this.customFormDatas);\n                }\n            }\n            if (!removeDirectly) {\n                this.trigger('removing', eventArgs, (eventArgs) => {\n                    if (eventArgs.cancel) {\n                        e.cancel = true;\n                    }\n                    else {\n                        this.removingEventCallback(eventArgs, formData, selectedFiles, file);\n                    }\n                });\n            }\n            else {\n                this.removingEventCallback(eventArgs, formData, selectedFiles, file);\n            }\n        };\n        if (this.isServerBlazor) {\n            let name = this.element.getAttribute('name');\n            if (!isNullOrUndefined(selectedFiles.rawFile) && selectedFiles.rawFile !== '') {\n                formData.append(name, selectedFiles.rawFile, selectedFiles.name);\n            }\n            else {\n                formData.append(name, selectedFiles.name);\n            }\n        }\n        ajax.onLoad = (e) => { this.removeCompleted(e, selectedFiles, custom); return {}; };\n        /* istanbul ignore next */\n        ajax.onError = (e) => { this.removeFailed(e, selectedFiles, custom); return {}; };\n        ajax.send(formData);\n    }\n    removingEventCallback(eventArgs, formData, selectedFiles, file) {\n        /* istanbul ignore next */\n        let name = this.element.getAttribute('name');\n        let liElement = this.getLiElement(file);\n        if (!isNullOrUndefined(liElement) && (!isNullOrUndefined(liElement.querySelector('.' + DELETE_ICON)) ||\n            !isNullOrUndefined(liElement.querySelector('.' + REMOVE_ICON)))) {\n            let spinnerTarget;\n            spinnerTarget = liElement.querySelector('.' + DELETE_ICON) ? liElement.querySelector('.' + DELETE_ICON) :\n                liElement.querySelector('.' + REMOVE_ICON);\n            createSpinner({ target: spinnerTarget, width: '20px' });\n            showSpinner(spinnerTarget);\n        }\n        if (!this.isServerBlazor) {\n            if (eventArgs.postRawFile && !isNullOrUndefined(selectedFiles.rawFile) && selectedFiles.rawFile !== '') {\n                formData.append(name, selectedFiles.rawFile, selectedFiles.name);\n            }\n            else {\n                formData.append(name, selectedFiles.name);\n            }\n            this.updateFormData(formData, eventArgs.customFormData);\n        }\n    }\n    /* istanbul ignore next */\n    updateFormData(formData, customData) {\n        if (customData.length > 0 && customData[0]) {\n            for (let i = 0; i < customData.length; i++) {\n                let data = customData[i];\n                // tslint:disable-next-line\n                let value = Object.keys(data).map(function (e) {\n                    return data[e];\n                });\n                formData.append(Object.keys(data)[0], value);\n            }\n        }\n    }\n    /* istanbul ignore next */\n    updateCustomheader(request, currentRequest) {\n        if (currentRequest.length > 0 && currentRequest[0]) {\n            for (let i = 0; i < currentRequest.length; i++) {\n                let data = currentRequest[i];\n                // tslint:disable-next-line\n                let value = Object.keys(data).map(function (e) {\n                    return data[e];\n                });\n                request.setRequestHeader(Object.keys(data)[0], value);\n            }\n        }\n    }\n    removeCompleted(e, files, customTemplate) {\n        let response = e && e.currentTarget ? this.getResponse(e) : null;\n        let status = e.target;\n        if (status.readyState === 4 && status.status >= 200 && status.status <= 299) {\n            let args = {\n                e, response: response, operation: 'remove', file: this.updateStatus(files, this.localizedTexts('removedSuccessMessage'), '2')\n            };\n            this.trigger('success', args);\n            this.removeFilesData(files, customTemplate);\n            let index = this.uploadedFilesData.indexOf(files);\n            this.uploadedFilesData.splice(index, 1);\n            this.trigger('change', { files: this.uploadedFilesData });\n        }\n        else {\n            this.removeFailed(e, files, customTemplate);\n        }\n    }\n    removeFailed(e, files, customTemplate) {\n        let response = e && e.currentTarget ? this.getResponse(e) : null;\n        let args = {\n            e, response: response, operation: 'remove', file: this.updateStatus(files, this.localizedTexts('removedFailedMessage'), '0')\n        };\n        if (!customTemplate) {\n            let index = this.filesData.indexOf(files);\n            let rootElement = this.fileList[index];\n            if (rootElement) {\n                rootElement.classList.remove(UPLOAD_SUCCESS);\n                rootElement.classList.add(UPLOAD_FAILED);\n                let statusElement = rootElement.querySelector('.' + STATUS);\n                if (statusElement) {\n                    statusElement.classList.remove(UPLOAD_SUCCESS);\n                    statusElement.classList.add(UPLOAD_FAILED);\n                }\n            }\n            this.checkActionButtonStatus();\n        }\n        this.trigger('failure', args);\n        let liElement = this.getLiElement(files);\n        /* istanbul ignore next */\n        if (!isNullOrUndefined(liElement) && !isNullOrUndefined(liElement.querySelector('.' + DELETE_ICON))) {\n            let spinnerTarget = liElement.querySelector('.' + DELETE_ICON);\n            hideSpinner(spinnerTarget);\n            detach(liElement.querySelector('.e-spinner-pane'));\n        }\n    }\n    /* istanbul ignore next */\n    getFilesFromFolder(event) {\n        this.filesEntries = [];\n        let items;\n        items = this.multiple ? event.dataTransfer.items : [event.dataTransfer.items[0]];\n        let validDirectoryUpload = this.checkDirectoryUpload(items);\n        if (!validDirectoryUpload) {\n            return;\n        }\n        for (let i = 0; i < items.length; i++) {\n            // tslint:disable-next-line\n            let item = items[i].webkitGetAsEntry();\n            if (item.isFile) {\n                let files = [];\n                // tslint:disable-next-line\n                (item).file((fileObj) => {\n                    let path = item.fullPath;\n                    files.push({ 'path': path, 'file': fileObj });\n                });\n                this.renderSelectedFiles(event, files, true);\n            }\n            else if (item.isDirectory) {\n                this.traverseFileTree(item, event);\n            }\n        }\n    }\n    /* istanbul ignore next */\n    checkDirectoryUpload(items) {\n        for (let i = 0; items && i < items.length; i++) {\n            // tslint:disable-next-line\n            let item = items[i].webkitGetAsEntry();\n            if (item.isDirectory) {\n                return true;\n            }\n        }\n        return false;\n    }\n    // tslint:disable\n    /* istanbul ignore next */\n    traverseFileTree(item, event) {\n        if (item.isFile) {\n            this.filesEntries.push(item);\n        }\n        else if (item.isDirectory) {\n            // tslint:disable-next-line\n            let directoryReader = item.createReader();\n            // tslint:disable-next-line\n            this.readFileFromDirectory(directoryReader, event);\n        }\n    }\n    // tslint:disable\n    /* istanbul ignore next */\n    readFileFromDirectory(directoryReader, event) {\n        // tslint:disable-next-line\n        directoryReader.readEntries((entries) => {\n            for (let i = 0; i < entries.length; i++) {\n                this.traverseFileTree(entries[i]);\n                // tslint:disable-next-line\n            }\n            \n            this.pushFilesEntries(event);\n            if (entries.length) {\n                this.readFileFromDirectory(directoryReader);\n            }\n        });\n    }\n    pushFilesEntries(event) {\n        let files = [];\n        for (let i = 0; i < this.filesEntries.length; i++) {\n            // tslint:disable-next-line\n            this.filesEntries[i].file((fileObj) => {\n                if (this.filesEntries.length) {\n                    let path = this.filesEntries[i].fullPath;\n                    files.push({ 'path': path, 'file': fileObj });\n                    if (i === this.filesEntries.length - 1) {\n                        this.filesEntries = [];\n                        this.renderSelectedFiles(event, files, true);\n                    }\n                }\n            });\n        }\n    }\n    // tslint:enable\n    onSelectFiles(args) {\n        if (!this.enabled) {\n            return;\n        }\n        let targetFiles;\n        /* istanbul ignore next */\n        if (args.type === 'drop') {\n            if (this.directoryUpload) {\n                this.getFilesFromFolder(args);\n            }\n            else {\n                let files = this.sortFilesList = args.dataTransfer.files;\n                if (this.browserName !== 'msie' && this.browserName !== 'edge') {\n                    this.element.files = files;\n                }\n                if (files.length > 0) {\n                    targetFiles = this.multiple ? this.sortFileList(files) : [files[0]];\n                    this.renderSelectedFiles(args, targetFiles);\n                }\n            }\n        }\n        else {\n            targetFiles = [].slice.call(args.target.files);\n            this.renderSelectedFiles(args, targetFiles);\n        }\n    }\n    /* istanbul ignore next */\n    getBase64(file) {\n        return new Promise((resolve, reject) => {\n            let fileReader = new FileReader();\n            fileReader.readAsDataURL(file);\n            fileReader.onload = () => resolve(fileReader.result);\n            fileReader.onerror = (error) => reject(error);\n        });\n    }\n    /* istanbul ignore next */\n    /* tslint:ignore */\n    renderSelectedFiles(args, \n    // tslint:disable-next-line\n    targetFiles, directory, paste) {\n        this.base64String = [];\n        // tslint:disable-next-line\n        let eventArgs = {\n            event: args,\n            cancel: false,\n            filesData: [],\n            isModified: false,\n            modifiedFilesData: [],\n            progressInterval: '',\n            isCanceled: false,\n            currentRequest: null,\n            customFormData: null\n        };\n        /* istanbul ignore next */\n        if (targetFiles.length < 1) {\n            eventArgs.isCanceled = true;\n            this.trigger('selected', eventArgs);\n            return;\n        }\n        this.flag = true;\n        let fileData = [];\n        if (!this.multiple) {\n            this.clearData(true);\n            targetFiles = [targetFiles[0]];\n        }\n        for (let i = 0; i < targetFiles.length; i++) {\n            let file = directory ? targetFiles[i].file : targetFiles[i];\n            this.updateInitialFileDetails(args, targetFiles, file, i, fileData, directory, paste);\n        }\n        eventArgs.filesData = fileData;\n        if (this.allowedExtensions.indexOf('*') > -1) {\n            this.allTypes = true;\n        }\n        if (!this.allTypes) {\n            fileData = this.checkExtension(fileData);\n        }\n        this.trigger('selected', eventArgs, (eventArgs) => {\n            this._internalRenderSelect(eventArgs, fileData);\n        });\n    }\n    updateInitialFileDetails(args, \n    // tslint:disable-next-line\n    targetFiles, file, i, fileData, directory, paste) {\n        let fileName = directory ? targetFiles[i].path.substring(1, targetFiles[i].path.length) : paste ?\n            getUniqueID(file.name.substring(0, file.name.lastIndexOf('.'))) + '.' + this.getFileType(file.name) :\n            this.directoryUpload ? targetFiles[i].webkitRelativePath : file.name;\n        let fileDetails = {\n            name: fileName,\n            rawFile: file,\n            size: file.size,\n            status: this.localizedTexts('readyToUploadMessage'),\n            type: this.getFileType(file.name),\n            validationMessages: this.validatedFileSize(file.size),\n            statusCode: '1',\n            id: getUniqueID(file.name.substring(0, file.name.lastIndexOf('.'))) + '.' + this.getFileType(file.name)\n        };\n        /* istanbul ignore next */\n        if (paste) {\n            fileDetails.fileSource = 'paste';\n        }\n        fileDetails.status = fileDetails.validationMessages.minSize !== '' ? this.localizedTexts('invalidMinFileSize') :\n            fileDetails.validationMessages.maxSize !== '' ? this.localizedTexts('invalidMaxFileSize') : fileDetails.status;\n        if (fileDetails.validationMessages.minSize !== '' || fileDetails.validationMessages.maxSize !== '') {\n            fileDetails.statusCode = '0';\n        }\n        fileData.push(fileDetails);\n    }\n    _internalRenderSelect(eventArgs, fileData) {\n        if (!eventArgs.cancel) {\n            /* istanbul ignore next */\n            if (isBlazor()) {\n                this.currentRequestHeader = eventArgs.currentRequest;\n                this.customFormDatas = eventArgs.customFormData;\n            }\n            this.selectedFiles = this.selectedFiles.concat(fileData);\n            this.btnTabIndex = this.disableKeyboardNavigation ? '-1' : '0';\n            if (this.showFileList) {\n                if (eventArgs.isModified && eventArgs.modifiedFilesData.length > 0) {\n                    for (let j = 0; j < eventArgs.modifiedFilesData.length; j++) {\n                        for (let k = 0; k < fileData.length; k++) {\n                            if (eventArgs.modifiedFilesData[j].id === fileData[k].id) {\n                                eventArgs.modifiedFilesData[j].rawFile = fileData[k].rawFile;\n                            }\n                        }\n                    }\n                    let dataFiles = this.allTypes ? eventArgs.modifiedFilesData :\n                        this.checkExtension(eventArgs.modifiedFilesData);\n                    this.updateSortedFileList(dataFiles);\n                    this.filesData = dataFiles;\n                    if (!this.isForm || this.allowUpload()) {\n                        this.checkAutoUpload(dataFiles);\n                    }\n                }\n                else {\n                    this.createFileList(fileData, true);\n                    if (!(this.isBlazorSaveUrl || this.isBlazorTemplate)) {\n                        this.filesData = this.filesData.concat(fileData);\n                    }\n                    if (!this.isForm || this.allowUpload()) {\n                        if (!(this.isBlazorSaveUrl || this.isBlazorTemplate)) {\n                            this.checkAutoUpload(fileData);\n                        }\n                    }\n                }\n                if (!isNullOrUndefined(eventArgs.progressInterval) && eventArgs.progressInterval !== '') {\n                    this.progressInterval = eventArgs.progressInterval;\n                }\n            }\n            else {\n                this.filesData = this.filesData.concat(fileData);\n                if (this.isBlazorSaveUrl) {\n                    // tslint:disable-next-line\n                    this.interopAdaptor.invokeMethodAsync('updateServerFileData', this.filesData, this.isForm);\n                }\n                if (this.autoUpload) {\n                    this.upload(this.filesData, true);\n                }\n            }\n            this.raiseActionComplete();\n            this.isFirstFileOnSelection = true;\n        }\n    }\n    allowUpload() {\n        let allowFormUpload = false;\n        if (this.isForm && (!isNullOrUndefined(this.asyncSettings.saveUrl) && this.asyncSettings.saveUrl !== '')) {\n            allowFormUpload = true;\n        }\n        return allowFormUpload;\n    }\n    isFormUpload() {\n        let isFormUpload = false;\n        if (this.isForm && ((isNullOrUndefined(this.asyncSettings.saveUrl) || this.asyncSettings.saveUrl === '')\n            && (isNullOrUndefined(this.asyncSettings.removeUrl) || this.asyncSettings.removeUrl === ''))) {\n            isFormUpload = true;\n        }\n        return isFormUpload;\n    }\n    clearData(singleUpload) {\n        if (!isNullOrUndefined(this.listParent) && !(this.isBlazorSaveUrl || this.isBlazorTemplate)) {\n            detach(this.listParent);\n            this.listParent = null;\n        }\n        if (this.browserName !== 'msie' && !singleUpload) {\n            this.element.value = '';\n        }\n        this.fileList = [];\n        this.filesData = [];\n        if (this.isBlazorSaveUrl || this.isBlazorTemplate) {\n            // tslint:disable-next-line\n            this.interopAdaptor.invokeMethodAsync('clearAll');\n        }\n        else {\n            this.removeActionButtons();\n        }\n    }\n    updateSortedFileList(filesData) {\n        let previousListClone = this.createElement('div', { id: 'clonewrapper' });\n        let added = -1;\n        let removedList;\n        if (this.listParent) {\n            for (let i = 0; i < this.listParent.querySelectorAll('li').length; i++) {\n                let liElement = this.listParent.querySelectorAll('li')[i];\n                previousListClone.appendChild(liElement.cloneNode(true));\n            }\n            removedList = this.listParent.querySelectorAll('li');\n            for (let item of removedList) {\n                detach(item);\n            }\n            this.removeActionButtons();\n            let oldList = [].slice.call(previousListClone.childNodes);\n            detach(this.listParent);\n            this.listParent = null;\n            this.fileList = [];\n            this.createParentUL();\n            for (let index = 0; index < filesData.length; index++) {\n                for (let j = 0; j < this.filesData.length; j++) {\n                    if (this.filesData[j].name === filesData[index].name) {\n                        this.listParent.appendChild(oldList[j]);\n                        EventHandler.add(oldList[j].querySelector('.e-icons'), 'click', this.removeFiles, this);\n                        this.fileList.push(oldList[j]);\n                        added = index;\n                    }\n                }\n                if (added !== index) {\n                    this.createFileList([filesData[index]]);\n                }\n            }\n        }\n        else {\n            this.createFileList(filesData);\n        }\n    }\n    isBlank(str) {\n        return (!str || /^\\s*$/.test(str));\n    }\n    checkExtension(files) {\n        let dropFiles = files;\n        if (!this.isBlank(this.allowedExtensions)) {\n            let allowedExtensions = [];\n            let extensions = this.allowedExtensions.split(',');\n            for (let extension of extensions) {\n                allowedExtensions.push(extension.trim().toLocaleLowerCase());\n            }\n            for (let i = 0; i < files.length; i++) {\n                if (allowedExtensions.indexOf(('.' + files[i].type).toLocaleLowerCase()) === -1) {\n                    files[i].status = this.localizedTexts('invalidFileType');\n                    files[i].statusCode = '0';\n                }\n            }\n        }\n        return dropFiles;\n    }\n    validatedFileSize(fileSize) {\n        let minSizeError = '';\n        let maxSizeError = '';\n        if (fileSize < this.minFileSize) {\n            minSizeError = this.localizedTexts('invalidMinFileSize');\n        }\n        else if (fileSize > this.maxFileSize) {\n            maxSizeError = this.localizedTexts('invalidMaxFileSize');\n        }\n        else {\n            minSizeError = '';\n            maxSizeError = '';\n        }\n        let errorMessage = { minSize: minSizeError, maxSize: maxSizeError };\n        return errorMessage;\n    }\n    isPreLoadFile(fileData) {\n        let isPreload = false;\n        for (let i = 0; i < this.files.length; i++) {\n            if (this.files[i].name === fileData.name.slice(0, fileData.name.lastIndexOf('.')) && this.files[i].type === fileData.type) {\n                isPreload = true;\n            }\n        }\n        return isPreload;\n    }\n    createCustomfileList(fileData) {\n        this.createParentUL();\n        resetBlazorTemplate(this.element.id + 'Template', 'Template');\n        for (let listItem of fileData) {\n            let liElement = this.createElement('li', { className: FILE, attrs: { 'data-file-name': listItem.name } });\n            this.uploadTemplateFn = this.templateComplier(this.template);\n            // tslint:disable-next-line\n            let liTempCompiler = this.uploadTemplateFn(listItem, this, 'template', this.element.id + 'Template', this.isStringTemplate, null, liElement);\n            if (liTempCompiler) {\n                let fromElements = [].slice.call(liTempCompiler);\n                append(fromElements, liElement);\n            }\n            let index = fileData.indexOf(listItem);\n            let eventArgs = {\n                element: liElement,\n                fileInfo: listItem,\n                index: index,\n                isPreload: this.isPreLoadFile(listItem)\n            };\n            let eventsArgs = {\n                element: liElement,\n                fileInfo: listItem,\n                index: index,\n                isPreload: this.isPreLoadFile(listItem)\n            };\n            this.trigger('rendering', eventArgs);\n            this.trigger('fileListRendering', eventsArgs);\n            this.listParent.appendChild(liElement);\n            this.fileList.push(liElement);\n        }\n        this.renderReactTemplates();\n        updateBlazorTemplate(this.element.id + 'Template', 'Template', this, false);\n    }\n    createParentUL() {\n        if (isNullOrUndefined(this.listParent)) {\n            this.listParent = this.createElement('ul', { className: LIST_PARENT });\n            this.uploadWrapper.appendChild(this.listParent);\n        }\n    }\n    formFileList(fileData, files) {\n        let fileList = this.createElement('li', { className: FILE });\n        fileList.setAttribute('data-files-count', fileData.length + '');\n        let fileContainer = this.createElement('span', { className: TEXT_CONTAINER });\n        let statusMessage;\n        for (let listItem of fileData) {\n            let fileNameEle = this.createElement('span', { className: FILE_NAME });\n            fileNameEle.innerHTML = this.getFileNameOnly(listItem.name);\n            let fileTypeEle = this.createElement('span', { className: FILE_TYPE });\n            fileTypeEle.innerHTML = '.' + this.getFileType(listItem.name);\n            if (!this.enableRtl) {\n                fileContainer.appendChild(fileNameEle);\n                fileContainer.appendChild(fileTypeEle);\n            }\n            else {\n                let rtlContainer = this.createElement('span', { className: RTL_CONTAINER });\n                rtlContainer.appendChild(fileTypeEle);\n                rtlContainer.appendChild(fileNameEle);\n                fileContainer.appendChild(rtlContainer);\n            }\n            this.truncateName(fileNameEle);\n            statusMessage = this.formValidateFileInfo(listItem, fileList);\n        }\n        fileList.appendChild(fileContainer);\n        this.setListToFileInfo(fileData, fileList);\n        let index = this.listParent.querySelectorAll('li').length;\n        let infoEle = this.createElement('span');\n        if (fileList.classList.contains(INVALID_FILE)) {\n            infoEle.classList.add(STATUS);\n            infoEle.classList.add(INVALID_FILE);\n            infoEle.innerText = fileData.length > 1 ? this.localizedTexts('invalidFileSelection') : statusMessage;\n        }\n        else {\n            infoEle.classList.add(fileData.length > 1 ? INFORMATION : FILE_SIZE);\n            infoEle.innerText = fileData.length > 1 ? this.localizedTexts('totalFiles') + ': ' + fileData.length + ' , '\n                + this.localizedTexts('size') + ': ' +\n                this.bytesToSize(this.getFileSize(fileData)) : this.bytesToSize(fileData[0].size);\n            this.createFormInput(fileData);\n        }\n        fileContainer.appendChild(infoEle);\n        if (isNullOrUndefined(fileList.querySelector('.e-icons'))) {\n            let iconElement = this.createElement('span', { className: 'e-icons', attrs: { 'tabindex': this.btnTabIndex } });\n            /* istanbul ignore next */\n            if (this.browserName === 'msie') {\n                iconElement.classList.add('e-msie');\n            }\n            iconElement.setAttribute('title', this.localizedTexts('remove'));\n            fileList.appendChild(fileContainer);\n            fileList.appendChild(iconElement);\n            EventHandler.add(iconElement, 'click', this.removeFiles, this);\n            iconElement.classList.add(REMOVE_ICON);\n        }\n        let eventArgs = {\n            element: fileList,\n            fileInfo: this.mergeFileInfo(fileData, fileList),\n            index: index,\n            isPreload: this.isPreLoadFile(this.mergeFileInfo(fileData, fileList))\n        };\n        let eventsArgs = {\n            element: fileList,\n            fileInfo: this.mergeFileInfo(fileData, fileList),\n            index: index,\n            isPreload: this.isPreLoadFile(this.mergeFileInfo(fileData, fileList))\n        };\n        this.trigger('rendering', eventArgs);\n        this.trigger('fileListRendering', eventsArgs);\n        this.listParent.appendChild(fileList);\n        this.fileList.push(fileList);\n    }\n    formValidateFileInfo(listItem, fileList) {\n        let statusMessage = listItem.status;\n        let validationMessages = this.validatedFileSize(listItem.size);\n        if (validationMessages.minSize !== '' || validationMessages.maxSize !== '') {\n            this.addInvalidClass(fileList);\n            statusMessage = validationMessages.minSize !== '' ? this.localizedTexts('invalidMinFileSize') :\n                validationMessages.maxSize !== '' ? this.localizedTexts('invalidMaxFileSize') : statusMessage;\n        }\n        let typeValidationMessage = this.checkExtension(this.getFilesInArray(listItem))[0].status;\n        if (typeValidationMessage === this.localizedTexts('invalidFileType')) {\n            this.addInvalidClass(fileList);\n            statusMessage = typeValidationMessage;\n        }\n        return statusMessage;\n    }\n    addInvalidClass(fileList) {\n        fileList.classList.add(INVALID_FILE);\n    }\n    createFormInput(fileData) {\n        let inputElement = this.element.cloneNode(true);\n        inputElement.classList.add(HIDDEN_INPUT);\n        for (let listItem of fileData) {\n            listItem.input = inputElement;\n        }\n        inputElement.setAttribute('name', this.uploaderName);\n        this.uploadWrapper.querySelector('.' + INPUT_WRAPPER).appendChild(inputElement);\n        if (this.browserName !== 'msie' && this.browserName !== 'edge') {\n            this.element.value = '';\n        }\n    }\n    getFileSize(fileData) {\n        let fileSize = 0;\n        for (let file of fileData) {\n            fileSize += file.size;\n        }\n        return fileSize;\n    }\n    mergeFileInfo(fileData, fileList) {\n        let result = {\n            name: '',\n            rawFile: '',\n            size: 0,\n            status: '',\n            type: '',\n            validationMessages: { minSize: '', maxSize: '' },\n            statusCode: '1',\n            list: fileList\n        };\n        let fileNames = [];\n        let type = '';\n        for (let listItem of fileData) {\n            fileNames.push(listItem.name);\n            type = listItem.type;\n        }\n        result.name = fileNames.join(', ');\n        result.size = this.getFileSize(fileData);\n        result.type = type;\n        result.status = this.statusForFormUpload(fileData, fileList);\n        return result;\n    }\n    statusForFormUpload(fileData, fileList) {\n        let isValid = true;\n        let statusMessage;\n        for (let listItem of fileData) {\n            statusMessage = listItem.status;\n            let validationMessages = this.validatedFileSize(listItem.size);\n            if (validationMessages.minSize !== '' || validationMessages.maxSize !== '') {\n                isValid = false;\n                statusMessage = validationMessages.minSize !== '' ? this.localizedTexts('invalidMinFileSize') :\n                    validationMessages.maxSize !== '' ? this.localizedTexts('invalidMaxFileSize') : statusMessage;\n            }\n            let typeValidationMessage = this.checkExtension(this.getFilesInArray(listItem))[0].status;\n            if (typeValidationMessage === this.localizedTexts('invalidFileType')) {\n                isValid = false;\n                statusMessage = typeValidationMessage;\n            }\n        }\n        if (!isValid) {\n            fileList.classList.add(INVALID_FILE);\n            statusMessage = fileData.length > 1 ? this.localizedTexts('invalidFileSelection') : statusMessage;\n        }\n        else {\n            statusMessage = this.localizedTexts('totalFiles') + ': ' + fileData.length + ' , '\n                + this.localizedTexts('size') + ': ' +\n                this.bytesToSize(this.getFileSize(fileData));\n        }\n        return statusMessage;\n    }\n    formCustomFileList(fileData, files) {\n        this.createParentUL();\n        resetBlazorTemplate(this.element.id + 'Template', 'Template');\n        let fileList = this.createElement('li', { className: FILE });\n        fileList.setAttribute('data-files-count', fileData.length + '');\n        this.setListToFileInfo(fileData, fileList);\n        let result = this.mergeFileInfo(fileData, fileList);\n        fileList.setAttribute('data-file-name', result.name);\n        this.uploadTemplateFn = this.templateComplier(this.template);\n        // tslint:disable-next-line\n        let liTempCompiler = this.uploadTemplateFn(result, this, 'template', this.element.id + 'Template', this.isStringTemplate, null, fileList);\n        if (liTempCompiler) {\n            let fromElements = [].slice.call(liTempCompiler);\n            append(fromElements, fileList);\n        }\n        let index = this.listParent.querySelectorAll('li').length;\n        if (!fileList.classList.contains(INVALID_FILE)) {\n            this.createFormInput(fileData);\n        }\n        let eventArgs = {\n            element: fileList,\n            fileInfo: result,\n            index: index,\n            isPreload: this.isPreLoadFile(result)\n        };\n        let eventsArgs = {\n            element: fileList,\n            fileInfo: result,\n            index: index,\n            isPreload: this.isPreLoadFile(result)\n        };\n        this.trigger('rendering', eventArgs);\n        this.trigger('fileListRendering', eventsArgs);\n        this.listParent.appendChild(fileList);\n        this.fileList.push(fileList);\n        this.renderReactTemplates();\n        updateBlazorTemplate(this.element.id + 'Template', 'Template', this, false);\n    }\n    /**\n     * Create the file list for specified files data.\n     * @param { FileInfo[] } fileData - specifies the files data for file list creation.\n     * @returns void\n     */\n    createFileList(fileData, isSelectedFile) {\n        if (this.isBlazorSaveUrl || this.isBlazorTemplate) {\n            let fileListData = (isSelectedFile) ? this.filesData = this.filesData.concat(fileData) : fileData;\n            // tslint:disable-next-line\n            this.interopAdaptor.invokeMethodAsync('createFileList', fileListData, this.isForm);\n        }\n        else {\n            this.createParentUL();\n            if (this.template !== '' && !isNullOrUndefined(this.template)) {\n                if (this.isFormUpload()) {\n                    this.uploadWrapper.classList.add(FORM_UPLOAD);\n                    this.formCustomFileList(fileData, this.element.files);\n                }\n                else {\n                    this.createCustomfileList(fileData);\n                }\n            }\n            else if (this.isFormUpload()) {\n                this.uploadWrapper.classList.add(FORM_UPLOAD);\n                this.formFileList(fileData, this.element.files);\n            }\n            else {\n                for (let listItem of fileData) {\n                    let liElement = this.createElement('li', {\n                        className: FILE,\n                        attrs: { 'data-file-name': listItem.name, 'data-files-count': '1' }\n                    });\n                    let textContainer = this.createElement('span', { className: TEXT_CONTAINER });\n                    let textElement = this.createElement('span', { className: FILE_NAME, attrs: { 'title': listItem.name } });\n                    textElement.innerHTML = this.getFileNameOnly(listItem.name);\n                    let fileExtension = this.createElement('span', { className: FILE_TYPE });\n                    fileExtension.innerHTML = '.' + this.getFileType(listItem.name);\n                    if (!this.enableRtl) {\n                        textContainer.appendChild(textElement);\n                        textContainer.appendChild(fileExtension);\n                    }\n                    else {\n                        let rtlContainer = this.createElement('span', { className: RTL_CONTAINER });\n                        rtlContainer.appendChild(fileExtension);\n                        rtlContainer.appendChild(textElement);\n                        textContainer.appendChild(rtlContainer);\n                    }\n                    let fileSize = this.createElement('span', { className: FILE_SIZE });\n                    fileSize.innerHTML = this.bytesToSize(listItem.size);\n                    textContainer.appendChild(fileSize);\n                    let statusElement = this.createElement('span', { className: STATUS });\n                    textContainer.appendChild(statusElement);\n                    statusElement.innerHTML = listItem.status;\n                    liElement.appendChild(textContainer);\n                    let iconElement = this.createElement('span', { className: ' e-icons',\n                        attrs: { 'tabindex': this.btnTabIndex } });\n                    /* istanbul ignore next */\n                    if (this.browserName === 'msie') {\n                        iconElement.classList.add('e-msie');\n                    }\n                    iconElement.setAttribute('title', this.localizedTexts('remove'));\n                    liElement.appendChild(iconElement);\n                    EventHandler.add(iconElement, 'click', this.removeFiles, this);\n                    if (listItem.statusCode === '2') {\n                        statusElement.classList.add(UPLOAD_SUCCESS);\n                        iconElement.classList.add(DELETE_ICON);\n                        iconElement.setAttribute('title', this.localizedTexts('delete'));\n                    }\n                    else if (listItem.statusCode !== '1') {\n                        statusElement.classList.remove(UPLOAD_SUCCESS);\n                        statusElement.classList.add(VALIDATION_FAILS);\n                    }\n                    if (this.autoUpload && listItem.statusCode === '1' && this.asyncSettings.saveUrl !== '') {\n                        statusElement.innerHTML = '';\n                    }\n                    if (!iconElement.classList.contains(DELETE_ICON)) {\n                        iconElement.classList.add(REMOVE_ICON);\n                    }\n                    let index = fileData.indexOf(listItem);\n                    let eventArgs = {\n                        element: liElement,\n                        fileInfo: listItem,\n                        index: index,\n                        isPreload: this.isPreLoadFile(listItem)\n                    };\n                    let eventsArgs = {\n                        element: liElement,\n                        fileInfo: listItem,\n                        index: index,\n                        isPreload: this.isPreLoadFile(listItem)\n                    };\n                    this.trigger('rendering', eventArgs);\n                    this.trigger('fileListRendering', eventsArgs);\n                    this.listParent.appendChild(liElement);\n                    this.fileList.push(liElement);\n                    this.truncateName(textElement);\n                    let preventActionComplete = this.flag;\n                    if (this.isPreLoadFile(listItem)) {\n                        this.flag = false;\n                        this.checkActionComplete(true);\n                        this.flag = preventActionComplete;\n                    }\n                }\n            }\n        }\n    }\n    getSlicedName(nameElement) {\n        let text;\n        text = nameElement.textContent;\n        nameElement.dataset.tail = text.slice(text.length - 10);\n    }\n    setListToFileInfo(fileData, fileList) {\n        for (let listItem of fileData) {\n            listItem.list = fileList;\n        }\n    }\n    truncateName(name) {\n        let nameElement = name;\n        if (this.browserName !== 'edge' && nameElement.offsetWidth < nameElement.scrollWidth) {\n            this.getSlicedName(nameElement);\n            /* istanbul ignore next */\n        }\n        else if (nameElement.offsetWidth + 1 < nameElement.scrollWidth) {\n            this.getSlicedName(nameElement);\n        }\n    }\n    getFileType(name) {\n        let extension;\n        let index = name.lastIndexOf('.');\n        if (index >= 0) {\n            extension = name.substring(index + 1);\n        }\n        return extension ? extension : '';\n    }\n    getFileNameOnly(name) {\n        let type = this.getFileType(name);\n        let names = name.split('.' + type);\n        return type = names[0];\n    }\n    setInitialAttributes() {\n        if (this.initialAttr.accept) {\n            this.element.setAttribute('accept', this.initialAttr.accept);\n        }\n        if (this.initialAttr.disabled) {\n            this.element.setAttribute('disabled', 'disabled');\n        }\n        if (this.initialAttr.multiple) {\n            let newAttr = document.createAttribute('multiple');\n            this.element.setAttributeNode(newAttr);\n        }\n    }\n    filterfileList(files) {\n        let filterFiles = [];\n        let li;\n        for (let i = 0; i < files.length; i++) {\n            li = this.getLiElement(files[i]);\n            if (!li.classList.contains(UPLOAD_SUCCESS)) {\n                filterFiles.push(files[i]);\n            }\n        }\n        return filterFiles;\n    }\n    updateStatus(files, status, statusCode, updateLiStatus = true) {\n        if (!(status === '' || isNullOrUndefined(status)) && !(statusCode === '' || isNullOrUndefined(statusCode))) {\n            if (this.isBlazorSaveUrl) {\n                for (let i = 0; i < this.filesData.length; i++) {\n                    if (this.filesData[i].name === files.name) {\n                        this.filesData[i].status = status;\n                        this.filesData[i].statusCode = statusCode;\n                    }\n                }\n            }\n            else {\n                files.status = status;\n                files.statusCode = statusCode;\n            }\n        }\n        if (updateLiStatus) {\n            let li = this.getLiElement(files);\n            if (!isNullOrUndefined(li)) {\n                if (!isNullOrUndefined(li.querySelector('.' + STATUS)) && !((status === '' || isNullOrUndefined(status)))) {\n                    li.querySelector('.' + STATUS).textContent = status;\n                }\n            }\n        }\n        return files;\n    }\n    getLiElement(files) {\n        let index;\n        for (let i = 0; i < this.filesData.length; i++) {\n            if ((!isNullOrUndefined(this.filesData[i].id) && !isNullOrUndefined(files.id)) ? (this.filesData[i].name === files.name &&\n                this.filesData[i].id === files.id) : this.filesData[i].name === files.name) {\n                index = i;\n            }\n        }\n        return this.fileList[index];\n    }\n    createProgressBar(liElement) {\n        let progressbarWrapper = this.createElement('span', { className: PROGRESS_WRAPPER });\n        let progressBar = this.createElement('progressbar', { className: PROGRESSBAR, attrs: { value: '0', max: '100' } });\n        let progressbarInnerWrapper = this.createElement('span', { className: PROGRESS_INNER_WRAPPER });\n        progressBar.setAttribute('style', 'width: 0%');\n        let progressbarText = this.createElement('span', { className: PROGRESSBAR_TEXT });\n        progressbarText.textContent = '0%';\n        progressbarInnerWrapper.appendChild(progressBar);\n        progressbarWrapper.appendChild(progressbarInnerWrapper);\n        progressbarWrapper.appendChild(progressbarText);\n        liElement.querySelector('.' + TEXT_CONTAINER).appendChild(progressbarWrapper);\n    }\n    /* istanbul ignore next */\n    updateProgressbar(e, li) {\n        if (!isNaN(Math.round((e.loaded / e.total) * 100)) && !isNullOrUndefined(li.querySelector('.' + PROGRESSBAR))) {\n            if (!isNullOrUndefined(this.progressInterval) && this.progressInterval !== '') {\n                let value = (Math.round((e.loaded / e.total) * 100)) % parseInt(this.progressInterval, 10);\n                if (value === 0 || value === 100) {\n                    this.changeProgressValue(li, Math.round((e.loaded / e.total) * 100).toString() + '%');\n                }\n            }\n            else {\n                this.changeProgressValue(li, Math.round((e.loaded / e.total) * 100).toString() + '%');\n            }\n        }\n    }\n    changeProgressValue(li, progressValue) {\n        li.querySelector('.' + PROGRESSBAR).setAttribute('style', 'width:' + progressValue);\n        li.querySelector('.' + PROGRESSBAR_TEXT).textContent = progressValue;\n    }\n    uploadInProgress(e, files, customUI, request) {\n        let li = this.getLiElement(files);\n        if (isNullOrUndefined(li) && (!customUI)) {\n            return;\n        }\n        if (!isNullOrUndefined(li)) {\n            /* istanbul ignore next */\n            if (files.statusCode === '5') {\n                this.cancelUploadingFile(files, e, request, li);\n            }\n            if (!(li.querySelectorAll('.' + PROGRESS_WRAPPER).length > 0) && li.querySelector('.' + STATUS)) {\n                li.querySelector('.' + STATUS).classList.add(UPLOAD_INPROGRESS);\n                this.createProgressBar(li);\n                this.updateProgressBarClasses(li, UPLOAD_INPROGRESS);\n                li.querySelector('.' + STATUS).classList.remove(UPLOAD_FAILED);\n            }\n            this.updateProgressbar(e, li);\n            let iconEle = li.querySelector('.' + REMOVE_ICON);\n            if (!isNullOrUndefined(iconEle)) {\n                iconEle.classList.add(ABORT_ICON, UPLOAD_INPROGRESS);\n                iconEle.setAttribute('title', this.localizedTexts('abort'));\n                iconEle.classList.remove(REMOVE_ICON);\n            }\n        }\n        else {\n            this.cancelUploadingFile(files, e, request);\n        }\n        let args = { e, operation: 'upload', file: this.updateStatus(files, this.localizedTexts('inProgress'), '3') };\n        this.trigger('progress', args);\n    }\n    /* istanbul ignore next */\n    cancelUploadingFile(files, e, request, li) {\n        if (files.statusCode === '5') {\n            let eventArgs = {\n                event: e,\n                fileData: files,\n                cancel: false\n            };\n            this.trigger('canceling', eventArgs, (eventArgs) => {\n                if (eventArgs.cancel) {\n                    files.statusCode = '3';\n                    if (!isNullOrUndefined(li)) {\n                        let spinnerTarget = li.querySelector('.' + ABORT_ICON);\n                        if (!isNullOrUndefined(spinnerTarget)) {\n                            hideSpinner(spinnerTarget);\n                            detach(li.querySelector('.e-spinner-pane'));\n                        }\n                    }\n                }\n                else {\n                    request.emitError = false;\n                    request.httpRequest.abort();\n                    let formData = new FormData();\n                    if (files.statusCode === '5') {\n                        let name = this.element.getAttribute('name');\n                        formData.append(name, files.name);\n                        formData.append('cancel-uploading', files.name);\n                        let ajax = new Ajax(this.asyncSettings.removeUrl, 'POST', true, null);\n                        ajax.emitError = false;\n                        ajax.onLoad = (e) => { this.removecanceledFile(e, files); return {}; };\n                        ajax.send(formData);\n                    }\n                }\n            });\n        }\n    }\n    removecanceledFile(e, file) {\n        let liElement = this.getLiElement(file);\n        if (liElement.querySelector('.' + RETRY_ICON) || isNullOrUndefined(liElement.querySelector('.' + ABORT_ICON))) {\n            return;\n        }\n        this.updateStatus(file, this.localizedTexts('fileUploadCancel'), '5');\n        this.renderFailureState(e, file, liElement);\n        let spinnerTarget = liElement.querySelector('.' + REMOVE_ICON);\n        if (!isNullOrUndefined(liElement)) {\n            hideSpinner(spinnerTarget);\n            detach(liElement.querySelector('.e-spinner-pane'));\n        }\n        let requestResponse = e && e.currentTarget ? this.getResponse(e) : null;\n        let args = { event: e, response: requestResponse, operation: 'cancel', file: file };\n        this.trigger('success', args);\n    }\n    renderFailureState(e, file, liElement) {\n        this.updateProgressBarClasses(liElement, UPLOAD_FAILED);\n        this.removeProgressbar(liElement, 'failure');\n        if (!isNullOrUndefined(liElement.querySelector('.e-file-status'))) {\n            liElement.querySelector('.e-file-status').classList.add(UPLOAD_FAILED);\n        }\n        let deleteIcon = liElement.querySelector('.' + ABORT_ICON);\n        if (isNullOrUndefined(deleteIcon)) {\n            return;\n        }\n        deleteIcon.classList.remove(ABORT_ICON, UPLOAD_INPROGRESS);\n        deleteIcon.classList.add(REMOVE_ICON);\n        deleteIcon.setAttribute('title', this.localizedTexts('remove'));\n        this.pauseButton = this.createElement('span', { className: 'e-icons e-file-reload-btn', attrs: { 'tabindex': this.btnTabIndex } });\n        deleteIcon.parentElement.insertBefore(this.pauseButton, deleteIcon);\n        this.pauseButton.setAttribute('title', this.localizedTexts('retry'));\n        let retryElement = liElement.querySelector('.' + RETRY_ICON);\n        /* istanbul ignore next */\n        retryElement.addEventListener('click', (e) => { this.reloadcanceledFile(e, file, liElement, false); }, false);\n    }\n    reloadcanceledFile(e, file, liElement, custom) {\n        file.statusCode = '1';\n        file.status = this.localizedTexts('readyToUploadMessage');\n        if (!custom) {\n            liElement.querySelector('.' + STATUS).classList.remove(UPLOAD_FAILED);\n            if (!isNullOrUndefined(liElement.querySelector('.' + RETRY_ICON))) {\n                detach(liElement.querySelector('.' + RETRY_ICON));\n            }\n            this.pauseButton = null;\n        }\n        /* istanbul ignore next */\n        liElement.classList.add(RESTRICT_RETRY);\n        this.upload([file]);\n    }\n    /* istanbul ignore next */\n    uploadComplete(e, file, customUI) {\n        let status = e.target;\n        if (status.readyState === 4 && status.status >= 200 && status.status <= 299) {\n            let li = this.getLiElement(file);\n            if (isNullOrUndefined(li) && (!customUI || isNullOrUndefined(customUI))) {\n                return;\n            }\n            if (!isNullOrUndefined(li)) {\n                this.updateProgressBarClasses(li, UPLOAD_SUCCESS);\n                this.removeProgressbar(li, 'success');\n                let iconEle = li.querySelector('.' + ABORT_ICON);\n                if (!isNullOrUndefined(iconEle)) {\n                    iconEle.classList.add(DELETE_ICON);\n                    iconEle.setAttribute('title', this.localizedTexts('delete'));\n                    iconEle.classList.remove(ABORT_ICON);\n                    iconEle.classList.remove(UPLOAD_INPROGRESS);\n                }\n            }\n            this.raiseSuccessEvent(e, file);\n        }\n        else {\n            this.uploadFailed(e, file);\n        }\n    }\n    getResponse(e) {\n        // tslint:disable-next-line\n        let target = e.currentTarget;\n        let response = {\n            readyState: target.readyState,\n            statusCode: target.status,\n            statusText: target.statusText,\n            headers: target.getAllResponseHeaders(),\n            withCredentials: target.withCredentials\n        };\n        return response;\n    }\n    /* istanbul ignore next */\n    serverRemoveIconBindEvent() {\n        if (this.uploadWrapper && this.isBlazorSaveUrl) {\n            let iconElement = [].slice.call(this.uploadWrapper.querySelectorAll('ul li'));\n            for (let i = 0; i < iconElement.length; i++) {\n                let removeIconEle = (iconElement[i]) ? iconElement[i].querySelector('.e-icons') : null;\n                if (removeIconEle) {\n                    EventHandler.remove(removeIconEle, 'click', this.removeFiles);\n                    EventHandler.add(removeIconEle, 'click', this.removeFiles, this);\n                }\n            }\n        }\n    }\n    raiseSuccessEvent(e, file) {\n        let response = e && e.currentTarget ? this.getResponse(e) : null;\n        let statusMessage = this.localizedTexts('uploadSuccessMessage');\n        let args = {\n            e, response: response, operation: 'upload', file: this.updateStatus(file, statusMessage, '2', false), statusText: statusMessage\n        };\n        if (!this.isBlazorSaveUrl) {\n            let liElement = this.getLiElement(file);\n            if (!isNullOrUndefined(liElement)) {\n                let spinnerEle = liElement.querySelector('.' + SPINNER_PANE);\n                if (!isNullOrUndefined(spinnerEle)) {\n                    hideSpinner(liElement);\n                    detach(spinnerEle);\n                }\n            }\n        }\n        this.trigger('success', args, (args) => {\n            // tslint:disable-next-line\n            this.updateStatus(file, args.statusText, '2');\n            this.uploadedFilesData.push(file);\n            if (!this.isBlazorSaveUrl) {\n                this.trigger('change', { file: this.uploadedFilesData });\n            }\n            this.checkActionButtonStatus();\n            if (this.fileList.length > 0) {\n                if ((!(this.getLiElement(file)).classList.contains(RESTRICT_RETRY))) {\n                    this.uploadSequential();\n                    this.checkActionComplete(true);\n                }\n                else {\n                    /* istanbul ignore next */\n                    (this.getLiElement(file)).classList.remove(RESTRICT_RETRY);\n                }\n            }\n        });\n    }\n    uploadFailed(e, file) {\n        let li = this.getLiElement(file);\n        let response = e && e.currentTarget ? this.getResponse(e) : null;\n        let statusMessage = this.localizedTexts('uploadFailedMessage');\n        let args = {\n            e, response: response, operation: 'upload', file: this.updateStatus(file, statusMessage, '0', false), statusText: statusMessage\n        };\n        if (!isNullOrUndefined(li)) {\n            this.renderFailureState(e, file, li);\n        }\n        this.trigger('failure', args, (args) => {\n            // tslint:disable-next-line\n            this.updateStatus(file, args.statusText, '0');\n            this.checkActionButtonStatus();\n            this.uploadSequential();\n            this.checkActionComplete(true);\n        });\n    }\n    uploadSequential() {\n        if (this.sequentialUpload) {\n            if (this.autoUpload) {\n                /* istanbul ignore next */\n                this.checkAutoUpload(this.filesData);\n            }\n            else {\n                this.uploadButtonClick();\n            }\n        }\n    }\n    checkActionComplete(increment) {\n        increment ? ++this.actionCompleteCount : --this.actionCompleteCount;\n        this.raiseActionComplete();\n    }\n    raiseActionComplete() {\n        if ((this.filesData.length === this.actionCompleteCount) && this.flag) {\n            this.flag = false;\n            let eventArgs = {\n                fileData: []\n            };\n            eventArgs.fileData = this.getSelectedFileStatus(this.selectedFiles);\n            this.trigger('actionComplete', eventArgs);\n        }\n    }\n    getSelectedFileStatus(selectedFiles) {\n        let matchFiles = [];\n        let matchFilesIndex = 0;\n        for (let selectFileIndex = 0; selectFileIndex < selectedFiles.length; selectFileIndex++) {\n            let selectedFileData = selectedFiles[selectFileIndex];\n            for (let fileDataIndex = 0; fileDataIndex < this.filesData.length; fileDataIndex++) {\n                if (this.filesData[fileDataIndex].name === selectedFileData.name) {\n                    matchFiles[matchFilesIndex] = this.filesData[fileDataIndex];\n                    ++matchFilesIndex;\n                }\n            }\n        }\n        return matchFiles;\n    }\n    updateProgressBarClasses(li, className) {\n        let progressBar = li.querySelector('.' + PROGRESSBAR);\n        if (!isNullOrUndefined(progressBar)) {\n            progressBar.classList.add(className);\n        }\n    }\n    removeProgressbar(li, callType) {\n        if (!isNullOrUndefined(li.querySelector('.' + PROGRESS_WRAPPER))) {\n            this.progressAnimation = new Animation({ duration: 1250 });\n            this.progressAnimation.animate(li.querySelector('.' + PROGRESS_WRAPPER), { name: 'FadeOut' });\n            this.progressAnimation.animate(li.querySelector('.' + PROGRESSBAR_TEXT), { name: 'FadeOut' });\n            setTimeout(() => { this.animateProgressBar(li, callType); }, 750);\n        }\n    }\n    /* istanbul ignore next */\n    animateProgressBar(li, callType) {\n        if (callType === 'success') {\n            li.classList.add(UPLOAD_SUCCESS);\n            if (!isNullOrUndefined(li.querySelector('.' + STATUS))) {\n                li.querySelector('.' + STATUS).classList.remove(UPLOAD_INPROGRESS);\n                this.progressAnimation.animate(li.querySelector('.' + STATUS), { name: 'FadeIn' });\n                li.querySelector('.' + STATUS).classList.add(UPLOAD_SUCCESS);\n            }\n        }\n        else {\n            if (!isNullOrUndefined(li.querySelector('.' + STATUS))) {\n                li.querySelector('.' + STATUS).classList.remove(UPLOAD_INPROGRESS);\n                this.progressAnimation.animate(li.querySelector('.' + STATUS), { name: 'FadeIn' });\n                li.querySelector('.' + STATUS).classList.add(UPLOAD_FAILED);\n            }\n        }\n        if (li.querySelector('.' + PROGRESS_WRAPPER)) {\n            detach(li.querySelector('.' + PROGRESS_WRAPPER));\n        }\n    }\n    setExtensions(extensions) {\n        if (extensions !== '' && !isNullOrUndefined(extensions)) {\n            this.element.setAttribute('accept', extensions);\n        }\n        else {\n            this.element.removeAttribute('accept');\n        }\n    }\n    templateComplier(uploadTemplate) {\n        if (uploadTemplate) {\n            try {\n                if (document.querySelectorAll(uploadTemplate).length) {\n                    return compile(document.querySelector(uploadTemplate).innerHTML.trim());\n                }\n            }\n            catch (exception) {\n                return compile(uploadTemplate);\n            }\n        }\n        return undefined;\n    }\n    setRTL() {\n        this.enableRtl ? addClass([this.uploadWrapper], RTL) : removeClass([this.uploadWrapper], RTL);\n    }\n    localizedTexts(localeText) {\n        this.l10n.setLocale(this.locale);\n        return this.l10n.getConstant(localeText);\n    }\n    setControlStatus() {\n        if (!this.enabled) {\n            this.uploadWrapper.classList.add(DISABLED);\n            this.element.setAttribute('disabled', 'disabled');\n            this.browseButton.setAttribute('disabled', 'disabled');\n            if (!isNullOrUndefined(this.clearButton)) {\n                this.clearButton.setAttribute('disabled', 'disabled');\n            }\n            if (!isNullOrUndefined(this.uploadButton)) {\n                this.uploadButton.setAttribute('disabled', 'disabled');\n            }\n        }\n        else {\n            if (this.uploadWrapper.classList.contains(DISABLED)) {\n                this.uploadWrapper.classList.remove(DISABLED);\n            }\n            if (!isNullOrUndefined(this.browseButton) && this.element.hasAttribute('disabled')) {\n                this.element.removeAttribute('disabled');\n                this.browseButton.removeAttribute('disabled');\n            }\n            if (!isNullOrUndefined(this.clearButton) && this.clearButton.hasAttribute('disabled')) {\n                this.clearButton.removeAttribute('disabled');\n            }\n            if (!isNullOrUndefined(this.uploadButton) && this.uploadButton.hasAttribute('disabled')) {\n                this.uploadButton.hasAttribute('disabled');\n            }\n        }\n    }\n    checkHTMLAttributes(isDynamic) {\n        let attributes$$1 = isDynamic ? isNullOrUndefined(this.htmlAttributes) ? [] : Object.keys(this.htmlAttributes) :\n            ['accept', 'multiple', 'disabled'];\n        for (let prop of attributes$$1) {\n            if (!isNullOrUndefined(this.element.getAttribute(prop))) {\n                switch (prop) {\n                    case 'accept':\n                        // tslint:disable-next-line\n                        if ((isNullOrUndefined(this.uploaderOptions) || (this.uploaderOptions['allowedExtensions'] === undefined))\n                            || isDynamic) {\n                            this.setProperties({ allowedExtensions: this.element.getAttribute('accept') }, !isDynamic);\n                            this.initialAttr.accept = this.allowedExtensions;\n                        }\n                        break;\n                    case 'multiple':\n                        // tslint:disable-next-line\n                        if ((isNullOrUndefined(this.uploaderOptions) || (this.uploaderOptions['multiple'] === undefined)) || isDynamic) {\n                            let isMutiple = this.element.getAttribute(prop) === 'multiple' ||\n                                this.element.getAttribute(prop) === '' || this.element.getAttribute(prop) === 'true' ? true : false;\n                            this.setProperties({ multiple: isMutiple }, !isDynamic);\n                            this.initialAttr.multiple = true;\n                        }\n                        break;\n                    case 'disabled':\n                        // tslint:disable-next-line\n                        if ((isNullOrUndefined(this.uploaderOptions) || (this.uploaderOptions['enabled'] === undefined)) || isDynamic) {\n                            let isDisabled = this.element.getAttribute(prop) === 'disabled' ||\n                                this.element.getAttribute(prop) === '' || this.element.getAttribute(prop) === 'true' ? false : true;\n                            this.setProperties({ enabled: isDisabled }, !isDynamic);\n                            this.initialAttr.disabled = true;\n                        }\n                }\n            }\n        }\n    }\n    chunkUpload(file, custom, fileIndex) {\n        let start = 0;\n        let end = Math.min(this.asyncSettings.chunkSize, file.size);\n        let index = 0;\n        let blob = file.rawFile.slice(start, end);\n        let metaData = { chunkIndex: index, blob: blob, file: file, start: start, end: end, retryCount: 0, request: null };\n        this.sendRequest(file, metaData, custom, fileIndex);\n    }\n    sendRequest(file, metaData, custom, fileIndex) {\n        let formData = new FormData();\n        let blob = file.rawFile.slice(metaData.start, metaData.end);\n        formData.append('chunkFile', blob, file.name);\n        formData.append(this.uploaderName, blob, file.name);\n        formData.append('chunk-index', metaData.chunkIndex.toString());\n        formData.append('chunkIndex', metaData.chunkIndex.toString());\n        let totalChunk = Math.max(Math.ceil(file.size / this.asyncSettings.chunkSize), 1);\n        formData.append('total-chunk', totalChunk.toString());\n        formData.append('totalChunk', totalChunk.toString());\n        let ajax = new Ajax({ url: this.asyncSettings.saveUrl, type: 'POST', async: true, contentType: null });\n        ajax.emitError = false;\n        ajax.onLoad = (e) => { this.chunkUploadComplete(e, metaData, custom); return {}; };\n        ajax.onUploadProgress = (e) => {\n            this.chunkUploadInProgress(e, metaData, custom);\n            return {};\n        };\n        let eventArgs = {\n            fileData: file,\n            customFormData: [],\n            cancel: false,\n            chunkSize: this.asyncSettings.chunkSize === 0 ? null : this.asyncSettings.chunkSize\n        };\n        ajax.beforeSend = (e) => {\n            eventArgs.currentRequest = ajax.httpRequest;\n            eventArgs.currentChunkIndex = metaData.chunkIndex;\n            /* istanbul ignore next */\n            if (isBlazor()) {\n                if (this.currentRequestHeader) {\n                    this.updateCustomheader(ajax.httpRequest, this.currentRequestHeader);\n                }\n                if (this.customFormDatas) {\n                    this.updateFormData(formData, this.customFormDatas);\n                }\n            }\n            if (eventArgs.currentChunkIndex === 0) {\n                // This event is currently not required but to avoid breaking changes for previous customer, we have included.\n                this.trigger('uploading', eventArgs, (eventArgs) => {\n                    this.uploadingEventCallback(formData, eventArgs, e, file);\n                });\n            }\n            else {\n                this.trigger('chunkUploading', eventArgs, (eventArgs) => {\n                    this.uploadingEventCallback(formData, eventArgs, e, file);\n                });\n            }\n        };\n        /* istanbul ignore next */\n        ajax.onError = (e) => { this.chunkUploadFailed(e, metaData, custom); return {}; };\n        ajax.send(formData);\n        metaData.request = ajax;\n    }\n    uploadingEventCallback(formData, eventArgs, e, file) {\n        if (eventArgs.cancel) {\n            this.eventCancelByArgs(e, eventArgs, file);\n        }\n        else {\n            this.updateFormData(formData, eventArgs.customFormData);\n        }\n    }\n    eventCancelByArgs(e, eventArgs, file) {\n        e.cancel = true;\n        if (eventArgs.fileData.statusCode === '5') {\n            return;\n        }\n        eventArgs.fileData.statusCode = '5';\n        eventArgs.fileData.status = this.localizedTexts('fileUploadCancel');\n        let liElement = this.getLiElement(eventArgs.fileData);\n        if (liElement) {\n            if (!isNullOrUndefined(liElement.querySelector('.' + STATUS))) {\n                liElement.querySelector('.' + STATUS).innerHTML = this.localizedTexts('fileUploadCancel');\n                liElement.querySelector('.' + STATUS).classList.add(UPLOAD_FAILED);\n            }\n            this.pauseButton = this.createElement('span', { className: 'e-icons e-file-reload-btn', attrs: { 'tabindex': this.btnTabIndex } });\n            let removeIcon = liElement.querySelector('.' + REMOVE_ICON);\n            if (removeIcon) {\n                removeIcon.parentElement.insertBefore(this.pauseButton, removeIcon);\n            }\n            this.pauseButton.setAttribute('title', this.localizedTexts('retry'));\n            /* istanbul ignore next */\n            this.pauseButton.addEventListener('click', (e) => { this.reloadcanceledFile(e, file, liElement); }, false);\n            this.checkActionButtonStatus();\n        }\n    }\n    checkChunkUpload() {\n        return (this.asyncSettings.chunkSize <= 0 || isNullOrUndefined(this.asyncSettings.chunkSize)) ? false : true;\n    }\n    chunkUploadComplete(e, metaData, custom) {\n        let response = e.target;\n        let liElement;\n        if (response.readyState === 4 && response.status >= 200 && response.status < 300) {\n            let requestResponse = e && e.currentTarget ? this.getResponse(e) : null;\n            let totalChunk = Math.max(Math.ceil(metaData.file.size / this.asyncSettings.chunkSize), 1);\n            let eventArgs = {\n                event: e,\n                file: metaData.file,\n                chunkIndex: metaData.chunkIndex,\n                totalChunk: totalChunk,\n                chunkSize: this.asyncSettings.chunkSize,\n                response: requestResponse\n            };\n            this.trigger('chunkSuccess', eventArgs);\n            if (isNullOrUndefined(custom) || !custom) {\n                liElement = this.getLiElement(metaData.file);\n            }\n            this.updateMetaData(metaData);\n            if (metaData.end === metaData.file.size) {\n                metaData.file.statusCode = '3';\n            }\n            if (metaData.file.statusCode === '5') {\n                let eventArgs = { event: e, fileData: metaData.file, cancel: false };\n                this.trigger('canceling', eventArgs, (eventArgs) => {\n                    /* istanbul ignore next */\n                    if (eventArgs.cancel) {\n                        metaData.file.statusCode = '3';\n                        let spinnerTarget = liElement.querySelector('.' + ABORT_ICON);\n                        if (!isNullOrUndefined(liElement) && !isNullOrUndefined(spinnerTarget)) {\n                            hideSpinner(spinnerTarget);\n                            detach(liElement.querySelector('.e-spinner-pane'));\n                        }\n                        this.sendNextRequest(metaData);\n                    }\n                    else {\n                        metaData.request.emitError = false;\n                        response.abort();\n                        let formData = new FormData();\n                        let name = this.element.getAttribute('name');\n                        formData.append(name, metaData.file.name);\n                        formData.append('cancel-uploading', metaData.file.name);\n                        formData.append('cancelUploading', metaData.file.name);\n                        let ajax = new Ajax(this.asyncSettings.removeUrl, 'POST', true, null);\n                        ajax.emitError = false;\n                        ajax.onLoad = (e) => { this.removeChunkFile(e, metaData, custom); return {}; };\n                        ajax.send(formData);\n                    }\n                });\n            }\n            else {\n                if ((totalChunk - 1) === metaData.chunkIndex && totalChunk > metaData.chunkIndex) {\n                    let index = this.pausedData.indexOf(metaData);\n                    if (index >= 0) {\n                        this.pausedData.splice(index, 1);\n                    }\n                    if (isNullOrUndefined(this.template) && (isNullOrUndefined(custom) || !custom) && liElement) {\n                        if (liElement) {\n                            detach(liElement.querySelector('.' + PAUSE_UPLOAD));\n                        }\n                        this.removeChunkProgressBar(metaData);\n                    }\n                    this.raiseSuccessEvent(e, metaData.file);\n                    return;\n                }\n                this.sendNextRequest(metaData);\n            }\n        }\n        else {\n            this.chunkUploadFailed(e, metaData);\n        }\n    }\n    sendNextRequest(metaData) {\n        metaData.start = metaData.end;\n        metaData.end += this.asyncSettings.chunkSize;\n        metaData.end = Math.min(metaData.end, metaData.file.size);\n        metaData.chunkIndex += 1;\n        this.sendRequest(metaData.file, metaData);\n    }\n    removeChunkFile(e, metaData, custom) {\n        if (isNullOrUndefined(this.template) && (isNullOrUndefined(custom) && !custom)) {\n            let liElement = this.getLiElement(metaData.file);\n            let deleteIcon = liElement.querySelector('.' + ABORT_ICON);\n            let spinnerTarget = deleteIcon;\n            this.updateStatus(metaData.file, this.localizedTexts('fileUploadCancel'), '5');\n            this.updateProgressBarClasses(liElement, UPLOAD_FAILED);\n            this.removeProgressbar(liElement, 'failure');\n            deleteIcon.classList.remove(ABORT_ICON);\n            deleteIcon.classList.add(REMOVE_ICON);\n            deleteIcon.setAttribute('title', this.localizedTexts('remove'));\n            let pauseIcon = liElement.querySelector('.' + PAUSE_UPLOAD);\n            pauseIcon.classList.add(RETRY_ICON);\n            pauseIcon.classList.remove(PAUSE_UPLOAD);\n            pauseIcon.setAttribute('title', this.localizedTexts('retry'));\n            if (!isNullOrUndefined(liElement) && !isNullOrUndefined(deleteIcon)) {\n                hideSpinner(spinnerTarget);\n                detach(liElement.querySelector('.e-spinner-pane'));\n            }\n        }\n    }\n    pauseUpload(metaData, e, custom) {\n        metaData.file.statusCode = '4';\n        metaData.file.status = this.localizedTexts('pause');\n        this.updateMetaData(metaData);\n        let eventArgs = {\n            event: e ? e : null,\n            file: metaData.file,\n            chunkIndex: metaData.chunkIndex,\n            chunkCount: Math.round(metaData.file.size / this.asyncSettings.chunkSize),\n            chunkSize: this.asyncSettings.chunkSize\n        };\n        this.abortUpload(metaData, custom, eventArgs);\n    }\n    abortUpload(metaData, custom, eventArgs) {\n        metaData.request.emitError = false;\n        metaData.request.httpRequest.abort();\n        let liElement = this.getLiElement(metaData.file);\n        if (isNullOrUndefined(this.template) && (isNullOrUndefined(custom) || !custom)) {\n            let targetElement = liElement.querySelector('.' + PAUSE_UPLOAD);\n            targetElement.classList.remove(PAUSE_UPLOAD);\n            targetElement.classList.add(RESUME_UPLOAD);\n            targetElement.setAttribute('title', this.localizedTexts('resume'));\n            targetElement.nextElementSibling.classList.add(REMOVE_ICON);\n            targetElement.nextElementSibling.classList.remove(ABORT_ICON);\n            targetElement.nextElementSibling.setAttribute('title', this.localizedTexts('remove'));\n        }\n        for (let i = 0; i < this.pausedData.length; i++) {\n            if (this.pausedData[i].file.name === metaData.file.name) {\n                this.pausedData.splice(i, 1);\n            }\n        }\n        this.pausedData.push(metaData);\n        this.trigger('pausing', eventArgs);\n    }\n    resumeUpload(metaData, e, custom) {\n        let liElement = this.getLiElement(metaData.file);\n        let targetElement;\n        if (!isNullOrUndefined(liElement)) {\n            targetElement = liElement.querySelector('.' + RESUME_UPLOAD);\n        }\n        if (!isNullOrUndefined(targetElement) && (isNullOrUndefined(custom) || !custom)) {\n            targetElement.classList.remove(RESUME_UPLOAD);\n            targetElement.classList.add(PAUSE_UPLOAD);\n            targetElement.setAttribute('title', this.localizedTexts('pause'));\n            targetElement.nextElementSibling.classList.remove(REMOVE_ICON);\n            targetElement.nextElementSibling.classList.add(ABORT_ICON);\n            targetElement.nextElementSibling.setAttribute('title', this.localizedTexts('abort'));\n        }\n        metaData.file.status = this.localizedTexts('inProgress');\n        metaData.file.statusCode = '3';\n        this.updateMetaData(metaData);\n        let eventArgs = {\n            event: e ? e : null,\n            file: metaData.file,\n            chunkIndex: metaData.chunkIndex,\n            chunkCount: Math.round(metaData.file.size / this.asyncSettings.chunkSize),\n            chunkSize: this.asyncSettings.chunkSize\n        };\n        this.trigger('resuming', eventArgs);\n        for (let i = 0; i < this.pausedData.length; i++) {\n            if (this.pausedData[i].end === this.pausedData[i].file.size) {\n                this.chunkUploadComplete(e, metaData, custom);\n            }\n            else {\n                if (this.pausedData[i].file.name === metaData.file.name) {\n                    this.pausedData[i].start = this.pausedData[i].end;\n                    this.pausedData[i].end = this.pausedData[i].end + this.asyncSettings.chunkSize;\n                    this.pausedData[i].end = Math.min(this.pausedData[i].end, this.pausedData[i].file.size);\n                    this.pausedData[i].chunkIndex = this.pausedData[i].chunkIndex + 1;\n                    this.sendRequest(this.pausedData[i].file, this.pausedData[i], custom);\n                }\n            }\n        }\n    }\n    updateMetaData(metaData) {\n        if (this.uploadMetaData.indexOf(metaData) === -1) {\n            this.uploadMetaData.push(metaData);\n        }\n        else {\n            this.uploadMetaData.splice(this.uploadMetaData.indexOf(metaData), 1);\n            this.uploadMetaData.push(metaData);\n        }\n    }\n    removeChunkProgressBar(metaData) {\n        let liElement = this.getLiElement(metaData.file);\n        if (!isNullOrUndefined(liElement)) {\n            this.updateProgressBarClasses(liElement, UPLOAD_SUCCESS);\n            this.removeProgressbar(liElement, 'success');\n            let cancelButton = liElement.querySelector('.' + ABORT_ICON);\n            if (!isNullOrUndefined(cancelButton)) {\n                cancelButton.classList.add(DELETE_ICON);\n                cancelButton.setAttribute('title', this.localizedTexts('delete'));\n                cancelButton.classList.remove(ABORT_ICON, UPLOAD_INPROGRESS);\n            }\n        }\n    }\n    chunkUploadFailed(e, metaData, custom) {\n        let chunkCount = Math.max(Math.ceil(metaData.file.size / this.asyncSettings.chunkSize), 1);\n        let liElement;\n        if (isNullOrUndefined(this.template) && (isNullOrUndefined(custom) || !custom)) {\n            liElement = this.getLiElement(metaData.file);\n        }\n        let requestResponse = e && e.currentTarget ? this.getResponse(e) : null;\n        let eventArgs = {\n            event: e,\n            file: metaData.file,\n            chunkIndex: metaData.chunkIndex,\n            totalChunk: chunkCount,\n            chunkSize: this.asyncSettings.chunkSize,\n            cancel: false,\n            response: requestResponse\n        };\n        this.trigger('chunkFailure', eventArgs, (eventArgs) => {\n            // To prevent triggering of failure event\n            // tslint:disable-next-line\n            if (!eventArgs.cancel) {\n                if (metaData.retryCount < this.asyncSettings.retryCount) {\n                    setTimeout(() => { this.retryRequest(liElement, metaData, custom); }, this.asyncSettings.retryAfterDelay);\n                }\n                else {\n                    if (!isNullOrUndefined(liElement)) {\n                        let pauseButton = liElement.querySelector('.' + PAUSE_UPLOAD) ?\n                            liElement.querySelector('.' + PAUSE_UPLOAD) : liElement.querySelector('.' + RESUME_UPLOAD);\n                        if (!isNullOrUndefined(pauseButton)) {\n                            pauseButton.classList.add(RETRY_ICON);\n                            pauseButton.classList.remove(PAUSE_UPLOAD, RESUME_UPLOAD);\n                        }\n                        this.updateProgressBarClasses(liElement, UPLOAD_FAILED);\n                        this.removeProgressbar(liElement, 'failure');\n                        liElement.querySelector('.e-icons').classList.remove(UPLOAD_INPROGRESS);\n                        let iconElement = liElement.querySelector('.' + ABORT_ICON) ?\n                            liElement.querySelector('.' + ABORT_ICON) : liElement.querySelector('.' + REMOVE_ICON);\n                        iconElement.classList.remove(ABORT_ICON);\n                        if (!isNullOrUndefined(liElement.querySelector('.' + PAUSE_UPLOAD))) {\n                            detach(liElement.querySelector('.' + PAUSE_UPLOAD));\n                        }\n                        if (metaData.start > 0) {\n                            iconElement.classList.add(DELETE_ICON);\n                            iconElement.setAttribute('title', this.localizedTexts('delete'));\n                        }\n                        else {\n                            iconElement.classList.add(REMOVE_ICON);\n                            iconElement.setAttribute('title', this.localizedTexts('remove'));\n                        }\n                    }\n                    metaData.retryCount = 0;\n                    let file = metaData.file;\n                    let failureMessage = this.localizedTexts('uploadFailedMessage');\n                    let args = {\n                        e, response: requestResponse,\n                        operation: 'upload',\n                        file: this.updateStatus(file, failureMessage, '0', false),\n                        statusText: failureMessage\n                    };\n                    this.trigger('failure', args, (args) => {\n                        // tslint:disable-next-line\n                        this.updateStatus(file, args.statusText, '0');\n                        this.uploadSequential();\n                        this.checkActionComplete(true);\n                    });\n                }\n            }\n        });\n    }\n    retryRequest(liElement, metaData, custom) {\n        if (isNullOrUndefined(this.template) && (isNullOrUndefined(custom) || !custom) && liElement) {\n            this.updateProgressBarClasses(liElement, UPLOAD_FAILED);\n        }\n        metaData.retryCount += 1;\n        this.sendRequest(metaData.file, metaData);\n    }\n    checkPausePlayAction(e) {\n        let targetElement = e.target;\n        let selectedElement = e.target.parentElement;\n        let index = this.fileList.indexOf(selectedElement);\n        let fileData = this.filesData[index];\n        let metaData = this.getCurrentMetaData(fileData);\n        if (targetElement.classList.contains(PAUSE_UPLOAD)) {\n            /* istanbul ignore next */\n            this.pauseUpload(metaData, e);\n        }\n        else if (targetElement.classList.contains(RESUME_UPLOAD)) {\n            /* istanbul ignore next */\n            this.resumeUpload(metaData, e);\n        }\n        else if (targetElement.classList.contains(RETRY_ICON)) {\n            if (metaData.file.status === this.localizedTexts('fileUploadCancel')) {\n                this.retryUpload(metaData, false);\n            }\n            else {\n                this.retryUpload(metaData, true);\n            }\n        }\n    }\n    retryUpload(metaData, fromcanceledStage) {\n        if (fromcanceledStage) {\n            metaData.end = metaData.end + this.asyncSettings.chunkSize;\n            metaData.start = metaData.start + this.asyncSettings.chunkSize;\n            this.sendRequest(metaData.file, metaData);\n        }\n        else {\n            metaData.file.statusCode = '1';\n            metaData.file.status = this.localizedTexts('readyToUploadMessage');\n            this.chunkUpload(metaData.file);\n        }\n        /* istanbul ignore next */\n        (this.getLiElement(metaData.file)).classList.add(RESTRICT_RETRY);\n    }\n    chunkUploadInProgress(e, metaData, custom) {\n        if (metaData.file.statusCode === '4') {\n            return;\n        }\n        if (metaData.file.statusCode !== '4' && metaData.file.statusCode !== '5') {\n            metaData.file.statusCode = '3';\n            metaData.file.status = this.localizedTexts('inProgress');\n        }\n        this.updateMetaData(metaData);\n        let liElement = this.getLiElement(metaData.file);\n        if (isNullOrUndefined(liElement)) {\n            return;\n        }\n        let retryElement = liElement.querySelector('.' + RETRY_ICON);\n        if (!isNullOrUndefined(retryElement)) {\n            retryElement.classList.add(PAUSE_UPLOAD);\n            retryElement.setAttribute('title', this.localizedTexts('pause'));\n            retryElement.classList.remove(RETRY_ICON);\n        }\n        if (!isNullOrUndefined(liElement)) {\n            if (!(liElement.querySelectorAll('.' + PROGRESS_WRAPPER).length > 0)) {\n                let statusElement = liElement.querySelector('.' + STATUS);\n                if (isNullOrUndefined(this.template)) {\n                    statusElement.classList.add(UPLOAD_INPROGRESS);\n                    statusElement.classList.remove(UPLOAD_FAILED);\n                    this.createProgressBar(liElement);\n                    this.updateProgressBarClasses(liElement, UPLOAD_INPROGRESS);\n                }\n                let clearIcon = liElement.querySelector('.' + REMOVE_ICON) ? liElement.querySelector('.' + REMOVE_ICON) :\n                    liElement.querySelector('.' + DELETE_ICON);\n                if (!isNullOrUndefined(clearIcon)) {\n                    clearIcon.classList.add(ABORT_ICON);\n                    clearIcon.setAttribute('title', this.localizedTexts('abort'));\n                    clearIcon.classList.remove(REMOVE_ICON);\n                }\n            }\n            if (!isNaN(Math.round((e.loaded / e.total) * 100)) && isNullOrUndefined(this.template) && metaData.file.statusCode !== '4') {\n                let loadedSize = (metaData.chunkIndex * this.asyncSettings.chunkSize);\n                let value = Math.min((((loadedSize + e.loaded) / metaData.file.size) * 100), 100);\n                this.changeProgressValue(liElement, Math.round(value).toString() + '%');\n            }\n            if (metaData.chunkIndex === 0) {\n                this.checkActionButtonStatus();\n            }\n        }\n        if (isNullOrUndefined(liElement.querySelector('.' + PAUSE_UPLOAD)) && isNullOrUndefined(this.template)) {\n            this.pauseButton = this.createElement('span', { className: 'e-icons e-file-pause-btn', attrs: { 'tabindex': this.btnTabIndex } });\n            if (this.browserName === 'msie') {\n                this.pauseButton.classList.add('e-msie');\n            }\n            let abortIcon = liElement.querySelector('.' + ABORT_ICON);\n            abortIcon.parentElement.insertBefore(this.pauseButton, abortIcon);\n            this.pauseButton.setAttribute('title', this.localizedTexts('pause'));\n            this.pauseButton.addEventListener('click', (e) => { this.checkPausePlayAction(e); }, false);\n        }\n    }\n    /**\n     * It is used to convert bytes value into kilobytes or megabytes depending on the size based\n     * on [binary prefix](https://en.wikipedia.org/wiki/Binary_prefix).\n     * @param { number } bytes - specifies the file size in bytes.\n     * @returns string\n     */\n    bytesToSize(bytes) {\n        let i = -1;\n        if (!bytes) {\n            return '0.0 KB';\n        }\n        do {\n            bytes = bytes / 1024;\n            i++;\n        } while (bytes > 99);\n        if (i >= 2) {\n            bytes = bytes * 1024;\n            i = 1;\n        }\n        return Math.max(bytes, 0).toFixed(1) + ' ' + ['KB', 'MB'][i];\n    }\n    /**\n     * Allows you to sort the file data alphabetically based on its file name clearly.\n     * @param { FileList } filesData - specifies the files data for upload.\n     * @returns File[]\n     */\n    /* istanbul ignore next */\n    sortFileList(filesData) {\n        filesData = filesData ? filesData : this.sortFilesList;\n        let files = filesData;\n        let fileNames = [];\n        for (let i = 0; i < files.length; i++) {\n            fileNames.push(files[i].name);\n        }\n        let sortedFileNames = fileNames.sort();\n        let sortedFilesData = [];\n        for (let name of sortedFileNames) {\n            for (let i = 0; i < files.length; i++) {\n                if (name === files[i].name) {\n                    sortedFilesData.push(files[i]);\n                }\n            }\n        }\n        return sortedFilesData;\n    }\n    /**\n     * Removes the component from the DOM and detaches all its related event handlers. Also it removes the attributes and classes.\n     * @method destroy\n     * @return {void}.\n     */\n    destroy() {\n        this.element.value = null;\n        this.clearTemplate();\n        if (!(this.isBlazorSaveUrl || this.isBlazorTemplate)) {\n            this.clearAll();\n        }\n        this.unWireEvents();\n        this.unBindDropEvents();\n        if (this.multiple) {\n            this.element.removeAttribute('multiple');\n        }\n        if (!this.enabled) {\n            this.element.removeAttribute('disabled');\n        }\n        this.element.removeAttribute('accept');\n        this.setInitialAttributes();\n        let attributes$$1 = ['aria-label', 'directory', 'webkitdirectory', 'tabindex'];\n        for (let key of attributes$$1) {\n            this.element.removeAttribute(key);\n        }\n        if (!this.isServerBlazor) {\n            if (!isNullOrUndefined(this.uploadWrapper)) {\n                this.uploadWrapper.parentElement.appendChild(this.element);\n                detach(this.uploadWrapper);\n            }\n            this.uploadWrapper = null;\n            super.destroy();\n        }\n        else {\n            this.uploadWrapper = null;\n        }\n    }\n    /**\n     * Allows you to call the upload process manually by calling save URL action.\n     * To process the selected files (added in upload queue), pass an empty argument otherwise\n     * upload the specific file based on its argument.\n     * @param { FileInfo | FileInfo[] } files - specifies the files data for upload.\n     * @returns void\n     */\n    upload(files, custom) {\n        files = files ? files : this.filesData;\n        if (this.sequentialUpload && (this.isFirstFileOnSelection || custom)) {\n            this.sequenceUpload(files);\n        }\n        else {\n            let uploadFiles = this.getFilesInArray(files);\n            let eventArgs = {\n                customFormData: [],\n                currentRequest: null,\n                cancel: false\n            };\n            this.trigger('beforeUpload', eventArgs, (eventArgs) => {\n                if (!eventArgs.cancel) {\n                    if (isBlazor()) {\n                        this.currentRequestHeader = eventArgs.currentRequest ? eventArgs.currentRequest : this.currentRequestHeader;\n                        this.customFormDatas = (eventArgs.customFormData && eventArgs.customFormData.length > 0) ?\n                            eventArgs.customFormData : this.customFormDatas;\n                    }\n                    this.uploadFiles(uploadFiles, custom);\n                }\n            });\n        }\n    }\n    getFilesInArray(files) {\n        let uploadFiles = [];\n        if (files instanceof Array) {\n            uploadFiles = files;\n        }\n        else {\n            uploadFiles.push(files);\n        }\n        return uploadFiles;\n    }\n    /* istanbul ignore next */\n    serverReadFileBase64(fileIndex, position, totalCount) {\n        return new Promise((resolve, reject) => {\n            let file = this.fileStreams[fileIndex].rawFile;\n            try {\n                let reader = new FileReader();\n                // tslint:disable-next-line\n                reader.onload = ((args) => {\n                    return () => {\n                        try {\n                            let contents = args.result;\n                            let data = contents ? contents.split(';base64,')[1] : null;\n                            resolve(data);\n                        }\n                        catch (e) {\n                            reject(e);\n                        }\n                    };\n                })(reader);\n                reader.readAsDataURL(file.slice(position, position + totalCount));\n            }\n            catch (e) {\n                reject(e);\n            }\n        });\n    }\n    /* istanbul ignore next */\n    uploadFileCount(ele) {\n        let files = this.filesData;\n        if (!files || files.length === 0) {\n            return -1;\n        }\n        let result = files.length;\n        return result;\n    }\n    /* istanbul ignore next */\n    getFileRead(index, ele) {\n        let files = this.filesData;\n        if (!files || files.length === 0) {\n            return -1;\n        }\n        let file = files[index];\n        let fileCount = this.newFileRef++;\n        this.fileStreams[fileCount] = file;\n        return fileCount;\n    }\n    /* istanbul ignore next */\n    getFileInfo(index, ele) {\n        let files = this.filesData;\n        if (!files || files.length === 0) {\n            return null;\n        }\n        let file = files[index];\n        if (!file) {\n            return null;\n        }\n        return this.filesData[index];\n    }\n    uploadFiles(files, custom) {\n        let selectedFiles = [];\n        if (this.asyncSettings.saveUrl === '' || isNullOrUndefined(this.asyncSettings.saveUrl)) {\n            if (this.isServerBlazor) {\n                // tslint:disable-next-line\n                this.interopAdaptor.invokeMethodAsync('GetFileDetails', files);\n            }\n            return;\n        }\n        if (!custom || isNullOrUndefined(custom)) {\n            if (!this.multiple) {\n                let file = [];\n                file.push(files[0]);\n                selectedFiles = this.filterfileList(file);\n            }\n            else {\n                selectedFiles = this.filterfileList(files);\n            }\n        }\n        else {\n            selectedFiles = files;\n        }\n        for (let i = 0; i < selectedFiles.length; i++) {\n            if (this.isServerBlazor && !this.checkChunkUpload()) {\n                /* istanbul ignore next */\n                /* tslint:disable */\n                if (selectedFiles[i] && selectedFiles[i].rawFile instanceof File) {\n                    this.getBase64(selectedFiles[i].rawFile).then((data) => {\n                        this.base64String.push(data);\n                        this.uploadFilesRequest(selectedFiles, i, custom);\n                    });\n                }\n                /* tslint:disable */\n            }\n            else {\n                this.uploadFilesRequest(selectedFiles, i, custom);\n            }\n        }\n    }\n    uploadFilesRequest(selectedFiles, i, custom) {\n        let cloneFiles = [];\n        let chunkEnabled = this.checkChunkUpload();\n        let ajax = new Ajax(this.asyncSettings.saveUrl, 'POST', true, null);\n        ajax.emitError = false;\n        let getFileData;\n        /* istanbul ignore next */\n        if (this.isServerBlazor) {\n            getFileData = selectedFiles.slice(0);\n            cloneFiles.push(getFileData[i].rawFile);\n        }\n        let eventArgs = {\n            fileData: (this.isServerBlazor) ? getFileData[i] : selectedFiles[i],\n            customFormData: [],\n            cancel: false\n        };\n        let formData = new FormData();\n        ajax.beforeSend = (e) => {\n            eventArgs.currentRequest = ajax.httpRequest;\n            /* istanbul ignore next */\n            if (isBlazor()) {\n                eventArgs.fileData.rawFile = !chunkEnabled ? this.base64String[i] : eventArgs.fileData.rawFile;\n                if (this.currentRequestHeader) {\n                    this.updateCustomheader(ajax.httpRequest, this.currentRequestHeader);\n                }\n                if (this.customFormDatas) {\n                    this.updateFormData(formData, this.customFormDatas);\n                }\n            }\n            this.trigger('uploading', eventArgs, (eventArgs) => {\n                /* istanbul ignore next */\n                if (this.isServerBlazor && !chunkEnabled) {\n                    selectedFiles[i].rawFile = eventArgs.fileData.rawFile = cloneFiles[i];\n                }\n                if (eventArgs.cancel) {\n                    this.eventCancelByArgs(e, eventArgs, selectedFiles[i]);\n                }\n                this.updateFormData(formData, eventArgs.customFormData);\n            });\n        };\n        if (selectedFiles[i].statusCode === '1') {\n            let name = this.element.getAttribute('name');\n            formData.append(name, selectedFiles[i].rawFile, selectedFiles[i].name);\n            if (chunkEnabled && selectedFiles[i].size > this.asyncSettings.chunkSize) {\n                this.chunkUpload(selectedFiles[i], custom, i);\n            }\n            else {\n                ajax.onLoad = (e) => {\n                    if (eventArgs.cancel && this.isServerBlazor) {\n                        return {};\n                    }\n                    else {\n                        this.uploadComplete(e, selectedFiles[i], custom);\n                        return {};\n                    }\n                };\n                ajax.onUploadProgress = (e) => {\n                    if (eventArgs.cancel && this.isServerBlazor) {\n                        return {};\n                    }\n                    else {\n                        this.uploadInProgress(e, selectedFiles[i], custom, ajax);\n                        return {};\n                    }\n                };\n                /* istanbul ignore next */\n                ajax.onError = (e) => { this.uploadFailed(e, selectedFiles[i]); return {}; };\n                ajax.send(formData);\n            }\n        }\n    }\n    spliceFiles(liIndex) {\n        let liElement = this.fileList[liIndex];\n        let allFiles = this.getFilesData();\n        let nameElements = +liElement.getAttribute('data-files-count');\n        let startIndex = 0;\n        for (let i = 0; i < liIndex; i++) {\n            startIndex += (+this.fileList[i].getAttribute('data-files-count'));\n        }\n        let endIndex = (startIndex + nameElements) - 1;\n        for (let j = endIndex; j >= startIndex; j--) {\n            allFiles.splice(j, 1);\n        }\n    }\n    /**\n     * Remove the uploaded file from server manually by calling the remove URL action.\n     * If you pass an empty argument to this method, the complete file list can be cleared,\n     * otherwise remove the specific file based on its argument (“file_data”).\n     * @param { FileInfo | FileInfo[] } fileData - specifies the files data to remove from file list/server.\n     * @param { boolean } customTemplate - Set true if the component rendering with customize template.\n     * @param { boolean } removeDirectly - Set true if files remove without removing event.\n     * @param { boolean } postRawFile - Set false, to post file name only to the remove action.\n     * @returns void\n     */\n    remove(fileData, customTemplate, removeDirectly, postRawFile, args) {\n        if (isNullOrUndefined(postRawFile)) {\n            postRawFile = true;\n        }\n        let eventArgs = {\n            event: args,\n            cancel: false,\n            filesData: [],\n            customFormData: [],\n            postRawFile: postRawFile,\n            currentRequest: null\n        };\n        let beforeEventArgs = {\n            cancel: false,\n            customFormData: [],\n            currentRequest: null\n        };\n        this.trigger('beforeRemove', beforeEventArgs, (beforeEventArgs) => {\n            if (!beforeEventArgs.cancel) {\n                if (isBlazor()) {\n                    this.currentRequestHeader = beforeEventArgs.currentRequest;\n                    this.customFormDatas = beforeEventArgs.customFormData;\n                }\n                let index;\n                if (this.isFormUpload() && !this.isBlazorSaveUrl) {\n                    eventArgs.filesData = fileData;\n                    this.trigger('removing', eventArgs, (eventArgs) => {\n                        if (!eventArgs.cancel) {\n                            let removingFiles = this.getFilesInArray(fileData);\n                            let isLiRemoved = false;\n                            let liIndex;\n                            for (let data of removingFiles) {\n                                if (!isLiRemoved) {\n                                    liIndex = this.fileList.indexOf(data.list);\n                                }\n                                if (liIndex > -1) {\n                                    let inputElement = !isNullOrUndefined(data.input) ? data.input : null;\n                                    if (inputElement) {\n                                        detach(inputElement);\n                                    }\n                                    this.spliceFiles(liIndex);\n                                    detach(this.fileList[liIndex]);\n                                    this.fileList.splice(liIndex, 1);\n                                    isLiRemoved = true;\n                                    liIndex = -1;\n                                }\n                            }\n                        }\n                    });\n                }\n                else if (this.isForm && (isNullOrUndefined(this.asyncSettings.removeUrl) || this.asyncSettings.removeUrl === '')\n                    && !this.isBlazorSaveUrl) {\n                    eventArgs.filesData = this.getFilesData();\n                    this.trigger('removing', eventArgs, (eventArgs) => {\n                        if (!eventArgs.cancel) {\n                            this.clearAll();\n                        }\n                    });\n                }\n                else {\n                    let removeFiles = [];\n                    fileData = !isNullOrUndefined(fileData) ? fileData : this.filesData;\n                    if (fileData instanceof Array) {\n                        removeFiles = fileData;\n                    }\n                    else {\n                        removeFiles.push(fileData);\n                    }\n                    eventArgs.filesData = removeFiles;\n                    let removeUrl = this.asyncSettings.removeUrl;\n                    let validUrl = (removeUrl === '' || isNullOrUndefined(removeUrl)) ? false : true;\n                    for (let files of removeFiles) {\n                        index = this.filesData.indexOf(files);\n                        let fileUploadedIndex = this.uploadedFilesData.indexOf(files);\n                        if ((files.statusCode === '2' || files.statusCode === '4' || (files.statusCode === '0' &&\n                            fileUploadedIndex !== -1)) && validUrl) {\n                            this.removeUploadedFile(files, eventArgs, removeDirectly, customTemplate);\n                        }\n                        else {\n                            if (!removeDirectly) {\n                                this.trigger('removing', eventArgs, (eventArgs) => {\n                                    if (!eventArgs.cancel) {\n                                        this.removeFilesData(files, customTemplate);\n                                    }\n                                });\n                            }\n                            else {\n                                this.removeFilesData(files, customTemplate);\n                            }\n                        }\n                        if (args && !args.target.classList.contains(REMOVE_ICON)) {\n                            this.checkActionComplete(false);\n                        }\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Clear all the file entries from list that can be uploaded files or added in upload queue.\n     * @returns void\n     */\n    clearAll() {\n        if (isNullOrUndefined(this.listParent) && !(this.isBlazorSaveUrl || this.isBlazorTemplate)) {\n            if (this.browserName !== 'msie') {\n                this.element.value = '';\n            }\n            this.filesData = [];\n            return;\n        }\n        let eventArgs = {\n            cancel: false,\n            filesData: this.filesData\n        };\n        this.trigger('clearing', eventArgs, (eventArgs) => {\n            if (!eventArgs.cancel) {\n                this.clearData();\n                this.actionCompleteCount = 0;\n                this.count = -1;\n            }\n        });\n    }\n    /**\n     * Get the data of files which are shown in file list.\n     * @param { number } index - specifies the file list item(li) index.\n     * @returns FileInfo[]\n     */\n    getFilesData(index) {\n        if (!this.isServerBlazor) {\n            if (isNullOrUndefined(index)) {\n                return this.filesData;\n            }\n            else {\n                return this.getSelectedFiles(index);\n            }\n        }\n        else {\n            for (let i = 0; i < this.filesData.length; i++) {\n                this.filesData[i].rawFile = this.base64String[i];\n            }\n            return this.filesData;\n        }\n    }\n    /**\n     * Pauses the in-progress chunked upload based on the file data.\n     * @param { FileInfo | FileInfo[] } fileData - specifies the files data to pause from uploading.\n     * @param { boolean } custom - Set true if used custom UI.\n     * @returns void\n     */\n    pause(fileData, custom) {\n        fileData = fileData ? fileData : this.filesData;\n        let fileDataFiles = this.getFilesInArray(fileData);\n        this.pauseUploading(fileDataFiles, custom);\n    }\n    pauseUploading(fileData, custom) {\n        let files = this.getFiles(fileData);\n        for (let i = 0; i < files.length; i++) {\n            if (files[i].statusCode === '3') {\n                this.pauseUpload(this.getCurrentMetaData(files[i], null), null, custom);\n            }\n        }\n    }\n    getFiles(fileData) {\n        let files = [];\n        if (!isNullOrUndefined(fileData) && !(fileData instanceof Array)) {\n            files.push(fileData);\n        }\n        else {\n            files = fileData;\n        }\n        return files;\n    }\n    /**\n     * Resumes the chunked upload that is previously paused based on the file data.\n     * @param { FileInfo | FileInfo[] } fileData - specifies the files data to resume the paused file.\n     * @param { boolean } custom - Set true if used custom UI.\n     * @returns void\n     */\n    resume(fileData, custom) {\n        fileData = fileData ? fileData : this.filesData;\n        let fileDataFiles = this.getFilesInArray(fileData);\n        this.resumeFiles(fileDataFiles, custom);\n    }\n    resumeFiles(fileData, custom) {\n        let files = this.getFiles(fileData);\n        for (let i = 0; i < files.length; i++) {\n            if (files[i].statusCode === '4') {\n                this.resumeUpload(this.getCurrentMetaData(files[i], null), null, custom);\n            }\n        }\n    }\n    /**\n     * Retries the canceled or failed file upload based on the file data.\n     * @param { FileInfo | FileInfo[] } fileData - specifies the files data to retry the canceled or failed file.\n     * @param { boolean } fromcanceledStage - Set true to retry from canceled stage and set false to retry from initial stage.\n     * @returns void\n     */\n    retry(fileData, fromcanceledStage, custom) {\n        fileData = fileData ? fileData : this.filesData;\n        let fileDataFiles = this.getFilesInArray(fileData);\n        this.retryFailedFiles(fileDataFiles, fromcanceledStage, custom);\n    }\n    retryFailedFiles(fileData, fromcanceledStage, custom) {\n        let files = this.getFiles(fileData);\n        for (let i = 0; i < files.length; i++) {\n            if (files[i].statusCode === '5' || files[i].statusCode === '0') {\n                if (this.asyncSettings.chunkSize > 0) {\n                    this.retryUpload(this.getCurrentMetaData(files[i], null), fromcanceledStage);\n                }\n                else {\n                    let liElement;\n                    if (!custom) {\n                        liElement = this.fileList[this.filesData.indexOf(files[i])];\n                    }\n                    this.reloadcanceledFile(null, files[i], liElement, custom);\n                }\n            }\n        }\n    }\n    /**\n     * Stops the in-progress chunked upload based on the file data.\n     * When the file upload is canceled, the partially uploaded file is removed from server.\n     * @param { FileInfo | FileInfo[] } fileData - specifies the files data to cancel the progressing file.\n     * @returns void\n     */\n    cancel(fileData) {\n        fileData = fileData ? fileData : this.filesData;\n        let cancelingFiles = this.getFilesInArray(fileData);\n        this.cancelUpload(cancelingFiles);\n    }\n    cancelUpload(fileData) {\n        let files = this.getFiles(fileData);\n        if (this.asyncSettings.chunkSize > 0) {\n            for (let i = 0; i < files.length; i++) {\n                if (files[i].statusCode === '3') {\n                    let metaData = this.getCurrentMetaData(files[i], null);\n                    metaData.file.statusCode = '5';\n                    metaData.file.status = this.localizedTexts('fileUploadCancel');\n                    this.updateMetaData(metaData);\n                    this.showHideUploadSpinner(files[i]);\n                }\n            }\n        }\n        else {\n            for (let i = 0; i < files.length; i++) {\n                if (files[i].statusCode === '3') {\n                    files[i].statusCode = '5';\n                    files[i].status = this.localizedTexts('fileUploadCancel');\n                    this.showHideUploadSpinner(files[i]);\n                }\n            }\n        }\n    }\n    showHideUploadSpinner(files) {\n        let liElement = this.getLiElement(files);\n        if (!isNullOrUndefined(liElement) && isNullOrUndefined(this.template)) {\n            let spinnerTarget = liElement.querySelector('.' + ABORT_ICON);\n            createSpinner({ target: spinnerTarget, width: '20px' });\n            showSpinner(spinnerTarget);\n        }\n    }\n};\n__decorate$4([\n    Complex({ saveUrl: '', removeUrl: '' }, AsyncSettings)\n], Uploader.prototype, \"asyncSettings\", void 0);\n__decorate$4([\n    Property(false)\n], Uploader.prototype, \"sequentialUpload\", void 0);\n__decorate$4([\n    Property({})\n], Uploader.prototype, \"htmlAttributes\", void 0);\n__decorate$4([\n    Property('')\n], Uploader.prototype, \"cssClass\", void 0);\n__decorate$4([\n    Property(true)\n], Uploader.prototype, \"enabled\", void 0);\n__decorate$4([\n    Property(null)\n], Uploader.prototype, \"template\", void 0);\n__decorate$4([\n    Property(true)\n], Uploader.prototype, \"multiple\", void 0);\n__decorate$4([\n    Property(true)\n], Uploader.prototype, \"autoUpload\", void 0);\n__decorate$4([\n    Complex({}, ButtonsProps)\n], Uploader.prototype, \"buttons\", void 0);\n__decorate$4([\n    Property('')\n], Uploader.prototype, \"allowedExtensions\", void 0);\n__decorate$4([\n    Property(0)\n], Uploader.prototype, \"minFileSize\", void 0);\n__decorate$4([\n    Property(30000000)\n], Uploader.prototype, \"maxFileSize\", void 0);\n__decorate$4([\n    Property(null)\n], Uploader.prototype, \"dropArea\", void 0);\n__decorate$4([\n    Collection([{}], FilesProp)\n], Uploader.prototype, \"files\", void 0);\n__decorate$4([\n    Property(true)\n], Uploader.prototype, \"showFileList\", void 0);\n__decorate$4([\n    Property(false)\n], Uploader.prototype, \"directoryUpload\", void 0);\n__decorate$4([\n    Property('Default')\n], Uploader.prototype, \"dropEffect\", void 0);\n__decorate$4([\n    Event()\n], Uploader.prototype, \"created\", void 0);\n__decorate$4([\n    Event()\n], Uploader.prototype, \"actionComplete\", void 0);\n__decorate$4([\n    Event()\n], Uploader.prototype, \"rendering\", void 0);\n__decorate$4([\n    Event()\n], Uploader.prototype, \"beforeUpload\", void 0);\n__decorate$4([\n    Event()\n], Uploader.prototype, \"fileListRendering\", void 0);\n__decorate$4([\n    Event()\n], Uploader.prototype, \"selected\", void 0);\n__decorate$4([\n    Event()\n], Uploader.prototype, \"uploading\", void 0);\n__decorate$4([\n    Event()\n], Uploader.prototype, \"success\", void 0);\n__decorate$4([\n    Event()\n], Uploader.prototype, \"failure\", void 0);\n__decorate$4([\n    Event()\n], Uploader.prototype, \"removing\", void 0);\n__decorate$4([\n    Event()\n], Uploader.prototype, \"beforeRemove\", void 0);\n__decorate$4([\n    Event()\n], Uploader.prototype, \"clearing\", void 0);\n__decorate$4([\n    Event()\n], Uploader.prototype, \"progress\", void 0);\n__decorate$4([\n    Event()\n], Uploader.prototype, \"change\", void 0);\n__decorate$4([\n    Event()\n], Uploader.prototype, \"chunkSuccess\", void 0);\n__decorate$4([\n    Event()\n], Uploader.prototype, \"chunkFailure\", void 0);\n__decorate$4([\n    Event()\n], Uploader.prototype, \"chunkUploading\", void 0);\n__decorate$4([\n    Event()\n], Uploader.prototype, \"canceling\", void 0);\n__decorate$4([\n    Event()\n], Uploader.prototype, \"pausing\", void 0);\n__decorate$4([\n    Event()\n], Uploader.prototype, \"resuming\", void 0);\nUploader = __decorate$4([\n    NotifyPropertyChanges\n], Uploader);\n\n/**\n * Uploader modules\n */\n\nvar __decorate$5 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nconst APPLY = 'e-apply';\nconst CANCEL = 'e-cancel';\nconst CURRENT = 'e-current';\nconst CONTAINER = 'e-container';\nconst CTRLBTN = 'e-ctrl-btn';\nconst CTRLSWITCH = 'e-switch-ctrl-btn';\nconst DISABLED$1 = 'e-disabled';\nconst FORMATSWITCH = 'e-value-switch-btn';\nconst HANDLER = 'e-handler';\nconst HEX = 'e-hex';\nconst HIDEHEX = 'e-hide-hex-value';\nconst HIDEOPACITY = 'e-hide-opacity';\nconst HIDERGBA = 'e-hide-switchable-value';\nconst HIDEVALUE = 'e-hide-value';\nconst HIDEVALUESWITCH = 'e-hide-valueswitcher';\nconst HSVAREA = 'e-hsv-color';\nconst HSVCONTAINER = 'e-hsv-container';\nconst INPUTWRAPPER = 'e-selected-value';\nconst MODESWITCH = 'e-mode-switch-btn';\nconst NOCOLOR = 'e-nocolor-item';\nconst OPACITY = 'e-opacity-value';\nconst PALETTES = 'e-palette';\nconst PALETTECONTENT = 'e-color-palette';\nconst PICKERCONTENT = 'e-color-picker';\nconst PREVIEW = 'e-preview-container';\nconst PREVIOUS = 'e-previous';\nconst RTL$1 = 'e-rtl';\nconst SHOWVALUE = 'e-show-value';\nconst SELECT = 'e-selected';\nconst SPLITPREVIEW = 'e-split-preview';\nconst TILE = 'e-tile';\nconst presets = {\n    default: ['#000000', '#f44336', '#e91e63', '#9c27b0', '#673ab7', '#2196f3', '#03a9f4', '#00bcd4', '#009688', '#ffeb3b',\n        '#ffffff', '#ffebee', '#fce4ec', '#f3e5f5', '#ede7f6', '#e3f2fd', '#e1f5fe', '#e0f7fa', '#e0f2f1', '#fffde7',\n        '#f2f2f2', '#ffcdd2', '#f8bbd0', '#e1bee7', '#d1c4e9', '#bbdefb', '#b3e5fc', '#b2ebf2', '#b2dfdb', '#fff9c4',\n        '#e6e6e6', '#ef9a9a', '#f48fb1', '#ce93d8', '#b39ddb', '#90caf9', '#81d4fa', '#80deea', '#80cbc4', '#fff59d',\n        '#cccccc', '#e57373', '#f06292', '#ba68c8', '#9575cd', '#64b5f6', '#4fc3f7', '#4dd0e1', '#4db6ac', '#fff176',\n        '#b3b3b3', '#ef5350', '#ec407a', '#ab47bc', '#7e57c2', '#42a5f5', '#29b6f6', '#26c6da', '#26a69a', '#ffee58',\n        '#999999', '#e53935', '#d81b60', '#8e24aa', '#5e35b1', '#1e88e5', '#039be5', '#00acc1', '#00897b', '#fdd835',\n        '#808080', '#d32f2f', '#c2185b', '#7b1fa2', '#512da8', '#1976d2', '#0288d1', '#0097a7', '#00796b', '#fbc02d',\n        '#666666', '#c62828', '#ad1457', '#6a1b9a', '#4527a0', '#1565c0', '#0277bd', '#00838f', '#00695c', '#f9a825',\n        '#4d4d4d', '#b71c1c', '#880e4f', '#4a148c', '#311b92', '#0d47a1', '#01579b', '#006064', '#004d40', '#f57f17']\n};\n/**\n * ColorPicker component is a user interface to select and adjust color values. It provides supports for various\n * color specification like Red Green Blue, Hue Saturation Value and Hex codes.\n * ```html\n * <input type=\"color\" id=\"color-picker\">\n * ```\n * ```typescript\n * <script>\n *   let colorPickerObj: ColorPicker = new ColorPicker(null , \"#color-picker\");\n * </script>\n * ```\n */\nlet ColorPicker = class ColorPicker extends Component {\n    constructor(options, element) {\n        super(options, element);\n    }\n    preRender() {\n        let ele = this.element;\n        this.formElement = closest(this.element, 'form');\n        if (this.formElement) {\n            EventHandler.add(this.formElement, 'reset', this.formResetHandler, this);\n        }\n        let localeText = { Apply: 'Apply', Cancel: 'Cancel', ModeSwitcher: 'Switch Mode' };\n        this.l10n = new L10n('colorpicker', localeText, this.locale);\n        if (ele.getAttribute('ejs-for') && !ele.getAttribute('name')) {\n            ele.setAttribute('name', ele.id);\n        }\n    }\n    /**\n     * To Initialize the component rendering\n     * @private\n     */\n    render() {\n        this.initWrapper();\n        if (this.inline) {\n            this.createWidget();\n        }\n        else {\n            this.createSplitBtn();\n        }\n        if (!this.enableOpacity) {\n            addClass([this.container.parentElement], HIDEOPACITY);\n        }\n        this.renderComplete();\n    }\n    initWrapper() {\n        let wrapper = this.createElement('div', { className: 'e-' + this.getModuleName() + '-wrapper' });\n        this.element.parentNode.insertBefore(wrapper, this.element);\n        wrapper.appendChild(this.element);\n        attributes(this.element, { 'tabindex': '-1', 'spellcheck': 'false' });\n        this.container = this.createElement('div', { className: CONTAINER });\n        this.getWrapper().appendChild(this.container);\n        let value = this.value ? this.roundValue(this.value).toLowerCase() : '#008000ff';\n        if (this.noColor && this.mode === 'Palette' && this.value === '') {\n            value = '';\n        }\n        let slicedValue = value.slice(0, 7);\n        if (isNullOrUndefined(this.initialInputValue)) {\n            this.initialInputValue = slicedValue;\n        }\n        this.element.value = slicedValue;\n        if (this.enableOpacity) {\n            this.setProperties({ 'value': value }, true);\n        }\n        else {\n            this.setProperties({ 'value': slicedValue }, true);\n        }\n        if (this.enableRtl) {\n            wrapper.classList.add(RTL$1);\n        }\n        if (this.cssClass) {\n            addClass([wrapper], this.cssClass.split(' '));\n        }\n        this.tileRipple = rippleEffect(this.container, { selector: '.' + TILE });\n        this.ctrlBtnRipple = rippleEffect(this.container, { selector: '.e-btn' });\n    }\n    getWrapper() {\n        return this.element.parentElement;\n    }\n    createWidget() {\n        if (this.mode === 'Palette') {\n            this.createPalette();\n            if (!this.inline) {\n                this.firstPaletteFocus();\n            }\n        }\n        else {\n            this.createPicker();\n            if (!this.inline) {\n                this.getDragHandler().focus();\n            }\n        }\n        this.isRgb = true;\n        this.createInput();\n        this.createCtrlBtn();\n        if (!this.disabled) {\n            this.wireEvents();\n        }\n        if (this.inline && this.disabled) {\n            this.toggleDisabled(true);\n        }\n        if (Browser.isDevice) {\n            this.refreshPopupPos();\n        }\n    }\n    createSplitBtn() {\n        let splitButton = this.createElement('button', { className: 'e-split-colorpicker' });\n        this.getWrapper().appendChild(splitButton);\n        this.splitBtn = new SplitButton({\n            iconCss: 'e-selected-color',\n            target: this.container,\n            disabled: this.disabled,\n            enableRtl: this.enableRtl,\n            open: this.onOpen.bind(this),\n            click: (args) => {\n                this.trigger('change', {\n                    currentValue: { hex: this.value.slice(0, 7), rgba: this.convertToRgbString(this.hexToRgb(this.value)) },\n                    previousValue: { hex: null, rgba: null }, value: this.value\n                });\n            }\n        });\n        this.splitBtn.createElement = this.createElement;\n        this.splitBtn.appendTo(splitButton);\n        let preview = this.createElement('span', { className: SPLITPREVIEW });\n        select('.e-selected-color', splitButton).appendChild(preview);\n        preview.style.backgroundColor = this.convertToRgbString(this.hexToRgb(this.value));\n        let popupEle = this.getPopupEle();\n        addClass([popupEle], 'e-colorpicker-popup');\n        if (this.cssClass) {\n            addClass([popupEle], this.cssClass.split(' '));\n        }\n        if (Browser.isDevice) {\n            let popupInst = this.getPopupInst();\n            popupInst.relateTo = document.body;\n            popupInst.position = { X: 'center', Y: 'center' };\n            popupInst.targetType = 'container';\n            popupInst.collision = { X: 'fit', Y: 'fit' };\n            popupInst.offsetY = 4;\n            popupEle.style.zIndex = getZindexPartial(this.splitBtn.element).toString();\n        }\n        this.bindCallBackEvent();\n    }\n    onOpen(args) {\n        this.trigger('open', { element: this.container });\n    }\n    getPopupInst() {\n        return getInstance(this.getPopupEle(), Popup);\n    }\n    bindCallBackEvent() {\n        this.splitBtn.beforeOpen = (args) => {\n            let callBackPromise = new Deferred();\n            this.trigger('beforeOpen', args, (observeOpenArgs) => {\n                if (!observeOpenArgs.cancel) {\n                    let popupEle = this.getPopupEle();\n                    popupEle.style.top = formatUnit(0 + pageYOffset);\n                    popupEle.style.left = formatUnit(0 + pageXOffset);\n                    popupEle.style.display = 'block';\n                    this.createWidget();\n                    popupEle.style.display = '';\n                    if (Browser.isDevice) {\n                        this.modal = this.createElement('div');\n                        this.modal.className = 'e-' + this.getModuleName() + ' e-modal';\n                        this.modal.style.display = 'none';\n                        document.body.insertBefore(this.modal, popupEle);\n                        document.body.className += ' e-colorpicker-overflow';\n                        this.modal.style.display = 'block';\n                        this.modal.style.zIndex = (Number(popupEle.style.zIndex) - 1).toString();\n                    }\n                }\n                args.cancel = observeOpenArgs.cancel;\n                callBackPromise.resolve(observeOpenArgs);\n            });\n            return callBackPromise;\n        };\n        this.splitBtn.beforeClose = (args) => {\n            let callBackPromise = new Deferred();\n            if (!isNullOrUndefined(args.event)) {\n                let beforeCloseArgs = { element: this.container, event: args.event, cancel: false };\n                this.trigger('beforeClose', beforeCloseArgs, (observedCloseArgs) => {\n                    if (Browser.isDevice && args.event.target === this.modal) {\n                        observedCloseArgs.cancel = true;\n                    }\n                    if (!observedCloseArgs.cancel) {\n                        this.onPopupClose();\n                    }\n                    args.cancel = observedCloseArgs.cancel;\n                    callBackPromise.resolve(observedCloseArgs);\n                });\n            }\n            else {\n                callBackPromise.resolve(args);\n            }\n            return callBackPromise;\n        };\n    }\n    onPopupClose() {\n        this.unWireEvents();\n        this.destroyOtherComp();\n        this.container.style.width = '';\n        select('.' + SPLITPREVIEW, this.splitBtn.element).style.backgroundColor\n            = this.convertToRgbString(this.hexToRgb(this.value));\n        this.container.innerHTML = '';\n        removeClass([this.container], [PICKERCONTENT, PALETTECONTENT]);\n        if (Browser.isDevice && this.modal) {\n            removeClass([document.body], 'e-colorpicker-overflow');\n            this.modal.style.display = 'none';\n            this.modal.outerHTML = '';\n            this.modal = null;\n        }\n    }\n    createPalette() {\n        classList(this.container, [PALETTECONTENT], [PICKERCONTENT]);\n        if (this.presetColors) {\n            let paletteGroup = this.createElement('div', { className: 'e-custom-palette' });\n            this.appendElement(paletteGroup);\n            let keys = Object.keys(this.presetColors);\n            if (keys.length === 1) {\n                this.appendPalette(this.presetColors[keys[0]], keys[0], paletteGroup);\n            }\n            else {\n                for (let i = 0, len = keys.length; i < len; i++) {\n                    this.appendPalette(this.presetColors[keys[i]], keys[i], paletteGroup);\n                }\n            }\n            if (selectAll('.e-row', paletteGroup).length > 10) {\n                addClass([paletteGroup], 'e-palette-group');\n            }\n        }\n        else {\n            this.appendPalette(presets.default, 'default');\n        }\n        if (this.mode === 'Palette' && !this.modeSwitcher && this.noColor) {\n            this.setNoColor();\n        }\n        let width = parseInt(getComputedStyle(this.container).borderBottomWidth, 10);\n        this.container.style.width = formatUnit(this.container.children[0].offsetWidth + width + width);\n        this.rgb = this.hexToRgb(this.roundValue(this.value));\n        this.hsv = this.rgbToHsv.apply(this, this.rgb);\n    }\n    firstPaletteFocus() {\n        if (!select('.' + SELECT, this.container.children[0])) {\n            selectAll('.' + PALETTES, this.container)[0].focus();\n        }\n    }\n    appendPalette(colors, key, refEle) {\n        let palette = this.createElement('div', { className: PALETTES, attrs: { 'tabindex': '0' } });\n        if (refEle) {\n            refEle.appendChild(palette);\n        }\n        else {\n            this.appendElement(palette);\n        }\n        let row;\n        let tile;\n        let roundedColor;\n        for (let i = 0, len = colors.length; i < len; i++) {\n            if (i === 0 || i % this.columns === 0) {\n                row = this.createElement('div', {\n                    className: 'e-row', attrs: { 'role': 'row' }\n                });\n                palette.appendChild(row);\n            }\n            roundedColor = this.roundValue(colors[i]).toLowerCase();\n            tile = this.createElement('span', {\n                className: TILE, attrs: { 'role': 'gridcell', 'aria-label': roundedColor, 'aria-selected': 'false' }\n            });\n            this.trigger('beforeTileRender', { element: tile, presetName: key, value: colors[i] });\n            row.appendChild(tile);\n            if (this.value === roundedColor) {\n                this.addTileSelection(tile);\n                palette.focus();\n            }\n            tile.style.backgroundColor = this.convertToRgbString(this.hexToRgb(roundedColor));\n        }\n    }\n    setNoColor() {\n        let noColorEle = this.container.querySelector('.e-row').children[0];\n        noColorEle.classList.add(NOCOLOR);\n        if (!this.value) {\n            noColorEle.classList.add(SELECT);\n            closest(noColorEle, '.' + PALETTES).focus();\n        }\n        ['aria-selected', 'aria-label'].forEach((attr) => { noColorEle.removeAttribute(attr); });\n        noColorEle.style.backgroundColor = '';\n    }\n    appendElement(ele, insertPos = 0) {\n        let refEle = this.container.children[insertPos];\n        refEle ? this.container.insertBefore(ele, refEle) : this.container.appendChild(ele);\n    }\n    addTileSelection(ele) {\n        ele.classList.add(SELECT);\n        ele.setAttribute('aria-selected', 'true');\n    }\n    createPicker() {\n        classList(this.container, [PICKERCONTENT], [PALETTECONTENT]);\n        let hsvContainer = this.createElement('div', { className: HSVCONTAINER });\n        this.appendElement(hsvContainer);\n        hsvContainer.appendChild(this.createElement('div', { className: HSVAREA }));\n        let dragHandler = this.createElement('span', { className: HANDLER, attrs: { 'tabindex': '0' } });\n        hsvContainer.appendChild(dragHandler);\n        this.rgb = this.hexToRgb(this.value);\n        this.hsv = this.rgbToHsv.apply(this, this.rgb);\n        this.setHsvContainerBg();\n        this.setHandlerPosition();\n        this.createSlider();\n        this.createDragTooltip();\n    }\n    setHsvContainerBg(h = this.hsv[0]) {\n        this.getHsvContainer().style.backgroundColor = this.convertToRgbString(this.hsvToRgb(h, 100, 100, 1));\n    }\n    getHsvContainer() {\n        return select('.' + HSVCONTAINER, this.container);\n    }\n    setHandlerPosition() {\n        let dragHandler = this.getDragHandler();\n        let hsvArea = select('.' + HSVAREA, this.container);\n        if (this.enableRtl) {\n            dragHandler.style.left = formatUnit(hsvArea.offsetWidth * Math.abs(100 - this.hsv[1]) / 100);\n        }\n        else {\n            dragHandler.style.left = formatUnit(hsvArea.offsetWidth * this.hsv[1] / 100);\n        }\n        dragHandler.style.top = formatUnit(hsvArea.offsetHeight * (100 - this.hsv[2]) / 100);\n    }\n    createSlider() {\n        let sliderPreviewWrapper = this.createElement('div', { className: 'e-slider-preview' });\n        this.appendElement(sliderPreviewWrapper, 1);\n        this.createPreview(sliderPreviewWrapper);\n        let sliderWrapper = this.createElement('div', { className: 'e-colorpicker-slider' });\n        sliderPreviewWrapper.insertBefore(sliderWrapper, sliderPreviewWrapper.children[0]);\n        let slider = this.createElement('div', { className: 'e-hue-slider' });\n        sliderWrapper.appendChild(slider);\n        this.hueSlider = new Slider({\n            value: this.hsv[0],\n            min: 0,\n            max: 359,\n            enableRtl: this.enableRtl,\n            enabled: !this.disabled,\n            change: this.hueChange.bind(this)\n        });\n        this.hueSlider.createElement = this.createElement;\n        this.hueSlider.appendTo(slider);\n        if (this.enableOpacity) {\n            slider = this.createElement('div', { className: 'e-opacity-slider' });\n            sliderWrapper.appendChild(slider);\n            this.createOpacitySlider(slider);\n        }\n    }\n    createOpacitySlider(slider) {\n        this.opacitySlider = new Slider({\n            value: this.rgb[3] * 100,\n            min: 0,\n            max: 100,\n            enableRtl: this.enableRtl,\n            enabled: !this.disabled,\n            change: this.opacityChange.bind(this)\n        });\n        this.opacitySlider.createElement = this.createElement;\n        this.opacitySlider.appendTo(slider);\n        let opacityBgTrack = this.createElement('div', { className: 'e-opacity-empty-track' });\n        slider.appendChild(opacityBgTrack);\n        this.updateOpacitySliderBg();\n    }\n    updateOpacitySliderBg() {\n        let direction = this.enableRtl ? 'to left' : 'to right';\n        select('.e-slider-track', this.opacitySlider.element).style.background =\n            'linear-gradient(' + direction + ', rgba(' + this.rgb.slice(0, 3) + ', 0) 0%, ' +\n                this.convertToRgbString(this.rgb.slice(0, 3)) + ' 100%)';\n    }\n    hueChange(args) {\n        this.hsv[0] = args.value;\n        this.setHsvContainerBg();\n        this.convertToOtherFormat();\n    }\n    opacityChange(args) {\n        let value = args.value;\n        let pValue = this.rgbToHex(this.rgb);\n        this.hsv[3] = value / 100;\n        this.rgb[3] = value / 100;\n        let cValue = this.rgbToHex(this.rgb);\n        this.updateOpacityInput(value);\n        let rgb = this.convertToRgbString(this.rgb);\n        this.updatePreview(rgb);\n        this.triggerEvent(cValue, pValue, rgb);\n    }\n    updateOpacityInput(value) {\n        if (this.enableOpacity && !this.getWrapper().classList.contains(HIDEVALUE)) {\n            let opacityTextBoxInst = getInstance(select('.' + OPACITY, this.container), NumericTextBox);\n            opacityTextBoxInst.value = value;\n            opacityTextBoxInst.dataBind();\n        }\n    }\n    createPreview(parentEle) {\n        let previewContainer = this.createElement('div', { className: PREVIEW });\n        parentEle.appendChild(previewContainer);\n        let preview = this.createElement('span', { className: 'e-preview ' + CURRENT });\n        previewContainer.appendChild(preview);\n        let colorValue = this.convertToRgbString(this.rgb);\n        preview.style.backgroundColor = colorValue;\n        preview = this.createElement('span', { className: 'e-preview ' + PREVIOUS });\n        previewContainer.appendChild(preview);\n        preview.style.backgroundColor = colorValue;\n    }\n    isPicker() {\n        return !this.container.classList.contains(PALETTECONTENT);\n    }\n    getPopupEle() {\n        return this.container.parentElement;\n    }\n    createNumericInput(element, value, label, max) {\n        let numericInput = new NumericTextBox({\n            value: value,\n            placeholder: label,\n            min: 0,\n            max: max,\n            format: '###.##',\n            showSpinButton: false,\n            floatLabelType: 'Always',\n            enableRtl: this.enableRtl,\n            enabled: !this.disabled,\n            readonly: this.isPicker() ? false : true,\n            change: (args) => {\n                if (args.event) {\n                    this.inputHandler(args.event);\n                }\n            }\n        });\n        numericInput.createElement = this.createElement;\n        numericInput.appendTo(element);\n    }\n    createInput() {\n        let isPicker = this.isPicker();\n        let wrapper = this.getWrapper();\n        if ((isPicker && !wrapper.classList.contains(HIDEVALUE)) || (!isPicker && wrapper.classList.contains(SHOWVALUE))) {\n            let inputWrap = this.createElement('div', { className: INPUTWRAPPER });\n            isPicker ? this.appendElement(inputWrap, 2) : this.appendElement(inputWrap, 1);\n            let container = this.createElement('div', { className: 'e-input-container' });\n            inputWrap.appendChild(container);\n            if (!wrapper.classList.contains(HIDEVALUESWITCH)) {\n                this.appendValueSwitchBtn(inputWrap);\n            }\n            if (!wrapper.classList.contains(HIDEHEX)) {\n                let hexInput = this.createElement('input', {\n                    className: HEX,\n                    attrs: { 'maxlength': '7', 'spellcheck': 'false' }\n                });\n                container.appendChild(hexInput);\n                Input.createInput({\n                    element: hexInput,\n                    floatLabelType: 'Always',\n                    properties: {\n                        placeholder: 'HEX',\n                        enableRtl: this.enableRtl,\n                        enabled: !this.disabled,\n                        readonly: this.isPicker() ? false : true\n                    }\n                }, this.createElement);\n                Input.setValue(this.value.slice(0, 7), hexInput);\n                hexInput.addEventListener('input', this.inputHandler.bind(this));\n            }\n            if (!wrapper.classList.contains(HIDERGBA)) {\n                let label;\n                let value;\n                if (this.isRgb) {\n                    label = 'RGB';\n                    value = this.rgb;\n                }\n                else {\n                    label = 'HSV';\n                    value = this.hsv;\n                }\n                let clsName = ['rh', 'gs', 'bv'];\n                for (let i = 0; i < 3; i++) {\n                    this.createNumericInput(container.appendChild(this.createElement('input', { className: 'e-' + clsName[i] + '-value' })), value[i], label[i], 255);\n                }\n                if (this.enableOpacity) {\n                    this.appendOpacityValue(container);\n                }\n            }\n        }\n    }\n    appendOpacityValue(container) {\n        this.createNumericInput(container.appendChild(this.createElement('input', { className: OPACITY })), this.rgb[3] * 100, 'A', 100);\n    }\n    appendValueSwitchBtn(targetEle) {\n        let valueSwitchBtn = this.createElement('button', {\n            className: 'e-icons e-css e-btn e-flat e-icon-btn ' + FORMATSWITCH\n        });\n        targetEle.appendChild(valueSwitchBtn);\n        if (this.isPicker() && !this.getWrapper().classList.contains(HIDERGBA)) {\n            valueSwitchBtn.addEventListener('click', this.formatSwitchHandler.bind(this));\n        }\n    }\n    createCtrlBtn() {\n        if (this.modeSwitcher || this.showButtons) {\n            this.l10n.setLocale(this.locale);\n            let btnWrapper = this.createElement('div', { className: CTRLSWITCH });\n            this.container.appendChild(btnWrapper);\n            if (this.showButtons) {\n                let controlBtnWrapper = this.createElement('div', { className: CTRLBTN });\n                btnWrapper.appendChild(controlBtnWrapper);\n                let apply = this.l10n.getConstant('Apply');\n                controlBtnWrapper.appendChild(this.createElement('button', {\n                    innerHTML: apply,\n                    className: 'e-btn e-css e-flat e-primary e-small ' + APPLY,\n                    attrs: { 'title': apply }\n                }));\n                let cancel = this.l10n.getConstant('Cancel');\n                controlBtnWrapper.appendChild(this.createElement('button', {\n                    innerHTML: cancel,\n                    className: 'e-btn e-css e-flat e-small ' + CANCEL,\n                    attrs: { 'title': cancel }\n                }));\n            }\n            if (this.modeSwitcher) {\n                this.appendModeSwitchBtn();\n            }\n        }\n    }\n    appendModeSwitchBtn() {\n        let modeSwitcher = this.createElement('button', {\n            className: 'e-icons e-btn e-flat e-icon-btn ' + MODESWITCH, attrs: { title: this.l10n.getConstant('ModeSwitcher') }\n        });\n        select('.' + CTRLSWITCH, this.container).insertBefore(modeSwitcher, select('.' + CTRLBTN, this.container));\n    }\n    createDragTooltip() {\n        let tooltip = new Tooltip({\n            opensOn: 'Custom',\n            showTipPointer: false,\n            cssClass: 'e-color-picker-tooltip',\n            beforeOpen: (args) => {\n                this.tooltipEle = args.element;\n            },\n            animation: { open: { effect: 'None' }, close: { effect: 'None' } }\n        });\n        tooltip.createElement = this.createElement;\n        tooltip.appendTo(this.container);\n        tooltip.open(this.container);\n        this.tooltipEle.style.zIndex = getZindexPartial(this.tooltipEle).toString();\n        select('.e-tip-content', this.tooltipEle).appendChild(this.createElement('div', { className: 'e-tip-transparent' }));\n    }\n    getTooltipInst() {\n        return getInstance(this.container, Tooltip);\n    }\n    setTooltipOffset(value) {\n        this.getTooltipInst().offsetY = value;\n    }\n    toggleDisabled(enable) {\n        enable ? this.getWrapper().classList.add(DISABLED$1) : this.getWrapper().classList.remove(DISABLED$1);\n        if (this.showButtons) {\n            ([].slice.call(selectAll('.e-btn', this.container))).forEach((ele) => {\n                enable ? attributes(ele, { 'disabled': '' }) : ele.removeAttribute('disabled');\n            });\n        }\n    }\n    convertToRgbString(rgb) {\n        return rgb.length ? rgb.length === 4 ? 'rgba(' + rgb.join() + ')' : 'rgb(' + rgb.join() + ')' : '';\n    }\n    convertToHsvString(hsv) {\n        return hsv.length === 4 ? 'hsva(' + hsv.join() + ')' : 'hsv(' + hsv.join() + ')';\n    }\n    updateHsv() {\n        this.hsv[1] = this.hsv[1] > 100 ? 100 : this.hsv[1];\n        this.hsv[2] = this.hsv[2] > 100 ? 100 : this.hsv[2];\n        this.setHandlerPosition();\n    }\n    convertToOtherFormat(isKey = false) {\n        let pValue = this.rgbToHex(this.rgb);\n        this.rgb = this.hsvToRgb.apply(this, this.hsv);\n        let cValue = this.rgbToHex(this.rgb);\n        let rgba = this.convertToRgbString(this.rgb);\n        this.updatePreview(rgba);\n        this.updateInput(cValue);\n        this.triggerEvent(cValue, pValue, rgba, isKey);\n    }\n    updateInput(value) {\n        let wrapper = this.getWrapper();\n        if (!wrapper.classList.contains(HIDEVALUE)) {\n            if (!wrapper.classList.contains(HIDEHEX)) {\n                Input.setValue(value.substr(0, 7), select('.' + HEX, this.container));\n            }\n            if (!wrapper.classList.contains(HIDERGBA)) {\n                if (this.isRgb) {\n                    this.updateValue(this.rgb, false);\n                }\n                else {\n                    this.updateValue(this.hsv, false);\n                }\n            }\n        }\n    }\n    updatePreview(value) {\n        if (this.enableOpacity) {\n            this.updateOpacitySliderBg();\n        }\n        select('.e-tip-transparent', this.tooltipEle).style.backgroundColor = value;\n        select('.' + PREVIEW + ' .' + CURRENT, this.container).style.backgroundColor = value;\n        select('.' + PREVIEW + ' .' + PREVIOUS, this.container).style.backgroundColor\n            = this.convertToRgbString(this.hexToRgb(this.value));\n    }\n    getDragHandler() {\n        return select('.' + HANDLER, this.container);\n    }\n    removeTileSelection() {\n        let selectedEle = [].slice.call(selectAll('.' + SELECT, this.container.children[0]));\n        selectedEle.forEach((ele) => {\n            ele.classList.remove(SELECT);\n            ele.setAttribute('aria-selected', 'false');\n        });\n    }\n    convertRgbToNumberArray(value) {\n        return (value.slice(value.indexOf('(') + 1, value.indexOf(')'))).split(',').map((n, i) => {\n            return (i !== 3) ? parseInt(n, 10) : parseFloat(n);\n        });\n    }\n    /**\n     * To get color value in specified type.\n     * @param value - Specify the color value.\n     * @param type - Specify the type to which the specified color needs to be converted.\n     * @method getValue\n     * @return {string}\n     */\n    getValue(value, type) {\n        if (!value) {\n            value = this.value;\n        }\n        type = !type ? 'hex' : type.toLowerCase();\n        if (value[0] === 'r') {\n            let cValue = this.convertRgbToNumberArray(value);\n            if (type === 'hex' || type === 'hexa') {\n                let hex = this.rgbToHex(cValue);\n                return type === 'hex' ? hex.slice(0, 7) : hex;\n            }\n            else {\n                if (type === 'hsv') {\n                    return this.convertToHsvString(this.rgbToHsv.apply(this, cValue.slice(0, 3)));\n                }\n                else {\n                    if (type === 'hsva') {\n                        return this.convertToHsvString(this.rgbToHsv.apply(this, cValue));\n                    }\n                    else {\n                        return 'null';\n                    }\n                }\n            }\n        }\n        else {\n            if (value[0] === 'h') {\n                let cValue = this.hsvToRgb.apply(this, this.convertRgbToNumberArray(value));\n                if (type === 'rgba') {\n                    return this.convertToRgbString(cValue);\n                }\n                else {\n                    if (type === 'hex' || type === 'hexa') {\n                        let hex = this.rgbToHex(cValue);\n                        return type === 'hex' ? hex.slice(0, 7) : hex;\n                    }\n                    else {\n                        if (type === 'rgb') {\n                            return this.convertToRgbString(cValue.slice(0, 3));\n                        }\n                        else {\n                            return 'null';\n                        }\n                    }\n                }\n            }\n            else {\n                value = this.roundValue(value);\n                let rgb = this.hexToRgb(value);\n                if (type === 'rgb' || type === 'hsv') {\n                    rgb = rgb.slice(0, 3);\n                }\n                if (type === 'rgba' || type === 'rgb') {\n                    return this.convertToRgbString(rgb);\n                }\n                else {\n                    if (type === 'hsva' || type === 'hsv') {\n                        return this.convertToHsvString(this.rgbToHsv.apply(this, rgb));\n                    }\n                    else {\n                        if (type === 'hex') {\n                            return value.slice(0, 7);\n                        }\n                        else {\n                            if (type === 'a') {\n                                return rgb[3].toString();\n                            }\n                            else {\n                                return 'null';\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * To show/hide ColorPicker popup based on current state of the SplitButton.\n     * @method toggle\n     * @return {void}\n     */\n    toggle() {\n        this.container.parentElement.classList.contains('e-popup-close') ? this.splitBtn.toggle() : this.closePopup(null);\n    }\n    /**\n     * Get component name.\n     * @returns string\n     * @private\n     */\n    getModuleName() {\n        return 'colorpicker';\n    }\n    /**\n     * Gets the properties to be maintained in the persisted state.\n     * @return {string}\n     */\n    getPersistData() {\n        return this.addOnPersist(['value']);\n    }\n    wireEvents() {\n        if (this.isPicker()) {\n            let dragHandler = this.getDragHandler();\n            EventHandler.add(dragHandler, 'keydown', this.pickerKeyDown, this);\n            EventHandler.add(this.getHsvContainer(), 'mousedown touchstart', this.handlerDown, this);\n            if (this.modeSwitcher || this.showButtons) {\n                this.addCtrlSwitchEvent();\n            }\n            EventHandler.add(select('.' + PREVIOUS, this.container), 'click', this.previewHandler, this);\n        }\n        else {\n            EventHandler.add(this.container, 'click', this.paletteClickHandler, this);\n            EventHandler.add(this.container, 'keydown', this.paletteKeyDown, this);\n        }\n    }\n    formResetHandler() {\n        this.value = this.initialInputValue;\n        attributes(this.element, { 'value': this.initialInputValue });\n    }\n    addCtrlSwitchEvent() {\n        let ctrlSwitchBtn = select('.' + CTRLSWITCH, this.container);\n        if (ctrlSwitchBtn) {\n            EventHandler.add(ctrlSwitchBtn, 'click', this.btnClickHandler, this);\n        }\n    }\n    pickerKeyDown(e) {\n        switch (e.keyCode) {\n            case 39:\n                this.handlerDragPosition(1, this.enableRtl ? -1 : 1, e);\n                break;\n            case 37:\n                this.handlerDragPosition(1, this.enableRtl ? 1 : -1, e);\n                break;\n            case 38:\n                this.handlerDragPosition(2, 1, e);\n                break;\n            case 40:\n                this.handlerDragPosition(2, -1, e);\n                break;\n            case 13:\n                e.preventDefault();\n                let cValue = this.rgbToHex(this.rgb);\n                this.enterKeyHandler(cValue, e);\n        }\n    }\n    enterKeyHandler(value, e) {\n        this.triggerChangeEvent(value);\n        if (!this.inline) {\n            this.closePopup(e);\n            this.splitBtn.element.focus();\n        }\n    }\n    closePopup(e) {\n        let beforeCloseArgs = { element: this.container, event: e, cancel: false };\n        this.trigger('beforeClose', beforeCloseArgs, (observedcloseArgs) => {\n            if (!observedcloseArgs.cancel) {\n                this.splitBtn.toggle();\n                this.onPopupClose();\n            }\n        });\n    }\n    triggerChangeEvent(value) {\n        let hex = value.slice(0, 7);\n        this.trigger('change', {\n            currentValue: { hex: hex, rgba: this.convertToRgbString(this.rgb) },\n            previousValue: { hex: this.value.slice(0, 7), rgba: this.convertToRgbString(this.hexToRgb(this.value)) },\n            value: this.enableOpacity ? value : hex\n        });\n        if (this.enableOpacity) {\n            this.setProperties({ 'value': value }, true);\n        }\n        else {\n            this.setProperties({ 'value': hex }, true);\n        }\n        this.element.value = hex ? hex : '#000000';\n    }\n    handlerDragPosition(prob, value, e) {\n        e.preventDefault();\n        this.hsv[prob] += value * (e.ctrlKey ? 1 : 3);\n        if (this.hsv[prob] < 0) {\n            this.hsv[prob] = 0;\n        }\n        this.updateHsv();\n        this.convertToOtherFormat(true);\n    }\n    handlerDown(e) {\n        e.preventDefault();\n        if (e.type === 'mousedown') {\n            this.clientX = Math.abs(e.pageX - pageXOffset);\n            this.clientY = Math.abs(e.pageY - pageYOffset);\n            this.setTooltipOffset(8);\n        }\n        else {\n            this.clientX = Math.abs(e.changedTouches[0].pageX - pageXOffset);\n            this.clientY = Math.abs(e.changedTouches[0].pageY - pageYOffset);\n            this.setTooltipOffset(-8);\n        }\n        this.setHsv(this.clientX, this.clientY);\n        this.getDragHandler().style.transition = 'left .4s cubic-bezier(.25, .8, .25, 1), top .4s cubic-bezier(.25, .8, .25, 1)';\n        this.updateHsv();\n        this.convertToOtherFormat();\n        this.getDragHandler().focus();\n        EventHandler.add(document, 'mousemove touchmove', this.handlerMove, this);\n        EventHandler.add(document, 'mouseup touchend', this.handlerEnd, this);\n    }\n    handlerMove(e) {\n        if (e.type !== 'touchmove') {\n            e.preventDefault();\n        }\n        let x;\n        let y;\n        if (e.type === 'mousemove') {\n            x = Math.abs(e.pageX - pageXOffset);\n            y = Math.abs(e.pageY - pageYOffset);\n        }\n        else {\n            x = Math.abs(e.changedTouches[0].pageX - pageXOffset);\n            y = Math.abs(e.changedTouches[0].pageY - pageYOffset);\n        }\n        this.setHsv(x, y);\n        let dragHandler = this.getDragHandler();\n        let left = parseInt(dragHandler.style.left, 10);\n        let top = parseInt(dragHandler.style.top, 10);\n        this.updateHsv();\n        this.convertToOtherFormat();\n        this.getTooltipInst().refresh(dragHandler);\n        if (!this.tooltipEle.style.transform) {\n            if (Math.abs(this.clientX - x) > 8 || Math.abs(this.clientY - y) > 8) {\n                select('.' + HSVAREA, this.container).style.cursor = 'pointer';\n                dragHandler.style.transition = 'none';\n                if (!this.inline) {\n                    this.tooltipEle.style.zIndex = (parseInt(this.getPopupEle().style.zIndex, 10) + 1).toString();\n                }\n                this.tooltipEle.style.transform = 'rotate(45deg)';\n                dragHandler.classList.add('e-hide-handler');\n            }\n        }\n    }\n    setHsv(clientX, clientY) {\n        let ele = select('.' + HSVAREA, this.container);\n        let position = ele.getBoundingClientRect();\n        if (this.enableRtl) {\n            clientX = clientX > position.right ? 0 : Math.abs(clientX - position.right);\n        }\n        else {\n            clientX = clientX > position.left ? Math.abs(clientX - position.left) : 0;\n        }\n        clientY = clientY > position.top ? Math.abs(clientY - position.top) : 0;\n        this.hsv[2] = Math.round(Number(100 * (ele.offsetHeight -\n            Math.max(0, Math.min(ele.offsetHeight, (clientY - ele.offsetTop)))) / ele.offsetHeight) * 10) / 10;\n        this.hsv[1] =\n            Math.round(Number(100 * (Math.max(0, Math.min(ele.offsetWidth, (clientX - ele.offsetLeft)))) / ele.offsetWidth) * 10) / 10;\n    }\n    handlerEnd(e) {\n        if (e.type !== 'touchend') {\n            e.preventDefault();\n        }\n        EventHandler.remove(document, 'mousemove touchmove', this.handlerMove);\n        EventHandler.remove(document, 'mouseup touchend', this.handlerEnd);\n        let dragHandler = this.getDragHandler();\n        select('.' + HSVAREA, this.container).style.cursor = '';\n        if (this.tooltipEle.style.transform) {\n            this.tooltipEle.style.transform = '';\n            dragHandler.classList.remove('e-hide-handler');\n        }\n        if (!this.inline && !this.showButtons) {\n            this.closePopup(e);\n        }\n    }\n    btnClickHandler(e) {\n        let target = e.target;\n        if (closest(target, '.' + MODESWITCH)) {\n            e.stopPropagation();\n            this.switchToPalette();\n        }\n        else {\n            if (target.classList.contains(APPLY) || target.classList.contains(CANCEL)) {\n                this.ctrlBtnClick(target, e);\n            }\n        }\n    }\n    switchToPalette() {\n        this.trigger('beforeModeSwitch', { element: this.container, mode: 'Palette' });\n        this.unWireEvents();\n        this.destroyOtherComp();\n        detach(select('.e-slider-preview', this.container));\n        if (!this.getWrapper().classList.contains(HIDEVALUE)) {\n            remove(select('.' + INPUTWRAPPER, this.container));\n        }\n        detach(this.getHsvContainer());\n        this.createPalette();\n        this.firstPaletteFocus();\n        this.createInput();\n        this.refreshPopupPos();\n        this.wireEvents();\n        this.trigger('onModeSwitch', { element: this.container, mode: 'Palette' });\n    }\n    refreshPopupPos() {\n        if (!this.inline) {\n            let popupEle = this.getPopupEle();\n            popupEle.style.left = formatUnit(0 + pageXOffset);\n            popupEle.style.top = formatUnit(0 + pageYOffset);\n            this.getPopupInst().refreshPosition(this.splitBtn.element.parentElement);\n        }\n    }\n    formatSwitchHandler(e) {\n        let target = e.target.parentElement;\n        if (this.isRgb) {\n            this.updateValue(this.hsv, true, 3, [360, 100, 100]);\n            this.isRgb = false;\n        }\n        else {\n            this.updateValue(this.rgb, true, 2);\n            this.isRgb = true;\n        }\n    }\n    updateValue(value, format, idx, max) {\n        let clsName = ['e-rh-value', 'e-gs-value', 'e-bv-value'];\n        let inst;\n        for (let i = 0, len = clsName.length; i < len; i++) {\n            inst = getInstance(select('.' + clsName[i], this.container), NumericTextBox);\n            inst.value = Math.round(value[i]);\n            if (format) {\n                inst.placeholder = clsName[i].substr(idx, 1).toUpperCase();\n                inst.max = max ? max[i] : 255;\n            }\n            inst.dataBind();\n        }\n    }\n    previewHandler(e) {\n        let target = e.target;\n        let pValue = this.rgbToHex(this.rgb);\n        this.rgb = this.convertRgbToNumberArray(target.style.backgroundColor);\n        if (!this.rgb[3]) {\n            this.rgb[3] = 1;\n        }\n        let cValue = this.rgbToHex(this.rgb);\n        let hsv = this.rgbToHsv.apply(this, this.rgb);\n        if (hsv[0] !== this.hsv[0]) {\n            this.hueSlider.setProperties({ 'value': hsv[0] }, true);\n            this.hueSlider.refresh();\n        }\n        this.setHsvContainerBg(hsv[0]);\n        if (this.enableOpacity && hsv[3] !== this.hsv[3]) {\n            this.opacitySlider.setProperties({ 'value': hsv[3] * 100 }, true);\n            this.opacitySlider.refresh();\n            this.updateOpacitySliderBg();\n        }\n        this.hsv = hsv;\n        this.setHandlerPosition();\n        this.updateInput(cValue);\n        select('.' + PREVIEW + ' .' + CURRENT, this.container).style.backgroundColor = this.convertToRgbString(this.rgb);\n        this.triggerEvent(cValue, pValue, this.convertToRgbString(this.rgb));\n    }\n    paletteClickHandler(e) {\n        e.preventDefault();\n        let target = e.target;\n        if (target.classList.contains(TILE)) {\n            this.removeTileSelection();\n            this.addTileSelection(target);\n            if (target.classList.contains(NOCOLOR)) {\n                this.noColorTile();\n            }\n            else {\n                let cValue = target.getAttribute('aria-label');\n                let pValue = this.rgbToHex(this.rgb);\n                this.rgb = this.hexToRgb(this.roundValue(cValue));\n                this.hsv = this.rgbToHsv.apply(this, this.rgb);\n                if (this.getWrapper().classList.contains(SHOWVALUE)) {\n                    this.updateInput(cValue);\n                }\n                this.triggerEvent(cValue, pValue, this.convertToRgbString(this.rgb));\n            }\n            if (!this.inline && !this.showButtons) {\n                this.closePopup(e);\n            }\n        }\n        else {\n            if (closest(target, '.' + MODESWITCH)) {\n                this.switchToPicker();\n            }\n            else {\n                if (target.classList.contains(APPLY) || target.classList.contains(CANCEL)) {\n                    this.ctrlBtnClick(target, e);\n                }\n                else {\n                    if (this.getWrapper().classList.contains(SHOWVALUE) && closest(target, '.' + FORMATSWITCH)) {\n                        this.formatSwitchHandler(e);\n                    }\n                }\n            }\n        }\n    }\n    noColorTile(isKey = false) {\n        let pValue = this.rgbToHex(this.rgb);\n        this.rgb = [];\n        this.hsv = [];\n        this.triggerEvent('', pValue, '', isKey);\n    }\n    switchToPicker() {\n        let wrapper = this.getWrapper();\n        this.trigger('beforeModeSwitch', { element: this.container, mode: 'Picker' });\n        this.unWireEvents();\n        ([].slice.call(selectAll('.' + PALETTES, this.container))).forEach((ele) => {\n            detach(ele);\n        });\n        if (wrapper.classList.contains(SHOWVALUE)) {\n            detach(select('.' + INPUTWRAPPER, this.container));\n        }\n        this.container.style.width = '';\n        let grpEle = select('.e-custom-palette', this.container);\n        if (this.presetColors) {\n            remove(grpEle);\n        }\n        this.createPicker();\n        this.getDragHandler().focus();\n        this.createInput();\n        this.refreshPopupPos();\n        this.wireEvents();\n        this.trigger('onModeSwitch', { element: this.container, mode: 'Picker' });\n    }\n    ctrlBtnClick(ele, e) {\n        if (ele.classList.contains(APPLY)) {\n            let cValue = this.rgbToHex(this.rgb);\n            this.triggerChangeEvent(cValue);\n        }\n        if (!this.inline) {\n            this.closePopup(e);\n            this.splitBtn.element.focus();\n        }\n    }\n    paletteKeyDown(e) {\n        let target = e.target;\n        if (!target.classList.contains(PALETTES)) {\n            return;\n        }\n        let selectedEle;\n        let idx;\n        let tiles = [].slice.call(selectAll('.' + TILE, target));\n        let prevSelectedEle = (tiles.filter((tile) => tile.classList.contains('e-selected'))).pop();\n        switch (!e.altKey && e.keyCode) {\n            case 39:\n                e.preventDefault();\n                selectedEle = prevSelectedEle ? tiles[this.tilePosition(tiles, prevSelectedEle, this.enableRtl ? -1 : 1)]\n                    : tiles[this.enableRtl ? tiles.length - 1 : 0];\n                this.keySelectionChanges(selectedEle);\n                break;\n            case 37:\n                e.preventDefault();\n                selectedEle = prevSelectedEle ? tiles[this.tilePosition(tiles, prevSelectedEle, this.enableRtl ? 1 : -1)]\n                    : tiles[this.enableRtl ? 0 : tiles.length - 1];\n                this.keySelectionChanges(selectedEle);\n                break;\n            case 38:\n                e.preventDefault();\n                idx = prevSelectedEle ? this.tilePosition(tiles, prevSelectedEle, -this.columns) : 0;\n                selectedEle = tiles[idx] ? tiles[idx] : tiles[idx - this.columns];\n                this.keySelectionChanges(selectedEle);\n                break;\n            case 40:\n                e.preventDefault();\n                idx = prevSelectedEle ? this.tilePosition(tiles, prevSelectedEle, this.columns) : tiles.length - 1;\n                if (tiles[idx]) {\n                    selectedEle = tiles[idx];\n                }\n                else {\n                    idx %= tiles.length;\n                    idx += tiles[tiles.length - 1].parentElement.childElementCount;\n                    selectedEle = tiles[idx];\n                }\n                this.keySelectionChanges(selectedEle);\n                break;\n            case 13:\n                e.preventDefault();\n                if (prevSelectedEle) {\n                    let cValue = prevSelectedEle.getAttribute('aria-label');\n                    this.enterKeyHandler(cValue ? cValue : '', e);\n                }\n        }\n    }\n    keySelectionChanges(newEle) {\n        this.removeTileSelection();\n        this.addTileSelection(newEle);\n        if (newEle.classList.contains(NOCOLOR)) {\n            this.noColorTile(true);\n        }\n        else {\n            let cValue = newEle.getAttribute('aria-label');\n            let pValue = this.rgbToHex(this.rgb);\n            this.rgb = this.hexToRgb(cValue);\n            this.hsv = this.rgbToHsv.apply(this, this.rgb);\n            if (this.getWrapper().classList.contains(SHOWVALUE)) {\n                this.updateInput(cValue);\n            }\n            this.triggerEvent(cValue, pValue, this.convertToRgbString(this.rgb), true);\n        }\n    }\n    tilePosition(items, element, cIdx) {\n        items = Array.prototype.slice.call(items);\n        let n = items.length;\n        let emptyCount = this.columns - items[n - 1].parentElement.childElementCount;\n        let idx = items.indexOf(element);\n        idx += cIdx;\n        idx < 0 ? idx += n + emptyCount : idx %= n + emptyCount;\n        return idx;\n    }\n    inputHandler(e) {\n        let target = e.target;\n        if (!target.value.length) {\n            return;\n        }\n        let hsv;\n        let pValue;\n        let label = select('.e-float-text', target.parentElement).textContent;\n        switch (label) {\n            case 'HEX':\n                let value = '';\n                if ((target.value[0] === '#' && target.value.length !== 5) || (target.value[0] !== '#' && target.value.length !== 4)) {\n                    value = this.roundValue(target.value);\n                }\n                if (value.length === 9) {\n                    pValue = this.rgbToHex(this.rgb);\n                    this.rgb = this.hexToRgb(value + value.substr(-2));\n                    this.inputValueChange(this.rgbToHsv.apply(this, this.rgb), pValue, target.value);\n                }\n                else {\n                    return;\n                }\n                break;\n            case 'R':\n                if (this.rgb[0] !== Number(target.value)) {\n                    pValue = this.rgbToHex(this.rgb);\n                    this.rgb[0] = Number(target.value);\n                    hsv = this.rgbToHsv.apply(this, this.rgb);\n                    this.inputValueChange(hsv, pValue);\n                }\n                break;\n            case 'G':\n                if (this.rgb[1] !== Number(target.value)) {\n                    pValue = this.rgbToHex(this.rgb);\n                    this.rgb[1] = Number(target.value);\n                    hsv = this.rgbToHsv.apply(this, this.rgb);\n                    this.inputValueChange(hsv, pValue);\n                }\n                break;\n            case 'B':\n                if (this.rgb[2] !== Number(target.value)) {\n                    pValue = this.rgbToHex(this.rgb);\n                    this.rgb[2] = Number(target.value);\n                    hsv = this.rgbToHsv.apply(this, this.rgb);\n                    this.inputValueChange(hsv, pValue);\n                }\n                break;\n            case 'H':\n                this.hueSlider.value = Number(target.value);\n                break;\n            case 'S':\n                if (this.hsv[1] !== Number(target.value)) {\n                    this.hsv[1] = Number(target.value);\n                    this.updateHsv();\n                    this.convertToOtherFormat();\n                }\n                break;\n            case 'V':\n                if (this.hsv[2] !== Number(target.value)) {\n                    this.hsv[2] = Number(target.value);\n                    this.updateHsv();\n                    this.convertToOtherFormat();\n                }\n                break;\n            case 'A':\n                this.opacitySlider.value = Number(target.value);\n                break;\n        }\n    }\n    inputValueChange(hsv, pValue, value) {\n        if (hsv[0] !== this.hsv[0]) {\n            this.hueSlider.setProperties({ 'value': hsv[0] }, true);\n            this.hueSlider.refresh();\n            this.setHsvContainerBg(hsv[0]);\n        }\n        this.hsv = hsv;\n        let cValue = this.rgbToHex(this.rgb);\n        this.setHandlerPosition();\n        this.updateInput(value ? value : cValue);\n        let rgba = this.convertToRgbString(this.rgb);\n        this.updatePreview(rgba);\n        this.triggerEvent(cValue, pValue, rgba);\n    }\n    triggerEvent(cValue, pValue, rgba, isKey = false) {\n        let hex = cValue.slice(0, 7);\n        if (!this.showButtons && !isKey) {\n            this.trigger('change', { currentValue: { hex: hex, rgba: rgba },\n                previousValue: { hex: this.value.slice(0, 7), rgba: this.convertToRgbString(this.hexToRgb(this.value)) }, value: cValue });\n            this.setProperties({ 'value': cValue }, true);\n            this.element.value = hex ? hex : '#000000';\n        }\n        else {\n            this.trigger('select', {\n                currentValue: { hex: hex, rgba: rgba },\n                previousValue: { hex: pValue.slice(0, 7), rgba: this.convertToRgbString(this.hexToRgb(pValue)) }\n            });\n        }\n    }\n    /**\n     * Removes the component from the DOM and detaches all its related event handlers.\n     * Also it maintains the initial input element from the DOM.\n     * @method destroy\n     * @return {void}\n     */\n    destroy() {\n        let wrapper = this.getWrapper();\n        super.destroy();\n        ['tabindex', 'spellcheck'].forEach((attr) => { this.element.removeAttribute(attr); });\n        if (this.inline) {\n            this.unWireEvents();\n            this.destroyOtherComp();\n        }\n        else {\n            if (this.isPopupOpen()) {\n                this.unWireEvents();\n                this.destroyOtherComp();\n            }\n            this.splitBtn.destroy();\n            this.splitBtn = null;\n        }\n        this.tileRipple();\n        this.tileRipple = null;\n        this.ctrlBtnRipple();\n        this.ctrlBtnRipple = null;\n        if (this.element.nextElementSibling) {\n            detach(this.element.nextElementSibling);\n        }\n        if (wrapper) {\n            wrapper.parentElement.insertBefore(this.element, wrapper);\n            detach(wrapper);\n        }\n        this.container = null;\n        if (this.formElement) {\n            EventHandler.remove(this.formElement, 'reset', this.formResetHandler);\n        }\n    }\n    destroyOtherComp() {\n        if (this.isPicker()) {\n            this.hueSlider.destroy();\n            if (this.enableOpacity) {\n                this.opacitySlider.destroy();\n                this.opacitySlider = null;\n            }\n            this.hueSlider = null;\n            let tooltipInst = this.getTooltipInst();\n            tooltipInst.close();\n            tooltipInst.destroy();\n            this.tooltipEle = null;\n        }\n    }\n    isPopupOpen() {\n        return this.getPopupEle().classList.contains('e-popup-open');\n    }\n    unWireEvents() {\n        if (this.isPicker()) {\n            let wrapper = this.getWrapper();\n            let dragHandler = this.getDragHandler();\n            EventHandler.remove(dragHandler, 'keydown', this.pickerKeyDown);\n            EventHandler.remove(this.getHsvContainer(), 'mousedown touchstart', this.handlerDown);\n            if (this.modeSwitcher || this.showButtons) {\n                EventHandler.remove(select('.' + CTRLSWITCH, this.container), 'click', this.btnClickHandler);\n            }\n            EventHandler.remove(select('.' + PREVIOUS, this.container), 'click', this.previewHandler);\n        }\n        else {\n            EventHandler.remove(this.container, 'click', this.paletteClickHandler);\n            EventHandler.remove(this.container, 'keydown', this.paletteKeyDown);\n        }\n    }\n    roundValue(value) {\n        if (!value) {\n            return '';\n        }\n        if (value[0] !== '#') {\n            value = '#' + value;\n        }\n        let len = value.length;\n        if (len === 4) {\n            value += 'f';\n            len = 5;\n        }\n        if (len === 5) {\n            let tempValue = '';\n            for (let i = 1, len = value.length; i < len; i++) {\n                tempValue += (value.charAt(i) + value.charAt(i));\n            }\n            value = '#' + tempValue;\n            len = 9;\n        }\n        if (len === 7) {\n            value += 'ff';\n        }\n        return value;\n    }\n    hexToRgb(hex) {\n        if (!hex) {\n            return [];\n        }\n        hex = hex.trim();\n        if (hex.length !== 9) {\n            hex = this.roundValue(hex);\n        }\n        let opacity = Number((parseInt(hex.slice(-2), 16) / 255).toFixed(2));\n        hex = hex.slice(1, 7);\n        let bigInt = parseInt(hex, 16);\n        let h = [];\n        h.push((bigInt >> 16) & 255);\n        h.push((bigInt >> 8) & 255);\n        h.push(bigInt & 255);\n        h.push(opacity);\n        return h;\n    }\n    rgbToHsv(r, g, b, opacity) {\n        if (this.rgb && !this.rgb.length) {\n            return [];\n        }\n        r /= 255;\n        g /= 255;\n        b /= 255;\n        let max = Math.max(r, g, b);\n        let min = Math.min(r, g, b);\n        let h;\n        let s;\n        let v = max;\n        let d = max - min;\n        s = max === 0 ? 0 : d / max;\n        if (max === min) {\n            h = 0;\n        }\n        else {\n            switch (max) {\n                case r:\n                    h = (g - b) / d + (g < b ? 6 : 0);\n                    break;\n                case g:\n                    h = (b - r) / d + 2;\n                    break;\n                case b:\n                    h = (r - g) / d + 4;\n                    break;\n            }\n            h /= 6;\n        }\n        let hsv = [Math.round(h * 360), Math.round(s * 1000) / 10, Math.round(v * 1000) / 10];\n        if (!isNullOrUndefined(opacity)) {\n            hsv.push(opacity);\n        }\n        return hsv;\n    }\n    hsvToRgb(h, s, v, opacity) {\n        let r;\n        let g;\n        let b;\n        let i;\n        let f;\n        let p;\n        let q;\n        let t;\n        s /= 100;\n        v /= 100;\n        if (s === 0) {\n            r = g = b = v;\n            return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255), opacity];\n        }\n        h /= 60;\n        i = Math.floor(h);\n        f = h - i;\n        p = v * (1 - s);\n        q = v * (1 - s * f);\n        t = v * (1 - s * (1 - f));\n        switch (i) {\n            case 0:\n                r = v;\n                g = t;\n                b = p;\n                break;\n            case 1:\n                r = q;\n                g = v;\n                b = p;\n                break;\n            case 2:\n                r = p;\n                g = v;\n                b = t;\n                break;\n            case 3:\n                r = p;\n                g = q;\n                b = v;\n                break;\n            case 4:\n                r = t;\n                g = p;\n                b = v;\n                break;\n            default:\n                r = v;\n                g = p;\n                b = q;\n        }\n        let rgb = [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];\n        if (!isNullOrUndefined(opacity)) {\n            rgb.push(opacity);\n        }\n        return rgb;\n    }\n    rgbToHex(rgb) {\n        return rgb.length ? ('#' + this.hex(rgb[0]) + this.hex(rgb[1]) + this.hex(rgb[2]) +\n            (!isNullOrUndefined(rgb[3]) ? (rgb[3] !== 0 ? (Math.round(rgb[3] * 255) + 0x10000).toString(16).substr(-2) : '00') : '')) : '';\n    }\n    hex(x) {\n        return ('0' + x.toString(16)).slice(-2);\n    }\n    changeModeSwitcherProp(prop) {\n        let ctrlSwitchWrapper = select('.' + CTRLSWITCH, this.container);\n        if (prop) {\n            if (ctrlSwitchWrapper) {\n                this.appendModeSwitchBtn();\n            }\n            else {\n                this.createCtrlBtn();\n                if (this.isPicker() && !this.disabled) {\n                    this.addCtrlSwitchEvent();\n                }\n            }\n        }\n        else {\n            if (ctrlSwitchWrapper) {\n                if (this.showButtons) {\n                    detach(select('.' + MODESWITCH, ctrlSwitchWrapper));\n                }\n                else {\n                    remove(ctrlSwitchWrapper);\n                }\n            }\n        }\n    }\n    changeShowBtnProps(prop) {\n        let ctrlBtnWrapper = select('.' + CTRLSWITCH, this.container);\n        if (prop) {\n            if (ctrlBtnWrapper) {\n                remove(ctrlBtnWrapper);\n            }\n            this.createCtrlBtn();\n            if (this.isPicker() && !this.disabled) {\n                this.addCtrlSwitchEvent();\n            }\n        }\n        else {\n            if (this.modeSwitcher) {\n                detach(select('.' + CTRLBTN, ctrlBtnWrapper));\n            }\n            else {\n                remove(ctrlBtnWrapper);\n            }\n        }\n    }\n    changeValueProp(newProp) {\n        if (this.isPicker()) {\n            this.rgb = this.hexToRgb(newProp);\n            this.hsv = this.rgbToHsv.apply(this, this.rgb);\n            this.setHandlerPosition();\n            detach(closest(this.hueSlider.element, '.e-slider-preview'));\n            this.createSlider();\n            this.setHsvContainerBg();\n            this.updateInput(newProp);\n            if (this.rgb.length === 4) {\n                this.updateOpacityInput(this.rgb[3] * 100);\n            }\n        }\n        else {\n            this.removeTileSelection();\n            let ele = select('span[aria-label=\"' + this.roundValue(newProp) + '\"]', this.container);\n            if (ele) {\n                this.addTileSelection(ele);\n            }\n        }\n    }\n    setInputEleProps(prop) {\n        remove(select('.' + INPUTWRAPPER, this.container));\n        this.createInput();\n    }\n    changeDisabledProp(newProp) {\n        if (this.isPicker()) {\n            this.hueSlider.enabled = !newProp;\n            this.opacitySlider.enabled = !newProp;\n            this.setInputEleProps(newProp);\n        }\n        if (newProp) {\n            this.toggleDisabled(true);\n            this.unWireEvents();\n        }\n        else {\n            this.toggleDisabled(false);\n            this.wireEvents();\n        }\n    }\n    changeCssClassProps(newProp, oldProp) {\n        let wrapper = this.getWrapper();\n        let popupWrapper = this.getPopupEle();\n        if (oldProp) {\n            removeClass([wrapper, popupWrapper], oldProp.split(' '));\n        }\n        if (newProp) {\n            addClass([wrapper, popupWrapper], newProp.split(' '));\n        }\n    }\n    changeRtlProps(newProp) {\n        if (newProp) {\n            addClass([this.getWrapper()], 'e-rtl');\n        }\n        else {\n            removeClass([this.getWrapper()], 'e-rtl');\n        }\n    }\n    changePaletteProps() {\n        detach(this.container.children[0]);\n        this.container.style.width = '';\n        this.createPalette();\n    }\n    changeOpacityProps(newProp) {\n        let wrapper = this.getWrapper();\n        if (newProp) {\n            removeClass([this.container.parentElement], HIDEOPACITY);\n            this.createOpacitySlider(select('.e-colorpicker-slider', this.container).appendChild(this.createElement('div', { className: 'e-opacity-slider' })));\n            if (!wrapper.classList.contains(HIDEVALUE) && !wrapper.classList.contains(HIDERGBA)) {\n                this.appendOpacityValue(select('.e-input-container', this.container));\n            }\n        }\n        else {\n            addClass([this.container.parentElement], HIDEOPACITY);\n            this.opacitySlider.destroy();\n            remove(this.opacitySlider.element);\n            this.opacitySlider = null;\n            if (!wrapper.classList.contains(HIDEVALUE) && !wrapper.classList.contains(HIDERGBA)) {\n                remove(select('.' + OPACITY, this.container).parentElement);\n            }\n        }\n    }\n    /**\n     * Called internally if any of the property value changed.\n     * @param  {ColorPickerModel} newProp\n     * @param  {ColorPickerModel} oldProp\n     * @returns void\n     * @private\n     */\n    onPropertyChanged(newProp, oldProp) {\n        if (!isNullOrUndefined(newProp.value)) {\n            let value = this.roundValue(newProp.value);\n            if (value.length === 9) {\n                this.element.value = this.roundValue(value).slice(0, 7);\n                let preview = this.splitBtn && select('.' + SPLITPREVIEW, this.splitBtn.element);\n                if (preview) {\n                    preview.style.backgroundColor = this.convertToRgbString(this.hexToRgb(newProp.value));\n                }\n            }\n            else {\n                this.value = oldProp.value;\n            }\n        }\n        if (!this.inline && isNullOrUndefined(newProp.inline)) {\n            let otherCompModel = ['disabled', 'enableRtl'];\n            this.splitBtn.setProperties(getModel(newProp, otherCompModel));\n            if (!this.isPopupOpen()) {\n                this.changeCssClassProps(newProp.cssClass, oldProp.cssClass);\n                this.changeRtlProps(newProp.enableRtl);\n                return;\n            }\n        }\n        for (let prop of Object.keys(newProp)) {\n            switch (prop) {\n                case 'inline':\n                    if (newProp.inline) {\n                        this.getWrapper().appendChild(this.container);\n                        this.splitBtn.destroy();\n                        detach(this.element.nextElementSibling);\n                        if (!this.container.children.length) {\n                            this.createWidget();\n                        }\n                    }\n                    else {\n                        this.destroyOtherComp();\n                        this.unWireEvents();\n                        this.container.innerHTML = '';\n                        this.createSplitBtn();\n                    }\n                    break;\n                case 'cssClass':\n                    this.changeCssClassProps(newProp.cssClass, oldProp.cssClass);\n                    let props = newProp.cssClass.split(' ').concat(oldProp.cssClass.split(' '));\n                    props = props.reduce((a, b) => { if (a.indexOf(b) < 0) {\n                        a.push(b);\n                    } return a; }, []);\n                    let count = 0;\n                    props.forEach((cls) => {\n                        if (count === 0 &&\n                            (cls === HIDEVALUE || cls === HIDEVALUESWITCH || cls === SHOWVALUE || cls === HIDEHEX || cls === HIDERGBA)) {\n                            let inputWrap = select('.' + INPUTWRAPPER, this.container);\n                            if (inputWrap) {\n                                remove(select('.' + INPUTWRAPPER, this.container));\n                            }\n                            this.createInput();\n                            count++;\n                        }\n                    });\n                    break;\n                case 'enableRtl':\n                    if (this.isPicker()) {\n                        this.hueSlider.enableRtl = newProp.enableRtl;\n                        if (this.enableOpacity) {\n                            this.opacitySlider.enableRtl = newProp.enableRtl;\n                        }\n                        this.setInputEleProps(newProp.enableRtl);\n                    }\n                    this.changeRtlProps(newProp.enableRtl);\n                    break;\n                case 'disabled':\n                    this.changeDisabledProp(newProp.disabled);\n                    break;\n                case 'value':\n                    if (this.value !== oldProp.value) {\n                        this.changeValueProp(newProp.value);\n                    }\n                    break;\n                case 'showButtons':\n                    this.changeShowBtnProps(newProp.showButtons);\n                    break;\n                case 'mode':\n                    if (newProp.mode === 'Picker') {\n                        this.switchToPicker();\n                    }\n                    else {\n                        this.switchToPalette();\n                    }\n                    break;\n                case 'modeSwitcher':\n                    this.changeModeSwitcherProp(newProp.modeSwitcher);\n                    break;\n                case 'columns':\n                case 'presetColors':\n                    if (!this.isPicker()) {\n                        this.changePaletteProps();\n                    }\n                    break;\n                case 'noColor':\n                    if (newProp.noColor) {\n                        if (this.mode === 'Palette' && !this.modeSwitcher) {\n                            this.setNoColor();\n                        }\n                    }\n                    else {\n                        this.changePaletteProps();\n                    }\n                    break;\n                case 'enableOpacity':\n                    this.changeOpacityProps(newProp.enableOpacity);\n                    break;\n            }\n        }\n    }\n    /**\n     * Sets the focus to Colorpicker\n     * its native method\n     * @public\n     */\n    focusIn() {\n        this.element.parentElement.focus();\n    }\n};\n__decorate$5([\n    Property('#008000ff')\n], ColorPicker.prototype, \"value\", void 0);\n__decorate$5([\n    Property('')\n], ColorPicker.prototype, \"cssClass\", void 0);\n__decorate$5([\n    Property(false)\n], ColorPicker.prototype, \"disabled\", void 0);\n__decorate$5([\n    Property('Picker')\n], ColorPicker.prototype, \"mode\", void 0);\n__decorate$5([\n    Property(true)\n], ColorPicker.prototype, \"modeSwitcher\", void 0);\n__decorate$5([\n    Property(null)\n], ColorPicker.prototype, \"presetColors\", void 0);\n__decorate$5([\n    Property(true)\n], ColorPicker.prototype, \"showButtons\", void 0);\n__decorate$5([\n    Property(10)\n], ColorPicker.prototype, \"columns\", void 0);\n__decorate$5([\n    Property(false)\n], ColorPicker.prototype, \"inline\", void 0);\n__decorate$5([\n    Property(false)\n], ColorPicker.prototype, \"noColor\", void 0);\n__decorate$5([\n    Property(false)\n], ColorPicker.prototype, \"enablePersistence\", void 0);\n__decorate$5([\n    Property(true)\n], ColorPicker.prototype, \"enableOpacity\", void 0);\n__decorate$5([\n    Event()\n], ColorPicker.prototype, \"select\", void 0);\n__decorate$5([\n    Event()\n], ColorPicker.prototype, \"change\", void 0);\n__decorate$5([\n    Event()\n], ColorPicker.prototype, \"beforeTileRender\", void 0);\n__decorate$5([\n    Event()\n], ColorPicker.prototype, \"beforeOpen\", void 0);\n__decorate$5([\n    Event()\n], ColorPicker.prototype, \"open\", void 0);\n__decorate$5([\n    Event()\n], ColorPicker.prototype, \"beforeClose\", void 0);\n__decorate$5([\n    Event()\n], ColorPicker.prototype, \"beforeModeSwitch\", void 0);\n__decorate$5([\n    Event()\n], ColorPicker.prototype, \"onModeSwitch\", void 0);\n__decorate$5([\n    Event()\n], ColorPicker.prototype, \"created\", void 0);\nColorPicker = __decorate$5([\n    NotifyPropertyChanges\n], ColorPicker);\n\n/**\n * ColorPicker modules\n */\n\nvar __decorate$6 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nconst HIDE_CLEAR = 'e-clear-icon-hide';\nconst TEXTBOX_FOCUS = 'e-input-focus';\nconst containerAttr = ['title', 'style', 'class'];\n/**\n * Represents the TextBox component that allows the user to enter the values based on it's type.\n * ```html\n * <input name='images' id='textbox'/>\n * ```\n * ```typescript\n * <script>\n *   var textboxObj = new TextBox();\n *   textboxObj.appendTo('#textbox');\n * </script>\n * ```\n */\nlet TextBox = class TextBox extends Component {\n    constructor(options, element) {\n        super(options, element);\n        this.previousValue = null;\n        this.isAngular = false;\n        this.isHiddenInput = false;\n        this.isForm = false;\n        this.inputPreviousValue = null;\n        this.isVue = false;\n        this.textboxOptions = options;\n    }\n    /**\n     * Calls internally if any of the property value is changed.\n     * @private\n     */\n    onPropertyChanged(newProp, oldProp) {\n        for (let prop of Object.keys(newProp)) {\n            switch (prop) {\n                case 'floatLabelType':\n                    Input.removeFloating(this.textboxWrapper);\n                    Input.addFloating(this.respectiveElement, this.floatLabelType, this.placeholder);\n                    break;\n                case 'enabled':\n                    Input.setEnabled(this.enabled, this.respectiveElement, this.floatLabelType, this.textboxWrapper.container);\n                    this.bindClearEvent();\n                    break;\n                case 'width':\n                    Input.setWidth(newProp.width, this.textboxWrapper.container);\n                    break;\n                case 'value':\n                    let prevOnChange = this.isProtectedOnChange;\n                    this.isProtectedOnChange = true;\n                    if (!this.isBlank(this.value)) {\n                        this.value = this.value.toString();\n                    }\n                    this.isProtectedOnChange = prevOnChange;\n                    Input.setValue(this.value, this.respectiveElement, this.floatLabelType, this.showClearButton);\n                    if (this.isHiddenInput) {\n                        this.element.value = this.respectiveElement.value;\n                    }\n                    this.inputPreviousValue = this.respectiveElement.value;\n                    /* istanbul ignore next */\n                    if ((this.isAngular || this.isVue) && this.preventChange === true) {\n                        this.previousValue = this.isAngular ? this.value : this.previousValue;\n                        this.preventChange = false;\n                    }\n                    else if (isNullOrUndefined(this.isAngular) || !this.isAngular\n                        || (this.isAngular && !this.preventChange) || (this.isAngular && isNullOrUndefined(this.preventChange))) {\n                        this.raiseChangeEvent();\n                    }\n                    break;\n                case 'htmlAttributes':\n                    this.updateHTMLAttrToElement();\n                    this.updateHTMLAttrToWrapper();\n                    let attributes$$1 = this.element.attributes;\n                    this.checkAttributes(true);\n                    Input.validateInputType(this.textboxWrapper.container, this.element);\n                    break;\n                case 'readonly':\n                    Input.setReadonly(this.readonly, this.respectiveElement);\n                    break;\n                case 'type':\n                    if (this.respectiveElement.tagName !== 'TEXTAREA') {\n                        this.respectiveElement.setAttribute('type', this.type);\n                        Input.validateInputType(this.textboxWrapper.container, this.element);\n                        this.raiseChangeEvent();\n                    }\n                    break;\n                case 'showClearButton':\n                    if (this.respectiveElement.tagName !== 'TEXTAREA') {\n                        Input.setClearButton(this.showClearButton, this.respectiveElement, this.textboxWrapper);\n                        this.bindClearEvent();\n                    }\n                    break;\n                case 'enableRtl':\n                    Input.setEnableRtl(this.enableRtl, [this.textboxWrapper.container]);\n                    break;\n                case 'placeholder':\n                    Input.setPlaceholder(this.placeholder, this.respectiveElement);\n                    break;\n                case 'autocomplete':\n                    if (this.autocomplete !== 'on' && this.autocomplete !== '') {\n                        this.respectiveElement.autocomplete = this.autocomplete;\n                    }\n                    else {\n                        this.removeAttributes(['autocomplete']);\n                    }\n                    break;\n                case 'cssClass':\n                    this.updateCssClass(newProp.cssClass, oldProp.cssClass);\n                    break;\n                case 'locale':\n                    this.globalize = new Internationalization(this.locale);\n                    this.l10n.setLocale(this.locale);\n                    this.setProperties({ placeholder: this.l10n.getConstant('placeholder') }, true);\n                    Input.setPlaceholder(this.placeholder, this.respectiveElement);\n                    break;\n            }\n        }\n    }\n    /**\n     * Gets the component name\n     * @private\n     */\n    getModuleName() {\n        return 'textbox';\n    }\n    isBlank(str) {\n        return (!str || /^\\s*$/.test(str));\n    }\n    preRender() {\n        if (!(isBlazor() && this.isServerRendered)) {\n            this.cloneElement = this.element.cloneNode(true);\n            this.formElement = closest(this.element, 'form');\n            if (!isNullOrUndefined(this.formElement)) {\n                this.isForm = true;\n            }\n            /* istanbul ignore next */\n            if (this.element.tagName === 'EJS-TEXTBOX') {\n                let ejInstance = getValue('ej2_instances', this.element);\n                let inputElement = this.multiline ?\n                    this.createElement('textarea') :\n                    this.createElement('input');\n                let index = 0;\n                for (index; index < this.element.attributes.length; index++) {\n                    let attributeName = this.element.attributes[index].nodeName;\n                    if (attributeName !== 'id') {\n                        inputElement.setAttribute(attributeName, this.element.attributes[index].nodeValue);\n                        inputElement.innerHTML = this.element.innerHTML;\n                        if (attributeName === 'name') {\n                            this.element.removeAttribute('name');\n                        }\n                    }\n                }\n                this.element.appendChild(inputElement);\n                this.element = inputElement;\n                setValue('ej2_instances', ejInstance, this.element);\n            }\n            this.updateHTMLAttrToElement();\n            this.checkAttributes(false);\n            if (this.element.tagName !== 'TEXTAREA') {\n                this.element.setAttribute('type', this.type);\n            }\n            this.element.setAttribute('role', 'textbox');\n            this.globalize = new Internationalization(this.locale);\n            let localeText = { placeholder: this.placeholder };\n            this.l10n = new L10n('textbox', localeText, this.locale);\n            if (this.l10n.getConstant('placeholder') !== '') {\n                this.setProperties({ placeholder: this.placeholder || this.l10n.getConstant('placeholder') }, true);\n            }\n            if (!this.element.hasAttribute('id')) {\n                this.element.setAttribute('id', getUniqueID('textbox'));\n            }\n            if (!this.element.hasAttribute('name')) {\n                this.element.setAttribute('name', this.element.getAttribute('id'));\n            }\n            if (this.element.tagName === 'INPUT' && this.multiline) {\n                this.isHiddenInput = true;\n                this.textarea = this.createElement('textarea');\n                this.element.parentNode.insertBefore(this.textarea, this.element);\n                this.element.setAttribute('type', 'hidden');\n                this.textarea.setAttribute('name', this.element.getAttribute('name'));\n                this.element.removeAttribute('name');\n                this.textarea.setAttribute('role', this.element.getAttribute('role'));\n                this.element.removeAttribute('role');\n                let attribute = ['required', 'minlength', 'maxlength'];\n                for (let i = 0; i < attribute.length; i++) {\n                    if (this.element.hasAttribute(attribute[i])) {\n                        let attr = this.element.getAttribute(attribute[i]);\n                        this.textarea.setAttribute(attribute[i], attr);\n                        this.element.removeAttribute(attribute[i]);\n                    }\n                }\n            }\n        }\n    }\n    checkAttributes(isDynamic) {\n        let attrs = isDynamic ? isNullOrUndefined(this.htmlAttributes) ? [] : Object.keys(this.htmlAttributes) :\n            ['placeholder', 'disabled', 'value', 'readonly', 'type', 'autocomplete'];\n        for (let key of attrs) {\n            if (!isNullOrUndefined(this.element.getAttribute(key))) {\n                switch (key) {\n                    case 'disabled':\n                        // tslint:disable-next-line\n                        if ((isNullOrUndefined(this.textboxOptions) || (this.textboxOptions['enabled'] === undefined)) || isDynamic) {\n                            let enabled = this.element.getAttribute(key) === 'disabled' || this.element.getAttribute(key) === '' ||\n                                this.element.getAttribute(key) === 'true' ? false : true;\n                            this.setProperties({ enabled: enabled }, !isDynamic);\n                        }\n                        break;\n                    case 'readonly':\n                        // tslint:disable-next-line\n                        if ((isNullOrUndefined(this.textboxOptions) || (this.textboxOptions['readonly'] === undefined)) || isDynamic) {\n                            let readonly = this.element.getAttribute(key) === 'readonly' || this.element.getAttribute(key) === ''\n                                || this.element.getAttribute(key) === 'true' ? true : false;\n                            this.setProperties({ readonly: readonly }, !isDynamic);\n                        }\n                        break;\n                    case 'placeholder':\n                        // tslint:disable-next-line\n                        if ((isNullOrUndefined(this.textboxOptions) || (this.textboxOptions['placeholder'] === undefined)) || isDynamic) {\n                            this.setProperties({ placeholder: this.element.placeholder }, !isDynamic);\n                        }\n                        break;\n                    case 'autocomplete':\n                        // tslint:disable-next-line\n                        if ((isNullOrUndefined(this.textboxOptions) || (this.textboxOptions['autocomplete'] === undefined)) || isDynamic) {\n                            let autoCompleteTxt = this.element.autocomplete === 'off' ? 'off' : 'on';\n                            this.setProperties({ autocomplete: autoCompleteTxt }, !isDynamic);\n                        }\n                        break;\n                    case 'value':\n                        // tslint:disable-next-line\n                        if ((isNullOrUndefined(this.textboxOptions) || (this.textboxOptions['value'] === undefined)) || isDynamic) {\n                            this.setProperties({ value: this.element.value }, !isDynamic);\n                        }\n                        break;\n                    case 'type':\n                        // tslint:disable-next-line\n                        if ((isNullOrUndefined(this.textboxOptions) || (this.textboxOptions['type'] === undefined)) || isDynamic) {\n                            this.setProperties({ type: this.element.type }, !isDynamic);\n                        }\n                        break;\n                }\n            }\n        }\n    }\n    /**\n     * To Initialize the control rendering\n     * @private\n     */\n    render() {\n        let updatedCssClassValue = this.cssClass;\n        if (!isNullOrUndefined(this.cssClass) && this.cssClass !== '') {\n            updatedCssClassValue = this.getInputValidClassList(this.cssClass);\n        }\n        if (!(isBlazor() && this.isServerRendered)) {\n            this.respectiveElement = (this.isHiddenInput) ? this.textarea : this.element;\n            this.textboxWrapper = Input.createInput({\n                element: this.respectiveElement,\n                floatLabelType: this.floatLabelType,\n                properties: {\n                    enabled: this.enabled,\n                    enableRtl: this.enableRtl,\n                    cssClass: updatedCssClassValue,\n                    readonly: this.readonly,\n                    placeholder: this.placeholder,\n                    showClearButton: this.showClearButton\n                }\n            });\n            this.updateHTMLAttrToWrapper();\n            if (this.isHiddenInput) {\n                this.respectiveElement.parentNode.insertBefore(this.element, this.respectiveElement);\n            }\n        }\n        else {\n            this.respectiveElement = this.element;\n            this.textboxWrapper = { container: this.element.parentElement };\n            if (this.showClearButton && !this.multiline) {\n                this.textboxWrapper.clearButton = this.textboxWrapper.container.querySelector('.e-clear-icon');\n                Input.wireClearBtnEvents(this.respectiveElement, this.textboxWrapper.clearButton, this.textboxWrapper.container);\n            }\n            if (this.floatLabelType === 'Auto') {\n                Input.wireFloatingEvents(this.respectiveElement);\n            }\n            // tslint:disable-next-line\n            Input.bindInitialEvent({ element: this.respectiveElement, buttons: null, customTag: null, floatLabelType: this.floatLabelType, properties: this.properties });\n        }\n        this.wireEvents();\n        if (!isNullOrUndefined(this.value)) {\n            Input.setValue(this.value, this.respectiveElement, this.floatLabelType, this.showClearButton);\n            if (this.isHiddenInput) {\n                this.element.value = this.respectiveElement.value;\n            }\n        }\n        if (!isNullOrUndefined(this.value)) {\n            this.initialValue = this.value;\n            this.setInitialValue();\n        }\n        if (this.autocomplete !== 'on' && this.autocomplete !== '') {\n            this.respectiveElement.autocomplete = this.autocomplete;\n            // tslint:disable-next-line\n        }\n        else if (!isNullOrUndefined(this.textboxOptions) && (this.textboxOptions['autocomplete'] !== undefined)) {\n            this.removeAttributes(['autocomplete']);\n        }\n        this.previousValue = this.value;\n        this.inputPreviousValue = this.value;\n        this.respectiveElement.defaultValue = this.respectiveElement.value;\n        Input.setWidth(this.width, this.textboxWrapper.container);\n        this.renderComplete();\n    }\n    updateHTMLAttrToWrapper() {\n        if (!isNullOrUndefined(this.htmlAttributes)) {\n            for (let key of Object.keys(this.htmlAttributes)) {\n                if (containerAttr.indexOf(key) > -1) {\n                    if (key === 'class') {\n                        let updatedClassValues = this.getInputValidClassList(this.htmlAttributes[key]);\n                        if (updatedClassValues !== '') {\n                            addClass([this.textboxWrapper.container], updatedClassValues.split(' '));\n                        }\n                    }\n                    else if (key === 'style') {\n                        let setStyle = this.textboxWrapper.container.getAttribute(key);\n                        setStyle = !isNullOrUndefined(setStyle) ? (setStyle + this.htmlAttributes[key]) :\n                            this.htmlAttributes[key];\n                        this.textboxWrapper.container.setAttribute(key, setStyle);\n                    }\n                    else {\n                        this.textboxWrapper.container.setAttribute(key, this.htmlAttributes[key]);\n                    }\n                }\n            }\n        }\n    }\n    updateHTMLAttrToElement() {\n        if (!isNullOrUndefined(this.htmlAttributes)) {\n            for (let key of Object.keys(this.htmlAttributes)) {\n                if (containerAttr.indexOf(key) < 0) {\n                    this.element.setAttribute(key, this.htmlAttributes[key]);\n                }\n            }\n        }\n    }\n    updateCssClass(newClass, oldClass) {\n        Input.setCssClass(this.getInputValidClassList(newClass), [this.textboxWrapper.container], this.getInputValidClassList(oldClass));\n    }\n    getInputValidClassList(inputClassName) {\n        let result = inputClassName;\n        if (!isNullOrUndefined(inputClassName) && inputClassName !== '') {\n            result = (inputClassName.replace(/\\s+/g, ' ')).trim();\n        }\n        return result;\n    }\n    setInitialValue() {\n        if (!this.isAngular) {\n            this.respectiveElement.setAttribute('value', this.initialValue);\n        }\n    }\n    wireEvents() {\n        EventHandler.add(this.respectiveElement, 'focus', this.focusHandler, this);\n        EventHandler.add(this.respectiveElement, 'blur', this.focusOutHandler, this);\n        EventHandler.add(this.respectiveElement, 'input', this.inputHandler, this);\n        EventHandler.add(this.respectiveElement, 'change', this.changeHandler, this);\n        if (this.isForm) {\n            EventHandler.add(this.formElement, 'reset', this.resetForm, this);\n        }\n        this.bindClearEvent();\n        if (!isNullOrUndefined(this.textboxWrapper.container.querySelector('.e-float-text')) && this.floatLabelType === 'Auto'\n            && this.textboxWrapper.container.classList.contains('e-autofill') &&\n            this.textboxWrapper.container.classList.contains('e-outline')) {\n            EventHandler.add((this.textboxWrapper.container.querySelector('.e-float-text')), 'animationstart', this.animationHandler, this);\n        }\n    }\n    animationHandler() {\n        this.textboxWrapper.container.classList.add('e-valid-input');\n        let label = this.textboxWrapper.container.querySelector('.e-float-text');\n        if (!isNullOrUndefined(label)) {\n            label.classList.add('e-label-top');\n            if (label.classList.contains('e-label-bottom')) {\n                label.classList.remove('e-label-bottom');\n            }\n        }\n    }\n    resetValue(value) {\n        let prevOnChange = this.isProtectedOnChange;\n        this.isProtectedOnChange = true;\n        this.value = value;\n        this.isProtectedOnChange = prevOnChange;\n    }\n    resetForm() {\n        if (this.isAngular) {\n            this.resetValue('');\n        }\n        else {\n            this.resetValue(this.initialValue);\n        }\n        if (!isNullOrUndefined(this.textboxWrapper)) {\n            let label = this.textboxWrapper.container.querySelector('.e-float-text');\n            if (!isNullOrUndefined(label)) {\n                if ((isNullOrUndefined(this.initialValue) || this.initialValue === '')) {\n                    label.classList.add('e-label-bottom');\n                    label.classList.remove('e-label-top');\n                }\n                else if (this.initialValue !== '') {\n                    label.classList.add('e-label-top');\n                    label.classList.remove('e-label-bottom');\n                }\n            }\n        }\n    }\n    focusHandler(args) {\n        let eventArgs = {\n            container: this.textboxWrapper.container,\n            event: args,\n            value: this.value\n        };\n        this.trigger('focus', eventArgs);\n    }\n    focusOutHandler(args) {\n        if (!(this.previousValue === null && this.value === null && this.respectiveElement.value === '') &&\n            (this.previousValue !== this.respectiveElement.value)) {\n            this.raiseChangeEvent(args, true);\n        }\n        let eventArgs = {\n            container: this.textboxWrapper.container,\n            event: args,\n            value: this.value\n        };\n        this.trigger('blur', eventArgs);\n    }\n    inputHandler(args) {\n        // tslint:disable-next-line\n        let textboxObj = this;\n        let eventArgs = {\n            event: args,\n            value: this.respectiveElement.value,\n            previousValue: this.inputPreviousValue,\n            container: this.textboxWrapper.container\n        };\n        this.inputPreviousValue = this.respectiveElement.value;\n        /* istanbul ignore next */\n        if (this.isAngular) {\n            textboxObj.localChange({ value: this.respectiveElement.value });\n            this.preventChange = true;\n        }\n        if (this.isVue) {\n            this.preventChange = true;\n        }\n        this.trigger('input', eventArgs);\n        args.stopPropagation();\n    }\n    changeHandler(args) {\n        this.setProperties({ value: this.respectiveElement.value }, true);\n        this.raiseChangeEvent(args, true);\n        args.stopPropagation();\n    }\n    raiseChangeEvent(event, interaction) {\n        let eventArgs = {\n            event: event,\n            value: this.value,\n            previousValue: this.previousValue,\n            container: this.textboxWrapper.container,\n            isInteraction: interaction ? interaction : false,\n            isInteracted: interaction ? interaction : false\n        };\n        this.preventChange = false;\n        this.trigger('change', eventArgs);\n        this.previousValue = this.value;\n    }\n    bindClearEvent() {\n        if (this.showClearButton && this.respectiveElement.tagName !== 'TEXTAREA') {\n            if (this.enabled) {\n                EventHandler.add(this.textboxWrapper.clearButton, 'mousedown touchstart', this.resetInputHandler, this);\n            }\n            else {\n                EventHandler.remove(this.textboxWrapper.clearButton, 'mousedown touchstart', this.resetInputHandler);\n            }\n        }\n    }\n    resetInputHandler(event) {\n        event.preventDefault();\n        if (!(this.textboxWrapper.clearButton.classList.contains(HIDE_CLEAR))) {\n            let previousValue = this.value;\n            Input.setValue('', this.respectiveElement, this.floatLabelType, this.showClearButton);\n            if (this.isHiddenInput) {\n                this.element.value = this.respectiveElement.value;\n            }\n            this.setProperties({ value: this.respectiveElement.value }, true);\n            let eventArgs = {\n                event: event,\n                value: this.respectiveElement.value,\n                previousValue: this.inputPreviousValue,\n                container: this.textboxWrapper.container\n            };\n            this.trigger('input', eventArgs);\n            this.inputPreviousValue = this.respectiveElement.value;\n            this.raiseChangeEvent(event, true);\n        }\n    }\n    unWireEvents() {\n        EventHandler.remove(this.respectiveElement, 'focus', this.focusHandler);\n        EventHandler.remove(this.respectiveElement, 'blur', this.focusOutHandler);\n        EventHandler.remove(this.respectiveElement, 'input', this.inputHandler);\n        EventHandler.remove(this.respectiveElement, 'change', this.changeHandler);\n        if (this.isForm) {\n            EventHandler.remove(this.formElement, 'reset', this.resetForm);\n        }\n        if (!isNullOrUndefined(this.textboxWrapper.container.querySelector('.e-float-text')) && this.floatLabelType === 'Auto'\n            && this.textboxWrapper.container.classList.contains('e-outline') &&\n            this.textboxWrapper.container.classList.contains('e-autofill')) {\n            EventHandler.remove((this.textboxWrapper.container.querySelector('.e-float-text')), 'animationstart', this.animationHandler);\n        }\n    }\n    /**\n     * Removes the component from the DOM and detaches all its related event handlers.\n     * Also, it maintains the initial TextBox element from the DOM.\n     * @method destroy\n     * @return {void}\n     */\n    destroy() {\n        this.unWireEvents();\n        if (!(isBlazor() && this.isServerRendered)) {\n            if (this.element.tagName === 'INPUT' && this.multiline) {\n                detach(this.textboxWrapper.container.getElementsByTagName('textarea')[0]);\n                this.respectiveElement = this.element;\n                this.element.removeAttribute('type');\n            }\n            this.respectiveElement.value = this.respectiveElement.defaultValue;\n            this.respectiveElement.classList.remove('e-input');\n            this.removeAttributes(['aria-placeholder', 'aria-disabled', 'aria-readonly', 'aria-labelledby']);\n            if (!isNullOrUndefined(this.textboxWrapper)) {\n                this.textboxWrapper.container.insertAdjacentElement('afterend', this.respectiveElement);\n                detach(this.textboxWrapper.container);\n            }\n            this.textboxWrapper = null;\n            super.destroy();\n        }\n        else {\n            this.textboxWrapper = null;\n        }\n    }\n    /**\n     * Adding the icons to the TextBox component.\n     * @param { string } position - Specify the icon placement on the TextBox. Possible values are append and prepend.\n     * @param { string | string[] } iconClass - Icon classes which are need to add to the span element which is going to created.\n     * Span element acts as icon or button element for TextBox.\n     * @return {void}\n     */\n    addIcon(position, icons) {\n        Input.addIcon(position, icons, this.textboxWrapper.container, this.respectiveElement, this.createElement);\n    }\n    /**\n     * Gets the properties to be maintained in the persisted state.\n     * @return {string}\n     */\n    getPersistData() {\n        let keyEntity = ['value'];\n        return this.addOnPersist(keyEntity);\n    }\n    /**\n     * Adding the multiple attributes as key-value pair to the TextBox element.\n     * @param { { [key: string]: string } } attributes - Specifies the attributes to be add to TextBox element.\n     * @return {void}\n     */\n    addAttributes(attributes$$1) {\n        for (let key of Object.keys(attributes$$1)) {\n            if (key === 'disabled') {\n                this.setProperties({ enabled: false }, true);\n                Input.setEnabled(this.enabled, this.respectiveElement, this.floatLabelType, this.textboxWrapper.container);\n            }\n            else if (key === 'readonly') {\n                this.setProperties({ readonly: true }, true);\n                Input.setReadonly(this.readonly, this.respectiveElement);\n            }\n            else if (key === 'class') {\n                this.respectiveElement.classList.add(attributes$$1[key]);\n            }\n            else if (key === 'placeholder') {\n                this.setProperties({ placeholder: attributes$$1[key] }, true);\n                Input.setPlaceholder(this.placeholder, this.respectiveElement);\n            }\n            else if (key === 'rows' && this.respectiveElement.tagName === 'TEXTAREA') {\n                this.respectiveElement.setAttribute(key, attributes$$1[key]);\n            }\n            else {\n                this.respectiveElement.setAttribute(key, attributes$$1[key]);\n            }\n        }\n    }\n    /**\n     * Removing the multiple attributes as key-value pair to the TextBox element.\n     * @param { string[] } attributes - Specifies the attributes name to be removed from TextBox element.\n     * @return {void}\n     */\n    removeAttributes(attributes$$1) {\n        for (let key of attributes$$1) {\n            if (key === 'disabled') {\n                this.setProperties({ enabled: true }, true);\n                Input.setEnabled(this.enabled, this.respectiveElement, this.floatLabelType, this.textboxWrapper.container);\n            }\n            else if (key === 'readonly') {\n                this.setProperties({ readonly: false }, true);\n                Input.setReadonly(this.readonly, this.respectiveElement);\n            }\n            else if (key === 'placeholder') {\n                this.setProperties({ placeholder: null }, true);\n                Input.setPlaceholder(this.placeholder, this.respectiveElement);\n            }\n            else {\n                this.respectiveElement.removeAttribute(key);\n            }\n        }\n    }\n    /**\n     * Sets the focus to widget for interaction.\n     * @returns void\n     */\n    focusIn() {\n        if (document.activeElement !== this.respectiveElement && this.enabled) {\n            this.respectiveElement.focus();\n            if (this.textboxWrapper.container.classList.contains('e-input-group')\n                || this.textboxWrapper.container.classList.contains('e-outline')\n                || this.textboxWrapper.container.classList.contains('e-filled')) {\n                addClass([this.textboxWrapper.container], [TEXTBOX_FOCUS]);\n            }\n        }\n    }\n    /**\n     * Remove the focus from widget, if the widget is in focus state.\n     * @returns void\n     */\n    focusOut() {\n        if (document.activeElement === this.respectiveElement && this.enabled) {\n            this.respectiveElement.blur();\n            if (this.textboxWrapper.container.classList.contains('e-input-group')\n                || this.textboxWrapper.container.classList.contains('e-outline')\n                || this.textboxWrapper.container.classList.contains('e-filled')) {\n                removeClass([this.textboxWrapper.container], [TEXTBOX_FOCUS]);\n            }\n        }\n    }\n};\n__decorate$6([\n    Property('text')\n], TextBox.prototype, \"type\", void 0);\n__decorate$6([\n    Property(false)\n], TextBox.prototype, \"readonly\", void 0);\n__decorate$6([\n    Property(null)\n], TextBox.prototype, \"value\", void 0);\n__decorate$6([\n    Property('Never')\n], TextBox.prototype, \"floatLabelType\", void 0);\n__decorate$6([\n    Property('')\n], TextBox.prototype, \"cssClass\", void 0);\n__decorate$6([\n    Property(null)\n], TextBox.prototype, \"placeholder\", void 0);\n__decorate$6([\n    Property('on')\n], TextBox.prototype, \"autocomplete\", void 0);\n__decorate$6([\n    Property({})\n], TextBox.prototype, \"htmlAttributes\", void 0);\n__decorate$6([\n    Property(false)\n], TextBox.prototype, \"multiline\", void 0);\n__decorate$6([\n    Property(true)\n], TextBox.prototype, \"enabled\", void 0);\n__decorate$6([\n    Property(false)\n], TextBox.prototype, \"showClearButton\", void 0);\n__decorate$6([\n    Property(false)\n], TextBox.prototype, \"enablePersistence\", void 0);\n__decorate$6([\n    Property(null)\n], TextBox.prototype, \"width\", void 0);\n__decorate$6([\n    Event()\n], TextBox.prototype, \"created\", void 0);\n__decorate$6([\n    Event()\n], TextBox.prototype, \"destroyed\", void 0);\n__decorate$6([\n    Event()\n], TextBox.prototype, \"change\", void 0);\n__decorate$6([\n    Event()\n], TextBox.prototype, \"blur\", void 0);\n__decorate$6([\n    Event()\n], TextBox.prototype, \"focus\", void 0);\n__decorate$6([\n    Event()\n], TextBox.prototype, \"input\", void 0);\nTextBox = __decorate$6([\n    NotifyPropertyChanges\n], TextBox);\n\n/**\n * Uploader modules\n */\n\n/**\n * NumericTextBox all modules\n */\n\nexport { NumericTextBox, regularExpressions, createMask, applyMask, wireEvents, unwireEvents, bindClearEvent, unstrippedValue, strippedValue, maskInputFocusHandler, maskInputBlurHandler, maskInputDropHandler, mobileRemoveFunction, setMaskValue, setElementValue, maskInput, getVal, getMaskedVal, MaskUndo, MaskedTextBox, Input, TicksData, ColorRangeData, LimitData, TooltipData, Slider, regex, ErrorOption, FormValidator, FilesProp, ButtonsProps, AsyncSettings, Uploader, ColorPicker, TextBox };\n//# sourceMappingURL=ej2-inputs.es2015.js.map\n","import { Animation, Base, ChildProperty, Complex, Component, Draggable, Event, EventHandler, NotifyPropertyChanges, Property, SanitizeHtmlHelper, Touch, addClass, append, attributes, blazorTemplates, closest, compareElementParent, compile, debounce, detach, extend, formatUnit, getComponent, getUniqueID, getValue, isBlazor, isNullOrUndefined, isVisible, merge, prepend, remove, removeClass, resetBlazorTemplate, rippleEffect, updateBlazorTemplate } from '@syncfusion/ej2-base';\nimport { DataManager, Query } from '@syncfusion/ej2-data';\nimport { createCheckBox } from '@syncfusion/ej2-buttons';\n\nlet cssClass = {\n    li: 'e-list-item',\n    ul: 'e-list-parent e-ul',\n    group: 'e-list-group-item',\n    icon: 'e-list-icon',\n    text: 'e-list-text',\n    check: 'e-list-check',\n    checked: 'e-checked',\n    selected: 'e-selected',\n    expanded: 'e-expanded',\n    textContent: 'e-text-content',\n    hasChild: 'e-has-child',\n    level: 'e-level',\n    url: 'e-list-url',\n    collapsible: 'e-icon-collapsible',\n    disabled: 'e-disabled',\n    image: 'e-list-img',\n    iconWrapper: 'e-icon-wrapper',\n    anchorWrap: 'e-anchor-wrap',\n    navigable: 'e-navigable'\n};\n/**\n * Base List Generator\n */\nvar ListBase;\n(function (ListBase) {\n    /**\n     * Default mapped fields.\n     */\n    ListBase.defaultMappedFields = {\n        id: 'id',\n        text: 'text',\n        url: 'url',\n        value: 'value',\n        isChecked: 'isChecked',\n        enabled: 'enabled',\n        expanded: 'expanded',\n        selected: 'selected',\n        iconCss: 'iconCss',\n        child: 'child',\n        isVisible: 'isVisible',\n        hasChildren: 'hasChildren',\n        tooltip: 'tooltip',\n        htmlAttributes: 'htmlAttributes',\n        urlAttributes: 'urlAttributes',\n        imageAttributes: 'imageAttributes',\n        imageUrl: 'imageUrl',\n        groupBy: null\n    };\n    let defaultAriaAttributes = {\n        level: 1,\n        listRole: 'presentation',\n        itemRole: 'presentation',\n        groupItemRole: 'group',\n        itemText: 'list-item',\n        wrapperRole: 'presentation'\n    };\n    let defaultListBaseOptions = {\n        showCheckBox: false,\n        showIcon: false,\n        enableHtmlSanitizer: false,\n        expandCollapse: false,\n        fields: ListBase.defaultMappedFields,\n        ariaAttributes: defaultAriaAttributes,\n        listClass: '',\n        itemClass: '',\n        processSubChild: false,\n        sortOrder: 'None',\n        template: null,\n        groupTemplate: null,\n        headerTemplate: null,\n        expandIconClass: 'e-icon-collapsible',\n        moduleName: 'list',\n        expandIconPosition: 'Right',\n        itemNavigable: false\n    };\n    /**\n     * Function helps to created and return the UL Li element based on your data.\n     * @param  {{[key:string]:Object}[]|string[]} dataSource - Specifies an array of JSON or String data.\n     * @param  {ListBaseOptions} options? - Specifies the list options that need to provide.\n     */\n    function createList(createElement, dataSource, \n    // tslint:disable-next-line\n    options, isSingleLevel, componentInstance) {\n        let curOpt = extend({}, defaultListBaseOptions, options);\n        let ariaAttributes = extend({}, defaultAriaAttributes, curOpt.ariaAttributes);\n        let type = typeofData(dataSource).typeof;\n        if (type === 'string' || type === 'number') {\n            return createListFromArray(createElement, dataSource, isSingleLevel, options, componentInstance);\n        }\n        else {\n            // tslint:disable-next-line\n            return createListFromJson(createElement, dataSource, options, \n            // tslint:disable-next-line\n            ariaAttributes.level, isSingleLevel, componentInstance);\n        }\n    }\n    ListBase.createList = createList;\n    /**\n     * Function helps to created an element list based on string array input .\n     * @param  {string[]} dataSource - Specifies an array of string data\n     */\n    function createListFromArray(createElement, dataSource, \n    // tslint:disable-next-line\n    isSingleLevel, options, componentInstance) {\n        let subChild = createListItemFromArray(createElement, dataSource, isSingleLevel, options, componentInstance);\n        return generateUL(createElement, subChild, null, options);\n    }\n    ListBase.createListFromArray = createListFromArray;\n    /**\n     * Function helps to created an element list based on string array input .\n     * @param  {string[]} dataSource - Specifies an array of string data\n     */\n    function createListItemFromArray(createElement, dataSource, \n    // tslint:disable-next-line\n    isSingleLevel, options, componentInstance) {\n        let subChild = [];\n        let curOpt = extend({}, defaultListBaseOptions, options);\n        cssClass = getModuleClass(curOpt.moduleName);\n        let id = generateId(); // generate id for drop-down-list option.\n        for (let i = 0; i < dataSource.length; i++) {\n            if (isNullOrUndefined(dataSource[i])) {\n                continue;\n            }\n            let li;\n            if (curOpt.itemCreating && typeof curOpt.itemCreating === 'function') {\n                let curData = {\n                    dataSource: dataSource,\n                    curData: dataSource[i],\n                    text: dataSource[i],\n                    options: curOpt\n                };\n                curOpt.itemCreating(curData);\n            }\n            if (isSingleLevel) {\n                li = generateSingleLevelLI(createElement, dataSource[i], undefined, null, null, [], null, id, i, options);\n            }\n            else {\n                li = generateLI(createElement, dataSource[i], undefined, null, null, options, componentInstance);\n            }\n            if (curOpt.itemCreated && typeof curOpt.itemCreated === 'function') {\n                let curData = {\n                    dataSource: dataSource,\n                    curData: dataSource[i],\n                    text: dataSource[i],\n                    item: li,\n                    options: curOpt\n                };\n                curOpt.itemCreated(curData);\n            }\n            subChild.push(li);\n        }\n        return subChild;\n    }\n    ListBase.createListItemFromArray = createListItemFromArray;\n    /**\n     * Function helps to created an element list based on array of JSON input .\n     * @param  {{[key:string]:Object}[]} dataSource - Specifies an array of JSON data.\n     * @param  {ListBaseOptions} options? - Specifies the list options that need to provide.\n     */\n    // tslint:disable-next-line:max-func-body-length\n    // tslint:disable-next-line\n    function createListItemFromJson(createElement, dataSource, \n    // tslint:disable-next-line\n    options, level, isSingleLevel, componentInstance) {\n        let curOpt = extend({}, defaultListBaseOptions, options);\n        cssClass = getModuleClass(curOpt.moduleName);\n        let fields = extend({}, ListBase.defaultMappedFields, curOpt.fields);\n        let ariaAttributes = extend({}, defaultAriaAttributes, curOpt.ariaAttributes);\n        let id;\n        let checkboxElement = [];\n        if (level) {\n            ariaAttributes.level = level;\n        }\n        let child = [];\n        let li;\n        let anchorElement;\n        if (dataSource && dataSource.length && !isNullOrUndefined(typeofData(dataSource).item) &&\n            !typeofData(dataSource).item.hasOwnProperty(fields.id)) {\n            id = generateId(); // generate id for drop-down-list option.\n        }\n        for (let i = 0; i < dataSource.length; i++) {\n            let fieldData = getFieldValues(dataSource[i], fields);\n            if (isNullOrUndefined(dataSource[i])) {\n                continue;\n            }\n            if (curOpt.itemCreating && typeof curOpt.itemCreating === 'function') {\n                let curData = {\n                    dataSource: dataSource,\n                    curData: dataSource[i],\n                    text: fieldData[fields.text],\n                    options: curOpt,\n                    fields: fields\n                };\n                curOpt.itemCreating(curData);\n            }\n            let curItem = dataSource[i];\n            if (curOpt.itemCreating && typeof curOpt.itemCreating === 'function') {\n                fieldData = getFieldValues(dataSource[i], fields);\n            }\n            if (fieldData.hasOwnProperty(fields.id) && !isNullOrUndefined(fieldData[fields.id])) {\n                id = fieldData[fields.id];\n            }\n            let innerEle = [];\n            if (curOpt.showCheckBox) {\n                if (curOpt.itemNavigable && (fieldData[fields.url] || fieldData[fields.urlAttributes])) {\n                    checkboxElement.push(createElement('input', { className: cssClass.check, attrs: { type: 'checkbox' } }));\n                }\n                else {\n                    innerEle.push(createElement('input', { className: cssClass.check, attrs: { type: 'checkbox' } }));\n                }\n            }\n            if (isSingleLevel === true) {\n                if (curOpt.showIcon && fieldData.hasOwnProperty(fields.iconCss) && !isNullOrUndefined(fieldData[fields.iconCss])) {\n                    innerEle.push(createElement('span', { className: cssClass.icon + ' ' + fieldData[fields.iconCss] }));\n                }\n                li = generateSingleLevelLI(createElement, curItem, fieldData, fields, curOpt.itemClass, innerEle, (curItem.hasOwnProperty('isHeader') &&\n                    curItem.isHeader) ? true : false, id, i, options);\n                anchorElement = li.querySelector('.' + cssClass.anchorWrap);\n                if (curOpt.itemNavigable && checkboxElement.length) {\n                    prepend(checkboxElement, li.firstElementChild);\n                }\n            }\n            else {\n                li = generateLI(createElement, curItem, fieldData, fields, curOpt.itemClass, options, componentInstance);\n                li.classList.add(cssClass.level + '-' + ariaAttributes.level);\n                li.setAttribute('aria-level', ariaAttributes.level.toString());\n                anchorElement = li.querySelector('.' + cssClass.anchorWrap);\n                if (fieldData.hasOwnProperty(fields.tooltip)) {\n                    li.setAttribute('title', fieldData[fields.tooltip]);\n                }\n                if (fieldData.hasOwnProperty(fields.htmlAttributes) && fieldData[fields.htmlAttributes]) {\n                    setAttribute(li, fieldData[fields.htmlAttributes]);\n                }\n                if (fieldData.hasOwnProperty(fields.enabled) && fieldData[fields.enabled] === false) {\n                    li.classList.add(cssClass.disabled);\n                }\n                if (fieldData.hasOwnProperty(fields.isVisible) && fieldData[fields.isVisible] === false) {\n                    li.style.display = 'none';\n                }\n                if (fieldData.hasOwnProperty(fields.imageUrl) && !isNullOrUndefined(fieldData[fields.imageUrl])\n                    && !curOpt.template) {\n                    let attr = { src: fieldData[fields.imageUrl] };\n                    merge(attr, fieldData[fields.imageAttributes]);\n                    let imageElemnt = createElement('img', { className: cssClass.image, attrs: attr });\n                    if (anchorElement) {\n                        anchorElement.insertAdjacentElement('afterbegin', imageElemnt);\n                    }\n                    else {\n                        prepend([imageElemnt], li.firstElementChild);\n                    }\n                }\n                if (curOpt.showIcon && fieldData.hasOwnProperty(fields.iconCss) &&\n                    !isNullOrUndefined(fieldData[fields.iconCss]) && !curOpt.template) {\n                    let iconElement;\n                    iconElement = createElement('div', { className: cssClass.icon + ' ' + fieldData[fields.iconCss] });\n                    if (anchorElement) {\n                        anchorElement.insertAdjacentElement('afterbegin', iconElement);\n                    }\n                    else {\n                        prepend([iconElement], li.firstElementChild);\n                    }\n                }\n                if (innerEle.length) {\n                    prepend(innerEle, li.firstElementChild);\n                }\n                if (curOpt.itemNavigable && checkboxElement.length) {\n                    prepend(checkboxElement, li.firstElementChild);\n                }\n                processSubChild(createElement, fieldData, fields, dataSource, curOpt, li, ariaAttributes.level);\n            }\n            if (anchorElement) {\n                addClass([li], [cssClass.navigable]);\n            }\n            if (curOpt.itemCreated && typeof curOpt.itemCreated === 'function') {\n                let curData = {\n                    dataSource: dataSource,\n                    curData: dataSource[i],\n                    text: fieldData[fields.text],\n                    item: li,\n                    options: curOpt,\n                    fields: fields\n                };\n                curOpt.itemCreated(curData);\n            }\n            checkboxElement = [];\n            child.push(li);\n        }\n        return child;\n    }\n    ListBase.createListItemFromJson = createListItemFromJson;\n    /**\n     * Function helps to created an element list based on array of JSON input .\n     * @param  {{[key:string]:Object}[]} dataSource - Specifies an array of JSON data.\n     * @param  {ListBaseOptions} options? - Specifies the list options that need to provide.\n     */\n    function createListFromJson(createElement, dataSource, \n    // tslint:disable-next-line\n    options, level, isSingleLevel, componentInstance) {\n        let curOpt = extend({}, defaultListBaseOptions, options);\n        let li = createListItemFromJson(createElement, dataSource, options, level, isSingleLevel, componentInstance);\n        return generateUL(createElement, li, curOpt.listClass, options);\n    }\n    ListBase.createListFromJson = createListFromJson;\n    /**\n     * Return the next or previous visible element.\n     * @param  {Element[]|NodeList} elementArray - An element array to find next or previous element.\n     * @param  {Element} li - An element to find next or previous after this element.\n     * @param  {boolean} isPrevious? - Specify when the need get previous element from array.\n     */\n    function getSiblingLI(elementArray, element, isPrevious) {\n        cssClass = getModuleClass(defaultListBaseOptions.moduleName);\n        if (!elementArray || !elementArray.length) {\n            return void 0;\n        }\n        let siblingLI;\n        let liIndex;\n        let liCollections = Array.prototype.slice.call(elementArray);\n        if (element) {\n            liIndex = indexOf(element, liCollections);\n        }\n        else {\n            liIndex = (isPrevious === true ? liCollections.length : -1);\n        }\n        siblingLI = liCollections[liIndex + (isPrevious === true ? -1 : 1)];\n        while (siblingLI && (!isVisible(siblingLI) || siblingLI.classList.contains(cssClass.disabled))) {\n            liIndex = liIndex + (isPrevious === true ? -1 : 1);\n            siblingLI = liCollections[liIndex];\n        }\n        return siblingLI;\n    }\n    ListBase.getSiblingLI = getSiblingLI;\n    /**\n     * Return the index of the li element\n     * @param  {Element} item - An element to find next or previous after this element.\n     * @param  {Element[]|NodeList} elementArray - An element array to find index of given li.\n     */\n    function indexOf(item, elementArray) {\n        if (!elementArray || !item) {\n            return void 0;\n        }\n        else {\n            let liCollections = elementArray;\n            liCollections = Array.prototype.slice.call(elementArray);\n            return liCollections.indexOf(item);\n        }\n    }\n    ListBase.indexOf = indexOf;\n    /**\n     * Returns the grouped data from given dataSource.\n     * @param  {{[key:string]:Object}[]} dataSource - The JSON data which is necessary to process.\n     * @param  {FieldsMapping} fields - Fields that are mapped from the data source.\n     * @param  {SortOrder='None'} sortOrder- Specifies final result sort order.\n     */\n    function groupDataSource(dataSource, fields, sortOrder = 'None') {\n        let curFields = extend({}, ListBase.defaultMappedFields, fields);\n        let cusQuery = new Query().group(curFields.groupBy);\n        // need to remove once sorting issues fixed in DataManager\n        cusQuery = addSorting(sortOrder, 'key', cusQuery);\n        let ds = getDataSource(dataSource, cusQuery);\n        dataSource = [];\n        for (let j = 0; j < ds.length; j++) {\n            let itemObj = ds[j].items;\n            let grpItem = {};\n            let hdr = 'isHeader';\n            grpItem[curFields.text] = ds[j].key;\n            grpItem[hdr] = true;\n            let newtext = curFields.text;\n            if (newtext === 'id') {\n                newtext = 'text';\n                grpItem[newtext] = ds[j].key;\n            }\n            grpItem._id = 'group-list-item-' + (ds[j].key ?\n                ds[j].key.toString().trim() : 'undefined');\n            grpItem.items = itemObj;\n            dataSource.push(grpItem);\n            for (let k = 0; k < itemObj.length; k++) {\n                dataSource.push(itemObj[k]);\n            }\n        }\n        return dataSource;\n    }\n    ListBase.groupDataSource = groupDataSource;\n    /**\n     * Returns a sorted query object.\n     * @param  {SortOrder} sortOrder - Specifies that sort order.\n     * @param  {string} sortBy - Specifies sortBy fields.\n     * @param  {Query=new Query()} query - Pass if any existing query.\n     */\n    function addSorting(sortOrder, sortBy, query = new Query()) {\n        if (sortOrder === 'Ascending') {\n            query.sortBy(sortBy, 'ascending', true);\n        }\n        else if (sortOrder === 'Descending') {\n            query.sortBy(sortBy, 'descending', true);\n        }\n        else {\n            for (let i = 0; i < query.queries.length; i++) {\n                if (query.queries[i].fn === 'onSortBy') {\n                    query.queries.splice(i, 1);\n                }\n            }\n        }\n        return query;\n    }\n    ListBase.addSorting = addSorting;\n    /**\n     * Return an array of JSON Data that processed based on queries.\n     * @param  {{[key:string]:Object}[]} dataSource - Specifies local JSON data source.\n     * @param  {Query} query - Specifies query that need to process.\n     */\n    function getDataSource(dataSource, query) {\n        // tslint:disable-next-line\n        return new DataManager(dataSource)\n            .executeLocal(query);\n    }\n    ListBase.getDataSource = getDataSource;\n    /**\n     * Created JSON data based the UL and LI element\n     * @param  {HTMLElement|Element} element - UL element that need to convert as a JSON\n     * @param  {ListBaseOptions} options? - Specifies listbase option for fields.\n     */\n    function createJsonFromElement(element, options) {\n        let curOpt = extend({}, defaultListBaseOptions, options);\n        let fields = extend({}, ListBase.defaultMappedFields, curOpt.fields);\n        let curEle = element.cloneNode(true);\n        let jsonAr = [];\n        curEle.classList.add('json-parent');\n        let childs = curEle.querySelectorAll('.json-parent>li');\n        curEle.classList.remove('json-parent');\n        for (let i = 0; i < childs.length; i++) {\n            let li = childs[i];\n            let anchor = li.querySelector('a');\n            let ul = li.querySelector('ul');\n            let json = {};\n            let childNodes = anchor ? anchor.childNodes : li.childNodes;\n            let keys = Object.keys(childNodes);\n            for (let i = 0; i < childNodes.length; i++) {\n                if (!(childNodes[Number(keys[i])]).hasChildNodes()) {\n                    json[fields.text] = childNodes[Number(keys[i])].textContent;\n                }\n            }\n            let attributes$$1 = getAllAttributes(li);\n            if (attributes$$1.id) {\n                json[fields.id] = attributes$$1.id;\n                delete attributes$$1.id;\n            }\n            else {\n                json[fields.id] = generateId();\n            }\n            if (Object.keys(attributes$$1).length) {\n                json[fields.htmlAttributes] = attributes$$1;\n            }\n            if (anchor) {\n                attributes$$1 = getAllAttributes(anchor);\n                if (Object.keys(attributes$$1).length) {\n                    json[fields.urlAttributes] = attributes$$1;\n                }\n            }\n            if (ul) {\n                json[fields.child] = createJsonFromElement(ul, options);\n            }\n            jsonAr.push(json);\n        }\n        return jsonAr;\n    }\n    ListBase.createJsonFromElement = createJsonFromElement;\n    function typeofData(data) {\n        let match = { typeof: null, item: null };\n        for (let i = 0; i < data.length; i++) {\n            if (!isNullOrUndefined(data[i])) {\n                return match = { typeof: typeof data[i], item: data[i] };\n            }\n        }\n        return match;\n    }\n    function setAttribute(element, elementAttributes) {\n        let attr = {};\n        merge(attr, elementAttributes);\n        if (attr.class) {\n            addClass([element], attr.class.split(' '));\n            delete attr.class;\n        }\n        attributes(element, attr);\n    }\n    function getAllAttributes(element) {\n        let attributes$$1 = {};\n        let attr = element.attributes;\n        for (let index = 0; index < attr.length; index++) {\n            attributes$$1[attr[index].nodeName] = attr[index].nodeValue;\n        }\n        return attributes$$1;\n    }\n    /**\n     * Created UL element from content template.\n     * @param  {string} template - that need to convert and generate li element.\n     * @param  {{[key:string]:Object}[]} dataSource - Specifies local JSON data source.\n     * @param  {ListBaseOptions} options? - Specifies listbase option for fields.\n     */\n    function renderContentTemplate(createElement, template, dataSource, \n    // tslint:disable-next-line\n    fields, options, componentInstance) {\n        cssClass = getModuleClass(defaultListBaseOptions.moduleName);\n        let ulElement = createElement('ul', { className: cssClass.ul, attrs: { role: 'presentation' } });\n        let curOpt = extend({}, defaultListBaseOptions, options);\n        let curFields = extend({}, ListBase.defaultMappedFields, fields);\n        let compiledString = compile(template);\n        let liCollection = [];\n        let value;\n        let id = generateId(); // generate id for drop-down-list option.\n        for (let i = 0; i < dataSource.length; i++) {\n            let fieldData = getFieldValues(dataSource[i], curFields);\n            let curItem = dataSource[i];\n            let isHeader = curItem.isHeader;\n            if (typeof dataSource[i] === 'string' || typeof dataSource[i] === 'number') {\n                value = curItem;\n            }\n            else {\n                value = fieldData[curFields.value];\n            }\n            if (curOpt.itemCreating && typeof curOpt.itemCreating === 'function') {\n                let curData = {\n                    dataSource: dataSource,\n                    curData: curItem,\n                    text: value,\n                    options: curOpt,\n                    fields: curFields\n                };\n                curOpt.itemCreating(curData);\n            }\n            if (curOpt.itemCreating && typeof curOpt.itemCreating === 'function') {\n                fieldData = getFieldValues(dataSource[i], curFields);\n                if (typeof dataSource[i] === 'string' || typeof dataSource[i] === 'number') {\n                    value = curItem;\n                }\n                else {\n                    value = fieldData[curFields.value];\n                }\n            }\n            let li = createElement('li', {\n                id: id + '-' + i,\n                className: isHeader ? cssClass.group : cssClass.li, attrs: { role: 'presentation' }\n            });\n            if (isHeader) {\n                if (typeof dataSource[i] === 'string' || typeof dataSource[i] === 'number') {\n                    li.innerText = curItem;\n                }\n                else {\n                    li.innerText = fieldData[curFields.text];\n                }\n            }\n            else {\n                const currentID = isHeader ? curOpt.groupTemplateID : curOpt.templateID;\n                if (isHeader) {\n                    // tslint:disable-next-line\n                    let compiledElement = compiledString(curItem, componentInstance, 'headerTemplate', currentID, !!curOpt.isStringTemplate, null, li);\n                    if (compiledElement) {\n                        append(compiledElement, li);\n                    }\n                }\n                else {\n                    // tslint:disable-next-line\n                    let compiledElement = compiledString(curItem, componentInstance, 'template', currentID, !!curOpt.isStringTemplate, null, li);\n                    if (compiledElement) {\n                        append(compiledElement, li);\n                    }\n                }\n                li.setAttribute('data-value', isNullOrUndefined(value) ? 'null' : value);\n                li.setAttribute('role', 'option');\n            }\n            if (curOpt.itemCreated && typeof curOpt.itemCreated === 'function') {\n                let curData = {\n                    dataSource: dataSource,\n                    curData: curItem,\n                    text: value,\n                    item: li,\n                    options: curOpt,\n                    fields: curFields\n                };\n                curOpt.itemCreated(curData);\n            }\n            liCollection.push(li);\n        }\n        append(liCollection, ulElement);\n        return ulElement;\n    }\n    ListBase.renderContentTemplate = renderContentTemplate;\n    /**\n     * Created header items from group template.\n     * @param  {string} template - that need to convert and generate li element.\n     * @param  {{[key:string]:Object}[]} dataSource - Specifies local JSON data source.\n     * @param  {FieldsMapping} fields - Specifies fields for mapping the dataSource.\n     * @param  {Element[]} headerItems? - Specifies listbase header items.\n     */\n    // tslint:disable-next-line\n    function renderGroupTemplate(groupTemplate, groupDataSource, fields, \n    // tslint:disable-next-line\n    headerItems, options, componentInstance) {\n        let compiledString = compile(groupTemplate);\n        let curFields = extend({}, ListBase.defaultMappedFields, fields);\n        let curOpt = extend({}, defaultListBaseOptions, options);\n        let category = curFields.groupBy;\n        for (let header of headerItems) {\n            let headerData = {};\n            headerData[category] = header.textContent;\n            header.innerHTML = '';\n            // tslint:disable-next-line\n            let compiledElement = compiledString(headerData, componentInstance, 'groupTemplate', curOpt.groupTemplateID, !!curOpt.isStringTemplate, null, header);\n            if (compiledElement) {\n                append(compiledElement, header);\n            }\n        }\n        return headerItems;\n    }\n    ListBase.renderGroupTemplate = renderGroupTemplate;\n    function generateId() {\n        return Math.floor((1 + Math.random()) * 0x10000)\n            .toString(16)\n            .substring(1);\n    }\n    ListBase.generateId = generateId;\n    function processSubChild(createElement, fieldData, fields, ds, \n    // tslint:disable-next-line\n    options, element, level) {\n        // Get SubList\n        let subDS = fieldData[fields.child] || [];\n        let hasChildren = fieldData[fields.hasChildren];\n        //Create Sub child\n        if (subDS.length) {\n            hasChildren = true;\n            element.classList.add(cssClass.hasChild);\n            if (options.processSubChild) {\n                let subLi = createListFromJson(createElement, subDS, options, ++level);\n                element.appendChild(subLi);\n            }\n        }\n        // Create expand and collapse node\n        if (!!options.expandCollapse && hasChildren && !options.template) {\n            element.firstElementChild.classList.add(cssClass.iconWrapper);\n            let expandElement = options.expandIconPosition === 'Left' ? prepend : append;\n            expandElement([createElement('div', { className: 'e-icons ' + options.expandIconClass })], element.querySelector('.' + cssClass.textContent));\n        }\n    }\n    function generateSingleLevelLI(createElement, item, fieldData, fields, className, innerElements, grpLI, id, index, options) {\n        let curOpt = extend({}, defaultListBaseOptions, options);\n        let ariaAttributes = extend({}, defaultAriaAttributes, curOpt.ariaAttributes);\n        let text = item;\n        let value = item;\n        let dataSource;\n        if (typeof item !== 'string' && typeof item !== 'number' && typeof item !== 'boolean') {\n            dataSource = item;\n            text = (typeof fieldData[fields.text] === 'boolean' || typeof fieldData[fields.text] === 'number') ?\n                fieldData[fields.text] : (fieldData[fields.text] || '');\n            value = fieldData[fields.value];\n        }\n        let elementID;\n        if (!isNullOrUndefined(dataSource) && !isNullOrUndefined(fieldData[fields.id])\n            && fieldData[fields.id] !== '') {\n            elementID = id;\n        }\n        else {\n            elementID = id + '-' + index;\n        }\n        let li = createElement('li', {\n            className: (grpLI === true ? cssClass.group : cssClass.li) + ' ' + (isNullOrUndefined(className) ? '' : className),\n            id: elementID, attrs: (ariaAttributes.groupItemRole !== '' && ariaAttributes.itemRole !== '' ?\n                { role: (grpLI === true ? ariaAttributes.groupItemRole : ariaAttributes.itemRole) } : {})\n        });\n        if (dataSource && fieldData.hasOwnProperty(fields.enabled) && fieldData[fields.enabled].toString() === 'false') {\n            li.classList.add(cssClass.disabled);\n        }\n        if (grpLI) {\n            li.innerText = text;\n        }\n        else {\n            li.setAttribute('data-value', isNullOrUndefined(value) ? 'null' : value);\n            li.setAttribute('role', 'option');\n            if (dataSource && fieldData.hasOwnProperty(fields.htmlAttributes) && fieldData[fields.htmlAttributes]) {\n                setAttribute(li, fieldData[fields.htmlAttributes]);\n            }\n            if (innerElements.length && !curOpt.itemNavigable) {\n                append(innerElements, li);\n            }\n            if (dataSource && (fieldData[fields.url] || (fieldData[fields.urlAttributes] &&\n                fieldData[fields.urlAttributes].href))) {\n                li.appendChild(anchorTag(createElement, dataSource, fields, text, innerElements, curOpt.itemNavigable));\n            }\n            else {\n                if (innerElements.length && curOpt.itemNavigable) {\n                    append(innerElements, li);\n                }\n                li.appendChild(document.createTextNode(text));\n            }\n        }\n        return li;\n    }\n    function getModuleClass(moduleName) {\n        let moduleClass;\n        return moduleClass = {\n            li: `e-${moduleName}-item`,\n            ul: `e-${moduleName}-parent e-ul`,\n            group: `e-${moduleName}-group-item`,\n            icon: `e-${moduleName}-icon`,\n            text: `e-${moduleName}-text`,\n            check: `e-${moduleName}-check`,\n            checked: 'e-checked',\n            selected: 'e-selected',\n            expanded: 'e-expanded',\n            textContent: 'e-text-content',\n            hasChild: 'e-has-child',\n            level: 'e-level',\n            url: `e-${moduleName}-url`,\n            collapsible: 'e-icon-collapsible',\n            disabled: 'e-disabled',\n            image: `e-${moduleName}-img`,\n            iconWrapper: 'e-icon-wrapper',\n            anchorWrap: 'e-anchor-wrap',\n            navigable: 'e-navigable',\n        };\n    }\n    function anchorTag(createElement, dataSource, fields, text, innerElements, isFullNavigation) {\n        let fieldData = getFieldValues(dataSource, fields);\n        let attr = { href: fieldData[fields.url] };\n        if (fieldData.hasOwnProperty(fields.urlAttributes) && fieldData[fields.urlAttributes]) {\n            merge(attr, fieldData[fields.urlAttributes]);\n            attr.href = fieldData[fields.url] ? fieldData[fields.url] :\n                fieldData[fields.urlAttributes].href;\n        }\n        let anchorTag;\n        if (!isFullNavigation) {\n            anchorTag = createElement('a', { className: cssClass.text + ' ' + cssClass.url, innerHTML: text });\n        }\n        else {\n            anchorTag = createElement('a', { className: cssClass.text + ' ' + cssClass.url });\n            let anchorWrapper = createElement('div', { className: cssClass.anchorWrap });\n            if (innerElements && innerElements.length) {\n                append(innerElements, anchorWrapper);\n            }\n            anchorWrapper.appendChild(document.createTextNode(text));\n            append([anchorWrapper], anchorTag);\n        }\n        setAttribute(anchorTag, attr);\n        return anchorTag;\n    }\n    // tslint:disable-next-line\n    /* tslint:disable:align */\n    function generateLI(createElement, item, fieldData, \n    // tslint:disable-next-line\n    fields, className, options, componentInstance) {\n        let curOpt = extend({}, defaultListBaseOptions, options);\n        let ariaAttributes = extend({}, defaultAriaAttributes, curOpt.ariaAttributes);\n        let text = item;\n        let uID;\n        let grpLI;\n        let dataSource;\n        if (typeof item !== 'string' && typeof item !== 'number') {\n            dataSource = item;\n            text = fieldData[fields.text] || '';\n            // tslint:disable-next-line\n            uID = (isNullOrUndefined(fieldData['_id'])) ? fieldData[fields.id] : fieldData['_id'];\n            grpLI = (item.hasOwnProperty('isHeader') && item.isHeader)\n                ? true : false;\n        }\n        if (options && options.enableHtmlSanitizer) {\n            text = text;\n        }\n        let li = createElement('li', {\n            className: (grpLI === true ? cssClass.group : cssClass.li) + ' ' + (isNullOrUndefined(className) ? '' : className),\n            attrs: (ariaAttributes.groupItemRole !== '' && ariaAttributes.itemRole !== '' ?\n                { role: (grpLI === true ? ariaAttributes.groupItemRole : ariaAttributes.itemRole) } : {})\n        });\n        !isNullOrUndefined(uID) ? li.setAttribute('data-uid', uID) : li.setAttribute('data-uid', generateId());\n        const blazId = 'BlazId';\n        if (options && !!options.removeBlazorID\n            && typeof item === 'object'\n            && item.hasOwnProperty(blazId)) {\n            delete item[blazId];\n        }\n        if (grpLI && options && options.groupTemplate) {\n            let compiledString = compile(options.groupTemplate);\n            // tslint:disable-next-line\n            let compiledElement = compiledString(item, componentInstance, 'groupTemplate', curOpt.groupTemplateID, !!curOpt.isStringTemplate, null, li);\n            if (compiledElement) {\n                append(compiledElement, li);\n            }\n        }\n        else if (!grpLI && options && options.template) {\n            let compiledString = compile(options.template);\n            // tslint:disable-next-line\n            let compiledElement = compiledString(item, componentInstance, 'template', curOpt.templateID, !!curOpt.isStringTemplate, null, li);\n            if (compiledElement) {\n                append(compiledElement, li);\n            }\n        }\n        else {\n            let innerDiv = createElement('div', {\n                className: cssClass.textContent,\n                attrs: (ariaAttributes.wrapperRole !== '' ? { role: ariaAttributes.wrapperRole } : {})\n            });\n            if (dataSource && (fieldData[fields.url] || (fieldData[fields.urlAttributes] &&\n                fieldData[fields.urlAttributes].href))) {\n                innerDiv.appendChild(anchorTag(createElement, dataSource, fields, text, null, curOpt.itemNavigable));\n            }\n            else {\n                let element = createElement('span', {\n                    className: cssClass.text,\n                    attrs: (ariaAttributes.itemText !== '' ? { role: ariaAttributes.itemText } : {})\n                });\n                if (options && options.enableHtmlSanitizer) {\n                    element.innerText = text;\n                }\n                else {\n                    element.innerHTML = text;\n                }\n                innerDiv.appendChild(element);\n            }\n            li.appendChild(innerDiv);\n        }\n        return li;\n    }\n    /**\n     * Returns UL element based on the given LI element.\n     * @param  {HTMLElement[]} liElement - Specifies array of LI element.\n     * @param  {string} className? - Specifies class name that need to be added in UL element.\n     * @param  {ListBaseOptions} options? - Specifies ListBase options.\n     */\n    function generateUL(createElement, liElement, className, options) {\n        let curOpt = extend({}, defaultListBaseOptions, options);\n        let ariaAttributes = extend({}, defaultAriaAttributes, curOpt.ariaAttributes);\n        cssClass = getModuleClass(curOpt.moduleName);\n        let ulElement = createElement('ul', {\n            className: cssClass.ul + ' ' + (isNullOrUndefined(className) ? '' : className),\n            attrs: (ariaAttributes.listRole !== '' ? { role: ariaAttributes.listRole } : {})\n        });\n        append(liElement, ulElement);\n        return ulElement;\n    }\n    ListBase.generateUL = generateUL;\n    /**\n     * Returns LI element with additional DIV tag based on the given LI element.\n     * @param  {liElement} liElement - Specifies LI element.\n     * @param  {string} className? - Specifies class name that need to be added in created DIV element.\n     * @param  {ListBaseOptions} options? - Specifies ListBase options.\n     */\n    function generateIcon(createElement, liElement, className, options) {\n        let curOpt = extend({}, defaultListBaseOptions, options);\n        cssClass = getModuleClass(curOpt.moduleName);\n        let expandElement = curOpt.expandIconPosition === 'Left' ? prepend : append;\n        expandElement([createElement('div', {\n                className: 'e-icons ' + curOpt.expandIconClass + ' ' +\n                    (isNullOrUndefined(className) ? '' : className)\n            })], liElement.querySelector('.' + cssClass.textContent));\n        return liElement;\n    }\n    ListBase.generateIcon = generateIcon;\n})(ListBase || (ListBase = {}));\n/**\n * Used to get dataSource item from complex data using fields.\n * @param {{[key:string]:Object}|string[]|string} dataSource - Specifies an  JSON or String data.\n * @param {FieldsMapping} fields - Fields that are mapped from the dataSource.\n */\nfunction getFieldValues(dataItem, fields) {\n    let fieldData = {};\n    if (isNullOrUndefined(dataItem) || typeof (dataItem) === 'string' || typeof (dataItem) === 'number'\n        || !isNullOrUndefined(dataItem.isHeader)) {\n        return dataItem;\n    }\n    else {\n        for (let field of Object.keys(fields)) {\n            let dataField = fields[field];\n            let value = !isNullOrUndefined(dataField) &&\n                typeof (dataField) === 'string' ? getValue(dataField, dataItem) : undefined;\n            if (!isNullOrUndefined(value)) {\n                fieldData[dataField] = value;\n            }\n        }\n    }\n    return fieldData;\n}\n\nvar __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n// Effect Configuration Effect[] =  [fromViewBackward,fromViewForward,toViewBackward,toviewForward];\nconst effectsConfig = {\n    'None': [],\n    'SlideLeft': ['SlideRightOut', 'SlideLeftOut', 'SlideLeftIn', 'SlideRightIn'],\n    'SlideDown': ['SlideTopOut', 'SlideBottomOut', 'SlideBottomIn', 'SlideTopIn'],\n    'Zoom': ['FadeOut', 'FadeZoomOut', 'FadeZoomIn', 'FadeIn'],\n    'Fade': ['FadeOut', 'FadeOut', 'FadeIn', 'FadeIn']\n};\nconst effectsRTLConfig = {\n    'None': [],\n    'SlideLeft': ['SlideLeftOut', 'SlideRightOut', 'SlideRightIn', 'SlideLeftIn'],\n    'SlideDown': ['SlideBottomOut', 'SlideTopOut', 'SlideTopIn', 'SlideBottomIn'],\n    'Zoom': ['FadeZoomOut', 'FadeOut', 'FadeIn', 'FadeZoomIn'],\n    'Fade': ['FadeOut', 'FadeOut', 'FadeIn', 'FadeIn']\n};\n// don't use space in classnames.\nconst classNames = {\n    root: 'e-listview',\n    hover: 'e-hover',\n    selected: 'e-active',\n    focused: 'e-focused',\n    parentItem: 'e-list-parent',\n    listItem: 'e-list-item',\n    listIcon: 'e-list-icon',\n    textContent: 'e-text-content',\n    listItemText: 'e-list-text',\n    groupListItem: 'e-list-group-item',\n    hasChild: 'e-has-child',\n    view: 'e-view',\n    header: 'e-list-header',\n    headerText: 'e-headertext',\n    headerTemplateText: 'e-headertemplate-text',\n    text: 'e-text',\n    disable: 'e-disabled',\n    content: 'e-content',\n    icon: 'e-icons',\n    backIcon: 'e-icon-back',\n    checkboxWrapper: 'e-checkbox-wrapper',\n    checkbox: 'e-checkbox',\n    checked: 'e-check',\n    checklist: 'e-checklist',\n    checkboxIcon: 'e-frame',\n    checkboxRight: 'e-checkbox-right',\n    checkboxLeft: 'e-checkbox-left',\n    listviewCheckbox: 'e-listview-checkbox',\n    itemCheckList: 'e-checklist',\n    virtualElementContainer: 'e-list-virtualcontainer'\n};\nconst LISTVIEW_TEMPLATE_PROPERTY = 'Template';\nconst LISTVIEW_GROUPTEMPLATE_PROPERTY = 'GroupTemplate';\nconst LISTVIEW_HEADERTEMPLATE_PROPERTY = 'HeaderTemplate';\nconst swipeVelocity = 0.5;\n/**\n * Represents the field settings of the ListView.\n */\nclass FieldSettings extends ChildProperty {\n}\n__decorate([\n    Property('id')\n], FieldSettings.prototype, \"id\", void 0);\n__decorate([\n    Property('text')\n], FieldSettings.prototype, \"text\", void 0);\n__decorate([\n    Property('isChecked')\n], FieldSettings.prototype, \"isChecked\", void 0);\n__decorate([\n    Property('isVisible')\n], FieldSettings.prototype, \"isVisible\", void 0);\n__decorate([\n    Property('enabled')\n], FieldSettings.prototype, \"enabled\", void 0);\n__decorate([\n    Property('iconCss')\n], FieldSettings.prototype, \"iconCss\", void 0);\n__decorate([\n    Property('child')\n], FieldSettings.prototype, \"child\", void 0);\n__decorate([\n    Property('tooltip')\n], FieldSettings.prototype, \"tooltip\", void 0);\n__decorate([\n    Property('groupBy')\n], FieldSettings.prototype, \"groupBy\", void 0);\n__decorate([\n    Property('text')\n], FieldSettings.prototype, \"sortBy\", void 0);\n__decorate([\n    Property('htmlAttributes')\n], FieldSettings.prototype, \"htmlAttributes\", void 0);\n__decorate([\n    Property('tableName')\n], FieldSettings.prototype, \"tableName\", void 0);\n/**\n * Represents the EJ2 ListView control.\n * ```html\n * <div id=\"listview\">\n * <ul>\n * <li>Favorite</li>\n * <li>Documents</li>\n * <li>Downloads</li>\n * </ul>\n * </div>\n * ```\n * ```typescript\n *   var listviewObject = new ListView({});\n *   listviewObject.appendTo(\"#listview\");\n * ```\n */\nlet ListView = class ListView extends Component {\n    /**\n     * Constructor for creating the widget\n     */\n    constructor(options, element) {\n        super(options, element);\n        this.itemReRender = false;\n        this.previousSelectedItems = [];\n        this.hiddenItems = [];\n        this.enabledItems = [];\n        this.disabledItems = [];\n    }\n    /**\n     * @private\n     */\n    onPropertyChanged(newProp, oldProp) {\n        for (let prop of Object.keys(newProp)) {\n            switch (prop) {\n                case 'htmlAttributes':\n                    this.setHTMLAttribute();\n                    break;\n                case 'cssClass':\n                    this.setCSSClass(oldProp.cssClass);\n                    break;\n                case 'enable':\n                    this.setEnable();\n                    break;\n                case 'width':\n                case 'height':\n                    this.setSize();\n                    break;\n                case 'enableRtl':\n                    this.setEnableRTL();\n                    break;\n                case 'fields':\n                    this.listBaseOption.fields = this.fields.properties;\n                    if (this.enableVirtualization) {\n                        if (!(this.isServerRendered && isBlazor())) {\n                            this.virtualizationModule.reRenderUiVirtualization();\n                        }\n                    }\n                    else {\n                        if (isBlazor() && this.isServerRendered && !this.enableVirtualization) {\n                            this.itemReRender = true;\n                        }\n                        this.reRender();\n                    }\n                    break;\n                case 'headerTitle':\n                    if (!this.curDSLevel.length) {\n                        this.header(this.headerTitle, false, 'header');\n                    }\n                    break;\n                case 'query':\n                    if (this.enableVirtualization) {\n                        if (!(isBlazor() && this.isServerRendered)) {\n                            this.virtualizationModule.reRenderUiVirtualization();\n                        }\n                    }\n                    else {\n                        if (isBlazor() && this.isServerRendered && !this.enableVirtualization) {\n                            this.itemReRender = true;\n                        }\n                        this.reRender();\n                    }\n                    break;\n                case 'showHeader':\n                    this.header(this.headerTitle, false, 'header');\n                    break;\n                case 'enableVirtualization':\n                    if (!isNullOrUndefined(this.contentContainer)) {\n                        detach(this.contentContainer);\n                    }\n                    this.refresh();\n                    break;\n                case 'showCheckBox':\n                case 'checkBoxPosition':\n                    if (!isBlazor() || !this.isServerRendered) {\n                        if (this.enableVirtualization) {\n                            this.virtualizationModule.reRenderUiVirtualization();\n                        }\n                        else {\n                            this.setCheckbox();\n                        }\n                    }\n                    break;\n                case 'dataSource':\n                    if (this.enableVirtualization) {\n                        if (!(this.isServerRendered && isBlazor())) {\n                            this.virtualizationModule.reRenderUiVirtualization();\n                        }\n                    }\n                    else {\n                        if (isBlazor() && this.isServerRendered && !this.enableVirtualization) {\n                            this.itemReRender = true;\n                        }\n                        this.reRender();\n                    }\n                    break;\n                case 'sortOrder':\n                case 'showIcon':\n                    if (isBlazor() && this.isServerRendered) {\n                        // tslint:disable\n                        this.interopAdaptor.invokeMethodAsync('ItemSorting');\n                        //tslint:enable\n                    }\n                    else {\n                        if (this.enableVirtualization) {\n                            this.virtualizationModule.reRenderUiVirtualization();\n                        }\n                        else {\n                            this.listBaseOption.showIcon = this.showIcon;\n                            this.curViewDS = this.getSubDS();\n                            this.resetCurrentList();\n                        }\n                    }\n                    break;\n                default:\n                    break;\n            }\n        }\n    }\n    // Model Changes\n    setHTMLAttribute() {\n        if (Object.keys(this.htmlAttributes).length) {\n            attributes(this.element, this.htmlAttributes);\n        }\n    }\n    setCSSClass(oldCSSClass) {\n        if (this.cssClass) {\n            addClass([this.element], this.cssClass.split(' ').filter((css) => css));\n        }\n        if (oldCSSClass) {\n            removeClass([this.element], oldCSSClass.split(' ').filter((css) => css));\n        }\n    }\n    setSize() {\n        this.element.style.height = formatUnit(this.height);\n        this.element.style.width = formatUnit(this.width);\n        this.isWindow = this.element.clientHeight ? false : true;\n    }\n    setEnable() {\n        this.enableElement(this.element, this.enable);\n    }\n    setEnableRTL() {\n        if (this.enableRtl) {\n            this.element.classList.add('e-rtl');\n        }\n        else {\n            this.element.classList.remove('e-rtl');\n        }\n    }\n    enableElement(element, isEnabled) {\n        if (isEnabled) {\n            element.classList.remove(classNames.disable);\n        }\n        else {\n            element.classList.add(classNames.disable);\n        }\n    }\n    // Support Component Functions\n    header(text, showBack, prop) {\n        if (isBlazor() && this.isServerRendered) {\n            let args = { HeaderText: text, BackButton: showBack };\n            // tslint:disable\n            this.interopAdaptor.invokeMethodAsync('HeaderTitle', args);\n            // tslint:disable\n        }\n        else {\n            if (this.headerEle === undefined && this.showHeader) {\n                if (this.enableHtmlSanitizer) {\n                    this.setProperties({ headerTitle: SanitizeHtmlHelper.sanitize(this.headerTitle) }, true);\n                }\n                this.headerEle = this.createElement('div', { className: classNames.header });\n                let innerHeaderEle = this.createElement('span', { className: classNames.headerText, innerHTML: this.headerTitle });\n                let textEle = this.createElement('div', { className: classNames.text, innerHTML: innerHeaderEle.outerHTML });\n                let hedBackButton = this.createElement('div', {\n                    className: classNames.icon + ' ' + classNames.backIcon + ' e-but-back',\n                    attrs: { style: 'display:none;' }\n                });\n                this.headerEle.appendChild(hedBackButton);\n                this.headerEle.appendChild(textEle);\n                if (this.headerTemplate) {\n                    let compiledString = compile(this.headerTemplate);\n                    let headerTemplateEle = this.createElement('div', { className: classNames.headerTemplateText });\n                    // tslint:disable-next-line\n                    let compiledElement = compiledString({}, this, prop, this.LISTVIEW_HEADERTEMPLATE_ID, null, null, this.headerEle);\n                    if (compiledElement) {\n                        append(compiledElement, headerTemplateEle);\n                    }\n                    append([headerTemplateEle], this.headerEle);\n                    this.updateBlazorTemplates(false, true, true);\n                    // tslint:disable-next-line\n                    if (this.isReact) {\n                        this.renderReactTemplates();\n                    }\n                }\n                if (this.headerTemplate && this.headerTitle) {\n                    textEle.classList.add('header');\n                }\n                this.element.classList.add('e-has-header');\n                prepend([this.headerEle], this.element);\n            }\n            else if (this.headerEle) {\n                if (this.showHeader) {\n                    this.headerEle.style.display = '';\n                    let textEle = this.headerEle.querySelector('.' + classNames.headerText);\n                    let hedBackButton = this.headerEle.querySelector('.' + classNames.backIcon);\n                    if (this.enableHtmlSanitizer) {\n                        text = SanitizeHtmlHelper.sanitize(text);\n                    }\n                    textEle.innerHTML = text;\n                    if (this.headerTemplate && showBack) {\n                        textEle.parentElement.classList.remove('header');\n                        this.headerEle.querySelector('.' + classNames.headerTemplateText).classList.add('nested-header');\n                    }\n                    if (this.headerTemplate && !showBack) {\n                        textEle.parentElement.classList.add('header');\n                        this.headerEle.querySelector('.' + classNames.headerTemplateText).classList.remove('nested-header');\n                        this.headerEle.querySelector('.' + classNames.headerTemplateText).classList.add('header');\n                    }\n                    if (showBack === true) {\n                        hedBackButton.style.display = '';\n                    }\n                    else {\n                        hedBackButton.style.display = 'none';\n                    }\n                }\n                else {\n                    this.headerEle.style.display = 'none';\n                }\n            }\n        }\n    }\n    // Animation Related Functions\n    switchView(fromView, toView, reverse) {\n        if (fromView && toView) {\n            let fPos = fromView.style.position;\n            let overflow = (this.element.style.overflow !== 'hidden') ? this.element.style.overflow : '';\n            fromView.style.position = 'absolute';\n            fromView.classList.add('e-view');\n            let anim;\n            let duration = this.animation.duration;\n            if (this.animation.effect) {\n                anim = (this.enableRtl ? effectsRTLConfig[this.animation.effect] : effectsConfig[this.animation.effect]);\n            }\n            else {\n                let slideLeft = 'SlideLeft';\n                anim = effectsConfig[slideLeft];\n                reverse = this.enableRtl;\n                duration = 0;\n            }\n            this.element.style.overflow = 'hidden';\n            this.aniObj.animate(fromView, {\n                name: (reverse === true ? anim[0] : anim[1]),\n                duration: duration,\n                timingFunction: this.animation.easing,\n                end: (model) => {\n                    fromView.style.display = 'none';\n                    this.element.style.overflow = overflow;\n                    fromView.style.position = fPos;\n                    fromView.classList.remove('e-view');\n                }\n            });\n            toView.style.display = '';\n            this.aniObj.animate(toView, {\n                name: (reverse === true ? anim[2] : anim[3]),\n                duration: duration,\n                timingFunction: this.animation.easing,\n                end: () => {\n                    this.trigger('actionComplete');\n                }\n            });\n            this.curUL = toView;\n        }\n    }\n    preRender() {\n        if (this.template) {\n            try {\n                if (document.querySelectorAll(this.template).length) {\n                    this.template = document.querySelector(this.template).innerHTML.trim();\n                }\n            }\n            catch (e) {\n                compile(this.template);\n                // tslint:disable-next-line\n                if (this.isReact) {\n                    this.renderReactTemplates();\n                }\n            }\n        }\n        this.listBaseOption = {\n            template: this.template,\n            headerTemplate: this.headerTemplate,\n            groupTemplate: this.groupTemplate, expandCollapse: true, listClass: '',\n            ariaAttributes: {\n                itemRole: 'option', listRole: 'presentation', itemText: '',\n                groupItemRole: 'group', wrapperRole: 'presentation'\n            },\n            fields: this.fields.properties, sortOrder: this.sortOrder, showIcon: this.showIcon,\n            itemCreated: this.renderCheckbox.bind(this),\n            templateID: `${this.element.id}${LISTVIEW_TEMPLATE_PROPERTY}`,\n            groupTemplateID: `${this.element.id}${LISTVIEW_GROUPTEMPLATE_PROPERTY}`,\n            enableHtmlSanitizer: this.enableHtmlSanitizer,\n            removeBlazorID: true\n        };\n        this.initialization();\n    }\n    updateLiElementHeight() {\n        let liContainer = this.element.querySelector('.' + classNames.virtualElementContainer);\n        if (liContainer.children[0]) {\n            this.liElementHeight = liContainer.children[0].getBoundingClientRect().height;\n            // tslint:disable\n            this.interopAdaptor.invokeMethodAsync('LiElementHeight', this.liElementHeight);\n            // tslint:enable\n        }\n    }\n    initialization() {\n        if (isBlazor() && this.isServerRendered && this.enableVirtualization) {\n            let ulContainer = this.element.querySelector('.' + classNames.virtualElementContainer);\n            if (ulContainer !== null) {\n                if (this.height === '') {\n                    // tslint:disable\n                    this.interopAdaptor.invokeMethodAsync('SetComponentHeight', window.innerHeight);\n                    // tslint:enable\n                    this.isWindow = true;\n                    ulContainer.scrollIntoView();\n                }\n                if (this.height.toString().indexOf('%') !== -1) {\n                    // tslint:disable\n                    this.interopAdaptor.invokeMethodAsync('SetContainerHeight', this.element.getBoundingClientRect().height.toString());\n                    // tslint:enable\n                }\n                if (ulContainer.children[0]) {\n                    this.liElementHeight = ulContainer.children[0].getBoundingClientRect().height;\n                    // tslint:disable\n                    this.interopAdaptor.invokeMethodAsync('LiElementHeight', this.liElementHeight);\n                    // tslint:enable\n                }\n            }\n        }\n        this.curDSLevel = [];\n        this.animateOptions = {};\n        this.curViewDS = [];\n        this.currentLiElements = [];\n        this.isNestedList = false;\n        this.selectedData = [];\n        this.selectedId = [];\n        this.LISTVIEW_TEMPLATE_ID = `${this.element.id}${LISTVIEW_TEMPLATE_PROPERTY}`;\n        this.LISTVIEW_GROUPTEMPLATE_ID = `${this.element.id}${LISTVIEW_GROUPTEMPLATE_PROPERTY}`;\n        this.LISTVIEW_HEADERTEMPLATE_ID = `${this.element.id}${LISTVIEW_HEADERTEMPLATE_PROPERTY}`;\n        this.aniObj = new Animation(this.animateOptions);\n        this.removeElement(this.curUL);\n        this.removeElement(this.ulElement);\n        this.removeElement(this.headerEle);\n        this.removeElement(this.contentContainer);\n        // tslint:disable-next-line\n        if (this.isReact) {\n            this.clearTemplate();\n        }\n        this.curUL = this.ulElement = this.liCollection = this.headerEle = this.contentContainer = undefined;\n    }\n    renderCheckbox(args) {\n        if (args.item.classList.contains(classNames.hasChild)) {\n            this.isNestedList = true;\n        }\n        if (this.showCheckBox && this.isValidLI(args.item)) {\n            let checkboxElement;\n            let fieldData;\n            checkboxElement = createCheckBox(this.createElement, false, {\n                checked: false, enableRtl: this.enableRtl,\n                cssClass: classNames.listviewCheckbox\n            });\n            checkboxElement.setAttribute('role', 'checkbox');\n            let frameElement = checkboxElement.querySelector('.' + classNames.checkboxIcon);\n            args.item.classList.add(classNames.itemCheckList);\n            args.item.firstElementChild.classList.add(classNames.checkbox);\n            if (typeof this.dataSource[0] !== 'string' && typeof this.dataSource[0] !== 'number') {\n                fieldData = getFieldValues(args.curData, this.listBaseOption.fields);\n                if (fieldData[this.listBaseOption.fields.isChecked]) {\n                    this.checkInternally(args, checkboxElement);\n                }\n            }\n            else if (((typeof this.dataSource[0] === 'string' ||\n                typeof this.dataSource[0] === 'number') && this.selectedData.indexOf(args.text) !== -1)) {\n                this.checkInternally(args, checkboxElement);\n            }\n            checkboxElement.setAttribute('aria-checked', frameElement.classList.contains(classNames.checked) ? 'true' : 'false');\n            if (this.checkBoxPosition === 'Left') {\n                checkboxElement.classList.add(classNames.checkboxLeft);\n                args.item.firstElementChild.classList.add(classNames.checkboxLeft);\n                args.item.firstElementChild.insertBefore(checkboxElement, args.item.firstElementChild.childNodes[0]);\n            }\n            else {\n                checkboxElement.classList.add(classNames.checkboxRight);\n                args.item.firstElementChild.classList.add(classNames.checkboxRight);\n                args.item.firstElementChild.appendChild(checkboxElement);\n            }\n            this.currentLiElements.push(args.item);\n            this.checkBoxPosition === 'Left' ? this.virtualCheckBox = args.item.firstElementChild.children[0] :\n                this.virtualCheckBox = args.item.firstElementChild.lastElementChild;\n        }\n    }\n    checkInternally(args, checkboxElement) {\n        args.item.classList.add(classNames.selected);\n        args.item.setAttribute('aria-selected', 'true');\n        checkboxElement.querySelector('.' + classNames.checkboxIcon).classList.add(classNames.checked);\n        checkboxElement.setAttribute('aria-checked', 'true');\n    }\n    /**\n     * Checks the specific list item by passing the unchecked fields as an argument to this method.\n     * @param  {Fields | HTMLElement | Element} item - It accepts Fields or HTML list element as an argument.\n     */\n    checkItem(item) {\n        this.toggleCheckBase(item, true);\n    }\n    toggleCheckBase(item, checked) {\n        if (this.showCheckBox) {\n            let liElement = item;\n            if (item instanceof Object && item.constructor !== HTMLLIElement) {\n                liElement = this.getLiFromObjOrElement(item);\n            }\n            if (!isNullOrUndefined(liElement)) {\n                let checkboxIcon = liElement.querySelector('.' + classNames.checkboxIcon);\n                checked ? liElement.classList.add(classNames.selected) : liElement.classList.remove(classNames.selected);\n                liElement.setAttribute('aria-selected', checked ? 'true' : 'false');\n                checked ? checkboxIcon.classList.add(classNames.checked) : checkboxIcon.classList.remove(classNames.checked);\n                checkboxIcon.parentElement.setAttribute('aria-checked', checked ? 'true' : 'false');\n            }\n            this.setSelectedItemData(liElement);\n        }\n    }\n    /**\n     * Uncheck the specific list item by passing the checked fields as an argument to this method.\n     * @param  {Fields | HTMLElement | Element} item - It accepts Fields or HTML list element as an argument.\n     */\n    uncheckItem(item) {\n        this.toggleCheckBase(item, false);\n    }\n    /**\n     * Checks all the unchecked items in the ListView.\n     */\n    checkAllItems() {\n        this.toggleAllCheckBase(true);\n    }\n    /**\n     * Uncheck all the checked items in ListView.\n     */\n    uncheckAllItems() {\n        this.toggleAllCheckBase(false);\n    }\n    toggleAllCheckBase(checked) {\n        if (this.showCheckBox) {\n            for (let i = 0; i < this.liCollection.length; i++) {\n                let checkIcon = this.liCollection[i].querySelector('.' + classNames.checkboxIcon);\n                if (checkIcon) {\n                    if (checked) {\n                        if (!checkIcon.classList.contains(classNames.checked)) {\n                            this.checkItem(this.liCollection[i]);\n                        }\n                    }\n                    else {\n                        if (checkIcon.classList.contains(classNames.checked)) {\n                            this.uncheckItem(this.liCollection[i]);\n                        }\n                    }\n                }\n            }\n            if (this.enableVirtualization) {\n                this.virtualizationModule.checkedItem(checked);\n            }\n        }\n    }\n    setCheckbox() {\n        if (this.showCheckBox) {\n            let liCollection = Array.prototype.slice.call(this.element.querySelectorAll('.' + classNames.listItem));\n            let args = {\n                item: undefined, curData: undefined, dataSource: undefined, fields: undefined,\n                options: undefined, text: ''\n            };\n            for (let i = 0; i < liCollection.length; i++) {\n                let element = liCollection[i];\n                args.item = element;\n                args.curData = this.getItemData(element);\n                if (element.querySelector('.' + classNames.checkboxWrapper)) {\n                    this.removeElement(element.querySelector('.' + classNames.checkboxWrapper));\n                }\n                this.renderCheckbox(args);\n                if (args.item.classList.contains(classNames.selected)) {\n                    this.checkInternally(args, args.item.querySelector('.' + classNames.checkboxWrapper));\n                }\n            }\n        }\n        else {\n            let liCollection = Array.prototype.slice.call(this.element.querySelectorAll('.' + classNames.itemCheckList));\n            for (let i = 0; i < liCollection.length; i++) {\n                let element = liCollection[i];\n                element.classList.remove(classNames.selected);\n                element.firstElementChild.classList.remove(classNames.checkbox);\n                this.removeElement(element.querySelector('.' + classNames.checkboxWrapper));\n            }\n            if (this.selectedItems) {\n                this.selectedItems.item.classList.add(classNames.selected);\n            }\n        }\n    }\n    /**\n     * Refresh the height of the list item.\n     */\n    refreshItemHeight() {\n        this.virtualizationModule.refreshItemHeight();\n    }\n    clickHandler(e) {\n        let target = e.target;\n        let classList = target.classList;\n        let closestElement;\n        if (classList.contains(classNames.backIcon) || classList.contains(classNames.headerText)) {\n            if (this.showCheckBox && this.curDSLevel[this.curDSLevel.length - 1]) {\n                this.uncheckAllItems();\n            }\n            this.back();\n        }\n        else {\n            let li = closest(target.parentNode, '.' + classNames.listItem);\n            if (li === null) {\n                li = target;\n            }\n            this.removeFocus();\n            if (this.enable && this.showCheckBox && this.isValidLI(li)) {\n                if (e.target.classList.contains(classNames.checkboxIcon)) {\n                    li.classList.add(classNames.focused);\n                    if (isNullOrUndefined(li.querySelector('.' + classNames.checked))) {\n                        let args = {\n                            curData: undefined, dataSource: undefined, fields: undefined, options: undefined,\n                            text: undefined, item: li\n                        };\n                        this.checkInternally(args, args.item.querySelector('.' + classNames.checkboxWrapper));\n                    }\n                    else {\n                        this.uncheckItem(li);\n                        li.classList.add(classNames.focused);\n                    }\n                    if (this.enableVirtualization) {\n                        this.virtualizationModule.setCheckboxLI(li, e);\n                    }\n                    if (e) {\n                        let eventArgs = this.selectEventData(li, e);\n                        let checkIcon = li.querySelector('.' + classNames.checkboxIcon);\n                        merge(eventArgs, { isChecked: checkIcon.classList.contains(classNames.checked) });\n                        this.trigger('select', eventArgs);\n                    }\n                }\n                else if (li.classList.contains(classNames.hasChild)) {\n                    this.removeHover();\n                    this.removeSelect();\n                    this.removeSelect(li);\n                    this.setSelectLI(li, e);\n                    li.classList.remove(classNames.selected);\n                }\n                else {\n                    this.setCheckboxLI(li, e);\n                }\n            }\n            else {\n                this.setSelectLI(li, e);\n            }\n            closestElement = closest(e.target, 'li');\n            if (!isNullOrUndefined(closestElement)) {\n                if (closestElement.classList.contains('e-has-child') &&\n                    !e.target.parentElement.classList.contains('e-listview-checkbox')) {\n                    closestElement.classList.add(classNames.disable);\n                }\n            }\n        }\n        if (isBlazor() && this.isServerRendered && this.enableVirtualization) {\n            let ulElementContainer = this.element.querySelector('.' + classNames.virtualElementContainer);\n            if (ulElementContainer.querySelector('.e-active')) {\n                // tslint:disable-next-line:no-any\n                let selectedElements = ulElementContainer.querySelectorAll('.e-active');\n                // tslint:enable-next-line:no-any\n                if (this.showCheckBox) {\n                    for (let i = 0; i < selectedElements.length; i++) {\n                        // tslint:disable-next-line:no-any\n                        if (!this.previousSelectedItems.includes(selectedElements[i].getAttribute('data-uid'))) {\n                            this.previousSelectedItems.push(selectedElements[i].getAttribute('data-uid'));\n                        }\n                        // tslint:enable-next-line:no-any\n                    }\n                }\n                else {\n                    this.previousSelectedItems[0] = (ulElementContainer.querySelector('.e-active').getAttribute('data-uid'));\n                }\n            }\n            if (ulElementContainer.querySelector('.e-focused')) {\n                // tslint:disable-next-line:no-any\n                let focusElement = ulElementContainer.querySelector('.e-focused');\n                // tslint:enable-next-line:no-any\n                if (!focusElement.classList.contains('e-active')) {\n                    let focusElementId = focusElement.getAttribute('data-uid');\n                    // tslint:disable-next-line:no-any\n                    if (this.previousSelectedItems.includes(focusElementId)) {\n                        let selectedElement1 = this.previousSelectedItems.slice(0, this.previousSelectedItems.indexOf(focusElementId));\n                        let selectedElement2 = this.previousSelectedItems.\n                            slice(this.previousSelectedItems.indexOf(focusElementId) + 1, this.previousSelectedItems.length);\n                        this.previousSelectedItems = selectedElement1.concat(selectedElement2);\n                    }\n                    // tslint:enable-next-line:no-any\n                }\n            }\n        }\n    }\n    removeElement(element) {\n        return element && element.parentNode && element.parentNode.removeChild(element);\n    }\n    hoverHandler(e) {\n        let curLi = closest(e.target.parentNode, '.' + classNames.listItem);\n        this.setHoverLI(curLi);\n    }\n    leaveHandler(e) {\n        this.removeHover();\n    }\n    ;\n    homeKeyHandler(e, end) {\n        if (Object.keys(this.dataSource).length && this.curUL) {\n            if (this.selectedItems) {\n                (this.selectedItems.item).setAttribute('aria-selected', 'false');\n            }\n            let li = this.curUL.querySelectorAll('.' + classNames.listItem);\n            let focusedElement = this.curUL.querySelector('.' + classNames.focused) ||\n                this.curUL.querySelector('.' + classNames.selected);\n            if (focusedElement) {\n                focusedElement.classList.remove(classNames.focused);\n                if (!this.showCheckBox) {\n                    focusedElement.classList.remove(classNames.selected);\n                }\n            }\n            let index = !end ? 0 : li.length - 1;\n            if (li[index].classList.contains(classNames.hasChild) || this.showCheckBox) {\n                li[index].classList.add(classNames.focused);\n            }\n            else {\n                this.setSelectLI(li[index], e);\n            }\n            if (li[index]) {\n                this.element.setAttribute('aria-activedescendant', li[index].id.toString());\n            }\n            else {\n                this.element.removeAttribute('aria-activedescendant');\n            }\n        }\n    }\n    onArrowKeyDown(e, prev) {\n        let siblingLI;\n        let li;\n        let hasChild = !isNullOrUndefined(this.curUL.querySelector('.' + classNames.hasChild)) ? true : false;\n        if (hasChild || this.showCheckBox) {\n            li = this.curUL.querySelector('.' + classNames.focused) || this.curUL.querySelector('.' + classNames.selected);\n            siblingLI = ListBase.getSiblingLI(this.curUL.querySelectorAll('.' + classNames.listItem), li, prev);\n            if (!isNullOrUndefined(siblingLI)) {\n                if (li) {\n                    li.classList.remove(classNames.focused);\n                    if (!this.showCheckBox) {\n                        li.classList.remove(classNames.selected);\n                    }\n                }\n                if (siblingLI.classList.contains(classNames.hasChild) || this.showCheckBox) {\n                    siblingLI.classList.add(classNames.focused);\n                }\n                else {\n                    this.setSelectLI(siblingLI, e);\n                }\n            }\n        }\n        else {\n            li = this.curUL.querySelector('.' + classNames.selected);\n            siblingLI = ListBase.getSiblingLI(this.curUL.querySelectorAll('.' + classNames.listItem), li, prev);\n            this.setSelectLI(siblingLI, e);\n        }\n        if (siblingLI) {\n            this.element.setAttribute('aria-activedescendant', siblingLI.id.toString());\n        }\n        else {\n            this.element.removeAttribute('aria-activedescendant');\n        }\n        return siblingLI;\n    }\n    arrowKeyHandler(e, prev) {\n        e.preventDefault();\n        if (Object.keys(this.dataSource).length && this.curUL) {\n            let siblingLI = this.onArrowKeyDown(e, prev);\n            let elementTop = this.element.getBoundingClientRect().top;\n            let elementHeight = this.element.getBoundingClientRect().height;\n            let firstItemBounds = this.curUL.querySelector('.' + classNames.listItem).getBoundingClientRect();\n            let heightDiff;\n            let groupItemBounds;\n            if (this.fields.groupBy) {\n                groupItemBounds = this.curUL.querySelector('.' + classNames.groupListItem).getBoundingClientRect();\n            }\n            if (siblingLI) {\n                let siblingTop = siblingLI.getBoundingClientRect().top;\n                let siblingHeight = siblingLI.getBoundingClientRect().height;\n                if (!prev) {\n                    let height = this.isWindow ? window.innerHeight : elementHeight;\n                    heightDiff = this.isWindow ? (siblingTop + siblingHeight) :\n                        ((siblingTop - elementTop) + siblingHeight);\n                    if (heightDiff > height) {\n                        this.isWindow ? window.scroll(0, pageYOffset + (heightDiff - height)) :\n                            this.element.scrollTop = this.element.scrollTop + (heightDiff - height);\n                    }\n                }\n                else {\n                    heightDiff = this.isWindow ? siblingTop : (siblingTop - elementTop);\n                    if (heightDiff < 0) {\n                        this.isWindow ? window.scroll(0, pageYOffset + heightDiff) :\n                            this.element.scrollTop = this.element.scrollTop + heightDiff;\n                    }\n                }\n            }\n            else if (this.enableVirtualization && prev && this.virtualizationModule.uiFirstIndex) {\n                this.onUIScrolled = () => {\n                    this.onArrowKeyDown(e, prev);\n                    this.onUIScrolled = undefined;\n                };\n                heightDiff = this.virtualizationModule.listItemHeight;\n                this.isWindow ? window.scroll(0, pageYOffset - heightDiff) :\n                    this.element.scrollTop = this.element.scrollTop - heightDiff;\n            }\n            else if (prev) {\n                if (this.showHeader && this.headerEle) {\n                    let topHeight = groupItemBounds ? groupItemBounds.top : firstItemBounds.top;\n                    let headerBounds = this.headerEle.getBoundingClientRect();\n                    heightDiff = headerBounds.top < 0 ? (headerBounds.height - topHeight) : 0;\n                    this.isWindow ? window.scroll(0, pageYOffset - heightDiff)\n                        : this.element.scrollTop = 0;\n                }\n                else if (this.fields.groupBy) {\n                    heightDiff = this.isWindow ? (groupItemBounds.top < 0 ? groupItemBounds.top : 0) :\n                        (elementTop - firstItemBounds.top) + groupItemBounds.height;\n                    this.isWindow ? window.scroll(0, pageYOffset + heightDiff) :\n                        this.element.scrollTop = this.element.scrollTop - heightDiff;\n                }\n            }\n        }\n    }\n    enterKeyHandler(e) {\n        if (Object.keys(this.dataSource).length && this.curUL) {\n            let hasChild = !isNullOrUndefined(this.curUL.querySelector('.' + classNames.hasChild)) ? true : false;\n            let li = this.curUL.querySelector('.' + classNames.focused);\n            if (hasChild && li) {\n                li.classList.remove(classNames.focused);\n                if (this.showCheckBox) {\n                    this.removeSelect();\n                    this.removeSelect(li);\n                    this.removeHover();\n                }\n                this.setSelectLI(li, e);\n            }\n        }\n    }\n    spaceKeyHandler(e) {\n        if (this.enable && this.showCheckBox && Object.keys(this.dataSource).length && this.curUL) {\n            let li = this.curUL.querySelector('.' + classNames.focused);\n            if (!isNullOrUndefined(li) && isNullOrUndefined(li.querySelector('.' + classNames.checked))) {\n                let args = {\n                    curData: undefined, dataSource: undefined, fields: undefined, options: undefined,\n                    text: undefined, item: li\n                };\n                this.checkInternally(args, args.item.querySelector('.' + classNames.checkboxWrapper));\n            }\n            else {\n                this.uncheckItem(li);\n            }\n        }\n    }\n    keyActionHandler(e) {\n        switch (e.keyCode) {\n            case 36:\n                this.homeKeyHandler(e);\n                break;\n            case 35:\n                this.homeKeyHandler(e, true);\n                break;\n            case 40:\n                this.arrowKeyHandler(e);\n                break;\n            case 38:\n                this.arrowKeyHandler(e, true);\n                break;\n            case 13:\n                this.enterKeyHandler(e);\n                break;\n            case 8:\n                if (this.showCheckBox && this.curDSLevel[this.curDSLevel.length - 1]) {\n                    this.uncheckAllItems();\n                }\n                this.back();\n                break;\n            case 32:\n                this.spaceKeyHandler(e);\n                break;\n        }\n    }\n    swipeActionHandler(e) {\n        if (e.swipeDirection === 'Right' && e.velocity > swipeVelocity && e.originalEvent.type === 'touchend') {\n            if (this.showCheckBox && this.curDSLevel[this.curDSLevel.length - 1]) {\n                this.uncheckAllItems();\n            }\n            this.back();\n        }\n    }\n    focusout() {\n        if (Object.keys(this.dataSource).length && this.curUL) {\n            let focusedElement = this.curUL.querySelector('.' + classNames.focused);\n            let activeElement = this.curUL.querySelector('[aria-selected = true]');\n            if (focusedElement) {\n                focusedElement.classList.remove(classNames.focused);\n                if (activeElement && !this.showCheckBox) {\n                    activeElement.classList.add(classNames.selected);\n                }\n            }\n        }\n    }\n    wireEvents() {\n        EventHandler.add(this.element, 'keydown', this.keyActionHandler, this);\n        EventHandler.add(this.element, 'click', this.clickHandler, this);\n        EventHandler.add(this.element, 'mouseover', this.hoverHandler, this);\n        EventHandler.add(this.element, 'mouseout', this.leaveHandler, this);\n        EventHandler.add(this.element, 'focusout', this.focusout, this);\n        this.touchModule = new Touch(this.element, { swipe: this.swipeActionHandler.bind(this) });\n    }\n    unWireEvents() {\n        EventHandler.remove(this.element, 'click', this.clickHandler);\n        EventHandler.remove(this.element, 'mouseover', this.hoverHandler);\n        EventHandler.remove(this.element, 'mouseout', this.leaveHandler);\n        EventHandler.remove(this.element, 'mouseover', this.hoverHandler);\n        EventHandler.remove(this.element, 'mouseout', this.leaveHandler);\n        this.touchModule.destroy();\n    }\n    removeFocus() {\n        let focusedLI = this.element.querySelectorAll('.' + classNames.focused);\n        for (let ele of focusedLI) {\n            ele.classList.remove(classNames.focused);\n        }\n    }\n    removeHover() {\n        let hoverLI = this.element.querySelector('.' + classNames.hover);\n        if (hoverLI) {\n            hoverLI.classList.remove(classNames.hover);\n        }\n    }\n    removeSelect(li) {\n        if (isNullOrUndefined(li)) {\n            let selectedLI = this.element.querySelectorAll('.' + classNames.selected);\n            for (let ele of selectedLI) {\n                if (this.showCheckBox && ele.querySelector('.' + classNames.checked)) {\n                    continue;\n                }\n                else {\n                    ele.setAttribute('aria-selected', 'false');\n                    ele.classList.remove(classNames.selected);\n                }\n            }\n        }\n        else {\n            li.classList.remove(classNames.selected);\n            li.setAttribute('aria-selected', 'false');\n        }\n    }\n    isValidLI(li) {\n        return (li && li.classList.contains(classNames.listItem)\n            && !li.classList.contains(classNames.groupListItem)\n            && !li.classList.contains(classNames.disable));\n    }\n    setCheckboxLI(li, e) {\n        if (this.isValidLI(li) && this.enable && this.showCheckBox) {\n            if (this.curUL.querySelector('.' + classNames.focused)) {\n                this.curUL.querySelector('.' + classNames.focused).classList.remove(classNames.focused);\n            }\n            li.classList.add(classNames.focused);\n            let checkboxElement = li.querySelector('.' + classNames.checkboxWrapper);\n            let checkIcon = checkboxElement.querySelector('.' + classNames.checkboxIcon + '.' + classNames.icon);\n            this.removeHover();\n            if (!checkIcon.classList.contains(classNames.checked)) {\n                checkIcon.classList.add(classNames.checked);\n                li.classList.add(classNames.selected);\n                li.setAttribute('aria-selected', 'true');\n            }\n            else {\n                checkIcon.classList.remove(classNames.checked);\n                li.classList.remove(classNames.selected);\n                li.setAttribute('aria-selected', 'false');\n            }\n            checkboxElement.setAttribute('aria-checked', checkIcon.classList.contains(classNames.checked) ?\n                'true' : 'false');\n            let eventArgs = this.selectEventData(li, e);\n            merge(eventArgs, { isChecked: checkIcon.classList.contains(classNames.checked) });\n            if (this.enableVirtualization) {\n                this.virtualizationModule.setCheckboxLI(li, e);\n            }\n            this.trigger('select', eventArgs);\n            this.setSelectedItemData(li);\n            this.renderSubList(li);\n        }\n    }\n    selectEventData(li, e) {\n        let data = this.getItemData(li);\n        let fieldData = getFieldValues(data, this.listBaseOption.fields);\n        let selectedItem;\n        if (!isNullOrUndefined(data)\n            && typeof this.dataSource[0] === 'string' || typeof this.dataSource[0] === 'number') {\n            selectedItem = { item: li, text: li && li.innerText.trim(), data: this.dataSource };\n        }\n        else {\n            selectedItem = { item: li, text: fieldData && fieldData[this.listBaseOption.fields.text], data: data };\n        }\n        let eventArgs = {};\n        merge(eventArgs, selectedItem);\n        if (e) {\n            merge(eventArgs, { isInteracted: true, event: e, index: this.curUL && Array.prototype.indexOf.call(this.curUL.children, li) });\n        }\n        return eventArgs;\n    }\n    setSelectedItemData(li) {\n        let data = this.getItemData(li);\n        let fieldData = getFieldValues(data, this.listBaseOption.fields);\n        if (!isNullOrUndefined(data) && ((typeof this.dataSource[0] === 'string') ||\n            (typeof this.dataSource[0] === 'number'))) {\n            this.selectedItems = {\n                item: li,\n                text: li && li.innerText.trim(),\n                data: this.dataSource\n            };\n        }\n        else {\n            this.selectedItems = {\n                item: li,\n                text: fieldData && fieldData[this.listBaseOption.fields.text],\n                data: data\n            };\n        }\n    }\n    setSelectLI(li, e) {\n        if (this.isValidLI(li) && !li.classList.contains(classNames.selected) && this.enable) {\n            if (!this.showCheckBox) {\n                this.removeSelect();\n            }\n            li.classList.add(classNames.selected);\n            li.setAttribute('aria-selected', 'true');\n            this.removeHover();\n            this.setSelectedItemData(li);\n            if (this.enableVirtualization) {\n                this.virtualizationModule.setSelectLI(li, e);\n            }\n            let eventArgs = this.selectEventData(li, e);\n            this.trigger('select', eventArgs);\n            this.selectedLI = li;\n            this.renderSubList(li);\n        }\n    }\n    setHoverLI(li) {\n        if (this.isValidLI(li) && !li.classList.contains(classNames.hover) && this.enable) {\n            let lastLi = this.element.querySelectorAll('.' + classNames.hover);\n            if (lastLi && lastLi.length) {\n                removeClass(lastLi, classNames.hover);\n            }\n            if (!li.classList.contains(classNames.selected) || this.showCheckBox) {\n                li.classList.add(classNames.hover);\n            }\n        }\n    }\n    //Data Source Related Functions\n    getSubDS() {\n        let levelKeys = this.curDSLevel;\n        if (levelKeys.length) {\n            let ds = this.localData;\n            for (let key of levelKeys) {\n                let field = {};\n                field[this.fields.id] = key;\n                this.curDSJSON = this.findItemFromDS(ds, field);\n                let fieldData = getFieldValues(this.curDSJSON, this.listBaseOption.fields);\n                ds = this.curDSJSON ? fieldData[this.fields.child] : ds;\n            }\n            return ds;\n        }\n        return this.localData;\n    }\n    getItemData(li) {\n        let dataSource = this.dataSource instanceof DataManager ?\n            this.localData : this.dataSource;\n        let fields = this.getElementUID(li);\n        let curDS;\n        if (isNullOrUndefined(this.element.querySelector('.' + classNames.hasChild)) && this.fields.groupBy) {\n            curDS = this.curViewDS;\n        }\n        else {\n            curDS = dataSource;\n        }\n        return this.findItemFromDS(curDS, fields);\n    }\n    findItemFromDS(dataSource, fields, parent) {\n        let resultJSON;\n        if (dataSource && dataSource.length && fields) {\n            dataSource.some((data) => {\n                let fieldData = getFieldValues(data, this.listBaseOption.fields);\n                //(!(fid) || id === fid) && (!(ftext) || text === ftext) && (!!fid || !!ftext)\n                if ((fields[this.fields.id] || fields[this.fields.text]) &&\n                    (!fields[this.fields.id] || (!isNullOrUndefined(fieldData[this.fields.id]) &&\n                        fieldData[this.fields.id].toString()) === fields[this.fields.id].toString()) &&\n                    (!fields[this.fields.text] || fieldData[this.fields.text] === fields[this.fields.text])) {\n                    resultJSON = (parent ? dataSource : data);\n                }\n                else if (typeof data !== 'object' && dataSource.indexOf(data) !== -1) {\n                    resultJSON = (parent ? dataSource : data);\n                }\n                else if (!isNullOrUndefined(fields[this.fields.id]) && isNullOrUndefined(fieldData[this.fields.id])) {\n                    let li = this.element.querySelector('[data-uid=\"'\n                        + fields[this.fields.id] + '\"]');\n                    if (li && li.innerText.trim() === fieldData[this.fields.text]) {\n                        resultJSON = data;\n                    }\n                }\n                else if (fieldData.hasOwnProperty(this.fields.child) && fieldData[this.fields.child].length) {\n                    resultJSON = this.findItemFromDS(fieldData[this.fields.child], fields, parent);\n                }\n                return !!resultJSON;\n            });\n        }\n        else {\n            resultJSON = dataSource;\n        }\n        return resultJSON;\n    }\n    getQuery() {\n        let columns = [];\n        let query = (this.query ? this.query : new Query());\n        if (!this.query) {\n            for (let column of Object.keys(this.fields.properties)) {\n                if (column !== 'tableName' && !!(this.fields[column]) &&\n                    this.fields[column] !==\n                        ListBase.defaultMappedFields[column]\n                    && columns.indexOf(this.fields[column]) === -1) {\n                    columns.push(this.fields[column]);\n                }\n            }\n            query.select(columns);\n            if (this.fields.properties.hasOwnProperty('tableName')) {\n                query.from(this.fields.tableName);\n            }\n        }\n        return query;\n    }\n    setViewDataSource(dataSource = this.localData) {\n        if (dataSource && this.fields.groupBy) {\n            if (this.sortOrder !== 'None') {\n                this.curViewDS = ListBase.groupDataSource(ListBase.getDataSource(dataSource, ListBase.addSorting(this.sortOrder, this.fields.sortBy)), this.listBaseOption.fields, this.sortOrder);\n            }\n            else {\n                this.curViewDS = ListBase.groupDataSource(dataSource, this.listBaseOption.fields, this.sortOrder);\n            }\n        }\n        else if (dataSource && this.sortOrder !== 'None') {\n            this.curViewDS = ListBase.getDataSource(dataSource, ListBase.addSorting(this.sortOrder, this.fields.sortBy));\n        }\n        else {\n            this.curViewDS = dataSource;\n        }\n    }\n    isInAnimation() {\n        return this.curUL.classList.contains('.e-animate');\n    }\n    setLocalData() {\n        this.trigger('actionBegin');\n        let listViewComponent = this;\n        if (this.dataSource instanceof DataManager) {\n            this.dataSource.executeQuery(this.getQuery()).then((e) => {\n                if (this.isDestroyed) {\n                    return;\n                }\n                this.localData = e.result;\n                if (!this.isServerRendered || (!isBlazor())) {\n                    listViewComponent.removeElement(listViewComponent.contentContainer);\n                    if (this.isReact) {\n                        this.clearTemplate();\n                    }\n                }\n                this.renderList();\n                this.trigger('actionComplete', e);\n            }).catch((e) => {\n                if (this.isDestroyed) {\n                    return;\n                }\n                this.trigger('actionFailure', e);\n            });\n        }\n        else if (!this.dataSource || !this.dataSource.length) {\n            let ul = this.element.querySelector('ul');\n            if (ul) {\n                remove(ul);\n                this.setProperties({ dataSource: ListBase.createJsonFromElement(ul) }, true);\n                this.localData = this.dataSource;\n                this.renderList();\n                this.trigger('actionComplete', { data: this.localData });\n            }\n        }\n        else {\n            this.localData = this.dataSource;\n            this.renderList();\n            this.trigger('actionComplete', { data: this.localData });\n        }\n    }\n    reRender() {\n        if (!isBlazor() || !this.isServerRendered || this.enableVirtualization) {\n            this.resetBlazorTemplates();\n            this.removeElement(this.headerEle);\n            this.removeElement(this.ulElement);\n            this.removeElement(this.contentContainer);\n            if (this.isReact) {\n                this.clearTemplate();\n            }\n            if (Object.keys(window).indexOf('ejsInterop') === -1) {\n                this.element.innerHTML = '';\n            }\n            this.headerEle = this.ulElement = this.liCollection = undefined;\n            this.header();\n        }\n        this.setLocalData();\n    }\n    resetCurrentList() {\n        this.resetBlazorTemplates();\n        this.setViewDataSource(this.curViewDS);\n        this.contentContainer.innerHTML = '';\n        this.createList();\n        this.renderIntoDom(this.curUL);\n    }\n    setAttributes(liElements) {\n        for (let i = 0; i < liElements.length; i++) {\n            let element = liElements[i];\n            if (element.classList.contains('e-list-item')) {\n                element.setAttribute('id', this.element.id + '_' + element.getAttribute('data-uid'));\n                element.setAttribute('aria-selected', 'false');\n                element.setAttribute('tabindex', '-1');\n            }\n        }\n    }\n    createList() {\n        this.currentLiElements = [];\n        this.isNestedList = false;\n        this.ulElement = this.curUL = ListBase.createList(this.createElement, this.curViewDS, this.listBaseOption, null, this);\n        this.liCollection = this.curUL.querySelectorAll('.' + classNames.listItem);\n        this.setAttributes(this.liCollection);\n        this.updateBlazorTemplates(true);\n    }\n    resetBlazorTemplates() {\n        // tslint:disable-next-line:no-any\n        let templateCollection = blazorTemplates;\n        if (this.template) {\n            templateCollection[this.LISTVIEW_TEMPLATE_ID] = [];\n            resetBlazorTemplate(this.LISTVIEW_TEMPLATE_ID, LISTVIEW_TEMPLATE_PROPERTY);\n        }\n        if (this.groupTemplate) {\n            templateCollection[this.LISTVIEW_GROUPTEMPLATE_ID] = [];\n            resetBlazorTemplate(this.LISTVIEW_GROUPTEMPLATE_ID, LISTVIEW_GROUPTEMPLATE_PROPERTY);\n        }\n        if (this.headerTemplate) {\n            resetBlazorTemplate(this.LISTVIEW_HEADERTEMPLATE_ID, LISTVIEW_HEADERTEMPLATE_PROPERTY);\n        }\n    }\n    updateBlazorTemplates(template = false, headerTemplate = false, resetExistingElements = false) {\n        if (this.template && template && !this.enableVirtualization) {\n            updateBlazorTemplate(this.LISTVIEW_TEMPLATE_ID, LISTVIEW_TEMPLATE_PROPERTY, this, resetExistingElements);\n        }\n        if (this.groupTemplate && template && !this.enableVirtualization) {\n            updateBlazorTemplate(this.LISTVIEW_GROUPTEMPLATE_ID, LISTVIEW_GROUPTEMPLATE_PROPERTY, this, resetExistingElements);\n        }\n        if (this.headerTemplate && headerTemplate) {\n            updateBlazorTemplate(this.LISTVIEW_HEADERTEMPLATE_ID, LISTVIEW_HEADERTEMPLATE_PROPERTY, this, resetExistingElements);\n        }\n    }\n    exceptionEvent(e) {\n        this.trigger('actionFailure', e);\n    }\n    UpdateCurrentUL() {\n        this.ulElement = this.curUL = this.element.querySelector('.' + classNames.parentItem);\n        if (this.curUL) {\n            // tslint:disable\n            this.liCollection = this.curUL.querySelectorAll('.' + classNames.listItem);\n            // tslint:enable\n        }\n    }\n    removeActiveClass() {\n        let listViewComponent = this;\n        setTimeout(() => {\n            let ulContainer = listViewComponent.element.querySelector('.' + classNames.virtualElementContainer);\n            for (let i = 0; i < ulContainer.childElementCount; i++) {\n                let selectedElement = ulContainer.children[i];\n                let elementIndex;\n                let hiddenElementIndex;\n                if (listViewComponent.showCheckBox) {\n                    if (listViewComponent.previousSelectedItems.length > 0) {\n                        for (let j = 0; j < listViewComponent.previousSelectedItems.length; j++) {\n                            if (selectedElement.getAttribute('data-uid') === listViewComponent.previousSelectedItems[j]) {\n                                selectedElement.classList.add('e-active');\n                                selectedElement.setAttribute('aria-selected', 'true');\n                                if (selectedElement.querySelector('.e-frame.e-icons')) {\n                                    selectedElement.querySelector('.e-frame.e-icons').classList.add('e-check');\n                                }\n                                elementIndex = i;\n                            }\n                            else {\n                                if (elementIndex !== i) {\n                                    selectedElement.classList.remove('e-active');\n                                    selectedElement.removeAttribute('aria-selected');\n                                    if (selectedElement.querySelector('.e-check')) {\n                                        selectedElement.querySelector('.e-check').classList.remove('e-check');\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    else {\n                        selectedElement.classList.remove('e-active');\n                        selectedElement.removeAttribute('aria-selected');\n                        if (selectedElement.querySelector('.e-check')) {\n                            selectedElement.querySelector('.e-check').classList.remove('e-check');\n                        }\n                    }\n                }\n                else {\n                    if (selectedElement.getAttribute('data-uid') === listViewComponent.previousSelectedItems[0]) {\n                        selectedElement.classList.add('e-active');\n                        selectedElement.setAttribute('aria-selected', 'true');\n                    }\n                    else {\n                        selectedElement.classList.remove('e-active');\n                        selectedElement.removeAttribute('aria-selected');\n                    }\n                }\n                if (listViewComponent.hiddenItems.length > 0) {\n                    for (let k = 0; k < listViewComponent.hiddenItems.length; k++) {\n                        if (selectedElement.getAttribute('data-uid') === listViewComponent.previousSelectedItems[k]) {\n                            selectedElement.style.display = 'none';\n                            hiddenElementIndex = i;\n                        }\n                        else {\n                            if (hiddenElementIndex !== i) {\n                                selectedElement.style.display = null;\n                            }\n                        }\n                    }\n                }\n                if (listViewComponent.enabledItems.length > 0) {\n                    for (let x = 0; x < listViewComponent.enabledItems.length; x++) {\n                        if (selectedElement.getAttribute('data-uid') === listViewComponent.enabledItems[x]) {\n                            if (selectedElement.classList.contains('e-disabled')) {\n                                selectedElement.classList.remove('e-disabled');\n                            }\n                        }\n                    }\n                }\n                if (listViewComponent.disabledItems.length > 0) {\n                    for (let y = 0; y < listViewComponent.disabledItems.length; y++) {\n                        if (selectedElement.getAttribute('data-uid') === listViewComponent.disabledItems[y]) {\n                            if (!selectedElement.classList.contains('e-disabled')) {\n                                selectedElement.classList.add('e-disabled');\n                            }\n                        }\n                    }\n                }\n            }\n        }, 200);\n    }\n    renderingNestedList() {\n        let ul = closest(this.liElement.parentNode, '.' + classNames.parentItem);\n        let ctrlId = this.element.id;\n        let ulElement = document.getElementById(ctrlId);\n        let currentListItem = ulElement.getElementsByTagName('UL')[ulElement.getElementsByTagName('UL').length - 1];\n        this.switchView(ul, currentListItem);\n        this.liElement = null;\n    }\n    renderSubList(li) {\n        this.liElement = li;\n        let uID = li.getAttribute('data-uid');\n        if (li.classList.contains(classNames.hasChild) && uID) {\n            let ul = closest(li.parentNode, '.' + classNames.parentItem);\n            let ele = this.element.querySelector('[pid=\\'' + uID + '\\']');\n            this.curDSLevel.push(uID);\n            this.setViewDataSource(this.getSubDS());\n            if (!ele) {\n                let data = this.curViewDS;\n                if (isBlazor() && this.isServerRendered) {\n                    // tslint:disable\n                    this.interopAdaptor.invokeMethodAsync('ListChildDataSource', data);\n                    // tslint:enable\n                }\n                else {\n                    ele = ListBase.createListFromJson(this.createElement, data, this.listBaseOption, this.curDSLevel.length, null, this);\n                    // tslint:disable-next-line\n                    if (this.isReact) {\n                        this.renderReactTemplates();\n                    }\n                    let lists = ele.querySelectorAll('.' + classNames.listItem);\n                    this.setAttributes(lists);\n                    ele.setAttribute('pID', uID);\n                    ele.style.display = 'none';\n                    this.renderIntoDom(ele);\n                    this.updateBlazorTemplates(true);\n                }\n            }\n            if (!isBlazor() || !this.isServerRendered || this.enableVirtualization) {\n                this.switchView(ul, ele);\n            }\n            this.liCollection = this.curUL.querySelectorAll('.' + classNames.listItem);\n            if (this.selectedItems) {\n                let fieldData = getFieldValues(this.selectedItems.data, this.listBaseOption.fields);\n                this.header((fieldData[this.listBaseOption.fields.text]), true, 'header');\n            }\n            this.selectedLI = undefined;\n        }\n    }\n    renderIntoDom(ele) {\n        this.contentContainer.appendChild(ele);\n    }\n    renderList(data) {\n        this.setViewDataSource(data);\n        if (!isBlazor() || !this.isServerRendered || this.enableVirtualization) {\n            if (this.enableVirtualization) {\n                if (Object.keys(this.dataSource).length) {\n                    if (!(isBlazor() && this.isServerRendered)) {\n                        if ((this.template || this.groupTemplate) && !this.virtualizationModule.isNgTemplate()) {\n                            this.listBaseOption.template = null;\n                            this.listBaseOption.groupTemplate = null;\n                            this.listBaseOption.itemCreated = this.virtualizationModule.createUIItem.bind(this.virtualizationModule);\n                        }\n                    }\n                }\n                this.virtualizationModule.uiVirtualization();\n            }\n            else {\n                this.createList();\n                this.contentContainer = this.createElement('div', { className: classNames.content });\n                this.element.appendChild(this.contentContainer);\n                this.renderIntoDom(this.ulElement);\n                // tslint:disable-next-line\n                if (this.isReact) {\n                    this.renderReactTemplates();\n                }\n            }\n        }\n    }\n    getElementUID(obj) {\n        let fields = {};\n        if (obj instanceof Element) {\n            fields[this.fields.id] = obj.getAttribute('data-uid');\n        }\n        else {\n            fields = obj;\n        }\n        return fields;\n    }\n    /**\n     * Initializes the ListView component rendering.\n     */\n    render() {\n        if (!isBlazor() || !this.isServerRendered) {\n            this.element.classList.add(classNames.root);\n            attributes(this.element, { role: 'list', tabindex: '0' });\n            this.setCSSClass();\n            this.setEnableRTL();\n            this.setEnable();\n            this.setSize();\n            this.wireEvents();\n            this.header();\n            this.setLocalData();\n            this.setHTMLAttribute();\n            // tslint:disable-next-line\n            if (this.isReact) {\n                this.renderReactTemplates();\n            }\n        }\n        else {\n            this.initBlazor(true);\n        }\n        this.rippleFn = rippleEffect(this.element, {\n            selector: '.' + classNames.listItem\n        });\n        this.renderComplete();\n    }\n    initBlazor(firstRender) {\n        if (firstRender === null) {\n            firstRender = false;\n        }\n        this.setLocalData();\n        this.setViewDataSource(this.localData);\n        this.contentContainer = this.element.querySelector('.' + classNames.content);\n        if (firstRender) {\n            this.wireEvents();\n        }\n    }\n    /**\n     * It is used to destroy the ListView component.\n     */\n    destroy() {\n        this.resetBlazorTemplates();\n        // tslint:disable-next-line\n        if (this.isReact) {\n            this.clearTemplate();\n        }\n        this.unWireEvents();\n        let classAr = [classNames.root, classNames.disable, 'e-rtl',\n            'e-has-header', 'e-lib'].concat(this.cssClass.split(' ').filter((css) => css));\n        removeClass([this.element], classAr);\n        this.element.removeAttribute('role');\n        this.element.removeAttribute('tabindex');\n        this.curUL = this.ulElement = this.liCollection = this.headerEle = undefined;\n        if (!(isBlazor() && this.isServerRendered)) {\n            this.element.innerHTML = '';\n            super.destroy();\n        }\n        else {\n            this.element.style.display = 'none';\n        }\n    }\n    /**\n     * Switches back from the navigated sub list item.\n     */\n    back() {\n        let pID = this.curDSLevel[this.curDSLevel.length - 1];\n        if (pID === undefined || this.isInAnimation()) {\n            return;\n        }\n        this.curDSLevel.pop();\n        this.setViewDataSource(this.getSubDS());\n        let toUL = this.element.querySelector('[data-uid=\\'' + pID + '\\']');\n        let fromUL = this.curUL;\n        if (!toUL) {\n            this.createList();\n            this.renderIntoDom(this.ulElement);\n            toUL = this.curUL;\n        }\n        else {\n            if (isBlazor() && this.isServerRendered && this.enableVirtualization) {\n                toUL = toUL.parentElement.parentElement.parentElement;\n            }\n            else {\n                toUL = toUL.parentElement;\n            }\n        }\n        let fieldData = getFieldValues(this.curDSJSON, this.listBaseOption.fields);\n        let text = fieldData[this.fields.text];\n        this.switchView(fromUL, toUL, true);\n        this.removeFocus();\n        let li = this.element.querySelector('[data-uid=\\'' + pID + '\\']');\n        li.classList.remove(classNames.disable);\n        li.classList.add(classNames.focused);\n        if (this.showCheckBox && li.querySelector('.' + classNames.checkboxIcon).classList.contains(classNames.checked)) {\n            li.setAttribute('aria-selected', 'true');\n        }\n        else {\n            li.classList.remove(classNames.selected);\n            li.setAttribute('aria-selected', 'false');\n        }\n        this.liCollection = this.curUL.querySelectorAll('.' + classNames.listItem);\n        if (this.enableHtmlSanitizer) {\n            this.setProperties({ headerTitle: SanitizeHtmlHelper.sanitize(this.headerTitle) }, true);\n        }\n        this.header((this.curDSLevel.length ? text : this.headerTitle), (this.curDSLevel.length ? true : false), 'header');\n    }\n    /**\n     * Selects the list item from the ListView by passing the elements or field object.\n     * @param  {Fields | HTMLElement | Element} item - We can pass element Object or Fields as Object with ID and Text fields.\n     */\n    selectItem(item) {\n        if (this.enableVirtualization) {\n            this.virtualizationModule.selectItem(item);\n        }\n        else if (this.showCheckBox) {\n            this.setCheckboxLI(this.getLiFromObjOrElement(item));\n        }\n        else {\n            isNullOrUndefined(item) ? this.removeSelect() : this.setSelectLI(this.getLiFromObjOrElement(item));\n        }\n    }\n    getLiFromObjOrElement(obj) {\n        let li;\n        let dataSource = this.dataSource instanceof DataManager ?\n            this.localData : this.dataSource;\n        if (!isNullOrUndefined(obj)) {\n            if (typeof dataSource[0] === 'string' || typeof dataSource[0] === 'number') {\n                if (obj instanceof Element) {\n                    let uid = obj.getAttribute('data-uid').toString();\n                    for (let i = 0; i < this.liCollection.length; i++) {\n                        if (this.liCollection[i].getAttribute('data-uid').toString() === uid) {\n                            li = this.liCollection[i];\n                            break;\n                        }\n                    }\n                }\n                else {\n                    Array.prototype.some.call(this.curUL.querySelectorAll('.' + classNames.listItem), (item) => {\n                        if (item.innerText.trim() === obj.toString()) {\n                            li = item;\n                            return true;\n                        }\n                        else {\n                            return false;\n                        }\n                    });\n                }\n            }\n            else {\n                let resultJSON = this.getItemData(obj);\n                let fieldData = getFieldValues(resultJSON, this.listBaseOption.fields);\n                if (resultJSON) {\n                    li = this.element.querySelector('[data-uid=\"'\n                        + fieldData[this.fields.id] + '\"]');\n                    if (!this.enableVirtualization && isNullOrUndefined(li)) {\n                        let curLi = this.element.querySelectorAll('.' + classNames.listItem);\n                        for (let i = 0; i < curLi.length; i++) {\n                            if (curLi[i].innerText.trim() === fieldData[this.fields.text]) {\n                                li = curLi[i];\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return li;\n    }\n    /**\n     * Selects multiple list items from the ListView.\n     * @param  {Fields[] | HTMLElement[] | Element[]} item - We can pass array of\n     *  elements or array of fields Object with ID and Text fields.\n     */\n    selectMultipleItems(item) {\n        if (!isNullOrUndefined(item)) {\n            for (let i = 0; i < item.length; i++) {\n                if (!isNullOrUndefined(item[i])) {\n                    this.selectItem(item[i]);\n                }\n            }\n        }\n    }\n    getParentId() {\n        let parentId = [];\n        if (this.isNestedList) {\n            for (let i = this.curDSLevel.length - 1; i >= 0; i--) {\n                parentId.push(this.curDSLevel[i]);\n            }\n        }\n        return parentId;\n    }\n    /**\n     * Gets the details of the currently selected item from the list items.\n     * @blazorType ListSelectedItem<TValue>\n     */\n    getSelectedItems() {\n        // tslint:disable-next-line:no-any\n        let finalValue;\n        let isCompleted = false;\n        this.selectedId = [];\n        let dataSource = this.dataSource instanceof DataManager ?\n            this.localData : this.dataSource;\n        if (this.enableVirtualization && !isCompleted) {\n            finalValue = this.virtualizationModule.getSelectedItems();\n            isCompleted = true;\n        }\n        else if (this.showCheckBox && !isCompleted) {\n            // tslint:disable-next-line:no-any\n            let liCollection = this.curUL.getElementsByClassName(classNames.selected);\n            let liTextCollection = [];\n            let liDataCollection = [];\n            this.selectedId = [];\n            let dataParent = [];\n            for (let i = 0; i < liCollection.length; i++) {\n                if (typeof dataSource[0] === 'string' || typeof dataSource[0] === 'number') {\n                    liTextCollection.push(liCollection[i].innerText.trim());\n                }\n                else {\n                    let tempData = this.getItemData(liCollection[i]);\n                    let fieldData = getFieldValues(tempData, this.listBaseOption.fields);\n                    if (this.isNestedList) {\n                        dataParent.push({ data: tempData, parentId: this.getParentId() });\n                    }\n                    else {\n                        liDataCollection.push(tempData);\n                    }\n                    if (fieldData) {\n                        liTextCollection.push(fieldData[this.listBaseOption.fields.text]);\n                        this.selectedId.push(fieldData[this.listBaseOption.fields.id]);\n                    }\n                    else {\n                        liTextCollection.push(undefined);\n                        this.selectedId.push(undefined);\n                    }\n                }\n            }\n            if ((typeof dataSource[0] === 'string'\n                || typeof dataSource[0] === 'number')\n                && !isCompleted) {\n                finalValue = { item: liCollection, data: dataSource, text: liTextCollection };\n                isCompleted = true;\n            }\n            if (this.isNestedList && !isCompleted) {\n                finalValue = { item: liCollection, data: dataParent, text: liTextCollection };\n                isCompleted = true;\n            }\n            else if (!isCompleted) {\n                finalValue = { item: liCollection, data: liDataCollection, text: liTextCollection };\n                isCompleted = true;\n            }\n        }\n        else if (!isCompleted) {\n            let liElement = this.element.getElementsByClassName(classNames.selected)[0];\n            let fieldData = getFieldValues(this.getItemData(liElement), this.listBaseOption.fields);\n            if ((typeof dataSource[0] === 'string'\n                || typeof dataSource[0] === 'number')\n                && !isCompleted) {\n                finalValue = (!isNullOrUndefined(liElement)) ? {\n                    item: liElement, data: dataSource,\n                    text: liElement.innerText.trim()\n                } : undefined;\n                isCompleted = true;\n            }\n            else if (!isCompleted) {\n                if (isNullOrUndefined(fieldData) || isNullOrUndefined(liElement)) {\n                    finalValue = undefined;\n                    isCompleted = true;\n                }\n                else {\n                    this.selectedId.push(fieldData[this.listBaseOption.fields.id]);\n                    finalValue = {\n                        text: fieldData[this.listBaseOption.fields.text], item: liElement,\n                        data: this.getItemData(liElement)\n                    };\n                    isCompleted = true;\n                }\n            }\n        }\n        if (isBlazor()) {\n            // tslint:disable-next-line:no-any\n            return this.blazorGetSelectedItems(finalValue);\n        }\n        else {\n            return finalValue;\n        }\n    }\n    // tslint:disable-next-line:no-any\n    blazorGetSelectedItems(finalGetSelectedItem) {\n        let blazorSelectedItem = {\n            data: [],\n            index: [],\n            parentId: [],\n            text: []\n        };\n        if (!isNullOrUndefined(finalGetSelectedItem)) {\n            if (!isNullOrUndefined(finalGetSelectedItem.data)) {\n                if (this.showCheckBox && this.isNestedList) {\n                    for (let i = 0; i < finalGetSelectedItem.data.length; i++) {\n                        blazorSelectedItem.data.push(finalGetSelectedItem.data[i].data);\n                    }\n                    if (!isNullOrUndefined(finalGetSelectedItem.data[0])\n                        && !isNullOrUndefined(finalGetSelectedItem.data[0].parentId)) {\n                        blazorSelectedItem.parentId = finalGetSelectedItem.data[0].parentId;\n                    }\n                }\n                else {\n                    blazorSelectedItem.data = this.convertItemsToArray(finalGetSelectedItem.data);\n                }\n            }\n            if (!isNullOrUndefined(finalGetSelectedItem.text)) {\n                blazorSelectedItem.text = this.convertItemsToArray(finalGetSelectedItem.text);\n            }\n            if (!isNullOrUndefined(finalGetSelectedItem.index)) {\n                blazorSelectedItem.index = this.convertItemsToArray(finalGetSelectedItem.index);\n            }\n        }\n        return blazorSelectedItem;\n    }\n    // tslint:disable-next-line:no-any\n    convertItemsToArray(items) {\n        return Array.isArray(items) ? [...items] : [items];\n    }\n    /**\n     * Finds out an item details from the current list.\n     * @param  {Fields | HTMLElement | Element} item - We can pass element Object or Fields as Object with ID and Text fields.\n     * @blazorType TValue\n     */\n    findItem(item) {\n        return this.getItemData(item);\n    }\n    /**\n     * Enables the disabled list items by passing the Id and text fields.\n     * @param  {Fields | HTMLElement | Element} item - We can pass element Object or Fields as Object with ID and Text fields.\n     */\n    enableItem(item) {\n        this.setItemState(item, true);\n        if (this.enableVirtualization) {\n            this.virtualizationModule.enableItem(item);\n        }\n    }\n    /**\n     * Disables the list items by passing the Id and text fields.\n     * @param  {Fields | HTMLElement | Element} item - We can pass element Object or Fields as Object with ID and Text fields.\n     */\n    disableItem(item) {\n        this.setItemState(item, false);\n        if (this.enableVirtualization) {\n            this.virtualizationModule.disableItem(item);\n        }\n    }\n    //A function that used to set state of the list item like enable, disable.\n    setItemState(item, isEnable) {\n        let resultJSON = this.getItemData(item);\n        let fieldData = getFieldValues(resultJSON, this.listBaseOption.fields);\n        if (resultJSON) {\n            let li = this.element.querySelector('[data-uid=\"' + fieldData[this.fields.id] + '\"]');\n            if (isEnable) {\n                if (li) {\n                    li.classList.remove(classNames.disable);\n                }\n                delete resultJSON[this.fields.enabled];\n            }\n            else if (!isEnable) {\n                if (li) {\n                    li.classList.add(classNames.disable);\n                }\n                resultJSON[this.fields.enabled] = false;\n            }\n        }\n    }\n    /**\n     * Shows the hide list item from the ListView.\n     * @param  {Fields | HTMLElement | Element} item - We can pass element Object or Fields as Object with ID and Text fields.\n     */\n    showItem(item) {\n        this.showHideItem(item, false, '');\n        if (this.enableVirtualization) {\n            this.virtualizationModule.showItem(item);\n        }\n    }\n    /**\n     * Hides an list item from the ListView.\n     * @param  {Fields | HTMLElement | Element} item - We can pass element Object or Fields as Object with ID and Text fields.\n     */\n    hideItem(item) {\n        this.showHideItem(item, true, 'none');\n        if (this.enableVirtualization) {\n            this.virtualizationModule.hideItem(item);\n        }\n    }\n    showHideItem(obj, isHide, display) {\n        let resultJSON = this.getItemData(obj);\n        let fieldData = getFieldValues(resultJSON, this.listBaseOption.fields);\n        if (resultJSON) {\n            let li = this.element.querySelector('[data-uid=\"' + fieldData[this.fields.id] + '\"]');\n            if (li) {\n                li.style.display = display;\n            }\n            if (isHide) {\n                resultJSON[this.fields.isVisible] = false;\n            }\n            else {\n                delete resultJSON[this.fields.isVisible];\n            }\n        }\n    }\n    /**\n     * Adds the new list item(s) to the current ListView.\n     * To add a new list item(s) in the ListView, we need to pass the `data` as an array of items that need\n     * to be added and `fields` as the target item to which we need to add the given item(s) as its children.\n     * For example fields: { text: 'Name', tooltip: 'Name', id:'id'}\n     * @param  {{[key:string]:Object}[]} data - JSON Array Data that need to add.\n     * @param  {Fields} fields - Target item to add the given data as its children (can be null).\n     * @blazorArgsType data|object,fields|object\n     */\n    addItem(data, fields = undefined) {\n        const dataSource = this.dataSource instanceof DataManager\n            ? this.localData : this.dataSource;\n        this.addItemInternally(data, fields, dataSource);\n    }\n    addItemInternally(data, fields, dataSource) {\n        if (data instanceof Array) {\n            if (this.enableVirtualization) {\n                this.virtualizationModule.addItem(data, fields, dataSource);\n            }\n            else {\n                const ds = this.findItemFromDS(dataSource, fields);\n                let child;\n                if (ds) {\n                    const fieldData = getFieldValues(ds, this.listBaseOption.fields);\n                    child = fieldData[this.fields.child];\n                    if (!child) {\n                        child = [];\n                    }\n                    child = child.concat(data);\n                }\n                // check for whether target is nested level or top level in list\n                if (ds instanceof Array) {\n                    for (let i = 0; i < data.length; i++) {\n                        dataSource.push(data[i]);\n                        this.setViewDataSource(dataSource);\n                        // since it is top level target, get the content container's first child\n                        // as it is always the top level UL\n                        const targetUL = this.contentContainer\n                            ? this.contentContainer.children[0]\n                            : null;\n                        // check for whether the list was previously empty or not, if it is\n                        // proceed to call initial render\n                        if (this.contentContainer && targetUL) {\n                            this.addItemIntoDom(data[i], targetUL, this.curViewDS);\n                        }\n                        else {\n                            this.reRender();\n                        }\n                    }\n                    if (this.curUL) {\n                        this.updateBlazorTemplates(true);\n                    }\n                    this.liCollection = this.curUL.querySelectorAll('.' + classNames.listItem);\n                }\n                else {\n                    // proceed as target item is in nested level, only if it is a valid target ds\n                    if (ds) {\n                        ds[this.fields.child] = child;\n                        this.addItemInNestedList(ds, data);\n                    }\n                }\n            }\n        }\n    }\n    addItemInNestedList(targetItemData, itemQueue) {\n        const targetItemId = targetItemData[this.fields.id];\n        const targetChildDS = targetItemData[this.fields.child];\n        const isAlreadyRenderedUL = this.element.querySelector('[pid=\\'' + targetItemId + '\\']');\n        const targetLi = this.element.querySelector('[data-uid=\\'' + targetItemId + '\\']');\n        const targetUL = isAlreadyRenderedUL\n            ? isAlreadyRenderedUL\n            : targetLi\n                ? closest(targetLi, 'ul')\n                : null;\n        const targetDS = isAlreadyRenderedUL ? targetChildDS : [targetItemData];\n        const isTargetEmptyChild = targetLi ? !targetLi.classList.contains(classNames.hasChild) : false;\n        let isRefreshTemplateNeeded = false;\n        // if li element is already rendered, that element needs to be refreshed so that\n        // it becomes child viewable due to new child items are added now\n        if (isTargetEmptyChild) {\n            const targetRefreshedElement = ListBase.createListItemFromJson(this.createElement, targetDS, this.listBaseOption, null, null, this);\n            this.setAttributes(targetRefreshedElement);\n            targetUL.insertBefore(targetRefreshedElement[0], targetLi);\n            detach(targetLi);\n            isRefreshTemplateNeeded = true;\n        }\n        // if it is already rendered element, we need to create and append new elements\n        if (isAlreadyRenderedUL && itemQueue) {\n            for (let i = 0; i < itemQueue.length; i++) {\n                targetDS.push(itemQueue[i]);\n                this.addItemIntoDom(itemQueue[i], targetUL, targetDS);\n            }\n            isRefreshTemplateNeeded = true;\n        }\n        if (isRefreshTemplateNeeded) {\n            this.updateBlazorTemplates(true);\n        }\n    }\n    addItemIntoDom(currentItem, targetUL, curViewDS) {\n        let index = curViewDS.indexOf(currentItem);\n        this.addListItem(currentItem, index, targetUL, curViewDS);\n        let curItemDS = curViewDS[index - 1];\n        if (curItemDS && curItemDS.isHeader && curItemDS.items.length === 1) {\n            this.addListItem(curItemDS, (index - 1), targetUL, curViewDS);\n        }\n    }\n    addListItem(dataSource, index, ulElement, curViewDS) {\n        let target = this.getLiFromObjOrElement(curViewDS[index + 1]) ||\n            this.getLiFromObjOrElement(curViewDS[index + 2]) || null;\n        let li = ListBase.createListItemFromJson(this.createElement, [dataSource], this.listBaseOption, null, null, this);\n        this.setAttributes(li);\n        ulElement.insertBefore(li[0], target);\n    }\n    /**\n     * Removes the list item from the data source based on a passed\n     *  element like fields: { text: 'Name', tooltip: 'Name', id:'id'}\n     * @param  {Fields | HTMLElement | Element} item - We can pass element Object or Fields as Object with ID and Text fields.\n     */\n    removeItem(item) {\n        const listDataSource = this.dataSource instanceof DataManager\n            ? this.localData : this.dataSource;\n        if (this.enableVirtualization) {\n            this.virtualizationModule.removeItem(item);\n        }\n        else {\n            this.removeItemFromList(item, listDataSource);\n            this.updateBlazorTemplates(true);\n        }\n    }\n    removeItemFromList(obj, listDataSource) {\n        const curViewDS = this.curViewDS;\n        let fields = obj instanceof Element ? this.getElementUID(obj) : obj;\n        let dataSource;\n        dataSource = this.findItemFromDS(listDataSource, fields, true);\n        if (dataSource) {\n            let data;\n            data = this.findItemFromDS(dataSource, fields);\n            let index = curViewDS.indexOf(data);\n            let li = this.getLiFromObjOrElement(obj);\n            let groupLi;\n            this.validateNestedView(li);\n            if (this.fields.groupBy && this.curViewDS[index - 1] &&\n                curViewDS[index - 1].isHeader &&\n                curViewDS[index - 1].items.length === 1) {\n                if (li && li.previousElementSibling.classList.contains(classNames.groupListItem) &&\n                    (isNullOrUndefined(li.nextElementSibling) || (li.nextElementSibling &&\n                        li.nextElementSibling.classList.contains(classNames.groupListItem)))) {\n                    groupLi = li.previousElementSibling;\n                }\n            }\n            if (li) {\n                detach(li);\n            }\n            if (groupLi) {\n                detach(groupLi);\n            }\n            // tslint:disable-next-line:no-any\n            const foundData = (dataSource.length - 1) <= 0\n                ? this.findParent(this.localData, this.fields.id, (value) => value === data[this.fields.id], null) : null;\n            let dsIndex = dataSource.indexOf(data);\n            dataSource.splice(dsIndex, 1);\n            this.setViewDataSource(listDataSource);\n            if (foundData\n                && foundData.parent\n                && Array.isArray(foundData.parent[this.fields.child])\n                && foundData.parent[this.fields.child].length <= 0) {\n                const parentLi = this.getLiFromObjOrElement(foundData.parent);\n                if (parentLi) {\n                    let li = ListBase.createListItemFromJson(this.createElement, [foundData.parent], this.listBaseOption, null, null, this);\n                    this.setAttributes(li);\n                    parentLi.parentElement.insertBefore(li[0], parentLi);\n                    parentLi.parentElement.removeChild(parentLi);\n                }\n            }\n            if (dataSource.length <= 0) {\n                this.back();\n            }\n            this.liCollection = Array.prototype.slice.call(this.element.querySelectorAll('.' + classNames.listItem));\n        }\n    }\n    // validate before removing an element whether the current view is inside target element's child view\n    validateNestedView(li) {\n        const liID = li ? li.getAttribute('data-uid').toString().toLowerCase() : null;\n        if (liID && this.curDSLevel && this.curDSLevel.length > 0) {\n            while (this.curDSLevel.some((id) => id.toString().toLowerCase() === liID)) {\n                this.back();\n            }\n        }\n    }\n    /**\n     * Removes multiple items from the ListView by passing the array of elements or array of field objects.\n     * @param  {Fields[] | HTMLElement[] | Element[]} item - We can pass array of elements or array of field Object with ID and Text fields.\n     */\n    removeMultipleItems(item) {\n        if (item.length) {\n            for (let i = 0; i < item.length; i++) {\n                this.removeItem(item[i]);\n            }\n            this.updateBlazorTemplates(true);\n        }\n    }\n    // tslint:disable-next-line:no-any\n    findParent(dataSource, id, callback, parent) {\n        if (dataSource.hasOwnProperty(id) && callback(dataSource[id]) === true) {\n            return extend({}, dataSource);\n        }\n        for (let i = 0; i < Object.keys(dataSource).length; i++) {\n            if (dataSource[Object.keys(dataSource)[i]]\n                && typeof dataSource[Object.keys(dataSource)[i]] === 'object') {\n                // tslint:disable-next-line:no-any\n                let result = this.findParent(dataSource[Object.keys(dataSource)[i]], id, callback, dataSource);\n                if (result != null) {\n                    if (!result.parent) {\n                        result.parent = parent;\n                    }\n                    return result;\n                }\n            }\n        }\n        return null;\n    }\n    // Module Required function\n    getModuleName() {\n        return 'listview';\n    }\n    requiredModules() {\n        let modules = [];\n        if (this.enableVirtualization) {\n            modules.push({ args: [this], member: 'virtualization' });\n        }\n        return modules;\n    }\n    /**\n     * Get the properties to be maintained in the persisted state.\n     */\n    getPersistData() {\n        return this.addOnPersist(['cssClass', 'enableRtl', 'htmlAttributes',\n            'enable', 'fields', 'animation', 'headerTitle',\n            'sortOrder', 'showIcon', 'height', 'width', 'showCheckBox', 'checkBoxPosition']);\n    }\n};\n__decorate([\n    Property('')\n], ListView.prototype, \"cssClass\", void 0);\n__decorate([\n    Property(false)\n], ListView.prototype, \"enableVirtualization\", void 0);\n__decorate([\n    Property({})\n], ListView.prototype, \"htmlAttributes\", void 0);\n__decorate([\n    Property(true)\n], ListView.prototype, \"enable\", void 0);\n__decorate([\n    Property([])\n], ListView.prototype, \"dataSource\", void 0);\n__decorate([\n    Property()\n], ListView.prototype, \"query\", void 0);\n__decorate([\n    Complex(ListBase.defaultMappedFields, FieldSettings)\n], ListView.prototype, \"fields\", void 0);\n__decorate([\n    Property({ effect: 'SlideLeft', duration: 400, easing: 'ease' })\n], ListView.prototype, \"animation\", void 0);\n__decorate([\n    Property('None')\n], ListView.prototype, \"sortOrder\", void 0);\n__decorate([\n    Property(false)\n], ListView.prototype, \"showIcon\", void 0);\n__decorate([\n    Property(false)\n], ListView.prototype, \"showCheckBox\", void 0);\n__decorate([\n    Property('Left')\n], ListView.prototype, \"checkBoxPosition\", void 0);\n__decorate([\n    Property('')\n], ListView.prototype, \"headerTitle\", void 0);\n__decorate([\n    Property(false)\n], ListView.prototype, \"showHeader\", void 0);\n__decorate([\n    Property(false)\n], ListView.prototype, \"enableHtmlSanitizer\", void 0);\n__decorate([\n    Property('')\n], ListView.prototype, \"height\", void 0);\n__decorate([\n    Property('')\n], ListView.prototype, \"width\", void 0);\n__decorate([\n    Property(null)\n], ListView.prototype, \"template\", void 0);\n__decorate([\n    Property(null)\n], ListView.prototype, \"headerTemplate\", void 0);\n__decorate([\n    Property(null)\n], ListView.prototype, \"groupTemplate\", void 0);\n__decorate([\n    Event()\n], ListView.prototype, \"select\", void 0);\n__decorate([\n    Event()\n], ListView.prototype, \"actionBegin\", void 0);\n__decorate([\n    Event()\n], ListView.prototype, \"actionComplete\", void 0);\n__decorate([\n    Event()\n], ListView.prototype, \"actionFailure\", void 0);\nListView = __decorate([\n    NotifyPropertyChanges\n], ListView);\n\nconst listElementCount = 1.5;\nconst windowElementCount = 3;\nclass Virtualization {\n    constructor(instance) {\n        this.elementDifference = 0;\n        this.listViewInstance = instance;\n    }\n    /**\n     * For internal use only.\n     * @private\n     */\n    isNgTemplate() {\n        return !isNullOrUndefined(this.listViewInstance.templateRef) && typeof this.listViewInstance.templateRef !== 'string';\n    }\n    /**\n     * For internal use only.\n     * @private\n     */\n    uiVirtualization() {\n        this.wireScrollEvent(false);\n        let curViewDS = this.listViewInstance.curViewDS;\n        let firstDs = curViewDS.slice(0, 1);\n        if (!(isBlazor() || this.listViewInstance.isServerRendered)) {\n            this.listViewInstance.ulElement = this.listViewInstance.curUL = ListBase.createList(this.listViewInstance.createElement, firstDs, this.listViewInstance.listBaseOption, null, this);\n            this.listViewInstance.contentContainer = this.listViewInstance.createElement('div', { className: classNames.content });\n            this.listViewInstance.element.appendChild(this.listViewInstance.contentContainer);\n            this.listViewInstance.contentContainer.appendChild(this.listViewInstance.ulElement);\n        }\n        this.listItemHeight = this.listViewInstance.ulElement.firstElementChild.getBoundingClientRect().height;\n        this.expectedDomItemCount = this.ValidateItemCount(10000);\n        this.domItemCount = this.ValidateItemCount(Object.keys(this.listViewInstance.curViewDS).length);\n        this.uiFirstIndex = 0;\n        this.uiLastIndex = this.domItemCount - 1;\n        let otherDs = curViewDS.slice(1, this.domItemCount);\n        if (!(isBlazor() || this.listViewInstance.isServerRendered)) {\n            let listItems = ListBase.createListItemFromJson(this.listViewInstance.createElement, otherDs, this.listViewInstance.listBaseOption, null, null, this);\n            append(listItems, this.listViewInstance.ulElement);\n            this.listViewInstance.liCollection = this.listViewInstance.curUL.querySelectorAll('li');\n            this.topElement = this.listViewInstance.createElement('div');\n            this.listViewInstance.ulElement.insertBefore(this.topElement, this.listViewInstance.ulElement.firstElementChild);\n            this.bottomElement = this.listViewInstance.createElement('div');\n            this.listViewInstance.ulElement.insertBefore(this.bottomElement, null);\n            this.totalHeight = (Object.keys(curViewDS).length * this.listItemHeight) - (this.domItemCount * this.listItemHeight);\n            this.topElement.style.height = 0 + 'px';\n            this.bottomElement.style.height = this.totalHeight + 'px';\n            this.topElementHeight = 0;\n            this.bottomElementHeight = this.totalHeight;\n        }\n        else {\n            this.listViewInstance.contentContainer = this.listViewInstance.element.querySelector('.e-content');\n            this.listViewInstance.liCollection = this.listViewInstance.curUL.querySelectorAll('li');\n        }\n        this.listDiff = 0;\n        this.uiIndicesInitialization();\n    }\n    wireScrollEvent(destroy) {\n        if (!destroy) {\n            if (!(isBlazor() && this.listViewInstance.isServerRendered)) {\n                if (this.listViewInstance.isWindow) {\n                    this.onVirtualScroll = this.onVirtualUiScroll.bind(this);\n                    window.addEventListener('scroll', this.onVirtualScroll);\n                }\n                else {\n                    EventHandler.add(this.listViewInstance.element, 'scroll', this.onVirtualUiScroll, this);\n                }\n            }\n            else {\n                if (this.listViewInstance.isWindow) {\n                    // tslint:disable-next-line:no-any\n                    this.onVirtualScroll = debounce(this.onVirtualUiScroll.bind(this), 350);\n                    // tslint:enable-next-line:no-any      \n                    this.updateUl = this.updateUlContainer.bind(this);\n                    window.addEventListener('scroll', this.onVirtualScroll);\n                    window.addEventListener('scroll', this.updateUl);\n                }\n                else {\n                    EventHandler.add(this.listViewInstance.element, 'scroll', debounce(this.onVirtualUiScroll, 350), this);\n                    EventHandler.add(this.listViewInstance.element, 'scroll', this.updateUlContainer, this);\n                }\n            }\n        }\n        else {\n            this.listViewInstance.isWindow ? window.removeEventListener('scroll', this.onVirtualScroll) :\n                EventHandler.remove(this.listViewInstance.element, 'scroll', this.onVirtualUiScroll);\n            this.listViewInstance.isWindow ? window.removeEventListener('scroll', this.updateUl) :\n                EventHandler.remove(this.listViewInstance.element, 'scroll', this.updateUlContainer);\n        }\n    }\n    updateUlContainer(e) {\n        let listDiff;\n        let virtualElementContainer = this.listViewInstance.ulElement.querySelector('.' + classNames.virtualElementContainer);\n        if (isNullOrUndefined(this.listViewInstance.liElementHeight)) {\n            this.listViewInstance.updateLiElementHeight();\n        }\n        if (this.listViewInstance.isWindow) {\n            // tslint:disable-next-line:no-any\n            listDiff = Math.round(e.target.documentElement.scrollTop / this.listViewInstance.liElementHeight) - 2;\n            // tslint:enable-next-line:no-any  \n        }\n        else {\n            // tslint:disable-next-line:no-any\n            listDiff = Math.round(e.target.scrollTop / this.listViewInstance.liElementHeight) - 2;\n            // tslint:enable-next-line:no-any  \n        }\n        if (((listDiff - 1) * this.listViewInstance.liElementHeight) < 0) {\n            virtualElementContainer.style.top = '0px';\n        }\n        else {\n            virtualElementContainer.style.top = (listDiff) * this.listViewInstance.liElementHeight + 'px';\n        }\n    }\n    ValidateItemCount(dataSourceLength) {\n        const height = parseFloat(formatUnit(this.listViewInstance.height));\n        let itemCount;\n        if (this.listViewInstance.isWindow) {\n            itemCount = Math.round((window.innerHeight / this.listItemHeight) * windowElementCount);\n        }\n        else {\n            if (typeof this.listViewInstance.height === 'string' && this.listViewInstance.height.indexOf('%') !== -1) {\n                // tslint:disable-next-line:max-line-length\n                itemCount = Math.round((this.listViewInstance.element.getBoundingClientRect().height / this.listItemHeight) * listElementCount);\n            }\n            else {\n                itemCount = Math.round((height / this.listItemHeight) * listElementCount);\n            }\n        }\n        if (itemCount > dataSourceLength) {\n            itemCount = dataSourceLength;\n        }\n        return itemCount;\n    }\n    uiIndicesInitialization() {\n        this.uiIndices = { 'activeIndices': [], 'disabledItemIndices': [], 'hiddenItemIndices': [] };\n        let data = this.listViewInstance.curViewDS;\n        for (let i = 0; i < data.length; i++) {\n            if (this.listViewInstance.showCheckBox && data[i][this.listViewInstance.fields.isChecked]) {\n                this.uiIndices.activeIndices.push(i);\n            }\n            if (!isNullOrUndefined(data[i][this.listViewInstance.fields.enabled]) && !data[i][this.listViewInstance.fields.enabled]) {\n                this.uiIndices.disabledItemIndices.push(i);\n            }\n        }\n        if (this.isNgTemplate()) {\n            let items = this.listViewInstance.element.querySelectorAll('.' + classNames.listItem);\n            for (let index = 0; index < items.length; index++) {\n                items[index].context = this.listViewInstance.viewContainerRef.get(index).context;\n            }\n        }\n    }\n    refreshItemHeight() {\n        if (this.listViewInstance.curViewDS.length) {\n            let curViewDS = this.listViewInstance.curViewDS;\n            if (isBlazor() && this.listViewInstance.isServerRendered) {\n                this.listViewInstance.ulElement.children[0].style.height =\n                    (this.listViewInstance.liElementHeight * (Object.keys(curViewDS).length)) + 'px';\n            }\n            else {\n                this.listItemHeight = this.topElement.nextSibling.getBoundingClientRect().height;\n                this.totalHeight = (Object.keys(curViewDS).length * this.listItemHeight) - (this.domItemCount * this.listItemHeight);\n                this.bottomElementHeight = this.totalHeight;\n                this.bottomElement.style.height = this.totalHeight + 'px';\n            }\n        }\n    }\n    getscrollerHeight(startingHeight) {\n        return this.listViewInstance.isWindow ? (((pageYOffset - startingHeight) <= 0) ? 0 :\n            (pageYOffset - startingHeight)) : ((this.listViewInstance.element.scrollTop - startingHeight) <= 0) ? 0 :\n            (this.listViewInstance.element.scrollTop - startingHeight);\n    }\n    onVirtualUiScroll(e) {\n        let startingHeight;\n        if (this.listViewInstance.isWindow) {\n            startingHeight = this.listViewInstance.ulElement.getBoundingClientRect().top -\n                document.documentElement.getBoundingClientRect().top;\n        }\n        else {\n            startingHeight = this.listViewInstance.headerEle ? this.listViewInstance.headerEle.getBoundingClientRect().height : 0;\n        }\n        this.scrollPosition = isNullOrUndefined(this.scrollPosition) ? 0 : this.scrollPosition;\n        let scroll = this.getscrollerHeight(startingHeight);\n        this.topElementHeight = this.listItemHeight * Math.floor(scroll / this.listItemHeight);\n        this.bottomElementHeight = this.totalHeight - this.topElementHeight;\n        [this.topElementHeight, this.bottomElementHeight] = scroll <= this.totalHeight ?\n            [this.topElementHeight, this.bottomElementHeight] : [this.totalHeight, 0];\n        if (isBlazor() && this.listViewInstance.isServerRendered) {\n            let listDiff;\n            if (isNullOrUndefined(this.listViewInstance.liElementHeight)) {\n                this.listViewInstance.updateLiElementHeight();\n            }\n            if (this.listViewInstance.isWindow) {\n                listDiff = Math.round(document.documentElement.scrollTop / this.listViewInstance.liElementHeight);\n            }\n            else {\n                // tslint:disable-next-line:no-any\n                listDiff = Math.round(e.target.scrollTop / this.listViewInstance.liElementHeight);\n                // tslint:enable-next-line:no-any\n            }\n            if ((listDiff - 2) - this.elementDifference >= 3 || (listDiff - 2) - this.elementDifference <= -1) {\n                let args = { listDiff: listDiff - 2, selectedItems: this.listViewInstance.previousSelectedItems };\n                this.listViewInstance.interopAdaptor.invokeMethodAsync('VirtalScrolling', args);\n                if (this.listViewInstance.ulElement.querySelector('.e-focused')) {\n                    this.listViewInstance.ulElement.querySelector('.e-focused').classList.remove('e-focused');\n                }\n                this.elementDifference = listDiff - 2;\n            }\n        }\n        else {\n            if (this.topElementHeight !== parseFloat(this.topElement.style.height)) {\n                this.topElement.style.height = this.topElementHeight + 'px';\n                this.bottomElement.style.height = this.bottomElementHeight + 'px';\n                if (scroll > this.scrollPosition) {\n                    let listDiff = Math.round(((this.topElementHeight / this.listItemHeight) - this.listDiff));\n                    if (listDiff > (this.expectedDomItemCount + 5)) {\n                        this.onLongScroll(listDiff, true);\n                    }\n                    else {\n                        this.onNormalScroll(listDiff, true);\n                    }\n                }\n                else {\n                    let listDiff = Math.round((this.listDiff - (this.topElementHeight / this.listItemHeight)));\n                    if (listDiff > (this.expectedDomItemCount + 5)) {\n                        this.onLongScroll(listDiff, false);\n                    }\n                    else {\n                        this.onNormalScroll(listDiff, false);\n                    }\n                }\n            }\n            this.listDiff = Math.round(this.topElementHeight / this.listItemHeight);\n            if (typeof this.listViewInstance.onUIScrolled === 'function') {\n                this.listViewInstance.onUIScrolled();\n            }\n        }\n        this.scrollPosition = scroll;\n    }\n    onLongScroll(listDiff, isScrollingDown) {\n        let index = isScrollingDown ? (this.uiFirstIndex + listDiff) : (this.uiFirstIndex - listDiff);\n        let elements = this.listViewInstance.ulElement.querySelectorAll('li');\n        for (let i = 0; i < elements.length; i++) {\n            this.updateUI(elements[i], index);\n            index++;\n        }\n        this.uiLastIndex = isScrollingDown ? (this.uiLastIndex + listDiff) : (this.uiLastIndex - listDiff);\n        this.uiFirstIndex = isScrollingDown ? (this.uiFirstIndex + listDiff) : (this.uiFirstIndex - listDiff);\n    }\n    onNormalScroll(listDiff, isScrollingDown) {\n        if (isScrollingDown) {\n            for (let i = 0; i < listDiff; i++) {\n                let index = ++this.uiLastIndex;\n                this.updateUI(this.topElement.nextElementSibling, index, this.bottomElement);\n                this.uiFirstIndex++;\n            }\n        }\n        else {\n            for (let i = 0; i < listDiff; i++) {\n                let index = --this.uiFirstIndex;\n                let target = this.topElement.nextSibling;\n                this.updateUI(this.bottomElement.previousElementSibling, index, target);\n                this.uiLastIndex--;\n            }\n        }\n    }\n    updateUiContent(element, index) {\n        let curViewDs = this.listViewInstance.curViewDS;\n        if (typeof this.listViewInstance.dataSource[0] === 'string' ||\n            typeof this.listViewInstance.dataSource[0] === 'number') {\n            element.dataset.uid = ListBase.generateId();\n            element.getElementsByClassName(classNames.listItemText)[0].innerHTML =\n                this.listViewInstance.curViewDS[index].toString();\n        }\n        else {\n            element.dataset.uid = curViewDs[index][this.listViewInstance.fields.id] ?\n                curViewDs[index][this.listViewInstance.fields.id].toString() : ListBase.generateId();\n            element.getElementsByClassName(classNames.listItemText)[0].innerHTML =\n                curViewDs[index][this.listViewInstance.fields.text].toString();\n        }\n        if (this.listViewInstance.showIcon) {\n            if (element.querySelector('.' + classNames.listIcon)) {\n                detach(element.querySelector('.' + classNames.listIcon));\n            }\n            if (this.listViewInstance.curViewDS[index][this.listViewInstance.fields.iconCss]) {\n                let textContent = element.querySelector('.' + classNames.textContent);\n                let target = this.listViewInstance.createElement('div', {\n                    className: classNames.listIcon + ' ' +\n                        this.listViewInstance.curViewDS[index][this.listViewInstance.fields.iconCss]\n                });\n                textContent.insertBefore(target, element.querySelector('.' + classNames.listItemText));\n            }\n        }\n        if (this.listViewInstance.showCheckBox && this.listViewInstance.fields.groupBy) {\n            if (!this.checkListWrapper) {\n                this.checkListWrapper = this.listViewInstance.curUL.querySelector('.' + classNames.checkboxWrapper).cloneNode(true);\n            }\n            let textContent = element.querySelector('.' + classNames.textContent);\n            if (this.listViewInstance.curViewDS[index].isHeader) {\n                if (element.querySelector('.' + classNames.checkboxWrapper)) {\n                    element.classList.remove(classNames.checklist);\n                    textContent.classList.remove(classNames.checkbox);\n                    detach(element.querySelector('.' + classNames.checkboxWrapper));\n                }\n            }\n            else {\n                if (!element.querySelector('.' + classNames.checkboxWrapper)) {\n                    element.classList.add(classNames.checklist);\n                    textContent.classList.add(classNames.checkbox);\n                    textContent.insertBefore(this.checkListWrapper.cloneNode(true), element.querySelector('.' + classNames.listItemText));\n                }\n            }\n        }\n    }\n    changeElementAttributes(element, index) {\n        element.classList.remove(classNames.disable);\n        if (this.uiIndices.disabledItemIndices.length && this.uiIndices.disabledItemIndices.indexOf(index) !== -1) {\n            element.classList.add(classNames.disable);\n        }\n        element.style.display = '';\n        if (this.uiIndices.hiddenItemIndices.length && this.uiIndices.hiddenItemIndices.indexOf(index) !== -1) {\n            element.style.display = 'none';\n        }\n        if (this.listViewInstance.showCheckBox) {\n            let checklistElement = element.querySelector('.' + classNames.checkboxWrapper);\n            element.classList.remove(classNames.selected);\n            element.classList.remove(classNames.focused);\n            if (checklistElement) {\n                checklistElement.removeAttribute('aria-checked');\n                checklistElement.firstElementChild.classList.remove(classNames.checked);\n            }\n            if (this.uiIndices.activeIndices.length && this.uiIndices.activeIndices.indexOf(index) !== -1 &&\n                !this.listViewInstance.curUL.querySelector(classNames.selected)) {\n                element.classList.add(classNames.selected);\n                checklistElement.firstElementChild.classList.add(classNames.checked);\n                checklistElement.setAttribute('aria-checked', 'true');\n                if (this.activeIndex === index) {\n                    element.classList.add(classNames.focused);\n                }\n            }\n        }\n        else {\n            element.classList.remove(classNames.selected);\n            element.removeAttribute('aria-selected');\n            if (!isNullOrUndefined(this.activeIndex) && this.activeIndex === index &&\n                !this.listViewInstance.curUL.querySelector(classNames.selected)) {\n                element.classList.add(classNames.selected);\n                element.setAttribute('aria-selected', 'true');\n            }\n        }\n        if (this.listViewInstance.fields.groupBy) {\n            if (this.listViewInstance.curViewDS[index].isHeader) {\n                if (element.classList.contains(classNames.listItem)) {\n                    element.classList.remove(classNames.listItem);\n                    element.setAttribute('role', 'group');\n                    element.classList.add(classNames.groupListItem);\n                }\n            }\n            else {\n                if (element.classList.contains(classNames.groupListItem)) {\n                    element.classList.remove(classNames.groupListItem);\n                    element.setAttribute('role', 'listitem');\n                    element.classList.add(classNames.listItem);\n                }\n            }\n        }\n    }\n    findDSAndIndexFromId(ds, fields) {\n        let resultJSON = {};\n        fields = this.listViewInstance.getElementUID(fields);\n        if (!isNullOrUndefined(fields)) {\n            ds.some((data, index) => {\n                if ((fields[this.listViewInstance.fields.id] &&\n                    fields[this.listViewInstance.fields.id].toString()\n                        === (data[this.listViewInstance.fields.id] && data[this.listViewInstance.fields.id].toString())) || fields === data) {\n                    resultJSON.index = index;\n                    resultJSON.data = data;\n                    return true;\n                }\n                else {\n                    return false;\n                }\n            });\n        }\n        return resultJSON;\n    }\n    getSelectedItems() {\n        if (!isNullOrUndefined(this.activeIndex) || (this.listViewInstance.showCheckBox && this.uiIndices.activeIndices.length)) {\n            let dataCollection = [];\n            let textCollection = [];\n            if (typeof this.listViewInstance.dataSource[0] === 'string' ||\n                typeof this.listViewInstance.dataSource[0] === 'number') {\n                let curViewDS = this.listViewInstance.curViewDS;\n                if (this.listViewInstance.showCheckBox) {\n                    let indices = this.uiIndices.activeIndices;\n                    for (let i = 0; i < indices.length; i++) {\n                        dataCollection.push(curViewDS[indices[i]]);\n                    }\n                    return {\n                        text: dataCollection,\n                        data: dataCollection,\n                        index: this.uiIndices.activeIndices.map((index) => this.listViewInstance.dataSource.indexOf(curViewDS[index]))\n                    };\n                }\n                else {\n                    return {\n                        text: curViewDS[this.activeIndex],\n                        data: curViewDS[this.activeIndex],\n                        index: this.listViewInstance.dataSource.indexOf(curViewDS[this.activeIndex])\n                    };\n                }\n            }\n            else {\n                if (isBlazor() && this.listViewInstance.isServerRendered) {\n                    let scrollDiff = Math.round(this.listViewInstance.element.scrollTop /\n                        this.listViewInstance.liElementHeight) - 2;\n                    if (scrollDiff < 0) {\n                        scrollDiff = 0;\n                    }\n                    this.activeIndex += scrollDiff;\n                }\n                let curViewDS = this.listViewInstance.curViewDS;\n                let text = this.listViewInstance.fields.text;\n                if (this.listViewInstance.showCheckBox) {\n                    let indexArray = this.uiIndices.activeIndices;\n                    for (let i = 0; i < indexArray.length; i++) {\n                        textCollection.push(curViewDS[indexArray[i]][text]);\n                        dataCollection.push(curViewDS[indexArray[i]]);\n                    }\n                    let dataSource = this.listViewInstance.dataSource instanceof DataManager\n                        ? curViewDS : this.listViewInstance.dataSource;\n                    return {\n                        text: textCollection,\n                        data: dataCollection,\n                        index: this.uiIndices.activeIndices.map((index) => dataSource.indexOf(curViewDS[index]))\n                    };\n                }\n                else {\n                    let dataSource = this.listViewInstance.dataSource instanceof DataManager\n                        ? curViewDS : this.listViewInstance.dataSource;\n                    return {\n                        text: curViewDS[this.activeIndex][this.listViewInstance.fields.text],\n                        data: curViewDS[this.activeIndex],\n                        index: dataSource.indexOf(curViewDS[this.activeIndex])\n                    };\n                }\n            }\n        }\n        else {\n            return undefined;\n        }\n    }\n    selectItem(obj) {\n        let resutJSON = this.findDSAndIndexFromId(this.listViewInstance.curViewDS, obj);\n        if (Object.keys(resutJSON).length) {\n            let isSelected = this.activeIndex === resutJSON.index;\n            let isChecked;\n            this.activeIndex = resutJSON.index;\n            if (this.listViewInstance.showCheckBox) {\n                if (this.uiIndices.activeIndices.indexOf(resutJSON.index) === -1) {\n                    isChecked = true;\n                    this.uiIndices.activeIndices.push(resutJSON.index);\n                }\n                else {\n                    isChecked = false;\n                    this.uiIndices.activeIndices.splice(this.uiIndices.activeIndices.indexOf(resutJSON.index), 1);\n                }\n                if (this.listViewInstance.curUL.querySelector('.' + classNames.focused)) {\n                    this.listViewInstance.curUL.querySelector('.' + classNames.focused).classList.remove(classNames.focused);\n                }\n            }\n            if (this.listViewInstance.getLiFromObjOrElement(obj)) {\n                if (this.listViewInstance.showCheckBox) {\n                    this.listViewInstance.setCheckboxLI(this.listViewInstance.getLiFromObjOrElement(obj));\n                }\n                else {\n                    this.listViewInstance.setSelectLI(this.listViewInstance.getLiFromObjOrElement(obj));\n                }\n            }\n            else {\n                let eventArgs;\n                if (typeof this.listViewInstance.dataSource[0] === 'string' ||\n                    typeof this.listViewInstance.dataSource[0] === 'number') {\n                    eventArgs = {\n                        text: this.listViewInstance.curViewDS[this.activeIndex],\n                        data: this.listViewInstance.curViewDS[this.activeIndex],\n                        index: this.activeIndex\n                    };\n                }\n                else {\n                    let curViewDS = this.listViewInstance.curViewDS;\n                    eventArgs = {\n                        text: curViewDS[this.activeIndex][this.listViewInstance.fields.text],\n                        data: curViewDS[this.activeIndex],\n                        index: this.activeIndex\n                    };\n                }\n                if (this.listViewInstance.showCheckBox) {\n                    eventArgs.isChecked = isChecked;\n                    this.listViewInstance.trigger('select', eventArgs);\n                }\n                else if (!isSelected) {\n                    this.listViewInstance.removeSelect();\n                    this.listViewInstance.trigger('select', eventArgs);\n                }\n            }\n        }\n        else if (isNullOrUndefined(obj) && !this.listViewInstance.showCheckBox) {\n            this.listViewInstance.removeSelect();\n            this.activeIndex = undefined;\n        }\n        if (isBlazor() && this.listViewInstance.isServerRendered) {\n            // tslint:disable-next-line:no-any\n            let elementId = resutJSON.data[this.listViewInstance.fields.id];\n            // tslint:enable-next-line:no-any\n            if (this.listViewInstance.showCheckBox) {\n                if (!this.listViewInstance.previousSelectedItems.includes(elementId)) {\n                    this.listViewInstance.previousSelectedItems.push(elementId);\n                }\n                else {\n                    let indexPosition = this.listViewInstance.previousSelectedItems.indexOf(elementId);\n                    if (indexPosition > -1) {\n                        this.listViewInstance.previousSelectedItems.splice(indexPosition, 1);\n                    }\n                }\n            }\n            else {\n                this.listViewInstance.previousSelectedItems[0] = elementId;\n            }\n            this.listViewInstance.removeActiveClass();\n        }\n    }\n    enableItem(obj) {\n        let resutJSON = this.findDSAndIndexFromId(this.listViewInstance.curViewDS, obj);\n        if (isBlazor() && this.listViewInstance.isServerRendered) {\n            let itemId = resutJSON.data[this.listViewInstance.fields.id];\n            if (!this.listViewInstance.enabledItems.includes(itemId)) {\n                this.listViewInstance.enabledItems.push(itemId);\n                this.listViewInstance.removeActiveClass();\n            }\n            if (this.listViewInstance.disabledItems.includes(itemId)) {\n                let indexPosition = this.listViewInstance.disabledItems.indexOf(itemId);\n                if (indexPosition > -1) {\n                    this.listViewInstance.disabledItems.splice(indexPosition, 1);\n                }\n            }\n        }\n        else {\n            if (Object.keys(resutJSON).length) {\n                this.uiIndices.disabledItemIndices.splice(this.uiIndices.disabledItemIndices.indexOf(resutJSON.index), 1);\n            }\n        }\n    }\n    disableItem(obj) {\n        let resutJSON = this.findDSAndIndexFromId(this.listViewInstance.curViewDS, obj);\n        if (isBlazor() && this.listViewInstance.isServerRendered) {\n            let liElementId = resutJSON.data[this.listViewInstance.fields.id];\n            if (!this.listViewInstance.disabledItems.includes(liElementId)) {\n                this.listViewInstance.disabledItems.push(liElementId);\n                this.listViewInstance.removeActiveClass();\n            }\n            if (this.listViewInstance.enabledItems.includes(liElementId)) {\n                let indexPosition = this.listViewInstance.enabledItems.indexOf(liElementId);\n                if (indexPosition > -1) {\n                    this.listViewInstance.enabledItems.splice(indexPosition, 1);\n                }\n            }\n        }\n        else {\n            if (Object.keys(resutJSON).length && this.uiIndices.disabledItemIndices.indexOf(resutJSON.index) === -1) {\n                this.uiIndices.disabledItemIndices.push(resutJSON.index);\n            }\n        }\n    }\n    showItem(obj) {\n        let resutJSON = this.findDSAndIndexFromId(this.listViewInstance.curViewDS, obj);\n        if (isBlazor() && this.listViewInstance.isServerRendered) {\n            // tslint:disable-next-line:no-any\n            let hiddenElementId = resutJSON.data[this.listViewInstance.fields.id];\n            // tslint:enable-next-line:no-any\n            if (this.listViewInstance.hiddenItems.includes(hiddenElementId)) {\n                let indexPosition = this.listViewInstance.hiddenItems.indexOf(hiddenElementId);\n                if (indexPosition > -1) {\n                    this.listViewInstance.previousSelectedItems.splice(indexPosition, 1);\n                    this.listViewInstance.removeActiveClass();\n                }\n            }\n        }\n        else {\n            if (Object.keys(resutJSON).length) {\n                this.uiIndices.hiddenItemIndices.splice(this.uiIndices.hiddenItemIndices.indexOf(resutJSON.index), 1);\n            }\n        }\n    }\n    hideItem(obj) {\n        let resutJSON = this.findDSAndIndexFromId(this.listViewInstance.curViewDS, obj);\n        if (isBlazor() && this.listViewInstance.isServerRendered) {\n            // tslint:disable-next-line:no-any\n            let elementId = resutJSON.data[this.listViewInstance.fields.id];\n            // tslint:enable-next-line:no-any\n            if (!this.listViewInstance.hiddenItems.includes(elementId)) {\n                this.listViewInstance.hiddenItems.push(elementId);\n                this.listViewInstance.removeActiveClass();\n            }\n        }\n        else {\n            if (Object.keys(resutJSON).length && this.uiIndices.hiddenItemIndices.indexOf(resutJSON.index) === -1) {\n                this.uiIndices.hiddenItemIndices.push(resutJSON.index);\n            }\n        }\n    }\n    removeItem(obj) {\n        let dataSource;\n        const curViewDS = this.listViewInstance.curViewDS;\n        let resutJSON = this.findDSAndIndexFromId(curViewDS, obj);\n        if (isBlazor() && this.listViewInstance.isServerRendered) {\n            if (resutJSON.index !== undefined) {\n                // tslint:disable\n                this.listViewInstance.interopAdaptor.invokeMethodAsync('RemoveItemPosition', resutJSON.index);\n                // tslint:enable\n            }\n        }\n        if (Object.keys(resutJSON).length) {\n            dataSource = resutJSON.data;\n            if (curViewDS[resutJSON.index - 1] &&\n                curViewDS[resutJSON.index - 1].isHeader &&\n                (curViewDS[resutJSON.index - 1])\n                    .items.length === 1) {\n                this.removeUiItem(resutJSON.index - 1);\n                this.removeUiItem(resutJSON.index - 1);\n            }\n            else {\n                if (!(isBlazor() && this.listViewInstance.isServerRendered)) {\n                    this.removeUiItem(resutJSON.index);\n                }\n            }\n        }\n        const listDataSource = this.listViewInstance.dataSource instanceof DataManager\n            ? this.listViewInstance.localData : this.listViewInstance.dataSource;\n        let index = listDataSource.indexOf(dataSource);\n        if (index !== -1) {\n            listDataSource.splice(index, 1);\n            this.listViewInstance.setViewDataSource(listDataSource);\n        }\n        // recollect all the list item into collection\n        this.listViewInstance.liCollection =\n            this.listViewInstance.curUL.querySelectorAll('li');\n    }\n    setCheckboxLI(li, e) {\n        if (isBlazor() && this.listViewInstance.isServerRendered) {\n            this.uiFirstIndex = Math.round(this.listViewInstance.element.scrollTop / 36) - 4;\n            if (this.uiFirstIndex < 0) {\n                this.uiFirstIndex = 0;\n            }\n        }\n        let index = Array.prototype.indexOf.call(this.listViewInstance.curUL.querySelectorAll('li'), li) + this.uiFirstIndex;\n        this.activeIndex = Array.prototype.indexOf.call(this.listViewInstance.curUL.querySelectorAll('li'), li) + this.uiFirstIndex;\n        if (li.classList.contains(classNames.selected)) {\n            if (this.uiIndices.activeIndices.indexOf(index) === -1) {\n                this.uiIndices.activeIndices.push(index);\n            }\n        }\n        else {\n            this.uiIndices.activeIndices.splice(this.uiIndices.activeIndices.indexOf(index), 1);\n        }\n    }\n    setSelectLI(li, e) {\n        this.activeIndex = Array.prototype.indexOf.call(this.listViewInstance.curUL.querySelectorAll('li'), li) + this.uiFirstIndex;\n    }\n    checkedItem(checked) {\n        if (checked) {\n            this.uiIndices.activeIndices = [];\n            this.activeIndex = undefined;\n            let data = this.listViewInstance.curViewDS;\n            for (let index = 0; index < data.length; index++) {\n                if (!data[index].isHeader) {\n                    this.uiIndices.activeIndices.push(index);\n                }\n            }\n        }\n        else {\n            this.activeIndex = undefined;\n            this.uiIndices.activeIndices = [];\n        }\n    }\n    addUiItem(index) {\n        // virtually new add list item based on the scollbar position\n        // if the scroll bar is at the top, just pretend the new item has been added since no UI\n        // change is required for the item that has been added at last but when scroll bar is at the bottom\n        // just detach top and inject into bottom to mimic new item is added\n        let curViewDs = this.listViewInstance.curViewDS;\n        this.changeUiIndices(index, true);\n        if (this.activeIndex && this.activeIndex >= index) {\n            this.activeIndex++;\n        }\n        if (this.listViewInstance.showCheckBox &&\n            curViewDs[index][this.listViewInstance.fields.isChecked]) {\n            this.uiIndices.activeIndices.push(index);\n        }\n        if (!parseFloat(this.bottomElement.style.height) && !parseFloat(this.topElement.style.height)) {\n            this.bottomElement.style.height = parseFloat(this.bottomElement.style.height) + this.listItemHeight + 'px';\n        }\n        if (parseFloat(this.bottomElement.style.height)) {\n            let liItem = this.listViewInstance.curUL.lastElementChild.previousSibling;\n            let target = this.listViewInstance.getLiFromObjOrElement(curViewDs[index + 1]) ||\n                this.listViewInstance.getLiFromObjOrElement(curViewDs[index + 2]);\n            if (target) {\n                this.bottomElement.style.height = parseFloat(this.bottomElement.style.height) + this.listItemHeight + 'px';\n                this.updateUI(liItem, index, target);\n            }\n        }\n        else {\n            let liItem = this.listViewInstance.curUL.firstElementChild.nextSibling;\n            let target;\n            if ((Object.keys(this.listViewInstance.curViewDS).length - 1) === index) {\n                target = this.listViewInstance.curUL.lastElementChild;\n            }\n            else {\n                target = this.listViewInstance.getLiFromObjOrElement(curViewDs[index + 1]) ||\n                    this.listViewInstance.getLiFromObjOrElement(curViewDs[index + 2]);\n            }\n            this.topElement.style.height = parseFloat(this.topElement.style.height) + this.listItemHeight + 'px';\n            this.uiFirstIndex++;\n            this.uiLastIndex++;\n            if (target) {\n                this.updateUI(liItem, index, target);\n                this.listViewInstance.isWindow ? window.scrollTo(0, (pageYOffset + this.listItemHeight)) :\n                    this.listViewInstance.element.scrollTop += this.listItemHeight;\n            }\n        }\n        this.totalHeight += this.listItemHeight;\n        this.listDiff = Math.round(parseFloat(this.topElement.style.height) / this.listItemHeight);\n    }\n    removeUiItem(index) {\n        this.totalHeight -= this.listItemHeight;\n        let curViewDS = this.listViewInstance.curViewDS[index];\n        let liItem = this.listViewInstance.getLiFromObjOrElement(curViewDS);\n        this.listViewInstance.curViewDS.splice(index, 1);\n        if (this.activeIndex && this.activeIndex >= index) {\n            this.activeIndex--;\n        }\n        if (liItem) {\n            if (this.domItemCount > Object.keys(this.listViewInstance.curViewDS).length) {\n                detach(liItem);\n                this.domItemCount--;\n                this.uiLastIndex--;\n                this.totalHeight = 0;\n            }\n            else {\n                if (liItem.classList.contains(classNames.disable)) {\n                    liItem.classList.remove(classNames.disable);\n                    this.uiIndices.disabledItemIndices.splice(this.uiIndices.disabledItemIndices.indexOf(index), 1);\n                }\n                if (liItem.style.display === 'none') {\n                    liItem.style.display = '';\n                    this.uiIndices.hiddenItemIndices.splice(this.uiIndices.hiddenItemIndices.indexOf(index), 1);\n                }\n                if (this.listViewInstance.showCheckBox && liItem.classList.contains(classNames.selected)) {\n                    this.listViewInstance.removeSelect();\n                    this.uiIndices.activeIndices.splice(this.uiIndices.activeIndices.indexOf(index), 1);\n                    let checklistElement = liItem.querySelector('.' + classNames.checkboxWrapper);\n                    checklistElement.removeAttribute('aria-checked');\n                    checklistElement.firstElementChild.classList.remove(classNames.checked);\n                    if (liItem.classList.contains(classNames.focused)) {\n                        liItem.classList.remove(classNames.focused);\n                        this.activeIndex = undefined;\n                    }\n                }\n                else if (liItem.classList.contains(classNames.selected)) {\n                    this.listViewInstance.removeSelect();\n                    this.activeIndex = undefined;\n                }\n                if (!parseFloat(this.bottomElement.style.height) && !parseFloat(this.topElement.style.height)) {\n                    this.updateUI(liItem, this.uiLastIndex, this.bottomElement);\n                }\n                else if (parseFloat(this.bottomElement.style.height)) {\n                    this.bottomElement.style.height = parseFloat(this.bottomElement.style.height) - this.listItemHeight + 'px';\n                    this.updateUI(liItem, this.uiLastIndex, this.bottomElement);\n                }\n                else {\n                    this.topElement.style.height = parseFloat(this.topElement.style.height) - this.listItemHeight + 'px';\n                    this.updateUI(liItem, (this.uiFirstIndex - 1), this.topElement.nextSibling);\n                    this.uiLastIndex--;\n                    this.uiFirstIndex--;\n                }\n            }\n        }\n        this.changeUiIndices(index, false);\n        this.listDiff = Math.round(parseFloat(this.topElement.style.height) / this.listItemHeight);\n    }\n    changeUiIndices(index, increment) {\n        let keys = Object.keys(this.uiIndices);\n        for (let ind = 0; ind < keys.length; ind++) {\n            this.uiIndices[keys[ind]] = this.uiIndices[keys[ind]].map((i) => {\n                if (i >= index) {\n                    return increment ? ++i : --i;\n                }\n                else {\n                    return i;\n                }\n            });\n        }\n    }\n    addItem(data, fields, dataSource) {\n        for (let i = 0; i < data.length; i++) {\n            let currentItem = data[i];\n            // push the given data to main data array\n            dataSource.push(currentItem);\n            // recalculate all the group data or other datasource related things\n            this.listViewInstance.setViewDataSource(dataSource);\n            // render list items for first time due to no datasource present earlier\n            if (!this.domItemCount) {\n                // fresh rendering for first time\n                if ((this.listViewInstance.template || this.listViewInstance.groupTemplate) && !this.isNgTemplate()) {\n                    this.listViewInstance.listBaseOption.template = null;\n                    this.listViewInstance.listBaseOption.groupTemplate = null;\n                    this.listViewInstance.listBaseOption.itemCreated = this.createUIItem.bind(this);\n                }\n                this.uiVirtualization();\n                // when expected expected DOM count doesn't meet the condition we need to create and inject new item into DOM\n            }\n            else if (this.domItemCount < this.expectedDomItemCount) {\n                let ds = this.listViewInstance.findItemFromDS(dataSource, fields);\n                if (ds instanceof Array) {\n                    if (this.listViewInstance.ulElement) {\n                        let index = this.listViewInstance.curViewDS.indexOf(currentItem);\n                        // inject new list item into DOM\n                        this.createAndInjectNewItem(currentItem, index);\n                        // check for group header item\n                        let curViewDS = this.listViewInstance.curViewDS[index - 1];\n                        if (curViewDS && curViewDS.isHeader && curViewDS.items.length === 1) {\n                            // target group item index in datasource\n                            --index;\n                            // inject new group header into DOM for previously created list item\n                            this.createAndInjectNewItem(curViewDS, index);\n                        }\n                    }\n                    // recollect all the list item into collection\n                    this.listViewInstance.liCollection =\n                        this.listViewInstance.curUL.querySelectorAll('li');\n                }\n            }\n            else {\n                let index = this.listViewInstance.curViewDS.indexOf(currentItem);\n                // virtually new add list item based on the scollbar position\n                this.addUiItem(index);\n                // check for group header item needs to be added\n                let curViewDS = this.listViewInstance.curViewDS[index - 1];\n                if (curViewDS && curViewDS.isHeader && curViewDS.items.length === 1) {\n                    this.addUiItem(index - 1);\n                }\n            }\n        }\n    }\n    createAndInjectNewItem(itemData, index) {\n        // generate li item for given datasource\n        let target;\n        let li = ListBase.createListItemFromJson(this.listViewInstance.createElement, [itemData], this.listViewInstance.listBaseOption, null, null, this);\n        // check for target element whether to insert before last item or group item\n        if ((Object.keys(this.listViewInstance.curViewDS).length - 1) === index) {\n            target = this.listViewInstance.curUL.lastElementChild;\n        }\n        else {\n            // target group header's first child item to append its header\n            target = this.listViewInstance.getLiFromObjOrElement(this.listViewInstance.curViewDS[index + 1]) ||\n                this.listViewInstance.getLiFromObjOrElement(this.listViewInstance.curViewDS[index + 2]);\n        }\n        // insert before the target element\n        this.listViewInstance.ulElement.insertBefore(li[0], target);\n        // increment internal DOM count, last index count for new element\n        this.domItemCount++;\n        if (this.bottomElementHeight <= 0) {\n            this.uiLastIndex++;\n        }\n        // recalculate the current item height, to avoid jumpy scroller\n        this.refreshItemHeight();\n    }\n    createUIItem(args) {\n        let virtualTemplate = this.listViewInstance.template;\n        let template = this.listViewInstance.createElement('div');\n        let commonTemplate = '<div class=\"e-text-content\" role=\"presentation\"> ' +\n            '<span class=\"e-list-text\"> ${' + this.listViewInstance.fields.text + '} </span></div>';\n        if (this.listViewInstance.showCheckBox) {\n            // tslint:disable-next-line:no-any\n            this.listViewInstance.renderCheckbox(args);\n            // tslint:enable-next-line:no-any\n            if ((!isNullOrUndefined(this.listViewInstance.virtualCheckBox)) &&\n                (!isNullOrUndefined(this.listViewInstance.virtualCheckBox.outerHTML))) {\n                let div = document.createElement('div');\n                div.innerHTML = this.listViewInstance.template || commonTemplate;\n                div.children[0].classList.add('e-checkbox');\n                this.listViewInstance.checkBoxPosition === 'Left' ? div.children[0].classList.add('e-checkbox-left') :\n                    div.children[0].classList.add('e-checkbox-right');\n                if (this.listViewInstance.checkBoxPosition === 'Left') {\n                    div.children[0].insertBefore(this.listViewInstance.virtualCheckBox, div.childNodes[0].children[0]);\n                }\n                else {\n                    div.children[0].appendChild(this.listViewInstance.virtualCheckBox);\n                }\n                this.listViewInstance.template = div.innerHTML;\n            }\n            template.innerHTML = this.listViewInstance.template;\n            this.listViewInstance.template = virtualTemplate;\n        }\n        else {\n            template.innerHTML = this.listViewInstance.template || commonTemplate;\n        }\n        // tslint:disable-next-line:no-any\n        let templateElements = template.getElementsByTagName('*');\n        let groupTemplate = this.listViewInstance.createElement('div');\n        if (this.listViewInstance.fields.groupBy) {\n            groupTemplate.innerHTML = this.listViewInstance.groupTemplate || commonTemplate;\n        }\n        // tslint:disable-next-line:no-any\n        let groupTemplateElements = groupTemplate.getElementsByTagName('*');\n        if (args.curData.isHeader) {\n            this.headerData = args.curData;\n        }\n        this.templateData = args.curData.isHeader ? args.curData.items[0] :\n            args.curData;\n        args.item.innerHTML = '';\n        args.item.context = { data: args.curData, nodes: { flatTemplateNodes: [], groupTemplateNodes: [] } };\n        for (let i = 0; i < templateElements.length; i++) {\n            this.compileTemplate(templateElements[i], args.item, false);\n        }\n        for (let i = 0; i < groupTemplateElements.length; i++) {\n            this.compileTemplate(groupTemplateElements[i], args.item, true);\n        }\n        args.item.context.template = args.curData.isHeader ? template.firstElementChild :\n            groupTemplate.firstElementChild;\n        args.item.context.type = args.curData.isHeader ? 'flatList' : 'groupList';\n        let element = args.curData.isHeader ? groupTemplate : template;\n        args.item.insertBefore(element.firstElementChild, null);\n    }\n    compileTemplate(element, item, isHeader) {\n        this.textProperty(element, item, isHeader);\n        this.classProperty(element, item, isHeader);\n        this.attributeProperty(element, item, isHeader);\n    }\n    onChange(newData, listElement) {\n        listElement.context.data = newData;\n        let groupTemplateNodes = listElement.context.nodes.groupTemplateNodes;\n        let flatTemplateNodes = listElement.context.nodes.flatTemplateNodes;\n        if (!isNullOrUndefined(newData.isHeader) && newData.isHeader && listElement.context.type === 'groupList') {\n            let element = listElement.firstElementChild;\n            detach(listElement.firstElementChild);\n            listElement.insertBefore(listElement.context.template, null);\n            listElement.context.template = element;\n            listElement.context.type = 'flatList';\n            for (let i = 0; i < groupTemplateNodes.length; i++) {\n                groupTemplateNodes[i].onChange(newData);\n            }\n        }\n        else if (!newData.isHeader && listElement.context.type === 'flatList') {\n            let element = listElement.firstElementChild;\n            detach(listElement.firstElementChild);\n            listElement.insertBefore(listElement.context.template, null);\n            listElement.context.template = element;\n            listElement.context.type = 'groupList';\n            for (let i = 0; i < flatTemplateNodes.length; i++) {\n                flatTemplateNodes[i].onChange(newData);\n            }\n        }\n        else if (!newData.isHeader) {\n            for (let i = 0; i < flatTemplateNodes.length; i++) {\n                flatTemplateNodes[i].onChange(newData);\n            }\n        }\n        else {\n            for (let i = 0; i < groupTemplateNodes.length; i++) {\n                groupTemplateNodes[i].onChange(newData);\n            }\n        }\n    }\n    updateContextData(listElement, node, isHeader) {\n        if (isHeader) {\n            listElement.context.nodes.groupTemplateNodes.push(node);\n        }\n        else {\n            listElement.context.nodes.flatTemplateNodes.push(node);\n        }\n    }\n    classProperty(element, listElement, isHeader) {\n        let regex = new RegExp('\\\\${([^}]*)}', 'g');\n        let resultantOutput = [];\n        let regexMatch;\n        while (regexMatch !== null) {\n            let match = regex.exec(element.className);\n            resultantOutput.push(match);\n            regexMatch = match;\n            if (regexMatch === null) {\n                resultantOutput.pop();\n            }\n        }\n        if (resultantOutput && resultantOutput.length) {\n            for (let i = 0; i < resultantOutput.length; i++) {\n                let classNameMatch = resultantOutput[i];\n                let classFunction;\n                if (classNameMatch[1].indexOf('?') !== -1 && classNameMatch[1].indexOf(':') !== -1) {\n                    // tslint:disable-next-line:no-function-constructor-with-string-args\n                    classFunction = new Function('data', 'return ' + classNameMatch[1].replace(/\\$/g, 'data.'));\n                }\n                else {\n                    // tslint:disable-next-line:no-function-constructor-with-string-args\n                    classFunction = new Function('data', 'return ' + 'data.' + classNameMatch[1]);\n                }\n                let subNode = {};\n                if (isHeader) {\n                    subNode.bindedvalue = classFunction(this.headerData);\n                }\n                else {\n                    subNode.bindedvalue = classFunction(this.templateData);\n                }\n                subNode.onChange = (value) => {\n                    if (subNode.bindedvalue) {\n                        removeClass([element], subNode.bindedvalue.split(' ').filter((css) => css));\n                    }\n                    let newCss = classFunction(value);\n                    if (newCss) {\n                        addClass([element], (newCss).split(' ').filter((css) => css));\n                    }\n                    subNode.bindedvalue = newCss;\n                };\n                let className = classNameMatch[0].split(' ');\n                for (let i = 0; i < className.length; i++) {\n                    element.classList.remove(className[i]);\n                }\n                if (subNode.bindedvalue) {\n                    addClass([element], subNode.bindedvalue.split(' ').filter((css) => css));\n                }\n                this.updateContextData(listElement, subNode, isHeader);\n            }\n        }\n    }\n    attributeProperty(element, listElement, isHeader) {\n        let attributeNames = [];\n        for (let i = 0; i < element.attributes.length; i++) {\n            attributeNames.push(element.attributes[i].nodeName);\n        }\n        if (attributeNames.indexOf('class') !== -1) {\n            attributeNames.splice(attributeNames.indexOf('class'), 1);\n        }\n        for (let i = 0; i < attributeNames.length; i++) {\n            let attributeName = attributeNames[i];\n            let attrNameMatch = new RegExp('\\\\${([^}]*)}', 'g').exec(attributeName) || [];\n            let attrValueMatch = new RegExp('\\\\${([^}]*)}', 'g').exec(element.getAttribute(attributeName))\n                || [];\n            let attributeNameFunction;\n            let attributeValueFunction;\n            if (attrNameMatch.length || attrValueMatch.length) {\n                if (attrNameMatch[1]) {\n                    // tslint:disable-next-line:no-function-constructor-with-string-args\n                    attributeNameFunction = new Function('data', 'return ' + 'data.' + attrNameMatch[1]);\n                }\n                if (attrValueMatch[1]) {\n                    if (attrValueMatch[1].indexOf('?') !== -1 && attrValueMatch[1].indexOf(':') !== -1) {\n                        // tslint:disable-next-line:no-function-constructor-with-string-args\n                        attributeValueFunction = new Function('data', 'return ' + attrValueMatch[1].replace(/\\$/g, 'data.'));\n                    }\n                    else {\n                        // tslint:disable-next-line:no-function-constructor-with-string-args\n                        attributeValueFunction = new Function('data', 'return ' + 'data.' + attrValueMatch[1]);\n                    }\n                }\n                let subNode = {};\n                if (isHeader) {\n                    subNode.bindedvalue = [attrNameMatch[1] === undefined ? undefined : attributeNameFunction(this.headerData),\n                        attrValueMatch[1] === undefined ? undefined : attributeValueFunction(this.headerData)];\n                }\n                else {\n                    subNode.bindedvalue = [attrNameMatch[1] === undefined ? undefined : attributeNameFunction(this.templateData),\n                        attrValueMatch[1] === undefined ? undefined : attributeValueFunction(this.templateData)];\n                }\n                subNode.attrName = subNode.bindedvalue[0] === undefined ?\n                    attributeName : subNode.bindedvalue[0];\n                subNode.onChange = (value) => {\n                    let bindedvalue = subNode.bindedvalue[1] === undefined ?\n                        element.getAttribute(subNode.attrName) : attributeValueFunction(value);\n                    element.removeAttribute(subNode.attrName);\n                    subNode.attrName = subNode.bindedvalue[0] === undefined ? subNode.attrName : attributeNameFunction(value);\n                    element.setAttribute(subNode.attrName, bindedvalue);\n                    subNode.bindedvalue = [subNode.bindedvalue[0] === undefined ? undefined : attributeNameFunction(value),\n                        subNode.bindedvalue[1] === undefined ? undefined : attributeValueFunction(value)];\n                };\n                let attributeValue = subNode.bindedvalue[1] === undefined ? element.getAttribute(attributeName) :\n                    subNode.bindedvalue[1];\n                element.removeAttribute(attributeName);\n                element.setAttribute(subNode.attrName, attributeValue);\n                this.updateContextData(listElement, subNode, isHeader);\n            }\n        }\n    }\n    textProperty(element, listElement, isHeader) {\n        let regex = new RegExp('\\\\${([^}]*)}', 'g');\n        let resultantOutput = [];\n        let regexMatch;\n        while (regexMatch !== null) {\n            let match = regex.exec(element.innerText);\n            resultantOutput.push(match);\n            regexMatch = match;\n            if (regexMatch === null) {\n                resultantOutput.pop();\n            }\n        }\n        let isChildHasTextContent = Array.prototype.some.call(element.children, (element) => {\n            if (new RegExp('\\\\${([^}]*)}', 'g').exec(element.innerText)) {\n                return true;\n            }\n            else {\n                return false;\n            }\n        });\n        if (resultantOutput && resultantOutput.length && !isChildHasTextContent) {\n            for (let i = 0; i < resultantOutput.length; i++) {\n                let textPropertyMatch = resultantOutput[i];\n                let subNode = {};\n                let textFunction;\n                if (textPropertyMatch[1].indexOf('?') !== -1 && textPropertyMatch[1].indexOf(':') !== -1) {\n                    // tslint:disable-next-line:no-function-constructor-with-string-args\n                    textFunction = new Function('data', 'return ' + textPropertyMatch[1].replace(/\\$/g, 'data.'));\n                }\n                else {\n                    // tslint:disable-next-line:no-function-constructor-with-string-args\n                    textFunction = new Function('data', 'return ' + 'data.' + textPropertyMatch[1]);\n                }\n                if (isHeader) {\n                    subNode.bindedvalue = textFunction(this.headerData);\n                }\n                else {\n                    subNode.bindedvalue = textFunction(this.templateData);\n                }\n                subNode.onChange = (value) => {\n                    element.innerText = element.innerText.replace(subNode.bindedvalue, textFunction(value));\n                    subNode.bindedvalue = textFunction(value);\n                };\n                element.innerText = element.innerText.replace(textPropertyMatch[0], subNode.bindedvalue);\n                this.updateContextData(listElement, subNode, isHeader);\n            }\n        }\n    }\n    reRenderUiVirtualization() {\n        this.wireScrollEvent(true);\n        if (this.listViewInstance.contentContainer) {\n            detach(this.listViewInstance.contentContainer);\n        }\n        this.listViewInstance.preRender();\n        // resetting the dom count to 0, to avoid edge case of dataSource suddenly becoming zero\n        // and then manually adding item using addItem API\n        this.domItemCount = 0;\n        this.listViewInstance.header();\n        this.listViewInstance.setLocalData();\n    }\n    updateUI(element, index, targetElement) {\n        let onChange = this.isNgTemplate() ? this.onNgChange : this.onChange;\n        if (this.listViewInstance.template || this.listViewInstance.groupTemplate) {\n            let curViewDS = this.listViewInstance.curViewDS[index];\n            element.dataset.uid = curViewDS[this.listViewInstance.fields.id] ?\n                curViewDS[this.listViewInstance.fields.id].toString() : ListBase.generateId();\n            onChange(curViewDS, element, this);\n        }\n        else {\n            this.updateUiContent(element, index);\n        }\n        this.changeElementAttributes(element, index);\n        if (targetElement) {\n            this.listViewInstance.ulElement.insertBefore(element, targetElement);\n        }\n    }\n    onNgChange(newData, listElement, virtualThis) {\n        // compile given target element with template for new data\n        let templateCompiler = compile(virtualThis.listViewInstance.template);\n        let resultElement = templateCompiler(newData);\n        while (listElement.lastChild) {\n            listElement.removeChild(listElement.lastChild);\n        }\n        listElement.appendChild(resultElement[0]);\n    }\n    getModuleName() {\n        return 'virtualization';\n    }\n    destroy() {\n        this.wireScrollEvent(true);\n    }\n}\n\n/**\n * Listview Component\n */\n\n/**\n * Listview Component\n */\n\nvar __decorate$1 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar Sortable_1;\n/**\n * Sortable Module provides support to enable sortable functionality in Dom Elements.\n * ```html\n * <div id=\"sortable\">\n *   <div>Item 1</div>\n *   <div>Item 2</div>\n *   <div>Item 3</div>\n *   <div>Item 4</div>\n *   <div>Item 5</div>\n * </div>\n * ```\n * ```typescript\n *   let ele: HTMLElement = document.getElementById('sortable');\n *   let sortObj: Sortable = new Sortable(ele, {});\n * ```\n */\nlet Sortable = Sortable_1 = class Sortable extends Base {\n    constructor(element, options) {\n        super(options, element);\n        this.getHelper = (e) => {\n            let target = this.getSortableElement(e.sender.target);\n            if (!this.isValidTarget(target, this)) {\n                return false;\n            }\n            let element;\n            if (this.helper) {\n                element = this.helper({ sender: target, element: e.element });\n            }\n            else {\n                element = target.cloneNode(true);\n                element.style.width = `${target.offsetWidth}px`;\n                element.style.height = `${target.offsetHeight}px`;\n            }\n            addClass([element], ['e-sortableclone']);\n            document.body.appendChild(element);\n            return element;\n        };\n        this.onDrag = (e) => {\n            this.trigger('drag', { event: e.event, element: this.element, target: e.target });\n            let newInst = this.getSortableInstance(e.target);\n            let target = this.getSortableElement(e.target, newInst);\n            if ((this.isValidTarget(target, newInst) || e.target.className.indexOf('e-list-group-item') > -1) && this.curTarget !== target &&\n                (newInst.placeHolderElement ? newInst.placeHolderElement !== e.target : true)) {\n                if (e.target.className.indexOf('e-list-group-item') > -1) {\n                    target = e.target;\n                }\n                this.curTarget = target;\n                let oldIdx = this.getIndex(newInst.placeHolderElement, newInst);\n                oldIdx = isNullOrUndefined(oldIdx) ? this.getIndex(this.target) :\n                    this.getIndex(target, newInst) < oldIdx || !oldIdx ? oldIdx : oldIdx - 1;\n                newInst.placeHolderElement = this.getPlaceHolder(target, newInst);\n                let newIdx = this.getIndex(target, newInst);\n                let idx = newInst.element !== this.element ? newIdx : oldIdx < newIdx ? newIdx + 1 : newIdx;\n                if (newInst.placeHolderElement) {\n                    if (e.target.className.indexOf('e-list-group-item') > -1) {\n                        newInst.element.insertBefore(newInst.placeHolderElement, newInst.element.children[newIdx]);\n                    }\n                    else if (newInst.element !== this.element && idx === newInst.element.childElementCount - 1) {\n                        newInst.element.appendChild(newInst.placeHolderElement);\n                    }\n                    else {\n                        newInst.element.insertBefore(newInst.placeHolderElement, newInst.element.children[idx]);\n                    }\n                    this.refreshDisabled(oldIdx, newIdx, newInst);\n                }\n                else {\n                    this.updateItemClass(newInst);\n                    newInst.element.insertBefore(this.target, newInst.element.children[idx]);\n                    this.refreshDisabled(oldIdx, newIdx, newInst);\n                    this.curTarget = this.target;\n                    this.trigger('drop', { droppedElement: this.target, element: newInst.element, previousIndex: oldIdx, currentIndex: newIdx,\n                        target: e.target, helper: document.getElementsByClassName('e-sortableclone')[0], event: e.event, scope: this.scope });\n                }\n            }\n            newInst = this.getSortableInstance(this.curTarget);\n            if (isNullOrUndefined(target) && e.target !== newInst.placeHolderElement) {\n                if (this.isPlaceHolderPresent(newInst)) {\n                    this.removePlaceHolder(newInst);\n                }\n            }\n            else {\n                let placeHolders = [].slice.call(document.getElementsByClassName('e-sortable-placeholder'));\n                let inst;\n                placeHolders.forEach((placeHolder) => {\n                    inst = this.getSortableInstance(placeHolder);\n                    if (inst.element && inst !== newInst) {\n                        this.removePlaceHolder(inst);\n                    }\n                });\n            }\n        };\n        this.onDragStart = (e) => {\n            this.target = this.getSortableElement(e.target);\n            let cancelDrag = false;\n            this.target.classList.add('e-grabbed');\n            this.curTarget = this.target;\n            e.helper = document.getElementsByClassName('e-sortableclone')[0];\n            let args = { cancel: false, element: this.element, target: this.target };\n            this.trigger('beforeDragStart', args, (observedArgs) => {\n                if (observedArgs.cancel) {\n                    cancelDrag = observedArgs.cancel;\n                    this.onDragStop(e);\n                }\n            });\n            if (cancelDrag) {\n                return;\n            }\n            if (isBlazor) {\n                this.trigger('dragStart', { event: e.event, element: this.element, target: this.target,\n                    bindEvents: e.bindEvents, dragElement: e.dragElement });\n            }\n            else {\n                this.trigger('dragStart', { event: e.event, element: this.element, target: this.target });\n            }\n        };\n        this.onDragStop = (e) => {\n            let dropInst = this.getSortableInstance(this.curTarget);\n            let prevIdx;\n            let curIdx;\n            let handled;\n            prevIdx = this.getIndex(this.target);\n            if (this.isPlaceHolderPresent(dropInst)) {\n                let curIdx = this.getIndex(dropInst.placeHolderElement, dropInst);\n                let args = { previousIndex: prevIdx, currentIndex: curIdx, target: e.target, droppedElement: this.target,\n                    helper: e.helper, cancel: false, handled: false };\n                this.trigger('beforeDrop', args, (observedArgs) => {\n                    if (!observedArgs.cancel) {\n                        handled = observedArgs.handled;\n                        this.updateItemClass(dropInst);\n                        if (observedArgs.handled) {\n                            let ele = this.target.cloneNode(true);\n                            this.target.classList.remove('e-grabbed');\n                            this.target = ele;\n                        }\n                        dropInst.element.insertBefore(this.target, dropInst.placeHolderElement);\n                        let curIdx = this.getIndex(this.target, dropInst);\n                        prevIdx = this === dropInst && (prevIdx - curIdx) > 1 ? prevIdx - 1 : prevIdx;\n                        this.trigger('drop', { event: e.event, element: dropInst.element, previousIndex: prevIdx, currentIndex: curIdx,\n                            target: e.target, helper: e.helper, droppedElement: this.target, scopeName: this.scope, handled: handled });\n                    }\n                    remove(dropInst.placeHolderElement);\n                });\n            }\n            dropInst = this.getSortableInstance(e.target);\n            curIdx = dropInst.element.childElementCount;\n            prevIdx = this.getIndex(this.target);\n            if (dropInst.element === e.target) {\n                let beforeDropArgs = { previousIndex: prevIdx, currentIndex: curIdx, target: e.target,\n                    droppedElement: this.target, helper: e.helper, cancel: false };\n                this.trigger('beforeDrop', beforeDropArgs, (observedArgs) => {\n                    if (!observedArgs.cancel) {\n                        this.updateItemClass(dropInst);\n                        dropInst.element.appendChild(this.target);\n                        this.trigger('drop', { event: e.event, element: dropInst.element, previousIndex: prevIdx, currentIndex: curIdx,\n                            target: e.target, helper: e.helper, droppedElement: this.target, scopeName: this.scope });\n                    }\n                });\n            }\n            this.target.classList.remove('e-grabbed');\n            this.target = null;\n            this.curTarget = null;\n            remove(e.helper);\n            getComponent(this.element, Draggable).intDestroy(e.event);\n        };\n        this.bind();\n    }\n    bind() {\n        if (!this.element.id) {\n            this.element.id = getUniqueID('sortable');\n        }\n        if (!this.itemClass) {\n            this.itemClass = 'e-sort-item';\n            this.dataBind();\n        }\n        this.initializeDraggable();\n    }\n    initializeDraggable() {\n        new Draggable(this.element, {\n            helper: this.getHelper,\n            dragStart: this.onDragStart,\n            drag: this.onDrag,\n            dragStop: this.onDragStop,\n            dragTarget: `.${this.itemClass}`,\n            enableTapHold: true,\n            tapHoldThreshold: 200,\n            queryPositionInfo: this.queryPositionInfo,\n            distance: 5\n        });\n    }\n    getPlaceHolder(target, instance) {\n        if (instance.placeHolder) {\n            if (this.isPlaceHolderPresent(instance)) {\n                remove(instance.placeHolderElement);\n            }\n            instance.placeHolderElement = instance.placeHolder({ element: instance.element, grabbedElement: this.target, target: target });\n            instance.placeHolderElement.classList.add('e-sortable-placeholder');\n            return instance.placeHolderElement;\n        }\n        return null;\n    }\n    isValidTarget(target, instance) {\n        return target && compareElementParent(target, instance.element) && target.classList.contains(instance.itemClass) &&\n            !target.classList.contains('e-disabled');\n    }\n    removePlaceHolder(instance) {\n        remove(instance.placeHolderElement);\n        instance.placeHolderElement = null;\n    }\n    updateItemClass(instance) {\n        if (this !== instance) {\n            this.target.classList.remove(this.itemClass);\n            this.target.classList.add(instance.itemClass);\n        }\n    }\n    getSortableInstance(element) {\n        element = closest(element, `.e-${this.getModuleName()}`);\n        if (element) {\n            let inst = getComponent(element, Sortable_1);\n            return inst.scope && this.scope && inst.scope === this.scope ? inst : this;\n        }\n        else {\n            return this;\n        }\n    }\n    refreshDisabled(oldIdx, newIdx, instance) {\n        if (instance === this) {\n            let element;\n            let increased = oldIdx < newIdx;\n            let disabledIdx;\n            let start = increased ? oldIdx : newIdx;\n            let end = increased ? newIdx : oldIdx;\n            while (start <= end) {\n                element = this.element.children[start];\n                if (element.classList.contains('e-disabled')) {\n                    disabledIdx = this.getIndex(element);\n                    this.element.insertBefore(element, this.element.children[increased ? disabledIdx + 2 : disabledIdx - 1]);\n                    start = increased ? disabledIdx + 2 : disabledIdx + 1;\n                }\n                else {\n                    start++;\n                }\n            }\n        }\n    }\n    getIndex(target, instance = this) {\n        let idx;\n        [].slice.call(instance.element.children).forEach((element, index) => {\n            if (element === target) {\n                idx = index;\n            }\n        });\n        return idx;\n    }\n    getSortableElement(element, instance = this) {\n        return closest(element, `.${instance.itemClass}`);\n    }\n    queryPositionInfo(value) {\n        value.left = pageXOffset ? `${parseFloat(value.left) - pageXOffset}px` : value.left;\n        value.top = pageYOffset ? `${parseFloat(value.top) - pageYOffset}px` : value.top;\n        return value;\n    }\n    isPlaceHolderPresent(instance) {\n        return instance.placeHolderElement && !!closest(instance.placeHolderElement, `#${instance.element.id}`);\n    }\n    /**\n     * It is used to sort array of elements from source element to destination element.\n     * @param destination - Defines the destination element to which the sortable elements needs to be appended.\n     * If it is null, then the Sortable library element will be considered as destination.\n     * @param targetIndexes - Specifies the sortable elements indexes which needs to be sorted.\n     * @param insertBefore - Specifies the index before which the sortable elements needs to be appended.\n     * If it is null, elements will be appended as last child.\n     * @method moveTo\n     * @return {void}\n     */\n    moveTo(destination, targetIndexes, insertBefore) {\n        moveTo(this.element, destination, targetIndexes, insertBefore);\n    }\n    /**\n     * It is used to destroy the Sortable library.\n     */\n    destroy() {\n        if (this.itemClass === 'e-sort-item') {\n            this.itemClass = null;\n            this.dataBind();\n        }\n        getComponent(this.element, Draggable).destroy();\n        super.destroy();\n    }\n    getModuleName() {\n        return 'sortable';\n    }\n    onPropertyChanged(newProp, oldProp) {\n        for (let prop of Object.keys(newProp)) {\n            switch (prop) {\n                case 'itemClass':\n                    [].slice.call(this.element.children).forEach((element) => {\n                        if (element.classList.contains(oldProp.itemClass)) {\n                            element.classList.remove(oldProp.itemClass);\n                        }\n                        if (newProp.itemClass) {\n                            element.classList.add(newProp.itemClass);\n                        }\n                    });\n                    break;\n            }\n        }\n    }\n};\n__decorate$1([\n    Property(false)\n], Sortable.prototype, \"enableAnimation\", void 0);\n__decorate$1([\n    Property(null)\n], Sortable.prototype, \"itemClass\", void 0);\n__decorate$1([\n    Property(null)\n], Sortable.prototype, \"scope\", void 0);\n__decorate$1([\n    Property()\n], Sortable.prototype, \"helper\", void 0);\n__decorate$1([\n    Property()\n], Sortable.prototype, \"placeHolder\", void 0);\n__decorate$1([\n    Event()\n], Sortable.prototype, \"drag\", void 0);\n__decorate$1([\n    Event()\n], Sortable.prototype, \"beforeDragStart\", void 0);\n__decorate$1([\n    Event()\n], Sortable.prototype, \"dragStart\", void 0);\n__decorate$1([\n    Event()\n], Sortable.prototype, \"beforeDrop\", void 0);\n__decorate$1([\n    Event()\n], Sortable.prototype, \"drop\", void 0);\nSortable = Sortable_1 = __decorate$1([\n    NotifyPropertyChanges\n], Sortable);\n/**\n * It is used to sort array of elements from source element to destination element.\n * @private\n */\nfunction moveTo(from, to, targetIndexes, insertBefore) {\n    let targetElements = [];\n    if (!to) {\n        to = from;\n    }\n    if (targetIndexes && targetIndexes.length) {\n        targetIndexes.forEach((index) => {\n            targetElements.push(from.children[index]);\n        });\n    }\n    else {\n        targetElements = [].slice.call(from.children);\n    }\n    if (isNullOrUndefined(insertBefore)) {\n        targetElements.forEach((target) => {\n            to.appendChild(target);\n        });\n    }\n    else {\n        let insertElement = to.children[insertBefore];\n        targetElements.forEach((target) => {\n            to.insertBefore(target, insertElement);\n        });\n    }\n}\n\n/**\n * Sortable Module\n */\n\n/**\n * List Components\n */\n\nexport { classNames, FieldSettings, ListView, Virtualization, cssClass, ListBase, getFieldValues, Sortable, moveTo };\n//# sourceMappingURL=ej2-lists.es2015.js.map\n","import { Animation, Browser, ChildProperty, Collection, Complex, Component, Draggable, Droppable, Event, EventHandler, KeyboardEvents, L10n, NotifyPropertyChanges, Property, SanitizeHtmlHelper, Touch, addClass, append, attributes, blazorTemplates, classList, closest, compile, createElement, detach, extend, formatUnit, getElement, getInstance, getRandomId, getUniqueID, getValue, isBlazor, isNullOrUndefined, isRippleEnabled, isUndefined, isVisible, matches, merge, remove, removeClass, resetBlazorTemplate, rippleEffect, select, selectAll, setStyleAttribute, setValue, updateBlazorTemplate } from '@syncfusion/ej2-base';\nimport { ListBase } from '@syncfusion/ej2-lists';\nimport { Popup, calculatePosition, createSpinner, fit, getScrollableParent, getZindexPartial, hideSpinner, isCollide, showSpinner } from '@syncfusion/ej2-popups';\nimport { Button, createCheckBox, rippleMouseHandler } from '@syncfusion/ej2-buttons';\nimport { DataManager, Query } from '@syncfusion/ej2-data';\nimport { Input } from '@syncfusion/ej2-inputs';\n\nvar __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nconst CLS_ROOT = 'e-hscroll';\nconst CLS_RTL = 'e-rtl';\nconst CLS_DISABLE = 'e-overlay';\nconst CLS_HSCROLLBAR = 'e-hscroll-bar';\nconst CLS_HSCROLLCON = 'e-hscroll-content';\nconst CLS_NAVARROW = 'e-nav-arrow';\nconst CLS_NAVRIGHTARROW = 'e-nav-right-arrow';\nconst CLS_NAVLEFTARROW = 'e-nav-left-arrow';\nconst CLS_HSCROLLNAV = 'e-scroll-nav';\nconst CLS_HSCROLLNAVRIGHT = 'e-scroll-right-nav';\nconst CLS_HSCROLLNAVLEFT = 'e-scroll-left-nav';\nconst CLS_DEVICE = 'e-scroll-device';\nconst CLS_OVERLAY = 'e-scroll-overlay';\nconst CLS_RIGHTOVERLAY = 'e-scroll-right-overlay';\nconst CLS_LEFTOVERLAY = 'e-scroll-left-overlay';\nconst OVERLAY_MAXWID = 40;\n/**\n * HScroll module is introduces horizontal scroller when content exceeds the current viewing area.\n * It can be useful for the components like Toolbar, Tab which needs horizontal scrolling alone.\n * Hidden content can be view by touch moving or icon click.\n * ```html\n * <div id=\"scroll\"/>\n * <script>\n *   var scrollObj = new HScroll();\n *   scrollObj.appendTo(\"#scroll\");\n * </script>\n * ```\n */\nlet HScroll = class HScroll extends Component {\n    /**\n     * Initializes a new instance of the HScroll class.\n     * @param options  - Specifies HScroll model properties as options.\n     * @param element  - Specifies the element for which horizontal scrolling applies.\n     */\n    constructor(options, element) {\n        super(options, element);\n    }\n    /**\n     * Initialize the event handler\n     * @private\n     */\n    preRender() {\n        this.browser = Browser.info.name;\n        this.browserCheck = this.browser === 'mozilla';\n        this.isDevice = Browser.isDevice;\n        this.customStep = true;\n        let element = this.element;\n        this.ieCheck = this.browser === 'edge' || this.browser === 'msie';\n        this.initialize();\n        if (element.id === '') {\n            element.id = getUniqueID('hscroll');\n            this.uniqueId = true;\n        }\n        element.style.display = 'block';\n        if (this.enableRtl) {\n            element.classList.add(CLS_RTL);\n        }\n    }\n    /**\n     * To Initialize the horizontal scroll  rendering\n     * @private\n     */\n    render() {\n        this.touchModule = new Touch(this.element, { scroll: this.touchHandler.bind(this), swipe: this.swipeHandler.bind(this) });\n        EventHandler.add(this.scrollEle, 'scroll', this.scrollHandler, this);\n        if (!this.isDevice) {\n            this.createNavIcon(this.element);\n        }\n        else {\n            this.element.classList.add(CLS_DEVICE);\n            this.createOverlay(this.element);\n        }\n        this.setScrollState();\n    }\n    setScrollState() {\n        if (isNullOrUndefined(this.scrollStep) || this.scrollStep < 0) {\n            this.scrollStep = this.scrollEle.offsetWidth;\n            this.customStep = false;\n        }\n        else {\n            this.customStep = true;\n        }\n    }\n    initialize() {\n        let scrollEle = this.createElement('div', { className: CLS_HSCROLLCON });\n        let scrollDiv = this.createElement('div', { className: CLS_HSCROLLBAR });\n        scrollDiv.setAttribute('tabindex', '-1');\n        let ele = this.element;\n        let innerEle = [].slice.call(ele.children);\n        for (let ele of innerEle) {\n            scrollEle.appendChild(ele);\n        }\n        scrollDiv.appendChild(scrollEle);\n        ele.appendChild(scrollDiv);\n        scrollDiv.style.overflowX = 'hidden';\n        this.scrollEle = scrollDiv;\n        this.scrollItems = scrollEle;\n    }\n    getPersistData() {\n        let keyEntity = ['scrollStep'];\n        return this.addOnPersist(keyEntity);\n    }\n    /**\n     * Returns the current module name.\n     * @returns string\n     * @private\n     */\n    getModuleName() {\n        return 'hScroll';\n    }\n    /**\n     * Removes the control from the DOM and also removes all its related events.\n     * @returns void\n     */\n    destroy() {\n        let ele = this.element;\n        ele.style.display = '';\n        ele.classList.remove(CLS_ROOT);\n        ele.classList.remove(CLS_DEVICE);\n        let nav = selectAll('.e-' + ele.id + '_nav.' + CLS_HSCROLLNAV, ele);\n        let overlay = selectAll('.' + CLS_OVERLAY, ele);\n        [].slice.call(overlay).forEach((ele) => {\n            detach(ele);\n        });\n        for (let elem of [].slice.call(this.scrollItems.children)) {\n            ele.appendChild(elem);\n        }\n        if (this.uniqueId) {\n            this.element.removeAttribute('id');\n        }\n        detach(this.scrollEle);\n        if (nav.length > 0) {\n            detach(nav[0]);\n            if (!isNullOrUndefined(nav[1])) {\n                detach(nav[1]);\n            }\n        }\n        EventHandler.remove(this.scrollEle, 'scroll', this.scrollHandler);\n        this.touchModule.destroy();\n        this.touchModule = null;\n        super.destroy();\n    }\n    /**\n     * Specifies the value to disable/enable the HScroll component.\n     * When set to `true` , the component will be disabled.\n     * @param  {boolean} value - Based on this Boolean value, HScroll will be enabled (false) or disabled (true).\n     * @returns void.\n     */\n    disable(value) {\n        let navEles = selectAll('.e-scroll-nav:not(.' + CLS_DISABLE + ')', this.element);\n        value ? this.element.classList.add(CLS_DISABLE) : this.element.classList.remove(CLS_DISABLE);\n        [].slice.call(navEles).forEach((el) => {\n            el.setAttribute('tabindex', !value ? '0' : '-1');\n        });\n    }\n    createOverlay(element) {\n        let id = element.id.concat('_nav');\n        let rightOverlayEle = this.createElement('div', { className: CLS_OVERLAY + ' ' + CLS_RIGHTOVERLAY });\n        let clsRight = 'e-' + element.id.concat('_nav ' + CLS_HSCROLLNAV + ' ' + CLS_HSCROLLNAVRIGHT);\n        let rightEle = this.createElement('div', { id: id.concat('_right'), className: clsRight });\n        let navItem = this.createElement('div', { className: CLS_NAVRIGHTARROW + ' ' + CLS_NAVARROW + ' e-icons' });\n        rightEle.appendChild(navItem);\n        let leftEle = this.createElement('div', { className: CLS_OVERLAY + ' ' + CLS_LEFTOVERLAY });\n        if (this.ieCheck) {\n            rightEle.classList.add('e-ie-align');\n        }\n        element.appendChild(rightOverlayEle);\n        element.appendChild(rightEle);\n        element.insertBefore(leftEle, element.firstChild);\n        this.eventBinding([rightEle]);\n    }\n    createNavIcon(element) {\n        let id = element.id.concat('_nav');\n        let clsRight = 'e-' + element.id.concat('_nav ' + CLS_HSCROLLNAV + ' ' + CLS_HSCROLLNAVRIGHT);\n        let nav = this.createElement('div', { id: id.concat('_right'), className: clsRight });\n        nav.setAttribute('aria-disabled', 'false');\n        let navItem = this.createElement('div', { className: CLS_NAVRIGHTARROW + ' ' + CLS_NAVARROW + ' e-icons' });\n        let clsLeft = 'e-' + element.id.concat('_nav ' + CLS_HSCROLLNAV + ' ' + CLS_HSCROLLNAVLEFT);\n        let navEle = this.createElement('div', { id: id.concat('_left'), className: clsLeft + ' ' + CLS_DISABLE });\n        navEle.setAttribute('aria-disabled', 'true');\n        let navLeftItem = this.createElement('div', { className: CLS_NAVLEFTARROW + ' ' + CLS_NAVARROW + ' e-icons' });\n        navEle.appendChild(navLeftItem);\n        nav.appendChild(navItem);\n        element.appendChild(nav);\n        element.insertBefore(navEle, element.firstChild);\n        if (this.ieCheck) {\n            nav.classList.add('e-ie-align');\n            navEle.classList.add('e-ie-align');\n        }\n        this.eventBinding([nav, navEle]);\n    }\n    onKeyPress(e) {\n        if (e.key === 'Enter') {\n            let timeoutFun = () => {\n                this.keyTimeout = true;\n                this.eleScrolling(10, e.target, true);\n            };\n            this.keyTimer = window.setTimeout(() => {\n                timeoutFun();\n            }, 100);\n        }\n    }\n    onKeyUp(e) {\n        if (e.key !== 'Enter') {\n            return;\n        }\n        if (this.keyTimeout) {\n            this.keyTimeout = false;\n        }\n        else {\n            e.target.click();\n        }\n        clearTimeout(this.keyTimer);\n    }\n    eventBinding(ele) {\n        [].slice.call(ele).forEach((el) => {\n            new Touch(el, { tapHold: this.tabHoldHandler.bind(this), tapHoldThreshold: 500 });\n            el.addEventListener('keydown', this.onKeyPress.bind(this));\n            el.addEventListener('keyup', this.onKeyUp.bind(this));\n            el.addEventListener('mouseup', this.repeatScroll.bind(this));\n            el.addEventListener('touchend', this.repeatScroll.bind(this));\n            el.addEventListener('contextmenu', (e) => {\n                e.preventDefault();\n            });\n            EventHandler.add(el, 'click', this.clickEventHandler, this);\n        });\n    }\n    repeatScroll() {\n        clearInterval(this.timeout);\n    }\n    tabHoldHandler(e) {\n        let trgt = e.originalEvent.target;\n        trgt = this.contains(trgt, CLS_HSCROLLNAV) ? trgt.firstElementChild : trgt;\n        let scrollDis = 10;\n        let timeoutFun = () => {\n            this.eleScrolling(scrollDis, trgt, true);\n        };\n        this.timeout = window.setInterval(() => {\n            timeoutFun();\n        }, 50);\n    }\n    contains(ele, className) {\n        return ele.classList.contains(className);\n    }\n    eleScrolling(scrollDis, trgt, isContinuous) {\n        let element = this.scrollEle;\n        let rootEle = this.element;\n        let classList$$1 = trgt.classList;\n        if (classList$$1.contains(CLS_HSCROLLNAV)) {\n            classList$$1 = trgt.querySelector('.' + CLS_NAVARROW).classList;\n        }\n        if (this.contains(rootEle, CLS_RTL) && this.browserCheck) {\n            scrollDis = -scrollDis;\n        }\n        let scrlLeft = element.scrollLeft;\n        if ((!this.contains(rootEle, CLS_RTL) || this.browserCheck) || this.ieCheck) {\n            if (classList$$1.contains(CLS_NAVRIGHTARROW)) {\n                this.frameScrollRequest(scrollDis, 'add', isContinuous);\n            }\n            else {\n                this.frameScrollRequest(scrollDis, '', isContinuous);\n            }\n        }\n        else {\n            if (classList$$1.contains(CLS_NAVLEFTARROW)) {\n                this.frameScrollRequest(scrollDis, 'add', isContinuous);\n            }\n            else {\n                this.frameScrollRequest(scrollDis, '', isContinuous);\n            }\n        }\n    }\n    clickEventHandler(e) {\n        this.eleScrolling(this.scrollStep, e.target, false);\n    }\n    swipeHandler(e) {\n        let swipeEle = this.scrollEle;\n        let distance;\n        if (e.velocity <= 1) {\n            distance = e.distanceX / (e.velocity * 10);\n        }\n        else {\n            distance = e.distanceX / e.velocity;\n        }\n        let start = 0.5;\n        let animate = () => {\n            let step = Math.sin(start);\n            if (step <= 0) {\n                window.cancelAnimationFrame(step);\n            }\n            else {\n                if (e.swipeDirection === 'Left') {\n                    swipeEle.scrollLeft += distance * step;\n                }\n                else if (e.swipeDirection === 'Right') {\n                    swipeEle.scrollLeft -= distance * step;\n                }\n                start -= 0.5;\n                window.requestAnimationFrame(animate);\n            }\n        };\n        animate();\n    }\n    scrollUpdating(scrollVal, action) {\n        if (action === 'add') {\n            this.scrollEle.scrollLeft += scrollVal;\n        }\n        else {\n            this.scrollEle.scrollLeft -= scrollVal;\n        }\n    }\n    frameScrollRequest(scrollVal, action, isContinuous) {\n        let step = 10;\n        if (isContinuous) {\n            this.scrollUpdating(scrollVal, action);\n            return;\n        }\n        if (!this.customStep) {\n            [].slice.call(selectAll('.' + CLS_OVERLAY, this.element)).forEach((el) => {\n                scrollVal -= el.offsetWidth;\n            });\n        }\n        let animate = () => {\n            let scrollValue;\n            let scrollStep;\n            if (this.contains(this.element, CLS_RTL) && this.browserCheck) {\n                scrollValue = -scrollVal;\n                scrollStep = -step;\n            }\n            else {\n                scrollValue = scrollVal;\n                scrollStep = step;\n            }\n            if (scrollValue < step) {\n                window.cancelAnimationFrame(scrollStep);\n            }\n            else {\n                this.scrollUpdating(scrollStep, action);\n                scrollVal -= scrollStep;\n                window.requestAnimationFrame(animate);\n            }\n        };\n        animate();\n    }\n    touchHandler(e) {\n        let ele = this.scrollEle;\n        let distance;\n        distance = e.distanceX;\n        if ((this.ieCheck) && this.contains(this.element, CLS_RTL)) {\n            distance = -distance;\n        }\n        if (e.scrollDirection === 'Left') {\n            ele.scrollLeft = ele.scrollLeft + distance;\n        }\n        else if (e.scrollDirection === 'Right') {\n            ele.scrollLeft = ele.scrollLeft - distance;\n        }\n    }\n    arrowDisabling(addDisable, removeDisable) {\n        if (this.isDevice) {\n            let arrowEle = isNullOrUndefined(addDisable) ? removeDisable : addDisable;\n            let arrowIcon = arrowEle.querySelector('.' + CLS_NAVARROW);\n            if (isNullOrUndefined(addDisable)) {\n                classList(arrowIcon, [CLS_NAVRIGHTARROW], [CLS_NAVLEFTARROW]);\n            }\n            else {\n                classList(arrowIcon, [CLS_NAVLEFTARROW], [CLS_NAVRIGHTARROW]);\n            }\n        }\n        else {\n            addDisable.classList.add(CLS_DISABLE);\n            addDisable.setAttribute('aria-disabled', 'true');\n            addDisable.removeAttribute('tabindex');\n            removeDisable.classList.remove(CLS_DISABLE);\n            removeDisable.setAttribute('aria-disabled', 'false');\n            removeDisable.setAttribute('tabindex', '0');\n        }\n        this.repeatScroll();\n    }\n    scrollHandler(e) {\n        let target = e.target;\n        let width = target.offsetWidth;\n        let rootEle = this.element;\n        let navLeftEle = this.element.querySelector('.' + CLS_HSCROLLNAVLEFT);\n        let navRightEle = this.element.querySelector('.' + CLS_HSCROLLNAVRIGHT);\n        let leftOverlay = this.element.querySelector('.' + CLS_LEFTOVERLAY);\n        let rightOverlay = this.element.querySelector('.' + CLS_RIGHTOVERLAY);\n        let scrollLeft = target.scrollLeft;\n        if (scrollLeft <= 0) {\n            scrollLeft = -scrollLeft;\n        }\n        if (this.isDevice) {\n            if (this.enableRtl && !(this.browserCheck || this.ieCheck)) {\n                leftOverlay = this.element.querySelector('.' + CLS_RIGHTOVERLAY);\n                rightOverlay = this.element.querySelector('.' + CLS_LEFTOVERLAY);\n            }\n            if (scrollLeft < OVERLAY_MAXWID) {\n                leftOverlay.style.width = scrollLeft + 'px';\n            }\n            else {\n                leftOverlay.style.width = '40px';\n            }\n            if ((target.scrollWidth - Math.ceil(width + scrollLeft)) < OVERLAY_MAXWID) {\n                rightOverlay.style.width = (target.scrollWidth - Math.ceil(width + scrollLeft)) + 'px';\n            }\n            else {\n                rightOverlay.style.width = '40px';\n            }\n        }\n        if (scrollLeft === 0) {\n            if ((!this.contains(rootEle, CLS_RTL) || this.browserCheck) || this.ieCheck) {\n                this.arrowDisabling(navLeftEle, navRightEle);\n            }\n            else {\n                this.arrowDisabling(navRightEle, navLeftEle);\n            }\n        }\n        else if (Math.ceil(width + scrollLeft + .1) >= target.scrollWidth) {\n            if ((!this.contains(rootEle, CLS_RTL) || this.browserCheck) || this.ieCheck) {\n                this.arrowDisabling(navRightEle, navLeftEle);\n            }\n            else {\n                this.arrowDisabling(navLeftEle, navRightEle);\n            }\n        }\n        else {\n            let disEle = this.element.querySelector('.' + CLS_HSCROLLNAV + '.' + CLS_DISABLE);\n            if (disEle) {\n                disEle.classList.remove(CLS_DISABLE);\n                disEle.setAttribute('aria-disabled', 'false');\n                disEle.setAttribute('tabindex', '0');\n            }\n        }\n    }\n    /**\n     * Gets called when the model property changes.The data that describes the old and new values of property that changed.\n     * @param  {HScrollModel} newProp\n     * @param  {HScrollModel} oldProp\n     * @returns void\n     * @private\n     */\n    onPropertyChanged(newProp, oldProp) {\n        for (let prop of Object.keys(newProp)) {\n            switch (prop) {\n                case 'scrollStep':\n                    this.setScrollState();\n                    break;\n                case 'enableRtl':\n                    newProp.enableRtl ? this.element.classList.add(CLS_RTL) : this.element.classList.remove(CLS_RTL);\n                    break;\n            }\n        }\n    }\n};\n__decorate([\n    Property(null)\n], HScroll.prototype, \"scrollStep\", void 0);\nHScroll = __decorate([\n    NotifyPropertyChanges\n], HScroll);\n\nvar __decorate$1 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nconst CLS_ROOT$1 = 'e-vscroll';\nconst CLS_RTL$1 = 'e-rtl';\nconst CLS_DISABLE$1 = 'e-overlay';\nconst CLS_VSCROLLBAR = 'e-vscroll-bar';\nconst CLS_VSCROLLCON = 'e-vscroll-content';\nconst CLS_NAVARROW$1 = 'e-nav-arrow';\nconst CLS_NAVUPARROW = 'e-nav-up-arrow';\nconst CLS_NAVDOWNARROW = 'e-nav-down-arrow';\nconst CLS_VSCROLLNAV = 'e-scroll-nav';\nconst CLS_VSCROLLNAVUP = 'e-scroll-up-nav';\nconst CLS_VSCROLLNAVDOWN = 'e-scroll-down-nav';\nconst CLS_DEVICE$1 = 'e-scroll-device';\nconst CLS_OVERLAY$1 = 'e-scroll-overlay';\nconst CLS_UPOVERLAY = 'e-scroll-up-overlay';\nconst CLS_DOWNOVERLAY = 'e-scroll-down-overlay';\nconst OVERLAY_MAXWID$1 = 40;\n/**\n * VScroll module is introduces vertical scroller when content exceeds the current viewing area.\n * It can be useful for the components like Toolbar, Tab which needs vertical scrolling alone.\n * Hidden content can be view by touch moving or icon click.\n * ```html\n * <div id=\"scroll\"/>\n * <script>\n *   var scrollObj = new VScroll();\n *   scrollObj.appendTo(\"#scroll\");\n * </script>\n * ```\n */\nlet VScroll = class VScroll extends Component {\n    /**\n     * Initializes a new instance of the VScroll class.\n     * @param options  - Specifies VScroll model properties as options.\n     * @param element  - Specifies the element for which vertical scrolling applies.\n     */\n    constructor(options, element) {\n        super(options, element);\n    }\n    /**\n     * Initialize the event handler\n     * @private\n     */\n    preRender() {\n        this.browser = Browser.info.name;\n        this.browserCheck = this.browser === 'mozilla';\n        this.isDevice = Browser.isDevice;\n        this.customStep = true;\n        let ele = this.element;\n        this.ieCheck = this.browser === 'edge' || this.browser === 'msie';\n        this.initialize();\n        if (ele.id === '') {\n            ele.id = getUniqueID('vscroll');\n            this.uniqueId = true;\n        }\n        ele.style.display = 'block';\n        if (this.enableRtl) {\n            ele.classList.add(CLS_RTL$1);\n        }\n    }\n    /**\n     * To Initialize the vertical scroll rendering\n     * @private\n     */\n    render() {\n        this.touchModule = new Touch(this.element, { scroll: this.touchHandler.bind(this), swipe: this.swipeHandler.bind(this) });\n        EventHandler.add(this.scrollEle, 'scroll', this.scrollEventHandler, this);\n        if (!this.isDevice) {\n            this.createNavIcon(this.element);\n        }\n        else {\n            this.element.classList.add(CLS_DEVICE$1);\n            this.createOverlayElement(this.element);\n        }\n        this.setScrollState();\n        EventHandler.add(this.element, 'wheel', this.wheelEventHandler, this);\n    }\n    setScrollState() {\n        if (isNullOrUndefined(this.scrollStep) || this.scrollStep < 0) {\n            this.scrollStep = this.scrollEle.offsetHeight;\n            this.customStep = false;\n        }\n        else {\n            this.customStep = true;\n        }\n    }\n    initialize() {\n        let scrollCnt = createElement('div', { className: CLS_VSCROLLCON });\n        let scrollBar = createElement('div', { className: CLS_VSCROLLBAR });\n        scrollBar.setAttribute('tabindex', '-1');\n        let ele = this.element;\n        let innerEle = [].slice.call(ele.children);\n        for (let ele of innerEle) {\n            scrollCnt.appendChild(ele);\n        }\n        scrollBar.appendChild(scrollCnt);\n        ele.appendChild(scrollBar);\n        scrollBar.style.overflowY = 'hidden';\n        this.scrollEle = scrollBar;\n        this.scrollItems = scrollCnt;\n    }\n    getPersistData() {\n        let keyEntity = ['scrollStep'];\n        return this.addOnPersist(keyEntity);\n    }\n    /**\n     * Returns the current module name.\n     * @returns string\n     * @private\n     */\n    getModuleName() {\n        return 'vScroll';\n    }\n    /**\n     * Removes the control from the DOM and also removes all its related events.\n     * @returns void\n     */\n    destroy() {\n        let el = this.element;\n        el.style.display = '';\n        removeClass([this.element], [CLS_ROOT$1, CLS_DEVICE$1]);\n        let navs = selectAll('.e-' + el.id + '_nav.' + CLS_VSCROLLNAV, el);\n        let overlays = selectAll('.' + CLS_OVERLAY$1, el);\n        [].slice.call(overlays).forEach((ele) => {\n            detach(ele);\n        });\n        for (let elem of [].slice.call(this.scrollItems.children)) {\n            el.appendChild(elem);\n        }\n        if (this.uniqueId) {\n            this.element.removeAttribute('id');\n        }\n        detach(this.scrollEle);\n        if (navs.length > 0) {\n            detach(navs[0]);\n            if (!isNullOrUndefined(navs[1])) {\n                detach(navs[1]);\n            }\n        }\n        EventHandler.remove(this.scrollEle, 'scroll', this.scrollEventHandler);\n        this.touchModule.destroy();\n        this.touchModule = null;\n        super.destroy();\n    }\n    /**\n     * Specifies the value to disable/enable the VScroll component.\n     * When set to `true` , the component will be disabled.\n     * @param  {boolean} value - Based on this Boolean value, VScroll will be enabled (false) or disabled (true).\n     * @returns void.\n     */\n    disable(value) {\n        let navEle = selectAll('.e-scroll-nav:not(.' + CLS_DISABLE$1 + ')', this.element);\n        value ? this.element.classList.add(CLS_DISABLE$1) : this.element.classList.remove(CLS_DISABLE$1);\n        [].slice.call(navEle).forEach((el) => {\n            el.setAttribute('tabindex', !value ? '0' : '-1');\n        });\n    }\n    createOverlayElement(element) {\n        let id = element.id.concat('_nav');\n        let downOverlayEle = createElement('div', { className: CLS_OVERLAY$1 + ' ' + CLS_DOWNOVERLAY });\n        let clsDown = 'e-' + element.id.concat('_nav ' + CLS_VSCROLLNAV + ' ' + CLS_VSCROLLNAVDOWN);\n        let downEle = createElement('div', { id: id.concat('down'), className: clsDown });\n        let navItem = createElement('div', { className: CLS_NAVDOWNARROW + ' ' + CLS_NAVARROW$1 + ' e-icons' });\n        downEle.appendChild(navItem);\n        let upEle = createElement('div', { className: CLS_OVERLAY$1 + ' ' + CLS_UPOVERLAY });\n        if (this.ieCheck) {\n            downEle.classList.add('e-ie-align');\n        }\n        element.appendChild(downOverlayEle);\n        element.appendChild(downEle);\n        element.insertBefore(upEle, element.firstChild);\n        this.eventBinding([downEle]);\n    }\n    createNavIcon(element) {\n        let id = element.id.concat('_nav');\n        let clsDown = 'e-' + element.id.concat('_nav ' + CLS_VSCROLLNAV + ' ' + CLS_VSCROLLNAVDOWN);\n        let nav = createElement('div', { id: id.concat('_down'), className: clsDown });\n        nav.setAttribute('aria-disabled', 'false');\n        let navItem = createElement('div', { className: CLS_NAVDOWNARROW + ' ' + CLS_NAVARROW$1 + ' e-icons' });\n        let clsUp = 'e-' + element.id.concat('_nav ' + CLS_VSCROLLNAV + ' ' + CLS_VSCROLLNAVUP);\n        let navElement = createElement('div', { id: id.concat('_up'), className: clsUp + ' ' + CLS_DISABLE$1 });\n        navElement.setAttribute('aria-disabled', 'true');\n        let navUpItem = createElement('div', { className: CLS_NAVUPARROW + ' ' + CLS_NAVARROW$1 + ' e-icons' });\n        navElement.appendChild(navUpItem);\n        nav.appendChild(navItem);\n        nav.setAttribute('tabindex', '0');\n        element.appendChild(nav);\n        element.insertBefore(navElement, element.firstChild);\n        if (this.ieCheck) {\n            nav.classList.add('e-ie-align');\n            navElement.classList.add('e-ie-align');\n        }\n        this.eventBinding([nav, navElement]);\n    }\n    onKeyPress(ev) {\n        if (ev.key === 'Enter') {\n            let timeoutFun = () => {\n                this.keyTimeout = true;\n                this.eleScrolling(10, ev.target, true);\n            };\n            this.keyTimer = window.setTimeout(() => { timeoutFun(); }, 100);\n        }\n    }\n    onKeyUp(ev) {\n        if (ev.key !== 'Enter') {\n            return;\n        }\n        if (this.keyTimeout) {\n            this.keyTimeout = false;\n        }\n        else {\n            ev.target.click();\n        }\n        clearTimeout(this.keyTimer);\n    }\n    eventBinding(element) {\n        [].slice.call(element).forEach((ele) => {\n            new Touch(ele, { tapHold: this.tabHoldHandler.bind(this), tapHoldThreshold: 500 });\n            ele.addEventListener('keydown', this.onKeyPress.bind(this));\n            ele.addEventListener('keyup', this.onKeyUp.bind(this));\n            ele.addEventListener('mouseup', this.repeatScroll.bind(this));\n            ele.addEventListener('touchend', this.repeatScroll.bind(this));\n            ele.addEventListener('contextmenu', (e) => {\n                e.preventDefault();\n            });\n            EventHandler.add(ele, 'click', this.clickEventHandler, this);\n        });\n    }\n    repeatScroll() {\n        clearInterval(this.timeout);\n    }\n    tabHoldHandler(ev) {\n        let trgt = ev.originalEvent.target;\n        trgt = this.contains(trgt, CLS_VSCROLLNAV) ? trgt.firstElementChild : trgt;\n        let scrollDistance = 10;\n        let timeoutFun = () => {\n            this.eleScrolling(scrollDistance, trgt, true);\n        };\n        this.timeout = window.setInterval(() => { timeoutFun(); }, 50);\n    }\n    contains(element, className) {\n        return element.classList.contains(className);\n    }\n    eleScrolling(scrollDis, trgt, isContinuous) {\n        let rootElement = this.element;\n        let classList$$1 = trgt.classList;\n        if (classList$$1.contains(CLS_VSCROLLNAV)) {\n            classList$$1 = trgt.querySelector('.' + CLS_NAVARROW$1).classList;\n        }\n        if (classList$$1.contains(CLS_NAVDOWNARROW)) {\n            this.frameScrollRequest(scrollDis, 'add', isContinuous);\n        }\n        else if (classList$$1.contains(CLS_NAVUPARROW)) {\n            this.frameScrollRequest(scrollDis, '', isContinuous);\n        }\n    }\n    clickEventHandler(event) {\n        this.eleScrolling(this.scrollStep, event.target, false);\n    }\n    wheelEventHandler(e) {\n        e.preventDefault();\n        this.frameScrollRequest(this.scrollStep, (e.deltaY > 0 ? 'add' : ''), false);\n    }\n    swipeHandler(e) {\n        let swipeElement = this.scrollEle;\n        let distance;\n        if (e.velocity <= 1) {\n            distance = e.distanceY / (e.velocity * 10);\n        }\n        else {\n            distance = e.distanceY / e.velocity;\n        }\n        let start = 0.5;\n        let animate = () => {\n            let step = Math.sin(start);\n            if (step <= 0) {\n                window.cancelAnimationFrame(step);\n            }\n            else {\n                if (e.swipeDirection === 'Up') {\n                    swipeElement.scrollTop += distance * step;\n                }\n                else if (e.swipeDirection === 'Down') {\n                    swipeElement.scrollTop -= distance * step;\n                }\n                start -= 0.02;\n                window.requestAnimationFrame(animate);\n            }\n        };\n        animate();\n    }\n    scrollUpdating(scrollVal, action) {\n        if (action === 'add') {\n            this.scrollEle.scrollTop += scrollVal;\n        }\n        else {\n            this.scrollEle.scrollTop -= scrollVal;\n        }\n    }\n    frameScrollRequest(scrollValue, action, isContinuous) {\n        let step = 10;\n        if (isContinuous) {\n            this.scrollUpdating(scrollValue, action);\n            return;\n        }\n        if (!this.customStep) {\n            [].slice.call(selectAll('.' + CLS_OVERLAY$1, this.element)).forEach((el) => {\n                scrollValue -= el.offsetHeight;\n            });\n        }\n        let animate = () => {\n            if (scrollValue < step) {\n                window.cancelAnimationFrame(step);\n            }\n            else {\n                this.scrollUpdating(step, action);\n                scrollValue -= step;\n                window.requestAnimationFrame(animate);\n            }\n        };\n        animate();\n    }\n    touchHandler(e) {\n        let el = this.scrollEle;\n        let distance;\n        distance = e.distanceY;\n        if (e.scrollDirection === 'Up') {\n            el.scrollTop = el.scrollTop + distance;\n        }\n        else if (e.scrollDirection === 'Down') {\n            el.scrollTop = el.scrollTop - distance;\n        }\n    }\n    arrowDisabling(addDisableCls, removeDisableCls) {\n        if (this.isDevice) {\n            let arrowEle = isNullOrUndefined(addDisableCls) ? removeDisableCls : addDisableCls;\n            let arrowIcon = arrowEle.querySelector('.' + CLS_NAVARROW$1);\n            if (isNullOrUndefined(addDisableCls)) {\n                classList(arrowIcon, [CLS_NAVDOWNARROW], [CLS_NAVUPARROW]);\n            }\n            else {\n                classList(arrowIcon, [CLS_NAVUPARROW], [CLS_NAVDOWNARROW]);\n            }\n        }\n        else {\n            addDisableCls.classList.add(CLS_DISABLE$1);\n            addDisableCls.setAttribute('aria-disabled', 'true');\n            addDisableCls.removeAttribute('tabindex');\n            removeDisableCls.classList.remove(CLS_DISABLE$1);\n            removeDisableCls.setAttribute('aria-disabled', 'false');\n            removeDisableCls.setAttribute('tabindex', '0');\n        }\n        this.repeatScroll();\n    }\n    scrollEventHandler(e) {\n        let target = e.target;\n        let height = target.offsetHeight;\n        let rootEle = this.element;\n        let navUpEle = this.element.querySelector('.' + CLS_VSCROLLNAVUP);\n        let navDownEle = this.element.querySelector('.' + CLS_VSCROLLNAVDOWN);\n        let upOverlay = this.element.querySelector('.' + CLS_UPOVERLAY);\n        let downOverlay = this.element.querySelector('.' + CLS_DOWNOVERLAY);\n        let scrollTop = target.scrollTop;\n        if (scrollTop <= 0) {\n            scrollTop = -scrollTop;\n        }\n        if (this.isDevice) {\n            if (scrollTop < OVERLAY_MAXWID$1) {\n                upOverlay.style.height = scrollTop + 'px';\n            }\n            else {\n                upOverlay.style.height = '40px';\n            }\n            if ((target.scrollHeight - Math.ceil(height + scrollTop)) < OVERLAY_MAXWID$1) {\n                downOverlay.style.height = (target.scrollHeight - Math.ceil(height + scrollTop)) + 'px';\n            }\n            else {\n                downOverlay.style.height = '40px';\n            }\n        }\n        if (scrollTop === 0) {\n            this.arrowDisabling(navUpEle, navDownEle);\n        }\n        else if (Math.ceil(height + scrollTop + .1) >= target.scrollHeight) {\n            this.arrowDisabling(navDownEle, navUpEle);\n        }\n        else {\n            let disEle = this.element.querySelector('.' + CLS_VSCROLLNAV + '.' + CLS_DISABLE$1);\n            if (disEle) {\n                disEle.classList.remove(CLS_DISABLE$1);\n                disEle.setAttribute('aria-disabled', 'false');\n                disEle.setAttribute('tabindex', '0');\n            }\n        }\n    }\n    /**\n     * Gets called when the model property changes.The data that describes the old and new values of property that changed.\n     * @param  {VScrollModel} newProp\n     * @param  {VScrollModel} oldProp\n     * @returns void\n     * @private\n     */\n    onPropertyChanged(newProp, oldProp) {\n        for (let prop of Object.keys(newProp)) {\n            switch (prop) {\n                case 'scrollStep':\n                    this.setScrollState();\n                    break;\n                case 'enableRtl':\n                    newProp.enableRtl ? this.element.classList.add(CLS_RTL$1) : this.element.classList.remove(CLS_RTL$1);\n                    break;\n            }\n        }\n    }\n};\n__decorate$1([\n    Property(null)\n], VScroll.prototype, \"scrollStep\", void 0);\nVScroll = __decorate$1([\n    NotifyPropertyChanges\n], VScroll);\n\n/**\n * Used to add scroll in menu.\n * @hidden\n */\nfunction addScrolling(createElement$$1, container, content, scrollType, enableRtl, offset) {\n    let containerOffset;\n    let contentOffset;\n    if (scrollType === 'vscroll') {\n        containerOffset = offset || container.offsetHeight;\n        contentOffset = content.offsetHeight;\n    }\n    else {\n        containerOffset = container.offsetWidth;\n        contentOffset = content.offsetWidth;\n    }\n    if (containerOffset < contentOffset) {\n        let scrollEle = createElement$$1('div', { className: 'e-menu-' + scrollType });\n        container.appendChild(scrollEle);\n        scrollEle.appendChild(content);\n        if (offset) {\n            scrollEle.style.overflow = 'hidden';\n            scrollEle.style.height = offset + 'px';\n        }\n        else {\n            scrollEle.style.maxHeight = container.style.maxHeight;\n            container.style.overflow = 'hidden';\n        }\n        let scrollObj;\n        if (scrollType === 'vscroll') {\n            scrollObj = new VScroll({ enableRtl: enableRtl }, scrollEle);\n            scrollObj.scrollStep = select('.e-' + scrollType + '-bar', container).offsetHeight / 2;\n        }\n        else {\n            scrollObj = new HScroll({ enableRtl: enableRtl }, scrollEle);\n            scrollObj.scrollStep = select('.e-' + scrollType + '-bar', container).offsetWidth;\n        }\n        return scrollEle;\n    }\n    else {\n        return content;\n    }\n}\n/**\n * Used to destroy the scroll option.\n * @hidden\n */\nfunction destroyScroll(scrollObj, element, skipEle) {\n    if (scrollObj) {\n        let menu = select('.e-menu-parent', element);\n        if (menu) {\n            if (!skipEle || skipEle === menu) {\n                scrollObj.destroy();\n                element.parentElement.appendChild(menu);\n                detach(element);\n            }\n        }\n        else {\n            scrollObj.destroy();\n            detach(element);\n        }\n    }\n}\n\nvar __decorate$2 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nconst ENTER = 'enter';\nconst ESCAPE = 'escape';\nconst FOCUSED = 'e-focused';\nconst HEADER = 'e-menu-header';\nconst SELECTED = 'e-selected';\nconst SEPARATOR = 'e-separator';\nconst UPARROW = 'uparrow';\nconst DOWNARROW = 'downarrow';\nconst LEFTARROW = 'leftarrow';\nconst RIGHTARROW = 'rightarrow';\nconst HOME = 'home';\nconst END = 'end';\nconst CARET = 'e-caret';\nconst ITEM = 'e-menu-item';\nconst DISABLED = 'e-disabled';\nconst HIDE = 'e-menu-hide';\nconst ICONS = 'e-icons';\nconst RTL = 'e-rtl';\nconst POPUP = 'e-menu-popup';\nconst TEMPLATE_PROPERTY = 'Template';\n/**\n * Configures the field options of the Menu.\n */\nclass FieldSettings extends ChildProperty {\n}\n__decorate$2([\n    Property('id')\n], FieldSettings.prototype, \"itemId\", void 0);\n__decorate$2([\n    Property('parentId')\n], FieldSettings.prototype, \"parentId\", void 0);\n__decorate$2([\n    Property('text')\n], FieldSettings.prototype, \"text\", void 0);\n__decorate$2([\n    Property('iconCss')\n], FieldSettings.prototype, \"iconCss\", void 0);\n__decorate$2([\n    Property('url')\n], FieldSettings.prototype, \"url\", void 0);\n__decorate$2([\n    Property('separator')\n], FieldSettings.prototype, \"separator\", void 0);\n__decorate$2([\n    Property('items')\n], FieldSettings.prototype, \"children\", void 0);\n/**\n * Specifies menu items.\n */\nclass MenuItem extends ChildProperty {\n}\n__decorate$2([\n    Property(null)\n], MenuItem.prototype, \"iconCss\", void 0);\n__decorate$2([\n    Property('')\n], MenuItem.prototype, \"id\", void 0);\n__decorate$2([\n    Property(false)\n], MenuItem.prototype, \"separator\", void 0);\n__decorate$2([\n    Collection([], MenuItem)\n], MenuItem.prototype, \"items\", void 0);\n__decorate$2([\n    Property('')\n], MenuItem.prototype, \"text\", void 0);\n__decorate$2([\n    Property('')\n], MenuItem.prototype, \"url\", void 0);\n/**\n * Animation configuration settings.\n */\nclass MenuAnimationSettings extends ChildProperty {\n}\n__decorate$2([\n    Property('SlideDown')\n], MenuAnimationSettings.prototype, \"effect\", void 0);\n__decorate$2([\n    Property(400)\n], MenuAnimationSettings.prototype, \"duration\", void 0);\n__decorate$2([\n    Property('ease')\n], MenuAnimationSettings.prototype, \"easing\", void 0);\n/**\n * @private\n * Base class for Menu and ContextMenu components.\n */\nlet MenuBase = class MenuBase extends Component {\n    /**\n     * Constructor for creating the widget.\n     * @private\n     */\n    constructor(options, element) {\n        super(options, element);\n        this.navIdx = [];\n        this.animation = new Animation({});\n        this.isTapHold = false;\n        this.tempItem = [];\n    }\n    /**\n     * Initialized third party configuration settings.\n     * @private\n     */\n    preRender() {\n        if (!this.isMenu) {\n            let ul;\n            if (this.element.tagName === 'EJS-CONTEXTMENU') {\n                ul = this.createElement('ul', {\n                    id: getUniqueID(this.getModuleName()), className: 'e-control e-lib e-' + this.getModuleName()\n                });\n                let ejInst = getValue('ej2_instances', this.element);\n                removeClass([this.element], ['e-control', 'e-lib', 'e-' + this.getModuleName()]);\n                this.clonedElement = this.element;\n                this.element = ul;\n                setValue('ej2_instances', ejInst, this.element);\n            }\n            else {\n                ul = this.createElement('ul', { id: getUniqueID(this.getModuleName()) });\n                append([].slice.call(this.element.cloneNode(true).children), ul);\n                let refEle = this.element.nextElementSibling;\n                refEle ? this.element.parentElement.insertBefore(ul, refEle) : this.element.parentElement.appendChild(ul);\n                this.clonedElement = ul;\n            }\n            this.clonedElement.style.display = 'none';\n        }\n        if (this.element.tagName === 'EJS-MENU') {\n            let ele = this.element;\n            let ejInstance = getValue('ej2_instances', ele);\n            let ul = this.createElement('ul');\n            let wrapper = this.createElement('EJS-MENU', { className: 'e-' + this.getModuleName() + '-wrapper' });\n            for (let idx = 0, len = ele.attributes.length; idx < len; idx++) {\n                ul.setAttribute(ele.attributes[idx].nodeName, ele.attributes[idx].nodeValue);\n            }\n            ele.parentNode.insertBefore(wrapper, ele);\n            detach(ele);\n            ele = ul;\n            wrapper.appendChild(ele);\n            setValue('ej2_instances', ejInstance, ele);\n            this.clonedElement = wrapper;\n            this.element = ele;\n            if (!this.element.id) {\n                this.element.id = getUniqueID(this.getModuleName());\n            }\n        }\n    }\n    /**\n     * Initialize the control rendering\n     * @private\n     */\n    render() {\n        this.initialize();\n        this.renderItems();\n        if (this.isMenu && this.template && isBlazor()) {\n            let menuTemplateId = this.element.id + TEMPLATE_PROPERTY;\n            resetBlazorTemplate(menuTemplateId, TEMPLATE_PROPERTY);\n            if (Object.keys(blazorTemplates).length) {\n                extend(this.tempItem, blazorTemplates[menuTemplateId], [], true);\n            }\n            updateBlazorTemplate(menuTemplateId, TEMPLATE_PROPERTY, this);\n        }\n        this.wireEvents();\n        this.renderComplete();\n    }\n    initialize() {\n        let wrapper = this.getWrapper();\n        if (!wrapper) {\n            wrapper = this.createElement('div', { className: 'e-' + this.getModuleName() + '-wrapper' });\n            if (this.isMenu) {\n                this.element.parentElement.insertBefore(wrapper, this.element);\n            }\n            else {\n                document.body.appendChild(wrapper);\n            }\n        }\n        if (this.cssClass) {\n            addClass([wrapper], this.cssClass.split(' '));\n        }\n        if (this.enableRtl) {\n            wrapper.classList.add(RTL);\n        }\n        wrapper.appendChild(this.element);\n        if (this.isMenu && this.hamburgerMode) {\n            if (!this.target) {\n                this.createHeaderContainer(wrapper);\n            }\n        }\n    }\n    renderItems() {\n        if (!this.items.length) {\n            let items = ListBase.createJsonFromElement(this.element, { fields: { child: 'items' } });\n            this.setProperties({ items: items }, true);\n            if (isBlazor()) {\n                this.element = this.removeChildElement(this.element);\n            }\n            else {\n                this.element.innerHTML = '';\n            }\n        }\n        let ul = this.createItems(this.items);\n        append(Array.prototype.slice.call(ul.children), this.element);\n        this.element.classList.add('e-menu-parent');\n        if (this.isMenu) {\n            if (!this.hamburgerMode && this.element.classList.contains('e-vertical')) {\n                this.setBlankIconStyle(this.element);\n            }\n            if (this.enableScrolling) {\n                let wrapper = this.getWrapper();\n                this.element.classList.contains('e-vertical') ?\n                    addScrolling(this.createElement, wrapper, this.element, 'vscroll', this.enableRtl)\n                    : addScrolling(this.createElement, wrapper, this.element, 'hscroll', this.enableRtl);\n            }\n        }\n    }\n    wireEvents() {\n        let wrapper = this.getWrapper();\n        if (this.target) {\n            let target;\n            let targetElems = selectAll(this.target);\n            for (let i = 0, len = targetElems.length; i < len; i++) {\n                target = targetElems[i];\n                if (this.isMenu) {\n                    EventHandler.add(target, 'click', this.menuHeaderClickHandler, this);\n                }\n                else {\n                    if (Browser.isIos) {\n                        new Touch(target, { tapHold: this.touchHandler.bind(this) });\n                    }\n                    else {\n                        EventHandler.add(target, 'contextmenu', this.cmenuHandler, this);\n                    }\n                }\n            }\n            this.targetElement = target;\n            if (!this.isMenu) {\n                EventHandler.add(this.targetElement, 'scroll', this.scrollHandler, this);\n                for (let parent of getScrollableParent(this.targetElement)) {\n                    EventHandler.add(parent, 'scroll', this.scrollHandler, this);\n                }\n            }\n        }\n        if (!Browser.isDevice) {\n            this.delegateMoverHandler = this.moverHandler.bind(this);\n            this.delegateMouseDownHandler = this.mouseDownHandler.bind(this);\n            EventHandler.add(this.isMenu ? document : wrapper, 'mouseover', this.delegateMoverHandler, this);\n            EventHandler.add(document, 'mousedown', this.delegateMouseDownHandler, this);\n        }\n        this.delegateClickHandler = this.clickHandler.bind(this);\n        EventHandler.add(document, 'click', this.delegateClickHandler, this);\n        this.wireKeyboardEvent(wrapper);\n        this.rippleFn = rippleEffect(wrapper, { selector: '.' + ITEM });\n    }\n    wireKeyboardEvent(element) {\n        let keyConfigs = {\n            downarrow: DOWNARROW,\n            uparrow: UPARROW,\n            enter: ENTER,\n            leftarrow: LEFTARROW,\n            rightarrow: RIGHTARROW,\n            escape: ESCAPE\n        };\n        if (this.isMenu) {\n            keyConfigs.home = HOME;\n            keyConfigs.end = END;\n        }\n        new KeyboardEvents(element, {\n            keyAction: this.keyBoardHandler.bind(this),\n            keyConfigs: keyConfigs\n        });\n    }\n    mouseDownHandler(e) {\n        if (closest(e.target, '.e-' + this.getModuleName() + '-wrapper') !== this.getWrapper()\n            && (!closest(e.target, '.e-' + this.getModuleName() + '-popup'))) {\n            this.closeMenu(this.isMenu ? null : this.navIdx.length, e);\n        }\n    }\n    keyBoardHandler(e) {\n        let actionName = '';\n        let trgt = e.target;\n        let actionNeeded = this.isMenu && !this.hamburgerMode && !this.element.classList.contains('e-vertical')\n            && this.navIdx.length < 1;\n        e.preventDefault();\n        if (this.enableScrolling && e.keyCode === 13 && trgt.classList.contains('e-scroll-nav')) {\n            this.removeLIStateByClass([FOCUSED, SELECTED], [closest(trgt, '.e-' + this.getModuleName() + '-wrapper')]);\n        }\n        if (actionNeeded) {\n            switch (e.action) {\n                case RIGHTARROW:\n                    actionName = RIGHTARROW;\n                    e.action = DOWNARROW;\n                    break;\n                case LEFTARROW:\n                    actionName = LEFTARROW;\n                    e.action = UPARROW;\n                    break;\n                case DOWNARROW:\n                    actionName = DOWNARROW;\n                    e.action = RIGHTARROW;\n                    break;\n                case UPARROW:\n                    actionName = UPARROW;\n                    e.action = '';\n                    break;\n            }\n        }\n        else if (this.enableRtl) {\n            switch (e.action) {\n                case LEFTARROW:\n                    actionNeeded = true;\n                    actionName = LEFTARROW;\n                    e.action = RIGHTARROW;\n                    break;\n                case RIGHTARROW:\n                    actionNeeded = true;\n                    actionName = RIGHTARROW;\n                    e.action = LEFTARROW;\n                    break;\n            }\n        }\n        switch (e.action) {\n            case DOWNARROW:\n            case UPARROW:\n            case END:\n            case HOME:\n                this.upDownKeyHandler(e);\n                break;\n            case RIGHTARROW:\n                this.rightEnterKeyHandler(e);\n                break;\n            case LEFTARROW:\n                this.leftEscKeyHandler(e);\n                break;\n            case ENTER:\n                if (this.hamburgerMode && trgt.tagName === 'SPAN' && trgt.classList.contains('e-menu-icon')) {\n                    this.menuHeaderClickHandler(e);\n                }\n                else {\n                    this.rightEnterKeyHandler(e);\n                }\n                break;\n            case ESCAPE:\n                this.leftEscKeyHandler(e);\n                break;\n        }\n        if (actionNeeded) {\n            e.action = actionName;\n        }\n    }\n    upDownKeyHandler(e) {\n        let cul = this.getUlByNavIdx();\n        let defaultIdx = (e.action === DOWNARROW || e.action === HOME) ? 0 : cul.childElementCount - 1;\n        let fliIdx = defaultIdx;\n        let fli = this.getLIByClass(cul, FOCUSED);\n        if (fli) {\n            if (e.action !== END && e.action !== HOME) {\n                fliIdx = this.getIdx(cul, fli);\n            }\n            fli.classList.remove(FOCUSED);\n            if (e.action !== END && e.action !== HOME) {\n                e.action === DOWNARROW ? fliIdx++ : fliIdx--;\n                if (fliIdx === (e.action === DOWNARROW ? cul.childElementCount : -1)) {\n                    fliIdx = defaultIdx;\n                }\n            }\n        }\n        let cli = cul.children[fliIdx];\n        fliIdx = this.isValidLI(cli, fliIdx, e.action);\n        cul.children[fliIdx].classList.add(FOCUSED);\n        cul.children[fliIdx].focus();\n    }\n    isValidLI(cli, index, action) {\n        let wrapper = this.getWrapper();\n        let cul = this.getUlByNavIdx();\n        if (cli.classList.contains(SEPARATOR) || cli.classList.contains(DISABLED) || cli.classList.contains(HIDE)) {\n            ((action === DOWNARROW) || (action === RIGHTARROW)) ? index++ : index--;\n        }\n        cli = cul.children[index];\n        if (cli.classList.contains(SEPARATOR) || cli.classList.contains(DISABLED) || cli.classList.contains(HIDE)) {\n            index = this.isValidLI(cli, index, action);\n        }\n        return index;\n    }\n    getUlByNavIdx(navIdxLen = this.navIdx.length) {\n        if (this.isMenu) {\n            let popup = [this.getWrapper()].concat([].slice.call(selectAll('.' + POPUP)))[navIdxLen];\n            return isNullOrUndefined(popup) ? null : select('.e-menu-parent', popup);\n        }\n        else {\n            return this.getWrapper().children[navIdxLen];\n        }\n    }\n    rightEnterKeyHandler(e) {\n        let eventArgs;\n        let cul = this.getUlByNavIdx();\n        let fli = this.getLIByClass(cul, FOCUSED);\n        if (fli) {\n            let fliIdx = this.getIdx(cul, fli);\n            let navIdx = this.navIdx.concat(fliIdx);\n            let item = this.getItem(navIdx);\n            if (item.items.length) {\n                this.navIdx.push(fliIdx);\n                this.keyType = 'right';\n                this.action = e.action;\n                this.openMenu(fli, item, -1, -1, e);\n            }\n            else {\n                if (e.action === ENTER) {\n                    if (this.isMenu && this.navIdx.length === 0) {\n                        this.removeLIStateByClass([SELECTED], [this.getWrapper()]);\n                    }\n                    else {\n                        fli.classList.remove(FOCUSED);\n                    }\n                    fli.classList.add(SELECTED);\n                    eventArgs = { element: fli, item: item, event: e };\n                    this.trigger('select', eventArgs);\n                    this.closeMenu(null, e);\n                }\n            }\n        }\n    }\n    leftEscKeyHandler(e) {\n        if (this.navIdx.length) {\n            this.keyType = 'left';\n            this.closeMenu(this.navIdx.length, e);\n        }\n        else {\n            if (e.action === ESCAPE) {\n                this.closeMenu(null, e);\n            }\n        }\n    }\n    scrollHandler(e) {\n        this.closeMenu(null, e);\n    }\n    touchHandler(e) {\n        this.isTapHold = true;\n        this.cmenuHandler(e.originalEvent);\n    }\n    cmenuHandler(e) {\n        e.preventDefault();\n        this.isCMenu = true;\n        this.pageX = e.changedTouches ? e.changedTouches[0].pageX + 1 : e.pageX + 1;\n        this.pageY = e.changedTouches ? e.changedTouches[0].pageY + 1 : e.pageY + 1;\n        this.closeMenu(null, e);\n        if (this.isCMenu) {\n            if (this.canOpen(e.target)) {\n                this.openMenu(null, null, this.pageY, this.pageX, e);\n            }\n            this.isCMenu = false;\n        }\n    }\n    // tslint:disable-next-line:max-func-body-length\n    closeMenu(ulIndex = 0, e = null, isIterated) {\n        if (this.isMenuVisible()) {\n            let sli;\n            let ul;\n            let item;\n            let items;\n            let beforeCloseArgs;\n            let wrapper = this.getWrapper();\n            let popups = this.getPopups();\n            let isClose = false;\n            let cnt = this.isMenu ? popups.length + 1 : wrapper.childElementCount;\n            ul = this.isMenu && cnt !== 1 ? select('.e-ul', popups[cnt - 2])\n                : selectAll('.e-menu-parent', wrapper)[cnt - 1];\n            if (this.isMenu && ul.classList.contains('e-menu')) {\n                sli = this.getLIByClass(ul, SELECTED);\n                if (sli) {\n                    sli.classList.remove(SELECTED);\n                }\n                isClose = true;\n            }\n            if (!isClose) {\n                let liElem = e && e.target && this.getLI(e.target);\n                item = this.navIdx.length ? this.getItem(this.navIdx) : null;\n                items = item ? item.items : this.items;\n                beforeCloseArgs = { element: ul, parentItem: this.isMenu && isBlazor() ? this.getMenuItemModel(item, ulIndex) : item,\n                    items: items, event: e, cancel: false };\n                this.trigger('beforeClose', beforeCloseArgs, (observedCloseArgs) => {\n                    let popupEle;\n                    let closeArgs;\n                    let popupId = '';\n                    let popupObj;\n                    let isOpen = !observedCloseArgs.cancel;\n                    if (isOpen || this.isCMenu) {\n                        if (this.isMenu) {\n                            popupEle = closest(ul, '.' + POPUP);\n                            if (this.hamburgerMode) {\n                                popupEle.parentElement.style.minHeight = '';\n                                closest(ul, '.e-menu-item').setAttribute('aria-expanded', 'false');\n                            }\n                            this.unWireKeyboardEvent(popupEle);\n                            destroyScroll(getInstance(popupEle.children[0], VScroll), popupEle.children[0]);\n                            popupObj = getInstance(popupEle, Popup);\n                            popupObj.hide();\n                            popupId = popupEle.id;\n                            popupObj.destroy();\n                            detach(popupEle);\n                        }\n                        else {\n                            this.toggleAnimation(ul, false);\n                        }\n                        closeArgs = { element: ul, parentItem: item, items: items };\n                        this.trigger('onClose', closeArgs);\n                        this.navIdx.pop();\n                    }\n                    this.updateReactTemplate();\n                    let trgtliId;\n                    let closedLi;\n                    let trgtLi;\n                    let trgtpopUp = this.getWrapper() && this.getUlByNavIdx();\n                    if (this.isCMenu) {\n                        if (this.canOpen(e.target)) {\n                            this.openMenu(null, null, this.pageY, this.pageX, e);\n                        }\n                        this.isCMenu = false;\n                    }\n                    if (this.isMenu && trgtpopUp && popupId.length) {\n                        trgtliId = new RegExp('(.*)-ej2menu-' + this.element.id + '-popup').exec(popupId)[1];\n                        closedLi = trgtpopUp.querySelector('[id=\"' + trgtliId + '\"]');\n                        trgtLi = (liElem && trgtpopUp.querySelector('[id=\"' + liElem.id + '\"]'));\n                    }\n                    let submenus = liElem && liElem.querySelectorAll('.e-menu-item');\n                    if (isOpen && this.hamburgerMode && ulIndex && !(submenus.length)) {\n                        this.afterCloseMenu(e);\n                    }\n                    else if (isOpen && !this.hamburgerMode && this.navIdx.length && closedLi && !trgtLi) {\n                        let ele = e ? closest(e.target, '.e-menu-wrapper') : null;\n                        if (ele) {\n                            ele = ele.querySelector('.e-menu-item');\n                            if (ele && this.getIndex(ele.id, true).length <= this.navIdx.length) {\n                                this.closeMenu(this.navIdx[this.navIdx.length - 1], e, true);\n                            }\n                        }\n                        else {\n                            this.closeMenu(this.navIdx[this.navIdx.length - 1], e);\n                        }\n                    }\n                    else if (isOpen && !isIterated && !ulIndex && ((this.hamburgerMode && this.navIdx.length) ||\n                        this.navIdx.length === 1)) {\n                        this.closeMenu(null, e);\n                    }\n                    else if (isOpen && isNullOrUndefined(ulIndex) && this.navIdx.length) {\n                        this.closeMenu(null, e);\n                    }\n                    else if (isOpen && !this.isMenu && !ulIndex && this.navIdx.length === 0 && !this.isMenusClosed) {\n                        this.isMenusClosed = true;\n                        this.closeMenu(0, e);\n                    }\n                    else if (isOpen && this.isMenu && e && e.target &&\n                        this.navIdx.length !== 0 && closest(e.target, '.e-menu-parent.e-control')) {\n                        this.closeMenu(0, e);\n                    }\n                    else {\n                        if (isOpen && (this.keyType === 'right' || this.keyType === 'click')) {\n                            this.afterCloseMenu(e);\n                        }\n                        else {\n                            let cul = this.getUlByNavIdx();\n                            let sli = this.getLIByClass(cul, SELECTED);\n                            if (sli) {\n                                sli.setAttribute('aria-expanded', 'false');\n                                sli.classList.remove(SELECTED);\n                                if (liElem) {\n                                    sli.classList.add(FOCUSED);\n                                    sli.focus();\n                                }\n                            }\n                            if (!isOpen && this.hamburgerMode && liElem && liElem.getAttribute('aria-expanded') === 'false' &&\n                                liElem.getAttribute('aria-haspopup') === 'true') {\n                                if (closest(liElem, '.e-menu-parent.e-control')) {\n                                    this.navIdx = [];\n                                }\n                                else {\n                                    this.navIdx.pop();\n                                }\n                                this.navIdx.push(this.cliIdx);\n                                let item = this.getItem(this.navIdx);\n                                liElem.setAttribute('aria-expanded', 'true');\n                                this.openMenu(liElem, item, -1, -1, e);\n                            }\n                        }\n                    }\n                    this.removeStateWrapper();\n                });\n            }\n        }\n    }\n    updateReactTemplate() {\n        // tslint:disable\n        if (this.isReact && this.template && this.navIdx.length === 0) {\n            // tslint:disable\n            let portals = this.portals.splice(0, this.items.length);\n            this.clearTemplate(['template']);\n            // tslint:disable\n            this.portals = portals;\n            this.renderReactTemplates();\n        }\n    }\n    getMenuItemModel(item, level) {\n        if (isNullOrUndefined(item)) {\n            return null;\n        }\n        if (isNullOrUndefined(level)) {\n            level = 0;\n        }\n        let fields = this.getFields(level);\n        return { text: item[fields.text], id: item[fields.id], items: item[fields.child], separator: item[fields.separator],\n            iconCss: item[fields.iconCss], url: item[fields.url] };\n    }\n    getPopups() {\n        let popups = [];\n        [].slice.call(document.querySelectorAll('.' + POPUP)).forEach((elem) => {\n            if (this.getIndex(elem.querySelector('.' + ITEM).id, true).length) {\n                popups.push(elem);\n            }\n        });\n        return popups;\n    }\n    isMenuVisible() {\n        return (this.navIdx.length > 0 || (this.element.classList.contains('e-contextmenu') && isVisible(this.element).valueOf()));\n    }\n    canOpen(target) {\n        let canOpen = true;\n        if (this.filter) {\n            canOpen = false;\n            let filter = this.filter.split(' ');\n            for (let i = 0, len = filter.length; i < len; i++) {\n                if (closest(target, '.' + filter[i])) {\n                    canOpen = true;\n                    break;\n                }\n            }\n        }\n        return canOpen;\n    }\n    openMenu(li, item, top = 0, left = 0, e = null, target = this.targetElement) {\n        let wrapper = this.getWrapper();\n        this.lItem = li;\n        let elemId = this.element.id !== '' ? this.element.id : 'menu';\n        this.isMenusClosed = false;\n        if (isNullOrUndefined(top)) {\n            top = -1;\n        }\n        if (isNullOrUndefined(left)) {\n            left = -1;\n        }\n        if (li) {\n            this.uList = this.createItems(item[this.getField('children', this.navIdx.length - 1)]);\n            if (!this.isMenu && Browser.isDevice) {\n                wrapper.lastChild.style.display = 'none';\n                let data = {\n                    text: item[this.getField('text')].toString(), iconCss: ICONS + ' e-previous'\n                };\n                let hdata = new MenuItem(this.items[0], 'items', data, true);\n                let hli = this.createItems([hdata]).children[0];\n                hli.classList.add(HEADER);\n                this.uList.insertBefore(hli, this.uList.children[0]);\n            }\n            if (this.isMenu) {\n                this.popupWrapper = this.createElement('div', {\n                    className: 'e-' + this.getModuleName() + '-wrapper ' + POPUP, id: li.id + '-ej2menu-' + elemId + '-popup'\n                });\n                if (this.hamburgerMode) {\n                    top = li.offsetHeight;\n                    li.appendChild(this.popupWrapper);\n                }\n                else {\n                    document.body.appendChild(this.popupWrapper);\n                }\n                this.isNestedOrVertical = this.element.classList.contains('e-vertical') || this.navIdx.length !== 1;\n                this.popupObj = this.generatePopup(this.popupWrapper, this.uList, li, this.isNestedOrVertical);\n                if (this.template) {\n                    this.renderReactTemplates();\n                }\n                if (this.hamburgerMode) {\n                    this.calculateIndentSize(this.uList, li);\n                }\n                else {\n                    if (this.cssClass) {\n                        addClass([this.popupWrapper], this.cssClass.split(' '));\n                    }\n                    this.popupObj.hide();\n                }\n                this.triggerBeforeOpen(li, this.uList, item, e, 0, 0, 'menu');\n            }\n            else {\n                this.uList.style.zIndex = this.element.style.zIndex;\n                wrapper.appendChild(this.uList);\n                this.triggerBeforeOpen(li, this.uList, item, e, top, left, 'none');\n            }\n        }\n        else {\n            this.uList = this.element;\n            this.uList.style.zIndex = getZindexPartial(target ? target : this.element).toString();\n            this.triggerBeforeOpen(li, this.uList, item, e, top, left, 'none');\n        }\n        if (this.isMenu && this.template && isBlazor()) {\n            let menuTemplateId = this.element.id + TEMPLATE_PROPERTY;\n            if (Object.keys(blazorTemplates).length) {\n                let itemFromBlazorTemplate = blazorTemplates[menuTemplateId];\n                this.tempItem = this.tempItem.concat(itemFromBlazorTemplate);\n                blazorTemplates[menuTemplateId] = this.tempItem;\n            }\n            updateBlazorTemplate(menuTemplateId, TEMPLATE_PROPERTY, this);\n        }\n    }\n    calculateIndentSize(ul, li) {\n        let liStyle = getComputedStyle(li);\n        let liIndent = parseInt(liStyle.textIndent, 10);\n        if (this.navIdx.length < 2 && !li.classList.contains('e-blankicon')) {\n            liIndent *= 2;\n        }\n        else {\n            liIndent += (liIndent / 4);\n        }\n        ul.style.textIndent = liIndent + 'px';\n        let blankIconElem = ul.querySelectorAll('.e-blankicon');\n        if (blankIconElem && blankIconElem.length) {\n            let menuIconElem = ul.querySelector('.e-menu-icon');\n            let menuIconElemStyle = getComputedStyle(menuIconElem);\n            let blankIconIndent = (parseInt(menuIconElemStyle.marginRight, 10) + menuIconElem.offsetWidth + liIndent);\n            for (let i = 0; i < blankIconElem.length; i++) {\n                blankIconElem[i].style.textIndent = blankIconIndent + 'px';\n            }\n        }\n    }\n    generatePopup(popupWrapper, ul, li, isNestedOrVertical) {\n        let popupObj = new Popup(popupWrapper, {\n            actionOnScroll: this.hamburgerMode ? 'none' : 'reposition',\n            relateTo: li,\n            collision: this.hamburgerMode ? { X: 'none', Y: 'none' } : { X: isNestedOrVertical ||\n                    this.enableRtl ? 'none' : 'flip', Y: 'fit' },\n            position: (isNestedOrVertical && !this.hamburgerMode) ? { X: 'right', Y: 'top' } : { X: 'left', Y: 'bottom' },\n            targetType: 'relative',\n            enableRtl: this.enableRtl,\n            content: ul,\n            open: () => {\n                let scrollEle = select('.e-menu-vscroll', popupObj.element);\n                if (scrollEle) {\n                    scrollEle.style.height = 'inherit';\n                    scrollEle.style.maxHeight = '';\n                }\n                let ul = select('.e-ul', popupObj.element);\n                popupObj.element.style.maxHeight = '';\n                ul.focus();\n                this.triggerOpen(ul);\n            }\n        });\n        return popupObj;\n    }\n    createHeaderContainer(wrapper) {\n        wrapper = wrapper || this.getWrapper();\n        let spanElem = this.createElement('span', { className: 'e-' + this.getModuleName() + '-header' });\n        let tempTitle = (this.enableHtmlSanitizer) ? SanitizeHtmlHelper.sanitize(this.title) : this.title;\n        let spanTitle = this.createElement('span', {\n            className: 'e-' + this.getModuleName() + '-title', innerHTML: tempTitle\n        });\n        let spanIcon = this.createElement('span', {\n            className: 'e-icons e-' + this.getModuleName() + '-icon', attrs: { 'tabindex': '0' }\n        });\n        spanElem.appendChild(spanTitle);\n        spanElem.appendChild(spanIcon);\n        wrapper.insertBefore(spanElem, this.element);\n    }\n    openHamburgerMenu(e) {\n        if (this.hamburgerMode) {\n            this.triggerBeforeOpen(null, this.element, null, e, 0, 0, 'hamburger');\n        }\n    }\n    closeHamburgerMenu(e) {\n        if (this.hamburgerMode) {\n            let beforeCloseArgs;\n            beforeCloseArgs = { element: this.element, parentItem: null, event: e, items: this.items, cancel: false };\n            this.trigger('beforeClose', beforeCloseArgs, (observedHamburgerCloseArgs) => {\n                if (!observedHamburgerCloseArgs.cancel) {\n                    this.closeMenu(null, e);\n                    this.element.classList.add('e-hide-menu');\n                    this.trigger('onClose', { element: this.element, parentItem: null, items: this.items });\n                }\n            });\n        }\n    }\n    callFit(element, x, y, top, left) {\n        return fit(element, null, { X: x, Y: y }, { top: top, left: left });\n    }\n    triggerBeforeOpen(li, ul, item, e, top, left, type) {\n        let navIdx = this.getIndex(li ? li.id : null, true);\n        let items = li ? item[this.getField('children', this.navIdx.length - 1)] : this.items;\n        let eventArgs = {\n            element: ul, items: items, parentItem: this.isMenu && isBlazor() ? this.getMenuItemModel(item, this.navIdx.length - 1) :\n                item, event: e, cancel: false, top: top, left: left\n        };\n        let menuType = type;\n        let collide;\n        this.trigger('beforeOpen', eventArgs, (observedOpenArgs) => {\n            switch (menuType) {\n                case 'menu':\n                    if (!this.hamburgerMode) {\n                        this.top = observedOpenArgs.top;\n                        this.left = observedOpenArgs.left;\n                    }\n                    this.popupWrapper.style.display = 'block';\n                    if (!this.hamburgerMode) {\n                        this.popupWrapper.style.maxHeight = this.popupWrapper.getBoundingClientRect().height + 'px';\n                        if (this.enableScrolling) {\n                            addScrolling(this.createElement, this.popupWrapper, this.uList, 'vscroll', this.enableRtl);\n                        }\n                        this.checkScrollOffset(e);\n                    }\n                    if (!this.hamburgerMode && !this.left && !this.top) {\n                        this.popupObj.refreshPosition(this.lItem, true);\n                        this.left = parseInt(this.popupWrapper.style.left, 10);\n                        this.top = parseInt(this.popupWrapper.style.top, 10);\n                        if (this.enableRtl) {\n                            this.left =\n                                this.isNestedOrVertical ? this.left - this.popupWrapper.offsetWidth - this.lItem.parentElement.offsetWidth + 2\n                                    : this.left - this.popupWrapper.offsetWidth + this.lItem.offsetWidth;\n                        }\n                        collide = isCollide(this.popupWrapper, null, this.left, this.top);\n                        if ((this.isNestedOrVertical || this.enableRtl) && (collide.indexOf('right') > -1\n                            || collide.indexOf('left') > -1)) {\n                            this.popupObj.collision.X = 'none';\n                            let offWidth = closest(this.lItem, '.e-' + this.getModuleName() + '-wrapper').offsetWidth;\n                            this.left =\n                                this.enableRtl ? calculatePosition(this.lItem, this.isNestedOrVertical ? 'right' : 'left', 'top').left\n                                    : this.left - this.popupWrapper.offsetWidth - offWidth + 2;\n                        }\n                        collide = isCollide(this.popupWrapper, null, this.left, this.top);\n                        if (collide.indexOf('left') > -1 || collide.indexOf('right') > -1) {\n                            this.left = this.callFit(this.popupWrapper, true, false, this.top, this.left).left;\n                        }\n                        this.popupWrapper.style.left = this.left + 'px';\n                    }\n                    else {\n                        this.popupObj.collision = { X: 'none', Y: 'none' };\n                    }\n                    this.popupWrapper.style.display = '';\n                    break;\n                case 'none':\n                    this.top = observedOpenArgs.top;\n                    this.left = observedOpenArgs.left;\n                    break;\n                case 'hamburger':\n                    if (!observedOpenArgs.cancel) {\n                        this.element.classList.remove('e-hide-menu');\n                        this.triggerOpen(this.element);\n                    }\n                    break;\n            }\n            if (menuType !== 'hamburger') {\n                if (observedOpenArgs.cancel) {\n                    if (this.isMenu) {\n                        this.popupObj.destroy();\n                        detach(this.popupWrapper);\n                    }\n                    else if (ul.className.indexOf('e-ul') > -1) {\n                        detach(ul);\n                    }\n                    this.navIdx.pop();\n                }\n                else {\n                    if (this.isMenu) {\n                        if (this.hamburgerMode) {\n                            this.popupWrapper.style.top = this.top + 'px';\n                            this.popupWrapper.style.left = 0 + 'px';\n                            this.toggleAnimation(this.popupWrapper);\n                        }\n                        else {\n                            this.setBlankIconStyle(this.popupWrapper);\n                            this.wireKeyboardEvent(this.popupWrapper);\n                            rippleEffect(this.popupWrapper, { selector: '.' + ITEM });\n                            this.popupWrapper.style.left = this.left + 'px';\n                            this.popupWrapper.style.top = this.top + 'px';\n                            let animationOptions = this.animationSettings.effect !== 'None' ? {\n                                name: this.animationSettings.effect, duration: this.animationSettings.duration,\n                                timingFunction: this.animationSettings.easing\n                            } : null;\n                            this.popupObj.show(animationOptions, this.lItem);\n                        }\n                    }\n                    else {\n                        this.setBlankIconStyle(this.uList);\n                        this.setPosition(this.lItem, this.uList, this.top, this.left);\n                        this.toggleAnimation(this.uList);\n                    }\n                }\n            }\n            if (this.keyType === 'right') {\n                let cul = this.getUlByNavIdx();\n                li.classList.remove(FOCUSED);\n                let index;\n                if (this.isMenu && this.navIdx.length === 1) {\n                    this.removeLIStateByClass([SELECTED], [this.getWrapper()]);\n                }\n                li.classList.add(SELECTED);\n                if (this.action === ENTER) {\n                    let eventArgs = { element: li, item: item, event: e };\n                    this.trigger('select', eventArgs);\n                }\n                li.focus();\n                cul = this.getUlByNavIdx();\n                index = this.isValidLI(cul.children[0], 0, this.action);\n                cul.children[index].classList.add(FOCUSED);\n                cul.children[index].focus();\n            }\n        });\n    }\n    setBlankIconStyle(menu) {\n        let blankIconList = [].slice.call(menu.getElementsByClassName('e-blankicon'));\n        if (!blankIconList.length) {\n            return;\n        }\n        let iconLi = menu.querySelector('.e-menu-item:not(.e-blankicon):not(.e-separator)');\n        let icon = iconLi.querySelector('.e-menu-icon');\n        if (!icon) {\n            return;\n        }\n        let cssProp = this.enableRtl ? { padding: 'paddingRight', margin: 'marginLeft' } :\n            { padding: 'paddingLeft', margin: 'marginRight' };\n        let iconCssProps = getComputedStyle(icon);\n        let iconSize = parseInt(iconCssProps.fontSize, 10);\n        if (!!parseInt(iconCssProps.width, 10) && parseInt(iconCssProps.width, 10) > iconSize) {\n            iconSize = parseInt(iconCssProps.width, 10);\n        }\n        // tslint:disable\n        let size = `${iconSize + parseInt(iconCssProps[cssProp.margin], 10) + parseInt(getComputedStyle(iconLi)[cssProp.padding], 10)}px`;\n        blankIconList.forEach((li) => {\n            li.style[cssProp.padding] = size;\n        });\n        // tslint:enable\n    }\n    checkScrollOffset(e) {\n        let wrapper = this.getWrapper();\n        if (wrapper.children[0].classList.contains('e-menu-hscroll') && this.navIdx.length === 1) {\n            let trgt = isNullOrUndefined(e) ? this.element : closest(e.target, '.' + ITEM);\n            let offsetEle = select('.e-hscroll-bar', wrapper);\n            let offsetLeft;\n            let offsetRight;\n            if (offsetEle.scrollLeft > trgt.offsetLeft) {\n                offsetEle.scrollLeft -= (offsetEle.scrollLeft - trgt.offsetLeft);\n            }\n            offsetLeft = offsetEle.scrollLeft + offsetEle.offsetWidth;\n            offsetRight = trgt.offsetLeft + trgt.offsetWidth;\n            if (offsetLeft < offsetRight) {\n                offsetEle.scrollLeft += (offsetRight - offsetLeft);\n            }\n        }\n    }\n    setPosition(li, ul, top, left) {\n        let px = 'px';\n        this.toggleVisiblity(ul);\n        if (ul === this.element || (left > -1 && top > -1)) {\n            let collide = isCollide(ul, null, left, top);\n            if (collide.indexOf('right') > -1) {\n                left = left - ul.offsetWidth;\n            }\n            if (collide.indexOf('bottom') > -1) {\n                let offset = this.callFit(ul, false, true, top, left);\n                top = offset.top - 20;\n            }\n            collide = isCollide(ul, null, left, top);\n            if (collide.indexOf('left') > -1) {\n                let offset = this.callFit(ul, true, false, top, left);\n                left = offset.left;\n            }\n        }\n        else {\n            if (Browser.isDevice) {\n                top = Number(this.element.style.top.replace(px, ''));\n                left = Number(this.element.style.left.replace(px, ''));\n            }\n            else {\n                let x = this.enableRtl ? 'left' : 'right';\n                let offset = calculatePosition(li, x, 'top');\n                top = offset.top;\n                left = offset.left;\n                let collide = isCollide(ul, null, this.enableRtl ? left - ul.offsetWidth : left, top);\n                let xCollision = collide.indexOf('left') > -1 || collide.indexOf('right') > -1;\n                if (xCollision) {\n                    offset = calculatePosition(li, this.enableRtl ? 'right' : 'left', 'top');\n                    left = offset.left;\n                }\n                if (this.enableRtl || xCollision) {\n                    left = (this.enableRtl && xCollision) ? left : left - ul.offsetWidth;\n                }\n                if (collide.indexOf('bottom') > -1) {\n                    offset = this.callFit(ul, false, true, top, left);\n                    top = offset.top;\n                }\n            }\n        }\n        this.toggleVisiblity(ul, false);\n        ul.style.top = top + px;\n        ul.style.left = left + px;\n    }\n    toggleVisiblity(ul, isVisible$$1 = true) {\n        ul.style.visibility = isVisible$$1 ? 'hidden' : '';\n        ul.style.display = isVisible$$1 ? 'block' : 'none';\n    }\n    createItems(items) {\n        let level = this.navIdx ? this.navIdx.length : 0;\n        let fields = this.getFields(level);\n        // tslint:disable-next-line:no-any\n        if (isBlazor() && this.template && items.length && items[0].properties) {\n            let itemsObj = [];\n            items.forEach((item, index) => {\n                itemsObj.push({});\n                itemsObj[index][fields.text] = item[fields.text];\n                if (!item[fields.id]) {\n                    item[fields.id] = getUniqueID('menuitem');\n                }\n                itemsObj[index][fields.id] = item[fields.id];\n                itemsObj[index][fields.iconCss] = item[fields.iconCss];\n                itemsObj[index][fields.url] = item[fields.url];\n                itemsObj[index][fields.child] = item[fields.child];\n                itemsObj[index][fields.separator] = item[fields.separator];\n            });\n            items = itemsObj;\n        }\n        let showIcon = this.hasField(items, this.getField('iconCss', level));\n        let listBaseOptions = {\n            showIcon: showIcon,\n            moduleName: 'menu',\n            fields: fields,\n            template: this.template,\n            itemNavigable: true,\n            itemCreating: (args) => {\n                if (!args.curData[args.fields[fields.id]]) {\n                    args.curData[args.fields[fields.id]] = getUniqueID('menuitem');\n                }\n                args.curData.htmlAttributes = {\n                    role: 'menuitem',\n                    tabindex: '-1'\n                };\n                if (this.isMenu && !args.curData[this.getField('separator', level)]) {\n                    args.curData.htmlAttributes['aria-label'] = args.curData[args.fields.text];\n                }\n                if (args.curData[args.fields[fields.iconCss]] === '') {\n                    args.curData[args.fields[fields.iconCss]] = null;\n                }\n            },\n            itemCreated: (args) => {\n                if (args.curData[this.getField('separator', level)]) {\n                    args.item.classList.add(SEPARATOR);\n                    args.item.removeAttribute('role');\n                }\n                if (showIcon && !args.curData[args.fields.iconCss]\n                    && !args.curData[this.getField('separator', level)]) {\n                    args.item.classList.add('e-blankicon');\n                }\n                if (args.curData[args.fields.child]\n                    && args.curData[args.fields.child].length) {\n                    let span = this.createElement('span', { className: ICONS + ' ' + CARET });\n                    args.item.appendChild(span);\n                    args.item.setAttribute('aria-haspopup', 'true');\n                    args.item.setAttribute('aria-expanded', 'false');\n                    if (!this.isMenu) {\n                        args.item.removeAttribute('role');\n                    }\n                    args.item.classList.add('e-menu-caret-icon');\n                }\n                if (this.isMenu && this.template) {\n                    args.item.setAttribute('id', args.curData[args.fields.id].toString());\n                    args.item.removeAttribute('data-uid');\n                    if (args.item.classList.contains('e-level-1')) {\n                        args.item.classList.remove('e-level-1');\n                    }\n                    if (args.item.classList.contains('e-has-child')) {\n                        args.item.classList.remove('e-has-child');\n                    }\n                }\n                let eventArgs = { item: args.curData, element: args.item };\n                this.trigger('beforeItemRender', eventArgs);\n            }\n        };\n        this.setProperties({ 'items': this.items }, true);\n        if (this.isMenu) {\n            listBaseOptions.templateID = this.element.id + TEMPLATE_PROPERTY;\n        }\n        let ul = ListBase.createList(this.createElement, items, listBaseOptions, !this.template, this);\n        ul.setAttribute('tabindex', '0');\n        if (this.isMenu) {\n            ul.setAttribute('role', 'menu');\n        }\n        return ul;\n    }\n    moverHandler(e) {\n        let trgt = e.target;\n        this.liTrgt = trgt;\n        let cli = this.getLI(trgt);\n        let wrapper = cli ? closest(cli, '.e-' + this.getModuleName() + '-wrapper') : this.getWrapper();\n        let hdrWrapper = this.getWrapper();\n        let regex = new RegExp('-ej2menu-(.*)-popup');\n        let ulId;\n        let isDifferentElem = false;\n        if (!wrapper) {\n            return;\n        }\n        if (wrapper.id !== '') {\n            ulId = regex.exec(wrapper.id)[1];\n        }\n        else {\n            ulId = wrapper.querySelector('ul').id;\n        }\n        if (ulId !== this.element.id) {\n            this.removeLIStateByClass([FOCUSED, SELECTED], [this.getWrapper()]);\n            if (this.navIdx.length) {\n                isDifferentElem = true;\n            }\n            else {\n                return;\n            }\n        }\n        if (cli && closest(cli, '.e-' + this.getModuleName() + '-wrapper') && !isDifferentElem) {\n            this.removeLIStateByClass([FOCUSED], this.isMenu ? [wrapper].concat(this.getPopups()) : [wrapper]);\n            this.removeLIStateByClass([FOCUSED], this.isMenu ? [hdrWrapper].concat(this.getPopups()) : [hdrWrapper]);\n            cli.classList.add(FOCUSED);\n            if (!this.showItemOnClick) {\n                this.clickHandler(e);\n            }\n        }\n        else if (this.isMenu && this.showItemOnClick && !isDifferentElem) {\n            this.removeLIStateByClass([FOCUSED], [wrapper].concat(this.getPopups()));\n        }\n        if (this.isMenu) {\n            if (!this.showItemOnClick && (trgt.parentElement !== wrapper && !closest(trgt, '.e-' + this.getModuleName() + '-popup'))\n                && (!cli || (cli && !this.getIndex(cli.id, true).length))) {\n                this.removeLIStateByClass([FOCUSED], [wrapper]);\n                if (this.navIdx.length) {\n                    this.isClosed = true;\n                    this.closeMenu(null, e);\n                }\n            }\n            else if (isDifferentElem && !this.showItemOnClick) {\n                if (this.navIdx.length) {\n                    this.isClosed = true;\n                    this.closeMenu(null, e);\n                }\n            }\n            if (!this.isClosed) {\n                this.removeStateWrapper();\n            }\n            this.isClosed = false;\n        }\n    }\n    removeStateWrapper() {\n        if (this.liTrgt) {\n            let wrapper = closest(this.liTrgt, '.e-menu-vscroll');\n            if (this.liTrgt.tagName === 'DIV' && wrapper) {\n                this.removeLIStateByClass([FOCUSED, SELECTED], [wrapper]);\n            }\n        }\n    }\n    removeLIStateByClass(classList$$1, element) {\n        let li;\n        for (let i = 0; i < element.length; i++) {\n            classList$$1.forEach((className) => {\n                li = select('.' + className, element[i]);\n                if (li) {\n                    li.classList.remove(className);\n                }\n            });\n        }\n    }\n    getField(propName, level = 0) {\n        let fieldName = this.fields[propName];\n        return typeof fieldName === 'string' ? fieldName :\n            (!fieldName[level] ? fieldName[fieldName.length - 1].toString()\n                : fieldName[level].toString());\n    }\n    getFields(level = 0) {\n        return {\n            id: this.getField('itemId', level),\n            iconCss: this.getField('iconCss', level),\n            text: this.getField('text', level),\n            url: this.getField('url', level),\n            child: this.getField('children', level),\n            separator: this.getField('separator', level)\n        };\n    }\n    hasField(items, field) {\n        for (let i = 0, len = items.length; i < len; i++) {\n            if (items[i][field]) {\n                return true;\n            }\n        }\n        return false;\n    }\n    menuHeaderClickHandler(e) {\n        if (closest(e.target, '.e-menu-wrapper').querySelector('ul.e-menu-parent').id !== this.element.id) {\n            return;\n        }\n        this.element.classList.contains('e-hide-menu') ? this.openHamburgerMenu(e) : this.closeHamburgerMenu(e);\n    }\n    clickHandler(e) {\n        if (this.isTapHold) {\n            this.isTapHold = false;\n        }\n        else {\n            let wrapper = this.getWrapper();\n            let trgt = e.target;\n            let cli = this.cli = this.getLI(trgt);\n            let regex = new RegExp('-ej2menu-(.*)-popup');\n            let cliWrapper = cli ? closest(cli, '.e-' + this.getModuleName() + '-wrapper') : null;\n            let isInstLI = cli && cliWrapper && (this.isMenu ? this.getIndex(cli.id, true).length > 0\n                : wrapper.firstElementChild.id === cliWrapper.firstElementChild.id);\n            if (Browser.isDevice && this.isMenu) {\n                this.removeLIStateByClass([FOCUSED], [wrapper].concat(this.getPopups()));\n                this.mouseDownHandler(e);\n            }\n            if (cli && cliWrapper && this.isMenu) {\n                let cliWrapperId = cliWrapper.id ? regex.exec(cliWrapper.id)[1] : cliWrapper.querySelector('.e-menu-parent').id;\n                if (this.element.id !== cliWrapperId) {\n                    return;\n                }\n            }\n            if (isInstLI && e.type === 'click' && !cli.classList.contains(HEADER)) {\n                this.setLISelected(cli);\n                let navIdx = this.getIndex(cli.id, true);\n                let item = this.getItem(navIdx);\n                let eventArgs = { element: cli, item: item, event: e };\n                this.trigger('select', eventArgs);\n            }\n            if (isInstLI && (e.type === 'mouseover' || Browser.isDevice || this.showItemOnClick)) {\n                let ul;\n                if (cli.classList.contains(HEADER)) {\n                    ul = wrapper.children[this.navIdx.length - 1];\n                    this.toggleAnimation(ul);\n                    let sli = this.getLIByClass(ul, SELECTED);\n                    if (sli) {\n                        sli.classList.remove(SELECTED);\n                    }\n                    detach(cli.parentNode);\n                    this.navIdx.pop();\n                }\n                else {\n                    if (!cli.classList.contains(SEPARATOR)) {\n                        this.showSubMenu = true;\n                        let cul = cli.parentNode;\n                        this.cliIdx = this.getIdx(cul, cli);\n                        if (this.isMenu || !Browser.isDevice) {\n                            let culIdx = this.isMenu ? Array.prototype.indexOf.call([wrapper].concat(this.getPopups()), closest(cul, '.' + 'e-' + this.getModuleName() + '-wrapper'))\n                                : this.getIdx(wrapper, cul);\n                            if (this.navIdx[culIdx] === this.cliIdx) {\n                                this.showSubMenu = false;\n                            }\n                            if (culIdx !== this.navIdx.length && (e.type !== 'mouseover' || this.showSubMenu)) {\n                                let sli = this.getLIByClass(cul, SELECTED);\n                                if (sli) {\n                                    sli.classList.remove(SELECTED);\n                                }\n                                this.isClosed = true;\n                                this.keyType = 'click';\n                                if (this.showItemOnClick) {\n                                    this.setLISelected(cli);\n                                }\n                                this.closeMenu(culIdx + 1, e);\n                                if (this.showItemOnClick) {\n                                    this.setLISelected(cli);\n                                }\n                            }\n                        }\n                        if (!this.isClosed) {\n                            this.afterCloseMenu(e);\n                        }\n                        this.isClosed = false;\n                    }\n                }\n            }\n            else {\n                if (this.isMenu && trgt.tagName === 'DIV' && this.navIdx.length && closest(trgt, '.e-menu-vscroll')) {\n                    let popupEle = closest(trgt, '.' + POPUP);\n                    let cIdx = Array.prototype.indexOf.call(this.getPopups(), popupEle) + 1;\n                    if (cIdx < this.navIdx.length) {\n                        this.closeMenu(cIdx + 1, e);\n                        if (popupEle) {\n                            this.removeLIStateByClass([FOCUSED, SELECTED], [popupEle]);\n                        }\n                    }\n                }\n                else if (this.isMenu && this.hamburgerMode && trgt.tagName === 'SPAN'\n                    && trgt.classList.contains('e-menu-icon')) {\n                    this.menuHeaderClickHandler(e);\n                }\n                else {\n                    if (trgt.tagName !== 'UL' || (this.isMenu ? trgt.parentElement.classList.contains('e-menu-wrapper') &&\n                        !this.getIndex(trgt.querySelector('.' + ITEM).id, true).length : trgt.parentElement !== wrapper)) {\n                        if (!cli) {\n                            this.removeLIStateByClass([SELECTED], [wrapper]);\n                        }\n                        if (!cli || !cli.querySelector('.' + CARET)) {\n                            this.closeMenu(null, e);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    afterCloseMenu(e) {\n        let isHeader;\n        if (this.showSubMenu) {\n            if (this.showItemOnClick && this.navIdx.length === 0) {\n                isHeader = closest(e.target, '.e-menu-parent.e-control');\n            }\n            else {\n                isHeader = closest(this.element, '.e-menu-parent.e-control');\n            }\n            let idx = this.navIdx.concat(this.cliIdx);\n            let item = this.getItem(idx);\n            if (item && item[this.getField('children', idx.length - 1)] &&\n                item[this.getField('children', idx.length - 1)].length) {\n                if (e.type === 'mouseover' || (Browser.isDevice && this.isMenu)) {\n                    this.setLISelected(this.cli);\n                }\n                if ((!this.hamburgerMode && isHeader) || (this.hamburgerMode && this.cli.getAttribute('aria-expanded') === 'false')) {\n                    this.cli.setAttribute('aria-expanded', 'true');\n                    this.navIdx.push(this.cliIdx);\n                    this.openMenu(this.cli, item, null, null, e);\n                }\n            }\n            else {\n                if (e.type !== 'mouseover') {\n                    this.closeMenu(null, e);\n                }\n            }\n            if (!isHeader) {\n                let cul = this.getUlByNavIdx();\n                let sli = this.getLIByClass(cul, SELECTED);\n                if (sli) {\n                    sli.setAttribute('aria-expanded', 'false');\n                    sli.classList.remove(SELECTED);\n                }\n            }\n        }\n        this.keyType = '';\n    }\n    setLISelected(li) {\n        let sli = this.getLIByClass(li.parentElement, SELECTED);\n        if (sli) {\n            sli.classList.remove(SELECTED);\n        }\n        if (!this.isMenu) {\n            li.classList.remove(FOCUSED);\n        }\n        li.classList.add(SELECTED);\n    }\n    getLIByClass(ul, classname) {\n        for (let i = 0, len = ul.children.length; i < len; i++) {\n            if (ul.children[i].classList.contains(classname)) {\n                return ul.children[i];\n            }\n        }\n        return null;\n    }\n    /**\n     * This method is used to get the index of the menu item in the Menu based on the argument.\n     * @param item - item be passed to get the index | id to be passed to get the item index.\n     * @param isUniqueId - Set `true` if it is a unique id.\n     * @returns void\n     */\n    getItemIndex(item, isUniqueId) {\n        let idx;\n        if (typeof item === 'string') {\n            idx = item;\n        }\n        else {\n            idx = item.id;\n        }\n        let isText = (isUniqueId === false) ? false : true;\n        let navIdx = this.getIndex(idx, isText);\n        return navIdx;\n    }\n    /**\n     * This method is used to set the menu item in the Menu based on the argument.\n     * @param item - item need to be updated.\n     * @param id - id to be passed to update the item.\n     * @param isUniqueId - Set `true` if it is a unique id.\n     * @returns void\n     */\n    setItem(item, id, isUniqueId) {\n        let idx = id ? id : item.id;\n        let isText = (isUniqueId === false) ? false : true;\n        let navIdx = this.getIndex(idx, isText);\n        let newItem = this.getItem(navIdx);\n        newItem.iconCss = item.iconCss;\n        newItem.id = item.id;\n        newItem.text = item.text;\n        newItem.url = item.url;\n        newItem.separator = item.separator;\n        newItem.items = item.items;\n    }\n    getItem(navIdx) {\n        navIdx = navIdx.slice();\n        let idx = navIdx.pop();\n        let items = this.getItems(navIdx);\n        return items[idx];\n    }\n    getItems(navIdx) {\n        let items = this.items;\n        for (let i = 0; i < navIdx.length; i++) {\n            items = items[navIdx[i]][this.getField('children', i)];\n        }\n        return items;\n    }\n    setItems(newItems, navIdx) {\n        let items = this.getItems(navIdx);\n        items.splice(0, items.length);\n        for (let i = 0; i < newItems.length; i++) {\n            items.splice(i, 0, newItems[i]);\n        }\n    }\n    getIdx(ul, li, skipHdr = true) {\n        let idx = Array.prototype.indexOf.call(ul.querySelectorAll('li'), li);\n        if (this.isMenu && this.template && isBlazor()) {\n            idx = Array.prototype.indexOf.call(ul.querySelectorAll(li.tagName), li);\n        }\n        else {\n            idx = Array.prototype.indexOf.call(ul.children, li);\n        }\n        if (skipHdr && ul.children[0].classList.contains(HEADER)) {\n            idx--;\n        }\n        return idx;\n    }\n    getLI(elem) {\n        if (elem.tagName === 'LI' && elem.classList.contains('e-menu-item')) {\n            return elem;\n        }\n        return closest(elem, 'li.e-menu-item');\n    }\n    updateItemsByNavIdx() {\n        let items = this.items;\n        let count = 0;\n        for (let index = 0; index < this.navIdx.length; index++) {\n            items = items[index].items;\n            if (!items) {\n                break;\n            }\n            count++;\n            let ul = this.getUlByNavIdx(count);\n            if (!ul) {\n                break;\n            }\n            this.updateItem(ul, items);\n        }\n    }\n    removeChildElement(elem) {\n        while (elem.firstElementChild) {\n            elem.removeChild(elem.firstElementChild);\n        }\n        return elem;\n    }\n    /**\n     * Called internally if any of the property value changed\n     * @private\n     * @param {MenuBaseModel} newProp\n     * @param {MenuBaseModel} oldProp\n     * @returns void\n     */\n    onPropertyChanged(newProp, oldProp) {\n        let wrapper = this.getWrapper();\n        for (let prop of Object.keys(newProp)) {\n            switch (prop) {\n                case 'cssClass':\n                    if (oldProp.cssClass) {\n                        removeClass([wrapper], oldProp.cssClass.split(' '));\n                    }\n                    if (newProp.cssClass) {\n                        addClass([wrapper], newProp.cssClass.split(' '));\n                    }\n                    break;\n                case 'enableRtl':\n                    wrapper.classList.toggle(RTL);\n                    break;\n                case 'showItemOnClick':\n                    this.unWireEvents();\n                    this.showItemOnClick = newProp.showItemOnClick;\n                    this.wireEvents();\n                    break;\n                case 'enableScrolling':\n                    if (newProp.enableScrolling) {\n                        let ul;\n                        this.element.classList.contains('e-vertical') ?\n                            addScrolling(this.createElement, wrapper, this.element, 'vscroll', this.enableRtl)\n                            : addScrolling(this.createElement, wrapper, this.element, 'hscroll', this.enableRtl);\n                        this.getPopups().forEach((wrapper) => {\n                            ul = select('.e-ul', wrapper);\n                            addScrolling(this.createElement, wrapper, ul, 'vscroll', this.enableRtl);\n                        });\n                    }\n                    else {\n                        let ul = wrapper.children[0];\n                        this.element.classList.contains('e-vertical') ? destroyScroll(getInstance(ul, VScroll), ul)\n                            : destroyScroll(getInstance(ul, HScroll), ul);\n                        wrapper.style.overflow = '';\n                        wrapper.appendChild(this.element);\n                        this.getPopups().forEach((wrapper) => {\n                            ul = wrapper.children[0];\n                            destroyScroll(getInstance(ul, VScroll), ul);\n                            wrapper.style.overflow = '';\n                        });\n                    }\n                    break;\n                case 'items':\n                    let idx;\n                    let navIdx;\n                    let item;\n                    if (!Object.keys(oldProp.items).length) {\n                        this.updateItem(this.element, this.items);\n                        for (let i = 1, count = wrapper.childElementCount; i < count; i++) {\n                            detach(wrapper.lastElementChild);\n                        }\n                        if (this.isMenu && isBlazor()) {\n                            this.updateItemsByNavIdx();\n                        }\n                        else {\n                            this.navIdx = [];\n                        }\n                    }\n                    else {\n                        let keys = Object.keys(newProp.items);\n                        for (let i = 0; i < keys.length; i++) {\n                            navIdx = this.getChangedItemIndex(newProp, [], Number(keys[i]));\n                            if (navIdx.length <= this.getWrapper().children.length) {\n                                idx = navIdx.pop();\n                                item = this.getItems(navIdx);\n                                this.insertAfter([item[idx]], item[idx].text);\n                                this.removeItem(item, navIdx, idx);\n                                this.setItems(item, navIdx);\n                            }\n                            navIdx.length = 0;\n                        }\n                    }\n                    break;\n            }\n        }\n    }\n    updateItem(ul, items) {\n        if (isBlazor()) {\n            ul = this.removeChildElement(ul);\n        }\n        else {\n            ul.innerHTML = '';\n        }\n        let lis = [].slice.call(this.createItems(items).children);\n        lis.forEach((li) => {\n            ul.appendChild(li);\n        });\n    }\n    getChangedItemIndex(newProp, index, idx) {\n        index.push(idx);\n        let key = Object.keys(newProp.items[idx]).pop();\n        if (key === 'items') {\n            let item = newProp.items[idx];\n            let popStr = Object.keys(item.items).pop();\n            if (popStr) {\n                this.getChangedItemIndex(item, index, Number(popStr));\n            }\n        }\n        else {\n            if (key === 'isParentArray' && index.length > 1) {\n                index.pop();\n            }\n        }\n        return index;\n    }\n    removeItem(item, navIdx, idx) {\n        item.splice(idx, 1);\n        let uls = this.getWrapper().children;\n        if (navIdx.length < uls.length) {\n            detach(uls[navIdx.length].children[idx]);\n        }\n    }\n    /**\n     * Used to unwire the bind events.\n     * @private\n     */\n    unWireEvents(targetSelctor = this.target) {\n        let wrapper = this.getWrapper();\n        if (targetSelctor) {\n            let target;\n            let touchModule;\n            let targetElems = selectAll(targetSelctor);\n            for (let i = 0, len = targetElems.length; i < len; i++) {\n                target = targetElems[i];\n                if (this.isMenu) {\n                    EventHandler.remove(target, 'click', this.menuHeaderClickHandler);\n                }\n                else {\n                    if (Browser.isIos) {\n                        touchModule = getInstance(target, Touch);\n                        if (touchModule) {\n                            touchModule.destroy();\n                        }\n                    }\n                    else {\n                        EventHandler.remove(target, 'contextmenu', this.cmenuHandler);\n                    }\n                }\n            }\n            if (!this.isMenu) {\n                EventHandler.remove(this.targetElement, 'scroll', this.scrollHandler);\n                for (let parent of getScrollableParent(this.targetElement)) {\n                    EventHandler.remove(parent, 'scroll', this.scrollHandler);\n                }\n            }\n        }\n        if (!Browser.isDevice) {\n            EventHandler.remove(this.isMenu ? document : wrapper, 'mouseover', this.delegateMoverHandler);\n            EventHandler.remove(document, 'mousedown', this.delegateMouseDownHandler);\n        }\n        EventHandler.remove(document, 'click', this.delegateClickHandler);\n        this.unWireKeyboardEvent(wrapper);\n        this.rippleFn();\n    }\n    unWireKeyboardEvent(element) {\n        let keyboardModule = getInstance(element, KeyboardEvents);\n        if (keyboardModule) {\n            keyboardModule.destroy();\n        }\n    }\n    toggleAnimation(ul, isMenuOpen = true) {\n        let pUlHeight;\n        let pElement;\n        if (this.animationSettings.effect === 'None' || !isMenuOpen) {\n            this.end(ul, isMenuOpen);\n        }\n        else {\n            this.animation.animate(ul, {\n                name: this.animationSettings.effect,\n                duration: this.animationSettings.duration,\n                timingFunction: this.animationSettings.easing,\n                begin: (options) => {\n                    if (this.hamburgerMode) {\n                        pElement = options.element.parentElement;\n                        options.element.style.position = 'absolute';\n                        pUlHeight = pElement.offsetHeight;\n                        options.element.style.maxHeight = options.element.offsetHeight + 'px';\n                        pElement.style.maxHeight = '';\n                    }\n                    else {\n                        options.element.style.display = 'block';\n                        options.element.style.maxHeight = options.element.getBoundingClientRect().height + 'px';\n                    }\n                },\n                progress: (options) => {\n                    if (this.hamburgerMode) {\n                        pElement.style.minHeight = (pUlHeight + options.element.offsetHeight) + 'px';\n                    }\n                },\n                end: (options) => {\n                    if (this.hamburgerMode) {\n                        options.element.style.position = '';\n                        options.element.style.maxHeight = '';\n                        pElement.style.minHeight = '';\n                        options.element.style.top = 0 + 'px';\n                        options.element.children[0].focus();\n                        this.triggerOpen(options.element.children[0]);\n                    }\n                    else {\n                        this.end(options.element, isMenuOpen);\n                    }\n                }\n            });\n        }\n    }\n    triggerOpen(ul) {\n        let item = this.navIdx.length ? this.getItem(this.navIdx) : null;\n        let eventArgs = {\n            element: ul, parentItem: item, items: item ? item.items : this.items\n        };\n        this.trigger('onOpen', eventArgs);\n    }\n    end(ul, isMenuOpen) {\n        if (isMenuOpen) {\n            ul.style.display = 'block';\n            ul.style.maxHeight = '';\n            this.triggerOpen(ul);\n            if (ul.querySelector('.' + FOCUSED)) {\n                ul.querySelector('.' + FOCUSED).focus();\n            }\n            else {\n                let ele;\n                ele = this.getWrapper().children[this.getIdx(this.getWrapper(), ul) - 1];\n                if (ele) {\n                    ele.querySelector('.' + SELECTED).focus();\n                }\n                else {\n                    this.element.focus();\n                }\n            }\n        }\n        else {\n            if (ul === this.element) {\n                let fli = this.getLIByClass(this.element, FOCUSED);\n                if (fli) {\n                    fli.classList.remove(FOCUSED);\n                }\n                let sli = this.getLIByClass(this.element, SELECTED);\n                if (sli) {\n                    sli.classList.remove(SELECTED);\n                }\n                ul.style.display = 'none';\n            }\n            else {\n                detach(ul);\n            }\n        }\n    }\n    /**\n     * Get the properties to be maintained in the persisted state.\n     * @returns string\n     */\n    getPersistData() {\n        return '';\n    }\n    /**\n     * Get wrapper element.\n     * @returns Element\n     * @private\n     */\n    getWrapper() {\n        return closest(this.element, '.e-' + this.getModuleName() + '-wrapper');\n    }\n    getIndex(data, isUniqueId, items = this.items, nIndex = [], isCallBack = false, level = 0) {\n        let item;\n        level = isCallBack ? level + 1 : 0;\n        for (let i = 0, len = items.length; i < len; i++) {\n            item = items[i];\n            if ((isUniqueId ? item[this.getField('itemId', level)] : item[this.getField('text', level)]) === data) {\n                nIndex.push(i);\n                break;\n            }\n            else if (item[this.getField('children', level)]\n                && item[this.getField('children', level)].length) {\n                nIndex = this.getIndex(data, isUniqueId, item[this.getField('children', level)], nIndex, true, level);\n                if (nIndex[nIndex.length - 1] === -1) {\n                    if (i !== len - 1) {\n                        nIndex.pop();\n                    }\n                }\n                else {\n                    nIndex.unshift(i);\n                    break;\n                }\n            }\n            else {\n                if (i === len - 1) {\n                    nIndex.push(-1);\n                }\n            }\n        }\n        return (!isCallBack && nIndex[0] === -1) ? [] : nIndex;\n    }\n    /**\n     * This method is used to enable or disable the menu items in the Menu based on the items and enable argument.\n     * @param items Text items that needs to be enabled/disabled.\n     * @param enable Set `true`/`false` to enable/disable the list items.\n     * @param isUniqueId - Set `true` if it is a unique id.\n     * @returns void\n     */\n    enableItems(items, enable = true, isUniqueId) {\n        let ul;\n        let idx;\n        let navIdx;\n        let disabled = DISABLED;\n        let skipItem;\n        for (let i = 0; i < items.length; i++) {\n            navIdx = this.getIndex(items[i], isUniqueId);\n            if (this.navIdx.length) {\n                if (navIdx.length !== 1) {\n                    skipItem = false;\n                    for (let i = 0, len = navIdx.length - 1; i < len; i++) {\n                        if (navIdx[i] !== this.navIdx[i]) {\n                            skipItem = true;\n                            break;\n                        }\n                    }\n                    if (skipItem) {\n                        continue;\n                    }\n                }\n            }\n            else {\n                if (navIdx.length !== 1) {\n                    continue;\n                }\n            }\n            idx = navIdx.pop();\n            ul = this.getUlByNavIdx(navIdx.length);\n            if (ul) {\n                if (enable) {\n                    if (this.isMenu) {\n                        ul.children[idx].classList.remove(disabled);\n                        ul.children[idx].removeAttribute('aria-disabled');\n                    }\n                    else {\n                        if (Browser.isDevice && !ul.classList.contains('e-contextmenu')) {\n                            ul.children[idx + 1].classList.remove(disabled);\n                        }\n                        else {\n                            ul.children[idx].classList.remove(disabled);\n                        }\n                    }\n                }\n                else {\n                    if (this.isMenu) {\n                        ul.children[idx].classList.add(disabled);\n                        ul.children[idx].setAttribute('aria-disabled', 'true');\n                    }\n                    else {\n                        if (Browser.isDevice && !ul.classList.contains('e-contextmenu')) {\n                            ul.children[idx + 1].classList.add(disabled);\n                        }\n                        else {\n                            ul.children[idx].classList.add(disabled);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * This method is used to show the menu items in the Menu based on the items text.\n     * @param items Text items that needs to be shown.\n     * @param isUniqueId - Set `true` if it is a unique id.\n     * @returns void\n     */\n    showItems(items, isUniqueId) {\n        this.showHideItems(items, false, isUniqueId);\n    }\n    /**\n     * This method is used to hide the menu items in the Menu based on the items text.\n     * @param items Text items that needs to be hidden.\n     * @returns void\n     */\n    hideItems(items, isUniqueId) {\n        this.showHideItems(items, true, isUniqueId);\n    }\n    showHideItems(items, ishide, isUniqueId) {\n        let ul;\n        let index;\n        let navIdx;\n        for (let i = 0; i < items.length; i++) {\n            navIdx = this.getIndex(items[i], isUniqueId);\n            index = navIdx.pop();\n            ul = this.getUlByNavIdx(navIdx.length);\n            if (ul) {\n                if (ishide) {\n                    if (Browser.isDevice && !ul.classList.contains('e-contextmenu')) {\n                        ul.children[index + 1].classList.add(HIDE);\n                    }\n                    else {\n                        ul.children[index].classList.add(HIDE);\n                    }\n                }\n                else {\n                    if (Browser.isDevice && !ul.classList.contains('e-contextmenu')) {\n                        ul.children[index + 1].classList.remove(HIDE);\n                    }\n                    else {\n                        ul.children[index].classList.remove(HIDE);\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * It is used to remove the menu items from the Menu based on the items text.\n     * @param items Text items that needs to be removed.\n     * @returns void\n     */\n    removeItems(items, isUniqueId) {\n        let idx;\n        let navIdx;\n        let iitems;\n        for (let i = 0; i < items.length; i++) {\n            navIdx = this.getIndex(items[i], isUniqueId);\n            idx = navIdx.pop();\n            iitems = this.getItems(navIdx);\n            this.removeItem(iitems, navIdx, idx);\n        }\n    }\n    /**\n     * It is used to insert the menu items after the specified menu item text.\n     * @param items Items that needs to be inserted.\n     * @param text Text item after that the element to be inserted.\n     * @returns void\n     */\n    insertAfter(items, text, isUniqueId) {\n        this.insertItems(items, text, isUniqueId);\n    }\n    /**\n     * It is used to insert the menu items before the specified menu item text.\n     * @param items Items that needs to be inserted.\n     * @param text Text item before that the element to be inserted.\n     * @param isUniqueId - Set `true` if it is a unique id.\n     * @returns void\n     */\n    insertBefore(items, text, isUniqueId) {\n        this.insertItems(items, text, isUniqueId, false);\n    }\n    insertItems(items, text, isUniqueId, isAfter = true) {\n        let li;\n        let idx;\n        let navIdx;\n        let iitems;\n        let menuitem;\n        let showIcon;\n        for (let i = 0; i < items.length; i++) {\n            navIdx = this.getIndex(text, isUniqueId);\n            idx = navIdx.pop();\n            iitems = this.getItems(navIdx);\n            menuitem = new MenuItem(iitems[0], 'items', items[i], true);\n            iitems.splice(isAfter ? idx + 1 : idx, 0, menuitem);\n            let uls = this.isMenu ? [this.getWrapper()].concat(this.getPopups()) : [].slice.call(this.getWrapper().children);\n            if (navIdx.length < uls.length) {\n                idx = isAfter ? idx + 1 : idx;\n                showIcon = this.hasField(iitems, this.getField('iconCss', navIdx.length - 1));\n                li = this.createItems(iitems).children[idx];\n                let ul = this.isMenu ? select('.e-menu-parent', uls[navIdx.length]) : uls[navIdx.length];\n                ul.insertBefore(li, ul.children[idx]);\n            }\n        }\n    }\n    removeAttributes() {\n        ['top', 'left', 'display', 'z-index'].forEach((key) => {\n            this.element.style.removeProperty(key);\n        });\n        ['role', 'tabindex', 'class', 'style'].forEach((key) => {\n            if (key === 'class' && this.element.classList.contains('e-menu-parent')) {\n                this.element.classList.remove('e-menu-parent');\n            }\n            if (['class', 'style'].indexOf(key) === -1 || !this.element.getAttribute(key)) {\n                this.element.removeAttribute(key);\n            }\n            if (this.isMenu && key === 'class' && this.element.classList.contains('e-vertical')) {\n                this.element.classList.remove('e-vertical');\n            }\n        });\n    }\n    /**\n     * Destroys the widget.\n     * @returns void\n     */\n    destroy() {\n        let wrapper = this.getWrapper();\n        if (wrapper) {\n            this.unWireEvents();\n            if (!this.isMenu) {\n                this.clonedElement.style.display = '';\n                if (this.clonedElement.tagName === 'EJS-CONTEXTMENU') {\n                    addClass([this.clonedElement], ['e-control', 'e-lib', 'e-' + this.getModuleName()]);\n                    this.element = this.clonedElement;\n                }\n                else {\n                    if (this.refreshing && this.clonedElement.childElementCount && this.clonedElement.children[0].tagName === 'LI') {\n                        this.setProperties({ 'items': [] }, true);\n                    }\n                    if (document.getElementById(this.clonedElement.id)) {\n                        let refEle = this.clonedElement.nextElementSibling;\n                        refEle && refEle !== wrapper ? this.clonedElement.parentElement.insertBefore(this.element, refEle) :\n                            this.clonedElement.parentElement.appendChild(this.element);\n                        if (isBlazor()) {\n                            this.element = this.removeChildElement(this.element);\n                        }\n                        else {\n                            this.element.innerHTML = '';\n                        }\n                        append([].slice.call(this.clonedElement.children), this.element);\n                        detach(this.clonedElement);\n                        this.removeAttributes();\n                    }\n                }\n                this.clonedElement = null;\n            }\n            else {\n                this.closeMenu();\n                if (isBlazor()) {\n                    this.element = this.removeChildElement(this.element);\n                }\n                else {\n                    this.element.innerHTML = '';\n                }\n                this.removeAttributes();\n                wrapper.parentNode.insertBefore(this.element, wrapper);\n            }\n            if (this.isMenu && this.clonedElement) {\n                detach(this.element);\n                wrapper.style.display = '';\n                wrapper.classList.remove('e-' + this.getModuleName() + '-wrapper');\n                wrapper.removeAttribute('data-ripple');\n            }\n            else {\n                detach(wrapper);\n            }\n            super.destroy();\n            if (this.template) {\n                this.clearTemplate(['template']);\n            }\n        }\n    }\n};\n__decorate$2([\n    Event()\n], MenuBase.prototype, \"beforeItemRender\", void 0);\n__decorate$2([\n    Event()\n], MenuBase.prototype, \"beforeOpen\", void 0);\n__decorate$2([\n    Event()\n], MenuBase.prototype, \"onOpen\", void 0);\n__decorate$2([\n    Event()\n], MenuBase.prototype, \"beforeClose\", void 0);\n__decorate$2([\n    Event()\n], MenuBase.prototype, \"onClose\", void 0);\n__decorate$2([\n    Event()\n], MenuBase.prototype, \"select\", void 0);\n__decorate$2([\n    Event()\n], MenuBase.prototype, \"created\", void 0);\n__decorate$2([\n    Property('')\n], MenuBase.prototype, \"cssClass\", void 0);\n__decorate$2([\n    Property(false)\n], MenuBase.prototype, \"showItemOnClick\", void 0);\n__decorate$2([\n    Property('')\n], MenuBase.prototype, \"target\", void 0);\n__decorate$2([\n    Property('')\n], MenuBase.prototype, \"filter\", void 0);\n__decorate$2([\n    Property(null)\n], MenuBase.prototype, \"template\", void 0);\n__decorate$2([\n    Property(false)\n], MenuBase.prototype, \"enableScrolling\", void 0);\n__decorate$2([\n    Property(false)\n], MenuBase.prototype, \"enableHtmlSanitizer\", void 0);\n__decorate$2([\n    Complex({ itemId: \"id\", text: \"text\", parentId: \"parentId\", iconCss: \"iconCss\", url: \"url\", separator: \"separator\", children: \"items\" }, FieldSettings)\n], MenuBase.prototype, \"fields\", void 0);\n__decorate$2([\n    Collection([], MenuItem)\n], MenuBase.prototype, \"items\", void 0);\n__decorate$2([\n    Complex({ duration: 400, easing: 'ease', effect: 'SlideDown' }, MenuAnimationSettings)\n], MenuBase.prototype, \"animationSettings\", void 0);\nMenuBase = __decorate$2([\n    NotifyPropertyChanges\n], MenuBase);\n\n/**\n * Navigation Common modules\n */\n\nvar __decorate$3 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nconst CLS_VERTICAL = 'e-vertical';\nconst CLS_ITEMS = 'e-toolbar-items';\nconst BZ_ITEMS = 'e-blazor-toolbar-items';\nconst CLS_ITEM = 'e-toolbar-item';\nconst CLS_RTL$2 = 'e-rtl';\nconst CLS_SEPARATOR = 'e-separator';\nconst CLS_POPUPICON = 'e-popup-up-icon';\nconst CLS_POPUPDOWN = 'e-popup-down-icon';\nconst CLS_POPUPOPEN = 'e-popup-open';\nconst CLS_TEMPLATE = 'e-template';\nconst CLS_DISABLE$2 = 'e-overlay';\nconst CLS_POPUPTEXT = 'e-toolbar-text';\nconst CLS_TBARTEXT = 'e-popup-text';\nconst CLS_TBAROVERFLOW = 'e-overflow-show';\nconst CLS_POPOVERFLOW = 'e-overflow-hide';\nconst CLS_TBARBTN = 'e-tbar-btn';\nconst CLS_TBARNAV = 'e-hor-nav';\nconst CLS_TBARSCRLNAV = 'e-scroll-nav';\nconst CLS_TBARRIGHT = 'e-toolbar-right';\nconst CLS_TBARLEFT = 'e-toolbar-left';\nconst CLS_TBARCENTER = 'e-toolbar-center';\nconst CLS_TBARPOS = 'e-tbar-pos';\nconst CLS_HSCROLLCNT = 'e-hscroll-content';\nconst CLS_VSCROLLCNT = 'e-vscroll-content';\nconst CLS_HSCROLLBAR$1 = 'e-hscroll-bar';\nconst CLS_POPUPNAV = 'e-hor-nav';\nconst CLS_POPUPCLASS = 'e-toolbar-pop';\nconst CLS_POPUP = 'e-toolbar-popup';\nconst CLS_TBARBTNTEXT = 'e-tbar-btn-text';\nconst CLS_TBARNAVACT = 'e-nav-active';\nconst CLS_TBARIGNORE = 'e-ignore';\nconst CLS_POPPRI = 'e-popup-alone';\nconst CLS_HIDDEN = 'e-hidden';\nconst CLS_MULTIROW = 'e-toolbar-multirow';\nconst CLS_MULTIROWPOS = 'e-multirow-pos';\nconst CLS_MULTIROW_SEPARATOR = 'e-multirow-separator';\nconst CLS_EXTENDABLE_SEPARATOR = 'e-extended-separator';\nconst CLS_EXTEANDABLE_TOOLBAR = 'e-extended-toolbar';\nconst CLS_EXTENDABLECLASS = 'e-toolbar-extended';\nconst CLS_EXTENDPOPUP = 'e-expended-nav';\nconst CLS_EXTENDEDPOPOPEN = 'e-tbar-extended';\n/**\n * An item object that is used to configure Toolbar commands.\n */\nclass Item extends ChildProperty {\n}\n__decorate$3([\n    Property('')\n], Item.prototype, \"id\", void 0);\n__decorate$3([\n    Property('')\n], Item.prototype, \"text\", void 0);\n__decorate$3([\n    Property('auto')\n], Item.prototype, \"width\", void 0);\n__decorate$3([\n    Property('')\n], Item.prototype, \"cssClass\", void 0);\n__decorate$3([\n    Property(false)\n], Item.prototype, \"showAlwaysInPopup\", void 0);\n__decorate$3([\n    Property(false)\n], Item.prototype, \"disabled\", void 0);\n__decorate$3([\n    Property('')\n], Item.prototype, \"prefixIcon\", void 0);\n__decorate$3([\n    Property('')\n], Item.prototype, \"suffixIcon\", void 0);\n__decorate$3([\n    Property(true)\n], Item.prototype, \"visible\", void 0);\n__decorate$3([\n    Property('None')\n], Item.prototype, \"overflow\", void 0);\n__decorate$3([\n    Property('')\n], Item.prototype, \"template\", void 0);\n__decorate$3([\n    Property('Button')\n], Item.prototype, \"type\", void 0);\n__decorate$3([\n    Property('Both')\n], Item.prototype, \"showTextOn\", void 0);\n__decorate$3([\n    Property(null)\n], Item.prototype, \"htmlAttributes\", void 0);\n__decorate$3([\n    Property('')\n], Item.prototype, \"tooltipText\", void 0);\n__decorate$3([\n    Property('Left')\n], Item.prototype, \"align\", void 0);\n__decorate$3([\n    Event()\n], Item.prototype, \"click\", void 0);\n/**\n * The Toolbar control contains a group of commands that are aligned horizontally.\n * ```html\n * <div id=\"toolbar\"/>\n * <script>\n *   var toolbarObj = new Toolbar();\n *   toolbarObj.appendTo(\"#toolbar\");\n * </script>\n * ```\n */\nlet Toolbar = class Toolbar extends Component {\n    /**\n     * Initializes a new instance of the Toolbar class.\n     * @param options  - Specifies Toolbar model properties as options.\n     * @param element  - Specifies the element that is rendered as a Toolbar.\n     */\n    constructor(options, element) {\n        super(options, element);\n        this.resizeContext = this.resize.bind(this);\n        /**\n         * Contains the keyboard configuration of the Toolbar.\n         */\n        this.keyConfigs = {\n            moveLeft: 'leftarrow',\n            moveRight: 'rightarrow',\n            moveUp: 'uparrow',\n            moveDown: 'downarrow',\n            popupOpen: 'enter',\n            popupClose: 'escape',\n            tab: 'tab',\n            home: 'home',\n            end: 'end',\n        };\n    }\n    /**\n     * Removes the control from the DOM and also removes all its related events.\n     * @returns void.\n     */\n    destroy() {\n        // tslint:disable-next-line:no-any\n        if (this.isReact) {\n            this.clearTemplate();\n        }\n        super.destroy();\n        this.unwireEvents();\n        this.tempId.forEach((ele) => {\n            if (!isNullOrUndefined(this.element.querySelector(ele))) {\n                document.body.appendChild(this.element.querySelector(ele)).style.display = 'none';\n            }\n        });\n        if (isBlazor() && this.isServerRendered) {\n            this.resetServerItems();\n        }\n        while (this.element.lastElementChild && !this.element.lastElementChild.classList.contains(BZ_ITEMS)) {\n            this.element.removeChild(this.element.lastElementChild);\n        }\n        if (this.trgtEle) {\n            this.element.appendChild(this.ctrlTem);\n        }\n        this.clearProperty();\n        this.popObj = null;\n        this.tbarAlign = null;\n        this.remove(this.element, 'e-toolpop');\n        if (this.cssClass) {\n            removeClass([this.element], this.cssClass.split(' '));\n        }\n        this.element.removeAttribute('style');\n        ['aria-disabled', 'aria-orientation', 'aria-haspopup', 'role'].forEach((attrb) => this.element.removeAttribute(attrb));\n    }\n    /**\n     * Initialize the event handler\n     * @private\n     */\n    preRender() {\n        let eventArgs = { enableCollision: this.enableCollision, scrollStep: this.scrollStep };\n        this.trigger('beforeCreate', eventArgs);\n        this.enableCollision = eventArgs.enableCollision;\n        this.scrollStep = eventArgs.scrollStep;\n        this.scrollModule = null;\n        this.popObj = null;\n        this.tempId = [];\n        this.tbarItemsCol = this.items;\n        this.isVertical = this.element.classList.contains(CLS_VERTICAL) ? true : false;\n        this.isExtendedOpen = false;\n        this.popupPriCount = 0;\n        if (this.enableRtl) {\n            this.add(this.element, CLS_RTL$2);\n        }\n    }\n    wireEvents() {\n        EventHandler.add(this.element, 'click', this.clickHandler, this);\n        window.addEventListener('resize', this.resizeContext);\n        if (this.allowKeyboard) {\n            this.wireKeyboardEvent();\n        }\n    }\n    wireKeyboardEvent() {\n        this.keyModule = new KeyboardEvents(this.element, {\n            keyAction: this.keyActionHandler.bind(this),\n            keyConfigs: this.keyConfigs\n        });\n        EventHandler.add(this.element, 'keydown', this.docKeyDown, this);\n        this.element.setAttribute('tabIndex', '0');\n    }\n    unwireKeyboardEvent() {\n        if (this.keyModule) {\n            EventHandler.remove(this.element, 'keydown', this.docKeyDown);\n            this.keyModule.destroy();\n            this.keyModule = null;\n        }\n    }\n    docKeyDown(e) {\n        if (e.target.tagName === 'INPUT') {\n            return;\n        }\n        let popCheck = !isNullOrUndefined(this.popObj) && isVisible(this.popObj.element) && this.overflowMode !== 'Extended';\n        if (e.keyCode === 9 && e.target.classList.contains('e-hor-nav') === true && popCheck) {\n            this.popObj.hide({ name: 'FadeOut', duration: 100 });\n        }\n        let keyCheck = (e.keyCode === 40 || e.keyCode === 38 || e.keyCode === 35 || e.keyCode === 36);\n        if (keyCheck) {\n            e.preventDefault();\n        }\n    }\n    unwireEvents() {\n        EventHandler.remove(this.element, 'click', this.clickHandler);\n        this.destroyScroll();\n        this.unwireKeyboardEvent();\n        window.removeEventListener('resize', this.resizeContext);\n        EventHandler.remove(document, 'scroll', this.docEvent);\n        EventHandler.remove(document, 'click', this.docEvent);\n    }\n    clearProperty() {\n        this.tbarEle = [];\n        this.tbarAlgEle = { lefts: [], centers: [], rights: [] };\n    }\n    docEvent(e) {\n        let popEle = closest(e.target, '.e-popup');\n        if (this.popObj && isVisible(this.popObj.element) && !popEle && this.overflowMode === 'Popup') {\n            this.popObj.hide({ name: 'FadeOut', duration: 100 });\n        }\n    }\n    destroyScroll() {\n        if (this.scrollModule) {\n            if (this.tbarAlign) {\n                this.add(this.scrollModule.element, CLS_TBARPOS);\n            }\n            this.scrollModule.destroy();\n            this.scrollModule = null;\n        }\n    }\n    destroyItems() {\n        [].slice.call(this.element.querySelectorAll('.' + CLS_ITEM)).forEach((el) => {\n            detach(el);\n        });\n        let tbarItems = this.element.querySelector('.' + CLS_ITEMS);\n        if (this.tbarAlign) {\n            [].slice.call(tbarItems.children).forEach((el) => {\n                detach(el);\n            });\n            this.tbarAlign = false;\n            this.remove(tbarItems, CLS_TBARPOS);\n        }\n        this.clearProperty();\n    }\n    destroyMode() {\n        if (this.scrollModule) {\n            this.remove(this.scrollModule.element, CLS_RTL$2);\n            this.destroyScroll();\n        }\n        this.remove(this.element, CLS_EXTENDEDPOPOPEN);\n        this.remove(this.element, CLS_EXTEANDABLE_TOOLBAR);\n        let tempEle = this.element.querySelector('.e-toolbar-multirow');\n        if (tempEle) {\n            this.remove(tempEle, CLS_MULTIROW);\n        }\n        if (this.popObj) {\n            this.popupRefresh(this.popObj.element, true);\n        }\n    }\n    add(ele, val) {\n        ele.classList.add(val);\n    }\n    remove(ele, val) {\n        ele.classList.remove(val);\n    }\n    elementFocus(ele) {\n        let fChild = ele.firstElementChild;\n        if (fChild) {\n            fChild.focus();\n            this.activeEleSwitch(ele);\n        }\n        else {\n            ele.focus();\n        }\n    }\n    clstElement(tbrNavChk, trgt) {\n        let clst;\n        if (tbrNavChk && this.popObj && isVisible(this.popObj.element)) {\n            clst = this.popObj.element.querySelector('.' + CLS_ITEM);\n        }\n        else if (this.element === trgt || tbrNavChk) {\n            // tslint:disable-next-line:max-line-length\n            clst = this.element.querySelector('.' + CLS_ITEM + ':not(.' + CLS_DISABLE$2 + ' ):not(.' + CLS_SEPARATOR + ' ):not(.' + CLS_HIDDEN + ' )');\n        }\n        else {\n            clst = closest(trgt, '.' + CLS_ITEM);\n        }\n        return clst;\n    }\n    keyHandling(clst, e, trgt, navChk, scrollChk) {\n        let popObj = this.popObj;\n        let rootEle = this.element;\n        let popAnimate = { name: 'FadeOut', duration: 100 };\n        switch (e.action) {\n            case 'moveRight':\n                if (this.isVertical) {\n                    return;\n                }\n                if (rootEle === trgt) {\n                    this.elementFocus(clst);\n                }\n                else if (!navChk) {\n                    this.eleFocus(clst, 'next');\n                }\n                break;\n            case 'moveLeft':\n                if (this.isVertical) {\n                    return;\n                }\n                if (!navChk) {\n                    this.eleFocus(clst, 'previous');\n                }\n                break;\n            case 'home':\n            case 'end':\n                let ele;\n                let nodes;\n                if (clst) {\n                    let popupCheck = closest(clst, '.e-popup');\n                    if (popupCheck) {\n                        if (isVisible(this.popObj.element)) {\n                            nodes = [].slice.call(popupCheck.children);\n                            if (e.action === 'home') {\n                                ele = nodes[0];\n                            }\n                            else {\n                                ele = nodes[nodes.length - 1];\n                            }\n                        }\n                    }\n                    else {\n                        nodes = this.element.querySelectorAll('.' + CLS_ITEMS + ' .' + CLS_ITEM);\n                        if (e.action === 'home') {\n                            ele = nodes[0];\n                        }\n                        else {\n                            ele = nodes[nodes.length - 1];\n                        }\n                    }\n                    if (ele) {\n                        this.elementFocus(ele);\n                    }\n                }\n                break;\n            case 'moveUp':\n            case 'moveDown':\n                let value = e.action === 'moveUp' ? 'previous' : 'next';\n                if (!this.isVertical) {\n                    if (popObj && closest(trgt, '.e-popup')) {\n                        let popEle = popObj.element;\n                        let popFrstEle = popEle.firstElementChild;\n                        if ((value === 'previous' && popFrstEle === clst) || (value === 'next' && popEle.lastElementChild === clst)) {\n                            return;\n                        }\n                        else {\n                            this.eleFocus(clst, value);\n                        }\n                    }\n                    else if (e.action === 'moveDown' && popObj && isVisible(popObj.element)) {\n                        this.elementFocus(clst);\n                    }\n                }\n                else {\n                    if (e.action === 'moveUp') {\n                        this.eleFocus(clst, 'previous');\n                    }\n                    else {\n                        this.eleFocus(clst, 'next');\n                    }\n                }\n                break;\n            case 'tab':\n                if (!scrollChk && !navChk) {\n                    let ele = clst.firstElementChild;\n                    if (rootEle === trgt) {\n                        if (this.activeEle) {\n                            this.activeEle.focus();\n                        }\n                        else {\n                            this.activeEleRemove(ele);\n                            ele.focus();\n                        }\n                        this.element.removeAttribute('tabindex');\n                    }\n                }\n                break;\n            case 'popupClose':\n                if (popObj && this.overflowMode !== 'Extended') {\n                    popObj.hide(popAnimate);\n                }\n                break;\n            case 'popupOpen':\n                if (!navChk) {\n                    return;\n                }\n                if (popObj && !isVisible(popObj.element)) {\n                    popObj.element.style.top = rootEle.offsetHeight + 'px';\n                    popObj.show({ name: 'FadeIn', duration: 100 });\n                }\n                else {\n                    popObj.hide(popAnimate);\n                }\n                break;\n        }\n    }\n    keyActionHandler(e) {\n        let trgt = e.target;\n        if (trgt.tagName === 'INPUT' || trgt.tagName === 'TEXTAREA' || this.element.classList.contains(CLS_DISABLE$2)) {\n            return;\n        }\n        e.preventDefault();\n        let clst;\n        let tbrNavChk = trgt.classList.contains(CLS_TBARNAV);\n        let tbarScrollChk = trgt.classList.contains(CLS_TBARSCRLNAV);\n        clst = this.clstElement(tbrNavChk, trgt);\n        if (clst || tbarScrollChk) {\n            this.keyHandling(clst, e, trgt, tbrNavChk, tbarScrollChk);\n        }\n    }\n    /**\n     * Specifies the value to disable/enable the Toolbar component.\n     * When set to `true`, the component will be disabled.\n     * @param  {boolean} value - Based on this Boolean value, Toolbar will be enabled (false) or disabled (true).\n     * @returns void.\n     */\n    disable(value) {\n        let rootEle = this.element;\n        value ? rootEle.classList.add(CLS_DISABLE$2) : rootEle.classList.remove(CLS_DISABLE$2);\n        rootEle.setAttribute('tabindex', !value ? '0' : '-1');\n        if (this.activeEle) {\n            this.activeEle.setAttribute('tabindex', !value ? '0' : '-1');\n        }\n        if (this.scrollModule) {\n            this.scrollModule.disable(value);\n        }\n        if (this.popObj) {\n            if (isVisible(this.popObj.element) && this.overflowMode !== 'Extended') {\n                this.popObj.hide();\n            }\n            rootEle.querySelector('#' + rootEle.id + '_nav').setAttribute('tabindex', !value ? '0' : '-1');\n        }\n    }\n    eleContains(el) {\n        // tslint:disable-next-line:max-line-length\n        return el.classList.contains(CLS_SEPARATOR) || el.classList.contains(CLS_DISABLE$2) || el.getAttribute('disabled') || el.classList.contains(CLS_HIDDEN) || !isVisible(el);\n        // tslint:enable-next-line:max-line-length\n    }\n    eleFocus(closest$$1, pos) {\n        let sib = Object(closest$$1)[pos + 'ElementSibling'];\n        if (sib) {\n            let skipEle = this.eleContains(sib);\n            if (skipEle) {\n                this.eleFocus(sib, pos);\n                return;\n            }\n            this.elementFocus(sib);\n        }\n        else if (this.tbarAlign) {\n            let elem = Object(closest$$1.parentElement)[pos + 'ElementSibling'];\n            if (!isNullOrUndefined(elem) && elem.children.length === 0) {\n                elem = Object(elem)[pos + 'ElementSibling'];\n            }\n            if (!isNullOrUndefined(elem) && elem.children.length > 0) {\n                if (pos === 'next') {\n                    let el = elem.querySelector('.' + CLS_ITEM);\n                    if (this.eleContains(el)) {\n                        this.eleFocus(el, pos);\n                    }\n                    else {\n                        el.firstElementChild.focus();\n                        this.activeEleSwitch(el);\n                    }\n                }\n                else {\n                    let el = elem.lastElementChild;\n                    if (this.eleContains(el)) {\n                        this.eleFocus(el, pos);\n                    }\n                    else {\n                        this.elementFocus(el);\n                    }\n                }\n            }\n        }\n    }\n    clickHandler(e) {\n        let trgt = e.target;\n        let clsList = trgt.classList;\n        let ele = this.element;\n        let isPopupElement = !isNullOrUndefined(closest(trgt, '.' + CLS_POPUPCLASS));\n        let popupNav = closest(trgt, ('.' + CLS_TBARNAV));\n        if (!popupNav) {\n            popupNav = trgt;\n        }\n        if (!ele.children[0].classList.contains('e-hscroll') && !ele.children[0].classList.contains('e-vscroll')\n            && (clsList.contains(CLS_TBARNAV))) {\n            clsList = trgt.querySelector('.e-icons').classList;\n        }\n        if (clsList.contains(CLS_POPUPICON) || clsList.contains(CLS_POPUPDOWN)) {\n            this.popupClickHandler(ele, popupNav, CLS_RTL$2);\n        }\n        let itemObj;\n        let clst = closest(e.target, '.' + CLS_ITEM);\n        if ((isNullOrUndefined(clst) || clst.classList.contains(CLS_DISABLE$2)) && !popupNav.classList.contains(CLS_TBARNAV)) {\n            return;\n        }\n        if (clst) {\n            let tempItem = this.items[this.tbarEle.indexOf(clst)];\n            if (tempItem && isBlazor() && this.isServerRendered) {\n                itemObj = {\n                    id: tempItem.id,\n                    text: tempItem.text,\n                    width: tempItem.width,\n                    cssClass: tempItem.cssClass,\n                    showAlwaysInPopup: tempItem.showAlwaysInPopup,\n                    disabled: tempItem.disabled,\n                    prefixIcon: tempItem.prefixIcon,\n                    suffixIcon: tempItem.suffixIcon,\n                    visible: tempItem.visible,\n                    overflow: tempItem.overflow,\n                    template: tempItem.template,\n                    type: tempItem.type,\n                    showTextOn: tempItem.showTextOn,\n                    htmlAttributes: tempItem.htmlAttributes,\n                    tooltipText: tempItem.tooltipText,\n                    align: tempItem.align,\n                    click: tempItem.click\n                };\n            }\n            else {\n                itemObj = tempItem;\n            }\n        }\n        let eventArgs = { originalEvent: e, item: itemObj };\n        if (itemObj && !isNullOrUndefined(itemObj.click)) {\n            this.trigger('items[' + this.tbarEle.indexOf(clst) + '].click', eventArgs);\n        }\n        if (!eventArgs.cancel) {\n            this.trigger('clicked', eventArgs, (clickedArgs) => {\n                if (!isNullOrUndefined(this.popObj) && isPopupElement && !clickedArgs.cancel && this.overflowMode === 'Popup' &&\n                    clickedArgs.item && clickedArgs.item.type !== 'Input') {\n                    this.popObj.hide({ name: 'FadeOut', duration: 100 });\n                }\n            });\n        }\n    }\n    ;\n    popupClickHandler(ele, popupNav, CLS_RTL) {\n        let popObj = this.popObj;\n        if (isVisible(popObj.element)) {\n            popupNav.classList.remove(CLS_TBARNAVACT);\n            popObj.hide({ name: 'FadeOut', duration: 100 });\n        }\n        else {\n            if (ele.classList.contains(CLS_RTL)) {\n                popObj.enableRtl = true;\n                popObj.position = { X: 'left', Y: 'top' };\n            }\n            if (popObj.offsetX === 0 && !ele.classList.contains(CLS_RTL)) {\n                popObj.enableRtl = false;\n                popObj.position = { X: 'right', Y: 'top' };\n            }\n            popObj.dataBind();\n            popObj.refreshPosition();\n            popObj.element.style.top = this.getElementOffsetY() + 'px';\n            if (this.overflowMode === 'Extended') {\n                popObj.element.style.minHeight = '0px';\n            }\n            popupNav.classList.add(CLS_TBARNAVACT);\n            popObj.show({ name: 'FadeIn', duration: 100 });\n        }\n    }\n    /**\n     * To Initialize the control rendering\n     * @private\n     */\n    render() {\n        this.initialize();\n        this.renderControl();\n        this.wireEvents();\n        this.renderComplete();\n    }\n    initialize() {\n        let width = formatUnit(this.width);\n        let height = formatUnit(this.height);\n        if (Browser.info.name !== 'msie' || this.height !== 'auto' || this.overflowMode === 'MultiRow') {\n            setStyleAttribute(this.element, { 'height': height });\n        }\n        setStyleAttribute(this.element, { 'width': width });\n        let ariaAttr = {\n            'role': 'toolbar', 'aria-disabled': 'false', 'aria-haspopup': 'false',\n            'aria-orientation': !this.isVertical ? 'horizontal' : 'vertical',\n        };\n        attributes(this.element, ariaAttr);\n        if (this.cssClass) {\n            addClass([this.element], this.cssClass.split(' '));\n        }\n    }\n    renderControl() {\n        let ele = this.element;\n        this.trgtEle = (ele.children.length > 0 && (!isBlazor() && !this.isServerRendered)) ? ele.querySelector('div') : null;\n        this.tbarAlgEle = { lefts: [], centers: [], rights: [] };\n        this.renderItems();\n        this.renderLayout();\n    }\n    renderLayout() {\n        this.renderOverflowMode();\n        if (this.tbarAlign) {\n            this.itemPositioning();\n        }\n        if (this.popObj && this.popObj.element.childElementCount > 1 && this.checkPopupRefresh(this.element, this.popObj.element)) {\n            this.popupRefresh(this.popObj.element, false);\n        }\n        this.separator();\n    }\n    itemsAlign(items, itemEleDom) {\n        let innerItem;\n        let innerPos;\n        if (!this.tbarEle) {\n            this.tbarEle = [];\n        }\n        for (let i = 0; i < items.length; i++) {\n            if (isBlazor() && this.isServerRendered) {\n                this.isVertical = this.element.classList.contains(CLS_VERTICAL) ? true : false;\n                let itemEleBlaDom = this.element.querySelector('.' + BZ_ITEMS);\n                innerItem = itemEleBlaDom.querySelector('.' + CLS_ITEM + '[data-index=\"' + i + '\"]');\n                if (!innerItem) {\n                    continue;\n                }\n                if (items[i].overflow !== 'Show' && items[i].showAlwaysInPopup && !innerItem.classList.contains(CLS_SEPARATOR)) {\n                    this.popupPriCount++;\n                }\n                if (items[i].htmlAttributes) {\n                    this.setAttr(items[i].htmlAttributes, innerItem);\n                }\n                if (items[i].type === 'Button') {\n                    EventHandler.clearEvents(innerItem);\n                    EventHandler.add(innerItem, 'click', this.itemClick, this);\n                }\n            }\n            else {\n                innerItem = this.renderSubComponent(items[i], i);\n            }\n            if (this.tbarEle.indexOf(innerItem) === -1) {\n                this.tbarEle.push(innerItem);\n            }\n            if (!this.tbarAlign) {\n                this.tbarItemAlign(items[i], itemEleDom, i);\n            }\n            innerPos = itemEleDom.querySelector('.e-toolbar-' + items[i].align.toLowerCase());\n            if (innerPos) {\n                if (!(items[i].showAlwaysInPopup && items[i].overflow !== 'Show')) {\n                    this.tbarAlgEle[(items[i].align + 's').toLowerCase()].push(innerItem);\n                }\n                innerPos.appendChild(innerItem);\n            }\n            else {\n                itemEleDom.appendChild(innerItem);\n            }\n        }\n        // tslint:disable-next-line:no-any\n        if (this.isReact) {\n            let portals = 'portals';\n            // tslint:disable-next-line:no-any\n            this.notify('render-react-toolbar-template', this[portals]);\n            this.renderReactTemplates();\n        }\n    }\n    serverItemsRerender() {\n        this.destroyMode();\n        this.resetServerItems();\n        this.serverItemsRefresh();\n    }\n    serverItemsRefresh() {\n        let wrapBlaEleDom = this.element.querySelector('.' + BZ_ITEMS);\n        if (wrapBlaEleDom.children.length > 0) {\n            this.itemsAlign(this.items, this.element.querySelector('.' + CLS_ITEMS));\n            this.renderLayout();\n            this.refreshOverflow();\n        }\n    }\n    resetServerItems() {\n        let wrapBlaEleDom = this.element.querySelector('.' + BZ_ITEMS);\n        let itemEles = [].slice.call(selectAll('.' + CLS_ITEMS + ' .' + CLS_ITEM, this.element));\n        append(itemEles, wrapBlaEleDom);\n        this.clearProperty();\n    }\n    /** @hidden */\n    changeOrientation() {\n        let ele = this.element;\n        if (this.isVertical) {\n            ele.classList.remove(CLS_VERTICAL);\n            this.isVertical = false;\n            if (this.height === 'auto' || this.height === '100%') {\n                ele.style.height = this.height;\n            }\n            ele.setAttribute('aria-orientation', 'horizontal');\n        }\n        else {\n            ele.classList.add(CLS_VERTICAL);\n            this.isVertical = true;\n            ele.setAttribute('aria-orientation', 'vertical');\n            setStyleAttribute(this.element, { 'height': formatUnit(this.height), 'width': formatUnit(this.width) });\n        }\n        this.destroyMode();\n        this.refreshOverflow();\n    }\n    initScroll(element, innerItems) {\n        if (!this.scrollModule && this.checkOverflow(element, innerItems[0])) {\n            if (this.tbarAlign) {\n                this.element.querySelector('.' + CLS_ITEMS + ' .' + CLS_TBARCENTER).removeAttribute('style');\n            }\n            if (this.isVertical) {\n                this.scrollModule = new VScroll({ scrollStep: this.scrollStep, enableRtl: this.enableRtl }, innerItems[0]);\n            }\n            else {\n                this.scrollModule = new HScroll({ scrollStep: this.scrollStep, enableRtl: this.enableRtl }, innerItems[0]);\n            }\n            this.remove(this.scrollModule.element, CLS_TBARPOS);\n            setStyleAttribute(this.element, { overflow: 'hidden' });\n        }\n    }\n    itemWidthCal(items) {\n        let width = 0;\n        let style;\n        [].slice.call(selectAll('.' + CLS_ITEM, items)).forEach((el) => {\n            if (isVisible(el)) {\n                style = window.getComputedStyle(el);\n                width += this.isVertical ? el.offsetHeight : el.offsetWidth;\n                width += parseFloat(this.isVertical ? style.marginTop : style.marginRight);\n                width += parseFloat(this.isVertical ? style.marginBottom : style.marginLeft);\n            }\n        });\n        return width;\n    }\n    getScrollCntEle(innerItem) {\n        let trgClass = (this.isVertical) ? '.e-vscroll-content' : '.e-hscroll-content';\n        return innerItem.querySelector(trgClass);\n    }\n    checkOverflow(element, innerItem) {\n        if (isNullOrUndefined(element) || isNullOrUndefined(innerItem) || !isVisible(element)) {\n            return false;\n        }\n        let eleWidth = this.isVertical ? element.offsetHeight : element.offsetWidth;\n        let itemWidth = this.isVertical ? innerItem.offsetHeight : innerItem.offsetWidth;\n        if (this.tbarAlign || this.scrollModule || (eleWidth === itemWidth)) {\n            itemWidth = this.itemWidthCal(this.scrollModule ? this.getScrollCntEle(innerItem) : innerItem);\n        }\n        let popNav = element.querySelector('.' + CLS_TBARNAV);\n        let scrollNav = element.querySelector('.' + CLS_TBARSCRLNAV);\n        let navEleWidth = 0;\n        if (popNav) {\n            navEleWidth = this.isVertical ? popNav.offsetHeight : popNav.offsetWidth;\n        }\n        else if (scrollNav) {\n            navEleWidth = this.isVertical ? (scrollNav.offsetHeight * (2)) : (scrollNav.offsetWidth * 2);\n        }\n        if (itemWidth > eleWidth - navEleWidth) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    /**\n     * Refresh the whole Toolbar component without re-rendering.\n     * - It is used to manually refresh the Toolbar overflow modes such as scrollable, popup, multi row, and extended.\n     * - It will refresh the Toolbar component after loading items dynamically.\n     * @returns void.\n     */\n    refreshOverflow() {\n        this.resize();\n    }\n    toolbarAlign(innerItems) {\n        if (this.tbarAlign) {\n            this.add(innerItems, CLS_TBARPOS);\n            this.itemPositioning();\n        }\n    }\n    renderOverflowMode() {\n        let ele = this.element;\n        let innerItems = ele.querySelector('.' + CLS_ITEMS);\n        let priorityCheck = this.popupPriCount > 0;\n        if (ele && ele.children.length > 0) {\n            this.offsetWid = ele.offsetWidth;\n            this.remove(this.element, 'e-toolpop');\n            if (Browser.info.name === 'msie' && this.height === 'auto') {\n                ele.style.height = '';\n            }\n            switch (this.overflowMode) {\n                case 'Scrollable':\n                    if (isNullOrUndefined(this.scrollModule)) {\n                        this.initScroll(ele, [].slice.call(ele.getElementsByClassName(CLS_ITEMS)));\n                    }\n                    break;\n                case 'Popup':\n                    this.add(this.element, 'e-toolpop');\n                    if (this.tbarAlign) {\n                        this.removePositioning();\n                    }\n                    if (this.checkOverflow(ele, innerItems) || priorityCheck) {\n                        this.setOverflowAttributes(ele);\n                    }\n                    this.toolbarAlign(innerItems);\n                    break;\n                case 'MultiRow':\n                    this.add(innerItems, CLS_MULTIROW);\n                    if (this.checkOverflow(ele, innerItems) && this.tbarAlign) {\n                        this.removePositioning();\n                        this.add(innerItems, CLS_MULTIROWPOS);\n                    }\n                    if (ele.style.overflow === 'hidden') {\n                        ele.style.overflow = '';\n                    }\n                    if (Browser.info.name === 'msie' || ele.style.height !== 'auto') {\n                        ele.style.height = 'auto';\n                    }\n                    break;\n                case 'Extended':\n                    this.add(this.element, CLS_EXTEANDABLE_TOOLBAR);\n                    if (this.checkOverflow(ele, innerItems) || priorityCheck) {\n                        if (this.tbarAlign) {\n                            this.removePositioning();\n                        }\n                        this.setOverflowAttributes(ele);\n                    }\n                    this.toolbarAlign(innerItems);\n            }\n        }\n    }\n    setOverflowAttributes(ele) {\n        this.createPopupEle(ele, [].slice.call(selectAll('.' + CLS_ITEMS + ' .' + CLS_ITEM, ele)));\n        this.element.querySelector('.' + CLS_TBARNAV).setAttribute('tabIndex', '0');\n        this.element.querySelector('.' + CLS_TBARNAV).setAttribute('role', 'list');\n    }\n    separator() {\n        let element = this.element;\n        let eleItem = [].slice.call(element.querySelectorAll('.' + CLS_SEPARATOR));\n        let eleInlineItem;\n        let multiVar = element.querySelector('.' + CLS_MULTIROW_SEPARATOR);\n        let extendVar = element.querySelector('.' + CLS_EXTENDABLE_SEPARATOR);\n        eleInlineItem = this.overflowMode === 'MultiRow' ? multiVar : extendVar;\n        if (eleInlineItem !== null) {\n            if (this.overflowMode === 'MultiRow') {\n                eleInlineItem.classList.remove(CLS_MULTIROW_SEPARATOR);\n            }\n            else if (this.overflowMode === 'Extended') {\n                eleInlineItem.classList.remove(CLS_EXTENDABLE_SEPARATOR);\n            }\n        }\n        for (let i = 0; i <= eleItem.length - 1; i++) {\n            if (eleItem[i].offsetLeft < 30 && eleItem[i].offsetLeft !== 0) {\n                if (this.overflowMode === 'MultiRow') {\n                    eleItem[i].classList.add(CLS_MULTIROW_SEPARATOR);\n                }\n                else if (this.overflowMode === 'Extended') {\n                    eleItem[i].classList.add(CLS_EXTENDABLE_SEPARATOR);\n                }\n            }\n        }\n    }\n    createPopupEle(ele, innerEle) {\n        let innerNav = ele.querySelector('.' + CLS_TBARNAV);\n        let vertical = this.isVertical;\n        if (!innerNav) {\n            this.createPopupIcon(ele);\n        }\n        innerNav = ele.querySelector('.' + CLS_TBARNAV);\n        let innerNavDom = (vertical ? innerNav.offsetHeight : innerNav.offsetWidth);\n        let eleWidth = ((vertical ? ele.offsetHeight : ele.offsetWidth) - (innerNavDom));\n        this.element.classList.remove('e-rtl');\n        setStyleAttribute(this.element, { direction: 'initial' });\n        this.checkPriority(ele, innerEle, eleWidth, true);\n        if (this.enableRtl) {\n            this.element.classList.add('e-rtl');\n        }\n        this.element.style.removeProperty('direction');\n        this.createPopup();\n    }\n    pushingPoppedEle(tbarObj, popupPri, ele, eleHeight, sepHeight) {\n        let element = tbarObj.element;\n        let nodes = selectAll('.' + CLS_TBAROVERFLOW, ele);\n        let nodeIndex = 0;\n        let poppedEle = [].slice.call(selectAll('.' + CLS_POPUP, element.querySelector('.' + CLS_ITEMS)));\n        let nodePri = 0;\n        poppedEle.forEach((el, index) => {\n            nodes = selectAll('.' + CLS_TBAROVERFLOW, ele);\n            if (el.classList.contains(CLS_TBAROVERFLOW) && nodes.length > 0) {\n                if (tbarObj.tbResize && nodes.length > index) {\n                    ele.insertBefore(el, nodes[index]);\n                    ++nodePri;\n                }\n                else {\n                    ele.insertBefore(el, ele.children[nodes.length]);\n                    ++nodePri;\n                }\n            }\n            else if (el.classList.contains(CLS_TBAROVERFLOW)) {\n                ele.insertBefore(el, ele.firstChild);\n                ++nodePri;\n            }\n            else if (tbarObj.tbResize && el.classList.contains(CLS_POPOVERFLOW) && ele.children.length > 0 && nodes.length === 0) {\n                ele.insertBefore(el, ele.firstChild);\n                ++nodePri;\n            }\n            else if (el.classList.contains(CLS_POPOVERFLOW)) {\n                popupPri.push(el);\n            }\n            else if (tbarObj.tbResize) {\n                ele.insertBefore(el, ele.childNodes[nodeIndex + nodePri]);\n                ++nodeIndex;\n            }\n            else {\n                ele.appendChild(el);\n            }\n            if (el.classList.contains(CLS_SEPARATOR)) {\n                setStyleAttribute(el, { display: '', height: sepHeight + 'px' });\n            }\n            else {\n                setStyleAttribute(el, { display: '', height: eleHeight + 'px' });\n            }\n        });\n        popupPri.forEach((el) => {\n            ele.appendChild(el);\n        });\n        let tbarEle = selectAll('.' + CLS_ITEM, element.querySelector('.' + CLS_ITEMS));\n        for (let i = tbarEle.length - 1; i >= 0; i--) {\n            let tbarElement = tbarEle[i];\n            if (tbarElement.classList.contains(CLS_SEPARATOR) && this.overflowMode !== 'Extended') {\n                setStyleAttribute(tbarElement, { display: 'none' });\n            }\n            else {\n                break;\n            }\n        }\n    }\n    createPopup() {\n        let element = this.element;\n        let eleHeight;\n        let eleItem;\n        let sepHeight;\n        let sepItem;\n        if (this.overflowMode === 'Extended') {\n            sepItem = element.querySelector('.' + CLS_SEPARATOR + ':not(.' + CLS_POPUP + ')');\n            sepHeight = (element.style.height === 'auto' || element.style.height === '') ? null : sepItem.offsetHeight;\n        }\n        eleItem = element.querySelector('.' + CLS_ITEM + ':not(.' + CLS_SEPARATOR + '):not(.' + CLS_POPUP + ')');\n        eleHeight = (element.style.height === 'auto' || element.style.height === '') ? null : (eleItem && eleItem.offsetHeight);\n        let ele;\n        let popupPri = [];\n        if (element.querySelector('#' + element.id + '_popup.' + CLS_POPUPCLASS)) {\n            ele = element.querySelector('#' + element.id + '_popup.' + CLS_POPUPCLASS);\n        }\n        else {\n            let extendEle = this.createElement('div', {\n                id: element.id + '_popup', className: CLS_POPUPCLASS + ' ' + CLS_EXTENDABLECLASS\n            });\n            let popupEle = this.createElement('div', { id: element.id + '_popup', className: CLS_POPUPCLASS });\n            ele = this.overflowMode === 'Extended' ? extendEle : popupEle;\n        }\n        this.pushingPoppedEle(this, popupPri, ele, eleHeight, sepHeight);\n        this.popupInit(element, ele);\n    }\n    getElementOffsetY() {\n        return (this.overflowMode === 'Extended' && window.getComputedStyle(this.element).getPropertyValue('box-sizing') === 'border-box' ?\n            this.element.clientHeight : this.element.offsetHeight);\n    }\n    popupInit(element, ele) {\n        if (!this.popObj) {\n            element.appendChild(ele);\n            setStyleAttribute(this.element, { overflow: '' });\n            let eleStyles = window.getComputedStyle(this.element);\n            let popup = new Popup(null, {\n                relateTo: this.element,\n                offsetY: (this.isVertical) ? 0 : this.getElementOffsetY(),\n                enableRtl: this.enableRtl,\n                open: this.popupOpen.bind(this),\n                close: this.popupClose.bind(this),\n                collision: { Y: this.enableCollision ? 'flip' : 'none' },\n                position: this.enableRtl ? { X: 'left', Y: 'top' } : { X: 'right', Y: 'top' }\n            });\n            popup.appendTo(ele);\n            if (this.overflowMode === 'Extended') {\n                popup.width = parseFloat(eleStyles.width) + ((parseFloat(eleStyles.borderRightWidth)) * 2);\n                popup.offsetX = 0;\n            }\n            EventHandler.add(document, 'scroll', this.docEvent.bind(this));\n            EventHandler.add(document, 'click ', this.docEvent.bind(this));\n            popup.element.style.maxHeight = popup.element.offsetHeight + 'px';\n            if (this.isVertical) {\n                popup.element.style.visibility = 'hidden';\n            }\n            if (this.isExtendedOpen) {\n                let popupNav = this.element.querySelector('.' + CLS_TBARNAV);\n                popupNav.classList.add(CLS_TBARNAVACT);\n                classList(popupNav.firstElementChild, [CLS_POPUPICON], [CLS_POPUPDOWN]);\n                this.element.querySelector('.' + CLS_EXTENDABLECLASS).classList.add(CLS_POPUPOPEN);\n            }\n            else {\n                popup.hide();\n            }\n            this.popObj = popup;\n            this.element.setAttribute('aria-haspopup', 'true');\n        }\n        else {\n            let popupEle = this.popObj.element;\n            setStyleAttribute(popupEle, { maxHeight: '', display: 'block' });\n            setStyleAttribute(popupEle, { maxHeight: popupEle.offsetHeight + 'px', display: '' });\n        }\n    }\n    tbarPopupHandler(isOpen) {\n        if (this.overflowMode === 'Extended') {\n            isOpen ? this.add(this.element, CLS_EXTENDEDPOPOPEN) : this.remove(this.element, CLS_EXTENDEDPOPOPEN);\n        }\n    }\n    popupOpen(e) {\n        let popObj = this.popObj;\n        if (!this.isVertical) {\n            popObj.offsetY = this.getElementOffsetY();\n            popObj.dataBind();\n        }\n        let popupEle = this.popObj.element;\n        let toolEle = this.popObj.element.parentElement;\n        let popupNav = toolEle.querySelector('.' + CLS_TBARNAV);\n        setStyleAttribute(popObj.element, { height: 'auto', maxHeight: '' });\n        popObj.element.style.maxHeight = popObj.element.offsetHeight + 'px';\n        if (this.overflowMode === 'Extended') {\n            popObj.element.style.minHeight = '';\n        }\n        let popupElePos = popupEle.offsetTop + popupEle.offsetHeight + calculatePosition(toolEle).top;\n        let popIcon = popupNav.firstElementChild;\n        popupNav.classList.add(CLS_TBARNAVACT);\n        classList(popIcon, [CLS_POPUPICON], [CLS_POPUPDOWN]);\n        this.tbarPopupHandler(true);\n        let scrollVal = isNullOrUndefined(window.scrollY) ? 0 : window.scrollY;\n        if (!this.isVertical && ((window.innerHeight + scrollVal) < popupElePos) && (this.element.offsetTop < popupEle.offsetHeight)) {\n            let overflowHeight = (popupEle.offsetHeight - ((popupElePos - window.innerHeight - scrollVal) + 5));\n            popObj.height = overflowHeight + 'px';\n            for (let i = 0; i <= popupEle.childElementCount; i++) {\n                let ele = popupEle.children[i];\n                if (ele.offsetTop + ele.offsetHeight > overflowHeight) {\n                    overflowHeight = ele.offsetTop;\n                    break;\n                }\n            }\n            setStyleAttribute(popObj.element, { maxHeight: overflowHeight + 'px' });\n        }\n        else if (this.isVertical) {\n            let tbEleData = this.element.getBoundingClientRect();\n            setStyleAttribute(popObj.element, { maxHeight: (tbEleData.top + this.element.offsetHeight) + 'px', bottom: 0, visibility: '' });\n        }\n        if (popObj) {\n            popObj.refreshPosition();\n        }\n    }\n    popupClose(e) {\n        let element = this.element;\n        let popupNav = element.querySelector('.' + CLS_TBARNAV);\n        let popIcon = popupNav.firstElementChild;\n        popupNav.classList.remove(CLS_TBARNAVACT);\n        classList(popIcon, [CLS_POPUPDOWN], [CLS_POPUPICON]);\n        this.tbarPopupHandler(false);\n    }\n    checkPriority(ele, inEle, eleWidth, pre) {\n        let popPriority = this.popupPriCount > 0;\n        let len = inEle.length;\n        let eleWid = eleWidth;\n        let eleOffset;\n        let checkoffset;\n        let sepCheck = 0;\n        let itemCount = 0;\n        let itemPopCount = 0;\n        let checkClass = (ele, val) => {\n            let rVal = false;\n            val.forEach((cls) => {\n                if (ele.classList.contains(cls)) {\n                    rVal = true;\n                }\n            });\n            return rVal;\n        };\n        for (let i = len - 1; i >= 0; i--) {\n            let mrgn;\n            let compuStyle = window.getComputedStyle(inEle[i]);\n            if (this.isVertical) {\n                mrgn = parseFloat((compuStyle).marginTop);\n                mrgn += parseFloat((compuStyle).marginBottom);\n            }\n            else {\n                mrgn = parseFloat((compuStyle).marginRight);\n                mrgn += parseFloat((compuStyle).marginLeft);\n            }\n            let fstEleCheck = inEle[i] === this.tbarEle[0];\n            if (fstEleCheck) {\n                this.tbarEleMrgn = mrgn;\n            }\n            eleOffset = this.isVertical ? inEle[i].offsetHeight : inEle[i].offsetWidth;\n            let eleWid = fstEleCheck ? (eleOffset + mrgn) : eleOffset;\n            if (checkClass(inEle[i], [CLS_POPPRI]) && popPriority) {\n                inEle[i].classList.add(CLS_POPUP);\n                if (this.isVertical) {\n                    setStyleAttribute(inEle[i], { display: 'none', minHeight: eleWid + 'px' });\n                }\n                else {\n                    setStyleAttribute(inEle[i], { display: 'none', minWidth: eleWid + 'px' });\n                }\n                itemPopCount++;\n            }\n            if (this.isVertical) {\n                checkoffset = (inEle[i].offsetTop + inEle[i].offsetHeight + mrgn) > eleWidth;\n            }\n            else {\n                checkoffset = (inEle[i].offsetLeft + inEle[i].offsetWidth + mrgn) > eleWidth;\n            }\n            if (checkoffset) {\n                if (inEle[i].classList.contains(CLS_SEPARATOR)) {\n                    if (this.overflowMode === 'Extended') {\n                        if (itemCount === itemPopCount) {\n                            let sepEle = inEle[i];\n                            if (checkClass(sepEle, [CLS_SEPARATOR, CLS_TBARIGNORE])) {\n                                inEle[i].classList.add(CLS_POPUP);\n                                itemPopCount++;\n                            }\n                        }\n                        itemCount++;\n                    }\n                    else if (this.overflowMode === 'Popup') {\n                        if (sepCheck > 0 && itemCount === itemPopCount) {\n                            let sepEle = inEle[i + itemCount + (sepCheck - 1)];\n                            if (checkClass(sepEle, [CLS_SEPARATOR, CLS_TBARIGNORE])) {\n                                setStyleAttribute(sepEle, { display: 'none' });\n                            }\n                        }\n                        sepCheck++;\n                        itemCount = 0;\n                        itemPopCount = 0;\n                    }\n                }\n                else {\n                    itemCount++;\n                }\n                if (inEle[i].classList.contains(CLS_TBAROVERFLOW) && pre) {\n                    eleWidth -= ((this.isVertical ? inEle[i].offsetHeight : inEle[i].offsetWidth) + (mrgn));\n                }\n                else if (!checkClass(inEle[i], [CLS_SEPARATOR, CLS_TBARIGNORE])) {\n                    inEle[i].classList.add(CLS_POPUP);\n                    if (this.isVertical) {\n                        setStyleAttribute(inEle[i], { display: 'none', minHeight: eleWid + 'px' });\n                    }\n                    else {\n                        setStyleAttribute(inEle[i], { display: 'none', minWidth: eleWid + 'px' });\n                    }\n                    itemPopCount++;\n                }\n                else {\n                    eleWidth -= ((this.isVertical ? inEle[i].offsetHeight : inEle[i].offsetWidth) + (mrgn));\n                }\n            }\n        }\n        if (pre) {\n            let popedEle = selectAll('.' + CLS_ITEM + ':not(.' + CLS_POPUP + ')', this.element);\n            this.checkPriority(ele, popedEle, eleWid, false);\n        }\n    }\n    createPopupIcon(element) {\n        let id = element.id.concat('_nav');\n        let className = 'e-' + element.id.concat('_nav ' + CLS_POPUPNAV);\n        className = this.overflowMode === 'Extended' ? className + ' ' + CLS_EXTENDPOPUP : className;\n        let nav = this.createElement('div', { id: id, className: className });\n        if (Browser.info.name === 'msie' || Browser.info.name === 'edge') {\n            nav.classList.add('e-ie-align');\n        }\n        let navItem = this.createElement('div', { className: CLS_POPUPDOWN + ' e-icons' });\n        nav.appendChild(navItem);\n        nav.setAttribute('tabindex', '0');\n        nav.setAttribute('role', 'list');\n        element.appendChild(nav);\n    }\n    tbarPriRef(inEle, indx, sepPri, el, des, elWid, wid, ig) {\n        let ignoreCount = ig;\n        let popEle = this.popObj.element;\n        let query = '.' + CLS_ITEM + ':not(.' + CLS_SEPARATOR + '):not(.' + CLS_TBAROVERFLOW + ')';\n        let priEleCnt = selectAll('.' + CLS_POPUP + ':not(.' + CLS_TBAROVERFLOW + ')', popEle).length;\n        let checkClass = (ele, val) => {\n            return ele.classList.contains(val);\n        };\n        if (selectAll(query, inEle).length === 0) {\n            let eleSep = inEle.children[indx - (indx - sepPri) - 1];\n            let ignoreCheck = (!isNullOrUndefined(eleSep) && checkClass(eleSep, CLS_TBARIGNORE));\n            if ((!isNullOrUndefined(eleSep) && checkClass(eleSep, CLS_SEPARATOR) && !isVisible(eleSep)) || ignoreCheck) {\n                let sepDisplay = 'none';\n                eleSep.style.display = 'inherit';\n                let eleSepWidth = eleSep.offsetWidth + (parseFloat(window.getComputedStyle(eleSep).marginRight) * 2);\n                let prevSep = eleSep.previousElementSibling;\n                if ((elWid + eleSepWidth) < wid || des) {\n                    inEle.insertBefore(el, inEle.children[(indx + ignoreCount) - (indx - sepPri)]);\n                    if (!isNullOrUndefined(prevSep)) {\n                        prevSep.style.display = '';\n                    }\n                }\n                else {\n                    if (prevSep.classList.contains(CLS_SEPARATOR)) {\n                        prevSep.style.display = sepDisplay;\n                    }\n                }\n                eleSep.style.display = '';\n            }\n            else {\n                inEle.insertBefore(el, inEle.children[(indx + ignoreCount) - (indx - sepPri)]);\n            }\n        }\n        else {\n            inEle.insertBefore(el, inEle.children[(indx + ignoreCount) - priEleCnt]);\n        }\n    }\n    popupRefresh(popupEle, destroy) {\n        let ele = this.element;\n        let isVer = this.isVertical;\n        let popNav = ele.querySelector('.' + CLS_TBARNAV);\n        let innerEle = ele.querySelector('.' + CLS_ITEMS);\n        if (isNullOrUndefined(popNav)) {\n            return;\n        }\n        innerEle.removeAttribute('style');\n        popupEle.style.display = 'block';\n        let dimension;\n        if (isVer) {\n            dimension = ele.offsetHeight - (popNav.offsetHeight + innerEle.offsetHeight);\n        }\n        else {\n            dimension = ele.offsetWidth - (popNav.offsetWidth + innerEle.offsetWidth);\n        }\n        let popupEleWidth = 0;\n        [].slice.call(popupEle.children).forEach((el) => {\n            popupEleWidth += this.popupEleWidth(el);\n            setStyleAttribute(el, { 'position': '' });\n        });\n        if ((dimension + (isVer ? popNav.offsetHeight : popNav.offsetWidth)) > (popupEleWidth) && this.popupPriCount === 0) {\n            destroy = true;\n        }\n        this.popupEleRefresh(dimension, popupEle, destroy);\n        popupEle.style.display = '';\n        if (popupEle.children.length === 0 && popNav && this.popObj) {\n            detach(popNav);\n            popNav = null;\n            this.popObj.destroy();\n            detach(this.popObj.element);\n            this.popObj = null;\n            ele.setAttribute('aria-haspopup', 'false');\n        }\n    }\n    ignoreEleFetch(index, innerEle) {\n        let ignoreEle = [].slice.call(innerEle.querySelectorAll('.' + CLS_TBARIGNORE));\n        let ignoreInx = [];\n        let count = 0;\n        if (ignoreEle.length > 0) {\n            ignoreEle.forEach((ele) => {\n                ignoreInx.push([].slice.call(innerEle.children).indexOf(ele));\n            });\n        }\n        else {\n            return 0;\n        }\n        ignoreInx.forEach((val) => {\n            if (val <= index) {\n                count++;\n            }\n        });\n        return count;\n    }\n    checkPopupRefresh(root, popEle) {\n        popEle.style.display = 'block';\n        let elWid = this.popupEleWidth(popEle.firstElementChild);\n        popEle.firstElementChild.style.removeProperty('Position');\n        let tbarWidth = root.offsetWidth - root.querySelector('.' + CLS_TBARNAV).offsetWidth;\n        let tbarItemsWid = root.querySelector('.' + CLS_ITEMS).offsetWidth;\n        popEle.style.removeProperty('display');\n        if (tbarWidth > (elWid + tbarItemsWid)) {\n            return true;\n        }\n        return false;\n    }\n    popupEleWidth(el) {\n        el.style.position = 'absolute';\n        let elWidth = this.isVertical ? el.offsetHeight : el.offsetWidth;\n        let btnText = el.querySelector('.' + CLS_TBARBTNTEXT);\n        if (el.classList.contains('e-tbtn-align') || el.classList.contains(CLS_TBARTEXT)) {\n            let btn = el.children[0];\n            if (!isNullOrUndefined(btnText) && el.classList.contains(CLS_TBARTEXT)) {\n                btnText.style.display = 'none';\n            }\n            else if (!isNullOrUndefined(btnText) && el.classList.contains(CLS_POPUPTEXT)) {\n                btnText.style.display = 'block';\n            }\n            btn.style.minWidth = '0%';\n            elWidth = parseFloat(!this.isVertical ? el.style.minWidth : el.style.minHeight);\n            btn.style.minWidth = '';\n            btn.style.minHeight = '';\n            if (!isNullOrUndefined(btnText)) {\n                btnText.style.display = '';\n            }\n        }\n        return elWidth;\n    }\n    popupEleRefresh(width, popupEle, destroy) {\n        let popPriority = this.popupPriCount > 0;\n        let eleSplice = this.tbarEle;\n        let priEleCnt;\n        let index;\n        let checkOverflow;\n        let innerEle = this.element.querySelector('.' + CLS_ITEMS);\n        let ignoreCount = 0;\n        for (let el of [].slice.call(popupEle.children)) {\n            if (el.classList.contains(CLS_POPPRI) && popPriority && !destroy) {\n                continue;\n            }\n            let elWidth = this.popupEleWidth(el);\n            if (el === this.tbarEle[0]) {\n                elWidth += this.tbarEleMrgn;\n            }\n            el.style.position = '';\n            if (elWidth < width || destroy) {\n                setStyleAttribute(el, { minWidth: '', height: '', minHeight: '' });\n                if (!el.classList.contains(CLS_POPOVERFLOW)) {\n                    el.classList.remove(CLS_POPUP);\n                }\n                index = this.tbarEle.indexOf(el);\n                if (this.tbarAlign) {\n                    let pos = this.items[index].align;\n                    index = this.tbarAlgEle[(pos + 's').toLowerCase()].indexOf(el);\n                    eleSplice = this.tbarAlgEle[(pos + 's').toLowerCase()];\n                    innerEle = this.element.querySelector('.' + CLS_ITEMS + ' .' + 'e-toolbar-' + pos.toLowerCase());\n                }\n                let sepBeforePri = 0;\n                if (this.overflowMode !== 'Extended') {\n                    eleSplice.slice(0, index).forEach((el) => {\n                        if (el.classList.contains(CLS_TBAROVERFLOW) || el.classList.contains(CLS_SEPARATOR)) {\n                            if (el.classList.contains(CLS_SEPARATOR)) {\n                                el.style.display = '';\n                                width -= el.offsetWidth;\n                            }\n                            sepBeforePri++;\n                        }\n                    });\n                }\n                ignoreCount = this.ignoreEleFetch(index, innerEle);\n                if (el.classList.contains(CLS_TBAROVERFLOW)) {\n                    this.tbarPriRef(innerEle, index, sepBeforePri, el, destroy, elWidth, width, ignoreCount);\n                    width -= el.offsetWidth;\n                }\n                else if (index === 0) {\n                    innerEle.insertBefore(el, innerEle.firstChild);\n                    width -= el.offsetWidth;\n                }\n                else {\n                    priEleCnt = selectAll('.' + CLS_TBAROVERFLOW, this.popObj.element).length;\n                    innerEle.insertBefore(el, innerEle.children[(index + ignoreCount) - priEleCnt]);\n                    width -= el.offsetWidth;\n                }\n                el.style.height = '';\n            }\n            else {\n                break;\n            }\n        }\n        checkOverflow = this.checkOverflow(this.element, this.element.getElementsByClassName(CLS_ITEMS)[0]);\n        if (checkOverflow && !destroy) {\n            this.renderOverflowMode();\n        }\n    }\n    removePositioning() {\n        let item = this.element.querySelector('.' + CLS_ITEMS);\n        if (isNullOrUndefined(item) || !item.classList.contains(CLS_TBARPOS)) {\n            return;\n        }\n        this.remove(item, CLS_TBARPOS);\n        let innerItem = [].slice.call(item.childNodes);\n        innerItem[1].removeAttribute('style');\n        innerItem[2].removeAttribute('style');\n    }\n    refreshPositioning() {\n        let item = this.element.querySelector('.' + CLS_ITEMS);\n        this.add(item, CLS_TBARPOS);\n        this.itemPositioning();\n    }\n    itemPositioning() {\n        let item = this.element.querySelector('.' + CLS_ITEMS);\n        let margin;\n        if (isNullOrUndefined(item) || !item.classList.contains(CLS_TBARPOS)) {\n            return;\n        }\n        let popupNav = this.element.querySelector('.' + CLS_TBARNAV);\n        let innerItem;\n        if (this.scrollModule) {\n            let trgClass = (this.isVertical) ? CLS_VSCROLLCNT : CLS_HSCROLLCNT;\n            innerItem = [].slice.call(item.querySelector('.' + trgClass).children);\n        }\n        else {\n            innerItem = [].slice.call(item.childNodes);\n        }\n        if (this.isVertical) {\n            margin = innerItem[0].offsetHeight + innerItem[2].offsetHeight;\n        }\n        else {\n            margin = innerItem[0].offsetWidth + innerItem[2].offsetWidth;\n        }\n        let tbarWid = this.isVertical ? this.element.offsetHeight : this.element.offsetWidth;\n        if (popupNav) {\n            tbarWid -= (this.isVertical ? popupNav.offsetHeight : popupNav.offsetWidth);\n            let popWid = (this.isVertical ? popupNav.offsetHeight : popupNav.offsetWidth) + 'px';\n            innerItem[2].removeAttribute('style');\n            if (this.isVertical) {\n                this.enableRtl ? innerItem[2].style.top = popWid : innerItem[2].style.bottom = popWid;\n            }\n            else {\n                this.enableRtl ? innerItem[2].style.left = popWid : innerItem[2].style.right = popWid;\n            }\n        }\n        if (tbarWid <= margin) {\n            return;\n        }\n        let value = (((tbarWid - margin)) - (!this.isVertical ? innerItem[1].offsetWidth : innerItem[1].offsetHeight)) / 2;\n        innerItem[1].removeAttribute('style');\n        let mrgn = ((!this.isVertical ? innerItem[0].offsetWidth : innerItem[0].offsetHeight) + value) + 'px';\n        if (this.isVertical) {\n            this.enableRtl ? innerItem[1].style.marginBottom = mrgn : innerItem[1].style.marginTop = mrgn;\n        }\n        else {\n            this.enableRtl ? innerItem[1].style.marginRight = mrgn : innerItem[1].style.marginLeft = mrgn;\n        }\n    }\n    tbarItemAlign(item, itemEle, pos) {\n        if (item.showAlwaysInPopup && item.overflow !== 'Show') {\n            return;\n        }\n        let alignDiv = [];\n        alignDiv.push(this.createElement('div', { className: CLS_TBARLEFT }));\n        alignDiv.push(this.createElement('div', { className: CLS_TBARCENTER }));\n        alignDiv.push(this.createElement('div', { className: CLS_TBARRIGHT }));\n        if (pos === 0 && item.align !== 'Left') {\n            alignDiv.forEach((ele) => {\n                itemEle.appendChild(ele);\n            });\n            this.tbarAlign = true;\n            this.add(itemEle, CLS_TBARPOS);\n        }\n        else if (item.align !== 'Left') {\n            let alignEle = itemEle.childNodes;\n            let leftAlign = alignDiv[0];\n            [].slice.call(alignEle).forEach((el) => {\n                this.tbarAlgEle.lefts.push(el);\n                leftAlign.appendChild(el);\n            });\n            itemEle.appendChild(leftAlign);\n            itemEle.appendChild(alignDiv[1]);\n            itemEle.appendChild(alignDiv[2]);\n            this.tbarAlign = true;\n            this.add(itemEle, CLS_TBARPOS);\n        }\n    }\n    ctrlTemplate() {\n        this.ctrlTem = this.trgtEle.cloneNode(true);\n        this.add(this.trgtEle, CLS_ITEMS);\n        this.tbarEle = [];\n        let innerEle = [].slice.call(this.trgtEle.children);\n        innerEle.forEach((ele) => {\n            if (ele.tagName === 'DIV') {\n                this.tbarEle.push(ele);\n                ele.setAttribute('aria-disabled', 'false');\n                this.add(ele, CLS_ITEM);\n            }\n        });\n    }\n    renderItems() {\n        let ele = this.element;\n        let items = this.items;\n        if (this.trgtEle != null) {\n            this.ctrlTemplate();\n        }\n        else if (ele && items.length > 0) {\n            let itemEleDom;\n            if (ele && ele.children.length > 0) {\n                itemEleDom = ele.querySelector('.' + CLS_ITEMS);\n            }\n            if (!itemEleDom) {\n                itemEleDom = this.createElement('div', { className: CLS_ITEMS });\n            }\n            this.itemsAlign(items, itemEleDom);\n            ele.appendChild(itemEleDom);\n        }\n    }\n    setAttr(attr, element) {\n        let key = Object.keys(attr);\n        let keyVal;\n        for (let i = 0; i < key.length; i++) {\n            keyVal = key[i];\n            keyVal === 'class' ? this.add(element, attr[keyVal]) : element.setAttribute(keyVal, attr[keyVal]);\n        }\n    }\n    /**\n     * Enables or disables the specified Toolbar item.\n     * @param  {number|HTMLElement|NodeList} items - DOM element or an array of items to be enabled or disabled.\n     * @param  {boolean} isEnable  - Boolean value that determines whether the command should be enabled or disabled.\n     * By default, `isEnable` is set to true.\n     * @returns void.\n     */\n    enableItems(items, isEnable) {\n        let elements = items;\n        let len = elements.length;\n        let ele;\n        if (isNullOrUndefined(isEnable)) {\n            isEnable = true;\n        }\n        let enable = (isEnable, ele) => {\n            if (isEnable) {\n                ele.classList.remove(CLS_DISABLE$2);\n                ele.setAttribute('aria-disabled', 'false');\n            }\n            else {\n                ele.classList.add(CLS_DISABLE$2);\n                ele.setAttribute('aria-disabled', 'true');\n            }\n        };\n        if (!isNullOrUndefined(len) && len >= 1) {\n            for (let a = 0, element = [].slice.call(elements); a < len; a++) {\n                let itemElement = element[a];\n                if (typeof (itemElement) === 'number') {\n                    ele = this.getElementByIndex(itemElement);\n                    if (isNullOrUndefined(ele)) {\n                        return;\n                    }\n                    else {\n                        elements[a] = ele;\n                    }\n                }\n                else {\n                    ele = itemElement;\n                }\n                enable(isEnable, ele);\n            }\n            isEnable ? removeClass(elements, CLS_DISABLE$2) : addClass(elements, CLS_DISABLE$2);\n        }\n        else {\n            if (typeof (elements) === 'number') {\n                ele = this.getElementByIndex(elements);\n                if (isNullOrUndefined(ele)) {\n                    return;\n                }\n            }\n            else {\n                ele = items;\n            }\n            enable(isEnable, ele);\n        }\n    }\n    getElementByIndex(index) {\n        if (this.tbarEle[index]) {\n            return this.tbarEle[index];\n        }\n        return null;\n    }\n    /**\n     * Adds new items to the Toolbar that accepts an array as Toolbar items.\n     * @param  {ItemsModel[]} items - DOM element or an array of items to be added to the Toolbar.\n     * @param  {number} index - Number value that determines where the command is to be added. By default, index is 0.\n     * @returns void.\n     * @deprecated\n     */\n    addItems(items, index) {\n        let innerItems;\n        this.extendedOpen();\n        let itemsDiv = this.element.querySelector('.' + CLS_ITEMS);\n        if (isNullOrUndefined(itemsDiv)) {\n            this.itemsRerender(items);\n            return;\n        }\n        let innerEle;\n        let itemAgn = 'Left';\n        if (isNullOrUndefined(index)) {\n            index = 0;\n        }\n        items.forEach((e) => {\n            if (!isNullOrUndefined(e.align) && e.align !== 'Left' && itemAgn === 'Left') {\n                itemAgn = e.align;\n            }\n        });\n        for (let item of items) {\n            if (isNullOrUndefined(item.type)) {\n                item.type = 'Button';\n            }\n            innerItems = selectAll('.' + CLS_ITEM, this.element);\n            item.align = itemAgn;\n            innerEle = this.renderSubComponent(item, index);\n            if (this.tbarEle.length >= index && innerItems.length >= 0) {\n                if (isNullOrUndefined(this.scrollModule)) {\n                    this.destroyMode();\n                }\n                let algIndex = item.align[0] === 'L' ? 0 : item.align[0] === 'C' ? 1 : 2;\n                let ele;\n                if (!this.tbarAlign && itemAgn !== 'Left') {\n                    this.tbarItemAlign(item, itemsDiv, 1);\n                    this.tbarAlign = true;\n                    ele = closest(innerItems[0], '.' + CLS_ITEMS).children[algIndex];\n                    ele.appendChild(innerEle);\n                    this.tbarAlgEle[(item.align + 's').toLowerCase()].push(innerEle);\n                    this.refreshPositioning();\n                }\n                else if (this.tbarAlign) {\n                    ele = closest(innerItems[0], '.' + CLS_ITEMS).children[algIndex];\n                    ele.insertBefore(innerEle, ele.children[index]);\n                    this.tbarAlgEle[(item.align + 's').toLowerCase()].splice(index, 0, innerEle);\n                    this.refreshPositioning();\n                }\n                else if (innerItems.length === 0) {\n                    innerItems = selectAll('.' + CLS_ITEMS, this.element);\n                    innerItems[0].appendChild(innerEle);\n                }\n                else {\n                    innerItems[0].parentNode.insertBefore(innerEle, innerItems[index]);\n                }\n                this.items.splice(index, 0, item);\n                this.tbarEle.splice(index, 0, innerEle);\n                index++;\n                this.offsetWid = itemsDiv.offsetWidth;\n            }\n        }\n        itemsDiv.style.width = '';\n        this.renderOverflowMode();\n        // tslint:disable-next-line:no-any\n        if (this.isReact) {\n            this.renderReactTemplates();\n        }\n    }\n    /**\n     * Removes the items from the Toolbar. Acceptable arguments are index of item/HTMLElement/node list.\n     * @param  {number|HTMLElement|NodeList|HTMLElement[]} args\n     * Index or DOM element or an Array of item which is to be removed from the Toolbar.\n     * @returns void.\n     * @deprecated\n     */\n    removeItems(args) {\n        let elements = args;\n        let index;\n        let innerItems = [].slice.call(selectAll('.' + CLS_ITEM, this.element));\n        if (typeof (elements) === 'number') {\n            index = parseInt(args.toString(), 10);\n            this.removeItemByIndex(index, innerItems);\n        }\n        else {\n            if (elements && elements.length > 1) {\n                for (let ele of [].slice.call(elements)) {\n                    index = this.tbarEle.indexOf(ele);\n                    this.removeItemByIndex(index, innerItems);\n                    innerItems = selectAll('.' + CLS_ITEM, this.element);\n                }\n            }\n            else {\n                let ele = (elements && elements.length && elements.length === 1) ? elements[0] : args;\n                index = innerItems.indexOf(ele);\n                this.removeItemByIndex(index, innerItems);\n            }\n        }\n        this.resize();\n    }\n    removeItemByIndex(index, innerItems) {\n        if (this.tbarEle[index] && innerItems[index]) {\n            let eleIdx = this.tbarEle.indexOf(innerItems[index]);\n            if (this.tbarAlign) {\n                let indexAgn;\n                indexAgn = this.tbarAlgEle[(this.items[eleIdx].align + 's').toLowerCase()].indexOf(this.tbarEle[eleIdx]);\n                this.tbarAlgEle[(this.items[eleIdx].align + 's').toLowerCase()].splice(indexAgn, 1);\n            }\n            // tslint:disable-next-line:no-any\n            if (this.isReact) {\n                this.clearTemplate();\n            }\n            detach(innerItems[index]);\n            this.items.splice(eleIdx, 1);\n            this.tbarEle.splice(eleIdx, 1);\n        }\n    }\n    templateRender(templateProp, innerEle, item, index) {\n        let itemType = item.type;\n        let eleObj = templateProp;\n        let isComponent;\n        if (typeof (templateProp) === 'object') {\n            isComponent = typeof (eleObj.appendTo) === 'function';\n        }\n        if (typeof (templateProp) === 'string' || !isComponent) {\n            let templateFn;\n            let val = templateProp;\n            val = (typeof (templateProp) === 'string') ? templateProp.trim() : templateProp;\n            try {\n                if (typeof (templateProp) === 'object' && !isNullOrUndefined(templateProp.tagName)) {\n                    innerEle.appendChild(templateProp);\n                }\n                else if (document.querySelectorAll(val).length) {\n                    let ele = document.querySelector(val);\n                    let tempStr = ele.outerHTML.trim();\n                    innerEle.appendChild(ele);\n                    ele.style.display = '';\n                    if (!isNullOrUndefined(tempStr)) {\n                        this.tempId.push(val);\n                    }\n                }\n            }\n            catch (e) {\n                templateFn = compile(val);\n            }\n            let tempArray;\n            if (!isNullOrUndefined(templateFn)) {\n                let toolbarTemplateID = this.element.id + index + '_template';\n                tempArray = templateFn({}, this, 'template', toolbarTemplateID, this.isStringTemplate);\n            }\n            if (!isNullOrUndefined(tempArray) && tempArray.length > 0) {\n                [].slice.call(tempArray).forEach((ele) => {\n                    if (!isNullOrUndefined(ele.tagName)) {\n                        ele.style.display = '';\n                    }\n                    innerEle.appendChild(ele);\n                });\n            }\n        }\n        else if (itemType === 'Input') {\n            let ele = this.createElement('input');\n            item.id ? (ele.id = item.id) : (ele.id = getUniqueID('tbr-ipt'));\n            innerEle.appendChild(ele);\n            eleObj.appendTo(ele);\n        }\n        this.add(innerEle, CLS_TEMPLATE);\n        this.tbarEle.push(innerEle);\n    }\n    buttonRendering(item, innerEle) {\n        let dom = this.createElement('button', { className: CLS_TBARBTN });\n        dom.setAttribute('type', 'button');\n        let textStr = item.text;\n        let iconCss;\n        let iconPos;\n        item.id ? (dom.id = item.id) : dom.id = getUniqueID('e-tbr-btn');\n        let btnTxt = this.createElement('span', { className: 'e-tbar-btn-text' });\n        if (textStr) {\n            btnTxt.innerHTML = this.enableHtmlSanitizer ? SanitizeHtmlHelper.sanitize(textStr) : textStr;\n            dom.appendChild(btnTxt);\n            dom.classList.add('e-tbtn-txt');\n        }\n        else {\n            this.add(innerEle, 'e-tbtn-align');\n        }\n        if (item.prefixIcon || item.suffixIcon) {\n            if ((item.prefixIcon && item.suffixIcon) || item.prefixIcon) {\n                iconCss = item.prefixIcon + ' e-icons';\n                iconPos = 'Left';\n            }\n            else {\n                iconCss = item.suffixIcon + ' e-icons';\n                iconPos = 'Right';\n            }\n        }\n        let btnObj = new Button({ iconCss: iconCss, iconPosition: iconPos });\n        btnObj.createElement = this.createElement;\n        btnObj.appendTo(dom);\n        if (item.width) {\n            setStyleAttribute(dom, { 'width': formatUnit(item.width) });\n        }\n        return dom;\n    }\n    renderSubComponent(item, index) {\n        let innerEle;\n        let dom;\n        innerEle = this.createElement('div', { className: CLS_ITEM });\n        innerEle.setAttribute('aria-disabled', 'false');\n        let tempDom = this.createElement('div', {\n            innerHTML: this.enableHtmlSanitizer ? SanitizeHtmlHelper.sanitize(item.tooltipText) : item.tooltipText\n        });\n        if (!this.tbarEle) {\n            this.tbarEle = [];\n        }\n        if (item.htmlAttributes) {\n            this.setAttr(item.htmlAttributes, innerEle);\n        }\n        if (item.tooltipText) {\n            innerEle.setAttribute('title', tempDom.textContent);\n        }\n        if (item.cssClass) {\n            innerEle.className = innerEle.className + ' ' + item.cssClass;\n        }\n        if (item.template) {\n            this.templateRender(item.template, innerEle, item, index);\n        }\n        else {\n            switch (item.type) {\n                case 'Button':\n                    dom = this.buttonRendering(item, innerEle);\n                    dom.setAttribute('tabindex', '-1');\n                    dom.setAttribute('aria-label', (item.text || item.tooltipText));\n                    innerEle.appendChild(dom);\n                    innerEle.addEventListener('click', this.itemClick.bind(this));\n                    break;\n                case 'Separator':\n                    this.add(innerEle, CLS_SEPARATOR);\n                    break;\n            }\n        }\n        if (item.showTextOn) {\n            let sTxt = item.showTextOn;\n            if (sTxt === 'Toolbar') {\n                this.add(innerEle, CLS_POPUPTEXT);\n                this.add(innerEle, 'e-tbtn-align');\n            }\n            else if (sTxt === 'Overflow') {\n                this.add(innerEle, CLS_TBARTEXT);\n            }\n        }\n        if (item.overflow) {\n            let overflow = item.overflow;\n            if (overflow === 'Show') {\n                this.add(innerEle, CLS_TBAROVERFLOW);\n            }\n            else if (overflow === 'Hide') {\n                if (!innerEle.classList.contains(CLS_SEPARATOR)) {\n                    this.add(innerEle, CLS_POPOVERFLOW);\n                }\n            }\n        }\n        if (item.overflow !== 'Show' && item.showAlwaysInPopup && !innerEle.classList.contains(CLS_SEPARATOR)) {\n            this.add(innerEle, CLS_POPPRI);\n            this.popupPriCount++;\n        }\n        if (item.disabled) {\n            this.add(innerEle, CLS_DISABLE$2);\n        }\n        if (item.visible === false) {\n            this.add(innerEle, CLS_HIDDEN);\n        }\n        return innerEle;\n    }\n    itemClick(e) {\n        this.activeEleSwitch(e.currentTarget);\n    }\n    activeEleSwitch(ele) {\n        this.activeEleRemove(ele.firstElementChild);\n        this.activeEle.focus();\n    }\n    activeEleRemove(curEle) {\n        if (!isNullOrUndefined(this.activeEle)) {\n            this.activeEle.setAttribute('tabindex', '-1');\n        }\n        this.activeEle = curEle;\n        if (isNullOrUndefined(this.trgtEle) && !curEle.parentElement.classList.contains(CLS_TEMPLATE)) {\n            curEle.removeAttribute('tabindex');\n        }\n        else {\n            this.activeEle.setAttribute('tabindex', '0');\n        }\n    }\n    getPersistData() {\n        return this.addOnPersist([]);\n    }\n    /**\n     * Returns the current module name.\n     * @returns string\n     * @private\n     */\n    getModuleName() {\n        return 'toolbar';\n    }\n    itemsRerender(newProp) {\n        this.items = this.tbarItemsCol;\n        // tslint:disable-next-line:no-any\n        if (this.isReact) {\n            this.clearTemplate();\n        }\n        this.destroyMode();\n        this.destroyItems();\n        this.items = newProp;\n        this.tbarItemsCol = this.items;\n        this.renderItems();\n        this.renderOverflowMode();\n        // tslint:disable-next-line:no-any\n        if (this.isReact) {\n            this.renderReactTemplates();\n        }\n    }\n    resize() {\n        let ele = this.element;\n        this.tbResize = true;\n        if (this.tbarAlign) {\n            this.itemPositioning();\n        }\n        if (this.popObj && this.overflowMode === 'Popup') {\n            this.popObj.hide();\n        }\n        let checkOverflow = this.checkOverflow(ele, ele.getElementsByClassName(CLS_ITEMS)[0]);\n        if (!checkOverflow) {\n            this.destroyScroll();\n            let multirowele = ele.querySelector('.' + CLS_ITEMS);\n            if (!isNullOrUndefined(multirowele)) {\n                this.remove(multirowele, CLS_MULTIROWPOS);\n                if (this.tbarAlign) {\n                    this.add(multirowele, CLS_TBARPOS);\n                }\n            }\n        }\n        if (checkOverflow && this.scrollModule && (this.offsetWid === ele.offsetWidth)) {\n            return;\n        }\n        if (this.offsetWid > ele.offsetWidth || checkOverflow) {\n            this.renderOverflowMode();\n        }\n        if (this.popObj) {\n            if (this.overflowMode === 'Extended') {\n                let eleStyles = window.getComputedStyle(this.element);\n                this.popObj.width = parseFloat(eleStyles.width) + ((parseFloat(eleStyles.borderRightWidth)) * 2);\n            }\n            if (this.tbarAlign) {\n                this.removePositioning();\n            }\n            this.popupRefresh(this.popObj.element, false);\n            if (this.tbarAlign) {\n                this.refreshPositioning();\n            }\n        }\n        if (this.element.querySelector('.' + CLS_HSCROLLBAR$1)) {\n            this.scrollStep = this.element.querySelector('.' + CLS_HSCROLLBAR$1).offsetWidth;\n        }\n        this.offsetWid = ele.offsetWidth;\n        this.tbResize = false;\n        this.separator();\n    }\n    extendedOpen() {\n        let sib = this.element.querySelector('.' + CLS_EXTENDABLECLASS);\n        if (this.overflowMode === 'Extended' && sib) {\n            this.isExtendedOpen = sib.classList.contains(CLS_POPUPOPEN);\n        }\n    }\n    /**\n     * Gets called when the model property changes.The data that describes the old and new values of the property that changed.\n     * @param  {ToolbarModel} newProp\n     * @param  {ToolbarModel} oldProp\n     * @returns void\n     * @private\n     */\n    onPropertyChanged(newProp, oldProp) {\n        let tEle = this.element;\n        this.extendedOpen();\n        for (let prop of Object.keys(newProp)) {\n            switch (prop) {\n                case 'items':\n                    if (!(newProp.items instanceof Array && oldProp.items instanceof Array) && !this.isServerRendered) {\n                        let changedProb = Object.keys(newProp.items);\n                        for (let i = 0; i < changedProb.length; i++) {\n                            let index = parseInt(Object.keys(newProp.items)[i], 10);\n                            let property = Object.keys(newProp.items[index])[0];\n                            let newProperty = Object(newProp.items[index])[property];\n                            if (this.tbarAlign || property === 'align') {\n                                this.refresh();\n                                this.trigger('created');\n                                break;\n                            }\n                            let popupPriCheck = property === 'showAlwaysInPopup' && !newProperty;\n                            let booleanCheck = property === 'overflow' && this.popupPriCount !== 0;\n                            if ((popupPriCheck) || (this.items[index].showAlwaysInPopup) && booleanCheck) {\n                                --this.popupPriCount;\n                            }\n                            if (isNullOrUndefined(this.scrollModule)) {\n                                this.destroyMode();\n                            }\n                            let itemCol = [].slice.call(selectAll('.' + CLS_ITEMS + ' .' + CLS_ITEM, tEle));\n                            // tslint:disable-next-line:no-any\n                            if (this.isReact) {\n                                this.clearTemplate();\n                            }\n                            detach(itemCol[index]);\n                            this.tbarEle.splice(index, 1);\n                            this.addItems([this.items[index]], index);\n                            this.items.splice(index, 1);\n                            if (this.items[index].template) {\n                                this.tbarEle.splice(this.items.length, 1);\n                            }\n                        }\n                    }\n                    else if (isBlazor() && this.isServerRendered) {\n                        this.serverItemsRerender();\n                        this.notify('onItemsChanged', {});\n                    }\n                    else {\n                        this.itemsRerender(newProp.items);\n                    }\n                    break;\n                case 'width':\n                    let wid = tEle.offsetWidth;\n                    setStyleAttribute(tEle, { 'width': formatUnit(newProp.width) });\n                    this.renderOverflowMode();\n                    if (this.popObj && wid < tEle.offsetWidth) {\n                        this.popupRefresh(this.popObj.element, false);\n                    }\n                    break;\n                case 'height':\n                    setStyleAttribute(this.element, { 'height': formatUnit(newProp.height) });\n                    break;\n                case 'overflowMode':\n                    this.destroyMode();\n                    this.renderOverflowMode();\n                    if (this.enableRtl) {\n                        this.add(tEle, CLS_RTL$2);\n                    }\n                    this.refreshOverflow();\n                    break;\n                case 'enableRtl':\n                    newProp.enableRtl ? this.add(tEle, CLS_RTL$2) : this.remove(tEle, CLS_RTL$2);\n                    if (!isNullOrUndefined(this.scrollModule)) {\n                        newProp.enableRtl ? this.add(this.scrollModule.element, CLS_RTL$2) : this.remove(this.scrollModule.element, CLS_RTL$2);\n                    }\n                    if (!isNullOrUndefined(this.popObj)) {\n                        newProp.enableRtl ? this.add(this.popObj.element, CLS_RTL$2) : this.remove(this.popObj.element, CLS_RTL$2);\n                    }\n                    if (this.tbarAlign) {\n                        this.itemPositioning();\n                    }\n                    break;\n                case 'scrollStep':\n                    if (this.scrollModule) {\n                        this.scrollModule.scrollStep = this.scrollStep;\n                    }\n                    break;\n                case 'enableCollision':\n                    if (this.popObj) {\n                        this.popObj.collision = { Y: this.enableCollision ? 'flip' : 'none' };\n                    }\n                    break;\n                case 'cssClass':\n                    if (oldProp.cssClass) {\n                        removeClass([this.element], oldProp.cssClass.split(' '));\n                    }\n                    if (newProp.cssClass) {\n                        addClass([this.element], newProp.cssClass.split(' '));\n                    }\n                    break;\n                case 'allowKeyboard':\n                    this.unwireKeyboardEvent();\n                    if (newProp.allowKeyboard) {\n                        this.wireKeyboardEvent();\n                    }\n                    break;\n            }\n        }\n    }\n    /**\n     * Shows or hides the Toolbar item that is in the specified index.\n     * @param  {number | HTMLElement} index - Index value of target item or DOM element  of items to be hidden or shown.\n     * @param  {boolean} value - Based on this Boolean value, item will be hide (true) or show (false). By default, value is false.\n     * @returns void.\n     */\n    hideItem(index, value) {\n        let isElement = (typeof (index) === 'object') ? true : false;\n        let eleIndex = index;\n        let initIndex;\n        let ele;\n        let innerItems = [].slice.call(selectAll('.' + CLS_ITEM, this.element));\n        if (isElement) {\n            ele = index;\n        }\n        else if (this.tbarEle[eleIndex]) {\n            let innerItems = [].slice.call(selectAll('.' + CLS_ITEM, this.element));\n            ele = innerItems[eleIndex];\n        }\n        if (ele) {\n            value ? ele.classList.add(CLS_HIDDEN) : ele.classList.remove(CLS_HIDDEN);\n            if (value && isNullOrUndefined(this.element.getAttribute('tabindex')) && !ele.classList.contains(CLS_SEPARATOR)) {\n                if (isNullOrUndefined(ele.firstElementChild.getAttribute('tabindex'))) {\n                    ele.firstElementChild.setAttribute('tabindex', '-1');\n                    let innerItems = [].slice.call(selectAll('.' + CLS_ITEM, this.element));\n                    if (isElement) {\n                        eleIndex = innerItems.indexOf(ele);\n                    }\n                    let nextEle = innerItems[++eleIndex];\n                    while (nextEle) {\n                        let skipEle = this.eleContains(nextEle);\n                        if (!skipEle) {\n                            nextEle.firstElementChild.removeAttribute('tabindex');\n                            break;\n                        }\n                        nextEle = innerItems[++eleIndex];\n                    }\n                }\n            }\n            else if (isNullOrUndefined(this.element.getAttribute('tabindex')) && !ele.classList.contains(CLS_SEPARATOR)) {\n                initIndex = 0;\n                let setFlag = false;\n                let removeFlag = false;\n                let initELe = innerItems[initIndex];\n                while (initELe) {\n                    if (!initELe.classList.contains(CLS_SEPARATOR)) {\n                        if (isNullOrUndefined(initELe.firstElementChild.getAttribute('tabindex'))) {\n                            initELe.firstElementChild.setAttribute('tabindex', '-1');\n                            setFlag = true;\n                        }\n                        else {\n                            if (setFlag && removeFlag) {\n                                break;\n                            }\n                            let skipEle = this.eleContains(initELe);\n                            if (!skipEle) {\n                                initELe.firstElementChild.removeAttribute('tabindex');\n                                removeFlag = true;\n                            }\n                            initELe = innerItems[++initIndex];\n                        }\n                    }\n                    else {\n                        initELe = innerItems[++initIndex];\n                    }\n                }\n            }\n            this.refreshOverflow();\n        }\n    }\n};\n__decorate$3([\n    Collection([], Item)\n], Toolbar.prototype, \"items\", void 0);\n__decorate$3([\n    Property('auto')\n], Toolbar.prototype, \"width\", void 0);\n__decorate$3([\n    Property('auto')\n], Toolbar.prototype, \"height\", void 0);\n__decorate$3([\n    Property('')\n], Toolbar.prototype, \"cssClass\", void 0);\n__decorate$3([\n    Property('Scrollable')\n], Toolbar.prototype, \"overflowMode\", void 0);\n__decorate$3([\n    Property()\n], Toolbar.prototype, \"scrollStep\", void 0);\n__decorate$3([\n    Property(true)\n], Toolbar.prototype, \"enableCollision\", void 0);\n__decorate$3([\n    Property(true)\n], Toolbar.prototype, \"enableHtmlSanitizer\", void 0);\n__decorate$3([\n    Property(true)\n], Toolbar.prototype, \"allowKeyboard\", void 0);\n__decorate$3([\n    Event()\n], Toolbar.prototype, \"clicked\", void 0);\n__decorate$3([\n    Event()\n], Toolbar.prototype, \"created\", void 0);\n__decorate$3([\n    Event()\n], Toolbar.prototype, \"destroyed\", void 0);\n__decorate$3([\n    Event()\n], Toolbar.prototype, \"beforeCreate\", void 0);\nToolbar = __decorate$3([\n    NotifyPropertyChanges\n], Toolbar);\n\n/**\n * Toolbar modules\n */\n\nvar __decorate$4 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nconst CLS_ACRDN_ROOT = 'e-acrdn-root';\nconst CLS_ROOT$2 = 'e-accordion';\nconst CLS_ITEM$1 = 'e-acrdn-item';\nconst CLS_ITEMFOCUS = 'e-item-focus';\nconst CLS_ITEMHIDE = 'e-hide';\nconst CLS_HEADER = 'e-acrdn-header';\nconst CLS_HEADERICN = 'e-acrdn-header-icon';\nconst CLS_HEADERCTN = 'e-acrdn-header-content';\nconst CLS_CONTENT = 'e-acrdn-panel';\nconst CLS_CTENT = 'e-acrdn-content';\nconst CLS_TOOGLEICN = 'e-toggle-icon';\nconst CLS_COLLAPSEICN = 'e-tgl-collapse-icon e-icons';\nconst CLS_EXPANDICN = 'e-expand-icon';\nconst CLS_RTL$3 = 'e-rtl';\nconst CLS_CTNHIDE = 'e-content-hide';\nconst CLS_SLCT = 'e-select';\nconst CLS_SLCTED = 'e-selected';\nconst CLS_ACTIVE = 'e-active';\nconst CLS_ANIMATE = 'e-animate';\nconst CLS_DISABLE$3 = 'e-overlay';\nconst CLS_TOGANIMATE = 'e-toggle-animation';\nconst CLS_NEST = 'e-nested';\nconst CLS_EXPANDSTATE = 'e-expand-state';\nconst CLS_CONTAINER = 'e-accordion-container';\n/**\n * Objects used for configuring the Accordion expanding item action properties.\n */\nclass AccordionActionSettings extends ChildProperty {\n}\n__decorate$4([\n    Property('SlideDown')\n], AccordionActionSettings.prototype, \"effect\", void 0);\n__decorate$4([\n    Property(400)\n], AccordionActionSettings.prototype, \"duration\", void 0);\n__decorate$4([\n    Property('linear')\n], AccordionActionSettings.prototype, \"easing\", void 0);\n/**\n * Objects used for configuring the Accordion animation properties.\n */\nclass AccordionAnimationSettings extends ChildProperty {\n}\n__decorate$4([\n    Complex({ effect: 'SlideUp', duration: 400, easing: 'linear' }, AccordionActionSettings)\n], AccordionAnimationSettings.prototype, \"collapse\", void 0);\n__decorate$4([\n    Complex({ effect: 'SlideDown', duration: 400, easing: 'linear' }, AccordionActionSettings)\n], AccordionAnimationSettings.prototype, \"expand\", void 0);\n/**\n * An item object that is used to configure Accordion items.\n */\nclass AccordionItem extends ChildProperty {\n}\n__decorate$4([\n    Property(null)\n], AccordionItem.prototype, \"content\", void 0);\n__decorate$4([\n    Property(null)\n], AccordionItem.prototype, \"header\", void 0);\n__decorate$4([\n    Property(null)\n], AccordionItem.prototype, \"cssClass\", void 0);\n__decorate$4([\n    Property(null)\n], AccordionItem.prototype, \"iconCss\", void 0);\n__decorate$4([\n    Property(false)\n], AccordionItem.prototype, \"expanded\", void 0);\n__decorate$4([\n    Property(true)\n], AccordionItem.prototype, \"visible\", void 0);\n__decorate$4([\n    Property(false)\n], AccordionItem.prototype, \"disabled\", void 0);\n/**\n * The Accordion is a vertically collapsible content panel that displays one or more panels at a time within the available space.\n * ```html\n * <div id='accordion'/>\n * <script>\n *   var accordionObj = new Accordion();\n *   accordionObj.appendTo('#accordion');\n * </script>\n * ```\n */\nlet Accordion = class Accordion extends Component {\n    /**\n     * Initializes a new instance of the Accordion class.\n     * @param options  - Specifies Accordion model properties as options.\n     * @param element  - Specifies the element that is rendered as an Accordion.\n     */\n    constructor(options, element) {\n        super(options, element);\n        /**\n         * Contains the keyboard configuration of the Accordion.\n         */\n        this.keyConfigs = {\n            moveUp: 'uparrow',\n            moveDown: 'downarrow',\n            enter: 'enter',\n            space: 'space',\n            home: 'home',\n            end: 'end',\n        };\n    }\n    /**\n     * Removes the control from the DOM and also removes all its related events.\n     * @returns void\n     */\n    destroy() {\n        // tslint:disable-next-line:no-any\n        if (this.isReact) {\n            this.clearTemplate();\n        }\n        let ele = this.element;\n        super.destroy();\n        this.unwireEvents();\n        this.isDestroy = true;\n        this.restoreContent(null);\n        [].slice.call(ele.children).forEach((el) => {\n            if (!el.classList.contains('blazor-template')) {\n                ele.removeChild(el);\n            }\n        });\n        if (this.trgtEle) {\n            while (this.ctrlTem.firstElementChild) {\n                ele.appendChild(this.ctrlTem.firstElementChild);\n            }\n        }\n        ele.classList.remove(CLS_ACRDN_ROOT);\n        ele.removeAttribute('style');\n        ['aria-disabled', 'aria-multiselectable', 'role', 'data-ripple'].forEach((attrb) => {\n            this.element.removeAttribute(attrb);\n        });\n        if (!this.isNested && isRippleEnabled) {\n            this.removeRippleEffect();\n        }\n    }\n    preRender() {\n        let nested = closest(this.element, '.' + CLS_CONTENT);\n        this.isNested = false;\n        this.templateEle = [];\n        if (!this.isDestroy) {\n            this.isDestroy = false;\n        }\n        if (!isNullOrUndefined(nested)) {\n            nested.classList.add(CLS_NEST);\n            this.isNested = true;\n        }\n        else {\n            this.element.classList.add(CLS_ACRDN_ROOT);\n        }\n        if (this.enableRtl) {\n            this.add(this.element, CLS_RTL$3);\n        }\n    }\n    add(ele, val) {\n        ele.classList.add(val);\n    }\n    remove(ele, val) {\n        ele.classList.remove(val);\n    }\n    /**\n     * To initialize the control rendering\n     * @private\n     */\n    render() {\n        if (!this.isServerRendered) {\n            this.initializeheaderTemplate();\n            this.initializeItemTemplate();\n            this.initialize();\n            this.renderControl();\n        }\n        else {\n            this.wireFocusEvents();\n        }\n        this.wireEvents();\n        this.renderComplete();\n    }\n    initialize() {\n        let width = formatUnit(this.width);\n        let height = formatUnit(this.height);\n        setStyleAttribute(this.element, { 'width': width, 'height': height });\n        let ariaAttr = {\n            'aria-disabled': 'false', 'role': 'presentation', 'aria-multiselectable': 'true'\n        };\n        if (isNullOrUndefined(this.initExpand)) {\n            this.initExpand = [];\n        }\n        if (this.expandedIndices.length > 0) {\n            this.initExpand = this.expandedIndices;\n        }\n        attributes(this.element, ariaAttr);\n        if (this.expandMode === 'Single') {\n            this.element.setAttribute('aria-multiselectable', 'false');\n        }\n    }\n    renderControl() {\n        this.trgtEle = (this.element.children.length > 0 &&\n            !(isBlazor() && !this.isStringTemplate)) ? select('div', this.element) : null;\n        this.renderItems();\n        this.initItemExpand();\n    }\n    wireFocusEvents() {\n        let acrdItem = [].slice.call(this.element.querySelectorAll('.' + CLS_ITEM$1));\n        for (let item of acrdItem) {\n            let headerEle = item.querySelector('.' + CLS_HEADER);\n            if (item.childElementCount > 0 && headerEle) {\n                EventHandler.clearEvents(headerEle);\n                EventHandler.add(headerEle, 'focus', this.focusIn, this);\n                EventHandler.add(headerEle, 'blur', this.focusOut, this);\n            }\n        }\n    }\n    unwireEvents() {\n        EventHandler.remove(this.element, 'click', this.clickHandler);\n        if (!isNullOrUndefined(this.keyModule)) {\n            this.keyModule.destroy();\n        }\n    }\n    wireEvents() {\n        EventHandler.add(this.element, 'click', this.clickHandler, this);\n        if (!this.isNested && !this.isDestroy) {\n            this.removeRippleEffect = rippleEffect(this.element, { selector: '.' + CLS_HEADER });\n        }\n        if (!this.isNested) {\n            this.keyModule = new KeyboardEvents(this.element, {\n                keyAction: this.keyActionHandler.bind(this),\n                keyConfigs: this.keyConfigs,\n                eventName: 'keydown'\n            });\n        }\n    }\n    templateParser(template) {\n        if (template) {\n            try {\n                if (document.querySelectorAll(template).length) {\n                    return compile(document.querySelector(template).innerHTML.trim());\n                }\n            }\n            catch (error) {\n                return compile(template);\n            }\n        }\n        return undefined;\n    }\n    initializeheaderTemplate() {\n        if (this.headerTemplate) {\n            this.headerTemplateFn = this.templateParser(this.headerTemplate);\n        }\n    }\n    initializeItemTemplate() {\n        if (this.itemTemplate) {\n            this.itemTemplateFn = this.templateParser(this.itemTemplate);\n        }\n    }\n    getheaderTemplate() {\n        return this.headerTemplateFn;\n    }\n    getItemTemplate() {\n        return this.itemTemplateFn;\n    }\n    focusIn(e) {\n        e.target.parentElement.classList.add(CLS_ITEMFOCUS);\n    }\n    focusOut(e) {\n        e.target.parentElement.classList.remove(CLS_ITEMFOCUS);\n    }\n    ctrlTemplate() {\n        this.ctrlTem = this.element.cloneNode(true);\n        let innerEles;\n        let rootEle = select('.' + CLS_CONTAINER, this.element);\n        if (rootEle) {\n            innerEles = rootEle.children;\n        }\n        else {\n            innerEles = this.element.children;\n        }\n        let items = [];\n        /* tslint:disable */\n        [].slice.call(innerEles).forEach((el) => {\n            items.push({\n                header: (el.childElementCount > 0 && el.children[0]) ? (el.children[0]) : '',\n                content: (el.childElementCount > 1 && el.children[1]) ? (el.children[1]) : ''\n            });\n            el.parentNode.removeChild(el);\n        });\n        /* tslint:enable */\n        if (rootEle) {\n            this.element.removeChild(rootEle);\n        }\n        this.setProperties({ items: items }, true);\n    }\n    toggleIconGenerate() {\n        let tglIcon = this.createElement('div', { className: CLS_TOOGLEICN });\n        let hdrColIcon = this.createElement('span', { className: CLS_COLLAPSEICN });\n        tglIcon.appendChild(hdrColIcon);\n        return tglIcon;\n    }\n    initItemExpand() {\n        let len = this.initExpand.length;\n        if (len === 0) {\n            return;\n        }\n        if (this.expandMode === 'Single') {\n            this.expandItem(true, this.initExpand[len - 1]);\n        }\n        else {\n            for (let i = 0; i < len; i++) {\n                this.expandItem(true, this.initExpand[i]);\n            }\n        }\n        // tslint:disable-next-line:no-any\n        if (this.isReact) {\n            this.renderReactTemplates();\n        }\n    }\n    renderItems() {\n        let ele = this.element;\n        let innerItem;\n        let innerDataSourceItem;\n        if (!isNullOrUndefined(this.trgtEle)) {\n            this.ctrlTemplate();\n        }\n        if (this.dataSource.length > 0) {\n            this.dataSource.forEach((item, index) => {\n                innerDataSourceItem = this.renderInnerItem(item, index);\n                ele.appendChild(innerDataSourceItem);\n                if (innerDataSourceItem.childElementCount > 0) {\n                    EventHandler.add(innerDataSourceItem.querySelector('.' + CLS_HEADER), 'focus', this.focusIn, this);\n                    EventHandler.add(innerDataSourceItem.querySelector('.' + CLS_HEADER), 'blur', this.focusOut, this);\n                }\n            });\n        }\n        else {\n            let items = this.items;\n            if (ele && items.length > 0) {\n                items.forEach((item, index) => {\n                    innerItem = this.renderInnerItem(item, index);\n                    ele.appendChild(innerItem);\n                    if (innerItem.childElementCount > 0) {\n                        EventHandler.add(innerItem.querySelector('.' + CLS_HEADER), 'focus', this.focusIn, this);\n                        EventHandler.add(innerItem.querySelector('.' + CLS_HEADER), 'blur', this.focusOut, this);\n                    }\n                });\n            }\n        }\n        // tslint:disable-next-line:no-any\n        if (this.isReact) {\n            this.renderReactTemplates();\n        }\n    }\n    clickHandler(e) {\n        let trgt = e.target;\n        let items = this.getItems();\n        let eventArgs = {};\n        let index;\n        let tglIcon;\n        let acrdEle = closest(trgt, '.' + CLS_ROOT$2);\n        if (acrdEle !== this.element) {\n            return;\n        }\n        trgt.classList.add('e-target');\n        let acrdnItem = closest(trgt, '.' + CLS_ITEM$1);\n        let acrdnHdr = closest(trgt, '.' + CLS_HEADER);\n        let acrdnCtn = closest(trgt, '.' + CLS_CONTENT);\n        if (acrdnItem && (isNullOrUndefined(acrdnHdr) || isNullOrUndefined(acrdnCtn))) {\n            acrdnHdr = acrdnItem.children[0];\n            acrdnCtn = acrdnItem.children[1];\n        }\n        if (acrdnHdr) {\n            tglIcon = select('.' + CLS_TOOGLEICN, acrdnHdr);\n        }\n        let acrdnCtnItem;\n        if (acrdnHdr) {\n            acrdnCtnItem = closest(acrdnHdr, '.' + CLS_ITEM$1);\n        }\n        else if (acrdnCtn) {\n            acrdnCtnItem = closest(acrdnCtn, '.' + CLS_ITEM$1);\n        }\n        index = this.getIndexByItem(acrdnItem);\n        if (acrdnCtnItem) {\n            eventArgs.item = items[this.getIndexByItem(acrdnCtnItem)];\n        }\n        eventArgs.originalEvent = e;\n        let ctnCheck = !isNullOrUndefined(tglIcon) && acrdnItem.childElementCount <= 1;\n        if (ctnCheck && (isNullOrUndefined(acrdnCtn) || !isNullOrUndefined(select('.' + CLS_HEADER + ' .' + CLS_TOOGLEICN, acrdnCtnItem)))) {\n            if (!this.isServerRendered) {\n                acrdnItem.appendChild(this.contentRendering(index));\n                this.ariaAttrUpdate(acrdnItem);\n                this.afterContentRender(trgt, eventArgs, acrdnItem, acrdnHdr, acrdnCtn, acrdnCtnItem);\n            }\n            else {\n                let id = acrdnItem.id;\n                if (this.items.length > 0) {\n                    // tslint:disable-next-line:no-any\n                    this.interopAdaptor.invokeMethodAsync('OnItemClick', index).then(() => {\n                        if (this.isDestroyed) {\n                            return;\n                        }\n                        this.afterContentRender(trgt, eventArgs, acrdnItem, acrdnHdr, acrdnCtn, acrdnCtnItem);\n                    });\n                }\n                else {\n                    // tslint:disable-next-line:no-any\n                    this.interopAdaptor.invokeMethodAsync('OnDataClick', id).then(() => {\n                        if (this.isDestroyed) {\n                            return;\n                        }\n                        this.afterContentRender(trgt, eventArgs, acrdnItem, acrdnHdr, acrdnCtn, acrdnCtnItem);\n                    });\n                }\n            }\n        }\n        else {\n            this.afterContentRender(trgt, eventArgs, acrdnItem, acrdnHdr, acrdnCtn, acrdnCtnItem);\n        }\n        // tslint:disable-next-line:no-any\n        if (this.isReact) {\n            this.renderReactTemplates();\n        }\n    }\n    afterContentRender(trgt, eventArgs, acrdnItem, acrdnHdr, acrdnCtn, acrdnCtnItem) {\n        let acrdActive = [];\n        this.trigger('clicked', eventArgs);\n        let cntclkCheck = (acrdnCtn && !isNullOrUndefined(select('.e-target', acrdnCtn)));\n        let inlineAcrdnSel = '.' + CLS_CONTENT + ' .' + CLS_ROOT$2;\n        let inlineEleAcrdn = acrdnCtn && !isNullOrUndefined(select('.' + CLS_ROOT$2, acrdnCtn)) && isNullOrUndefined(closest(trgt, inlineAcrdnSel));\n        let nestContCheck = acrdnCtn && isNullOrUndefined(select('.' + CLS_ROOT$2, acrdnCtn)) || !(closest(trgt, '.' + CLS_ROOT$2) === this.element);\n        cntclkCheck = cntclkCheck && (inlineEleAcrdn || nestContCheck);\n        trgt.classList.remove('e-target');\n        if (trgt.classList.contains(CLS_CONTENT) || trgt.classList.contains(CLS_CTENT) || cntclkCheck) {\n            return;\n        }\n        let acrdcontainer = this.element.querySelector('.' + CLS_CONTAINER);\n        let acrdnchild = (acrdcontainer) ? acrdcontainer.children : this.element.children;\n        [].slice.call(acrdnchild).forEach((el) => {\n            if (el.classList.contains(CLS_ACTIVE)) {\n                acrdActive.push(el);\n            }\n        });\n        let acrdAniEle = [].slice.call(this.element.querySelectorAll('.' + CLS_ITEM$1 + ' [' + CLS_ANIMATE + ']'));\n        if (acrdAniEle.length > 0) {\n            for (let el of acrdAniEle) {\n                acrdActive.push(el.parentElement);\n            }\n        }\n        let sameContentCheck = acrdActive.indexOf(acrdnCtnItem) !== -1 && acrdnCtn.getAttribute('e-animate') === 'true';\n        let sameHeader = false;\n        if (!isNullOrUndefined(acrdnItem) && !isNullOrUndefined(acrdnHdr)) {\n            let acrdnCtn = select('.' + CLS_CONTENT, acrdnItem);\n            let acrdnRoot = closest(acrdnItem, '.' + CLS_ACRDN_ROOT);\n            let expandState = acrdnRoot.querySelector('.' + CLS_EXPANDSTATE);\n            if (isNullOrUndefined(acrdnCtn)) {\n                return;\n            }\n            sameHeader = (expandState === acrdnItem);\n            if (isVisible(acrdnCtn) && (!sameContentCheck || acrdnCtnItem.classList.contains(CLS_SLCTED))) {\n                this.collapse(acrdnCtn);\n            }\n            else {\n                if ((acrdActive.length > 0) && this.expandMode === 'Single' && !sameContentCheck) {\n                    acrdActive.forEach((el) => {\n                        this.collapse(select('.' + CLS_CONTENT, el));\n                        el.classList.remove(CLS_EXPANDSTATE);\n                    });\n                }\n                this.expand(acrdnCtn);\n            }\n            if (!isNullOrUndefined(expandState) && !sameHeader) {\n                expandState.classList.remove(CLS_EXPANDSTATE);\n            }\n        }\n    }\n    eleMoveFocus(action, root, trgt) {\n        let clst;\n        let clstItem = closest(trgt, '.' + CLS_ITEM$1);\n        if (trgt === root) {\n            clst = ((action === 'moveUp' ? trgt.lastElementChild : trgt).querySelector('.' + CLS_HEADER));\n        }\n        else if (trgt.classList.contains(CLS_HEADER)) {\n            clstItem = (action === 'moveUp' ? clstItem.previousElementSibling : clstItem.nextElementSibling);\n            if (clstItem) {\n                clst = select('.' + CLS_HEADER, clstItem);\n            }\n        }\n        if (clst) {\n            clst.focus();\n        }\n    }\n    keyActionHandler(e) {\n        let trgt = e.target;\n        let header = closest(e.target, CLS_HEADER);\n        if (isNullOrUndefined(header) && !trgt.classList.contains(CLS_ROOT$2) && !trgt.classList.contains(CLS_HEADER)) {\n            return;\n        }\n        let clst;\n        let root = this.element;\n        let content;\n        switch (e.action) {\n            case 'moveUp':\n                this.eleMoveFocus(e.action, root, trgt);\n                break;\n            case 'moveDown':\n                this.eleMoveFocus(e.action, root, trgt);\n                break;\n            case 'space':\n            case 'enter':\n                content = trgt.nextElementSibling;\n                if (!isNullOrUndefined(content) && content.classList.contains(CLS_CONTENT)) {\n                    if (content.getAttribute('e-animate') !== 'true') {\n                        trgt.click();\n                    }\n                }\n                else {\n                    trgt.click();\n                }\n                break;\n            case 'home':\n            case 'end':\n                clst = e.action === 'home' ? root.firstElementChild.children[0] : root.lastElementChild.children[0];\n                clst.focus();\n                break;\n        }\n    }\n    headerEleGenerate() {\n        let header = this.createElement('div', { className: CLS_HEADER, id: getUniqueID('acrdn_header') });\n        let items = this.getItems();\n        let ariaAttr = {\n            'tabindex': '0', 'role': 'heading', 'aria-selected': 'false',\n            'aria-disabled': 'false', 'aria-level': items.length.toString()\n        };\n        attributes(header, ariaAttr);\n        return header;\n    }\n    renderInnerItem(item, index) {\n        let innerEle;\n        innerEle = this.createElement('div', { className: CLS_ITEM$1 });\n        innerEle.id = getUniqueID('acrdn_item');\n        attributes(innerEle, { 'aria-expanded': 'false' });\n        if (this.headerTemplate) {\n            let ctnEle = this.headerEleGenerate();\n            let hdrEle = this.createElement('div', { className: CLS_HEADERCTN });\n            ctnEle.appendChild(hdrEle);\n            append(this.getheaderTemplate()(item, this, 'headerTemplate', this.element.id + '_headerTemplate', false), hdrEle);\n            innerEle.appendChild(ctnEle);\n            ctnEle.appendChild(this.toggleIconGenerate());\n            this.add(innerEle, CLS_SLCT);\n            return innerEle;\n        }\n        if (item.header && this.angularnativeCondiCheck(item, 'header')) {\n            if (this.enableHtmlSanitizer && typeof (item.header) === 'string') {\n                item.header = SanitizeHtmlHelper.sanitize(item.header);\n            }\n            let ctnEle = this.headerEleGenerate();\n            let hdrEle = this.createElement('div', { className: CLS_HEADERCTN });\n            ctnEle.appendChild(hdrEle);\n            ctnEle.appendChild(this.fetchElement(hdrEle, item.header, index, true));\n            innerEle.appendChild(ctnEle);\n        }\n        let hdr = select('.' + CLS_HEADER, innerEle);\n        if (item.expanded && !isNullOrUndefined(index) && (!this.enablePersistence)) {\n            if (this.initExpand.indexOf(index) === -1) {\n                this.initExpand.push(index);\n            }\n        }\n        if (item.cssClass) {\n            addClass([innerEle], item.cssClass.split(' '));\n        }\n        if (item.disabled) {\n            addClass([innerEle], CLS_DISABLE$3);\n        }\n        if (item.visible === false) {\n            addClass([innerEle], CLS_ITEMHIDE);\n        }\n        if (item.iconCss) {\n            let hdrIcnEle = this.createElement('div', { className: CLS_HEADERICN });\n            let icon = this.createElement('span', { className: item.iconCss + ' e-icons' });\n            hdrIcnEle.appendChild(icon);\n            if (isNullOrUndefined(hdr)) {\n                hdr = this.headerEleGenerate();\n                hdr.appendChild(hdrIcnEle);\n                innerEle.appendChild(hdr);\n            }\n            else {\n                hdr.insertBefore(hdrIcnEle, hdr.childNodes[0]);\n            }\n        }\n        if (item.content && this.angularnativeCondiCheck(item, 'content')) {\n            let hdrIcon = this.toggleIconGenerate();\n            if (isNullOrUndefined(hdr)) {\n                hdr = this.headerEleGenerate();\n                innerEle.appendChild(hdr);\n            }\n            hdr.appendChild(hdrIcon);\n            this.add(innerEle, CLS_SLCT);\n        }\n        return innerEle;\n    }\n    angularnativeCondiCheck(item, prop) {\n        let property = prop === 'content' ? item.content : item.header;\n        let content = property;\n        if (this.isAngular && !isNullOrUndefined(content.elementRef)) {\n            let data = content.elementRef.nativeElement.data;\n            if (isNullOrUndefined(data) || data === '' || (data.indexOf('bindings=') === -1)) {\n                return true;\n            }\n            let parseddata = JSON.parse(content.elementRef.nativeElement.data.replace('bindings=', ''));\n            if (!isNullOrUndefined(parseddata) && parseddata['ng-reflect-ng-if'] === 'false') {\n                return false;\n            }\n            else {\n                return true;\n            }\n        }\n        else {\n            return true;\n        }\n    }\n    fetchElement(ele, value, index, isHeader) {\n        let templateFn;\n        let temString;\n        try {\n            if (document.querySelectorAll(value).length && value !== 'Button') {\n                let eleVal = document.querySelector(value);\n                temString = eleVal.outerHTML.trim();\n                ele.appendChild(eleVal);\n                eleVal.style.display = '';\n            }\n        }\n        catch (e) {\n            if (typeof (value) === 'string' && isBlazor() && value.indexOf('<div>Blazor') !== 0) {\n                ele.innerHTML = SanitizeHtmlHelper.sanitize(value);\n                /* tslint:disable */\n            }\n            else if (!isNullOrUndefined(this.trgtEle) && (value instanceof (HTMLElement))) {\n                ele.appendChild(value);\n                ele.firstElementChild.style.display = '';\n                /* tslint:enable */\n            }\n            else {\n                templateFn = compile(value);\n            }\n        }\n        let tempArray;\n        if (!isNullOrUndefined(templateFn)) {\n            // tslint:disable-next-line:no-any\n            if (this.isReact) {\n                this.renderReactTemplates();\n            }\n            let templateProps;\n            let templateName;\n            if (ele.classList.contains(CLS_HEADERCTN)) {\n                templateProps = this.element.id + index + '_header';\n                templateName = 'header';\n            }\n            else if (ele.classList.contains(CLS_CTENT)) {\n                templateProps = this.element.id + index + '_content';\n                templateName = 'content';\n            }\n            tempArray = templateFn({}, this, templateName, templateProps, this.isStringTemplate);\n        }\n        if (!isNullOrUndefined(tempArray) && tempArray.length > 0 && !(isNullOrUndefined(tempArray[0].tagName) && tempArray.length === 1)) {\n            [].slice.call(tempArray).forEach((el) => {\n                if (!isNullOrUndefined(el.tagName)) {\n                    el.style.display = '';\n                }\n                ele.appendChild(el);\n            });\n        }\n        else if (ele.childElementCount === 0) {\n            ele.innerHTML = SanitizeHtmlHelper.sanitize(value);\n        }\n        if (!isNullOrUndefined(temString)) {\n            if (this.templateEle.indexOf(value) === -1) {\n                this.templateEle.push(value);\n            }\n        }\n        return ele;\n    }\n    ariaAttrUpdate(itemEle) {\n        let header = select('.' + CLS_HEADER, itemEle);\n        let content = select('.' + CLS_CONTENT, itemEle);\n        header.setAttribute('aria-controls', content.id);\n        content.setAttribute('aria-labelledby', header.id);\n        content.setAttribute('role', 'definition');\n    }\n    contentRendering(index) {\n        let itemcnt = this.createElement('div', { className: CLS_CONTENT + ' ' + CLS_CTNHIDE, id: getUniqueID('acrdn_panel') });\n        attributes(itemcnt, { 'aria-hidden': 'true' });\n        let ctn = this.createElement('div', { className: CLS_CTENT });\n        if (this.dataSource.length > 0) {\n            // tslint:disable-next-line:no-any\n            if (this.isReact) {\n                this.renderReactTemplates();\n            }\n            append(this.getItemTemplate()(this.dataSource[index], this, 'itemTemplate', this.element.id + '_itemTemplate', false), ctn);\n            itemcnt.appendChild(ctn);\n        }\n        else {\n            if (this.enableHtmlSanitizer && typeof (this.items[index].content)) {\n                this.items[index].content = SanitizeHtmlHelper.sanitize(this.items[index].content);\n            }\n            itemcnt.appendChild(this.fetchElement(ctn, this.items[index].content, index, false));\n        }\n        return itemcnt;\n    }\n    expand(trgt) {\n        let eventArgs;\n        let items = this.getItems();\n        let trgtItemEle = closest(trgt, '.' + CLS_ITEM$1);\n        if (isNullOrUndefined(trgt) || (isVisible(trgt) && trgt.getAttribute('e-animate') !== 'true') || trgtItemEle.classList.contains(CLS_DISABLE$3)) {\n            return;\n        }\n        let acrdnRoot = closest(trgtItemEle, '.' + CLS_ACRDN_ROOT);\n        let expandState = acrdnRoot.querySelector('.' + CLS_EXPANDSTATE);\n        let animation = {\n            name: this.animation.expand.effect,\n            duration: this.animation.expand.duration,\n            timingFunction: this.animation.expand.easing\n        };\n        let icon = select('.' + CLS_TOOGLEICN, trgtItemEle).firstElementChild;\n        eventArgs = {\n            element: trgtItemEle,\n            item: items[this.getIndexByItem(trgtItemEle)],\n            index: this.getIndexByItem(trgtItemEle),\n            content: trgtItemEle.querySelector('.' + CLS_CONTENT),\n            isExpanded: true\n        };\n        this.trigger('expanding', eventArgs, (expandArgs) => {\n            if (!expandArgs.cancel) {\n                icon.classList.add(CLS_TOGANIMATE);\n                this.expandedItemsPush(trgtItemEle);\n                if (!isNullOrUndefined(expandState)) {\n                    expandState.classList.remove(CLS_EXPANDSTATE);\n                }\n                trgtItemEle.classList.add(CLS_EXPANDSTATE);\n                if ((animation.name === 'None')) {\n                    this.expandProgress('begin', icon, trgt, trgtItemEle, expandArgs);\n                    this.expandProgress('end', icon, trgt, trgtItemEle, expandArgs);\n                }\n                else {\n                    this.expandAnimation(animation.name, icon, trgt, trgtItemEle, animation, expandArgs);\n                }\n            }\n        });\n    }\n    expandAnimation(ef, icn, trgt, trgtItemEle, animate, args) {\n        let height;\n        this.lastActiveItemId = trgtItemEle.id;\n        if (ef === 'SlideDown') {\n            animate.begin = () => {\n                this.expandProgress('begin', icn, trgt, trgtItemEle, args);\n                trgt.style.position = 'absolute';\n                height = trgtItemEle.offsetHeight;\n                trgt.style.maxHeight = (trgt.offsetHeight) + 'px';\n                trgtItemEle.style.maxHeight = '';\n            };\n            animate.progress = () => {\n                trgtItemEle.style.minHeight = (height + trgt.offsetHeight) + 'px';\n            };\n            animate.end = () => {\n                setStyleAttribute(trgt, { 'position': '', 'maxHeight': '' });\n                trgtItemEle.style.minHeight = '';\n                this.expandProgress('end', icn, trgt, trgtItemEle, args);\n            };\n        }\n        else {\n            animate.begin = () => {\n                this.expandProgress('begin', icn, trgt, trgtItemEle, args);\n            };\n            animate.end = () => {\n                this.expandProgress('end', icn, trgt, trgtItemEle, args);\n            };\n        }\n        new Animation(animate).animate(trgt);\n    }\n    expandProgress(progress, icon, trgt, trgtItemEle, eventArgs) {\n        this.remove(trgt, CLS_CTNHIDE);\n        this.add(trgtItemEle, CLS_SLCTED);\n        this.add(icon, CLS_EXPANDICN);\n        if (progress === 'end') {\n            this.add(trgtItemEle, CLS_ACTIVE);\n            trgt.setAttribute('aria-hidden', 'false');\n            attributes(trgtItemEle, { 'aria-expanded': 'true' });\n            attributes(trgt.previousElementSibling, { 'aria-selected': 'true' });\n            icon.classList.remove(CLS_TOGANIMATE);\n            this.trigger('expanded', eventArgs);\n        }\n    }\n    expandedItemsPush(item) {\n        let index = this.getIndexByItem(item);\n        if (this.expandedIndices.indexOf(index) === -1) {\n            let temp = [].slice.call(this.expandedIndices);\n            temp.push(index);\n            this.setProperties({ expandedIndices: temp }, true);\n        }\n    }\n    getIndexByItem(item) {\n        let itemEle = this.getItemElements();\n        return [].slice.call(itemEle).indexOf(item);\n    }\n    getItemElements() {\n        let itemEle = [];\n        let itemCollection = this.element.children;\n        [].slice.call(itemCollection).forEach((el) => {\n            if (el.classList.contains(CLS_ITEM$1)) {\n                itemEle.push(el);\n            }\n        });\n        return itemEle;\n    }\n    expandedItemsPop(item) {\n        let index = this.getIndexByItem(item);\n        let temp = [].slice.call(this.expandedIndices);\n        temp.splice(temp.indexOf(index), 1);\n        this.setProperties({ expandedIndices: temp }, true);\n    }\n    collapse(trgt) {\n        let eventArgs;\n        let items = this.getItems();\n        let trgtItemEle = closest(trgt, '.' + CLS_ITEM$1);\n        if (isNullOrUndefined(trgt) || !isVisible(trgt) || trgtItemEle.classList.contains(CLS_DISABLE$3)) {\n            return;\n        }\n        let animation = {\n            name: this.animation.collapse.effect,\n            duration: this.animation.collapse.duration,\n            timingFunction: this.animation.collapse.easing,\n        };\n        let icon = select('.' + CLS_TOOGLEICN, trgtItemEle).firstElementChild;\n        eventArgs = {\n            element: trgtItemEle,\n            item: items[this.getIndexByItem(trgtItemEle)],\n            index: this.getIndexByItem(trgtItemEle),\n            content: trgtItemEle.querySelector('.' + CLS_CONTENT),\n            isExpanded: false\n        };\n        this.trigger('expanding', eventArgs, (expandArgs) => {\n            if (!expandArgs.cancel) {\n                this.expandedItemsPop(trgtItemEle);\n                trgtItemEle.classList.add(CLS_EXPANDSTATE);\n                icon.classList.add(CLS_TOGANIMATE);\n                if ((animation.name === 'None')) {\n                    this.collapseProgress('begin', icon, trgt, trgtItemEle, expandArgs);\n                    this.collapseProgress('end', icon, trgt, trgtItemEle, expandArgs);\n                }\n                else {\n                    this.collapseAnimation(animation.name, trgt, trgtItemEle, icon, animation, expandArgs);\n                }\n            }\n        });\n    }\n    collapseAnimation(ef, trgt, trgtItEl, icn, animate, args) {\n        let height;\n        let trgtHeight;\n        let itemHeight;\n        let remain;\n        this.lastActiveItemId = trgtItEl.id;\n        if (ef === 'SlideUp') {\n            animate.begin = () => {\n                itemHeight = trgtItEl.offsetHeight;\n                trgtItEl.style.minHeight = itemHeight + 'px';\n                trgt.style.position = 'absolute';\n                height = trgtItEl.offsetHeight;\n                trgtHeight = trgt.offsetHeight;\n                trgt.style.maxHeight = trgtHeight + 'px';\n                this.collapseProgress('begin', icn, trgt, trgtItEl, args);\n            };\n            animate.progress = () => {\n                remain = ((height - (trgtHeight - trgt.offsetHeight)));\n                if (remain < itemHeight) {\n                    trgtItEl.style.minHeight = remain + 'px';\n                }\n            };\n            animate.end = () => {\n                trgt.style.display = 'none';\n                this.collapseProgress('end', icn, trgt, trgtItEl, args);\n                trgtItEl.style.minHeight = '';\n                setStyleAttribute(trgt, { 'position': '', 'maxHeight': '', 'display': '' });\n            };\n        }\n        else {\n            animate.begin = () => {\n                this.collapseProgress('begin', icn, trgt, trgtItEl, args);\n            };\n            animate.end = () => {\n                this.collapseProgress('end', icn, trgt, trgtItEl, args);\n            };\n        }\n        new Animation(animate).animate(trgt);\n    }\n    collapseProgress(progress, icon, trgt, trgtItemEle, eventArgs) {\n        this.remove(icon, CLS_EXPANDICN);\n        this.remove(trgtItemEle, CLS_SLCTED);\n        if (progress === 'end') {\n            this.add(trgt, CLS_CTNHIDE);\n            icon.classList.remove(CLS_TOGANIMATE);\n            this.remove(trgtItemEle, CLS_ACTIVE);\n            trgt.setAttribute('aria-hidden', 'true');\n            attributes(trgtItemEle, { 'aria-expanded': 'false' });\n            attributes(trgt.previousElementSibling, { 'aria-selected': 'false' });\n            this.trigger('expanded', eventArgs);\n        }\n    }\n    /**\n     * Returns the current module name.\n     * @returns string\n     * @private\n     */\n    getModuleName() {\n        return 'accordion';\n    }\n    itemAttribUpdate() {\n        let items = this.getItems();\n        let itemEle = this.getItemElements();\n        let itemLen = items.length;\n        itemEle.forEach((ele) => {\n            select('.' + CLS_HEADER, ele).setAttribute('aria-level', '' + itemLen);\n        });\n    }\n    getItems() {\n        let items;\n        if (this.itemTemplate && this.headerTemplate) {\n            items = this.dataSource;\n        }\n        else {\n            items = this.items;\n        }\n        return items;\n    }\n    /**\n     * Adds new item to the Accordion with the specified index of the Accordion.\n     * @param  {AccordionItemModel | AccordionItemModel[] | Object | Object[]} item - Item array that is to be added to the Accordion.\n     * @param  {number} index - Number value that determines where the item should be added.\n     * By default, item is added at the last index if the index is not specified.\n     * @returns void\n     * @deprecated\n     */\n    addItem(item, index) {\n        let ele = this.element;\n        let itemEle = this.getItemElements();\n        let items = this.getItems();\n        if (isNullOrUndefined(index)) {\n            index = items.length;\n        }\n        if (ele.childElementCount >= index) {\n            let addItems = (item instanceof Array) ? item : [item];\n            addItems.forEach((addItem, i) => {\n                let itemIndex = index + i;\n                items.splice(itemIndex, 0, addItem);\n                let innerItemEle = this.renderInnerItem(addItem, itemIndex);\n                if (ele.childElementCount === itemIndex) {\n                    ele.appendChild(innerItemEle);\n                }\n                else {\n                    ele.insertBefore(innerItemEle, itemEle[itemIndex]);\n                }\n                EventHandler.add(innerItemEle.querySelector('.' + CLS_HEADER), 'focus', this.focusIn, this);\n                EventHandler.add(innerItemEle.querySelector('.' + CLS_HEADER), 'blur', this.focusOut, this);\n                this.itemAttribUpdate();\n                this.expandedIndices = [];\n                this.expandedItemRefresh(ele);\n                if (addItem && addItem.expanded) {\n                    this.expandItem(true, itemIndex);\n                }\n            });\n        }\n        // tslint:disable-next-line:no-any\n        if (this.isReact) {\n            this.renderReactTemplates();\n        }\n    }\n    expandedItemRefresh(ele) {\n        let itemEle = this.getItemElements();\n        [].slice.call(itemEle).forEach((el) => {\n            if (el.classList.contains(CLS_SLCTED)) {\n                this.expandedItemsPush(el);\n            }\n        });\n    }\n    /**\n     * Dynamically removes item from Accordion.\n     * @param  {number} index - Number value that determines which item should be removed.\n     * @returns void.\n     * @deprecated\n     */\n    removeItem(index) {\n        // tslint:disable-next-line:no-any\n        if (this.isReact) {\n            this.clearTemplate(['headerTemplate', 'itemTemplate'], index);\n        }\n        let itemEle = this.getItemElements();\n        let ele = itemEle[index];\n        let items = this.getItems();\n        if (isNullOrUndefined(ele)) {\n            return;\n        }\n        this.restoreContent(index);\n        detach(ele);\n        items.splice(index, 1);\n        this.itemAttribUpdate();\n        this.expandedIndices = [];\n        this.expandedItemRefresh(this.element);\n    }\n    /**\n     * Sets focus to the specified index item header in Accordion.\n     * @param  {number} index - Number value that determines which item should be focused.\n     * @returns void.\n     */\n    select(index) {\n        let itemEle = this.getItemElements();\n        let ele = itemEle[index];\n        if (isNullOrUndefined(ele) || isNullOrUndefined(select('.' + CLS_HEADER, ele))) {\n            return;\n        }\n        ele.children[0].focus();\n    }\n    /**\n     * Shows or hides the specified item from Accordion.\n     * @param  {number} index - Number value that determines which item should be hidden/shown.\n     * @param  {Boolean} isHidden - Boolean value that determines the action either hide (true) or show (false). Default value is false.\n     *  If the `isHidden` value is false, the item is shown or else item it is hidden.\n     * @returns void.\n     */\n    hideItem(index, isHidden) {\n        let itemEle = this.getItemElements();\n        let ele = itemEle[index];\n        if (isNullOrUndefined(ele)) {\n            return;\n        }\n        if (isNullOrUndefined(isHidden)) {\n            isHidden = true;\n        }\n        isHidden ? this.add(ele, CLS_ITEMHIDE) : this.remove(ele, CLS_ITEMHIDE);\n    }\n    /**\n     * Enables/Disables the specified Accordion item.\n     * @param  {number} index - Number value that determines which item should be enabled/disabled.\n     * @param  {boolean} isEnable - Boolean value that determines the action as enable (true) or disable (false).\n     * If the `isEnable` value is true, the item is enabled or else it is disabled.\n     * @returns void.\n     */\n    enableItem(index, isEnable) {\n        let itemEle = this.getItemElements();\n        let ele = itemEle[index];\n        if (isNullOrUndefined(ele)) {\n            return;\n        }\n        let eleHeader = ele.firstElementChild;\n        if (isEnable) {\n            this.remove(ele, CLS_DISABLE$3);\n            attributes(eleHeader, { 'tabindex': '0', 'aria-disabled': 'false' });\n            eleHeader.focus();\n        }\n        else {\n            if (ele.classList.contains(CLS_ACTIVE)) {\n                this.expandItem(false, index);\n                this.eleMoveFocus('movedown', this.element, eleHeader);\n            }\n            this.add(ele, CLS_DISABLE$3);\n            eleHeader.setAttribute('aria-disabled', 'true');\n            eleHeader.removeAttribute('tabindex');\n        }\n    }\n    /**\n     * Refresh the Accordion component.\n     * @returns void.\n     */\n    refresh() {\n        if (!this.isServerRendered) {\n            super.refresh();\n        }\n    }\n    /**\n     * Expands/Collapses the specified Accordion item.\n     * @param  {boolean} isExpand - Boolean value that determines the action as expand or collapse.\n     * @param  {number} index - Number value that determines which item should be expanded/collapsed.`index` is optional parameter.\n     *  Without Specifying index, based on the `isExpand` value all Accordion item can be expanded or collapsed.\n     * @returns void.\n     */\n    expandItem(isExpand, index) {\n        let itemEle = this.getItemElements();\n        if (isNullOrUndefined(index)) {\n            if (this.expandMode === 'Single' && isExpand) {\n                let ele = itemEle[itemEle.length - 1];\n                this.itemExpand(isExpand, ele, this.getIndexByItem(ele));\n            }\n            else {\n                let item = select('#' + this.lastActiveItemId, this.element);\n                [].slice.call(itemEle).forEach((el) => {\n                    this.itemExpand(isExpand, el, this.getIndexByItem(el));\n                    el.classList.remove(CLS_EXPANDSTATE);\n                });\n                let expandedItem = select('.' + CLS_EXPANDSTATE, this.element);\n                if (expandedItem) {\n                    expandedItem.classList.remove(CLS_EXPANDSTATE);\n                }\n                if (item) {\n                    item.classList.add(CLS_EXPANDSTATE);\n                }\n            }\n        }\n        else {\n            let ele = itemEle[index];\n            if (isNullOrUndefined(ele) || !ele.classList.contains(CLS_SLCT) || (ele.classList.contains(CLS_ACTIVE) && isExpand)) {\n                return;\n            }\n            else {\n                if (this.expandMode === 'Single') {\n                    this.expandItem(false);\n                }\n                this.itemExpand(isExpand, ele, index);\n            }\n        }\n    }\n    itemExpand(isExpand, ele, index) {\n        let ctn = ele.children[1];\n        if (ele.classList.contains(CLS_DISABLE$3)) {\n            return;\n        }\n        if (isNullOrUndefined(ctn) && isExpand) {\n            if (!this.isServerRendered) {\n                ctn = this.contentRendering(index);\n                ele.appendChild(ctn);\n                this.ariaAttrUpdate(ele);\n                this.expand(ctn);\n            }\n            else {\n                let id = ele.id;\n                if (this.items.length > 0) {\n                    // tslint:disable-next-line:no-any\n                    this.interopAdaptor.invokeMethodAsync('OnItemClick', index).then(() => {\n                        if (this.isDestroyed) {\n                            return;\n                        }\n                        ctn = ele.children[1];\n                        this.expand(ctn);\n                    });\n                }\n                else {\n                    // tslint:disable-next-line:no-any\n                    this.interopAdaptor.invokeMethodAsync('OnDataClick', id).then(() => {\n                        if (this.isDestroyed) {\n                            return;\n                        }\n                        ctn = ele.children[1];\n                        this.expand(ctn);\n                    });\n                }\n            }\n        }\n        else if (!isNullOrUndefined(ctn)) {\n            isExpand ? this.expand(ctn) : this.collapse(ctn);\n        }\n        // tslint:disable-next-line:no-any\n        if (this.isReact) {\n            this.renderReactTemplates();\n        }\n    }\n    destroyItems() {\n        this.restoreContent(null);\n        // tslint:disable-next-line:no-any\n        if (this.isReact) {\n            this.clearTemplate();\n        }\n        [].slice.call(this.element.querySelectorAll('.' + CLS_ITEM$1)).forEach((el) => { detach(el); });\n    }\n    restoreContent(index) {\n        let ctnElePos;\n        if (isNullOrUndefined(index)) {\n            ctnElePos = this.element;\n        }\n        else {\n            ctnElePos = this.element.querySelectorAll('.' + CLS_ITEM$1)[index];\n        }\n        this.templateEle.forEach((eleStr) => {\n            if (!isNullOrUndefined(ctnElePos.querySelector(eleStr))) {\n                document.body.appendChild(ctnElePos.querySelector(eleStr)).style.display = 'none';\n            }\n        });\n    }\n    updateItem(item, index) {\n        if (!isNullOrUndefined(item)) {\n            let items = this.getItems();\n            let itemObj = items[index];\n            items.splice(index, 1);\n            this.restoreContent(index);\n            detach(item);\n            this.addItem(itemObj, index);\n        }\n    }\n    getPersistData() {\n        let keyEntity = ['expandedIndices'];\n        return this.addOnPersist(keyEntity);\n    }\n    /**\n     * Gets called when the model property changes.The data that describes the old and new values of the property that changed.\n     * @param  {AccordionModel} newProp\n     * @param  {AccordionModel} oldProp\n     * @returns void\n     * @private\n     */\n    onPropertyChanged(newProp, oldProp) {\n        let acrdn = this.element;\n        let isRefresh = false;\n        for (let prop of Object.keys(newProp)) {\n            switch (prop) {\n                case 'items':\n                    if (this.isServerRendered) {\n                        this.wireFocusEvents();\n                        break;\n                    }\n                    if (!(newProp.items instanceof Array && oldProp.items instanceof Array)) {\n                        let changedProp = Object.keys(newProp.items);\n                        for (let j = 0; j < changedProp.length; j++) {\n                            let index = parseInt(Object.keys(newProp.items)[j], 10);\n                            let property = Object.keys(newProp.items[index])[0];\n                            let item = selectAll('.' + CLS_ITEM$1, this.element)[index];\n                            let oldVal = Object(oldProp.items[index])[property];\n                            let newVal = Object(newProp.items[index])[property];\n                            let temp = property;\n                            if (temp === 'header' || temp === 'iconCss' || temp === 'expanded' || ((temp === 'content') && (oldVal === ''))) {\n                                this.updateItem(item, index);\n                            }\n                            if (property === 'cssClass' && !isNullOrUndefined(item)) {\n                                item.classList.remove(oldVal);\n                                item.classList.add(newVal);\n                            }\n                            if (property === 'visible' && !isNullOrUndefined(item)) {\n                                (Object(newProp.items[index])[property] === false) ? item.classList.add(CLS_ITEMHIDE) : item.classList.remove(CLS_ITEMHIDE);\n                            }\n                            if (property === 'disabled' && !isNullOrUndefined(item)) {\n                                this.enableItem(index, !newVal);\n                            }\n                            if (property === 'content' && !isNullOrUndefined(item) && item.children.length === 2) {\n                                if (item.classList.contains(CLS_SLCTED)) {\n                                    this.expandItem(false, index);\n                                }\n                                detach(item.querySelector('.' + CLS_CONTENT));\n                            }\n                        }\n                    }\n                    else {\n                        isRefresh = true;\n                    }\n                    break;\n                case 'dataSource':\n                case 'expandedIndices':\n                    if (this.expandedIndices === null) {\n                        this.expandedIndices = [];\n                    }\n                    isRefresh = true;\n                    break;\n                case 'headerTemplate':\n                    this.initializeheaderTemplate();\n                    isRefresh = true;\n                    break;\n                case 'itemTemplate':\n                    this.initializeItemTemplate();\n                    isRefresh = true;\n                    break;\n                case 'enableRtl':\n                    newProp.enableRtl ? this.add(acrdn, CLS_RTL$3) : this.remove(acrdn, CLS_RTL$3);\n                    break;\n                case 'height':\n                    setStyleAttribute(this.element, { 'height': formatUnit(newProp.height) });\n                    break;\n                case 'width':\n                    setStyleAttribute(this.element, { 'width': formatUnit(newProp.width) });\n                    break;\n                case 'expandMode':\n                    if (newProp.expandMode === 'Single') {\n                        this.element.setAttribute('aria-multiselectable', 'false');\n                        if (this.expandedIndices.length > 1) {\n                            this.expandItem(false);\n                        }\n                    }\n                    else {\n                        this.element.setAttribute('aria-multiselectable', 'true');\n                    }\n                    break;\n            }\n        }\n        if (isRefresh && !this.isServerRendered) {\n            this.initExpand = [];\n            if (this.expandedIndices.length > 0) {\n                this.initExpand = this.expandedIndices;\n            }\n            this.destroyItems();\n            this.renderItems();\n            this.initItemExpand();\n        }\n    }\n};\n__decorate$4([\n    Collection([], AccordionItem)\n], Accordion.prototype, \"items\", void 0);\n__decorate$4([\n    Property([])\n], Accordion.prototype, \"dataSource\", void 0);\n__decorate$4([\n    Property()\n], Accordion.prototype, \"itemTemplate\", void 0);\n__decorate$4([\n    Property()\n], Accordion.prototype, \"headerTemplate\", void 0);\n__decorate$4([\n    Property('100%')\n], Accordion.prototype, \"width\", void 0);\n__decorate$4([\n    Property('auto')\n], Accordion.prototype, \"height\", void 0);\n__decorate$4([\n    Property([])\n], Accordion.prototype, \"expandedIndices\", void 0);\n__decorate$4([\n    Property('Multiple')\n], Accordion.prototype, \"expandMode\", void 0);\n__decorate$4([\n    Property(false)\n], Accordion.prototype, \"enableHtmlSanitizer\", void 0);\n__decorate$4([\n    Complex({}, AccordionAnimationSettings)\n], Accordion.prototype, \"animation\", void 0);\n__decorate$4([\n    Event()\n], Accordion.prototype, \"clicked\", void 0);\n__decorate$4([\n    Event()\n], Accordion.prototype, \"expanding\", void 0);\n__decorate$4([\n    Event()\n], Accordion.prototype, \"expanded\", void 0);\n__decorate$4([\n    Event()\n], Accordion.prototype, \"created\", void 0);\n__decorate$4([\n    Event()\n], Accordion.prototype, \"destroyed\", void 0);\nAccordion = __decorate$4([\n    NotifyPropertyChanges\n], Accordion);\n\n/**\n * Accordion all modules\n */\n\nvar __decorate$5 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n/// <reference path='../common/menu-base-model.d.ts'/>\n/**\n * The ContextMenu is a graphical user interface that appears on the user right click/touch hold operation.\n * ```html\n * <div id = 'target'></div>\n * <ul id = 'contextmenu'></ul>\n * ```\n * ```typescript\n * <script>\n * var contextMenuObj = new ContextMenu({items: [{ text: 'Cut' }, { text: 'Copy' },{ text: 'Paste' }], target: '#target'});\n * </script>\n * ```\n */\nlet ContextMenu = class ContextMenu extends MenuBase {\n    /**\n     * Constructor for creating the widget.\n     * @private\n     */\n    constructor(options, element) {\n        super(options, element);\n    }\n    /**\n     * For internal use only - prerender processing.\n     * @private\n     */\n    preRender() {\n        this.isMenu = false;\n        this.element.id = this.element.id || getUniqueID('ej2-contextmenu');\n        super.preRender();\n    }\n    initialize() {\n        super.initialize();\n        attributes(this.element, { 'role': 'context menu', 'tabindex': '0' });\n        this.element.style.zIndex = getZindexPartial(this.element).toString();\n    }\n    /**\n     * This method is used to open the ContextMenu in specified position.\n     * @param top - To specify ContextMenu vertical positioning.\n     * @param left - To specify ContextMenu horizontal positioning.\n     * @param target - To calculate z-index for ContextMenu based upon the specified target.\n     * @method open\n     * @returns void\n     */\n    open(top, left, target) {\n        super.openMenu(null, null, top, left, null, target);\n    }\n    /**\n     * Closes the ContextMenu if it is opened.\n     */\n    close() {\n        super.closeMenu();\n    }\n    /**\n     * Called internally if any of the property value changed\n     * @private\n     * @param {ContextMenuModel} newProp\n     * @param {ContextMenuModel} oldProp\n     * @returns void\n     */\n    onPropertyChanged(newProp, oldProp) {\n        super.onPropertyChanged(newProp, oldProp);\n        for (let prop of Object.keys(newProp)) {\n            switch (prop) {\n                case 'filter':\n                    this.close();\n                    this.filter = newProp.filter;\n                    break;\n                case 'target':\n                    this.unWireEvents(oldProp.target);\n                    this.wireEvents();\n                    break;\n            }\n        }\n    }\n    /**\n     * Get module name.\n     * @returns string\n     * @private\n     */\n    getModuleName() {\n        return 'contextmenu';\n    }\n};\n__decorate$5([\n    Property('')\n], ContextMenu.prototype, \"target\", void 0);\n__decorate$5([\n    Property('')\n], ContextMenu.prototype, \"filter\", void 0);\n__decorate$5([\n    Collection([], MenuItem)\n], ContextMenu.prototype, \"items\", void 0);\nContextMenu = __decorate$5([\n    NotifyPropertyChanges\n], ContextMenu);\n\n/**\n * ContextMenu modules\n */\n\nvar __decorate$6 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n/// <reference path='../common/menu-base-model.d.ts'/>\nconst VMENU = 'e-vertical';\nconst SCROLLABLE = 'e-scrollable';\nconst HAMBURGER = 'e-hamburger';\n/**\n * The Menu is a graphical user interface that serve as navigation headers for your application or site.\n * ```html\n * <ul id = 'menu'></ul>\n * ```\n * ```typescript\n * <script>\n * var menuObj = new Menu({ items: [{ text: 'Home' }, { text: 'Contact Us' },{ text: 'Login' }]});\n * menuObj.appendTo(\"#menu\");\n * </script>\n * ```\n */\nlet Menu = class Menu extends MenuBase {\n    /**\n     * Constructor for creating the component.\n     * @private\n     */\n    constructor(options, element) {\n        super(options, element);\n        this.tempItems = [];\n    }\n    /**\n     * Get module name.\n     * @returns string\n     * @private\n     */\n    getModuleName() {\n        return 'menu';\n    }\n    /**\n     * For internal use only - prerender processing.\n     * @private\n     */\n    preRender() {\n        this.isMenu = true;\n        this.element.id = this.element.id || getUniqueID('ej2-menu');\n        if (this.template) {\n            try {\n                if (document.querySelectorAll(this.template).length) {\n                    this.template = document.querySelector(this.template).innerHTML.trim();\n                    this.clearChanges();\n                }\n            }\n            catch (e) {\n                /* action on catch */\n            }\n        }\n        else {\n            this.updateMenuItems(this.items);\n        }\n        super.preRender();\n    }\n    initialize() {\n        super.initialize();\n        attributes(this.element, { 'role': 'menubar', 'tabindex': '0' });\n        if (this.orientation === 'Vertical') {\n            this.element.classList.add(VMENU);\n            if (this.hamburgerMode && !this.target) {\n                this.element.previousElementSibling.classList.add(VMENU);\n            }\n            this.element.setAttribute('aria-orientation', 'vertical');\n        }\n        else {\n            if (Browser.isDevice && !this.enableScrolling) {\n                this.element.parentElement.classList.add(SCROLLABLE);\n            }\n        }\n        if (this.hamburgerMode) {\n            this.element.parentElement.classList.add(HAMBURGER);\n            if (this.orientation === 'Horizontal') {\n                this.element.classList.add('e-hide-menu');\n            }\n        }\n    }\n    updateMenuItems(items) {\n        this.tempItems = items;\n        this.items = [];\n        this.tempItems.map(this.createMenuItems, this);\n        this.setProperties({ items: this.items }, true);\n        this.tempItems = [];\n    }\n    /**\n     * Called internally if any of the property value changed\n     * @private\n     * @param {MenuModel} newProp\n     * @param {MenuModel} oldProp\n     * @returns void\n     */\n    onPropertyChanged(newProp, oldProp) {\n        for (let prop of Object.keys(newProp)) {\n            switch (prop) {\n                case 'orientation':\n                    if (newProp.orientation === 'Vertical') {\n                        this.element.classList.add(VMENU);\n                        if (this.hamburgerMode) {\n                            if (!this.target) {\n                                this.element.previousElementSibling.classList.add(VMENU);\n                            }\n                            this.element.classList.remove('e-hide-menu');\n                        }\n                        this.element.setAttribute('aria-orientation', 'vertical');\n                    }\n                    else {\n                        this.element.classList.remove(VMENU);\n                        if (this.hamburgerMode) {\n                            if (!this.target) {\n                                this.element.previousElementSibling.classList.remove(VMENU);\n                            }\n                            this.element.classList.add('e-hide-menu');\n                        }\n                        this.element.removeAttribute('aria-orientation');\n                    }\n                    break;\n                case 'items':\n                    if (!Object.keys(oldProp.items).length) {\n                        this.updateMenuItems(newProp.items);\n                    }\n                    break;\n                case 'hamburgerMode':\n                    if (!this.element.previousElementSibling) {\n                        super.createHeaderContainer();\n                    }\n                    if (newProp.hamburgerMode) {\n                        this.element.parentElement.classList.add(HAMBURGER);\n                        [].slice.call(this.element.getElementsByClassName('e-blankicon')).forEach((li) => {\n                            li.style[this.enableRtl ? 'paddingRight' : 'paddingLeft'] = '';\n                        });\n                    }\n                    else {\n                        this.element.parentElement.classList.remove(HAMBURGER);\n                        if (this.orientation === 'Vertical') {\n                            this.setBlankIconStyle(this.element);\n                        }\n                    }\n                    if (this.orientation === 'Vertical') {\n                        if (!this.target) {\n                            this.element.previousElementSibling.classList.add(VMENU);\n                        }\n                        this.element.classList.remove('e-hide-menu');\n                    }\n                    else {\n                        if (this.target) {\n                            this.element.previousElementSibling.classList.add(VMENU);\n                        }\n                        else {\n                            this.element.previousElementSibling.classList.remove(VMENU);\n                        }\n                        this.element.classList[newProp.hamburgerMode ? 'add' : 'remove']('e-hide-menu');\n                    }\n                    break;\n                case 'title':\n                    if (this.hamburgerMode && this.element.previousElementSibling) {\n                        newProp.title = (this.enableHtmlSanitizer) ? SanitizeHtmlHelper.sanitize(newProp.title) : newProp.title;\n                        this.element.previousElementSibling.querySelector('.e-menu-title').innerHTML = newProp.title;\n                    }\n                    break;\n                case 'target':\n                    if (this.hamburgerMode) {\n                        this.unWireEvents(oldProp.target);\n                        this.wireEvents();\n                        if (this.orientation === 'Horizontal') {\n                            if (!newProp.target) {\n                                if (!this.element.previousElementSibling) {\n                                    super.createHeaderContainer();\n                                }\n                                this.element.previousElementSibling.classList.remove(VMENU);\n                            }\n                            else {\n                                this.element.previousElementSibling.classList.add(VMENU);\n                            }\n                            this.element.classList.add('e-hide-menu');\n                        }\n                    }\n                    break;\n            }\n        }\n        super.onPropertyChanged(newProp, oldProp);\n    }\n    createMenuItems(item) {\n        let pIdField;\n        let idx;\n        let i;\n        let items = this.items;\n        pIdField = this.getField('parentId');\n        if (item[pIdField]) {\n            idx = this.getIndex(item[pIdField].toString(), true);\n            for (i = 0; i < idx.length; i++) {\n                if (!items[idx[i]].items) {\n                    items[idx[i]].items = [];\n                }\n                items = items[idx[i]].items;\n            }\n            items.push(item);\n        }\n        else {\n            this.items.push(item);\n        }\n    }\n    /**\n     * This method is used to open the Menu in hamburger mode.\n     * @method open\n     * @returns void\n     */\n    open() {\n        super.openHamburgerMenu();\n    }\n    /**\n     * Closes the Menu if it is opened in hamburger mode.\n     */\n    close() {\n        super.closeHamburgerMenu();\n    }\n};\n__decorate$6([\n    Property('Horizontal')\n], Menu.prototype, \"orientation\", void 0);\n__decorate$6([\n    Property('')\n], Menu.prototype, \"target\", void 0);\n__decorate$6([\n    Property(null)\n], Menu.prototype, \"template\", void 0);\n__decorate$6([\n    Property(false)\n], Menu.prototype, \"enableScrolling\", void 0);\n__decorate$6([\n    Property(false)\n], Menu.prototype, \"hamburgerMode\", void 0);\n__decorate$6([\n    Property('Menu')\n], Menu.prototype, \"title\", void 0);\n__decorate$6([\n    Property(false)\n], Menu.prototype, \"enableHtmlSanitizer\", void 0);\n__decorate$6([\n    Complex({ itemId: \"id\", text: \"text\", parentId: \"parentId\", iconCss: \"iconCss\", url: \"url\", separator: \"separator\", children: \"items\" }, FieldSettings)\n], Menu.prototype, \"fields\", void 0);\nMenu = __decorate$6([\n    NotifyPropertyChanges\n], Menu);\n\n/**\n * Menu modules\n */\n\nvar __decorate$7 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nconst CLS_TAB = 'e-tab';\nconst CLS_HEADER$1 = 'e-tab-header';\nconst CLS_BLA_TEM = 'blazor-template';\nconst CLS_CONTENT$1 = 'e-content';\nconst CLS_NEST$1 = 'e-nested';\nconst CLS_ITEMS$1 = 'e-items';\nconst CLS_ITEM$2 = 'e-item';\nconst CLS_TEMPLATE$1 = 'e-template';\nconst CLS_RTL$4 = 'e-rtl';\nconst CLS_ACTIVE$1 = 'e-active';\nconst CLS_DISABLE$4 = 'e-disable';\nconst CLS_HIDDEN$1 = 'e-hidden';\nconst CLS_FOCUS = 'e-focused';\nconst CLS_ICONS = 'e-icons';\nconst CLS_ICON = 'e-icon';\nconst CLS_ICON_TAB = 'e-icon-tab';\nconst CLS_ICON_CLOSE = 'e-close-icon';\nconst CLS_CLOSE_SHOW = 'e-close-show';\nconst CLS_TEXT = 'e-tab-text';\nconst CLS_INDICATOR = 'e-indicator';\nconst CLS_WRAP = 'e-tab-wrap';\nconst CLS_TEXT_WRAP = 'e-text-wrap';\nconst CLS_TAB_ICON = 'e-tab-icon';\nconst CLS_TB_ITEMS = 'e-toolbar-items';\nconst CLS_TB_ITEM = 'e-toolbar-item';\nconst CLS_TB_POP = 'e-toolbar-pop';\nconst CLS_TB_POPUP = 'e-toolbar-popup';\nconst CLS_HOR_NAV = 'e-hor-nav';\nconst CLS_POPUP_OPEN = 'e-popup-open';\nconst CLS_POPUP_CLOSE = 'e-popup-close';\nconst CLS_PROGRESS = 'e-progress';\nconst CLS_IGNORE = 'e-ignore';\nconst CLS_OVERLAY$2 = 'e-overlay';\nconst CLS_HSCRCNT = 'e-hscroll-content';\nconst CLS_VSCRCNT = 'e-vscroll-content';\nconst CLS_VTAB = 'e-vertical-tab';\nconst CLS_VERTICAL$1 = 'e-vertical';\nconst CLS_VLEFT = 'e-vertical-left';\nconst CLS_VRIGHT = 'e-vertical-right';\nconst CLS_HBOTTOM = 'e-horizontal-bottom';\nconst CLS_FILL = 'e-fill-mode';\n/**\n * Objects used for configuring the Tab selecting item action properties.\n */\nclass TabActionSettings extends ChildProperty {\n}\n__decorate$7([\n    Property('SlideLeftIn')\n], TabActionSettings.prototype, \"effect\", void 0);\n__decorate$7([\n    Property(600)\n], TabActionSettings.prototype, \"duration\", void 0);\n__decorate$7([\n    Property('ease')\n], TabActionSettings.prototype, \"easing\", void 0);\n/**\n * Objects used for configuring the Tab animation properties.\n */\nclass TabAnimationSettings extends ChildProperty {\n}\n__decorate$7([\n    Complex({ effect: 'SlideLeftIn', duration: 600, easing: 'ease' }, TabActionSettings)\n], TabAnimationSettings.prototype, \"previous\", void 0);\n__decorate$7([\n    Complex({ effect: 'SlideRightIn', duration: 600, easing: 'ease' }, TabActionSettings)\n], TabAnimationSettings.prototype, \"next\", void 0);\n/**\n * Objects used for configuring the Tab item header properties.\n */\nclass Header extends ChildProperty {\n}\n__decorate$7([\n    Property('')\n], Header.prototype, \"text\", void 0);\n__decorate$7([\n    Property('')\n], Header.prototype, \"iconCss\", void 0);\n__decorate$7([\n    Property('left')\n], Header.prototype, \"iconPosition\", void 0);\n/**\n * An array of object that is used to configure the Tab.\n */\nclass TabItem extends ChildProperty {\n}\n__decorate$7([\n    Complex({}, Header)\n], TabItem.prototype, \"header\", void 0);\n__decorate$7([\n    Property(null)\n], TabItem.prototype, \"headerTemplate\", void 0);\n__decorate$7([\n    Property('')\n], TabItem.prototype, \"content\", void 0);\n__decorate$7([\n    Property('')\n], TabItem.prototype, \"cssClass\", void 0);\n__decorate$7([\n    Property(false)\n], TabItem.prototype, \"disabled\", void 0);\n__decorate$7([\n    Property(true)\n], TabItem.prototype, \"visible\", void 0);\n/**\n * Tab is a content panel to show multiple contents in a single space, one at a time.\n * Each Tab item has an associated content, that will be displayed based on the active Tab header item.\n * ```html\n * <div id=\"tab\"></div>\n * <script>\n *   var tabObj = new Tab();\n *   tab.appendTo(\"#tab\");\n * </script>\n * ```\n */\nlet Tab = class Tab extends Component {\n    /**\n     * Initializes a new instance of the Tab class.\n     * @param options  - Specifies Tab model properties as options.\n     * @param element  - Specifies the element that is rendered as a Tab.\n     */\n    constructor(options, element) {\n        super(options, element);\n        this.show = {};\n        this.hide = {};\n        this.maxHeight = 0;\n        this.title = 'Close';\n        this.lastIndex = 0;\n        this.isAdd = false;\n        this.isIconAlone = false;\n        this.resizeContext = this.refreshActElePosition.bind(this);\n        /**\n         * Contains the keyboard configuration of the Tab.\n         */\n        this.keyConfigs = {\n            tab: 'tab',\n            home: 'home',\n            end: 'end',\n            enter: 'enter',\n            space: 'space',\n            delete: 'delete',\n            moveLeft: 'leftarrow',\n            moveRight: 'rightarrow',\n            moveUp: 'uparrow',\n            moveDown: 'downarrow'\n        };\n    }\n    /**\n     * Removes the component from the DOM and detaches all its related event handlers, attributes and classes.\n     * @returns void\n     */\n    destroy() {\n        // tslint:disable-next-line:no-any\n        if (this.isReact) {\n            this.clearTemplate();\n        }\n        if (!isNullOrUndefined(this.tbObj)) {\n            this.tbObj.destroy();\n        }\n        this.unWireEvents();\n        ['role', 'aria-disabled', 'aria-activedescendant', 'tabindex', 'aria-orientation'].forEach((val) => {\n            this.element.removeAttribute(val);\n        });\n        this.expTemplateContent();\n        if (!this.isTemplate) {\n            while (this.element.firstElementChild) {\n                remove(this.element.firstElementChild);\n            }\n        }\n        else {\n            let cntEle = select('.' + CLS_TAB + ' > .' + CLS_CONTENT$1, this.element);\n            this.element.classList.remove(CLS_TEMPLATE$1);\n            if (!isNullOrUndefined(cntEle)) {\n                cntEle.innerHTML = this.cnt;\n            }\n        }\n        super.destroy();\n        this.trigger('destroyed');\n    }\n    /**\n     * Refresh the tab component\n     */\n    refresh() {\n        // tslint:disable-next-line:no-any\n        if (this.isReact) {\n            this.clearTemplate();\n        }\n        if (!this.isServerRendered) {\n            super.refresh();\n        }\n        else if (this.isServerRendered && this.loadOn !== 'Dynamic') {\n            this.setActiveBorder();\n        }\n        // tslint:disable-next-line:no-any\n        if (this.isReact) {\n            this.renderReactTemplates();\n        }\n    }\n    /**\n     * Initialize component\n     * @private\n     */\n    preRender() {\n        let nested = closest(this.element, '.' + CLS_CONTENT$1);\n        this.prevIndex = 0;\n        this.isNested = false;\n        this.isPopup = false;\n        this.initRender = true;\n        this.isSwipeed = false;\n        this.itemIndexArray = [];\n        this.templateEle = [];\n        if (!isNullOrUndefined(nested)) {\n            nested.parentElement.classList.add(CLS_NEST$1);\n            this.isNested = true;\n        }\n        let name = Browser.info.name;\n        let css = (name === 'msie') ? 'e-ie' : (name === 'edge') ? 'e-edge' : (name === 'safari') ? 'e-safari' : '';\n        setStyleAttribute(this.element, { 'width': formatUnit(this.width), 'height': formatUnit(this.height) });\n        this.setCssClass(this.element, this.cssClass, true);\n        attributes(this.element, { role: 'tablist', 'aria-disabled': 'false', 'aria-activedescendant': '' });\n        this.setCssClass(this.element, css, true);\n        this.updatePopAnimationConfig();\n    }\n    /**\n     * Initialize the component rendering\n     * @private\n     */\n    render() {\n        this.btnCls = this.createElement('span', { className: CLS_ICONS + ' ' + CLS_ICON_CLOSE, attrs: { title: this.title } });\n        this.tabId = this.element.id.length > 0 ? ('-' + this.element.id) : getRandomId();\n        this.renderContainer();\n        this.wireEvents();\n        this.initRender = false;\n    }\n    renderContainer() {\n        if (this.isServerRendered) {\n            this.isTemplate = false;\n            return;\n        }\n        let ele = this.element;\n        if (this.items.length > 0 && ele.children.length === 0) {\n            ele.appendChild(this.createElement('div', { className: CLS_CONTENT$1 }));\n            this.setOrientation(this.headerPlacement, this.createElement('div', { className: CLS_HEADER$1 }));\n            this.isTemplate = false;\n        }\n        else if (this.element.children.length > 0) {\n            this.isTemplate = true;\n            ele.classList.add(CLS_TEMPLATE$1);\n            let header = ele.querySelector('.' + CLS_HEADER$1);\n            if (header && this.headerPlacement === 'Bottom') {\n                this.setOrientation(this.headerPlacement, header);\n            }\n        }\n        if (!isNullOrUndefined(select('.' + CLS_HEADER$1, this.element)) && !isNullOrUndefined(select('.' + CLS_CONTENT$1, this.element))) {\n            this.renderHeader();\n            this.tbItems = select('.' + CLS_HEADER$1 + ' .' + CLS_TB_ITEMS, this.element);\n            if (!isNullOrUndefined(this.tbItems)) {\n                rippleEffect(this.tbItems, { selector: '.e-tab-wrap' });\n            }\n            this.renderContent();\n            if (selectAll('.' + CLS_TB_ITEM, this.element).length > 0) {\n                let scrCnt;\n                this.tbItems = select('.' + CLS_HEADER$1 + ' .' + CLS_TB_ITEMS, this.element);\n                this.bdrLine = this.createElement('div', { className: CLS_INDICATOR + ' ' + CLS_HIDDEN$1 + ' ' + CLS_IGNORE });\n                scrCnt = select('.' + this.scrCntClass, this.tbItems);\n                if (!isNullOrUndefined(scrCnt)) {\n                    scrCnt.insertBefore(this.bdrLine, scrCnt.firstChild);\n                }\n                else {\n                    this.tbItems.insertBefore(this.bdrLine, this.tbItems.firstChild);\n                }\n                this.setContentHeight(true);\n                this.select(this.selectedItem);\n            }\n            this.setRTL(this.enableRtl);\n        }\n    }\n    serverItemsChanged() {\n        this.enableAnimation = false;\n        this.setActive(this.selectedItem, true);\n        if (this.loadOn !== 'Dynamic' && !isNullOrUndefined(this.cntEle)) {\n            let itemCollection = [].slice.call(this.cntEle.children);\n            let content = CLS_CONTENT$1 + this.tabId + '_' + this.selectedItem;\n            itemCollection.forEach((item) => {\n                if (item.classList.contains(CLS_ACTIVE$1) && item.id !== content) {\n                    item.classList.remove(CLS_ACTIVE$1);\n                }\n                if (item.id === content) {\n                    item.classList.add(CLS_ACTIVE$1);\n                }\n            });\n            this.prevIndex = this.selectedItem;\n            this.triggerAnimation(CLS_ITEM$2 + this.tabId + '_' + this.selectedItem, false);\n        }\n        this.enableAnimation = true;\n    }\n    headerReady() {\n        this.initRender = true;\n        this.hdrEle = this.getTabHeader();\n        this.setOrientation(this.headerPlacement, this.hdrEle);\n        if (!isNullOrUndefined(this.hdrEle)) {\n            this.tbObj = (this.hdrEle && this.hdrEle.ej2_instances[0]);\n        }\n        this.tbObj.clicked = this.clickHandler.bind(this);\n        this.tbObj.on('onItemsChanged', this.serverItemsChanged.bind(this));\n        this.tbItems = select('.' + CLS_HEADER$1 + ' .' + CLS_TB_ITEMS, this.element);\n        if (!isNullOrUndefined(this.tbItems)) {\n            rippleEffect(this.tbItems, { selector: '.e-tab-wrap' });\n        }\n        if (selectAll('.' + CLS_TB_ITEM, this.element).length > 0) {\n            let scrollCnt;\n            this.bdrLine = select('.' + CLS_INDICATOR + '.' + CLS_IGNORE, this.element);\n            scrollCnt = select('.' + this.scrCntClass, this.tbItems);\n            if (!isNullOrUndefined(scrollCnt)) {\n                scrollCnt.insertBefore(this.bdrLine, scrollCnt.firstElementChild);\n            }\n            else {\n                this.tbItems.insertBefore(this.bdrLine, this.tbItems.firstElementChild);\n            }\n            this.select(this.selectedItem);\n        }\n        this.cntEle = select('.' + CLS_TAB + ' > .' + CLS_CONTENT$1, this.element);\n        if (!isNullOrUndefined(this.cntEle)) {\n            this.touchModule = new Touch(this.cntEle, { swipe: this.swipeHandler.bind(this) });\n        }\n        if (this.loadOn === 'Demand') {\n            let id = this.setActiveContent();\n            this.triggerAnimation(id, false);\n        }\n        this.initRender = false;\n        this.renderComplete();\n    }\n    setActiveContent() {\n        let id = CLS_ITEM$2 + this.tabId + '_' + this.selectedItem;\n        let item = this.getTrgContent(this.cntEle, this.extIndex(id));\n        if (!isNullOrUndefined(item)) {\n            item.classList.add(CLS_ACTIVE$1);\n        }\n        return id;\n    }\n    renderHeader() {\n        let hdrPlace = this.headerPlacement;\n        let tabItems = [];\n        this.hdrEle = this.getTabHeader();\n        this.addVerticalClass();\n        if (!this.isTemplate) {\n            tabItems = this.parseObject(this.items, 0);\n        }\n        else {\n            if (this.element.children.length > 1 && this.element.children[1].classList.contains(CLS_HEADER$1)) {\n                this.setProperties({ headerPlacement: 'Bottom' }, true);\n            }\n            let count = this.hdrEle.children.length;\n            let hdrItems = [];\n            for (let i = 0; i < count; i++) {\n                hdrItems.push(this.hdrEle.children.item(i).innerHTML);\n            }\n            if (count > 0) {\n                while (this.hdrEle.firstElementChild) {\n                    detach(this.hdrEle.firstElementChild);\n                }\n                let tabItems = this.createElement('div', { className: CLS_ITEMS$1 });\n                this.hdrEle.appendChild(tabItems);\n                hdrItems.forEach((item, index) => {\n                    this.lastIndex = index;\n                    let attr = {\n                        className: CLS_ITEM$2, id: CLS_ITEM$2 + this.tabId + '_' + index,\n                        attrs: { role: 'tab', 'aria-controls': CLS_CONTENT$1 + this.tabId + '_' + index, 'aria-selected': 'false' }\n                    };\n                    let txt = this.createElement('span', {\n                        className: CLS_TEXT, innerHTML: item, attrs: { 'role': 'presentation' }\n                    }).outerHTML;\n                    let cont = this.createElement('div', {\n                        className: CLS_TEXT_WRAP, innerHTML: txt + this.btnCls.outerHTML\n                    }).outerHTML;\n                    let wrap = this.createElement('div', { className: CLS_WRAP, innerHTML: cont, attrs: { tabIndex: '-1' } });\n                    tabItems.appendChild(this.createElement('div', attr));\n                    selectAll('.' + CLS_ITEM$2, tabItems)[index].appendChild(wrap);\n                });\n            }\n        }\n        this.tbObj = new Toolbar({\n            width: (hdrPlace === 'Left' || hdrPlace === 'Right') ? 'auto' : '100%',\n            height: (hdrPlace === 'Left' || hdrPlace === 'Right') ? '100%' : 'auto',\n            overflowMode: this.overflowMode,\n            items: (tabItems.length !== 0) ? tabItems : [],\n            clicked: this.clickHandler.bind(this),\n            scrollStep: this.scrollStep,\n            enableHtmlSanitizer: this.enableHtmlSanitizer\n        });\n        this.tbObj.isStringTemplate = true;\n        this.tbObj.createElement = this.createElement;\n        this.tbObj.appendTo(this.hdrEle);\n        attributes(this.hdrEle, { 'aria-label': 'tab-header' });\n        this.updateOrientationAttribute();\n        this.setCloseButton(this.showCloseButton);\n    }\n    renderContent() {\n        this.cntEle = select('.' + CLS_CONTENT$1, this.element);\n        let hdrItem = selectAll('.' + CLS_TB_ITEM, this.element);\n        if (this.isTemplate) {\n            this.cnt = (this.cntEle.children.length > 0) ? this.cntEle.innerHTML : '';\n            let contents = this.cntEle.children;\n            for (let i = 0; i < hdrItem.length; i++) {\n                if (contents.length - 1 >= i) {\n                    contents.item(i).className += CLS_ITEM$2;\n                    attributes(contents.item(i), { 'role': 'tabpanel', 'aria-labelledby': CLS_ITEM$2 + this.tabId + '_' + i });\n                    contents.item(i).id = CLS_CONTENT$1 + this.tabId + '_' + i;\n                }\n            }\n        }\n    }\n    reRenderItems() {\n        this.renderContainer();\n        if (!isNullOrUndefined(this.cntEle)) {\n            this.touchModule = new Touch(this.cntEle, { swipe: this.swipeHandler.bind(this) });\n        }\n    }\n    parseObject(items, index) {\n        let tbCount = selectAll('.' + CLS_TB_ITEM, this.element).length;\n        let tItems = [];\n        let txtWrapEle;\n        let spliceArray = [];\n        items.forEach((item, i) => {\n            let pos = (isNullOrUndefined(item.header) || isNullOrUndefined(item.header.iconPosition)) ? '' : item.header.iconPosition;\n            let css = (isNullOrUndefined(item.header) || isNullOrUndefined(item.header.iconCss)) ? '' : item.header.iconCss;\n            if ((isNullOrUndefined(item.headerTemplate)) && (isNullOrUndefined(item.header) || isNullOrUndefined(item.header.text) ||\n                ((item.header.text.length === 0)) && (css === ''))) {\n                spliceArray.push(i);\n                return;\n            }\n            let txt = item.headerTemplate || item.header.text;\n            if (typeof txt === 'string' && this.enableHtmlSanitizer) {\n                txt = SanitizeHtmlHelper.sanitize(txt);\n            }\n            this.lastIndex = ((tbCount === 0) ? i : ((this.isReplace) ? (index + i) : (this.lastIndex + 1)));\n            let disabled = (item.disabled) ? ' ' + CLS_DISABLE$4 + ' ' + CLS_OVERLAY$2 : '';\n            let hidden = (item.visible === false) ? ' ' + CLS_HIDDEN$1 : '';\n            txtWrapEle = this.createElement('div', { className: CLS_TEXT, attrs: { 'role': 'presentation' } });\n            let tHtml = ((txt instanceof Object) ? txt.outerHTML : txt);\n            let txtEmpty = (!isNullOrUndefined(tHtml) && tHtml !== '');\n            if (!isNullOrUndefined(txt.tagName)) {\n                txtWrapEle.appendChild(txt);\n            }\n            else {\n                this.headerTextCompile(txtWrapEle, txt, i);\n            }\n            let tEle;\n            let icon = this.createElement('span', {\n                className: CLS_ICONS + ' ' + CLS_TAB_ICON + ' ' + CLS_ICON + '-' + pos + ' ' + css\n            });\n            let tCont = this.createElement('div', { className: CLS_TEXT_WRAP });\n            tCont.appendChild(txtWrapEle);\n            if ((txt !== '' && txt !== undefined) && css !== '') {\n                if ((pos === 'left' || pos === 'top')) {\n                    tCont.insertBefore(icon, tCont.firstElementChild);\n                }\n                else {\n                    tCont.appendChild(icon);\n                }\n                tEle = txtWrapEle;\n                this.isIconAlone = false;\n            }\n            else {\n                tEle = ((css === '') ? txtWrapEle : icon);\n                if (tEle === icon) {\n                    detach(txtWrapEle);\n                    tCont.appendChild(icon);\n                    this.isIconAlone = true;\n                }\n            }\n            let wrapAttrs = (item.disabled) ? {} : { tabIndex: '-1' };\n            tCont.appendChild(this.btnCls.cloneNode(true));\n            let wrap = this.createElement('div', { className: CLS_WRAP, attrs: wrapAttrs });\n            wrap.appendChild(tCont);\n            if (this.itemIndexArray === []) {\n                this.itemIndexArray.push(CLS_ITEM$2 + this.tabId + '_' + this.lastIndex);\n            }\n            else {\n                this.itemIndexArray.splice((index + i), 0, CLS_ITEM$2 + this.tabId + '_' + this.lastIndex);\n            }\n            let attrObj = {\n                id: CLS_ITEM$2 + this.tabId + '_' + this.lastIndex, role: 'tab', 'aria-selected': 'false'\n            };\n            let tItem = { htmlAttributes: attrObj, template: wrap };\n            tItem.cssClass = ((item.cssClass !== undefined) ? item.cssClass : ' ') + ' ' + disabled + ' ' + hidden\n                + ((css !== '') ? 'e-i' + pos : '') + ' ' + ((!txtEmpty) ? CLS_ICON : '');\n            if (pos === 'top' || pos === 'bottom') {\n                this.element.classList.add('e-vertical-icon');\n            }\n            tItems.push(tItem);\n            i++;\n        });\n        if (!this.isAdd) {\n            spliceArray.forEach((spliceItemIndex) => {\n                this.items.splice(spliceItemIndex, 1);\n            });\n        }\n        (this.isIconAlone) ? this.element.classList.add(CLS_ICON_TAB) : this.element.classList.remove(CLS_ICON_TAB);\n        return tItems;\n    }\n    removeActiveClass() {\n        let tabHeader = this.getTabHeader();\n        if (tabHeader) {\n            let tabItems = selectAll('.' + CLS_TB_ITEM + '.' + CLS_ACTIVE$1, tabHeader);\n            [].slice.call(tabItems).forEach((node) => node.classList.remove(CLS_ACTIVE$1));\n        }\n    }\n    checkPopupOverflow(ele) {\n        this.tbPop = select('.' + CLS_TB_POP, this.element);\n        let popIcon = select('.e-hor-nav', this.element);\n        let tbrItems = select('.' + CLS_TB_ITEMS, this.element);\n        let lastChild = tbrItems.lastChild;\n        let isOverflow = false;\n        if (!this.isVertical() && ((this.enableRtl && ((popIcon.offsetLeft + popIcon.offsetWidth) > tbrItems.offsetLeft))\n            || (!this.enableRtl && popIcon.offsetLeft < tbrItems.offsetWidth))) {\n            isOverflow = true;\n        }\n        else if (this.isVertical() && (popIcon.offsetTop < lastChild.offsetTop + lastChild.offsetHeight)) {\n            isOverflow = true;\n        }\n        if (isOverflow) {\n            ele.classList.add(CLS_TB_POPUP);\n            this.tbPop.insertBefore(ele, selectAll('.' + CLS_TB_POPUP, this.tbPop)[0]);\n        }\n        return true;\n    }\n    popupHandler(target) {\n        let ripEle = target.querySelector('.e-ripple-element');\n        if (!isNullOrUndefined(ripEle)) {\n            ripEle.outerHTML = '';\n            target.querySelector('.' + CLS_WRAP).classList.remove('e-ripple');\n        }\n        this.tbItem = selectAll('.' + CLS_TB_ITEMS + ' .' + CLS_TB_ITEM, this.hdrEle);\n        let lastChild = this.tbItem[this.tbItem.length - 1];\n        if (this.tbItem.length !== 0) {\n            target.classList.remove(CLS_TB_POPUP);\n            target.removeAttribute('style');\n            this.tbItems.appendChild(target);\n            this.actEleId = target.id;\n            if (this.checkPopupOverflow(lastChild)) {\n                let prevEle = this.tbItems.lastChild.previousElementSibling;\n                this.checkPopupOverflow(prevEle);\n            }\n            this.isPopup = true;\n        }\n        return selectAll('.' + CLS_TB_ITEM, this.tbItems).length - 1;\n    }\n    updateOrientationAttribute() {\n        attributes(this.element, { 'aria-orientation': (this.isVertical() ? 'vertical' : 'horizontal') });\n    }\n    setCloseButton(val) {\n        let trg = select('.' + CLS_HEADER$1, this.element);\n        (val === true) ? trg.classList.add(CLS_CLOSE_SHOW) : trg.classList.remove(CLS_CLOSE_SHOW);\n        this.tbObj.refreshOverflow();\n        this.refreshActElePosition();\n    }\n    prevCtnAnimation(prev, current) {\n        let animation;\n        let checkRTL = this.enableRtl || this.element.classList.contains(CLS_RTL$4);\n        if (this.isPopup || prev <= current) {\n            if (this.animation.previous.effect === 'SlideLeftIn') {\n                animation = {\n                    name: 'SlideLeftOut',\n                    duration: this.animation.previous.duration, timingFunction: this.animation.previous.easing\n                };\n            }\n            else {\n                animation = null;\n            }\n        }\n        else {\n            if (this.animation.next.effect === 'SlideRightIn') {\n                animation = {\n                    name: 'SlideRightOut',\n                    duration: this.animation.next.duration, timingFunction: this.animation.next.easing\n                };\n            }\n            else {\n                animation = null;\n            }\n        }\n        return animation;\n    }\n    triggerPrevAnimation(oldCnt, prevIndex) {\n        let animateObj = this.prevCtnAnimation(prevIndex, this.selectedItem);\n        if (!isNullOrUndefined(animateObj)) {\n            animateObj.begin = () => {\n                setStyleAttribute(oldCnt, { 'position': 'absolute' });\n                oldCnt.classList.add(CLS_PROGRESS);\n                oldCnt.classList.add('e-view');\n            };\n            animateObj.end = () => {\n                oldCnt.style.display = 'none';\n                oldCnt.classList.remove(CLS_ACTIVE$1);\n                oldCnt.classList.remove(CLS_PROGRESS);\n                oldCnt.classList.remove('e-view');\n                setStyleAttribute(oldCnt, { 'display': '', 'position': '' });\n                if (oldCnt.childNodes.length === 0 && !this.isTemplate) {\n                    detach(oldCnt);\n                }\n            };\n            new Animation(animateObj).animate(oldCnt);\n        }\n        else {\n            oldCnt.classList.remove(CLS_ACTIVE$1);\n        }\n    }\n    triggerAnimation(id, value) {\n        let prevIndex = this.prevIndex;\n        let oldCnt;\n        let newCnt;\n        if (!this.isServerRendered || (this.isServerRendered && this.loadOn !== 'Dynamic')) {\n            let itemCollection = [].slice.call(this.element.querySelector('.' + CLS_CONTENT$1).children);\n            itemCollection.forEach((item) => {\n                if (item.id === this.prevActiveEle) {\n                    oldCnt = item;\n                }\n            });\n            let prevEle = this.tbItem[prevIndex];\n            newCnt = this.getTrgContent(this.cntEle, this.extIndex(id));\n            if (isNullOrUndefined(oldCnt) && !isNullOrUndefined(prevEle)) {\n                let idNo = this.extIndex(prevEle.id);\n                oldCnt = this.getTrgContent(this.cntEle, idNo);\n            }\n        }\n        else {\n            newCnt = this.cntEle.firstElementChild;\n        }\n        if (!isNullOrUndefined(newCnt)) {\n            this.prevActiveEle = newCnt.id;\n        }\n        if (this.initRender || value === false || this.animation === {} || isNullOrUndefined(this.animation)) {\n            if (oldCnt && oldCnt !== newCnt) {\n                oldCnt.classList.remove(CLS_ACTIVE$1);\n            }\n            return;\n        }\n        let cnt = select('.' + CLS_CONTENT$1, this.element);\n        let animateObj;\n        if (this.prevIndex > this.selectedItem && !this.isPopup) {\n            let openEff = this.animation.previous.effect;\n            animateObj = {\n                name: ((openEff === 'None') ? '' : ((openEff !== 'SlideLeftIn') ? openEff : 'SlideLeftIn')),\n                duration: this.animation.previous.duration,\n                timingFunction: this.animation.previous.easing\n            };\n        }\n        else if (this.isPopup || this.prevIndex < this.selectedItem || this.prevIndex === this.selectedItem) {\n            let clsEff = this.animation.next.effect;\n            animateObj = {\n                name: ((clsEff === 'None') ? '' : ((clsEff !== 'SlideRightIn') ? clsEff : 'SlideRightIn')),\n                duration: this.animation.next.duration,\n                timingFunction: this.animation.next.easing\n            };\n        }\n        animateObj.progress = () => {\n            cnt.classList.add(CLS_PROGRESS);\n            this.setActiveBorder();\n        };\n        animateObj.end = () => {\n            cnt.classList.remove(CLS_PROGRESS);\n            newCnt.classList.add(CLS_ACTIVE$1);\n        };\n        if (!this.initRender && !isNullOrUndefined(oldCnt)) {\n            this.triggerPrevAnimation(oldCnt, prevIndex);\n        }\n        this.isPopup = false;\n        if (animateObj.name === '') {\n            newCnt.classList.add(CLS_ACTIVE$1);\n        }\n        else {\n            new Animation(animateObj).animate(newCnt);\n        }\n    }\n    keyPressed(trg) {\n        let trgParent = closest(trg, '.' + CLS_HEADER$1 + ' .' + CLS_TB_ITEM);\n        let trgIndex = this.getEleIndex(trgParent);\n        if (!isNullOrUndefined(this.popEle) && trg.classList.contains('e-hor-nav')) {\n            (this.popEle.classList.contains(CLS_POPUP_OPEN)) ? this.popObj.hide(this.hide) : this.popObj.show(this.show);\n        }\n        else if (trg.classList.contains('e-scroll-nav')) {\n            trg.click();\n        }\n        else {\n            if (!isNullOrUndefined(trgParent) && trgParent.classList.contains(CLS_ACTIVE$1) === false) {\n                this.select(trgIndex);\n                if (!isNullOrUndefined(this.popEle)) {\n                    this.popObj.hide(this.hide);\n                }\n            }\n        }\n    }\n    getTabHeader() {\n        let headers = [].slice.call(this.element.children).filter((e) => e.classList.contains(CLS_HEADER$1));\n        if (headers.length > 0) {\n            return headers[0];\n        }\n        else {\n            let wrap = [].slice.call(this.element.children).filter((e) => !e.classList.contains(CLS_BLA_TEM))[0];\n            if (!wrap) {\n                return undefined;\n            }\n            return [].slice.call(wrap.children).filter((e) => e.classList.contains(CLS_HEADER$1))[0];\n        }\n    }\n    getEleIndex(item) {\n        return Array.prototype.indexOf.call(selectAll('.' + CLS_TB_ITEM, this.getTabHeader()), item);\n    }\n    extIndex(id) {\n        return id.replace(CLS_ITEM$2 + this.tabId + '_', '');\n    }\n    expTemplateContent() {\n        this.templateEle.forEach((eleStr) => {\n            if (!isNullOrUndefined(this.element.querySelector(eleStr))) {\n                document.body.appendChild(this.element.querySelector(eleStr)).style.display = 'none';\n            }\n        });\n    }\n    templateCompile(ele, cnt, index) {\n        let tempEle = this.createElement('div');\n        this.compileElement(tempEle, cnt, 'content', index);\n        if (tempEle.childNodes.length !== 0) {\n            ele.appendChild(tempEle);\n        }\n        // tslint:disable-next-line:no-any\n        if (this.isReact) {\n            this.renderReactTemplates();\n        }\n    }\n    compileElement(ele, val, prop, index) {\n        let templateFn;\n        if (typeof val === 'string' && isBlazor() && val.indexOf('<div>Blazor') !== 0) {\n            val = val.trim();\n            ele.innerHTML = SanitizeHtmlHelper.sanitize(val);\n        }\n        else {\n            templateFn = compile(val);\n        }\n        let templateFUN;\n        if (!isNullOrUndefined(templateFn)) {\n            if (isBlazor() && !this.isStringTemplate && val.indexOf('<div>Blazor') === 0) {\n                templateFUN = templateFn({}, this, prop, this.element.id + index + '_' + prop, this.isStringTemplate);\n            }\n            else {\n                templateFUN = templateFn({}, this, prop);\n            }\n        }\n        if (!isNullOrUndefined(templateFn) && templateFUN.length > 0) {\n            [].slice.call(templateFUN).forEach((el) => {\n                ele.appendChild(el);\n            });\n        }\n    }\n    headerTextCompile(element, text, index) {\n        this.compileElement(element, text, 'headerTemplate', index);\n    }\n    getContent(ele, cnt, callType, index) {\n        let eleStr;\n        if (typeof cnt === 'string' || isNullOrUndefined(cnt.innerHTML)) {\n            if (typeof cnt === 'string' && this.enableHtmlSanitizer) {\n                cnt = SanitizeHtmlHelper.sanitize(cnt);\n            }\n            if (cnt[0] === '.' || cnt[0] === '#') {\n                if (document.querySelectorAll(cnt).length) {\n                    let eleVal = document.querySelector(cnt);\n                    eleStr = eleVal.outerHTML.trim();\n                    if (callType === 'clone') {\n                        ele.appendChild(eleVal.cloneNode(true));\n                    }\n                    else {\n                        ele.appendChild(eleVal);\n                        eleVal.style.display = '';\n                    }\n                }\n                else {\n                    this.templateCompile(ele, cnt, index);\n                }\n            }\n            else {\n                this.templateCompile(ele, cnt, index);\n            }\n        }\n        else {\n            ele.appendChild(cnt);\n        }\n        if (!isNullOrUndefined(eleStr)) {\n            if (this.templateEle.indexOf(cnt.toString()) === -1) {\n                this.templateEle.push(cnt.toString());\n            }\n        }\n    }\n    getTrgContent(cntEle, no) {\n        let ele;\n        if (this.element.classList.contains(CLS_NEST$1)) {\n            ele = select('.' + CLS_NEST$1 + '> .' + CLS_CONTENT$1 + ' > #' + CLS_CONTENT$1 + this.tabId + '_' + no, this.element);\n        }\n        else {\n            ele = this.findEle(cntEle.children, CLS_CONTENT$1 + this.tabId + '_' + no);\n        }\n        return ele;\n    }\n    findEle(items, key) {\n        let ele;\n        for (let i = 0; i < items.length; i++) {\n            if (items[i].id === key) {\n                ele = items[i];\n                break;\n            }\n        }\n        return ele;\n    }\n    isVertical() {\n        let isVertical = (this.headerPlacement === 'Left' || this.headerPlacement === 'Right') ? true : false;\n        this.scrCntClass = (isVertical) ? CLS_VSCRCNT : CLS_HSCRCNT;\n        return isVertical;\n    }\n    addVerticalClass() {\n        if (this.isVertical()) {\n            let tbPos = (this.headerPlacement === 'Left') ? CLS_VLEFT : CLS_VRIGHT;\n            addClass([this.hdrEle], [CLS_VERTICAL$1, tbPos]);\n            if (!this.element.classList.contains(CLS_NEST$1)) {\n                addClass([this.element], [CLS_VTAB, tbPos]);\n            }\n            else {\n                addClass([this.hdrEle], [CLS_VTAB, tbPos]);\n            }\n        }\n        if (this.headerPlacement === 'Bottom') {\n            addClass([this.hdrEle], [CLS_HBOTTOM]);\n        }\n    }\n    updatePopAnimationConfig() {\n        this.show = { name: (this.isVertical() ? 'FadeIn' : 'SlideDown'), duration: 100 };\n        this.hide = { name: (this.isVertical() ? 'FadeOut' : 'SlideUp'), duration: 100 };\n    }\n    changeOrientation(place) {\n        this.setOrientation(place, this.hdrEle);\n        let isVertical = this.hdrEle.classList.contains(CLS_VERTICAL$1) ? true : false;\n        removeClass([this.element], [CLS_VTAB]);\n        removeClass([this.hdrEle], [CLS_VERTICAL$1, CLS_VLEFT, CLS_VRIGHT]);\n        if (isVertical !== this.isVertical()) {\n            this.changeToolbarOrientation();\n        }\n        this.addVerticalClass();\n        this.updateOrientationAttribute();\n        this.setActiveBorder();\n        this.focusItem();\n    }\n    focusItem() {\n        let curActItem = select(' #' + CLS_ITEM$2 + this.tabId + '_' + this.selectedItem, this.hdrEle);\n        if (!isNullOrUndefined(curActItem)) {\n            curActItem.firstElementChild.focus();\n        }\n    }\n    serverChangeOrientation(newProp, oldProp) {\n        this.setOrientation(newProp, this.hdrEle);\n        removeClass([this.element], [CLS_VTAB]);\n        let newValue = newProp === 'Left' || newProp === 'Right';\n        let oldValue = oldProp === 'Left' || oldProp === 'Right';\n        if (newValue !== oldValue) {\n            this.changeToolbarOrientation();\n        }\n        if (this.isVertical()) {\n            addClass([this.element], [CLS_VTAB]);\n        }\n        this.updateOrientationAttribute();\n        this.setActiveBorder();\n        this.focusItem();\n    }\n    changeToolbarOrientation() {\n        this.tbObj.setProperties({ height: (this.isVertical() ? '100%' : 'auto'), width: (this.isVertical() ? 'auto' : '100%') }, true);\n        this.tbObj.changeOrientation();\n        this.updatePopAnimationConfig();\n    }\n    setOrientation(place, ele) {\n        let headerPos = Array.prototype.indexOf.call(this.element.children, ele);\n        let contentPos = Array.prototype.indexOf.call(this.element.children, this.element.querySelector('.' + CLS_CONTENT$1));\n        if (place === 'Bottom' && (contentPos > headerPos)) {\n            this.element.appendChild(ele);\n        }\n        else {\n            removeClass([ele], [CLS_HBOTTOM]);\n            this.element.insertBefore(ele, select('.' + CLS_CONTENT$1, this.element));\n        }\n    }\n    setCssClass(ele, cls, val) {\n        if (cls === '') {\n            return;\n        }\n        let list = cls.split(' ');\n        for (let i = 0; i < list.length; i++) {\n            if (val) {\n                ele.classList.add(list[i]);\n            }\n            else {\n                ele.classList.remove(list[i]);\n            }\n        }\n    }\n    setContentHeight(val) {\n        if (this.element.classList.contains(CLS_FILL)) {\n            removeClass([this.element], [CLS_FILL]);\n        }\n        if (isNullOrUndefined(this.cntEle)) {\n            return;\n        }\n        let hdrEle = this.getTabHeader();\n        if (this.heightAdjustMode === 'None') {\n            if (this.height === 'auto') {\n                return;\n            }\n            else {\n                if (!this.isVertical()) {\n                    setStyleAttribute(this.cntEle, { 'height': (this.element.offsetHeight - hdrEle.offsetHeight) + 'px' });\n                }\n            }\n        }\n        else if (this.heightAdjustMode === 'Fill') {\n            addClass([this.element], [CLS_FILL]);\n            setStyleAttribute(this.element, { 'height': '100%' });\n            setStyleAttribute(this.cntEle, { 'height': (this.element.offsetHeight - hdrEle.offsetHeight) + 'px' });\n        }\n        else if (this.heightAdjustMode === 'Auto') {\n            if (this.isTemplate === true) {\n                let cnt = selectAll('.' + CLS_CONTENT$1 + ' > .' + CLS_ITEM$2, this.element);\n                for (let i = 0; i < cnt.length; i++) {\n                    cnt[i].setAttribute('style', 'display:block; visibility: visible');\n                    this.maxHeight = Math.max(this.maxHeight, this.getHeight(cnt[i]));\n                    cnt[i].style.removeProperty('display');\n                    cnt[i].style.removeProperty('visibility');\n                }\n            }\n            else {\n                this.cntEle = select('.' + CLS_CONTENT$1, this.element);\n                if (val === true) {\n                    this.cntEle.appendChild(this.createElement('div', {\n                        id: (CLS_CONTENT$1 + this.tabId + '_' + 0), className: CLS_ITEM$2 + ' ' + CLS_ACTIVE$1,\n                        attrs: { 'role': 'tabpanel', 'aria-labelledby': CLS_ITEM$2 + this.tabId + '_' + 0 }\n                    }));\n                }\n                let ele = this.cntEle.children.item(0);\n                for (let i = 0; i < this.items.length; i++) {\n                    this.getContent(ele, this.items[i].content, 'clone', i);\n                    this.maxHeight = Math.max(this.maxHeight, this.getHeight(ele));\n                    while (ele.firstChild) {\n                        ele.removeChild(ele.firstChild);\n                    }\n                }\n                this.clearTemplate(['content']);\n                this.templateEle = [];\n                this.getContent(ele, this.items[0].content, 'render', 0);\n                ele.classList.remove(CLS_ACTIVE$1);\n            }\n            setStyleAttribute(this.cntEle, { 'height': this.maxHeight + 'px' });\n        }\n        else {\n            setStyleAttribute(this.cntEle, { 'height': 'auto' });\n        }\n    }\n    getHeight(ele) {\n        let cs = window.getComputedStyle(ele);\n        return ele.offsetHeight + parseFloat(cs.getPropertyValue('padding-top')) + parseFloat(cs.getPropertyValue('padding-bottom')) +\n            parseFloat(cs.getPropertyValue('margin-top')) + parseFloat(cs.getPropertyValue('margin-bottom'));\n    }\n    setActiveBorder() {\n        let bar;\n        let scrollCnt;\n        let trgHdrEle = this.getTabHeader();\n        let trg = select('.' + CLS_TB_ITEM + '.' + CLS_ACTIVE$1, trgHdrEle);\n        if (trg === null) {\n            return;\n        }\n        if (this.isServerRendered && trg.classList.contains(CLS_TB_POPUP)) {\n            this.popupHandler(trg);\n        }\n        let root = closest(trg, '.' + CLS_TAB);\n        if (this.element !== root) {\n            return;\n        }\n        this.tbItems = select('.' + CLS_TB_ITEMS, trgHdrEle);\n        bar = select('.' + CLS_INDICATOR, trgHdrEle);\n        scrollCnt = select('.' + CLS_TB_ITEMS + ' .' + this.scrCntClass, trgHdrEle);\n        if (this.isVertical()) {\n            setStyleAttribute(bar, { 'left': '', 'right': '' });\n            let tbHeight = (isNullOrUndefined(scrollCnt)) ? this.tbItems.offsetHeight : scrollCnt.offsetHeight;\n            if (tbHeight !== 0) {\n                setStyleAttribute(bar, { 'top': trg.offsetTop + 'px', 'height': trg.offsetHeight + 'px' });\n            }\n            else {\n                setStyleAttribute(bar, { 'top': 0, 'height': 0 });\n            }\n        }\n        else {\n            setStyleAttribute(bar, { 'top': '', 'height': '' });\n            let tbWidth = (isNullOrUndefined(scrollCnt)) ? this.tbItems.offsetWidth : scrollCnt.offsetWidth;\n            if (tbWidth !== 0) {\n                setStyleAttribute(bar, { 'left': trg.offsetLeft + 'px', 'right': tbWidth - (trg.offsetLeft + trg.offsetWidth) + 'px' });\n            }\n            else {\n                setStyleAttribute(bar, { 'left': 'auto', 'right': 'auto' });\n            }\n        }\n        if (!isNullOrUndefined(this.bdrLine)) {\n            this.bdrLine.classList.remove(CLS_HIDDEN$1);\n        }\n    }\n    setActive(value, skipDataBind = false) {\n        this.tbItem = selectAll('.' + CLS_TB_ITEM, this.getTabHeader());\n        let trg = this.tbItem[value];\n        if (this.isServerRendered && trg) {\n            value = parseInt(trg.getAttribute('data-index'), 10);\n        }\n        if (value < 0 || isNaN(value) || this.tbItem.length === 0) {\n            return;\n        }\n        if (value >= 0 && !skipDataBind) {\n            this.allowServerDataBinding = false;\n            this.setProperties({ selectedItem: value }, true);\n            this.allowServerDataBinding = true;\n            if (!this.initRender) {\n                this.serverDataBind();\n            }\n        }\n        if (trg.classList.contains(CLS_ACTIVE$1)) {\n            this.setActiveBorder();\n            return;\n        }\n        if (!this.isTemplate) {\n            let prev = this.tbItem[this.prevIndex];\n            if (!isNullOrUndefined(prev)) {\n                prev.removeAttribute('aria-controls');\n            }\n            attributes(trg, { 'aria-controls': CLS_CONTENT$1 + this.tabId + '_' + value });\n        }\n        let id = trg.id;\n        this.removeActiveClass();\n        trg.classList.add(CLS_ACTIVE$1);\n        trg.setAttribute('aria-selected', 'true');\n        let no = Number(this.extIndex(id));\n        if (isNullOrUndefined(this.prevActiveEle)) {\n            this.prevActiveEle = CLS_CONTENT$1 + this.tabId + '_' + no;\n        }\n        attributes(this.element, { 'aria-activedescendant': id });\n        if (this.isTemplate) {\n            if (select('.' + CLS_CONTENT$1, this.element).children.length > 0) {\n                let trg = this.findEle(select('.' + CLS_CONTENT$1, this.element).children, CLS_CONTENT$1 + this.tabId + '_' + no);\n                if (!isNullOrUndefined(trg)) {\n                    trg.classList.add(CLS_ACTIVE$1);\n                }\n                this.triggerAnimation(id, this.enableAnimation);\n            }\n        }\n        else if (!this.isServerRendered || (this.isServerRendered && this.loadOn === 'Init')) {\n            this.cntEle = select('.' + CLS_TAB + ' > .' + CLS_CONTENT$1, this.element);\n            let item = this.getTrgContent(this.cntEle, this.extIndex(id));\n            if (isNullOrUndefined(item)) {\n                this.cntEle.appendChild(this.createElement('div', {\n                    id: CLS_CONTENT$1 + this.tabId + '_' + this.extIndex(id), className: CLS_ITEM$2 + ' ' + CLS_ACTIVE$1,\n                    attrs: { role: 'tabpanel', 'aria-labelledby': CLS_ITEM$2 + this.tabId + '_' + this.extIndex(id) }\n                }));\n                let eleTrg = this.getTrgContent(this.cntEle, this.extIndex(id));\n                let itemIndex = Array.prototype.indexOf.call(this.itemIndexArray, id);\n                this.getContent(eleTrg, this.items[itemIndex].content, 'render', itemIndex);\n            }\n            else {\n                item.classList.add(CLS_ACTIVE$1);\n            }\n            this.triggerAnimation(id, this.enableAnimation);\n        }\n        this.setActiveBorder();\n        this.refreshItemVisibility(trg);\n        if (!this.initRender && !skipDataBind) {\n            trg.firstElementChild.focus();\n            let eventArg = {\n                previousItem: this.prevItem,\n                previousIndex: this.prevIndex,\n                selectedItem: trg,\n                selectedIndex: value,\n                selectedContent: select('#' + CLS_CONTENT$1 + this.tabId + '_' + this.selectingID, this.content),\n                isSwiped: this.isSwipeed\n            };\n            this.trigger('selected', eventArg);\n        }\n    }\n    contentReady() {\n        let id = this.setActiveContent();\n        this.triggerAnimation(id, this.enableAnimation);\n    }\n    setItems(items) {\n        this.isReplace = true;\n        this.tbItems = select('.' + CLS_TB_ITEMS, this.getTabHeader());\n        this.tbObj.items = this.parseObject(items, 0);\n        this.tbObj.dataBind();\n        this.isReplace = false;\n    }\n    setRTL(value) {\n        this.tbObj.enableRtl = value;\n        this.tbObj.dataBind();\n        this.setCssClass(this.element, CLS_RTL$4, value);\n        this.refreshActiveBorder();\n    }\n    refreshActiveBorder() {\n        if (!isNullOrUndefined(this.bdrLine)) {\n            this.bdrLine.classList.add(CLS_HIDDEN$1);\n        }\n        this.setActiveBorder();\n    }\n    showPopup(config) {\n        let tbPop = select('.e-popup.e-toolbar-pop', this.hdrEle);\n        if (tbPop.classList.contains('e-popup-close')) {\n            let tbPopObj = (tbPop && tbPop.ej2_instances[0]);\n            tbPopObj.position.X = (this.headerPlacement === 'Left') ? 'left' : 'right';\n            tbPopObj.dataBind();\n            tbPopObj.show(config);\n        }\n    }\n    wireEvents() {\n        window.addEventListener('resize', this.resizeContext);\n        EventHandler.add(this.element, 'mouseover', this.hoverHandler, this);\n        EventHandler.add(this.element, 'keydown', this.spaceKeyDown, this);\n        if (!isNullOrUndefined(this.cntEle)) {\n            this.touchModule = new Touch(this.cntEle, { swipe: this.swipeHandler.bind(this) });\n        }\n        this.keyModule = new KeyboardEvents(this.element, { keyAction: this.keyHandler.bind(this), keyConfigs: this.keyConfigs });\n        this.tabKeyModule = new KeyboardEvents(this.element, {\n            keyAction: this.keyHandler.bind(this),\n            keyConfigs: { openPopup: 'shift+f10', tab: 'tab', shiftTab: 'shift+tab' },\n            eventName: 'keydown'\n        });\n    }\n    unWireEvents() {\n        this.keyModule.destroy();\n        this.tabKeyModule.destroy();\n        if (!isNullOrUndefined(this.cntEle)) {\n            this.touchModule.destroy();\n        }\n        window.removeEventListener('resize', this.resizeContext);\n        EventHandler.remove(this.element, 'mouseover', this.hoverHandler);\n        EventHandler.remove(this.element, 'keydown', this.spaceKeyDown);\n        this.element.classList.remove(CLS_RTL$4);\n        this.element.classList.remove(CLS_FOCUS);\n    }\n    clickHandler(args) {\n        this.element.classList.remove(CLS_FOCUS);\n        let trg = args.originalEvent.target;\n        let trgParent = closest(trg, '.' + CLS_TB_ITEM);\n        let trgIndex = this.getEleIndex(trgParent);\n        if (trg.classList.contains(CLS_ICON_CLOSE)) {\n            this.removeTab(trgIndex);\n        }\n        else if (this.isVertical() && closest(trg, '.' + CLS_HOR_NAV)) {\n            this.showPopup(this.show);\n        }\n        else {\n            this.isPopup = false;\n            if (this.isServerRendered && !isNullOrUndefined(trgParent)) {\n                if (parseInt(trgParent.getAttribute('data-index'), 10) !== this.selectedItem) {\n                    this.select(trgIndex);\n                }\n            }\n            else if (!isNullOrUndefined(trgParent) && (trgIndex !== this.selectedItem || trgIndex !== this.prevIndex)) {\n                this.select(trgIndex);\n            }\n        }\n    }\n    swipeHandler(e) {\n        if (e.velocity < 3 && isNullOrUndefined(e.originalEvent.changedTouches)) {\n            return;\n        }\n        if (e.originalEvent) {\n            e.originalEvent.stopPropagation();\n        }\n        this.isSwipeed = true;\n        if (e.swipeDirection === 'Right' && this.selectedItem !== 0) {\n            for (let k = this.selectedItem - 1; k >= 0; k--) {\n                if (!this.tbItem[k].classList.contains(CLS_HIDDEN$1)) {\n                    this.select(k);\n                    break;\n                }\n            }\n        }\n        else if (e.swipeDirection === 'Left' && (this.selectedItem !== selectAll('.' + CLS_TB_ITEM, this.element).length - 1)) {\n            for (let i = this.selectedItem + 1; i < this.tbItem.length; i++) {\n                if (!this.tbItem[i].classList.contains(CLS_HIDDEN$1)) {\n                    this.select(i);\n                    break;\n                }\n            }\n        }\n        this.isSwipeed = false;\n    }\n    spaceKeyDown(e) {\n        if ((e.keyCode === 32 && e.which === 32) || (e.keyCode === 35 && e.which === 35)) {\n            let clstHead = closest(e.target, '.' + CLS_HEADER$1);\n            if (!isNullOrUndefined(clstHead)) {\n                e.preventDefault();\n            }\n        }\n    }\n    keyHandler(e) {\n        if (this.element.classList.contains(CLS_DISABLE$4)) {\n            return;\n        }\n        this.element.classList.add(CLS_FOCUS);\n        let trg = e.target;\n        let tabHeader = this.getTabHeader();\n        let actEle = select('.' + CLS_ACTIVE$1, tabHeader);\n        this.popEle = select('.' + CLS_TB_POP, tabHeader);\n        if (!isNullOrUndefined(this.popEle)) {\n            this.popObj = this.popEle.ej2_instances[0];\n        }\n        switch (e.action) {\n            case 'space':\n            case 'enter':\n                if (trg.parentElement.classList.contains(CLS_DISABLE$4)) {\n                    return;\n                }\n                if (e.action === 'enter' && trg.classList.contains('e-hor-nav')) {\n                    this.showPopup(this.show);\n                    break;\n                }\n                this.keyPressed(trg);\n                break;\n            case 'tab':\n            case 'shiftTab':\n                if (trg.classList.contains(CLS_WRAP)\n                    && closest(trg, '.' + CLS_TB_ITEM).classList.contains(CLS_ACTIVE$1) === false) {\n                    trg.setAttribute('tabindex', '-1');\n                }\n                if (this.popObj && isVisible(this.popObj.element)) {\n                    this.popObj.hide(this.hide);\n                }\n                actEle.children.item(0).setAttribute('tabindex', '0');\n                break;\n            case 'moveLeft':\n            case 'moveRight':\n                let item = closest(document.activeElement, '.' + CLS_TB_ITEM);\n                if (!isNullOrUndefined(item)) {\n                    this.refreshItemVisibility(item);\n                }\n                break;\n            case 'openPopup':\n                e.preventDefault();\n                if (!isNullOrUndefined(this.popEle) && this.popEle.classList.contains(CLS_POPUP_CLOSE)) {\n                    this.popObj.show(this.show);\n                }\n                break;\n            case 'delete':\n                let trgParent = closest(trg, '.' + CLS_TB_ITEM);\n                if (this.showCloseButton === true && !isNullOrUndefined(trgParent)) {\n                    let nxtSib = trgParent.nextSibling;\n                    if (!isNullOrUndefined(nxtSib) && nxtSib.classList.contains(CLS_TB_ITEM)) {\n                        nxtSib.firstElementChild.focus();\n                    }\n                    this.removeTab(this.getEleIndex(trgParent));\n                }\n                this.setActiveBorder();\n                break;\n        }\n    }\n    refreshActElePosition() {\n        let activeEle = select('.' + CLS_TB_ITEM + '.' + CLS_TB_POPUP + '.' + CLS_ACTIVE$1, this.element);\n        if (!isNullOrUndefined(activeEle)) {\n            this.select(this.getEleIndex(activeEle));\n        }\n        this.refreshActiveBorder();\n    }\n    refreshItemVisibility(target) {\n        let scrCnt = select('.' + this.scrCntClass, this.tbItems);\n        if (!this.isVertical() && !isNullOrUndefined(scrCnt)) {\n            let scrBar = select('.e-hscroll-bar', this.tbItems);\n            let scrStart = scrBar.scrollLeft;\n            let scrEnd = scrStart + scrBar.offsetWidth;\n            let eleStart = target.offsetLeft;\n            let eleWidth = target.offsetWidth;\n            let eleEnd = target.offsetLeft + target.offsetWidth;\n            if ((scrStart < eleStart) && (scrEnd < eleEnd)) {\n                let eleViewRange = scrEnd - eleStart;\n                scrBar.scrollLeft = scrStart + (eleWidth - eleViewRange);\n            }\n            else {\n                if ((scrStart > eleStart) && (scrEnd > eleEnd)) {\n                    let eleViewRange = eleEnd - scrStart;\n                    scrBar.scrollLeft = scrStart - (eleWidth - eleViewRange);\n                }\n            }\n        }\n        else {\n            return;\n        }\n    }\n    hoverHandler(e) {\n        let trg = e.target;\n        if (!isNullOrUndefined(trg.classList) && trg.classList.contains(CLS_ICON_CLOSE)) {\n            trg.setAttribute('title', new L10n('tab', { closeButtonTitle: this.title }, this.locale).getConstant('closeButtonTitle'));\n        }\n    }\n    evalOnPropertyChangeItems(newProp, oldProp) {\n        if (!(newProp.items instanceof Array && oldProp.items instanceof Array)) {\n            let changedProp = Object.keys(newProp.items);\n            for (let i = 0; i < changedProp.length; i++) {\n                let index = parseInt(Object.keys(newProp.items)[i], 10);\n                let property = Object.keys(newProp.items[index])[0];\n                let oldVal = Object(oldProp.items[index])[property];\n                let newVal = Object(newProp.items[index])[property];\n                let hdrItem = select('.' + CLS_TB_ITEMS + ' #' + CLS_ITEM$2 + this.tabId + '_' + index, this.element);\n                let cntItem = select('.' + CLS_CONTENT$1 + ' #' + CLS_CONTENT$1 + this.tabId + '_' + index, this.element);\n                if (property === 'header' || property === 'headerTemplate') {\n                    let icon = (isNullOrUndefined(this.items[index].header) ||\n                        isNullOrUndefined(this.items[index].header.iconCss)) ? '' : this.items[index].header.iconCss;\n                    let textVal = this.items[index].headerTemplate || this.items[index].header.text;\n                    if ((textVal === '') && (icon === '')) {\n                        this.removeTab(index);\n                    }\n                    else {\n                        let arr = [];\n                        arr.push(this.items[index]);\n                        this.items.splice(index, 1);\n                        this.itemIndexArray.splice(index, 1);\n                        this.tbObj.items.splice(index, 1);\n                        let isHiddenEle = hdrItem.classList.contains(CLS_HIDDEN$1);\n                        detach(hdrItem);\n                        this.isReplace = true;\n                        this.addTab(arr, index);\n                        if (isHiddenEle) {\n                            this.hideTab(index);\n                        }\n                        this.isReplace = false;\n                    }\n                }\n                if (property === 'content' && !isNullOrUndefined(cntItem)) {\n                    let strVal = typeof newVal === 'string' || isNullOrUndefined(newVal.innerHTML);\n                    if (strVal && (newVal[0] === '.' || newVal[0] === '#') && newVal.length) {\n                        let eleVal = document.querySelector(newVal);\n                        cntItem.appendChild(eleVal);\n                        eleVal.style.display = '';\n                    }\n                    else if (newVal === '' && oldVal[0] === '#') {\n                        document.body.appendChild(this.element.querySelector(oldVal)).style.display = 'none';\n                        cntItem.innerHTML = newVal;\n                    }\n                    else {\n                        cntItem.innerHTML = newVal;\n                    }\n                }\n                if (property === 'cssClass') {\n                    if (!isNullOrUndefined(hdrItem)) {\n                        hdrItem.classList.remove(oldVal);\n                        hdrItem.classList.add(newVal);\n                    }\n                    if (!isNullOrUndefined(cntItem)) {\n                        cntItem.classList.remove(oldVal);\n                        cntItem.classList.add(newVal);\n                    }\n                }\n                if (property === 'disabled') {\n                    this.enableTab(index, ((newVal === true) ? false : true));\n                }\n                if (property === 'visible') {\n                    this.hideTab(index, ((newVal === true) ? false : true));\n                }\n            }\n        }\n        else {\n            this.lastIndex = 0;\n            if (isNullOrUndefined(this.tbObj)) {\n                this.reRenderItems();\n            }\n            else {\n                // tslint:disable-next-line:no-any\n                if (this.isRect) {\n                    this.clearTemplate();\n                }\n                this.setItems(newProp.items);\n                if (this.templateEle.length > 0) {\n                    this.expTemplateContent();\n                }\n                this.templateEle = [];\n                let selectElement = select('.' + CLS_TAB + ' > .' + CLS_CONTENT$1, this.element);\n                while (selectElement.firstElementChild && !isBlazor()) {\n                    detach(selectElement.firstElementChild);\n                }\n                this.select(this.selectedItem);\n            }\n        }\n    }\n    /**\n     * Enables or disables the specified Tab item. On passing value as `false`, the item will be disabled.\n     * @param  {number} index - Index value of target Tab item.\n     * @param  {boolean} value - Boolean value that determines whether the command should be enabled or disabled.\n     * By default, isEnable is true.\n     * @returns void.\n     */\n    enableTab(index, value) {\n        let tbItems = selectAll('.' + CLS_TB_ITEM, this.element)[index];\n        if (isNullOrUndefined(tbItems)) {\n            return;\n        }\n        if (value === true) {\n            tbItems.classList.remove(CLS_DISABLE$4, CLS_OVERLAY$2);\n            tbItems.firstElementChild.setAttribute('tabindex', '-1');\n        }\n        else {\n            tbItems.classList.add(CLS_DISABLE$4, CLS_OVERLAY$2);\n            tbItems.firstElementChild.removeAttribute('tabindex');\n            if (tbItems.classList.contains(CLS_ACTIVE$1)) {\n                this.select(index + 1);\n            }\n        }\n        if (!isNullOrUndefined(this.items[index])) {\n            this.items[index].disabled = !value;\n            this.dataBind();\n        }\n        tbItems.setAttribute('aria-disabled', (value === true) ? 'false' : 'true');\n    }\n    /**\n     * Adds new items to the Tab that accepts an array as Tab items.\n     * @param  {TabItemsModel[]} items - An array of item that is added to the Tab.\n     * @param  {number} index - Number value that determines where the items to be added. By default, index is 0.\n     * @returns void.\n     * @deprecated\n     */\n    addTab(items, index) {\n        let addArgs = { addedItems: items, cancel: false };\n        if (!this.isReplace) {\n            this.trigger('adding', addArgs, (tabAddingArgs) => {\n                if (!tabAddingArgs.cancel) {\n                    this.addingTabContent(items, index);\n                }\n            });\n        }\n        else {\n            this.addingTabContent(items, index);\n        }\n        // tslint:disable-next-line:no-any\n        if (this.isReact) {\n            this.renderReactTemplates();\n        }\n    }\n    addingTabContent(items, index) {\n        let lastEleIndex = 0;\n        this.hdrEle = select('.' + CLS_HEADER$1, this.element);\n        if (isNullOrUndefined(this.hdrEle)) {\n            this.items = items;\n            this.reRenderItems();\n        }\n        else {\n            let itemsCount = selectAll('.' + CLS_TB_ITEM, this.element).length;\n            if (itemsCount !== 0) {\n                lastEleIndex = this.lastIndex + 1;\n            }\n            if (isNullOrUndefined(index)) {\n                index = itemsCount - 1;\n            }\n            if (itemsCount < index || index < 0 || isNaN(index)) {\n                return;\n            }\n            if (itemsCount === 0 && !isNullOrUndefined(this.hdrEle)) {\n                this.hdrEle.style.display = '';\n            }\n            if (!isNullOrUndefined(this.bdrLine)) {\n                this.bdrLine.classList.add(CLS_HIDDEN$1);\n            }\n            this.tbItems = select('.' + CLS_TB_ITEMS, this.getTabHeader());\n            this.isAdd = true;\n            let tabItems = this.parseObject(items, index);\n            this.isAdd = false;\n            let i = 0;\n            let textValue;\n            items.forEach((item, place) => {\n                textValue = item.headerTemplate || item.header.text;\n                if (!(isNullOrUndefined(item.headerTemplate || item.header) ||\n                    isNullOrUndefined(textValue) || (textValue.length === 0) && isNullOrUndefined(item.header.iconCss))) {\n                    this.items.splice((index + i), 0, item);\n                    i++;\n                }\n                if (this.isTemplate && !isNullOrUndefined(item.header) && !isNullOrUndefined(item.header.text)) {\n                    let no = lastEleIndex + place;\n                    let ele = this.createElement('div', {\n                        id: CLS_CONTENT$1 + this.tabId + '_' + no, className: CLS_ITEM$2,\n                        attrs: { role: 'tabpanel', 'aria-labelledby': CLS_ITEM$2 + '_' + no }\n                    });\n                    this.cntEle.insertBefore(ele, this.cntEle.children[(index + place)]);\n                    let eleTrg = this.getTrgContent(this.cntEle, no.toString());\n                    this.getContent(eleTrg, item.content, 'render', index);\n                }\n            });\n            this.tbObj.addItems(tabItems, index);\n            if (!this.isReplace) {\n                this.trigger('added', { addedItems: items });\n            }\n            if (this.selectedItem === index) {\n                this.select(index);\n            }\n            else {\n                this.setActiveBorder();\n            }\n        }\n    }\n    /**\n     * Removes the items in the Tab from the specified index.\n     * @param  {number} index - Index of target item that is going to be removed.\n     * @returns void.\n     * @deprecated\n     */\n    removeTab(index) {\n        let trg = selectAll('.' + CLS_TB_ITEM, this.element)[index];\n        if (isNullOrUndefined(trg)) {\n            return;\n        }\n        let removeArgs = { removedItem: trg, removedIndex: index, cancel: false };\n        this.trigger('removing', removeArgs, (tabRemovingArgs) => {\n            if (!tabRemovingArgs.cancel) {\n                if (isBlazor() && this.isServerRendered) {\n                    // tslint:disable-next-line:no-any\n                    this.interopAdaptor.invokeMethodAsync('OnRemoveItem', index);\n                    return;\n                }\n                // tslint:disable-next-line:no-any\n                if (this.isRect) {\n                    this.clearTemplate([], index);\n                }\n                this.tbObj.removeItems(index);\n                this.items.splice(index, 1);\n                this.itemIndexArray.splice(index, 1);\n                this.refreshActiveBorder();\n                let cntTrg = select('#' + CLS_CONTENT$1 + this.tabId + '_' + this.extIndex(trg.id), select('.' + CLS_CONTENT$1, this.element));\n                if (!isNullOrUndefined(cntTrg)) {\n                    // tslint:disable-next-line:no-any\n                    if (this.isReact) {\n                        this.clearTemplate();\n                    }\n                    detach(cntTrg);\n                }\n                this.trigger('removed', tabRemovingArgs);\n                if (trg.classList.contains(CLS_ACTIVE$1)) {\n                    // tslint:disable-next-line:max-line-length\n                    index = (index > selectAll('.' + CLS_TB_ITEM + ':not(.' + CLS_TB_POPUP + ')', this.element).length - 1) ? index - 1 : index;\n                    this.enableAnimation = false;\n                    this.selectedItem = index;\n                    this.select(index);\n                }\n                if (selectAll('.' + CLS_TB_ITEM, this.element).length === 0) {\n                    this.hdrEle.style.display = 'none';\n                }\n                this.enableAnimation = true;\n            }\n        });\n    }\n    /**\n     * Shows or hides the Tab that is in the specified index.\n     * @param  {number} index - Index value of target item.\n     * @param  {boolean} value - Based on this Boolean value, item will be hide (false) or show (true). By default, value is true.\n     * @returns void.\n     */\n    hideTab(index, value) {\n        let items;\n        let item = selectAll('.' + CLS_TB_ITEM, this.element)[index];\n        if (isNullOrUndefined(item)) {\n            return;\n        }\n        if (isNullOrUndefined(value)) {\n            value = true;\n        }\n        this.bdrLine.classList.add(CLS_HIDDEN$1);\n        if (value === true) {\n            item.classList.add(CLS_HIDDEN$1);\n            items = selectAll('.' + CLS_TB_ITEM + ':not(.' + CLS_HIDDEN$1 + ')', this.tbItems);\n            if (items.length !== 0 && item.classList.contains(CLS_ACTIVE$1)) {\n                if (index !== 0) {\n                    for (let i = index - 1; i >= 0; i--) {\n                        if (!this.tbItem[i].classList.contains(CLS_HIDDEN$1)) {\n                            this.select(i);\n                            break;\n                        }\n                        else if (i === 0) {\n                            for (let k = index + 1; k < this.tbItem.length; k++) {\n                                if (!this.tbItem[k].classList.contains(CLS_HIDDEN$1)) {\n                                    this.select(k);\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                }\n                else {\n                    for (let k = index + 1; k < this.tbItem.length; k++) {\n                        if (!this.tbItem[k].classList.contains(CLS_HIDDEN$1)) {\n                            this.select(k);\n                            break;\n                        }\n                    }\n                }\n            }\n            else if (items.length === 0) {\n                this.element.classList.add(CLS_HIDDEN$1);\n            }\n        }\n        else {\n            this.element.classList.remove(CLS_HIDDEN$1);\n            items = selectAll('.' + CLS_TB_ITEM + ':not(.' + CLS_HIDDEN$1 + ')', this.tbItems);\n            item.classList.remove(CLS_HIDDEN$1);\n            if (items.length === 0) {\n                this.select(index);\n            }\n        }\n        this.setActiveBorder();\n        item.setAttribute('aria-hidden', '' + value);\n        if (!this.isServerRendered && this.overflowMode === 'Popup' && this.tbObj) {\n            this.tbObj.refreshOverflow();\n        }\n    }\n    /**\n     * Specifies the index or HTMLElement to select an item from the Tab.\n     * @param  {number | HTMLElement} args - Index or DOM element is used for selecting an item from the Tab.\n     * @returns void.\n     */\n    select(args) {\n        let tabHeader = this.getTabHeader();\n        this.tbItems = select('.' + CLS_TB_ITEMS, tabHeader);\n        this.tbItem = selectAll('.' + CLS_TB_ITEM, tabHeader);\n        this.content = select('.' + CLS_CONTENT$1, this.element);\n        this.prevItem = this.tbItem[this.prevIndex];\n        if (isNullOrUndefined(this.selectedItem) || (this.selectedItem < 0) || (this.tbItem.length <= this.selectedItem) || isNaN(this.selectedItem)) {\n            this.selectedItem = 0;\n        }\n        else {\n            this.selectedID = this.extIndex(this.tbItem[this.selectedItem].id);\n        }\n        let trg = this.tbItem[args];\n        if (isNullOrUndefined(trg)) {\n            this.selectedID = '0';\n        }\n        else {\n            this.selectingID = this.extIndex(trg.id);\n        }\n        if (!isNullOrUndefined(this.prevItem) && !this.prevItem.classList.contains(CLS_DISABLE$4)) {\n            this.prevItem.children.item(0).setAttribute('tabindex', '-1');\n        }\n        let eventArg = {\n            previousItem: this.prevItem,\n            previousIndex: this.prevIndex,\n            selectedItem: this.tbItem[this.selectedItem],\n            selectedIndex: this.selectedItem,\n            selectedContent: !isNullOrUndefined(this.content) ?\n                select('#' + CLS_CONTENT$1 + this.tabId + '_' + this.selectedID, this.content) : null,\n            selectingItem: trg,\n            selectingIndex: args,\n            selectingContent: !isNullOrUndefined(this.content) ?\n                select('#' + CLS_CONTENT$1 + this.tabId + '_' + this.selectingID, this.content) : null,\n            isSwiped: this.isSwipeed,\n            cancel: false\n        };\n        if (!this.initRender) {\n            this.trigger('selecting', eventArg, (selectArgs) => {\n                if (!selectArgs.cancel) {\n                    this.selectingContent(args);\n                }\n            });\n        }\n        else {\n            this.selectingContent(args);\n        }\n    }\n    selectingContent(args) {\n        if (typeof args === 'number') {\n            if (!isNullOrUndefined(this.tbItem[args]) && (this.tbItem[args].classList.contains(CLS_DISABLE$4) ||\n                this.tbItem[args].classList.contains(CLS_HIDDEN$1))) {\n                for (let i = args + 1; i < this.items.length; i++) {\n                    if (this.items[i].disabled === false && this.items[i].visible === true) {\n                        args = i;\n                        break;\n                    }\n                    else {\n                        args = 0;\n                    }\n                }\n            }\n            if (this.tbItem.length > args && args >= 0 && !isNaN(args)) {\n                this.prevIndex = this.selectedItem;\n                if (this.tbItem[args].classList.contains(CLS_TB_POPUP)) {\n                    this.setActive(this.popupHandler(this.tbItem[args]));\n                }\n                else {\n                    this.setActive(args);\n                }\n            }\n            else {\n                this.setActive(0);\n            }\n        }\n        else if (args instanceof (HTMLElement)) {\n            this.setActive(this.getEleIndex(args));\n        }\n    }\n    /**\n     * Specifies the value to disable/enable the Tab component.\n     * When set to `true`, the component will be disabled.\n     * @param  {boolean} value - Based on this Boolean value, Tab will be enabled (false) or disabled (true).\n     * @returns void.\n     */\n    disable(value) {\n        this.setCssClass(this.element, CLS_DISABLE$4, value);\n        this.element.setAttribute('aria-disabled', '' + value);\n    }\n    /**\n     * Get the properties to be maintained in the persisted state.\n     * @returns string\n     */\n    getPersistData() {\n        return this.addOnPersist(['selectedItem', 'actEleId']);\n    }\n    /**\n     * Returns the current module name.\n     * @returns string\n     * @private\n     */\n    getModuleName() {\n        return 'tab';\n    }\n    /**\n     * Gets called when the model property changes.The data that describes the old and new values of the property that changed.\n     * @param  {TabModel} newProp\n     * @param  {TabModel} oldProp\n     * @returns void\n     * @private\n     */\n    onPropertyChanged(newProp, oldProp) {\n        for (let prop of Object.keys(newProp)) {\n            switch (prop) {\n                case 'width':\n                    setStyleAttribute(this.element, { width: formatUnit(newProp.width) });\n                    break;\n                case 'height':\n                    setStyleAttribute(this.element, { height: formatUnit(newProp.height) });\n                    if (!this.isServerRendered) {\n                        this.setContentHeight(false);\n                    }\n                    break;\n                case 'cssClass':\n                    if (oldProp.cssClass !== '') {\n                        this.setCssClass(this.element, oldProp.cssClass, false);\n                        this.setCssClass(this.element, newProp.cssClass, true);\n                    }\n                    else {\n                        this.setCssClass(this.element, newProp.cssClass, true);\n                    }\n                    break;\n                case 'items':\n                    if (!this.isServerRendered) {\n                        this.evalOnPropertyChangeItems(newProp, oldProp);\n                    }\n                    break;\n                case 'showCloseButton':\n                    this.setCloseButton(newProp.showCloseButton);\n                    break;\n                case 'selectedItem':\n                    if (!this.isServerRendered) {\n                        this.selectedItem = oldProp.selectedItem;\n                        this.select(newProp.selectedItem);\n                    }\n                    break;\n                case 'headerPlacement':\n                    if (this.isServerRendered) {\n                        this.serverChangeOrientation(newProp.headerPlacement, oldProp.headerPlacement);\n                    }\n                    else {\n                        this.changeOrientation(newProp.headerPlacement);\n                    }\n                    break;\n                case 'enableRtl':\n                    this.setRTL(newProp.enableRtl);\n                    break;\n                case 'overflowMode':\n                    this.tbObj.overflowMode = newProp.overflowMode;\n                    this.tbObj.dataBind();\n                    this.refreshActElePosition();\n                    break;\n                case 'heightAdjustMode':\n                    if (!this.isServerRendered) {\n                        this.setContentHeight(false);\n                        this.select(this.selectedItem);\n                    }\n                    break;\n                case 'scrollStep':\n                    if (this.tbObj) {\n                        this.tbObj.scrollStep = this.scrollStep;\n                    }\n                    break;\n            }\n        }\n    }\n    refreshActiveTab() {\n        // tslint:disable-next-line:no-any\n        if (this.isReact) {\n            this.clearTemplate();\n        }\n        if (!this.isTemplate) {\n            if (this.element.querySelector('.' + CLS_TB_ITEM + '.' + CLS_ACTIVE$1)) {\n                detach(this.element.querySelector('.' + CLS_TB_ITEM + '.' + CLS_ACTIVE$1).children[0]);\n                detach(this.element.querySelector('.' + CLS_CONTENT$1).querySelector('.' + CLS_ACTIVE$1).children[0]);\n                let checkValues = this.element.querySelector('.' + CLS_TB_ITEM + '.' + CLS_ACTIVE$1).id;\n                let num = checkValues.indexOf('_');\n                let checkValue = parseInt(checkValues.substring(num + 1), 10);\n                let i = 0;\n                let id;\n                [].slice.call(this.element.querySelectorAll('.' + CLS_TB_ITEM)).forEach((elem) => {\n                    let idValue = ((elem.id).indexOf('_'));\n                    id = parseInt(elem.id.substring(idValue + 1), 10);\n                    if (id < checkValue) {\n                        i++;\n                    }\n                });\n                let item = this.items[i];\n                let txtWrap;\n                let pos = (isNullOrUndefined(item.header) || isNullOrUndefined(item.header.iconPosition)) ? '' : item.header.iconPosition;\n                let css = (isNullOrUndefined(item.header) || isNullOrUndefined(item.header.iconCss)) ? '' : item.header.iconCss;\n                let text = item.headerTemplate || item.header.text;\n                txtWrap = this.createElement('div', { className: CLS_TEXT, attrs: { 'role': 'presentation' } });\n                if (!isNullOrUndefined(text.tagName)) {\n                    txtWrap.appendChild(text);\n                }\n                else {\n                    this.headerTextCompile(txtWrap, text, i);\n                }\n                let tEle;\n                let icon = this.createElement('span', {\n                    className: CLS_ICONS + ' ' + CLS_TAB_ICON + ' ' + CLS_ICON + '-' + pos + ' ' + css\n                });\n                let tConts = this.createElement('div', { className: CLS_TEXT_WRAP });\n                tConts.appendChild(txtWrap);\n                if ((text !== '' && text !== undefined) && css !== '') {\n                    if ((pos === 'left' || pos === 'top')) {\n                        tConts.insertBefore(icon, tConts.firstElementChild);\n                    }\n                    else {\n                        tConts.appendChild(icon);\n                    }\n                    tEle = txtWrap;\n                    this.isIconAlone = false;\n                }\n                else {\n                    tEle = ((css === '') ? txtWrap : icon);\n                    if (tEle === icon) {\n                        detach(txtWrap);\n                        tConts.appendChild(icon);\n                        this.isIconAlone = true;\n                    }\n                }\n                let wrapAtt = (item.disabled) ? {} : { tabIndex: '-1' };\n                tConts.appendChild(this.btnCls.cloneNode(true));\n                let wraper = this.createElement('div', { className: CLS_WRAP, attrs: wrapAtt });\n                wraper.appendChild(tConts);\n                if (pos === 'top' || pos === 'bottom') {\n                    this.element.classList.add('e-vertical-icon');\n                }\n                this.element.querySelector('.' + CLS_TB_ITEM + '.' + CLS_ACTIVE$1).appendChild(wraper);\n                let crElem = this.createElement('div', { innerHTML: item.content });\n                this.element.querySelector('.' + CLS_ITEM$2 + '.' + CLS_ACTIVE$1).appendChild(crElem);\n            }\n        }\n        else {\n            let tabItems = this.element.querySelector('.' + CLS_TB_ITEMS);\n            let element = this.element.querySelector('.' + CLS_TB_ITEM + '.' + CLS_ACTIVE$1);\n            let id = element.id;\n            let num = (id.indexOf('_'));\n            let index = parseInt(id.substring(num + 1), 10);\n            let header = element.innerText;\n            let detachContent = this.element.querySelector('.' + CLS_CONTENT$1).querySelector('.' + CLS_ACTIVE$1).children[0];\n            let mainContents = detachContent.innerHTML;\n            detach(element);\n            detach(detachContent);\n            let attr = {\n                className: CLS_TB_ITEM + ' ' + CLS_TEMPLATE$1 + ' ' + CLS_ACTIVE$1, id: CLS_ITEM$2 + this.tabId + '_' + index,\n                attrs: {\n                    role: 'tab', 'aria-controls': CLS_CONTENT$1 + this.tabId + '_' + index,\n                    'aria-disabled': 'false', 'aria-selected': 'true'\n                }\n            };\n            let txtString = this.createElement('span', {\n                className: CLS_TEXT, innerHTML: header, attrs: { 'role': 'presentation' }\n            }).outerHTML;\n            let conte = this.createElement('div', {\n                className: CLS_TEXT_WRAP, innerHTML: txtString + this.btnCls.outerHTML\n            }).outerHTML;\n            let wrap = this.createElement('div', { className: CLS_WRAP, innerHTML: conte, attrs: { tabIndex: '-1' } });\n            tabItems.insertBefore(this.createElement('div', attr), tabItems.children[index + 1]);\n            this.element.querySelector('.' + CLS_TB_ITEM + '.' + CLS_ACTIVE$1).appendChild(wrap);\n            let crElem = this.createElement('div', { innerHTML: mainContents });\n            this.element.querySelector('.' + CLS_CONTENT$1).querySelector('.' + CLS_ACTIVE$1).appendChild(crElem);\n        }\n        // tslint:disable-next-line:no-any\n        if (this.isReact) {\n            this.renderReactTemplates();\n        }\n    }\n};\n__decorate$7([\n    Collection([], TabItem)\n], Tab.prototype, \"items\", void 0);\n__decorate$7([\n    Property('100%')\n], Tab.prototype, \"width\", void 0);\n__decorate$7([\n    Property('auto')\n], Tab.prototype, \"height\", void 0);\n__decorate$7([\n    Property('')\n], Tab.prototype, \"cssClass\", void 0);\n__decorate$7([\n    Property(0)\n], Tab.prototype, \"selectedItem\", void 0);\n__decorate$7([\n    Property('Top')\n], Tab.prototype, \"headerPlacement\", void 0);\n__decorate$7([\n    Property('Content')\n], Tab.prototype, \"heightAdjustMode\", void 0);\n__decorate$7([\n    Property('Scrollable')\n], Tab.prototype, \"overflowMode\", void 0);\n__decorate$7([\n    Property('Dynamic')\n], Tab.prototype, \"loadOn\", void 0);\n__decorate$7([\n    Property(false)\n], Tab.prototype, \"enablePersistence\", void 0);\n__decorate$7([\n    Property(false)\n], Tab.prototype, \"enableHtmlSanitizer\", void 0);\n__decorate$7([\n    Property(false)\n], Tab.prototype, \"showCloseButton\", void 0);\n__decorate$7([\n    Property()\n], Tab.prototype, \"scrollStep\", void 0);\n__decorate$7([\n    Complex({}, TabAnimationSettings)\n], Tab.prototype, \"animation\", void 0);\n__decorate$7([\n    Event()\n], Tab.prototype, \"created\", void 0);\n__decorate$7([\n    Event()\n], Tab.prototype, \"adding\", void 0);\n__decorate$7([\n    Event()\n], Tab.prototype, \"added\", void 0);\n__decorate$7([\n    Event()\n], Tab.prototype, \"selecting\", void 0);\n__decorate$7([\n    Event()\n], Tab.prototype, \"selected\", void 0);\n__decorate$7([\n    Event()\n], Tab.prototype, \"removing\", void 0);\n__decorate$7([\n    Event()\n], Tab.prototype, \"removed\", void 0);\n__decorate$7([\n    Event()\n], Tab.prototype, \"destroyed\", void 0);\nTab = __decorate$7([\n    NotifyPropertyChanges\n], Tab);\n\n/**\n * Tab modules\n */\n\nvar __decorate$8 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar TreeView_1;\nconst ROOT = 'e-treeview';\nconst CONTROL = 'e-control';\nconst COLLAPSIBLE = 'e-icon-collapsible';\nconst EXPANDABLE = 'e-icon-expandable';\nconst LISTITEM = 'e-list-item';\nconst LISTTEXT = 'e-list-text';\nconst PARENTITEM = 'e-list-parent';\nconst HOVER = 'e-hover';\nconst ACTIVE = 'e-active';\nconst LOAD = 'e-icons-spinner';\nconst PROCESS = 'e-process';\nconst ICON = 'e-icons';\nconst TEXTWRAP = 'e-text-content';\nconst INPUT = 'e-input';\nconst INPUTGROUP = 'e-input-group';\nconst TREEINPUT = 'e-tree-input';\nconst EDITING = 'e-editing';\nconst RTL$1 = 'e-rtl';\nconst INTERACTION = 'e-interaction';\nconst DRAGITEM = 'e-drag-item';\nconst DROPPABLE = 'e-droppable';\nconst DRAGGING = 'e-dragging';\nconst SIBLING = 'e-sibling';\nconst DROPIN = 'e-drop-in';\nconst DROPNEXT = 'e-drop-next';\nconst DROPOUT = 'e-drop-out';\nconst NODROP = 'e-no-drop';\nconst FULLROWWRAP = 'e-fullrow-wrap';\nconst FULLROW = 'e-fullrow';\nconst SELECTED$1 = 'e-selected';\nconst EXPANDED = 'e-expanded';\nconst NODECOLLAPSED = 'e-node-collapsed';\nconst DISABLE = 'e-disable';\nconst DROPCOUNT = 'e-drop-count';\nconst CHECK = 'e-check';\nconst INDETERMINATE = 'e-stop';\nconst CHECKBOXWRAP = 'e-checkbox-wrapper';\nconst CHECKBOXFRAME = 'e-frame';\nconst CHECKBOXRIPPLE = 'e-ripple-container';\nconst RIPPLE = 'e-ripple';\nconst RIPPLEELMENT = 'e-ripple-element';\nconst FOCUS = 'e-node-focus';\nconst IMAGE = 'e-list-img';\nconst BIGGER = 'e-bigger';\nconst SMALL = 'e-small';\nconst CHILD = 'e-has-child';\nconst ITEM_ANIMATION_ACTIVE = 'e-animation-active';\nconst DISABLED$1 = 'e-disabled';\nconst treeAriaAttr = {\n    treeRole: 'tree',\n    itemRole: 'treeitem',\n    listRole: 'group',\n    itemText: '',\n    wrapperRole: '',\n};\n/**\n * Configures the fields to bind to the properties of node in the TreeView component.\n */\nclass FieldsSettings extends ChildProperty {\n}\n__decorate$8([\n    Property('child')\n], FieldsSettings.prototype, \"child\", void 0);\n__decorate$8([\n    Property([])\n], FieldsSettings.prototype, \"dataSource\", void 0);\n__decorate$8([\n    Property('expanded')\n], FieldsSettings.prototype, \"expanded\", void 0);\n__decorate$8([\n    Property('hasChildren')\n], FieldsSettings.prototype, \"hasChildren\", void 0);\n__decorate$8([\n    Property('htmlAttributes')\n], FieldsSettings.prototype, \"htmlAttributes\", void 0);\n__decorate$8([\n    Property('iconCss')\n], FieldsSettings.prototype, \"iconCss\", void 0);\n__decorate$8([\n    Property('id')\n], FieldsSettings.prototype, \"id\", void 0);\n__decorate$8([\n    Property('imageUrl')\n], FieldsSettings.prototype, \"imageUrl\", void 0);\n__decorate$8([\n    Property('isChecked')\n], FieldsSettings.prototype, \"isChecked\", void 0);\n__decorate$8([\n    Property('parentID')\n], FieldsSettings.prototype, \"parentID\", void 0);\n__decorate$8([\n    Property(null)\n], FieldsSettings.prototype, \"query\", void 0);\n__decorate$8([\n    Property('selected')\n], FieldsSettings.prototype, \"selected\", void 0);\n__decorate$8([\n    Property(null)\n], FieldsSettings.prototype, \"tableName\", void 0);\n__decorate$8([\n    Property('text')\n], FieldsSettings.prototype, \"text\", void 0);\n__decorate$8([\n    Property('tooltip')\n], FieldsSettings.prototype, \"tooltip\", void 0);\n__decorate$8([\n    Property('navigateUrl')\n], FieldsSettings.prototype, \"navigateUrl\", void 0);\n/**\n * Configures animation settings for the TreeView component.\n */\nclass ActionSettings extends ChildProperty {\n}\n__decorate$8([\n    Property('SlideDown')\n], ActionSettings.prototype, \"effect\", void 0);\n__decorate$8([\n    Property(400)\n], ActionSettings.prototype, \"duration\", void 0);\n__decorate$8([\n    Property('linear')\n], ActionSettings.prototype, \"easing\", void 0);\n/**\n * Configures the animation settings for expanding and collapsing nodes in TreeView.\n */\nclass NodeAnimationSettings extends ChildProperty {\n}\n__decorate$8([\n    Complex({ effect: 'SlideUp', duration: 400, easing: 'linear' }, ActionSettings)\n], NodeAnimationSettings.prototype, \"collapse\", void 0);\n__decorate$8([\n    Complex({ effect: 'SlideDown', duration: 400, easing: 'linear' }, ActionSettings)\n], NodeAnimationSettings.prototype, \"expand\", void 0);\n/**\n * The TreeView component is used to represent hierarchical data in a tree like structure with advanced\n * functions to perform edit, drag and drop, selection with check-box, and more.\n * ```html\n *  <div id=\"tree\"></div>\n * ```\n * ```typescript\n *  let treeObj: TreeView = new TreeView();\n *  treeObj.appendTo('#tree');\n * ```\n */\nlet TreeView = TreeView_1 = class TreeView extends Component {\n    constructor(options, element) {\n        super(options, element);\n        this.isRefreshed = false;\n        this.preventExpand = false;\n        this.checkedElement = [];\n        this.disableNode = [];\n        this.validArr = [];\n        this.expandChildren = [];\n        this.isFieldChange = false;\n        this.changeDataSource = false;\n        this.isBlazorExpandedNodes = [];\n        this.mouseDownStatus = false;\n    }\n    /**\n     * Get component name.\n     * @returns string\n     * @private\n     */\n    getModuleName() {\n        return 'treeview';\n    }\n    /**\n     * Initialize the event handler\n     */\n    preRender() {\n        this.isBlazorPlatform = (isBlazor() && this.isServerRendered);\n        this.checkActionNodes = [];\n        this.parentNodeCheck = [];\n        this.dragStartAction = false;\n        this.isAnimate = false;\n        this.keyConfigs = {\n            escape: 'escape',\n            end: 'end',\n            enter: 'enter',\n            f2: 'f2',\n            home: 'home',\n            moveDown: 'downarrow',\n            moveLeft: 'leftarrow',\n            moveRight: 'rightarrow',\n            moveUp: 'uparrow',\n            ctrlDown: 'ctrl+downarrow',\n            ctrlUp: 'ctrl+uparrow',\n            ctrlEnter: 'ctrl+enter',\n            ctrlHome: 'ctrl+home',\n            ctrlEnd: 'ctrl+end',\n            ctrlA: 'ctrl+A',\n            shiftDown: 'shift+downarrow',\n            shiftUp: 'shift+uparrow',\n            shiftEnter: 'shift+enter',\n            shiftHome: 'shift+home',\n            shiftEnd: 'shift+end',\n            csDown: 'ctrl+shift+downarrow',\n            csUp: 'ctrl+shift+uparrow',\n            csEnter: 'ctrl+shift+enter',\n            csHome: 'ctrl+shift+home',\n            csEnd: 'ctrl+shift+end',\n            space: 'space',\n        };\n        this.listBaseOption = {\n            expandCollapse: true,\n            showIcon: true,\n            expandIconClass: EXPANDABLE,\n            ariaAttributes: treeAriaAttr,\n            expandIconPosition: 'Left',\n            itemCreated: (e) => {\n                this.beforeNodeCreate(e);\n            },\n            enableHtmlSanitizer: this.enableHtmlSanitizer,\n            itemNavigable: this.fullRowNavigable,\n        };\n        this.updateListProp(this.fields);\n        this.aniObj = new Animation({});\n        this.treeList = [];\n        this.isLoaded = false;\n        this.isInitalExpand = false;\n        this.expandChildren = [];\n        this.index = 0;\n        this.setTouchClass();\n        if (isNullOrUndefined(this.selectedNodes)) {\n            this.setProperties({ selectedNodes: [] }, true);\n        }\n        if (isNullOrUndefined(this.checkedNodes)) {\n            this.setProperties({ checkedNodes: [] }, true);\n        }\n        if (isNullOrUndefined(this.expandedNodes)) {\n            this.setProperties({ expandedNodes: [] }, true);\n        }\n        else {\n            this.isInitalExpand = true;\n        }\n    }\n    /**\n     * Get the properties to be maintained in the persisted state.\n     * @returns string\n     * @hidden\n     */\n    getPersistData() {\n        let keyEntity = ['selectedNodes', 'checkedNodes', 'expandedNodes'];\n        return this.addOnPersist(keyEntity);\n    }\n    /**\n     * To Initialize the control rendering\n     * @private\n     */\n    render() {\n        this.initialRender = true;\n        this.blazorInitialRender = false;\n        this.initialize();\n        this.setDataBinding(false);\n        this.setDisabledMode();\n        this.setExpandOnType();\n        if (!this.disabled) {\n            this.setRipple();\n        }\n        this.wireEditingEvents(this.allowEditing);\n        this.setDragAndDrop(this.allowDragAndDrop);\n        if (!this.disabled) {\n            this.wireEvents();\n        }\n        if (!this.isBlazorPlatform) {\n            this.initialRender = false;\n        }\n        this.renderComplete();\n    }\n    initialize() {\n        if (!this.isBlazorPlatform) {\n            this.element.setAttribute('role', 'tree');\n            this.element.setAttribute('tabindex', '0');\n            this.element.setAttribute('aria-activedescendant', this.element.id + '_active');\n            this.setCssClass(null, this.cssClass);\n            this.setEnableRtl();\n            this.setFullRow(this.fullRowSelect);\n        }\n        this.nodeTemplateFn = this.templateComplier(this.nodeTemplate);\n    }\n    setDisabledMode() {\n        if (this.disabled) {\n            this.element.classList.add(DISABLED$1);\n        }\n        else {\n            this.element.classList.remove(DISABLED$1);\n        }\n    }\n    setEnableRtl() {\n        this.enableRtl ? addClass([this.element], RTL$1) : removeClass([this.element], RTL$1);\n    }\n    setRipple() {\n        let tempStr = '.' + FULLROW + ',.' + TEXTWRAP;\n        let rippleModel = {\n            selector: tempStr,\n            ignore: '.' + TEXTWRAP + ' > .' + ICON + ',.' + INPUTGROUP + ',.' + INPUT + ', .' + CHECKBOXWRAP\n        };\n        this.rippleFn = rippleEffect(this.element, rippleModel);\n        let iconModel = {\n            selector: '.' + TEXTWRAP + ' > .' + ICON,\n            isCenterRipple: true,\n        };\n        this.rippleIconFn = rippleEffect(this.element, iconModel);\n    }\n    setFullRow(isEnabled) {\n        isEnabled ? addClass([this.element], FULLROWWRAP) : removeClass([this.element], FULLROWWRAP);\n    }\n    setMultiSelect(isEnabled) {\n        let firstUl = select('.' + PARENTITEM, this.element);\n        if (isEnabled) {\n            firstUl.setAttribute('aria-multiselectable', 'true');\n        }\n        else {\n            firstUl.removeAttribute('aria-multiselectable');\n        }\n    }\n    templateComplier(template) {\n        if (template) {\n            this.element.classList.add(INTERACTION);\n            try {\n                if (document.querySelectorAll(template).length) {\n                    return compile(document.querySelector(template).innerHTML.trim());\n                }\n            }\n            catch (e) {\n                return compile(template);\n            }\n        }\n        this.element.classList.remove(INTERACTION);\n        return undefined;\n    }\n    setDataBinding(changeDataSource) {\n        this.treeList.push('false');\n        if (this.fields.dataSource instanceof DataManager) {\n            // tslint:disable\n            this.isOffline = (this.isBlazorPlatform ? this.fields.dataSource.offline :\n                this.fields.dataSource.dataSource.offline);\n            if (this.fields.dataSource.ready) {\n                this.fields.dataSource.ready.then((e) => {\n                    // tslint:disable\n                    this.isOffline = (this.isBlazorPlatform ? this.fields.dataSource.offline :\n                        this.fields.dataSource.dataSource.offline);\n                    if (this.fields.dataSource instanceof DataManager && this.isOffline) {\n                        this.treeList.pop();\n                        this.treeData = e.result;\n                        this.isNumberTypeId = this.getType();\n                        this.setRootData();\n                        this.renderItems(true);\n                        if (this.treeList.length === 0 && !this.isLoaded) {\n                            this.finalize();\n                        }\n                    }\n                }).catch((e) => {\n                    this.trigger('actionFailure', { error: e });\n                });\n            }\n            else {\n                this.fields.dataSource.executeQuery(this.getQuery(this.fields)).then((e) => {\n                    this.treeList.pop();\n                    this.treeData = e.result;\n                    this.isNumberTypeId = this.getType();\n                    this.setRootData();\n                    if (changeDataSource) {\n                        this.changeDataSource = true;\n                    }\n                    this.renderItems(true);\n                    this.changeDataSource = false;\n                    if (this.treeList.length === 0 && !this.isLoaded) {\n                        this.finalize();\n                    }\n                }).catch((e) => {\n                    this.trigger('actionFailure', { error: e });\n                });\n            }\n        }\n        else {\n            this.treeList.pop();\n            if (isNullOrUndefined(this.fields.dataSource)) {\n                this.rootData = this.treeData = [];\n            }\n            else {\n                this.treeData = JSON.parse(JSON.stringify(this.fields.dataSource));\n                this.setRootData();\n            }\n            this.isNumberTypeId = this.getType();\n            this.renderItems(false);\n        }\n        if (this.treeList.length === 0 && !this.isLoaded) {\n            this.finalize();\n        }\n    }\n    getQuery(mapper, value = null) {\n        let columns = [];\n        let query;\n        if (!mapper.query) {\n            query = new Query();\n            let prop = this.getActualProperties(mapper);\n            for (let col of Object.keys(prop)) {\n                if (col !== 'dataSource' && col !== 'tableName' && col !== 'child' && !!mapper[col]\n                    && col !== 'url' && columns.indexOf(mapper[col]) === -1) {\n                    columns.push(mapper[col]);\n                }\n            }\n            query.select(columns);\n            if (prop.hasOwnProperty('tableName')) {\n                query.from(mapper.tableName);\n            }\n        }\n        else {\n            query = mapper.query.clone();\n        }\n        ListBase.addSorting(this.sortOrder, mapper.text, query);\n        if (!isNullOrUndefined(value) && !isNullOrUndefined(mapper.parentID)) {\n            query.where(mapper.parentID, 'equal', (this.isNumberTypeId ? parseFloat(value) : value));\n        }\n        return query;\n    }\n    getType() {\n        return this.treeData[0] ? ((typeof getValue(this.fields.id, this.treeData[0]) === 'number') ? true : false) : false;\n    }\n    setRootData() {\n        this.dataType = this.getDataType(this.treeData, this.fields);\n        if (this.dataType === 1) {\n            this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);\n            let rootItems = this.getChildNodes(this.treeData, undefined, true);\n            if (isNullOrUndefined(rootItems)) {\n                this.rootData = [];\n            }\n            else {\n                this.rootData = rootItems;\n            }\n        }\n        else {\n            this.rootData = this.treeData;\n        }\n    }\n    renderItems(isSorted) {\n        // tslint:disable\n        if (!this.isBlazorPlatform || (this.isBlazorPlatform && this.fields.dataSource instanceof DataManager && (this.fields.dataSource.adaptorName !== 'BlazorAdaptor')) || this.changeDataSource) {\n            this.listBaseOption.ariaAttributes.level = 1;\n            let sortedData = this.getSortedData(this.rootData);\n            this.ulElement = ListBase.createList(this.createElement, isSorted ? this.rootData : sortedData, this.listBaseOption);\n            this.element.appendChild(this.ulElement);\n            let rootNodes = this.ulElement.querySelectorAll('.e-list-item');\n            if (this.loadOnDemand === false) {\n                let i = 0;\n                while (i < rootNodes.length) {\n                    this.renderChildNodes(rootNodes[i], true, null, true);\n                    i++;\n                }\n            }\n            let parentEle = selectAll('.' + PARENTITEM, this.element);\n            if ((parentEle.length === 1 && (rootNodes && rootNodes.length !== 0)) || this.loadOnDemand) {\n                this.finalizeNode(this.element);\n            }\n        }\n        this.updateTemplateForBlazor();\n        this.parentNodeCheck = [];\n        this.parentCheckData = [];\n        this.updateCheckedStateFromDS();\n        if (this.autoCheck && this.showCheckBox && !this.isLoaded) {\n            this.updateParentCheckState();\n        }\n    }\n    updateTemplateForBlazor() {\n        if (this.nodeTemplate && this.isBlazorPlatform && !this.isStringTemplate) {\n            this.updateBlazorTemplate();\n        }\n    }\n    /**\n     * Update the checkedNodes from datasource at initial rendering\n     */\n    updateCheckedStateFromDS(id) {\n        if (this.treeData && this.showCheckBox) {\n            if (this.dataType === 1) {\n                let mapper = this.fields;\n                let resultData = new DataManager(this.treeData).executeLocal(new Query().where(mapper.isChecked, 'equal', true, false));\n                for (let i = 0; i < resultData.length; i++) {\n                    let resultId = resultData[i][this.fields.id] ? resultData[i][this.fields.id].toString() : null;\n                    let resultPId = resultData[i][this.fields.parentID] ? resultData[i][this.fields.parentID].toString() : null;\n                    if (this.checkedNodes.indexOf(resultId) === -1 && !(this.isLoaded)) {\n                        this.checkedNodes.push(resultId);\n                    }\n                    if (resultData[i][this.fields.hasChildren]) {\n                        let id = resultData[i][this.fields.id];\n                        let childData = new DataManager(this.treeData).\n                            executeLocal(new Query().where(mapper.parentID, 'equal', id, false));\n                        for (let child = 0; child < childData.length; child++) {\n                            let childId = childData[child][this.fields.id] ? childData[child][this.fields.id].toString() : null;\n                            if (this.checkedNodes.indexOf(childId) === -1 && this.autoCheck) {\n                                this.checkedNodes.push(childId);\n                            }\n                        }\n                    }\n                }\n                for (let i = 0; i < this.checkedNodes.length; i++) {\n                    let mapper = this.fields;\n                    let checkState = new DataManager(this.treeData).\n                        executeLocal(new Query().where(mapper.id, 'equal', this.checkedNodes[i], true));\n                    if (checkState[0] && this.autoCheck) {\n                        this.getCheckedNodeDetails(mapper, checkState);\n                        this.checkIndeterminateState(checkState[0]);\n                    }\n                    let checkedData = new DataManager(this.treeData).\n                        executeLocal(new Query().where(mapper.parentID, 'equal', this.checkedNodes[i], true));\n                    for (let index = 0; index < checkedData.length; index++) {\n                        let checkedId = checkedData[index][this.fields.id] ? checkedData[index][this.fields.id].toString() : null;\n                        if (this.checkedNodes.indexOf(checkedId) === -1 && this.autoCheck) {\n                            this.checkedNodes.push(checkedId);\n                        }\n                    }\n                }\n            }\n            else if (this.dataType === 2 || (this.fields.dataSource instanceof DataManager &&\n                this.isOffline)) {\n                for (let index = 0; index < this.treeData.length; index++) {\n                    let fieldId = this.treeData[index][this.fields.id] ? this.treeData[index][this.fields.id].toString() : '';\n                    if (this.treeData[index][this.fields.isChecked] && !(this.isLoaded) && this.checkedNodes.indexOf(fieldId) === -1) {\n                        this.checkedNodes.push(fieldId);\n                    }\n                    let childItems = getValue(this.fields.child.toString(), this.treeData[index]);\n                    if (childItems) {\n                        this.updateChildCheckState(childItems, this.treeData[index]);\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * To check whether the list data has sub child and to change the parent check state accordingly\n     */\n    getCheckedNodeDetails(mapper, checkNodes) {\n        let id = checkNodes[0][this.fields.parentID] ? checkNodes[0][this.fields.parentID].toString() : null;\n        let count = 0;\n        let element = this.element.querySelector('[data-uid=\"' + checkNodes[0][this.fields.id] + '\"]');\n        let parentEle = this.element.querySelector('[data-uid=\"' + checkNodes[0][this.fields.parentID] + '\"]');\n        if (!element && !parentEle) {\n            let len = this.parentNodeCheck.length;\n            if (this.parentNodeCheck.indexOf(id) === -1) {\n                this.parentNodeCheck.push(id);\n            }\n            let childNodes = this.getChildNodes(this.treeData, id);\n            for (let i = 0; i < childNodes.length; i++) {\n                let childId = childNodes[i][this.fields.id] ? childNodes[i][this.fields.id].toString() : null;\n                if (this.checkedNodes.indexOf(childId) !== -1) {\n                    count++;\n                }\n                if (count === childNodes.length && this.checkedNodes.indexOf(id) === -1) {\n                    this.checkedNodes.push(id);\n                }\n            }\n            let preElement = new DataManager(this.treeData).\n                executeLocal(new Query().where(mapper.id, 'equal', id, true));\n            this.getCheckedNodeDetails(mapper, preElement);\n        }\n        else if (parentEle) {\n            let check = select('.' + CHECK, parentEle);\n            if (!check) {\n                this.changeState(parentEle, 'indeterminate', null, true, true);\n            }\n        }\n    }\n    /**\n     * Update the checkedNodes and parent state when all the child Nodes are in checkedstate at initial rendering\n     */\n    updateParentCheckState() {\n        let indeterminate = selectAll('.' + INDETERMINATE, this.element);\n        let childCheckedElement;\n        for (let i = 0; i < indeterminate.length; i++) {\n            let node = closest(indeterminate[i], '.' + LISTITEM);\n            let nodeId = node.getAttribute('data-uid').toString();\n            if (this.dataType === 1) {\n                childCheckedElement = new DataManager(this.treeData).\n                    executeLocal(new Query().where(this.fields.parentID, 'equal', nodeId, true));\n            }\n            else {\n                childCheckedElement = this.getChildNodes(this.treeData, nodeId);\n            }\n            let count = 0;\n            if (childCheckedElement) {\n                for (let j = 0; j < childCheckedElement.length; j++) {\n                    let childId = childCheckedElement[j][this.fields.id].toString();\n                    if (this.checkedNodes.indexOf(childId) !== -1) {\n                        count++;\n                    }\n                }\n                if (count === childCheckedElement.length) {\n                    let nodeCheck = node.getAttribute('data-uid');\n                    if (this.checkedNodes.indexOf(nodeCheck) === -1) {\n                        this.checkedNodes.push(nodeCheck);\n                    }\n                    this.changeState(node, 'check', null, true, true);\n                }\n                else if (count === 0 && this.checkedNodes.length === 0) {\n                    this.changeState(node, 'uncheck', null, true, true);\n                }\n            }\n        }\n    }\n    /**\n     * Change the parent to indeterminate state whenever the child is in checked state which is not rendered in DOM\n     */\n    checkIndeterminateState(data) {\n        let element;\n        if (this.dataType === 1) {\n            element = this.element.querySelector('[data-uid=\"' + data[this.fields.parentID] + '\"]');\n        }\n        else {\n            element = this.element.querySelector('[data-uid=\"' + data[this.fields.id] + '\"]');\n        }\n        if (element) {\n            let ariaChecked = element.querySelector('.' + CHECKBOXWRAP).getAttribute('aria-checked');\n            if (ariaChecked !== 'true') {\n                this.changeState(element, 'indeterminate', null, true, true);\n            }\n        }\n        else if (this.dataType === 2) {\n            let len = this.parentNodeCheck.length;\n            if (this.parentNodeCheck.indexOf(data[this.fields.id].toString()) === -1) {\n                this.parentNodeCheck.push(data[this.fields.id].toString());\n            }\n        }\n    }\n    /**\n     * Update the checkedNodes for child and subchild from datasource (hierarchical datasource) at initial rendering\n     */\n    updateChildCheckState(childItems, treeData) {\n        let count = 0;\n        let checkedParent = treeData[this.fields.id] ? treeData[this.fields.id].toString() : '';\n        for (let index = 0; index < childItems.length; index++) {\n            let checkedChild = childItems[index][this.fields.id] ? childItems[index][this.fields.id].toString() : '';\n            if (childItems[index][this.fields.isChecked] && !(this.isLoaded) && this.checkedNodes.indexOf(checkedChild) === -1) {\n                this.checkedNodes.push(checkedChild);\n            }\n            if (this.checkedNodes.indexOf(checkedParent) !== -1 && this.checkedNodes.indexOf(checkedChild) === -1 && this.autoCheck) {\n                this.checkedNodes.push(checkedChild);\n            }\n            if (this.checkedNodes.indexOf(checkedChild) !== -1 && this.autoCheck) {\n                count++;\n            }\n            let subChildItems = getValue(this.fields.child.toString(), childItems[index]);\n            if (subChildItems) {\n                this.parentCheckData.push(treeData);\n                this.updateChildCheckState(subChildItems, childItems[index]);\n            }\n            if (count === childItems.length && this.autoCheck && this.checkedNodes.indexOf(checkedParent) === -1) {\n                this.checkedNodes.push(checkedParent);\n            }\n        }\n        if (count !== 0 && this.autoCheck) {\n            this.checkIndeterminateState(treeData);\n            for (let len = 0; len < this.parentCheckData.length; len++) {\n                if ((treeData !== this.parentCheckData[len]) && (this.parentCheckData[len])) {\n                    this.checkIndeterminateState(this.parentCheckData[len]);\n                }\n            }\n        }\n        this.parentCheckData = [];\n    }\n    beforeNodeCreate(e) {\n        if (this.showCheckBox) {\n            let checkboxEle = createCheckBox(this.createElement, true, { cssClass: this.touchClass });\n            checkboxEle.setAttribute('role', 'checkbox');\n            let icon = select('div.' + ICON, e.item);\n            let id = e.item.getAttribute('data-uid');\n            e.item.childNodes[0].insertBefore(checkboxEle, e.item.childNodes[0].childNodes[isNullOrUndefined(icon) ? 0 : 1]);\n            let checkValue = getValue(e.fields.isChecked, e.curData);\n            if (this.checkedNodes.indexOf(id) > -1) {\n                select('.' + CHECKBOXFRAME, checkboxEle).classList.add(CHECK);\n                checkboxEle.setAttribute('aria-checked', 'true');\n                this.addCheck(e.item);\n            }\n            else if (!isNullOrUndefined(checkValue) && checkValue.toString() === 'true') {\n                select('.' + CHECKBOXFRAME, checkboxEle).classList.add(CHECK);\n                checkboxEle.setAttribute('aria-checked', 'true');\n                this.addCheck(e.item);\n            }\n            else {\n                checkboxEle.setAttribute('aria-checked', 'false');\n            }\n            let frame = select('.' + CHECKBOXFRAME, checkboxEle);\n            EventHandler.add(frame, 'mousedown', this.frameMouseHandler, this);\n            EventHandler.add(frame, 'mouseup', this.frameMouseHandler, this);\n        }\n        if (this.fullRowSelect) {\n            this.createFullRow(e.item);\n        }\n        if (this.allowMultiSelection && !e.item.classList.contains(SELECTED$1)) {\n            e.item.setAttribute('aria-selected', 'false');\n        }\n        let fields = e.fields;\n        this.addActionClass(e, fields.selected, SELECTED$1);\n        this.addActionClass(e, fields.expanded, EXPANDED);\n        if (!isNullOrUndefined(this.nodeTemplateFn)) {\n            let textEle = e.item.querySelector('.' + LISTTEXT);\n            let dataId = e.item.getAttribute('data-uid');\n            textEle.innerHTML = '';\n            this.renderNodeTemplate(e.curData, textEle, dataId);\n        }\n        let eventArgs = {\n            node: e.item,\n            nodeData: e.curData,\n            text: e.text,\n        };\n        if (!this.isRefreshed) {\n            this.trigger('drawNode', eventArgs);\n        }\n    }\n    frameMouseHandler(e) {\n        let rippleSpan = select('.' + CHECKBOXRIPPLE, e.target.parentElement);\n        rippleMouseHandler(e, rippleSpan);\n    }\n    addActionClass(e, action, cssClass) {\n        let data = e.curData;\n        let actionValue = getValue(action, data);\n        if (!isNullOrUndefined(actionValue) && actionValue.toString() !== 'false') {\n            e.item.classList.add(cssClass);\n        }\n    }\n    getDataType(ds, mapper) {\n        if (this.fields.dataSource instanceof DataManager && (this.fields.dataSource.adaptorName !== 'BlazorAdaptor')) {\n            for (let i = 0; i < ds.length; i++) {\n                if (this.isOffline) {\n                    if ((typeof mapper.child === 'string') && isNullOrUndefined(getValue(mapper.child, ds[i])) && !isNullOrUndefined(getValue(mapper.parentID, ds[i]))) {\n                        return 1;\n                    }\n                }\n                else if ((typeof mapper.child === 'string') && isNullOrUndefined(getValue(mapper.child, ds[i]))) {\n                    return 1;\n                }\n            }\n            return 2;\n        }\n        for (let i = 0, len = ds.length; i < len; i++) {\n            if ((typeof mapper.child === 'string') && !isNullOrUndefined(getValue(mapper.child, ds[i]))) {\n                return 2;\n            }\n            if (!isNullOrUndefined(getValue(mapper.parentID, ds[i])) || !isNullOrUndefined(getValue(mapper.hasChildren, ds[i]))) {\n                return 1;\n            }\n        }\n        return 1;\n    }\n    getGroupedData(dataSource, groupBy) {\n        let cusQuery = new Query().group(groupBy);\n        let ds = ListBase.getDataSource(dataSource, cusQuery);\n        let grpItem = [];\n        for (let j = 0; j < ds.length; j++) {\n            let itemObj = ds[j].items;\n            grpItem.push(itemObj);\n        }\n        return grpItem;\n    }\n    getSortedData(list) {\n        if (list && this.sortOrder !== 'None') {\n            list = ListBase.getDataSource(list, ListBase.addSorting(this.sortOrder, this.fields.text));\n        }\n        return list;\n    }\n    finalizeNode(element) {\n        let iNodes = selectAll('.' + IMAGE, element);\n        for (let k = 0; k < iNodes.length; k++) {\n            iNodes[k].setAttribute('alt', IMAGE);\n        }\n        if (this.isLoaded) {\n            let sNodes = selectAll('.' + SELECTED$1, element);\n            for (let i = 0; i < sNodes.length; i++) {\n                this.selectNode(sNodes[i], null);\n                break;\n            }\n            removeClass(sNodes, SELECTED$1);\n        }\n        let cNodes = selectAll('.' + LISTITEM + ':not(.' + EXPANDED + ')', element);\n        for (let j = 0; j < cNodes.length; j++) {\n            let icon = select('div.' + ICON, cNodes[j]);\n            if (icon && icon.classList.contains(EXPANDABLE)) {\n                this.disableExpandAttr(cNodes[j]);\n            }\n        }\n        let eNodes = selectAll('.' + EXPANDED, element);\n        if (!this.isInitalExpand) {\n            for (let i = 0; i < eNodes.length; i++) {\n                this.renderChildNodes(eNodes[i]);\n            }\n        }\n        removeClass(eNodes, EXPANDED);\n        this.updateList();\n        if (this.isLoaded) {\n            this.updateCheckedProp();\n        }\n    }\n    updateCheckedProp() {\n        if (this.showCheckBox) {\n            let nodes = [].concat([], this.checkedNodes);\n            this.setProperties({ checkedNodes: nodes }, true);\n        }\n    }\n    ensureIndeterminate() {\n        if (this.autoCheck) {\n            let liElement = selectAll('li', this.element);\n            let ulElement;\n            for (let i = 0; i < liElement.length; i++) {\n                if (liElement[i].classList.contains(LISTITEM)) {\n                    ulElement = select('.' + PARENTITEM, liElement[i]);\n                    if (ulElement) {\n                        this.ensureParentCheckState(liElement[i]);\n                    }\n                    else {\n                        this.ensureChildCheckState(liElement[i]);\n                    }\n                }\n            }\n        }\n        else {\n            let indeterminate = selectAll('.' + INDETERMINATE, this.element);\n            for (let i = 0; i < indeterminate.length; i++) {\n                indeterminate[i].classList.remove(INDETERMINATE);\n            }\n        }\n    }\n    ensureParentCheckState(element) {\n        if (!isNullOrUndefined(element)) {\n            if (element.classList.contains(ROOT)) {\n                return;\n            }\n            let ulElement = element;\n            if (element.classList.contains(LISTITEM)) {\n                ulElement = select('.' + PARENTITEM, element);\n            }\n            let checkedNodes = selectAll('.' + CHECK, ulElement);\n            let indeterminateNodes = selectAll('.' + INDETERMINATE, ulElement);\n            let nodes = selectAll('.' + LISTITEM, ulElement);\n            let checkBoxEle = element.getElementsByClassName(CHECKBOXWRAP)[0];\n            if (nodes.length === checkedNodes.length) {\n                this.changeState(checkBoxEle, 'check', null, true, true);\n            }\n            else if (checkedNodes.length > 0 || indeterminateNodes.length > 0) {\n                this.changeState(checkBoxEle, 'indeterminate', null, true, true);\n            }\n            else if (checkedNodes.length === 0) {\n                this.changeState(checkBoxEle, 'uncheck', null, true, true);\n            }\n            let parentUL = closest(element, '.' + PARENTITEM);\n            if (!isNullOrUndefined(parentUL)) {\n                let currentParent = closest(parentUL, '.' + LISTITEM);\n                this.ensureParentCheckState(currentParent);\n            }\n        }\n    }\n    ensureChildCheckState(element, e) {\n        if (!isNullOrUndefined(element)) {\n            let childElement = select('.' + PARENTITEM, element);\n            let checkBoxes;\n            if (!isNullOrUndefined(childElement)) {\n                checkBoxes = selectAll('.' + CHECKBOXWRAP, childElement);\n                let isChecked = element.getElementsByClassName(CHECKBOXFRAME)[0].classList.contains(CHECK);\n                let parentCheck = element.getElementsByClassName(CHECKBOXFRAME)[0].classList.contains(INDETERMINATE);\n                let childCheck = childElement.querySelectorAll('li');\n                let expandState = childElement.parentElement.getAttribute('aria-expanded');\n                let checkedState;\n                for (let index = 0; index < checkBoxes.length; index++) {\n                    let childId = childCheck[index].getAttribute('data-uid');\n                    if (!isNullOrUndefined(this.currentLoadData) && !isNullOrUndefined(getValue(this.fields.isChecked, this.currentLoadData[index]))) {\n                        checkedState = getValue(this.fields.isChecked, this.currentLoadData[index]) ? 'check' : 'uncheck';\n                        if (this.ele !== -1) {\n                            checkedState = isChecked ? 'check' : 'uncheck';\n                        }\n                        if ((checkedState === 'uncheck') && (!isUndefined(this.parentNodeCheck) && this.autoCheck\n                            && this.parentNodeCheck.indexOf(childId) !== -1)) {\n                            this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(childId), 1);\n                            checkedState = 'indeterminate';\n                        }\n                    }\n                    else {\n                        let isNodeChecked = checkBoxes[index].getElementsByClassName(CHECKBOXFRAME)[0].classList.contains(CHECK);\n                        if (isChecked) {\n                            checkedState = 'check';\n                        }\n                        else if (isNodeChecked && !this.isLoaded) {\n                            checkedState = 'check';\n                        }\n                        else if (this.checkedNodes.indexOf(childId) !== -1 && this.isLoaded && (parentCheck || isChecked)) {\n                            checkedState = 'check';\n                        }\n                        else if (childCheck[index].classList.contains(CHILD) && (!isUndefined(this.parentNodeCheck) && this.autoCheck\n                            && (isChecked || parentCheck) && this.parentNodeCheck.indexOf(childId) !== -1)) {\n                            checkedState = 'indeterminate';\n                            this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(childId), 1);\n                        }\n                        else if (this.dataType === 1 && (!isUndefined(this.parentNodeCheck) && this.autoCheck &&\n                            (isChecked || parentCheck) && this.parentNodeCheck.indexOf(childId) !== -1)) {\n                            checkedState = 'indeterminate';\n                            this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(childId), 1);\n                        }\n                        else {\n                            checkedState = 'uncheck';\n                        }\n                    }\n                    this.changeState(checkBoxes[index], checkedState, e, true, true);\n                }\n            }\n            if (this.autoCheck && this.isLoaded) {\n                this.updateParentCheckState();\n            }\n        }\n    }\n    doCheckBoxAction(nodes, doCheck) {\n        let li = selectAll('.' + LISTITEM, this.element);\n        if (!isNullOrUndefined(nodes)) {\n            for (let len = nodes.length; len >= 0; len--) {\n                let liEle;\n                if (nodes.length === 1) {\n                    liEle = this.getElement(nodes[len - 1]);\n                }\n                else {\n                    liEle = this.getElement(nodes[len]);\n                }\n                if (isNullOrUndefined(liEle)) {\n                    let node;\n                    node = nodes[len - nodes.length] ? nodes[len - nodes.length].toString() : nodes[len] ? nodes[len].toString() : null;\n                    if (node !== '' && doCheck && node) {\n                        this.setValidCheckedNode(node);\n                        this.dynamicCheckState(node, doCheck);\n                    }\n                    else if (this.checkedNodes.indexOf(node) !== -1 && node !== '' && !doCheck) {\n                        this.checkedNodes.splice(this.checkedNodes.indexOf(node), 1);\n                        let childItems = this.getChildNodes(this.treeData, node);\n                        if (childItems) {\n                            for (let i = 0; i < childItems.length; i++) {\n                                let id = childItems[i][this.fields.id] ? childItems[i][this.fields.id].toString() : null;\n                                if (this.checkedNodes.indexOf(id) !== -1) {\n                                    this.checkedNodes.splice(this.checkedNodes.indexOf(id), 1);\n                                }\n                            }\n                            if (this.parentNodeCheck.indexOf(node) !== -1) {\n                                this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(node), 1);\n                            }\n                        }\n                        if (node) {\n                            this.dynamicCheckState(node, doCheck);\n                        }\n                        this.updateField(this.treeData, this.fields, node, 'isChecked', null);\n                    }\n                    continue;\n                }\n                let checkBox = select('.' + PARENTITEM + ' .' + CHECKBOXWRAP, liEle);\n                this.validateCheckNode(checkBox, !doCheck, liEle, null);\n            }\n        }\n        else {\n            let checkBoxes = selectAll('.' + CHECKBOXWRAP, this.element);\n            if (this.loadOnDemand) {\n                for (let index = 0; index < checkBoxes.length; index++) {\n                    this.updateFieldChecked(checkBoxes[index], doCheck);\n                    this.changeState(checkBoxes[index], doCheck ? 'check' : 'uncheck', null, null, null, doCheck);\n                }\n            }\n            else {\n                for (let index = 0; index < checkBoxes.length; index++) {\n                    this.updateFieldChecked(checkBoxes[index], doCheck);\n                    this.changeState(checkBoxes[index], doCheck ? 'check' : 'uncheck');\n                }\n            }\n        }\n        if (nodes) {\n            for (let j = 0; j < nodes.length; j++) {\n                let node = nodes[j] ? nodes[j].toString() : '';\n                if (!doCheck) {\n                    this.updateField(this.treeData, this.fields, node, 'isChecked', null);\n                }\n            }\n        }\n        if (this.autoCheck) {\n            this.updateParentCheckState();\n        }\n    }\n    updateFieldChecked(checkbox, doCheck) {\n        let currLi = closest(checkbox, '.' + LISTITEM);\n        let id = currLi.getAttribute('data-uid');\n        let nodeDetails = this.getNodeData(currLi);\n        if (nodeDetails.isChecked === 'true' && !doCheck) {\n            this.updateField(this.treeData, this.fields, id, 'isChecked', null);\n        }\n    }\n    /**\n     * Changes the parent and child  check state while changing the checkedNodes via setmodel\n     */\n    dynamicCheckState(node, doCheck) {\n        if (this.dataType === 1) {\n            let count = 0;\n            let resultId = new DataManager(this.treeData).executeLocal(new Query().where(this.fields.id, 'equal', node, true));\n            if (resultId[0]) {\n                let id = resultId[0][this.fields.id] ? resultId[0][this.fields.id].toString() : null;\n                let parent = resultId[0][this.fields.parentID] ? resultId[0][this.fields.parentID].toString() : null;\n                let parentElement = this.element.querySelector('[data-uid=\"' + parent + '\"]');\n                let indeterminate = parentElement ? select('.' + INDETERMINATE, parentElement) : null;\n                let check = parentElement ? select('.' + CHECK, parentElement) : null;\n                let element = this.element.querySelector('[data-uid=\"' + id + '\"]');\n                let childNodes = this.getChildNodes(this.treeData, parent);\n                if (childNodes) {\n                    for (let i = 0; i < childNodes.length; i++) {\n                        let childId = childNodes[i][this.fields.id] ? childNodes[i][this.fields.id].toString() : null;\n                        if (this.checkedNodes.indexOf(childId) !== -1) {\n                            count++;\n                        }\n                    }\n                }\n                if (this.checkedNodes.indexOf(node) !== -1 && parentElement && (id === node) && this.autoCheck) {\n                    this.changeState(parentElement, 'indeterminate', null);\n                }\n                else if (this.checkedNodes.indexOf(node) === -1 && element && (id === node) && !doCheck) {\n                    this.changeState(element, 'uncheck', null);\n                }\n                else if (this.checkedNodes.indexOf(node) !== -1 && element && (id === node) && doCheck) {\n                    this.changeState(element, 'check', null);\n                }\n                else if (this.checkedNodes.indexOf(node) === -1 && !element && parentElement && (id === node) && this.autoCheck\n                    && count !== 0) {\n                    this.changeState(parentElement, 'indeterminate', null);\n                }\n                else if (this.checkedNodes.indexOf(node) === -1 && !element && parentElement && (id === node) && this.autoCheck\n                    && count === 0) {\n                    this.changeState(parentElement, 'uncheck', null);\n                }\n                else if (!element && !parentElement && (id === node) && this.autoCheck) {\n                    this.updateIndeterminate(node, doCheck);\n                }\n            }\n        }\n        else if (this.dataType === 2 || (this.fields.dataSource instanceof DataManager &&\n            this.isOffline)) {\n            let id;\n            let parentElement;\n            let check;\n            for (let i = 0; i < this.treeData.length; i++) {\n                id = this.treeData[i][this.fields.id] ? this.treeData[i][this.fields.id].toString() : '';\n                parentElement = this.element.querySelector('[data-uid=\"' + id + '\"]');\n                check = parentElement ? select('.' + CHECK, parentElement) : null;\n                if (this.checkedNodes.indexOf(id) === -1 && parentElement && check && !doCheck) {\n                    this.changeState(parentElement, 'uncheck', null);\n                }\n                let subChild = getValue(this.fields.child.toString(), this.treeData[i]);\n                if (subChild) {\n                    this.updateChildIndeterminate(subChild, id, node, doCheck, id);\n                }\n            }\n        }\n    }\n    /**\n     * updates the parent and child  check state while changing the checkedNodes via setmodel for listData\n     */\n    updateIndeterminate(node, doCheck) {\n        let indeterminateData = this.getTreeData(node);\n        let count = 0;\n        let parent;\n        if (this.dataType === 1) {\n            parent = indeterminateData[0][this.fields.parentID] ? indeterminateData[0][this.fields.parentID].toString() : null;\n        }\n        let childNodes = this.getChildNodes(this.treeData, parent);\n        if (childNodes) {\n            for (let i = 0; i < childNodes.length; i++) {\n                let childId = childNodes[i][this.fields.id] ? childNodes[i][this.fields.id].toString() : null;\n                if (this.checkedNodes.indexOf(childId) !== -1) {\n                    count++;\n                }\n            }\n        }\n        let parentElement = this.element.querySelector('[data-uid=\"' + parent + '\"]');\n        if (parentElement && doCheck) {\n            this.changeState(parentElement, 'indeterminate', null);\n        }\n        else if (!doCheck && parentElement && this.parentNodeCheck.indexOf(parent) === -1 && count !== 0) {\n            this.changeState(parentElement, 'indeterminate', null);\n        }\n        else if (!doCheck && parentElement && this.parentNodeCheck.indexOf(parent) === -1 && count === 0) {\n            this.changeState(parentElement, 'uncheck', null);\n        }\n        else if (!parentElement) {\n            if (!doCheck && this.checkedNodes.indexOf(parent) === -1 && this.parentNodeCheck.indexOf(parent) !== -1) {\n                this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(parent), 1);\n            }\n            else if (doCheck && this.checkedNodes.indexOf(parent) === -1 && this.parentNodeCheck.indexOf(parent) === -1) {\n                this.parentNodeCheck.push(parent);\n            }\n            else if (!doCheck && this.checkedNodes.indexOf(parent) !== -1 && this.parentNodeCheck.indexOf(parent) === -1\n                && count !== 0) {\n                this.parentNodeCheck.push(parent);\n            }\n            this.updateIndeterminate(parent, doCheck);\n            if (this.checkedNodes.indexOf(parent) !== -1 && !doCheck) {\n                this.checkedNodes.splice(this.checkedNodes.indexOf(parent), 1);\n            }\n        }\n    }\n    /**\n     * updates the parent and child  check state while changing the checkedNodes via setmodel for hierarchical data\n     */\n    updateChildIndeterminate(subChild, parent, node, doCheck, child) {\n        let count = 0;\n        for (let j = 0; j < subChild.length; j++) {\n            let subId = subChild[j][this.fields.id] ? subChild[j][this.fields.id].toString() : '';\n            if (this.checkedNodes.indexOf(subId) !== -1) {\n                count++;\n            }\n            let parentElement = this.element.querySelector('[data-uid=\"' + parent + '\"]');\n            let indeterminate = parentElement ? select('.' + INDETERMINATE, parentElement) : null;\n            let check = parentElement ? select('.' + CHECK, parentElement) : null;\n            let element = this.element.querySelector('[data-uid=\"' + subId + '\"]');\n            let childElementCheck = element ? select('.' + CHECK, element) : null;\n            if (this.checkedNodes.indexOf(node) !== -1 && parentElement && (subId === node) && this.autoCheck) {\n                this.changeState(parentElement, 'indeterminate', null);\n            }\n            else if (this.checkedNodes.indexOf(node) === -1 && parentElement && !element && (subId === node) && !doCheck) {\n                if (this.autoCheck) {\n                    this.changeState(parentElement, 'uncheck', null);\n                }\n                else {\n                    if (count !== 0) {\n                        this.changeState(parentElement, 'indeterminate', null);\n                    }\n                    else {\n                        this.changeState(parentElement, 'uncheck', null);\n                    }\n                }\n            }\n            else if (this.checkedNodes.indexOf(node) === -1 && element && (subId === node) && !doCheck) {\n                this.changeState(element, 'uncheck', null);\n            }\n            else if (this.checkedNodes.indexOf(node) === -1 && indeterminate && (subId === node) && this.autoCheck && count === 0\n                && !doCheck) {\n                indeterminate.classList.remove(INDETERMINATE);\n            }\n            else if (this.checkedNodes.indexOf(node) === -1 && !element && check && (subId === node) && count === 0) {\n                this.changeState(parentElement, 'uncheck', null);\n            }\n            else if (this.checkedNodes.indexOf(subId) === -1 && element && childElementCheck && count === 0) {\n                this.changeState(element, 'uncheck', null);\n            }\n            else if (!element && !parentElement && (subId === node) || (this.parentNodeCheck.indexOf(parent) !== -1) && this.autoCheck) {\n                let childElement = this.element.querySelector('[data-uid=\"' + child + '\"]');\n                if (doCheck && count !== 0) {\n                    this.changeState(childElement, 'indeterminate', null);\n                }\n                else if (doCheck && count === subChild.length && this.checkedNodes.indexOf(parent) === -1) {\n                    this.checkedNodes.push(parent);\n                }\n                else if (!doCheck && count === 0 && this.parentNodeCheck.indexOf(parent) !== -1) {\n                    this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(parent));\n                }\n                if (this.parentNodeCheck.indexOf(parent) === -1) {\n                    this.parentNodeCheck.push(parent);\n                }\n            }\n            let innerChild = getValue(this.fields.child.toString(), subChild[j]);\n            if (innerChild) {\n                this.updateChildIndeterminate(innerChild, subId, node, doCheck, child);\n            }\n        }\n    }\n    changeState(wrapper, state, e, isPrevent, isAdd, doCheck) {\n        let eventArgs;\n        let currLi = closest(wrapper, '.' + LISTITEM);\n        if (!isPrevent) {\n            this.checkActionNodes = [];\n            eventArgs = this.getCheckEvent(currLi, state, e);\n            this.trigger('nodeChecking', eventArgs, (observedArgs) => {\n                if (!observedArgs.cancel) {\n                    this.nodeCheckAction(wrapper, state, currLi, observedArgs, e, isPrevent, isAdd, doCheck);\n                }\n            });\n        }\n        else {\n            this.nodeCheckAction(wrapper, state, currLi, eventArgs, e, isPrevent, isAdd, doCheck);\n        }\n    }\n    nodeCheckAction(wrapper, state, currLi, eventArgs, e, isPrevent, isAdd, doCheck) {\n        let ariaState;\n        let frameSpan = wrapper.getElementsByClassName(CHECKBOXFRAME)[0];\n        if (state === 'check' && !frameSpan.classList.contains(CHECK)) {\n            frameSpan.classList.remove(INDETERMINATE);\n            frameSpan.classList.add(CHECK);\n            this.addCheck(currLi);\n            ariaState = 'true';\n        }\n        else if (state === 'uncheck' && (frameSpan.classList.contains(CHECK) || frameSpan.classList.contains(INDETERMINATE))) {\n            removeClass([frameSpan], [CHECK, INDETERMINATE]);\n            this.removeCheck(currLi);\n            ariaState = 'false';\n        }\n        else if (state === 'indeterminate' && !frameSpan.classList.contains(INDETERMINATE) && this.autoCheck) {\n            frameSpan.classList.remove(CHECK);\n            frameSpan.classList.add(INDETERMINATE);\n            this.removeCheck(currLi);\n            ariaState = 'mixed';\n        }\n        ariaState = state === 'check' ? 'true' : state === 'uncheck' ? 'false' : ariaState;\n        if (!isNullOrUndefined(ariaState)) {\n            wrapper.setAttribute('aria-checked', ariaState);\n        }\n        if (isAdd) {\n            let data = [].concat([], this.checkActionNodes);\n            eventArgs = this.getCheckEvent(currLi, state, e);\n            if (isUndefined(isPrevent)) {\n                eventArgs.data = data;\n            }\n        }\n        if (doCheck !== undefined) {\n            this.ensureStateChange(currLi, doCheck);\n        }\n        if (!isPrevent) {\n            if (!isNullOrUndefined(ariaState)) {\n                wrapper.setAttribute('aria-checked', ariaState);\n                this.allowServerDataBinding = true;\n                this.updateServerProperties(\"check\");\n                this.allowServerDataBinding = false;\n                eventArgs.data[0].checked = ariaState;\n                this.trigger('nodeChecked', eventArgs);\n                this.checkActionNodes = [];\n            }\n        }\n    }\n    addCheck(liEle) {\n        let id = liEle.getAttribute('data-uid');\n        if (!isNullOrUndefined(id) && this.checkedNodes.indexOf(id) === -1) {\n            this.checkedNodes.push(id);\n        }\n    }\n    removeCheck(liEle) {\n        let index = this.checkedNodes.indexOf(liEle.getAttribute('data-uid'));\n        if (index > -1) {\n            this.checkedNodes.splice(index, 1);\n        }\n    }\n    getCheckEvent(currLi, action, e) {\n        this.checkActionNodes.push(this.getNodeData(currLi));\n        let nodeData = this.checkActionNodes;\n        return { action: action, cancel: false, isInteracted: isNullOrUndefined(e) ? false : true, node: currLi, data: nodeData };\n    }\n    finalize() {\n        let firstUl = select('.' + PARENTITEM, this.element);\n        if (!isNullOrUndefined(firstUl)) {\n            firstUl.setAttribute('role', treeAriaAttr.treeRole);\n            this.setMultiSelect(this.allowMultiSelection);\n            let firstNode = select('.' + LISTITEM, this.element);\n            if (firstNode) {\n                addClass([firstNode], FOCUS);\n                this.updateIdAttr(null, firstNode);\n            }\n            this.renderReactTemplates();\n            this.hasPid = this.rootData[0] ? this.rootData[0].hasOwnProperty(this.fields.parentID) : false;\n            this.doExpandAction();\n        }\n    }\n    doExpandAction() {\n        let eUids = this.expandedNodes;\n        if (this.isInitalExpand && eUids.length > 0) {\n            this.setProperties({ expandedNodes: [] }, true);\n            if (this.isBlazorPlatform && !this.initialRender) {\n                return;\n            }\n            // tslint:disable\n            if (this.fields.dataSource instanceof DataManager && (this.fields.dataSource.adaptorName !== 'BlazorAdaptor')) {\n                this.expandGivenNodes(eUids);\n            }\n            else {\n                for (let i = 0; i < eUids.length; i++) {\n                    let eNode = select('[data-uid=\"' + eUids[i] + '\"]', this.element);\n                    if (!isNullOrUndefined(eNode)) {\n                        let icon = select('.' + EXPANDABLE, select('.' + TEXTWRAP, eNode));\n                        if (!isNullOrUndefined(icon)) {\n                            this.expandAction(eNode, icon, null);\n                        }\n                    }\n                    else {\n                        if (eUids[i] && this.expandChildren.indexOf(eUids[i]) === -1) {\n                            this.expandChildren.push(eUids[i].toString());\n                        }\n                        continue;\n                    }\n                }\n                this.afterFinalized();\n            }\n        }\n        else {\n            this.afterFinalized();\n        }\n    }\n    expandGivenNodes(arr) {\n        let proxy = this;\n        this.expandCallback(arr[this.index], () => {\n            proxy.index++;\n            if (proxy.index < arr.length) {\n                proxy.expandGivenNodes(arr);\n            }\n            else {\n                proxy.afterFinalized();\n            }\n        });\n    }\n    expandCallback(eUid, callback) {\n        let eNode = select('[data-uid=\"' + eUid + '\"]', this.element);\n        if (!isNullOrUndefined(eNode)) {\n            let icon = select('.' + EXPANDABLE, select('.' + TEXTWRAP, eNode));\n            if (!isNullOrUndefined(icon)) {\n                this.expandAction(eNode, icon, null, false, callback);\n            }\n            else {\n                callback();\n            }\n        }\n        else {\n            callback();\n        }\n    }\n    afterFinalized() {\n        if (!this.isBlazorPlatform || (this.isBlazorPlatform && !this.initialRender)) {\n            this.doSelectionAction();\n        }\n        this.updateCheckedProp();\n        if (this.isBlazorPlatform) {\n            if (this.initialRender) {\n                this.setCheckedNodes(this.checkedNodes);\n            }\n            this.updateInstance();\n            this.initialRender = false;\n        }\n        this.isAnimate = true;\n        this.isInitalExpand = false;\n        if (!this.isLoaded || this.isFieldChange) {\n            let eventArgs = { data: this.treeData };\n            this.trigger('dataBound', eventArgs);\n        }\n        this.isLoaded = true;\n    }\n    doSelectionAction() {\n        let sNodes = selectAll('.' + SELECTED$1, this.element);\n        let sUids = this.selectedNodes;\n        if (sUids.length > 0) {\n            this.setProperties({ selectedNodes: [] }, true);\n            for (let i = 0; i < sUids.length; i++) {\n                let sNode = select('[data-uid=\"' + sUids[i] + '\"]', this.element);\n                if (sNode && !(sNode.classList.contains('e-active'))) {\n                    this.selectNode(sNode, null, true);\n                }\n                else {\n                    this.selectedNodes.push(sUids[i]);\n                }\n                if (!this.allowMultiSelection) {\n                    break;\n                }\n            }\n        }\n        else {\n            this.selectGivenNodes(sNodes);\n        }\n        removeClass(sNodes, SELECTED$1);\n    }\n    selectGivenNodes(sNodes) {\n        for (let i = 0; i < sNodes.length; i++) {\n            if (!sNodes[i].classList.contains('e-disable')) {\n                this.selectNode(sNodes[i], null, true);\n            }\n            if (!this.allowMultiSelection) {\n                break;\n            }\n        }\n    }\n    clickHandler(event) {\n        let target = event.originalEvent.target;\n        EventHandler.remove(this.element, 'contextmenu', this.preventContextMenu);\n        if (!target || this.dragStartAction) {\n            return;\n        }\n        else {\n            let classList$$1 = target.classList;\n            let li = closest(target, '.' + LISTITEM);\n            if (!li) {\n                return;\n            }\n            else if (event.originalEvent.which !== 3) {\n                let rippleElement = select('.' + RIPPLEELMENT, li);\n                let rippleIcons = select('.' + ICON, li);\n                this.removeHover();\n                this.setFocusElement(li);\n                if (this.showCheckBox && !li.classList.contains('e-disable')) {\n                    let checkWrapper = closest(target, '.' + CHECKBOXWRAP);\n                    if (!isNullOrUndefined(checkWrapper)) {\n                        let checkElement = select('.' + CHECKBOXFRAME, checkWrapper);\n                        this.validateCheckNode(checkWrapper, checkElement.classList.contains(CHECK), li, event.originalEvent);\n                        this.triggerClickEvent(event.originalEvent, li);\n                        return;\n                    }\n                }\n                if (classList$$1.contains(EXPANDABLE)) {\n                    this.expandAction(li, target, event);\n                }\n                else if (classList$$1.contains(COLLAPSIBLE)) {\n                    this.collapseNode(li, target, event);\n                }\n                else if (rippleElement && rippleIcons) {\n                    if (rippleIcons.classList.contains(RIPPLE) && rippleIcons.classList.contains(EXPANDABLE)) {\n                        this.expandAction(li, rippleIcons, event);\n                    }\n                    else if (rippleIcons.classList.contains(RIPPLE) && rippleIcons.classList.contains(COLLAPSIBLE)) {\n                        this.collapseNode(li, rippleIcons, event);\n                    }\n                    else if (!classList$$1.contains(PARENTITEM) && !classList$$1.contains(LISTITEM)) {\n                        this.toggleSelect(li, event.originalEvent, false);\n                    }\n                }\n                else {\n                    if (!classList$$1.contains(PARENTITEM) && !classList$$1.contains(LISTITEM)) {\n                        this.toggleSelect(li, event.originalEvent, false);\n                    }\n                }\n            }\n            this.triggerClickEvent(event.originalEvent, li);\n        }\n    }\n    nodeCheckedEvent(wrapper, isCheck, e) {\n        let currLi = closest(wrapper, '.' + LISTITEM);\n        let eventArgs = this.getCheckEvent(wrapper, isCheck ? 'uncheck' : 'check', e);\n        eventArgs.data = eventArgs.data.splice(0, eventArgs.data.length - 1);\n        this.trigger('nodeChecked', eventArgs);\n    }\n    triggerClickEvent(e, li) {\n        let eventArgs = {\n            event: e,\n            node: li,\n        };\n        this.trigger('nodeClicked', eventArgs);\n    }\n    expandNode(currLi, icon, loaded) {\n        this.renderReactTemplates();\n        if (icon.classList.contains(LOAD)) {\n            this.hideSpinner(icon);\n        }\n        if (!this.initialRender) {\n            icon.classList.add('interaction');\n        }\n        if (loaded !== true || (loaded === true && currLi.classList.contains('e-expanded'))) {\n            if (this.preventExpand !== true) {\n                removeClass([icon], EXPANDABLE);\n                addClass([icon], COLLAPSIBLE);\n                let start = 0;\n                let end = 0;\n                let proxy = this;\n                let ul = select('.' + PARENTITEM, currLi);\n                let liEle = currLi;\n                this.setHeight(liEle, ul);\n                let activeElement = select('.' + LISTITEM + '.' + ACTIVE, currLi);\n                if (this.isAnimate && !this.isRefreshed) {\n                    this.aniObj.animate(ul, {\n                        name: this.animation.expand.effect,\n                        duration: this.animation.expand.duration,\n                        timingFunction: this.animation.expand.easing,\n                        begin: (args) => {\n                            liEle.style.overflow = 'hidden';\n                            if (!isNullOrUndefined(activeElement) && activeElement instanceof HTMLElement) {\n                                activeElement.classList.add(ITEM_ANIMATION_ACTIVE);\n                            }\n                            start = liEle.offsetHeight;\n                            end = select('.' + TEXTWRAP, currLi).offsetHeight;\n                        },\n                        progress: (args) => {\n                            args.element.style.display = 'block';\n                            proxy.animateHeight(args, start, end);\n                        },\n                        end: (args) => {\n                            args.element.style.display = 'block';\n                            if (!isNullOrUndefined(activeElement) && activeElement instanceof HTMLElement) {\n                                activeElement.classList.remove(ITEM_ANIMATION_ACTIVE);\n                            }\n                            this.expandedNode(liEle, ul, icon);\n                        }\n                    });\n                }\n                else {\n                    this.expandedNode(liEle, ul, icon);\n                }\n            }\n        }\n        else {\n            let ul = select('.' + PARENTITEM, currLi);\n            ul.style.display = 'none';\n            if (this.fields.dataSource instanceof DataManager === true) {\n                this.preventExpand = false;\n            }\n        }\n        if (this.initialRender) {\n            icon.classList.add('interaction');\n        }\n    }\n    expandedNode(currLi, ul, icon) {\n        ul.style.display = 'block';\n        currLi.style.display = 'block';\n        currLi.style.overflow = '';\n        currLi.style.height = '';\n        removeClass([icon], PROCESS);\n        this.addExpand(currLi);\n        this.allowServerDataBinding = true;\n        this.updateServerProperties(\"expand\");\n        this.allowServerDataBinding = false;\n        if (this.isLoaded && this.expandArgs && !this.isRefreshed) {\n            this.expandArgs = this.getExpandEvent(currLi, null);\n            this.trigger('nodeExpanded', this.expandArgs);\n        }\n    }\n    addExpand(liEle) {\n        liEle.setAttribute('aria-expanded', 'true');\n        removeClass([liEle], NODECOLLAPSED);\n        let id = liEle.getAttribute('data-uid');\n        if (!isNullOrUndefined(id) && this.expandedNodes.indexOf(id) === -1) {\n            this.expandedNodes.push(id);\n        }\n    }\n    collapseNode(currLi, icon, e) {\n        if (icon.classList.contains(PROCESS)) {\n            return;\n        }\n        else {\n            addClass([icon], PROCESS);\n        }\n        let colArgs;\n        if (this.isLoaded) {\n            colArgs = this.getExpandEvent(currLi, e);\n            this.trigger('nodeCollapsing', colArgs, (observedArgs) => {\n                if (observedArgs.cancel) {\n                    removeClass([icon], PROCESS);\n                }\n                else {\n                    this.nodeCollapseAction(currLi, icon, observedArgs);\n                }\n            });\n        }\n        else {\n            this.nodeCollapseAction(currLi, icon, colArgs);\n        }\n    }\n    nodeCollapseAction(currLi, icon, colArgs) {\n        removeClass([icon], COLLAPSIBLE);\n        addClass([icon], EXPANDABLE);\n        let start = 0;\n        let end = 0;\n        let proxy = this;\n        let ul = select('.' + PARENTITEM, currLi);\n        let liEle = currLi;\n        let activeElement = select('.' + LISTITEM + '.' + ACTIVE, currLi);\n        if (this.isAnimate) {\n            this.aniObj.animate(ul, {\n                name: this.animation.collapse.effect,\n                duration: this.animation.collapse.duration,\n                timingFunction: this.animation.collapse.easing,\n                begin: (args) => {\n                    liEle.style.overflow = 'hidden';\n                    if (!isNullOrUndefined(activeElement) && activeElement instanceof HTMLElement) {\n                        activeElement.classList.add(ITEM_ANIMATION_ACTIVE);\n                    }\n                    start = select('.' + TEXTWRAP, currLi).offsetHeight;\n                    end = liEle.offsetHeight;\n                },\n                progress: (args) => {\n                    proxy.animateHeight(args, start, end);\n                },\n                end: (args) => {\n                    args.element.style.display = 'none';\n                    if (!isNullOrUndefined(activeElement) && activeElement instanceof HTMLElement) {\n                        activeElement.classList.remove(ITEM_ANIMATION_ACTIVE);\n                    }\n                    this.collapsedNode(liEle, ul, icon, colArgs);\n                }\n            });\n        }\n        else {\n            this.collapsedNode(liEle, ul, icon, colArgs);\n        }\n    }\n    collapsedNode(liEle, ul, icon, colArgs) {\n        ul.style.display = 'none';\n        liEle.style.overflow = '';\n        liEle.style.height = '';\n        removeClass([icon], PROCESS);\n        this.allowServerDataBinding = true;\n        this.updateServerProperties(\"expand\");\n        this.allowServerDataBinding = false;\n        this.removeExpand(liEle);\n        if (this.isLoaded) {\n            this.trigger('nodeCollapsed', colArgs);\n        }\n    }\n    removeExpand(liEle, toRemove) {\n        if (toRemove) {\n            liEle.removeAttribute('aria-expanded');\n        }\n        else {\n            this.disableExpandAttr(liEle);\n        }\n        let index = this.expandedNodes.indexOf(liEle.getAttribute('data-uid'));\n        if (index > -1) {\n            this.expandedNodes.splice(index, 1);\n        }\n    }\n    disableExpandAttr(liEle) {\n        liEle.setAttribute('aria-expanded', 'false');\n        addClass([liEle], NODECOLLAPSED);\n    }\n    setHeight(currLi, ul) {\n        ul.style.display = 'block';\n        ul.style.visibility = 'hidden';\n        currLi.style.height = currLi.offsetHeight + 'px';\n        ul.style.display = 'none';\n        ul.style.visibility = '';\n    }\n    animateHeight(args, start, end) {\n        let remaining = (args.duration - args.timeStamp) / args.duration;\n        let currentHeight = (end - start) * remaining + start;\n        args.element.parentElement.style.height = currentHeight + 'px';\n    }\n    renderChildNodes(parentLi, expandChild, callback, loaded) {\n        let eicon = select('div.' + ICON, parentLi);\n        if (isNullOrUndefined(eicon)) {\n            return;\n        }\n        this.showSpinner(eicon);\n        let childItems;\n        // tslint:disable\n        if (this.fields.dataSource instanceof DataManager && (this.fields.dataSource.adaptorName !== 'BlazorAdaptor')) {\n            let level = this.parents(parentLi, '.' + PARENTITEM).length;\n            let mapper = this.getChildFields(this.fields, level, 1);\n            if (isNullOrUndefined(mapper) || isNullOrUndefined(mapper.dataSource)) {\n                detach(eicon);\n                this.removeExpand(parentLi, true);\n                return;\n            }\n            this.treeList.push('false');\n            if (this.fields.dataSource instanceof DataManager && this.isOffline) {\n                this.treeList.pop();\n                childItems = this.getChildNodes(this.treeData, parentLi.getAttribute('data-uid'));\n                this.loadChild(childItems, mapper, eicon, parentLi, expandChild, callback, loaded);\n                this.updateTemplateForBlazor();\n            }\n            else {\n                mapper.dataSource.executeQuery(this.getQuery(mapper, parentLi.getAttribute('data-uid'))).then((e) => {\n                    this.treeList.pop();\n                    childItems = e.result;\n                    if (this.dataType === 1) {\n                        this.dataType = 2;\n                    }\n                    this.loadChild(childItems, mapper, eicon, parentLi, expandChild, callback, loaded);\n                    this.updateTemplateForBlazor();\n                }).catch((e) => {\n                    this.trigger('actionFailure', { error: e });\n                });\n            }\n        }\n        else {\n            childItems = this.getChildNodes(this.treeData, parentLi.getAttribute('data-uid'));\n            this.currentLoadData = childItems;\n            if (isNullOrUndefined(childItems) || childItems.length === 0) {\n                detach(eicon);\n                this.removeExpand(parentLi, true);\n                return;\n            }\n            else {\n                if (!this.isBlazorPlatform || !this.initialRender) {\n                    this.listBaseOption.ariaAttributes.level = parseFloat(parentLi.getAttribute('aria-level')) + 1;\n                    parentLi.appendChild(ListBase.createList(this.createElement, this.getSortedData(childItems), this.listBaseOption));\n                }\n                this.expandNode(parentLi, eicon, loaded);\n                this.setSelectionForChildNodes(childItems);\n                this.ensureCheckNode(parentLi);\n                this.finalizeNode(parentLi);\n                if (this.loadOnDemand && this.nodeTemplate && this.isBlazorPlatform && !this.isStringTemplate) {\n                    this.updateBlazorTemplate();\n                }\n                this.disableTreeNodes(childItems);\n                this.renderSubChild(parentLi, expandChild, loaded);\n            }\n        }\n    }\n    loadChild(childItems, mapper, eicon, parentLi, expandChild, callback, loaded) {\n        this.currentLoadData = childItems;\n        if (isNullOrUndefined(childItems) || childItems.length === 0) {\n            detach(eicon);\n            this.removeExpand(parentLi, true);\n        }\n        else {\n            this.updateListProp(mapper);\n            if (this.fields.dataSource instanceof DataManager && !this.isOffline) {\n                let id = parentLi.getAttribute('data-uid');\n                let nodeData = this.getNodeObject(id);\n                setValue('child', childItems, nodeData);\n            }\n            this.listBaseOption.ariaAttributes.level = parseFloat(parentLi.getAttribute('aria-level')) + 1;\n            parentLi.appendChild(ListBase.createList(this.createElement, childItems, this.listBaseOption));\n            this.expandNode(parentLi, eicon, loaded);\n            this.setSelectionForChildNodes(childItems);\n            this.ensureCheckNode(parentLi);\n            this.finalizeNode(parentLi);\n            this.disableTreeNodes(childItems);\n            this.renderSubChild(parentLi, expandChild, loaded);\n        }\n        if (callback) {\n            callback();\n        }\n        if (this.treeList.length === 0 && !this.isLoaded) {\n            this.finalize();\n        }\n    }\n    disableTreeNodes(childItems) {\n        let i = 0;\n        while (i < childItems.length) {\n            let id = childItems[i][this.fields.id] ? childItems[i][this.fields.id].toString() : null;\n            if (this.disableNode !== undefined && this.disableNode.indexOf(id) !== -1) {\n                this.doDisableAction([id]);\n            }\n            i++;\n        }\n    }\n    /**\n     * Sets the child Item in selectedState while rendering the child node\n     */\n    setSelectionForChildNodes(nodes) {\n        let i;\n        for (i = 0; i < nodes.length; i++) {\n            let id = nodes[i][this.fields.id] ? nodes[i][this.fields.id].toString() : null;\n            if (this.selectedNodes !== undefined && this.selectedNodes.indexOf(id) !== -1) {\n                this.doSelectionAction();\n            }\n        }\n    }\n    ensureCheckNode(element) {\n        if (this.showCheckBox) {\n            this.ele = (this.checkedElement) ? this.checkedElement.indexOf(element.getAttribute('data-uid')) : null;\n            if (this.autoCheck) {\n                this.ensureChildCheckState(element);\n                this.ensureParentCheckState(element);\n            }\n        }\n        this.currentLoadData = null;\n    }\n    getFields(mapper, nodeLevel, dataLevel) {\n        if (nodeLevel === dataLevel) {\n            return mapper;\n        }\n        else {\n            return this.getFields(this.getChildMapper(mapper), nodeLevel, dataLevel + 1);\n        }\n    }\n    getChildFields(mapper, nodeLevel, dataLevel) {\n        if (nodeLevel === dataLevel) {\n            return this.getChildMapper(mapper);\n        }\n        else {\n            return this.getChildFields(this.getChildMapper(mapper), nodeLevel, dataLevel + 1);\n        }\n    }\n    getChildMapper(mapper) {\n        return (typeof mapper.child === 'string' || isNullOrUndefined(mapper.child)) ? mapper : mapper.child;\n    }\n    getChildNodes(obj, parentId, isRoot = false) {\n        let childNodes;\n        if (isNullOrUndefined(obj)) {\n            return childNodes;\n        }\n        else if (this.dataType === 1) {\n            return this.getChildGroup(this.groupedData, parentId, isRoot);\n        }\n        else {\n            if (typeof this.fields.child === 'string') {\n                for (let i = 0, objlen = obj.length; i < objlen; i++) {\n                    let dataId = getValue(this.fields.id, obj[i]);\n                    if (dataId && dataId.toString() === parentId) {\n                        return getValue(this.fields.child, obj[i]);\n                    }\n                    else if (!isNullOrUndefined(getValue(this.fields.child, obj[i]))) {\n                        childNodes = this.getChildNodes(getValue(this.fields.child, obj[i]), parentId);\n                        if (childNodes !== undefined) {\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        return childNodes;\n    }\n    getChildGroup(data, parentId, isRoot) {\n        let childNodes;\n        if (isNullOrUndefined(data)) {\n            return childNodes;\n        }\n        for (let i = 0, objlen = data.length; i < objlen; i++) {\n            if (!isNullOrUndefined(data[i][0]) && !isNullOrUndefined(getValue(this.fields.parentID, data[i][0]))) {\n                if (getValue(this.fields.parentID, data[i][0]).toString() === parentId) {\n                    return data[i];\n                }\n            }\n            else if (isRoot) {\n                return data[i];\n            }\n            else {\n                return [];\n            }\n        }\n        return childNodes;\n    }\n    renderSubChild(element, expandChild, loaded) {\n        if (expandChild) {\n            let cIcons = selectAll('.' + EXPANDABLE, element);\n            for (let i = 0, len = cIcons.length; i < len; i++) {\n                let icon = cIcons[i];\n                if (element.querySelector('.e-icons') !== cIcons[i]) {\n                    let curLi = closest(icon, '.' + LISTITEM);\n                    this.expandArgs = this.getExpandEvent(curLi, null);\n                    if (loaded !== true) {\n                        this.trigger('nodeExpanding', this.expandArgs);\n                    }\n                    this.renderChildNodes(curLi, expandChild, null, loaded);\n                }\n            }\n        }\n    }\n    toggleSelect(li, e, multiSelect) {\n        if (!li.classList.contains('e-disable')) {\n            if (this.allowMultiSelection && ((e && e.ctrlKey) || multiSelect) && this.isActive(li)) {\n                this.unselectNode(li, e);\n            }\n            else {\n                this.selectNode(li, e, multiSelect);\n            }\n        }\n    }\n    isActive(li) {\n        return li.classList.contains(ACTIVE) ? true : false;\n    }\n    selectNode(li, e, multiSelect) {\n        if (isNullOrUndefined(li) || (!this.allowMultiSelection && this.isActive(li) && !isNullOrUndefined(e))) {\n            this.setFocusElement(li);\n            return;\n        }\n        let eventArgs;\n        if (this.isLoaded) {\n            eventArgs = this.getSelectEvent(li, 'select', e);\n            this.trigger('nodeSelecting', eventArgs, (observedArgs) => {\n                if (!observedArgs.cancel) {\n                    this.nodeSelectAction(li, e, observedArgs, multiSelect);\n                }\n            });\n        }\n        else {\n            this.nodeSelectAction(li, e, eventArgs, multiSelect);\n        }\n    }\n    nodeSelectAction(li, e, eventArgs, multiSelect) {\n        if (!this.allowMultiSelection || (!multiSelect && (!e || (e && !e.ctrlKey)))) {\n            this.removeSelectAll();\n        }\n        if (this.allowMultiSelection && e && e.shiftKey) {\n            if (!this.startNode) {\n                this.startNode = li;\n            }\n            let startIndex = this.liList.indexOf(this.startNode);\n            let endIndex = this.liList.indexOf(li);\n            if (startIndex > endIndex) {\n                let temp = startIndex;\n                startIndex = endIndex;\n                endIndex = temp;\n            }\n            for (let i = startIndex; i <= endIndex; i++) {\n                let currNode = this.liList[i];\n                if (isVisible(currNode) && !currNode.classList.contains('e-disable')) {\n                    this.addSelect(currNode);\n                }\n            }\n        }\n        else {\n            this.startNode = li;\n            this.addSelect(li);\n        }\n        this.setFocusElement(li);\n        if (this.isLoaded) {\n            this.allowServerDataBinding = true;\n            this.updateServerProperties(\"select\");\n            this.allowServerDataBinding = false;\n            eventArgs.nodeData = this.getNodeData(li);\n            this.trigger('nodeSelected', eventArgs);\n        }\n    }\n    unselectNode(li, e) {\n        let eventArgs;\n        if (this.isLoaded) {\n            eventArgs = this.getSelectEvent(li, 'un-select', e);\n            this.trigger('nodeSelecting', eventArgs, (observedArgs) => {\n                if (!observedArgs.cancel) {\n                    this.allowServerDataBinding = true;\n                    this.updateServerProperties(\"select\");\n                    this.allowServerDataBinding = false;\n                    this.nodeUnselectAction(li, observedArgs);\n                }\n            });\n        }\n        else {\n            this.nodeUnselectAction(li, eventArgs);\n        }\n    }\n    nodeUnselectAction(li, eventArgs) {\n        this.removeSelect(li);\n        this.setFocusElement(li);\n        if (this.isLoaded) {\n            this.allowServerDataBinding = true;\n            this.updateServerProperties(\"select\");\n            this.allowServerDataBinding = false;\n            eventArgs.nodeData = this.getNodeData(li);\n            this.trigger('nodeSelected', eventArgs);\n        }\n    }\n    setFocusElement(li) {\n        if (!isNullOrUndefined(li)) {\n            let focusedNode = this.getFocusedNode();\n            if (focusedNode) {\n                removeClass([focusedNode], FOCUS);\n            }\n            addClass([li], FOCUS);\n            this.updateIdAttr(focusedNode, li);\n        }\n    }\n    addSelect(liEle) {\n        liEle.setAttribute('aria-selected', 'true');\n        addClass([liEle], ACTIVE);\n        let id = liEle.getAttribute('data-uid');\n        if (!isNullOrUndefined(id) && this.selectedNodes.indexOf(id) === -1) {\n            this.selectedNodes.push(id);\n        }\n    }\n    removeSelect(liEle) {\n        if (this.allowMultiSelection) {\n            liEle.setAttribute('aria-selected', 'false');\n        }\n        else {\n            liEle.removeAttribute('aria-selected');\n        }\n        removeClass([liEle], ACTIVE);\n        let index = this.selectedNodes.indexOf(liEle.getAttribute('data-uid'));\n        if (index > -1) {\n            this.selectedNodes.splice(index, 1);\n        }\n    }\n    removeSelectAll() {\n        let selectedLI = this.element.querySelectorAll('.' + ACTIVE);\n        for (let ele of selectedLI) {\n            if (this.allowMultiSelection) {\n                ele.setAttribute('aria-selected', 'false');\n            }\n            else {\n                ele.removeAttribute('aria-selected');\n            }\n        }\n        removeClass(selectedLI, ACTIVE);\n        this.setProperties({ selectedNodes: [] }, true);\n    }\n    getSelectEvent(currLi, action, e) {\n        let nodeData = this.getNodeData(currLi);\n        return { action: action, cancel: false, isInteracted: isNullOrUndefined(e) ? false : true, node: currLi, nodeData: nodeData };\n    }\n    setExpandOnType() {\n        this.expandOnType = (this.expandOn === 'Auto') ? (Browser.isDevice ? 'Click' : 'DblClick') : this.expandOn;\n    }\n    expandHandler(e) {\n        let target = e.originalEvent.target;\n        if (!target || target.classList.contains(INPUT) || target.classList.contains(ROOT) ||\n            target.classList.contains(PARENTITEM) || target.classList.contains(LISTITEM) ||\n            target.classList.contains(ICON) || this.showCheckBox && closest(target, '.' + CHECKBOXWRAP)) {\n            return;\n        }\n        else {\n            this.expandCollapseAction(closest(target, '.' + LISTITEM), e);\n        }\n    }\n    expandCollapseAction(currLi, e) {\n        let icon = select('div.' + ICON, currLi);\n        if (!icon || icon.classList.contains(PROCESS)) {\n            return;\n        }\n        else {\n            let classList$$1 = icon.classList;\n            if (classList$$1.contains(EXPANDABLE)) {\n                this.expandAction(currLi, icon, e);\n            }\n            else if (classList$$1.contains(COLLAPSIBLE)) {\n                this.collapseNode(currLi, icon, e);\n            }\n        }\n    }\n    expandAction(currLi, icon, e, expandChild, callback) {\n        if (icon.classList.contains(PROCESS)) {\n            return;\n        }\n        else {\n            addClass([icon], PROCESS);\n        }\n        if (this.isLoaded && !this.isRefreshed) {\n            this.expandArgs = this.getExpandEvent(currLi, e);\n            this.trigger('nodeExpanding', this.expandArgs, (observedArgs) => {\n                if (observedArgs.cancel) {\n                    removeClass([icon], PROCESS);\n                }\n                else {\n                    this.nodeExpandAction(currLi, icon, expandChild, callback);\n                }\n            });\n        }\n        else {\n            this.nodeExpandAction(currLi, icon, expandChild, callback);\n        }\n    }\n    nodeExpandAction(currLi, icon, expandChild, callback) {\n        let ul = select('.' + PARENTITEM, currLi);\n        if (ul && ul.nodeName === 'UL') {\n            this.expandNode(currLi, icon);\n        }\n        else {\n            this.renderChildNodes(currLi, expandChild, callback);\n            let liEles = selectAll('.' + LISTITEM, currLi);\n            for (let i = 0; i < liEles.length; i++) {\n                let id = this.getId(liEles[i]);\n                if (this.expandChildren.indexOf(id) !== -1 && this.expandChildren !== undefined) {\n                    let icon = select('.' + EXPANDABLE, select('.' + TEXTWRAP, liEles[i]));\n                    if (!isNullOrUndefined(icon)) {\n                        this.expandAction(liEles[i], icon, null);\n                    }\n                    this.expandChildren.splice(this.expandChildren.indexOf(id), 1);\n                }\n            }\n        }\n    }\n    keyActionHandler(e) {\n        let target = e.target;\n        let focusedNode = this.getFocusedNode();\n        if (target && target.classList.contains(INPUT)) {\n            let inpEle = target;\n            if (e.action === 'enter') {\n                inpEle.blur();\n                this.element.focus();\n                addClass([focusedNode], HOVER);\n            }\n            else if (e.action === 'escape') {\n                inpEle.value = this.oldText;\n                inpEle.blur();\n                this.element.focus();\n                addClass([focusedNode], HOVER);\n            }\n            return;\n        }\n        e.preventDefault();\n        let eventArgs = {\n            cancel: false,\n            event: e,\n            node: focusedNode,\n        };\n        this.trigger('keyPress', eventArgs, (observedArgs) => {\n            if (!observedArgs.cancel) {\n                switch (e.action) {\n                    case 'space':\n                        if (this.showCheckBox) {\n                            this.checkNode(e);\n                        }\n                        break;\n                    case 'moveRight':\n                        this.openNode(this.enableRtl ? false : true, e);\n                        break;\n                    case 'moveLeft':\n                        this.openNode(this.enableRtl ? true : false, e);\n                        break;\n                    case 'shiftDown':\n                        this.shiftKeySelect(true, e);\n                        break;\n                    case 'moveDown':\n                    case 'ctrlDown':\n                    case 'csDown':\n                        this.navigateNode(true);\n                        break;\n                    case 'shiftUp':\n                        this.shiftKeySelect(false, e);\n                        break;\n                    case 'moveUp':\n                    case 'ctrlUp':\n                    case 'csUp':\n                        this.navigateNode(false);\n                        break;\n                    case 'home':\n                    case 'shiftHome':\n                    case 'ctrlHome':\n                    case 'csHome':\n                        this.navigateRootNode(true);\n                        break;\n                    case 'end':\n                    case 'shiftEnd':\n                    case 'ctrlEnd':\n                    case 'csEnd':\n                        this.navigateRootNode(false);\n                        break;\n                    case 'enter':\n                    case 'ctrlEnter':\n                    case 'shiftEnter':\n                    case 'csEnter':\n                        this.toggleSelect(focusedNode, e);\n                        break;\n                    case 'f2':\n                        if (this.allowEditing && !focusedNode.classList.contains('e-disable')) {\n                            this.createTextbox(focusedNode, e);\n                        }\n                        break;\n                    case 'ctrlA':\n                        if (this.allowMultiSelection) {\n                            let sNodes = selectAll('.' + LISTITEM + ':not(.' + ACTIVE + ')', this.element);\n                            this.selectGivenNodes(sNodes);\n                        }\n                        break;\n                }\n            }\n        });\n    }\n    navigateToFocus(isUp) {\n        let focusNode = this.getFocusedNode().querySelector('.' + TEXTWRAP);\n        let pos = focusNode.getBoundingClientRect();\n        let parent = this.getScrollParent(this.element);\n        if (!isNullOrUndefined(parent)) {\n            let parentPos = parent.getBoundingClientRect();\n            if (pos.bottom > parentPos.bottom) {\n                parent.scrollTop += pos.bottom - parentPos.bottom;\n            }\n            else if (pos.top < parentPos.top) {\n                parent.scrollTop -= parentPos.top - pos.top;\n            }\n        }\n        let isVisible$$1 = this.isVisibleInViewport(focusNode);\n        if (!isVisible$$1) {\n            focusNode.scrollIntoView(isUp);\n        }\n    }\n    isVisibleInViewport(txtWrap) {\n        let pos = txtWrap.getBoundingClientRect();\n        return (pos.top >= 0 && pos.left >= 0 && pos.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&\n            pos.right <= (window.innerWidth || document.documentElement.clientWidth));\n    }\n    getScrollParent(node) {\n        if (isNullOrUndefined(node)) {\n            return null;\n        }\n        return (node.scrollHeight > node.clientHeight) ? node : this.getScrollParent(node.parentElement);\n    }\n    shiftKeySelect(isTowards, e) {\n        if (this.allowMultiSelection) {\n            let focusedNode = this.getFocusedNode();\n            let nextNode = isTowards ? this.getNextNode(focusedNode) : this.getPrevNode(focusedNode);\n            this.removeHover();\n            this.setFocusElement(nextNode);\n            this.toggleSelect(nextNode, e, false);\n            this.navigateToFocus(!isTowards);\n        }\n        else {\n            this.navigateNode(isTowards);\n        }\n    }\n    checkNode(e) {\n        let focusedNode = this.getFocusedNode();\n        let checkWrap = select('.' + CHECKBOXWRAP, focusedNode);\n        let isChecked = select(' .' + CHECKBOXFRAME, checkWrap).classList.contains(CHECK);\n        if (!focusedNode.classList.contains('e-disable')) {\n            if (focusedNode.getElementsByClassName(\"e-checkbox-disabled\").length == 0) {\n                this.validateCheckNode(checkWrap, isChecked, focusedNode, e);\n            }\n        }\n    }\n    validateCheckNode(checkWrap, isCheck, li, e) {\n        let currLi = closest(checkWrap, '.' + LISTITEM);\n        this.checkActionNodes = [];\n        let ariaState = !isCheck ? 'true' : 'false';\n        if (!isNullOrUndefined(ariaState)) {\n            checkWrap.setAttribute('aria-checked', ariaState);\n        }\n        let eventArgs = this.getCheckEvent(currLi, isCheck ? 'uncheck' : 'check', e);\n        this.trigger('nodeChecking', eventArgs, (observedArgs) => {\n            if (!observedArgs.cancel) {\n                this.nodeCheckingAction(checkWrap, isCheck, li, observedArgs, e);\n            }\n        });\n    }\n    nodeCheckingAction(checkWrap, isCheck, li, eventArgs, e) {\n        if (this.checkedElement.indexOf(li.getAttribute('data-uid')) === -1) {\n            this.checkedElement.push(li.getAttribute('data-uid'));\n            let child = this.getChildNodes(this.treeData, li.getAttribute('data-uid'));\n            (child !== null) ? this.allCheckNode(child, this.checkedElement, null, null, false) : child = null;\n        }\n        this.changeState(checkWrap, isCheck ? 'uncheck' : 'check', e, true);\n        if (this.autoCheck) {\n            this.ensureChildCheckState(li);\n            this.ensureParentCheckState(closest(closest(li, '.' + PARENTITEM), '.' + LISTITEM));\n            let doCheck;\n            if (eventArgs.action === 'check') {\n                doCheck = true;\n            }\n            else if (eventArgs.action === 'uncheck') {\n                doCheck = false;\n            }\n            this.ensureStateChange(li, doCheck);\n        }\n        this.allowServerDataBinding = true;\n        this.updateServerProperties(\"check\");\n        this.allowServerDataBinding = false;\n        this.nodeCheckedEvent(checkWrap, isCheck, e);\n    }\n    /**\n     * Update checkedNodes when UI interaction happens before the child node renders in DOM\n     */\n    ensureStateChange(li, doCheck) {\n        let childElement = select('.' + PARENTITEM, li);\n        let parentIndex = li.getAttribute('data-uid');\n        let mapper = this.fields;\n        if (this.dataType === 1 && this.autoCheck) {\n            let resultData = new DataManager(this.treeData).executeLocal(new Query().where(mapper.parentID, 'equal', parentIndex, true));\n            for (let i = 0; i < resultData.length; i++) {\n                let resultId = resultData[i][this.fields.id] ? resultData[i][this.fields.id].toString() : null;\n                let isCheck = resultData[i][this.fields.isChecked] ? resultData[i][this.fields.isChecked].toString() : null;\n                if (this.checkedNodes.indexOf(parentIndex) !== -1 && this.checkedNodes.indexOf(resultId) === -1) {\n                    this.checkedNodes.push(resultId);\n                    let childItems = this.getChildNodes(this.treeData, resultId);\n                    this.getChildItems(childItems, doCheck);\n                    if (this.parentNodeCheck.indexOf(resultId) !== -1) {\n                        this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(resultId), 1);\n                    }\n                }\n                else if (this.checkedNodes.indexOf(parentIndex) === -1 && childElement === null &&\n                    this.checkedNodes.indexOf(resultId) !== -1) {\n                    this.checkedNodes.splice(this.checkedNodes.indexOf(resultId), 1);\n                    if (isCheck === 'true') {\n                        this.updateField(this.treeData, this.fields, resultId, 'isChecked', null);\n                    }\n                    if (this.checkedNodes.indexOf(parentIndex) === -1 && childElement === null ||\n                        this.parentNodeCheck.indexOf(resultId) !== -1) {\n                        let childNodes = this.getChildNodes(this.treeData, resultId);\n                        this.getChildItems(childNodes, doCheck);\n                        if (this.parentNodeCheck.indexOf(resultId) !== -1) {\n                            this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(resultId), 1);\n                        }\n                    }\n                }\n                else {\n                    let childItems = this.getChildNodes(this.treeData, resultId);\n                    this.getChildItems(childItems, doCheck);\n                }\n            }\n        }\n        else if (this.dataType === 1 && !this.autoCheck) {\n            if (!doCheck) {\n                let checkedData = new DataManager(this.treeData).executeLocal(new Query().where(mapper.isChecked, 'equal', true, false));\n                for (let i = 0; i < checkedData.length; i++) {\n                    let id = checkedData[i][this.fields.id] ? checkedData[i][this.fields.id].toString() : null;\n                    if (this.checkedNodes.indexOf(id) !== -1) {\n                        this.checkedNodes.splice(this.checkedNodes.indexOf(id), 1);\n                    }\n                    this.updateField(this.treeData, this.fields, id, 'isChecked', null);\n                }\n                this.checkedNodes = [];\n            }\n            else {\n                for (let i = 0; i < this.treeData.length; i++) {\n                    let checkedId = this.treeData[i][this.fields.id] ? this.treeData[i][this.fields.id].toString() : null;\n                    if (this.checkedNodes.indexOf(checkedId) === -1) {\n                        this.checkedNodes.push(checkedId);\n                    }\n                }\n            }\n        }\n        else {\n            let childItems = this.getChildNodes(this.treeData, parentIndex);\n            if (childItems) {\n                this.childStateChange(childItems, parentIndex, childElement, doCheck);\n            }\n        }\n    }\n    getChildItems(childItems, doCheck) {\n        for (let i = 0; i < childItems.length; i++) {\n            let childId = childItems[i][this.fields.id] ? childItems[i][this.fields.id].toString() : null;\n            let childIsCheck = childItems[i][this.fields.isChecked] ? childItems[i][this.fields.isChecked].toString() :\n                null;\n            if (this.checkedNodes.indexOf(childId) !== -1 && !doCheck) {\n                this.checkedNodes.splice(this.checkedNodes.indexOf(childId), 1);\n            }\n            if (this.checkedNodes.indexOf(childId) === -1 && doCheck) {\n                this.checkedNodes.push(childId);\n            }\n            if (childIsCheck === 'true' && !doCheck) {\n                this.updateField(this.treeData, this.fields, childId, 'isChecked', null);\n            }\n            let subChildItems = this.getChildNodes(this.treeData, childId);\n            if (subChildItems.length > 0) {\n                this.getChildItems(subChildItems, doCheck);\n            }\n        }\n    }\n    /**\n     * Update checkedNodes when UI interaction happens before the child node renders in DOM for hierarchical DS\n     */\n    childStateChange(childItems, parent, childElement, doCheck) {\n        for (let i = 0; i < childItems.length; i++) {\n            let checkedChild = childItems[i][this.fields.id] ? childItems[i][this.fields.id].toString() : '';\n            let isCheck = childItems[i][this.fields.isChecked] ? childItems[i][this.fields.isChecked].toString() : null;\n            if (this.autoCheck) {\n                if (this.checkedNodes.indexOf(parent) !== -1 && this.checkedNodes.indexOf(checkedChild) === -1) {\n                    this.checkedNodes.push(checkedChild);\n                    if (this.parentNodeCheck.indexOf(checkedChild) !== -1) {\n                        this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(checkedChild), 1);\n                    }\n                }\n                else if (this.checkedNodes.indexOf(parent) === -1 && this.checkedNodes.indexOf(checkedChild) !== -1 && !doCheck) {\n                    this.checkedNodes.splice(this.checkedNodes.indexOf(checkedChild), 1);\n                    if (isCheck === 'true') {\n                        this.updateField(this.treeData, this.fields, checkedChild, 'isChecked', null);\n                    }\n                }\n            }\n            else if (!this.autoCheck) {\n                if (!doCheck) {\n                    if (this.checkedNodes.indexOf(checkedChild) !== -1) {\n                        this.checkedNodes.splice(this.checkedNodes.indexOf(checkedChild), 1);\n                    }\n                    this.updateField(this.treeData, this.fields, checkedChild, 'isChecked', null);\n                    this.checkedNodes = [];\n                }\n                else {\n                    if (this.checkedNodes.indexOf(checkedChild) === -1) {\n                        this.checkedNodes.push(checkedChild);\n                    }\n                }\n            }\n            let subChild = this.getChildNodes([childItems[i]], checkedChild);\n            if (subChild) {\n                this.childStateChange(subChild, parent, childElement, doCheck);\n            }\n        }\n    }\n    //This method can be used to get all child nodes of a parent by passing the children of a parent along with 'validateCheck' set to false\n    allCheckNode(child, newCheck, checked, childCheck, validateCheck) {\n        if (child) {\n            for (let length = 0; length < child.length; length++) {\n                let childId = getValue(this.fields.id, child[length]);\n                let check = this.element.querySelector('[data-uid=\"' + childId + '\"]');\n                //Validates isChecked case while no UI interaction has been performed on the node or it's parent\n                if (validateCheck !== false && this.checkedElement.indexOf(childId.toString()) === -1) {\n                    if (((check === null && !isNullOrUndefined(child[length][this.fields.isChecked]) && newCheck.indexOf(childId.toString()) === -1)\n                        || childCheck === 0 || checked === 2)) {\n                        (child[length][this.fields.isChecked] !== false || checked === 2) ? newCheck.push(childId.toString())\n                            : childCheck = null;\n                        childCheck = (child[length][this.fields.isChecked] !== false || checked === 2) ? 0 : null;\n                    }\n                }\n                //Pushes child checked node done thro' UI interaction\n                if (newCheck.indexOf(childId.toString()) === -1 && isNullOrUndefined(checked)) {\n                    newCheck.push(childId.toString());\n                }\n                //Gets if any next level children are available for child nodes\n                if (getValue(this.fields.hasChildren, child[length]) === true ||\n                    getValue(this.fields.child.toString(), child[length])) {\n                    let id = getValue(this.fields.id, child[length]);\n                    let childId = this.getChildNodes(this.treeData, id.toString());\n                    if (childId) {\n                        (isNullOrUndefined(validateCheck)) ? this.allCheckNode(childId, newCheck, checked, childCheck) :\n                            this.allCheckNode(childId, newCheck, checked, childCheck, validateCheck);\n                        childCheck = null;\n                    }\n                }\n                childCheck = null;\n            }\n        }\n    }\n    openNode(toBeOpened, e) {\n        let focusedNode = this.getFocusedNode();\n        let icon = select('div.' + ICON, focusedNode);\n        if (toBeOpened) {\n            if (!icon) {\n                return;\n            }\n            else if (icon.classList.contains(EXPANDABLE)) {\n                this.expandAction(focusedNode, icon, e);\n            }\n            else {\n                this.focusNextNode(focusedNode, true);\n            }\n        }\n        else {\n            if (icon && icon.classList.contains(COLLAPSIBLE)) {\n                this.collapseNode(focusedNode, icon, e);\n            }\n            else {\n                let parentLi = closest(closest(focusedNode, '.' + PARENTITEM), '.' + LISTITEM);\n                if (!parentLi) {\n                    return;\n                }\n                else {\n                    if (!parentLi.classList.contains('e-disable')) {\n                        this.setFocus(focusedNode, parentLi);\n                        this.navigateToFocus(true);\n                    }\n                }\n            }\n        }\n    }\n    navigateNode(isTowards) {\n        let focusedNode = this.getFocusedNode();\n        this.focusNextNode(focusedNode, isTowards);\n    }\n    navigateRootNode(isBackwards) {\n        let focusedNode = this.getFocusedNode();\n        let rootNode = isBackwards ? this.getRootNode() : this.getEndNode();\n        if (!rootNode.classList.contains('e-disable')) {\n            this.setFocus(focusedNode, rootNode);\n            this.navigateToFocus(isBackwards);\n        }\n    }\n    getFocusedNode() {\n        let selectedItem;\n        let fNode = select('.' + LISTITEM + '.' + FOCUS, this.element);\n        if (isNullOrUndefined(fNode)) {\n            selectedItem = select('.' + LISTITEM, this.element);\n        }\n        return isNullOrUndefined(fNode) ? (isNullOrUndefined(selectedItem) ? this.element.firstElementChild : selectedItem) : fNode;\n    }\n    focusNextNode(li, isTowards) {\n        let nextNode = isTowards ? this.getNextNode(li) : this.getPrevNode(li);\n        this.setFocus(li, nextNode);\n        this.navigateToFocus(!isTowards);\n        if (nextNode.classList.contains('e-disable')) {\n            let lastChild = nextNode.lastChild;\n            if (nextNode.previousSibling == null && nextNode.classList.contains('e-level-1')) {\n                this.focusNextNode(nextNode, true);\n            }\n            else if (nextNode.nextSibling == null && nextNode.classList.contains('e-node-collapsed')) {\n                this.focusNextNode(nextNode, false);\n            }\n            else if (nextNode.nextSibling == null && lastChild.classList.contains('e-text-content')) {\n                this.focusNextNode(nextNode, false);\n            }\n            else {\n                this.focusNextNode(nextNode, isTowards);\n            }\n        }\n    }\n    getNextNode(li) {\n        let index = this.liList.indexOf(li);\n        let nextNode;\n        do {\n            index++;\n            nextNode = this.liList[index];\n            if (isNullOrUndefined(nextNode)) {\n                return li;\n            }\n        } while (!isVisible(nextNode));\n        return nextNode;\n    }\n    getPrevNode(li) {\n        let index = this.liList.indexOf(li);\n        let prevNode;\n        do {\n            index--;\n            prevNode = this.liList[index];\n            if (isNullOrUndefined(prevNode)) {\n                return li;\n            }\n        } while (!isVisible(prevNode));\n        return prevNode;\n    }\n    getRootNode() {\n        let index = 0;\n        let rootNode;\n        do {\n            rootNode = this.liList[index];\n            index++;\n        } while (!isVisible(rootNode));\n        return rootNode;\n    }\n    getEndNode() {\n        let index = this.liList.length - 1;\n        let endNode;\n        do {\n            endNode = this.liList[index];\n            index--;\n        } while (!isVisible(endNode));\n        return endNode;\n    }\n    setFocus(preNode, nextNode) {\n        removeClass([preNode], [HOVER, FOCUS]);\n        if (!nextNode.classList.contains('e-disable')) {\n            addClass([nextNode], [HOVER, FOCUS]);\n            this.updateIdAttr(preNode, nextNode);\n        }\n    }\n    updateIdAttr(preNode, nextNode) {\n        this.element.removeAttribute('aria-activedescendant');\n        if (preNode) {\n            preNode.removeAttribute('id');\n        }\n        nextNode.setAttribute('id', this.element.id + '_active');\n        this.element.setAttribute('aria-activedescendant', this.element.id + '_active');\n    }\n    focusIn() {\n        if (!this.mouseDownStatus) {\n            addClass([this.getFocusedNode()], HOVER);\n        }\n        this.mouseDownStatus = false;\n    }\n    focusOut() {\n        removeClass([this.getFocusedNode()], HOVER);\n    }\n    onMouseOver(e) {\n        let target = e.target;\n        let classList$$1 = target.classList;\n        let currentLi = closest(target, '.' + LISTITEM);\n        if (!currentLi || classList$$1.contains(PARENTITEM) || classList$$1.contains(LISTITEM)) {\n            this.removeHover();\n            return;\n        }\n        else {\n            if (currentLi && !currentLi.classList.contains('e-disable')) {\n                this.setHover(currentLi);\n            }\n        }\n    }\n    setHover(li) {\n        if (!li.classList.contains(HOVER)) {\n            this.removeHover();\n            addClass([li], HOVER);\n        }\n    }\n    ;\n    onMouseLeave(e) {\n        this.removeHover();\n    }\n    removeHover() {\n        let hoveredNode = selectAll('.' + HOVER, this.element);\n        if (hoveredNode && hoveredNode.length) {\n            removeClass(hoveredNode, HOVER);\n        }\n    }\n    ;\n    getNodeData(currLi, fromDS) {\n        if (!isNullOrUndefined(currLi) && currLi.classList.contains(LISTITEM) &&\n            !isNullOrUndefined(closest(currLi, '.' + CONTROL)) && closest(currLi, '.' + CONTROL).classList.contains(ROOT)) {\n            let id = currLi.getAttribute('data-uid');\n            let text = this.getText(currLi, fromDS);\n            let pNode = closest(currLi.parentNode, '.' + LISTITEM);\n            let pid = pNode ? pNode.getAttribute('data-uid') : null;\n            let selected = currLi.classList.contains(ACTIVE);\n            let expanded = (currLi.getAttribute('aria-expanded') === 'true') ? true : false;\n            let hasChildren = (currLi.getAttribute('aria-expanded') === null) ? false : true;\n            if (this.isBlazorPlatform) {\n                hasChildren = currLi.getAttribute('aria-expanded') === 'true' ? true : (currLi.querySelector('.e-icon-expandable') || currLi.querySelector('.e-icon-collapsible')) != null ? true : false;\n            }\n            let checked = null;\n            if (this.showCheckBox) {\n                checked = select('.' + CHECKBOXWRAP, currLi).getAttribute('aria-checked');\n            }\n            return {\n                id: id, text: text, parentID: pid, selected: selected, expanded: expanded,\n                isChecked: checked, hasChildren: hasChildren\n            };\n        }\n        return { id: '', text: '', parentID: '', selected: false, expanded: false, isChecked: '', hasChildren: false };\n    }\n    getText(currLi, fromDS) {\n        if (fromDS) {\n            let nodeData = this.getNodeObject(currLi.getAttribute('data-uid'));\n            let level = parseFloat(currLi.getAttribute('aria-level'));\n            let nodeFields = this.getFields(this.fields, level, 1);\n            return getValue(nodeFields.text, nodeData);\n        }\n        return select('.' + LISTTEXT, currLi).textContent;\n    }\n    getExpandEvent(currLi, e) {\n        let nodeData = this.getNodeData(currLi);\n        return { cancel: false, isInteracted: isNullOrUndefined(e) ? false : true, node: currLi, nodeData: nodeData, event: e };\n    }\n    renderNodeTemplate(data, textEle, dataId) {\n        let tempArr = this.nodeTemplateFn(data, this, 'nodeTemplate' + dataId, this.element.id + 'nodeTemplate', this.isStringTemplate, undefined, textEle);\n        if (tempArr) {\n            tempArr = Array.prototype.slice.call(tempArr);\n            append(tempArr, textEle);\n        }\n    }\n    destroyTemplate(liEle) {\n        this.clearTemplate(['nodeTemplate' + liEle.getAttribute('data-uid')]);\n    }\n    reRenderNodes() {\n        this.updateListProp(this.fields);\n        resetBlazorTemplate(this.element.id + 'nodeTemplate', 'NodeTemplate');\n        if (this.isBlazorPlatform) {\n            this.ulElement = this.element.querySelector('.e-list-parent.e-ul');\n            this.ulElement.parentElement.removeChild(this.ulElement);\n        }\n        else {\n            this.element.innerHTML = '';\n        }\n        if (!isNullOrUndefined(this.nodeTemplateFn)) {\n            this.clearTemplate();\n        }\n        this.setTouchClass();\n        this.setProperties({ selectedNodes: [], checkedNodes: [], expandedNodes: [] }, true);\n        this.checkedElement = [];\n        this.isLoaded = false;\n        this.setDataBinding(true);\n    }\n    setCssClass(oldClass, newClass) {\n        if (!isNullOrUndefined(oldClass) && oldClass !== '') {\n            removeClass([this.element], oldClass.split(' '));\n        }\n        if (!isNullOrUndefined(newClass) && newClass !== '') {\n            addClass([this.element], newClass.split(' '));\n        }\n    }\n    editingHandler(e) {\n        let target = e.target;\n        if (!target || target.classList.contains(ROOT) || target.classList.contains(PARENTITEM) ||\n            target.classList.contains(LISTITEM) || target.classList.contains(ICON) ||\n            target.classList.contains(INPUT) || target.classList.contains(INPUTGROUP)) {\n            return;\n        }\n        else {\n            let liEle = closest(target, '.' + LISTITEM);\n            this.createTextbox(liEle, e);\n        }\n    }\n    createTextbox(liEle, e) {\n        let oldInpEle = select('.' + TREEINPUT, this.element);\n        if (oldInpEle) {\n            oldInpEle.blur();\n        }\n        let textEle = select('.' + LISTTEXT, liEle);\n        this.updateOldText(liEle);\n        let innerEle = this.createElement('input', { className: TREEINPUT, attrs: { value: this.oldText } });\n        let eventArgs = this.getEditEvent(liEle, null, innerEle.outerHTML);\n        this.trigger('nodeEditing', eventArgs, (observedArgs) => {\n            if (!observedArgs.cancel) {\n                let inpWidth = textEle.offsetWidth + 5;\n                let style = 'width:' + inpWidth + 'px';\n                addClass([liEle], EDITING);\n                if (!isNullOrUndefined(this.nodeTemplateFn)) {\n                    this.destroyTemplate(liEle);\n                }\n                textEle.innerHTML = eventArgs.innerHtml;\n                let inpEle = select('.' + TREEINPUT, textEle);\n                this.inputObj = Input.createInput({\n                    element: inpEle,\n                    properties: {\n                        enableRtl: this.enableRtl,\n                    }\n                }, this.createElement);\n                this.inputObj.container.setAttribute('style', style);\n                inpEle.focus();\n                let inputEle = inpEle;\n                inputEle.setSelectionRange(0, inputEle.value.length);\n                this.wireInputEvents(inpEle);\n            }\n        });\n    }\n    updateOldText(liEle) {\n        let id = liEle.getAttribute('data-uid');\n        this.editData = this.getNodeObject(id);\n        let level = parseFloat(liEle.getAttribute('aria-level'));\n        this.editFields = this.getFields(this.fields, level, 1);\n        this.oldText = getValue(this.editFields.text, this.editData);\n    }\n    inputFocusOut(e) {\n        if (!select('.' + TREEINPUT, this.element)) {\n            return;\n        }\n        let target = e.target;\n        let newText = target.value;\n        let txtEle = closest(target, '.' + LISTTEXT);\n        let liEle = closest(target, '.' + LISTITEM);\n        detach(this.inputObj.container);\n        if (this.fields.dataSource instanceof DataManager && !this.isOffline && (this.fields.dataSource.adaptorName !== 'BlazorAdaptor')) {\n            this.crudOperation('update', null, liEle, newText, null, null, true);\n        }\n        else {\n            this.appendNewText(liEle, txtEle, newText, true);\n        }\n    }\n    appendNewText(liEle, txtEle, newText, isInput) {\n        let eventArgs = this.getEditEvent(liEle, newText, null);\n        this.trigger('nodeEdited', eventArgs, (observedArgs) => {\n            newText = observedArgs.cancel ? observedArgs.oldText : observedArgs.newText;\n            this.updateText(liEle, txtEle, newText, isInput);\n            if (observedArgs.oldText !== newText) {\n                this.triggerEvent();\n            }\n        });\n    }\n    updateText(liEle, txtEle, newText, isInput) {\n        let newData = setValue(this.editFields.text, newText, this.editData);\n        if (!isNullOrUndefined(this.nodeTemplateFn)) {\n            txtEle.innerText = '';\n            let dataId = liEle.getAttribute('data-uid');\n            this.renderNodeTemplate(newData, txtEle, dataId);\n            this.updateBlazorTemplate();\n            this.renderReactTemplates();\n        }\n        else {\n            txtEle.innerText = newText;\n        }\n        if (isInput) {\n            removeClass([liEle], EDITING);\n            txtEle.focus();\n        }\n    }\n    getElement(ele) {\n        if (isNullOrUndefined(ele)) {\n            return null;\n        }\n        else if (typeof ele === 'string') {\n            return this.element.querySelector('[data-uid=\"' + ele + '\"]');\n        }\n        else if (typeof ele === 'object') {\n            return getElement(ele);\n        }\n        else {\n            return null;\n        }\n    }\n    getId(ele) {\n        if (isNullOrUndefined(ele)) {\n            return null;\n        }\n        else if (typeof ele === 'string') {\n            return ele;\n        }\n        else if (typeof ele === 'object') {\n            return (getElement(ele)).getAttribute('data-uid');\n        }\n        else {\n            return null;\n        }\n    }\n    getEditEvent(liEle, newText, inpEle) {\n        let data = this.getNodeData(liEle);\n        return { cancel: false, newText: newText, node: liEle, nodeData: data, oldText: this.oldText, innerHtml: inpEle };\n    }\n    getNodeObject(id) {\n        let childNodes;\n        if (isNullOrUndefined(id)) {\n            return childNodes;\n        }\n        else if (this.dataType === 1) {\n            for (let i = 0, objlen = this.treeData.length; i < objlen; i++) {\n                let dataId = getValue(this.fields.id, this.treeData[i]);\n                if (!isNullOrUndefined(this.treeData[i]) && !isNullOrUndefined(dataId) && dataId.toString() === id) {\n                    return this.treeData[i];\n                }\n            }\n        }\n        else {\n            return this.getChildNodeObject(this.treeData, this.fields, id);\n        }\n        return childNodes;\n    }\n    getChildNodeObject(obj, mapper, id) {\n        let newList;\n        if (isNullOrUndefined(obj)) {\n            return newList;\n        }\n        for (let i = 0, objlen = obj.length; i < objlen; i++) {\n            let dataId = getValue(mapper.id, obj[i]);\n            if (obj[i] && dataId && dataId.toString() === id) {\n                return obj[i];\n            }\n            else if (typeof mapper.child === 'string' && !isNullOrUndefined(getValue(mapper.child, obj[i]))) {\n                let childData = getValue(mapper.child, obj[i]);\n                newList = this.getChildNodeObject(childData, this.getChildMapper(mapper), id);\n                if (newList !== undefined) {\n                    break;\n                }\n            }\n            else if (this.fields.dataSource instanceof DataManager && !isNullOrUndefined(getValue('child', obj[i]))) {\n                let child = 'child';\n                newList = this.getChildNodeObject(getValue(child, obj[i]), this.getChildMapper(mapper), id);\n                if (newList !== undefined) {\n                    break;\n                }\n            }\n        }\n        return newList;\n    }\n    setDragAndDrop(toBind) {\n        if (toBind && !this.disabled) {\n            this.initializeDrag();\n        }\n        else {\n            this.destroyDrag();\n        }\n    }\n    // tslint:disable-next-line:max-func-body-length\n    initializeDrag() {\n        let virtualEle;\n        let proxy = this;\n        this.dragObj = new Draggable(this.element, {\n            enableTailMode: true, enableAutoScroll: true,\n            dragArea: this.dragArea,\n            dragTarget: '.' + TEXTWRAP,\n            helper: (e) => {\n                this.dragTarget = e.sender.target;\n                let dragRoot = closest(this.dragTarget, '.' + ROOT);\n                let dragWrap = closest(this.dragTarget, '.' + TEXTWRAP);\n                this.dragLi = closest(this.dragTarget, '.' + LISTITEM);\n                if (this.fullRowSelect && !dragWrap && this.dragTarget.classList.contains(FULLROW)) {\n                    dragWrap = this.dragTarget.nextElementSibling;\n                }\n                if (!this.dragTarget || !e.element.isSameNode(dragRoot) || !dragWrap ||\n                    this.dragTarget.classList.contains(ROOT) || this.dragTarget.classList.contains(PARENTITEM) ||\n                    this.dragTarget.classList.contains(LISTITEM) || this.dragLi.classList.contains('e-disable')) {\n                    return false;\n                }\n                let cloneEle = (dragWrap.cloneNode(true));\n                if (isNullOrUndefined(select('div.' + ICON, cloneEle))) {\n                    let icon = proxy.createElement('div', { className: ICON + ' ' + EXPANDABLE });\n                    cloneEle.insertBefore(icon, cloneEle.children[0]);\n                }\n                let cssClass = DRAGITEM + ' ' + ROOT + ' ' + this.cssClass + ' ' + (this.enableRtl ? RTL$1 : '');\n                virtualEle = proxy.createElement('div', { className: cssClass });\n                virtualEle.appendChild(cloneEle);\n                let nLen = this.selectedNodes.length;\n                if (nLen > 1 && this.allowMultiSelection && this.dragLi.classList.contains(ACTIVE)) {\n                    let cNode = proxy.createElement('span', { className: DROPCOUNT, innerHTML: '' + nLen });\n                    virtualEle.appendChild(cNode);\n                }\n                document.body.appendChild(virtualEle);\n                document.body.style.cursor = '';\n                this.dragData = this.getNodeData(this.dragLi);\n                return virtualEle;\n            },\n            dragStart: (e) => {\n                addClass([this.element], DRAGGING);\n                let listItem = closest(e.target, '.e-list-item');\n                let level;\n                if (listItem) {\n                    level = parseInt(listItem.getAttribute('aria-level'), 10);\n                }\n                let eventArgs = this.getDragEvent(e.event, this, null, e.target, null, virtualEle, level);\n                if (eventArgs.draggedNode.classList.contains(EDITING)) {\n                    this.dragObj.intDestroy(e.event);\n                    this.dragCancelAction(virtualEle);\n                }\n                else {\n                    this.trigger('nodeDragStart', eventArgs, (observedArgs) => {\n                        if (observedArgs.cancel) {\n                            this.dragObj.intDestroy(e.event);\n                            this.dragCancelAction(virtualEle);\n                        }\n                        else {\n                            this.dragStartAction = true;\n                        }\n                        if (isBlazor()) {\n                            e.bindEvents(getElement(e.dragElement));\n                        }\n                    });\n                }\n            },\n            drag: (e) => {\n                this.dragObj.setProperties({ cursorAt: { top: (!isNullOrUndefined(e.event.targetTouches) || Browser.isDevice) ? 60 : -20 } });\n                this.dragAction(e, virtualEle);\n            },\n            dragStop: (e) => {\n                removeClass([this.element], DRAGGING);\n                this.removeVirtualEle();\n                let dropTarget = e.target;\n                let preventTargetExpand = false;\n                let dropRoot = (closest(dropTarget, '.' + DROPPABLE));\n                let isHelperElement = true;\n                if (!dropTarget || !dropRoot) {\n                    detach(e.helper);\n                    document.body.style.cursor = '';\n                    isHelperElement = false;\n                }\n                let listItem = closest(dropTarget, '.e-list-item');\n                let level;\n                if (listItem) {\n                    level = parseInt(listItem.getAttribute('aria-level'), 10);\n                }\n                let eventArgs = this.getDragEvent(e.event, this, dropTarget, dropTarget, null, e.helper, level);\n                eventArgs.preventTargetExpand = preventTargetExpand;\n                if ((this.isBlazorPlatform && this.dragStartAction) || !this.isBlazorPlatform) {\n                    this.trigger('nodeDragStop', eventArgs, (observedArgs) => {\n                        this.dragParent = observedArgs.draggedParentNode;\n                        this.preventExpand = observedArgs.preventTargetExpand;\n                        if (observedArgs.cancel) {\n                            if (e.helper.parentNode) {\n                                detach(e.helper);\n                            }\n                            document.body.style.cursor = '';\n                            isHelperElement = false;\n                        }\n                        this.dragStartAction = false;\n                        if (this.isBlazorPlatform && isHelperElement) {\n                            this.dropAction(e, true);\n                        }\n                    });\n                }\n            }\n        });\n        this.dropObj = new Droppable(this.element, {\n            out: (e) => {\n                if (!isNullOrUndefined(e) && !e.target.classList.contains(SIBLING)) {\n                    document.body.style.cursor = 'not-allowed';\n                }\n            },\n            over: (e) => {\n                document.body.style.cursor = '';\n            },\n            drop: (e) => {\n                if (!this.isBlazorPlatform) {\n                    this.dropAction(e);\n                }\n            }\n        });\n    }\n    dragCancelAction(virtualEle) {\n        detach(virtualEle);\n        removeClass([this.element], DRAGGING);\n        this.dragStartAction = false;\n    }\n    dragAction(e, virtualEle) {\n        let dropRoot = closest(e.target, '.' + DROPPABLE);\n        let dropWrap = closest(e.target, '.' + TEXTWRAP);\n        let icon = select('div.' + ICON, virtualEle);\n        removeClass([icon], [DROPIN, DROPNEXT, DROPOUT, NODROP]);\n        this.removeVirtualEle();\n        document.body.style.cursor = '';\n        let classList$$1 = e.target.classList;\n        if (this.fullRowSelect && !dropWrap && !isNullOrUndefined(classList$$1) && classList$$1.contains(FULLROW)) {\n            dropWrap = e.target.nextElementSibling;\n        }\n        if (dropRoot) {\n            let dropLi = closest(e.target, '.' + LISTITEM);\n            let checkWrapper = closest(e.target, '.' + CHECKBOXWRAP);\n            let collapse = closest(e.target, '.' + COLLAPSIBLE);\n            let expand = closest(e.target, '.' + EXPANDABLE);\n            if (!dropRoot.classList.contains(ROOT) || (dropWrap &&\n                (!dropLi.isSameNode(this.dragLi) && !this.isDescendant(this.dragLi, dropLi)))) {\n                if ((dropLi && e && (!expand && !collapse) && (e.event.offsetY < 7) && !checkWrapper) || (((expand && e.event.offsetY < 5) || (collapse && e.event.offsetX < 3)))) {\n                    addClass([icon], DROPNEXT);\n                    let virEle = this.createElement('div', { className: SIBLING });\n                    let index = this.fullRowSelect ? (1) : (0);\n                    dropLi.insertBefore(virEle, dropLi.children[index]);\n                }\n                else if ((dropLi && e && (!expand && !collapse) && (e.target.offsetHeight > 0 && e.event.offsetY > (e.target.offsetHeight - 10)) && !checkWrapper) || (((expand && e.event.offsetY > 19) || (collapse && e.event.offsetX > 19)))) {\n                    addClass([icon], DROPNEXT);\n                    let virEle = this.createElement('div', { className: SIBLING });\n                    let index = this.fullRowSelect ? (2) : (1);\n                    dropLi.insertBefore(virEle, dropLi.children[index]);\n                }\n                else {\n                    addClass([icon], DROPIN);\n                }\n            }\n            else if (e.target.nodeName === 'LI' && (!dropLi.isSameNode(this.dragLi) && !this.isDescendant(this.dragLi, dropLi))) {\n                addClass([icon], DROPNEXT);\n                this.renderVirtualEle(e);\n            }\n            else if (e.target.classList.contains(SIBLING)) {\n                addClass([icon], DROPNEXT);\n            }\n            else {\n                addClass([icon], DROPOUT);\n            }\n        }\n        else {\n            addClass([icon], NODROP);\n            document.body.style.cursor = 'not-allowed';\n        }\n        let listItem = closest(e.target, '.e-list-item');\n        let level;\n        if (listItem) {\n            level = parseInt(listItem.getAttribute('aria-level'), 10);\n        }\n        let eventArgs = this.getDragEvent(e.event, this, e.target, e.target, null, virtualEle, level);\n        if (eventArgs.dropIndicator) {\n            removeClass([icon], eventArgs.dropIndicator);\n        }\n        this.trigger('nodeDragging', eventArgs);\n        if (eventArgs.dropIndicator) {\n            addClass([icon], eventArgs.dropIndicator);\n        }\n    }\n    // tslint:disable\n    dropAction(e, isBlazorDrop) {\n        let offsetY = e.event.offsetY;\n        let dropTarget = e.target;\n        let dragObj;\n        let level;\n        let drop = false;\n        let dragInstance;\n        if (!isBlazorDrop) {\n            dragInstance = e.dragData.draggable;\n        }\n        else {\n            dragInstance = e.element;\n        }\n        for (let i = 0; i < dragInstance.ej2_instances.length; i++) {\n            if (dragInstance.ej2_instances[i] instanceof TreeView_1) {\n                dragObj = dragInstance.ej2_instances[i];\n                break;\n            }\n        }\n        if (dragObj && dragObj.dragTarget) {\n            let dragTarget = dragObj.dragTarget;\n            let dragLi = (closest(dragTarget, '.' + LISTITEM));\n            let dropLi = (closest(dropTarget, '.' + LISTITEM));\n            if (dropLi == null && dropTarget.classList.contains(ROOT)) {\n                dropLi = dropTarget.firstElementChild;\n            }\n            if (!isBlazorDrop) {\n                detach(e.droppedElement);\n            }\n            else {\n                detach(e.helper);\n            }\n            document.body.style.cursor = '';\n            if (!dropLi || dropLi.isSameNode(dragLi) || this.isDescendant(dragLi, dropLi)) {\n                if (this.fields.dataSource instanceof DataManager === false) {\n                    this.preventExpand = false;\n                }\n                return;\n            }\n            if (dragObj.allowMultiSelection && dragLi.classList.contains(ACTIVE)) {\n                let sNodes = selectAll('.' + ACTIVE, dragObj.element);\n                if (e.target.offsetHeight <= 33 && offsetY > e.target.offsetHeight - 10 && offsetY > 6) {\n                    for (let i = sNodes.length - 1; i >= 0; i--) {\n                        if (dropLi.isSameNode(sNodes[i]) || this.isDescendant(sNodes[i], dropLi)) {\n                            continue;\n                        }\n                        this.appendNode(dropTarget, sNodes[i], dropLi, e, dragObj, offsetY);\n                    }\n                }\n                else {\n                    for (let i = 0; i < sNodes.length; i++) {\n                        if (dropLi.isSameNode(sNodes[i]) || this.isDescendant(sNodes[i], dropLi)) {\n                            continue;\n                        }\n                        this.appendNode(dropTarget, sNodes[i], dropLi, e, dragObj, offsetY);\n                    }\n                }\n            }\n            else {\n                this.appendNode(dropTarget, dragLi, dropLi, e, dragObj, offsetY);\n            }\n            level = parseInt(dragLi.getAttribute('aria-level'), 10);\n            drop = true;\n        }\n        if (this.fields.dataSource instanceof DataManager === false) {\n            this.preventExpand = false;\n        }\n        if (!isBlazorDrop) {\n            this.trigger('nodeDropped', this.getDragEvent(e.event, dragObj, dropTarget, e.target, e.dragData.draggedElement, null, level, drop));\n        }\n        else {\n            this.trigger('nodeDropped', this.getDragEvent(e.event, dragObj, dropTarget, e.target, e.element, null, level, drop));\n        }\n        this.triggerEvent();\n    }\n    appendNode(dropTarget, dragLi, dropLi, e, dragObj, offsetY) {\n        let checkWrapper = closest(dropTarget, '.' + CHECKBOXWRAP);\n        let collapse = closest(e.target, '.' + COLLAPSIBLE);\n        let expand = closest(e.target, '.' + EXPANDABLE);\n        if (!dragLi.classList.contains('e-disable') && !checkWrapper && ((expand && e.event.offsetY < 5) || (collapse && e.event.offsetX < 3) || (expand && e.event.offsetY > 19) || (collapse && e.event.offsetX > 19) || (!expand && !collapse))) {\n            if (dropTarget.nodeName === 'LI') {\n                this.dropAsSiblingNode(dragLi, dropLi, e, dragObj);\n            }\n            else if (dropTarget.firstElementChild && dropTarget.classList.contains(ROOT)) {\n                if (dropTarget.firstElementChild.nodeName === 'UL') {\n                    this.dropAsSiblingNode(dragLi, dropLi, e, dragObj);\n                }\n            }\n            else if ((dropTarget.classList.contains('e-icon-collapsible')) || (dropTarget.classList.contains('e-icon-expandable'))) {\n                this.dropAsSiblingNode(dragLi, dropLi, e, dragObj);\n            }\n            else {\n                this.dropAsChildNode(dragLi, dropLi, dragObj, null, e, offsetY);\n            }\n        }\n        else {\n            this.dropAsChildNode(dragLi, dropLi, dragObj, null, e, offsetY, true);\n        }\n    }\n    dropAsSiblingNode(dragLi, dropLi, e, dragObj) {\n        let dropUl = closest(dropLi, '.' + PARENTITEM);\n        let dragParentUl = closest(dragLi, '.' + PARENTITEM);\n        let dragParentLi = closest(dragParentUl, '.' + LISTITEM);\n        let pre;\n        if (e.target.offsetHeight > 0 && e.event.offsetY > e.target.offsetHeight - 2) {\n            pre = false;\n        }\n        else if (e.event.offsetY < 2) {\n            pre = true;\n        }\n        else if (e.target.classList.contains('e-icon-expandable') || (e.target.classList.contains('e-icon-collapsible'))) {\n            if ((e.event.offsetY < 5) || (e.event.offsetX < 3)) {\n                pre = true;\n            }\n            else if ((e.event.offsetY > 15) || (e.event.offsetX > 17)) {\n                pre = false;\n            }\n        }\n        if ((e.target.classList.contains('e-icon-expandable')) || (e.target.classList.contains('e-icon-collapsible'))) {\n            let target = e.target.closest('li');\n            dropUl.insertBefore(dragLi, pre ? target : target.nextElementSibling);\n        }\n        else {\n            dropUl.insertBefore(dragLi, pre ? e.target : e.target.nextElementSibling);\n        }\n        this.moveData(dragLi, dropLi, dropUl, pre, dragObj);\n        this.updateElement(dragParentUl, dragParentLi);\n        this.updateAriaLevel(dragLi);\n        if (dragObj.element.id === this.element.id) {\n            this.updateList();\n        }\n        else {\n            dragObj.updateInstance();\n            this.updateInstance();\n        }\n    }\n    dropAsChildNode(dragLi, dropLi, dragObj, index, e, pos, isCheck) {\n        let dragParentUl = closest(dragLi, '.' + PARENTITEM);\n        let dragParentLi = closest(dragParentUl, '.' + LISTITEM);\n        let dropParentUl = closest(dropLi, '.' + PARENTITEM);\n        if (e && (pos < 7) && !isCheck) {\n            dropParentUl.insertBefore(dragLi, dropLi);\n            this.moveData(dragLi, dropLi, dropParentUl, true, dragObj);\n        }\n        else if (e && (e.target.offsetHeight > 0 && pos > (e.target.offsetHeight - 10)) && !isCheck) {\n            dropParentUl.insertBefore(dragLi, dropLi.nextElementSibling);\n            this.moveData(dragLi, dropLi, dropParentUl, false, dragObj);\n        }\n        else {\n            let dropUl = this.expandParent(dropLi);\n            let childLi = dropUl.childNodes[index];\n            dropUl.insertBefore(dragLi, childLi);\n            this.moveData(dragLi, childLi, dropUl, true, dragObj);\n        }\n        this.updateElement(dragParentUl, dragParentLi);\n        this.updateAriaLevel(dragLi);\n        if (dragObj.element.id === this.element.id) {\n            this.updateList();\n        }\n        else {\n            dragObj.updateInstance();\n            this.updateInstance();\n        }\n    }\n    moveData(dragLi, dropLi, dropUl, pre, dragObj) {\n        let dropParentLi = closest(dropUl, '.' + LISTITEM);\n        let id = this.getId(dragLi);\n        let removedData = dragObj.updateChildField(dragObj.treeData, dragObj.fields, id, null, null, true);\n        let refId = this.getId(dropLi);\n        let index = this.getDataPos(this.treeData, this.fields, refId);\n        let parentId = this.getId(dropParentLi);\n        if (this.dataType === 1) {\n            this.updateField(this.treeData, this.fields, parentId, 'hasChildren', true);\n            let pos = isNullOrUndefined(index) ? this.treeData.length : (pre ? index : index + 1);\n            if (isNullOrUndefined(parentId) && !this.hasPid) {\n                delete removedData[0][this.fields.parentID];\n            }\n            else {\n                let currPid = this.isNumberTypeId ? parseFloat(parentId) : parentId;\n                setValue(this.fields.parentID, currPid, removedData[0]);\n            }\n            this.treeData.splice(pos, 0, removedData[0]);\n            if (dragObj.element.id !== this.element.id) {\n                let childData = dragObj.removeChildNodes(id);\n                pos++;\n                for (let i = 0, len = childData.length; i < len; i++) {\n                    this.treeData.splice(pos, 0, childData[i]);\n                    pos++;\n                }\n                dragObj.groupedData = dragObj.getGroupedData(dragObj.treeData, dragObj.fields.parentID);\n            }\n            this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);\n        }\n        else {\n            this.addChildData(this.treeData, this.fields, parentId, removedData, pre ? index : index + 1);\n        }\n    }\n    expandParent(dropLi) {\n        let dropIcon = select('div.' + ICON, dropLi);\n        if (dropIcon && dropIcon.classList.contains(EXPANDABLE) && this.preventExpand !== true) {\n            this.expandAction(dropLi, dropIcon, null);\n        }\n        let dropUl = select('.' + PARENTITEM, dropLi);\n        if (this.preventExpand === true && !dropUl && dropIcon) {\n            this.renderChildNodes(dropLi);\n        }\n        dropUl = select('.' + PARENTITEM, dropLi);\n        if (!isNullOrUndefined(dropUl) && this.preventExpand === true) {\n            dropUl.style.display = 'none';\n        }\n        if (!isNullOrUndefined(dropUl) && this.preventExpand === false) {\n            dropUl.style.display = 'block';\n        }\n        if (isNullOrUndefined(dropUl) && this.preventExpand === true) {\n            if (isNullOrUndefined(dropIcon)) {\n                ListBase.generateIcon(this.createElement, dropLi, EXPANDABLE, this.listBaseOption);\n            }\n            let icon = select('div.' + ICON, dropLi);\n            if (icon) {\n                icon.classList.add('e-icon-expandable');\n            }\n            dropUl = ListBase.generateUL(this.createElement, [], null, this.listBaseOption);\n            dropLi.appendChild(dropUl);\n            if (icon) {\n                removeClass([icon], COLLAPSIBLE);\n            }\n            else {\n                ListBase.generateIcon(this.createElement, dropLi, EXPANDABLE, this.listBaseOption);\n            }\n            dropLi.setAttribute('aria-expanded', 'false');\n            dropUl.style.display = 'none';\n        }\n        if (isNullOrUndefined(dropUl)) {\n            this.trigger('nodeExpanding', this.getExpandEvent(dropLi, null));\n            if (isNullOrUndefined(dropIcon)) {\n                ListBase.generateIcon(this.createElement, dropLi, COLLAPSIBLE, this.listBaseOption);\n            }\n            let icon = select('div.' + ICON, dropLi);\n            if (icon) {\n                removeClass([icon], EXPANDABLE);\n            }\n            else {\n                ListBase.generateIcon(this.createElement, dropLi, COLLAPSIBLE, this.listBaseOption);\n                icon = select('div.' + ICON, dropLi);\n                removeClass([icon], EXPANDABLE);\n            }\n            dropUl = ListBase.generateUL(this.createElement, [], null, this.listBaseOption);\n            dropLi.appendChild(dropUl);\n            this.addExpand(dropLi);\n            this.trigger('nodeExpanded', this.getExpandEvent(dropLi, null));\n        }\n        return dropUl;\n    }\n    updateElement(dragParentUl, dragParentLi) {\n        if (dragParentLi && dragParentUl.childElementCount === 0) {\n            let dragIcon = select('div.' + ICON, dragParentLi);\n            detach(dragParentUl);\n            detach(dragIcon);\n            let parentId = this.getId(dragParentLi);\n            this.updateField(this.treeData, this.fields, parentId, 'hasChildren', false);\n            this.removeExpand(dragParentLi, true);\n        }\n    }\n    updateAriaLevel(dragLi) {\n        let level = this.parents(dragLi, '.' + PARENTITEM).length;\n        dragLi.setAttribute('aria-level', '' + level);\n        this.updateChildAriaLevel(select('.' + PARENTITEM, dragLi), level + 1);\n    }\n    updateChildAriaLevel(element, level) {\n        if (!isNullOrUndefined(element)) {\n            let cNodes = element.childNodes;\n            for (let i = 0, len = cNodes.length; i < len; i++) {\n                let liEle = cNodes[i];\n                liEle.setAttribute('aria-level', '' + level);\n                this.updateChildAriaLevel(select('.' + PARENTITEM, liEle), level + 1);\n            }\n        }\n    }\n    renderVirtualEle(e) {\n        let pre;\n        if (e.event.offsetY > e.target.offsetHeight - 2) {\n            pre = false;\n        }\n        else if (e.event.offsetY < 2) {\n            pre = true;\n        }\n        let virEle = this.createElement('div', { className: SIBLING });\n        let index = this.fullRowSelect ? (pre ? 1 : 2) : (pre ? 0 : 1);\n        e.target.insertBefore(virEle, e.target.children[index]);\n    }\n    removeVirtualEle() {\n        let sibEle = select('.' + SIBLING);\n        if (sibEle) {\n            detach(sibEle);\n        }\n    }\n    destroyDrag() {\n        if (this.dragObj && this.dropObj) {\n            this.dragObj.destroy();\n            this.dropObj.destroy();\n        }\n    }\n    getDragEvent(event, obj, dropTarget, target, dragNode, cloneEle, level, drop) {\n        let dropLi = dropTarget ? closest(dropTarget, '.' + LISTITEM) : null;\n        let dropData = dropLi ? this.getNodeData(dropLi) : null;\n        let draggedNode = obj ? obj.dragLi : dragNode;\n        let draggedNodeData = obj ? obj.dragData : null;\n        let newParent = dropTarget ? this.parents(dropTarget, '.' + LISTITEM) : null;\n        let dragLiParent = obj.dragLi.parentElement;\n        let dragParent = obj.dragLi ? closest(dragLiParent, '.' + LISTITEM) : null;\n        let targetParent = null;\n        let indexValue = null;\n        let iconCss = [DROPNEXT, DROPIN, DROPOUT, NODROP];\n        let iconClass = null;\n        let node = (drop === true) ? draggedNode : dropLi;\n        let index = node ? closest(node, '.e-list-parent') : null;\n        let i = 0;\n        let position = null;\n        dragParent = (obj.dragLi && dragParent === null) ? closest(dragLiParent, '.' + ROOT) : dragParent;\n        dragParent = (drop === true) ? this.dragParent : dragParent;\n        if (cloneEle) {\n            while (i < 4) {\n                if (select('.' + ICON, cloneEle).classList.contains(iconCss[i])) {\n                    iconClass = iconCss[i];\n                    break;\n                }\n                i++;\n            }\n        }\n        if (index) {\n            let dropTar = 0;\n            for (i = 0; i < index.childElementCount; i++) {\n                dropTar = (drop !== true && index.children[i] === draggedNode && dropLi !== draggedNode) ? ++dropTar : dropTar;\n                if ((drop !== true && index.children[i].classList.contains('e-hover'))) {\n                    indexValue = (event.offsetY >= 23) ? i + 1 : i;\n                    break;\n                }\n                else if (index.children[i] === node) {\n                    indexValue = (event.offsetY >= 23) ? i : i;\n                    break;\n                }\n            }\n            indexValue = (dropTar !== 0) ? --indexValue : indexValue;\n            position = (iconClass == \"e-drop-in\") ? \"Inside\" : ((event.offsetY < 7) ? \"Before\" : \"After\");\n        }\n        if (dropTarget) {\n            if (newParent.length === 0) {\n                targetParent = null;\n            }\n            else if (dropTarget.classList.contains(LISTITEM)) {\n                targetParent = newParent[0];\n            }\n            else {\n                targetParent = newParent[1];\n            }\n        }\n        if (dropLi === draggedNode) {\n            targetParent = dropLi;\n        }\n        if (dropTarget && target.offsetHeight <= 33 && event.offsetY < target.offsetHeight - 10 && event.offsetY > 6) {\n            targetParent = dropLi;\n            if (drop !== true) {\n                level = ++level;\n                let parent = targetParent ? select('.e-list-parent', targetParent) : null;\n                indexValue = (parent) ? parent.children.length : 0;\n                if (!(this.fields.dataSource instanceof DataManager) && parent === null && targetParent) {\n                    let parent = targetParent.hasAttribute('data-uid') ?\n                        this.getChildNodes(this.fields.dataSource, targetParent.getAttribute('data-uid').toString()) : null;\n                    indexValue = (parent) ? parent.length : 0;\n                }\n            }\n        }\n        return {\n            cancel: false,\n            clonedNode: cloneEle,\n            event: event,\n            draggedNode: draggedNode,\n            draggedNodeData: draggedNodeData,\n            droppedNode: dropLi,\n            droppedNodeData: dropData,\n            dropIndex: indexValue,\n            dropLevel: level,\n            draggedParentNode: dragParent,\n            dropTarget: targetParent,\n            dropIndicator: iconClass,\n            target: target,\n            position: position,\n        };\n    }\n    addFullRow(toAdd) {\n        let len = this.liList.length;\n        if (toAdd) {\n            for (let i = 0; i < len; i++) {\n                this.createFullRow(this.liList[i]);\n            }\n        }\n        else {\n            for (let i = 0; i < len; i++) {\n                let rowDiv = select('.' + FULLROW, this.liList[i]);\n                detach(rowDiv);\n            }\n        }\n    }\n    createFullRow(item) {\n        let rowDiv = this.createElement('div', { className: FULLROW });\n        item.insertBefore(rowDiv, item.childNodes[0]);\n    }\n    addMultiSelect(toAdd) {\n        if (toAdd) {\n            let liEles = selectAll('.' + LISTITEM + ':not([aria-selected=\"true\"])', this.element);\n            for (let ele of liEles) {\n                ele.setAttribute('aria-selected', 'false');\n            }\n        }\n        else {\n            let liEles = selectAll('.' + LISTITEM + '[aria-selected=\"false\"]', this.element);\n            for (let ele of liEles) {\n                ele.removeAttribute('aria-selected');\n            }\n        }\n    }\n    collapseByLevel(element, level, excludeHiddenNodes) {\n        if (level > 0 && !isNullOrUndefined(element)) {\n            let cNodes = this.getVisibleNodes(excludeHiddenNodes, element.childNodes);\n            for (let i = 0, len = cNodes.length; i < len; i++) {\n                let liEle = cNodes[i];\n                let icon = select('.' + COLLAPSIBLE, select('.' + TEXTWRAP, liEle));\n                if (!isNullOrUndefined(icon)) {\n                    this.collapseNode(liEle, icon, null);\n                }\n                this.collapseByLevel(select('.' + PARENTITEM, liEle), level - 1, excludeHiddenNodes);\n            }\n        }\n    }\n    collapseAllNodes(excludeHiddenNodes) {\n        let cIcons = this.getVisibleNodes(excludeHiddenNodes, selectAll('.' + COLLAPSIBLE, this.element));\n        for (let i = 0, len = cIcons.length; i < len; i++) {\n            let icon = cIcons[i];\n            let liEle = closest(icon, '.' + LISTITEM);\n            this.collapseNode(liEle, icon, null);\n        }\n    }\n    expandByLevel(element, level, excludeHiddenNodes) {\n        if (level > 0 && !isNullOrUndefined(element)) {\n            let eNodes = this.getVisibleNodes(excludeHiddenNodes, element.childNodes);\n            for (let i = 0, len = eNodes.length; i < len; i++) {\n                let liEle = eNodes[i];\n                let icon = select('.' + EXPANDABLE, select('.' + TEXTWRAP, liEle));\n                if (!isNullOrUndefined(icon)) {\n                    this.expandAction(liEle, icon, null);\n                }\n                this.expandByLevel(select('.' + PARENTITEM, liEle), level - 1, excludeHiddenNodes);\n            }\n        }\n    }\n    expandAllNodes(excludeHiddenNodes) {\n        let eIcons = this.getVisibleNodes(excludeHiddenNodes, selectAll('.' + EXPANDABLE, this.element));\n        for (let i = 0, len = eIcons.length; i < len; i++) {\n            let icon = eIcons[i];\n            let liEle = closest(icon, '.' + LISTITEM);\n            this.expandAction(liEle, icon, null, true);\n        }\n    }\n    getVisibleNodes(excludeHiddenNodes, nodes) {\n        let vNodes = Array.prototype.slice.call(nodes);\n        if (excludeHiddenNodes) {\n            for (let i = 0; i < vNodes.length; i++) {\n                if (!isVisible(vNodes[i])) {\n                    vNodes.splice(i, 1);\n                    i--;\n                }\n            }\n        }\n        return vNodes;\n    }\n    removeNode(node) {\n        let dragParentUl = closest(node, '.' + PARENTITEM);\n        let dragParentLi = closest(dragParentUl, '.' + LISTITEM);\n        if (!isNullOrUndefined(this.nodeTemplateFn)) {\n            this.destroyTemplate(node);\n        }\n        detach(node);\n        this.updateElement(dragParentUl, dragParentLi);\n        this.updateInstance();\n        this.removeData(node);\n    }\n    updateInstance() {\n        this.updateList();\n        this.updateSelectedNodes();\n        this.updateExpandedNodes();\n        this.allowServerDataBinding = false;\n        this.updateServerProperties(\"expand\");\n        this.updateServerProperties(\"check\");\n        this.updateServerProperties(\"select\");\n        this.allowServerDataBinding = true;\n    }\n    updateServerProperties(action) {\n        if (this.isBlazorPlatform) {\n            if (action == \"expand\") {\n                this.isBlazorExpandedNodes = this.expandedNodes;\n                this.setProperties({ expandedNodes: [] }, true);\n            }\n            else if (action == \"check\") {\n                this.setProperties({ checkedNodes: this.checkedNodes }, true);\n            }\n            else {\n                this.setProperties({ selectedNodes: this.selectedNodes }, true);\n            }\n        }\n    }\n    updateList() {\n        this.liList = Array.prototype.slice.call(selectAll('.' + LISTITEM, this.element));\n    }\n    updateSelectedNodes() {\n        if (!this.isBlazorPlatform || (this.isBlazorPlatform && !this.initialRender)) {\n            this.setProperties({ selectedNodes: [] }, true);\n            let sNodes = selectAll('.' + ACTIVE, this.element);\n            this.selectGivenNodes(sNodes);\n        }\n        else if (this.isBlazorPlatform && this.initialRender) {\n            let sNodes = selectAll('.' + ACTIVE, this.element);\n            for (let a = 0; a < sNodes.length; a++) {\n                let id = sNodes[a].getAttribute(\"data-uid\").toString();\n                if (!isNullOrUndefined(id) && this.selectedNodes.indexOf(id) === -1) {\n                    this.selectedNodes.push(id);\n                }\n            }\n        }\n    }\n    updateExpandedNodes() {\n        if (!this.isBlazorPlatform || (this.isBlazorPlatform && !this.initialRender)) {\n            this.setProperties({ expandedNodes: [] }, true);\n            let eNodes = selectAll('[aria-expanded=\"true\"]', this.element);\n            for (let i = 0, len = eNodes.length; i < len; i++) {\n                this.addExpand(eNodes[i]);\n            }\n        }\n        else if (this.isBlazorPlatform && this.initialRender) {\n            let eNodes = selectAll('[aria-expanded=\"true\"]', this.element);\n            for (let a = 0; a < eNodes.length; a++) {\n                let id = eNodes[a].getAttribute(\"data-uid\").toString();\n                if (!isNullOrUndefined(id) && this.expandedNodes.indexOf(id) === -1) {\n                    this.expandedNodes.push(id);\n                }\n            }\n        }\n    }\n    removeData(node) {\n        if (this.dataType === 1) {\n            let dm = new DataManager(this.treeData);\n            let id = this.getId(node);\n            let data = {};\n            let newId = this.isNumberTypeId ? parseFloat(id) : id;\n            data[this.fields.id] = newId;\n            dm.remove(this.fields.id, data);\n            this.removeChildNodes(id);\n        }\n        else {\n            let id = this.getId(node);\n            this.updateChildField(this.treeData, this.fields, id, null, null, true);\n        }\n    }\n    removeChildNodes(parentId) {\n        let cNodes = this.getChildGroup(this.groupedData, parentId, false);\n        let childData = [];\n        if (cNodes) {\n            for (let i = 0, len = cNodes.length; i < len; i++) {\n                let dm = new DataManager(this.treeData);\n                let id = getValue(this.fields.id, cNodes[i]).toString();\n                let data = {};\n                let currId = this.isNumberTypeId ? parseFloat(id) : id;\n                data[this.fields.id] = currId;\n                let nodeData = dm.remove(this.fields.id, data);\n                childData.push(nodeData[0]);\n                this.removeChildNodes(id);\n            }\n        }\n        return childData;\n    }\n    doGivenAction(nodes, selector, toExpand) {\n        for (let i = 0, len = nodes.length; i < len; i++) {\n            let liEle = this.getElement(nodes[i]);\n            if (isNullOrUndefined(liEle)) {\n                continue;\n            }\n            let icon = select('.' + selector, select('.' + TEXTWRAP, liEle));\n            if (!isNullOrUndefined(icon)) {\n                toExpand ? this.expandAction(liEle, icon, null) : this.collapseNode(liEle, icon, null);\n            }\n        }\n    }\n    addGivenNodes(nodes, dropLi, index, isRemote, dropEle) {\n        if (nodes.length === 0) {\n            return;\n        }\n        let sNodes = this.getSortedData(nodes);\n        let level = dropLi ? parseFloat(dropLi.getAttribute('aria-level')) + 1 : 1;\n        if (isRemote) {\n            this.updateMapper(level);\n        }\n        let li = ListBase.createListItemFromJson(this.createElement, sNodes, this.listBaseOption, level);\n        let dropUl;\n        if (!dropEle) {\n            dropUl = dropLi ? this.expandParent(dropLi) : select('.' + PARENTITEM, this.element);\n        }\n        else {\n            dropUl = dropEle;\n        }\n        let refNode = dropUl.childNodes[index];\n        for (let i = 0; i < li.length; i++) {\n            dropUl.insertBefore(li[i], refNode);\n        }\n        if (this.nodeTemplate && this.isBlazorPlatform && !this.isStringTemplate) {\n            this.updateBlazorTemplate();\n        }\n        let id = this.getId(dropLi);\n        if (this.dataType === 1) {\n            this.updateField(this.treeData, this.fields, id, 'hasChildren', true);\n            let refId = this.getId(refNode);\n            let pos = isNullOrUndefined(refId) ? this.treeData.length : this.getDataPos(this.treeData, this.fields, refId);\n            for (let j = 0; j < nodes.length; j++) {\n                if (!isNullOrUndefined(id)) {\n                    let currId = this.isNumberTypeId ? parseFloat(id) : id;\n                    setValue(this.fields.parentID, currId, nodes[j]);\n                }\n                this.treeData.splice(pos, 0, nodes[j]);\n                pos++;\n            }\n        }\n        else {\n            this.addChildData(this.treeData, this.fields, id, nodes, index);\n        }\n        this.finalizeNode(dropUl);\n    }\n    updateMapper(level) {\n        let mapper = (level === 1) ? this.fields : this.getChildFields(this.fields, level - 1, 1);\n        this.updateListProp(mapper);\n    }\n    updateListProp(mapper) {\n        let prop = this.getActualProperties(mapper);\n        this.listBaseOption.fields = prop;\n        this.listBaseOption.fields.url = prop.hasOwnProperty('navigateUrl') ? prop.navigateUrl : 'navigateUrl';\n    }\n    getDataPos(obj, mapper, id) {\n        let pos = null;\n        for (let i = 0, objlen = obj.length; i < objlen; i++) {\n            let nodeId = getValue(mapper.id, obj[i]);\n            if (obj[i] && nodeId && nodeId.toString() === id) {\n                return i;\n            }\n            else if (typeof mapper.child === 'string' && !isNullOrUndefined(getValue(mapper.child, obj[i]))) {\n                let data = getValue(mapper.child, obj[i]);\n                pos = this.getDataPos(data, this.getChildMapper(mapper), id);\n                if (pos !== null) {\n                    break;\n                }\n            }\n            else if (this.fields.dataSource instanceof DataManager && !isNullOrUndefined(getValue('child', obj[i]))) {\n                let items = getValue('child', obj[i]);\n                pos = this.getDataPos(items, this.getChildMapper(mapper), id);\n                if (pos !== null) {\n                    break;\n                }\n            }\n        }\n        return pos;\n    }\n    addChildData(obj, mapper, id, data, index) {\n        let updated;\n        if (isNullOrUndefined(id)) {\n            index = isNullOrUndefined(index) ? obj.length : index;\n            for (let k = 0, len = data.length; k < len; k++) {\n                obj.splice(index, 0, data[k]);\n                index++;\n            }\n            return updated;\n        }\n        for (let i = 0, objlen = obj.length; i < objlen; i++) {\n            let nodeId = getValue(mapper.id, obj[i]);\n            if (obj[i] && nodeId && nodeId.toString() === id) {\n                if ((typeof mapper.child === 'string' && (obj[i].hasOwnProperty(mapper.child) && obj[i][mapper.child] !== null)) ||\n                    ((this.fields.dataSource instanceof DataManager && (this.fields.dataSource.adaptorName !== 'BlazorAdaptor')) && obj[i].hasOwnProperty('child'))) {\n                    let key = (typeof mapper.child === 'string') ? mapper.child : 'child';\n                    let childData = getValue(key, obj[i]);\n                    if (isNullOrUndefined(childData)) {\n                        childData = [];\n                    }\n                    index = isNullOrUndefined(index) ? childData.length : index;\n                    for (let k = 0, len = data.length; k < len; k++) {\n                        childData.splice(index, 0, data[k]);\n                        index++;\n                    }\n                }\n                else {\n                    let key = (typeof mapper.child === 'string') ? mapper.child : 'child';\n                    obj[i][key] = data;\n                }\n                return true;\n            }\n            else if (typeof mapper.child === 'string' && !isNullOrUndefined(getValue(mapper.child, obj[i]))) {\n                let childObj = getValue(mapper.child, obj[i]);\n                updated = this.addChildData(childObj, this.getChildMapper(mapper), id, data, index);\n                if (updated !== undefined) {\n                    break;\n                }\n            }\n            else if ((this.fields.dataSource instanceof DataManager && (this.fields.dataSource.adaptorName !== 'BlazorAdaptor')) && !isNullOrUndefined(getValue('child', obj[i]))) {\n                let childData = getValue('child', obj[i]);\n                updated = this.addChildData(childData, this.getChildMapper(mapper), id, data, index);\n                if (updated !== undefined) {\n                    break;\n                }\n            }\n        }\n        return updated;\n    }\n    doDisableAction(nodes) {\n        let validNodes = this.nodeType(nodes);\n        let validID = this.checkValidId(validNodes);\n        this.validArr = [];\n        for (let i = 0, len = validID.length; i < len; i++) {\n            let id = validID[i][this.fields.id].toString();\n            if (id && this.disableNode.indexOf(id) === -1) {\n                this.disableNode.push(id);\n            }\n            let liEle = this.getElement(id);\n            if (liEle) {\n                liEle.setAttribute('aria-disabled', 'true');\n                addClass([liEle], DISABLE);\n            }\n        }\n    }\n    doEnableAction(nodes) {\n        let strNodes = this.nodeType(nodes);\n        for (let i = 0, len = strNodes.length; i < len; i++) {\n            let liEle = this.getElement(strNodes[i]);\n            let id = strNodes[i];\n            if (id && this.disableNode.indexOf(id) !== -1) {\n                this.disableNode.splice(this.disableNode.indexOf(id), 1);\n            }\n            if (liEle) {\n                liEle.removeAttribute('aria-disabled');\n                removeClass([liEle], DISABLE);\n            }\n        }\n    }\n    nodeType(nodes) {\n        let validID = [];\n        for (let i = 0, len = nodes.length; i < len; i++) {\n            let id;\n            if (typeof nodes[i] == \"string\") {\n                id = (nodes[i]) ? nodes[i].toString() : null;\n            }\n            else if (typeof nodes[i] === \"object\") {\n                id = nodes[i] ? nodes[i].getAttribute(\"data-uid\").toString() : null;\n            }\n            if (validID.indexOf(id) == -1) {\n                validID.push(id);\n            }\n        }\n        return validID;\n    }\n    checkValidId(node) {\n        if (this.dataType === 1) {\n            this.validArr = this.treeData.filter((data) => {\n                return node.indexOf(data[this.fields.id] ? data[this.fields.id].toString() : null) !== -1;\n            });\n        }\n        else if (this.dataType === 2) {\n            for (let k = 0; k < this.treeData.length; k++) {\n                let id = this.treeData[k][this.fields.id] ? this.treeData[k][this.fields.id].toString() : null;\n                if (node.indexOf(id) !== -1) {\n                    this.validArr.push(this.treeData[k]);\n                }\n                let childItems = getValue(this.fields.child.toString(), this.treeData[k]);\n                if (childItems) {\n                    this.filterNestedChild(childItems, node);\n                }\n            }\n        }\n        return this.validArr;\n    }\n    filterNestedChild(treeData, nodes) {\n        for (let k = 0; k < treeData.length; k++) {\n            let id = treeData[k][this.fields.id] ? treeData[k][this.fields.id].toString() : null;\n            if (nodes.indexOf(id) !== -1) {\n                this.validArr.push(treeData[k]);\n            }\n            let childItems = getValue(this.fields.child.toString(), treeData[k]);\n            if (childItems) {\n                this.filterNestedChild(childItems, nodes);\n            }\n        }\n    }\n    setTouchClass() {\n        let ele = closest(this.element, '.' + BIGGER);\n        this.touchClass = isNullOrUndefined(ele) ? '' : SMALL;\n    }\n    updatePersistProp() {\n        this.removeField(this.treeData, this.fields, ['selected', 'expanded']);\n        let sleNodes = this.selectedNodes;\n        for (let l = 0, slelen = sleNodes.length; l < slelen; l++) {\n            this.updateField(this.treeData, this.fields, sleNodes[l], 'selected', true);\n        }\n        let enodes = this.expandedNodes;\n        if (this.isBlazorPlatform) {\n            enodes = this.isBlazorExpandedNodes;\n        }\n        for (let k = 0, nodelen = enodes.length; k < nodelen; k++) {\n            this.updateField(this.treeData, this.fields, enodes[k], 'expanded', true);\n        }\n        if (this.showCheckBox) {\n            this.removeField(this.treeData, this.fields, ['isChecked']);\n            let cnodes = this.checkedNodes;\n            for (let m = 0, nodelen = cnodes.length; m < nodelen; m++) {\n                this.updateField(this.treeData, this.fields, cnodes[m], 'isChecked', true);\n            }\n        }\n    }\n    removeField(obj, mapper, names) {\n        if (isNullOrUndefined(obj) || isNullOrUndefined(mapper)) {\n            return;\n        }\n        for (let i = 0, objlen = obj.length; i < objlen; i++) {\n            for (let j = 0; j < names.length; j++) {\n                let field = this.getMapperProp(mapper, names[j]);\n                if (!isNullOrUndefined(obj[i][field])) {\n                    delete obj[i][field];\n                }\n            }\n            if (typeof mapper.child === 'string' && !isNullOrUndefined(getValue(mapper.child, obj[i]))) {\n                this.removeField(getValue(mapper.child, obj[i]), this.getChildMapper(mapper), names);\n            }\n            else if (this.fields.dataSource instanceof DataManager && !isNullOrUndefined(getValue('child', obj[i]))) {\n                this.removeField(getValue('child', obj[i]), this.getChildMapper(mapper), names);\n            }\n        }\n    }\n    getMapperProp(mapper, fieldName) {\n        switch (fieldName) {\n            case 'selected':\n                return !isNullOrUndefined(mapper.selected) ? mapper.selected : 'selected';\n            case 'expanded':\n                return !isNullOrUndefined(mapper.expanded) ? mapper.expanded : 'expanded';\n            case 'isChecked':\n                return !isNullOrUndefined(mapper.isChecked) ? mapper.isChecked : 'isChecked';\n            case 'hasChildren':\n                return !isNullOrUndefined(mapper.hasChildren) ? mapper.hasChildren : 'hasChildren';\n            default:\n                return fieldName;\n        }\n    }\n    updateField(obj, mapper, id, key, value) {\n        if (isNullOrUndefined(id)) {\n            return;\n        }\n        else if (this.dataType === 1) {\n            let newId = this.isNumberTypeId ? parseFloat(id) : id;\n            let resultData = new DataManager(this.treeData).executeLocal(new Query().where(mapper.id, 'equal', newId, false));\n            setValue(this.getMapperProp(mapper, key), value, resultData[0]);\n        }\n        else {\n            this.updateChildField(obj, mapper, id, key, value);\n        }\n    }\n    updateChildField(obj, mapper, id, key, value, remove$$1) {\n        let removedData;\n        if (isNullOrUndefined(obj)) {\n            return removedData;\n        }\n        for (let i = 0, objlen = obj.length; i < objlen; i++) {\n            let nodeId = getValue(mapper.id, obj[i]);\n            if (obj[i] && nodeId && nodeId.toString() === id) {\n                if (remove$$1) {\n                    removedData = obj.splice(i, 1);\n                }\n                else {\n                    setValue(this.getMapperProp(mapper, key), value, obj[i]);\n                    removedData = [];\n                }\n                return removedData;\n            }\n            else if (typeof mapper.child === 'string' && !isNullOrUndefined(getValue(mapper.child, obj[i]))) {\n                let childData = getValue(mapper.child, obj[i]);\n                removedData = this.updateChildField(childData, this.getChildMapper(mapper), id, key, value, remove$$1);\n                if (removedData !== undefined) {\n                    break;\n                }\n            }\n            else if (this.fields.dataSource instanceof DataManager && !isNullOrUndefined(getValue('child', obj[i]))) {\n                let childItems = getValue('child', obj[i]);\n                removedData = this.updateChildField(childItems, this.getChildMapper(mapper), id, key, value, remove$$1);\n                if (removedData !== undefined) {\n                    break;\n                }\n            }\n        }\n        return removedData;\n    }\n    triggerEvent() {\n        this.updateTemplateForBlazor();\n        this.renderReactTemplates();\n        let eventArgs = { data: this.treeData };\n        this.trigger('dataSourceChanged', eventArgs);\n    }\n    updateBlazorTemplate() {\n        updateBlazorTemplate(this.element.id + 'nodeTemplate', 'NodeTemplate', this, false);\n    }\n    clientUpdateInitial() {\n        this.blazorInitialRender = true;\n    }\n    wireInputEvents(inpEle) {\n        EventHandler.add(inpEle, 'blur', this.inputFocusOut, this);\n    }\n    wireEditingEvents(toBind) {\n        if (toBind && !this.disabled) {\n            let proxy = this;\n            this.touchEditObj = new Touch(this.element, {\n                tap: (e) => {\n                    if (this.isDoubleTapped(e) && e.tapCount === 2) {\n                        e.originalEvent.preventDefault();\n                        proxy.editingHandler(e.originalEvent);\n                    }\n                }\n            });\n        }\n        else {\n            if (this.touchEditObj) {\n                this.touchEditObj.destroy();\n            }\n        }\n    }\n    wireClickEvent(toBind) {\n        if (toBind) {\n            let proxy = this;\n            this.touchClickObj = new Touch(this.element, {\n                tap: (e) => {\n                    proxy.clickHandler(e);\n                }\n            });\n        }\n        else {\n            if (this.touchClickObj) {\n                this.touchClickObj.destroy();\n            }\n        }\n    }\n    wireExpandOnEvent(toBind) {\n        if (toBind) {\n            let proxy = this;\n            this.touchExpandObj = new Touch(this.element, {\n                tap: (e) => {\n                    if ((this.expandOnType === 'Click' || (this.expandOnType === 'DblClick' && this.isDoubleTapped(e) && e.tapCount === 2))\n                        && e.originalEvent.which !== 3) {\n                        proxy.expandHandler(e);\n                    }\n                }\n            });\n        }\n        else {\n            if (this.touchExpandObj) {\n                this.touchExpandObj.destroy();\n            }\n        }\n    }\n    mouseDownHandler(e) {\n        this.mouseDownStatus = true;\n        if (e.shiftKey || e.ctrlKey) {\n            e.preventDefault();\n        }\n        if (e.ctrlKey && this.allowMultiSelection) {\n            EventHandler.add(this.element, 'contextmenu', this.preventContextMenu, this);\n        }\n    }\n    ;\n    preventContextMenu(e) {\n        e.preventDefault();\n    }\n    wireEvents() {\n        EventHandler.add(this.element, 'mousedown', this.mouseDownHandler, this);\n        this.wireClickEvent(true);\n        if (this.expandOnType !== 'None') {\n            this.wireExpandOnEvent(true);\n        }\n        EventHandler.add(this.element, 'focus', this.focusIn, this);\n        EventHandler.add(this.element, 'blur', this.focusOut, this);\n        EventHandler.add(this.element, 'mouseover', this.onMouseOver, this);\n        EventHandler.add(this.element, 'mouseout', this.onMouseLeave, this);\n        this.keyboardModule = new KeyboardEvents(this.element, {\n            keyAction: this.keyActionHandler.bind(this),\n            keyConfigs: this.keyConfigs,\n            eventName: 'keydown',\n        });\n    }\n    unWireEvents() {\n        EventHandler.remove(this.element, 'mousedown', this.mouseDownHandler);\n        this.wireClickEvent(false);\n        this.wireExpandOnEvent(false);\n        EventHandler.remove(this.element, 'focus', this.focusIn);\n        EventHandler.remove(this.element, 'blur', this.focusOut);\n        EventHandler.remove(this.element, 'mouseover', this.onMouseOver);\n        EventHandler.remove(this.element, 'mouseout', this.onMouseLeave);\n        if (!this.disabled) {\n            this.keyboardModule.destroy();\n        }\n    }\n    parents(element, selector) {\n        let matched = [];\n        let el = element.parentNode;\n        while (!isNullOrUndefined(el)) {\n            if (matches(el, selector)) {\n                matched.push(el);\n            }\n            el = el.parentNode;\n        }\n        return matched;\n    }\n    isDoubleTapped(e) {\n        let target = e.originalEvent.target;\n        let secondTap;\n        if (target && e.tapCount) {\n            if (e.tapCount === 1) {\n                this.firstTap = closest(target, '.' + LISTITEM);\n            }\n            else if (e.tapCount === 2) {\n                secondTap = closest(target, '.' + LISTITEM);\n            }\n        }\n        return (this.firstTap === secondTap);\n    }\n    isDescendant(parent, child) {\n        let node = child.parentNode;\n        while (!isNullOrUndefined(node)) {\n            if (node === parent) {\n                return true;\n            }\n            node = node.parentNode;\n        }\n        return false;\n    }\n    showSpinner(element) {\n        addClass([element], LOAD);\n        createSpinner({\n            target: element,\n            width: Browser.isDevice ? 16 : 14\n        }, this.createElement);\n        showSpinner(element);\n    }\n    hideSpinner(element) {\n        hideSpinner(element);\n        element.innerHTML = '';\n        removeClass([element], LOAD);\n    }\n    setCheckedNodes(nodes) {\n        nodes = JSON.parse(JSON.stringify(nodes));\n        this.uncheckAll(this.checkedNodes);\n        this.setIndeterminate(nodes);\n        if (nodes.length > 0) {\n            this.checkAll(nodes);\n        }\n    }\n    /**\n     * Checks whether the checkedNodes entered are valid and sets the valid checkedNodes while changing via setmodel\n     */\n    setValidCheckedNode(node) {\n        if (this.dataType === 1) {\n            let mapper = this.fields;\n            let resultData = new DataManager(this.treeData).executeLocal(new Query().where(mapper.id, 'equal', node, true));\n            if (resultData[0]) {\n                this.setChildCheckState(resultData, node, resultData[0]);\n                if (this.autoCheck) {\n                    let parent = resultData[0][this.fields.parentID] ? resultData[0][this.fields.parentID].toString() : null;\n                    let childNodes = this.getChildNodes(this.treeData, parent);\n                    let count = 0;\n                    for (let len = 0; len < childNodes.length; len++) {\n                        let childId = childNodes[len][this.fields.id].toString();\n                        if (this.checkedNodes.indexOf(childId) !== -1) {\n                            count++;\n                        }\n                    }\n                    if (count === childNodes.length && this.checkedNodes.indexOf(parent) === -1 && parent) {\n                        this.checkedNodes.push(parent);\n                    }\n                }\n            }\n        }\n        else if (this.dataType === 2) {\n            for (let a = 0; a < this.treeData.length; a++) {\n                let index = this.treeData[a][this.fields.id] ? this.treeData[a][this.fields.id].toString() : '';\n                if (index === node && this.checkedNodes.indexOf(node) === -1) {\n                    this.checkedNodes.push(node);\n                    break;\n                }\n                let childItems = getValue(this.fields.child.toString(), this.treeData[a]);\n                if (childItems) {\n                    this.setChildCheckState(childItems, node, this.treeData[a]);\n                }\n            }\n        }\n    }\n    /**\n     * Checks whether the checkedNodes entered are valid and sets the valid checkedNodes while changing via setmodel(for hierarchical DS)\n     */\n    setChildCheckState(childItems, node, treeData) {\n        let checkedParent;\n        let count = 0;\n        if (this.dataType === 1) {\n            if (treeData) {\n                checkedParent = treeData[this.fields.id] ? treeData[this.fields.id].toString() : null;\n            }\n            for (let index = 0; index < childItems.length; index++) {\n                let checkNode = childItems[index][this.fields.id] ? childItems[index][this.fields.id].toString() : null;\n                if (treeData && checkedParent && this.autoCheck) {\n                    if (this.checkedNodes.indexOf(checkedParent) !== -1 && this.checkedNodes.indexOf(checkNode) === -1) {\n                        this.checkedNodes.push(checkNode);\n                    }\n                }\n                if (checkNode === node && this.checkedNodes.indexOf(node) === -1) {\n                    this.checkedNodes.push(node);\n                }\n                let subChildItems = this.getChildNodes(this.treeData, checkNode);\n                if (subChildItems) {\n                    this.setChildCheckState(subChildItems, node, treeData);\n                }\n            }\n        }\n        else {\n            if (treeData) {\n                checkedParent = treeData[this.fields.id] ? treeData[this.fields.id].toString() : '';\n            }\n            for (let index = 0; index < childItems.length; index++) {\n                let checkedChild = childItems[index][this.fields.id] ? childItems[index][this.fields.id].toString() : '';\n                if (treeData && checkedParent && this.autoCheck) {\n                    if (this.checkedNodes.indexOf(checkedParent) !== -1 && this.checkedNodes.indexOf(checkedChild) === -1) {\n                        this.checkedNodes.push(checkedChild);\n                    }\n                }\n                if (checkedChild === node && this.checkedNodes.indexOf(node) === -1) {\n                    this.checkedNodes.push(node);\n                }\n                let subChildItems = getValue(this.fields.child.toString(), childItems[index]);\n                if (subChildItems) {\n                    this.setChildCheckState(subChildItems, node, childItems[index]);\n                }\n                if (this.checkedNodes.indexOf(checkedChild) !== -1 && this.autoCheck) {\n                    count++;\n                }\n                if (count === childItems.length && this.checkedNodes.indexOf(checkedParent) === -1 && this.autoCheck) {\n                    this.checkedNodes.push(checkedParent);\n                }\n            }\n        }\n    }\n    setIndeterminate(nodes) {\n        for (let i = 0; i < nodes.length; i++) {\n            this.setValidCheckedNode(nodes[i]);\n        }\n    }\n    updatePosition(id, newData, isRefreshChild, childValue) {\n        if (this.dataType === 1) {\n            let pos = this.getDataPos(this.treeData, this.fields, id);\n            this.treeData.splice(pos, 1, newData);\n            if (isRefreshChild) {\n                this.removeChildNodes(id);\n                for (let j = 0; j < childValue.length; j++) {\n                    this.treeData.splice(pos, 0, childValue[j]);\n                    pos++;\n                }\n            }\n            this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);\n        }\n        else {\n            this.updateChildPosition(this.treeData, this.fields, id, [newData], undefined);\n        }\n    }\n    updateChildPosition(treeData, mapper, currID, newData, index) {\n        let found;\n        for (let i = 0, objlen = treeData.length; i < objlen; i++) {\n            let nodeId = getValue(mapper.id, treeData[i]);\n            if (treeData[i] && nodeId && nodeId.toString() === currID) {\n                treeData[i] = newData[0];\n                return true;\n            }\n            else if (typeof mapper.child === 'string' && !isNullOrUndefined(getValue(mapper.child, treeData[i]))) {\n                let childObj = getValue(mapper.child, treeData[i]);\n                found = this.updateChildPosition(childObj, this.getChildMapper(mapper), currID, newData, index);\n                if (found !== undefined) {\n                    break;\n                }\n            }\n            else if (this.fields.dataSource instanceof DataManager && !isNullOrUndefined(getValue('child', treeData[i]))) {\n                let childData = getValue('child', treeData[i]);\n                found = this.updateChildPosition(childData, this.getChildMapper(mapper), currID, newData, index);\n                if (found !== undefined) {\n                    break;\n                }\n            }\n        }\n        return found;\n    }\n    dynamicState() {\n        this.setDragAndDrop(this.allowDragAndDrop);\n        this.wireEditingEvents(this.allowEditing);\n        if (!this.disabled) {\n            this.wireEvents();\n            this.setRipple();\n        }\n        else {\n            this.unWireEvents();\n            this.rippleFn();\n            this.rippleIconFn();\n        }\n    }\n    crudOperation(operation, nodes, target, newText, newNode, index, prevent) {\n        let data = this.fields.dataSource;\n        let matchedArr = [];\n        let query = this.getQuery(this.fields);\n        let key = this.fields.id;\n        let crud;\n        let changes = {\n            addedRecords: [],\n            deletedRecords: [],\n            changedRecords: []\n        };\n        let nodesID = [];\n        if (nodes) {\n            nodesID = this.nodeType(nodes);\n        }\n        else if (target) {\n            if (typeof target == \"string\") {\n                nodesID[0] = target.toString();\n            }\n            else if (typeof target === \"object\") {\n                nodesID[0] = target.getAttribute(\"data-uid\").toString();\n            }\n        }\n        for (let i = 0, len = nodesID.length; i < len; i++) {\n            let liEle = this.getElement(nodesID[i]);\n            if (isNullOrUndefined(liEle)) {\n                continue;\n            }\n            let removedData = this.getNodeObject(nodesID[i]);\n            matchedArr.push(removedData);\n        }\n        switch (operation) {\n            case 'delete':\n                if (nodes.length == 1) {\n                    crud = data.remove(key, matchedArr[0], query.fromTable, query);\n                }\n                else {\n                    changes.deletedRecords = matchedArr;\n                    crud = data.saveChanges(changes, key, query.fromTable, query);\n                }\n                crud.then((e) => this.deleteSuccess(nodesID))\n                    .catch((e) => this.dmFailure(e));\n                break;\n            case 'update':\n                matchedArr[0][this.fields.text] = newText;\n                crud = data.update(key, matchedArr[0], query.fromTable, query);\n                crud.then((e) => this.editSucess(target, newText, prevent))\n                    .catch((e) => this.dmFailure(e, target, prevent));\n                break;\n            case 'insert':\n                if (newNode.length == 1) {\n                    crud = data.insert(newNode[0], query.fromTable, query);\n                }\n                else {\n                    let arr = [];\n                    for (let i = 0, len = newNode.length; i < len; i++) {\n                        arr.push(newNode[i]);\n                    }\n                    changes.addedRecords = arr;\n                    crud = data.saveChanges(changes, key, query.fromTable, query);\n                }\n                crud.then((e) => {\n                    let dropLi = this.getElement(target);\n                    this.addSuccess(newNode, dropLi, index);\n                    this.preventExpand = false;\n                }).catch((e) => this.dmFailure(e));\n                break;\n        }\n    }\n    deleteSuccess(nodes) {\n        for (let i = 0, len = nodes.length; i < len; i++) {\n            let liEle = this.getElement(nodes[i]);\n            if (isNullOrUndefined(liEle)) {\n                continue;\n            }\n            this.removeNode(liEle);\n        }\n        if (this.dataType === 1) {\n            this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);\n        }\n        this.triggerEvent();\n    }\n    editSucess(target, newText, prevent) {\n        let liEle = this.getElement(target);\n        let txtEle = select('.' + LISTTEXT, liEle);\n        this.appendNewText(liEle, txtEle, newText, prevent);\n    }\n    addSuccess(nodes, dropLi, index) {\n        let dropUl;\n        let icon = dropLi ? dropLi.querySelector('.' + ICON) : null;\n        let proxy = this;\n        if (dropLi && icon && icon.classList.contains(EXPANDABLE) &&\n            dropLi.querySelector('.' + PARENTITEM) === null) {\n            proxy.renderChildNodes(dropLi, null, () => {\n                dropUl = dropLi.querySelector('.' + PARENTITEM);\n                proxy.addGivenNodes(nodes, dropLi, index, true, dropUl);\n                proxy.triggerEvent();\n            });\n        }\n        else {\n            this.addGivenNodes(nodes, dropLi, index, true);\n            this.triggerEvent();\n        }\n    }\n    dmFailure(e, target, prevent) {\n        if (target) {\n            this.updatePreviousText(target, prevent);\n        }\n        this.trigger('actionFailure', { error: e });\n    }\n    updatePreviousText(target, prevent) {\n        let liEle = this.getElement(target);\n        let txtEle = select('.' + LISTTEXT, liEle);\n        this.updateText(liEle, txtEle, this.oldText, prevent);\n    }\n    /**\n     * Called internally if any of the property value changed.\n     * @param  {TreeView} newProp\n     * @param  {TreeView} oldProp\n     * @returns void\n     * @private\n     */\n    // tslint:disable-next-line:max-func-body-length\n    onPropertyChanged(newProp, oldProp) {\n        for (let prop of Object.keys(newProp)) {\n            switch (prop) {\n                case 'allowDragAndDrop':\n                    this.setDragAndDrop(this.allowDragAndDrop);\n                    break;\n                case 'dragArea':\n                    if (this.allowDragAndDrop) {\n                        this.dragObj.dragArea = this.dragArea;\n                    }\n                    break;\n                case 'allowEditing':\n                    this.wireEditingEvents(this.allowEditing);\n                    break;\n                case 'allowMultiSelection':\n                    if (this.selectedNodes.length > 1) {\n                        let sNode = this.getElement(this.selectedNodes[0]);\n                        this.isLoaded = false;\n                        this.removeSelectAll();\n                        this.selectNode(sNode, null);\n                        this.isLoaded = true;\n                    }\n                    this.setMultiSelect(this.allowMultiSelection);\n                    this.addMultiSelect(this.allowMultiSelection);\n                    break;\n                case 'checkedNodes':\n                    if (this.showCheckBox) {\n                        this.checkedNodes = oldProp.checkedNodes;\n                        this.setCheckedNodes(newProp.checkedNodes);\n                    }\n                    break;\n                case 'autoCheck':\n                    if (this.showCheckBox) {\n                        this.autoCheck = newProp.autoCheck;\n                        this.ensureIndeterminate();\n                    }\n                    break;\n                case 'cssClass':\n                    this.setCssClass(oldProp.cssClass, newProp.cssClass);\n                    break;\n                case 'enableRtl':\n                    this.setEnableRtl();\n                    break;\n                case 'expandedNodes':\n                    this.isAnimate = false;\n                    if (!this.isBlazorPlatform) {\n                        this.setProperties({ expandedNodes: [] }, true);\n                    }\n                    this.collapseAll();\n                    this.isInitalExpand = true;\n                    if (!this.isBlazorPlatform) {\n                        this.setProperties({ expandedNodes: isNullOrUndefined(newProp.expandedNodes) ? [] : newProp.expandedNodes }, true);\n                    }\n                    this.doExpandAction();\n                    this.isInitalExpand = false;\n                    this.isAnimate = true;\n                    break;\n                case 'expandOn':\n                    this.wireExpandOnEvent(false);\n                    this.setExpandOnType();\n                    if (this.expandOnType !== 'None' && !this.disabled) {\n                        this.wireExpandOnEvent(true);\n                    }\n                    break;\n                case 'disabled':\n                    this.setDisabledMode();\n                    this.dynamicState();\n                    break;\n                case 'fields':\n                    this.isAnimate = false;\n                    this.isFieldChange = true;\n                    this.initialRender = true;\n                    if (!this.blazorInitialRender) {\n                        this.reRenderNodes();\n                    }\n                    this.blazorInitialRender = false;\n                    this.initialRender = false;\n                    this.isAnimate = true;\n                    this.isFieldChange = false;\n                    break;\n                case 'fullRowSelect':\n                    this.setFullRow(this.fullRowSelect);\n                    this.addFullRow(this.fullRowSelect);\n                    break;\n                case 'loadOnDemand':\n                    if (this.loadOnDemand === false && !this.onLoaded) {\n                        let nodes = this.element.querySelectorAll('li');\n                        let i = 0;\n                        while (i < nodes.length) {\n                            if (nodes[i].getAttribute('aria-expanded') !== 'true') {\n                                this.renderChildNodes(nodes[i], true, null, true);\n                            }\n                            i++;\n                        }\n                        this.onLoaded = true;\n                    }\n                    break;\n                case 'nodeTemplate':\n                    this.nodeTemplateFn = this.templateComplier(this.nodeTemplate);\n                    this.reRenderNodes();\n                    break;\n                case 'selectedNodes':\n                    this.removeSelectAll();\n                    this.setProperties({ selectedNodes: newProp.selectedNodes }, true);\n                    this.doSelectionAction();\n                    break;\n                case 'showCheckBox':\n                    this.reRenderNodes();\n                    break;\n                case 'sortOrder':\n                    this.reRenderNodes();\n                    break;\n                case 'fullRowNavigable':\n                    this.setProperties({ fullRowNavigable: newProp.fullRowNavigable }, true);\n                    this.listBaseOption.itemNavigable = newProp.fullRowNavigable;\n                    this.reRenderNodes();\n                    break;\n            }\n        }\n    }\n    /**\n     * Removes the component from the DOM and detaches all its related event handlers. It also removes the attributes and classes.\n     */\n    destroy() {\n        resetBlazorTemplate(this.element.id + 'nodeTemplate', 'NodeTemplate');\n        this.clearTemplate();\n        this.element.removeAttribute('aria-activedescendant');\n        this.element.removeAttribute('tabindex');\n        this.unWireEvents();\n        this.wireEditingEvents(false);\n        if (!this.disabled) {\n            this.rippleFn();\n            this.rippleIconFn();\n        }\n        this.setCssClass(this.cssClass, null);\n        this.setDragAndDrop(false);\n        this.setFullRow(false);\n        if (this.isBlazorPlatform) {\n            this.ulElement = this.element.querySelector('.e-list-parent.e-ul');\n        }\n        if (this.ulElement && this.ulElement.parentElement) {\n            this.ulElement.parentElement.removeChild(this.ulElement);\n        }\n        if (!this.isBlazorPlatform) {\n            super.destroy();\n        }\n    }\n    /**\n     * Adds the collection of TreeView nodes based on target and index position. If target node is not specified,\n     * then the nodes are added as children of the given parentID or in the root level of TreeView.\n     * @param  { { [key: string]: Object }[] } nodes - Specifies the array of JSON data that has to be added.\n     * @param  { string | Element } target - Specifies ID of TreeView node/TreeView node as target element.\n     * @param  { number } index - Specifies the index to place the newly added nodes in the target element.\n     * @param { boolean } preventTargetExpand - If set to true, the target parent node will be prevented from auto expanding.\n     */\n    addNodes(nodes, target, index, preventTargetExpand) {\n        if (isNullOrUndefined(nodes)) {\n            return;\n        }\n        nodes = JSON.parse(JSON.stringify(nodes));\n        let dropLi = this.getElement(target);\n        this.preventExpand = preventTargetExpand;\n        if (this.fields.dataSource instanceof DataManager && (this.fields.dataSource.adaptorName !== 'BlazorAdaptor')) {\n            if (!this.isOffline) {\n                this.crudOperation('insert', null, target, null, nodes, index, this.preventExpand);\n            }\n            else {\n                this.addSuccess(nodes, dropLi, index);\n            }\n        }\n        else if (this.dataType === 2) {\n            this.addGivenNodes(nodes, dropLi, index);\n        }\n        else {\n            if (dropLi) {\n                this.addGivenNodes(nodes, dropLi, index);\n            }\n            else {\n                nodes = this.getSortedData(nodes);\n                for (let i = 0; i < nodes.length; i++) {\n                    let pid = getValue(this.fields.parentID, nodes[i]);\n                    dropLi = pid ? this.getElement(pid.toString()) : pid;\n                    this.addGivenNodes([nodes[i]], dropLi, index);\n                }\n            }\n            this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);\n        }\n        if (this.showCheckBox && dropLi) {\n            this.ensureParentCheckState(dropLi);\n        }\n        if ((this.fields.dataSource instanceof DataManager === false) || (this.fields.dataSource instanceof DataManager) && (this.fields.dataSource.adaptorName === 'BlazorAdaptor')) {\n            this.preventExpand = false;\n            this.triggerEvent();\n        }\n    }\n    /**\n     * Instead of clicking on the TreeView node for editing, we can enable it by using\n     * `beginEdit` property. On passing the node ID or element through this property, the edit textBox\n     * will be created for the particular node thus allowing us to edit it.\n     * @param  {string | Element} node - Specifies ID of TreeView node/TreeView node.\n     */\n    beginEdit(node) {\n        let ele = this.getElement(node);\n        if (isNullOrUndefined(ele) || this.disabled) {\n            return;\n        }\n        this.createTextbox(ele, null);\n    }\n    /**\n     * Checks all the unchecked nodes. You can also check specific nodes by passing array of unchecked nodes\n     * as argument to this method.\n     * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/array of TreeView node.\n     */\n    checkAll(nodes) {\n        if (this.showCheckBox) {\n            this.doCheckBoxAction(nodes, true);\n        }\n    }\n    /**\n     * Collapses all the expanded TreeView nodes. You can collapse specific nodes by passing array of nodes as argument to this method.\n     * You can also collapse all the nodes excluding the hidden nodes by setting **excludeHiddenNodes** to true. If you want to collapse\n     * a specific level of nodes, set **level** as argument to collapseAll method.\n     * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/ array of TreeView node.\n     * @param  {number} level - TreeView nodes will collapse up to the given level.\n     * @param  {boolean} excludeHiddenNodes - Whether or not to exclude hidden nodes of TreeView when collapsing all nodes.\n     */\n    collapseAll(nodes, level, excludeHiddenNodes) {\n        if (!isNullOrUndefined(nodes)) {\n            this.doGivenAction(nodes, COLLAPSIBLE, false);\n        }\n        else {\n            if (level > 0) {\n                this.collapseByLevel(select('.' + PARENTITEM, this.element), level, excludeHiddenNodes);\n            }\n            else {\n                this.collapseAllNodes(excludeHiddenNodes);\n            }\n        }\n    }\n    /**\n     * Disables the collection of nodes by passing the ID of nodes or node elements in the array.\n     * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/array of TreeView nodes.\n     */\n    disableNodes(nodes) {\n        if (!isNullOrUndefined(nodes)) {\n            this.doDisableAction(nodes);\n        }\n    }\n    /**\n     * Enables the collection of disabled nodes by passing the ID of nodes or node elements in the array.\n     * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/array of TreeView nodes.\n     */\n    enableNodes(nodes) {\n        if (!isNullOrUndefined(nodes)) {\n            this.doEnableAction(nodes);\n        }\n    }\n    /**\n     * Ensures visibility of the TreeView node by using node ID or node element.\n     * When many TreeView nodes are present and we need to find a particular node, `ensureVisible` property\n     * helps bring the node to visibility by expanding the TreeView and scrolling to the specific node.\n     * @param  {string | Element} node - Specifies ID of TreeView node/TreeView nodes.\n     */\n    ensureVisible(node) {\n        let liEle = this.getElement(node);\n        if (isNullOrUndefined(liEle)) {\n            return;\n        }\n        let parents = this.parents(liEle, '.' + LISTITEM);\n        this.expandAll(parents);\n        setTimeout(() => { liEle.scrollIntoView(true); }, 450);\n    }\n    /**\n     * Expands all the collapsed TreeView nodes. You can expand the specific nodes by passing the array of collapsed nodes\n     * as argument to this method. You can also expand all the collapsed nodes by excluding the hidden nodes by setting\n     * **excludeHiddenNodes** to true to this method. To expand a specific level of nodes, set **level** as argument to expandAll method.\n     * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/array of TreeView nodes.\n     * @param  {number} level - TreeView nodes will expand up to the given level.\n     * @param  {boolean} excludeHiddenNodes - Whether or not to exclude hidden nodes when expanding all nodes.\n     */\n    expandAll(nodes, level, excludeHiddenNodes) {\n        if (!isNullOrUndefined(nodes)) {\n            this.doGivenAction(nodes, EXPANDABLE, true);\n        }\n        else {\n            if (level > 0) {\n                this.expandByLevel(select('.' + PARENTITEM, this.element), level, excludeHiddenNodes);\n            }\n            else {\n                this.expandAllNodes(excludeHiddenNodes);\n            }\n        }\n    }\n    /**\n     * Gets all the checked nodes including child, whether it is loaded or not.\n     */\n    getAllCheckedNodes() {\n        let checkNodes = this.checkedNodes;\n        return checkNodes;\n    }\n    /**\n    * Gets all the disabled nodes including child, whether it is loaded or not.\n    */\n    getDisabledNodes() {\n        let disabledNodes = this.disableNode;\n        return disabledNodes;\n    }\n    /**\n     * Get the node's data such as id, text, parentID, selected, isChecked, and expanded by passing the node element or it's ID.\n     * @param  {string | Element} node - Specifies ID of TreeView node/TreeView node.\n     * @BlazorType NodeData\n     */\n    getNode(node) {\n        let ele = this.getElement(node);\n        return this.getNodeData(ele, true);\n    }\n    /**\n     * To get the updated data source of TreeView after performing some operation like drag and drop, node editing,\n     * node selecting/unSelecting, node expanding/collapsing, node checking/unChecking, adding and removing node.\n     * * If you pass the ID of TreeView node as arguments for this method then it will return the updated data source\n     * of the corresponding node otherwise it will return the entire updated data source of TreeView.\n     * * The updated data source also contains custom attributes if you specified in data source.\n     * @param  {string | Element} node - Specifies ID of TreeView node/TreeView node.\n     * @isGenericType true\n     */\n    getTreeData(node) {\n        let id = this.getId(node);\n        this.updatePersistProp();\n        if (isNullOrUndefined(id)) {\n            return this.treeData;\n        }\n        else {\n            let data = this.getNodeObject(id);\n            return isNullOrUndefined(data) ? [] : [data];\n        }\n    }\n    /**\n     * Moves the collection of nodes within the same TreeView based on target or its index position.\n     * @param  {string[] | Element[]} sourceNodes - Specifies the array of TreeView nodes ID/array of TreeView node.\n     * @param  {string | Element} target - Specifies ID of TreeView node/TreeView node as target element.\n     * @param  {number} index - Specifies the index to place the moved nodes in the target element.\n     * @param { boolean } preventTargetExpand - If set to true, the target parent node will be prevented from auto expanding.\n     */\n    moveNodes(sourceNodes, target, index, preventTargetExpand) {\n        let dropLi = this.getElement(target);\n        if (isNullOrUndefined(dropLi)) {\n            return;\n        }\n        for (let i = 0; i < sourceNodes.length; i++) {\n            let dragLi = this.getElement(sourceNodes[i]);\n            if (isNullOrUndefined(dragLi) || dropLi.isSameNode(dragLi) || this.isDescendant(dragLi, dropLi)) {\n                continue;\n            }\n            this.preventExpand = preventTargetExpand;\n            this.dropAsChildNode(dragLi, dropLi, this, index);\n        }\n        if (this.fields.dataSource instanceof DataManager === false) {\n            this.preventExpand = false;\n        }\n        this.triggerEvent();\n    }\n    /**\n     * Refreshes a particular node of the TreeView.\n     * @param  {string | Element} target - Specifies the ID of TreeView node or TreeView node as target element.\n     * @param  {{ [key: string]: Object }[]} newData - Specifies the new data of TreeView node.\n     */\n    refreshNode(target, newData) {\n        if (isNullOrUndefined(target) || isNullOrUndefined(newData)) {\n            return;\n        }\n        let id;\n        let isRefreshChild = false;\n        if (this.dataType == 1 && newData.length > 1) {\n            isRefreshChild = true;\n        }\n        else if (this.dataType == 2 && newData.length === 1) {\n            let updatedChildValue = getValue(this.fields.child.toString(), newData[0]);\n            if (!isNullOrUndefined(updatedChildValue)) {\n                isRefreshChild = true;\n            }\n        }\n        let liEle = this.getElement(target);\n        id = liEle ? liEle.getAttribute('data-uid') : ((target) ? target.toString() : null);\n        this.refreshData = this.getNodeObject(id);\n        newData = JSON.parse(JSON.stringify(newData));\n        // tslint:disable\n        let newNodeData;\n        let parentData;\n        if (this.dataType == 1 && isRefreshChild) {\n            for (let k = 0; k < newData.length; k++) {\n                if (isNullOrUndefined(newData[k][this.fields.parentID])) {\n                    parentData = newData[k];\n                    newData.splice(k, 1);\n                    break;\n                }\n            }\n            newNodeData = extend({}, this.refreshData, parentData);\n        }\n        else {\n            newNodeData = extend({}, this.refreshData, newData[0]);\n        }\n        if (isNullOrUndefined(liEle)) {\n            this.updatePosition(id, newNodeData, isRefreshChild, newData);\n            return;\n        }\n        this.isRefreshed = true;\n        let level = parseFloat(liEle.getAttribute('aria-level'));\n        let newliEle = ListBase.createListItemFromJson(this.createElement, [newNodeData], this.listBaseOption, level);\n        let ul = select('.' + PARENTITEM, liEle);\n        let childItems = getValue(this.fields.child.toString(), newNodeData);\n        if ((isRefreshChild && ul) || (isRefreshChild && !isNullOrUndefined(childItems))) {\n            liEle.innerHTML = newliEle[0].innerHTML;\n            this.updatePosition(id, newNodeData, isRefreshChild, newData);\n            if (isRefreshChild && ul) {\n                this.expandAll([id]);\n            }\n        }\n        else {\n            let txtEle = select('.' + TEXTWRAP, liEle);\n            let newTextEle = select('.' + TEXTWRAP, newliEle[0]);\n            let icon = select('div.' + ICON, txtEle);\n            let newIcon = select('div.' + ICON, newTextEle);\n            if (icon && newIcon) {\n                if (newIcon.classList.contains(EXPANDABLE) && icon.classList.contains(COLLAPSIBLE)) {\n                    removeClass([newIcon], EXPANDABLE);\n                    addClass([newIcon], COLLAPSIBLE);\n                }\n                else if (newIcon.classList.contains(COLLAPSIBLE) && icon.classList.contains(EXPANDABLE)) {\n                    removeClass([newIcon], COLLAPSIBLE);\n                    addClass([newIcon], EXPANDABLE);\n                }\n                else if (icon.classList.contains('interaction')) {\n                    addClass([newIcon], 'interaction');\n                }\n            }\n            txtEle.innerHTML = newTextEle.innerHTML;\n            this.updatePosition(id, newNodeData, isRefreshChild, newData);\n        }\n        if (newNodeData[this.fields.tooltip]) {\n            liEle.setAttribute(\"title\", newNodeData[this.fields.tooltip]);\n        }\n        if (newNodeData.hasOwnProperty(this.fields.htmlAttributes) && newNodeData[this.fields.htmlAttributes]) {\n            let attr = {};\n            merge(attr, newNodeData[this.fields.htmlAttributes]);\n            if (attr.class) {\n                addClass([liEle], attr.class.split(' '));\n                delete attr.class;\n            }\n            else {\n                attributes(liEle, attr);\n            }\n        }\n        this.isRefreshed = false;\n        this.triggerEvent();\n    }\n    /**\n     * Removes the collection of TreeView nodes by passing the array of node details as argument to this method.\n     * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/array of TreeView node.\n     */\n    removeNodes(nodes) {\n        if (!isNullOrUndefined(nodes)) {\n            if (this.fields.dataSource instanceof DataManager && !this.isOffline && (this.fields.dataSource.adaptorName !== 'BlazorAdaptor')) {\n                this.crudOperation('delete', nodes);\n            }\n            else {\n                this.deleteSuccess(nodes);\n            }\n        }\n    }\n    /**\n     * Replaces the text of the TreeView node with the given text.\n     * @param  {string | Element} target - Specifies ID of TreeView node/TreeView node as target element.\n     * @param  {string} newText - Specifies the new text of TreeView node.\n     */\n    updateNode(target, newText) {\n        if (isNullOrUndefined(target) || isNullOrUndefined(newText) || !this.allowEditing) {\n            return;\n        }\n        let liEle = this.getElement(target);\n        if (isNullOrUndefined(liEle)) {\n            return;\n        }\n        let txtEle = select('.' + LISTTEXT, liEle);\n        this.updateOldText(liEle);\n        let eventArgs = this.getEditEvent(liEle, null, null);\n        this.trigger('nodeEditing', eventArgs, (observedArgs) => {\n            if (!observedArgs.cancel) {\n                if (this.fields.dataSource instanceof DataManager && !this.isOffline && (this.fields.dataSource.adaptorName !== 'BlazorAdaptor')) {\n                    this.crudOperation('update', null, target, newText, null, null, false);\n                }\n                else {\n                    this.appendNewText(liEle, txtEle, newText, false);\n                }\n            }\n        });\n    }\n    /**\n     * Unchecks all the checked nodes. You can also uncheck the specific nodes by passing array of checked nodes\n     * as argument to this method.\n     * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/array of TreeView node.\n     */\n    uncheckAll(nodes) {\n        if (this.showCheckBox) {\n            this.doCheckBoxAction(nodes, false);\n        }\n    }\n};\n__decorate$8([\n    Property(false)\n], TreeView.prototype, \"allowDragAndDrop\", void 0);\n__decorate$8([\n    Property(false)\n], TreeView.prototype, \"allowEditing\", void 0);\n__decorate$8([\n    Property(false)\n], TreeView.prototype, \"allowMultiSelection\", void 0);\n__decorate$8([\n    Complex({}, NodeAnimationSettings)\n], TreeView.prototype, \"animation\", void 0);\n__decorate$8([\n    Property()\n], TreeView.prototype, \"checkedNodes\", void 0);\n__decorate$8([\n    Property('')\n], TreeView.prototype, \"cssClass\", void 0);\n__decorate$8([\n    Property(false)\n], TreeView.prototype, \"disabled\", void 0);\n__decorate$8([\n    Property(null)\n], TreeView.prototype, \"dragArea\", void 0);\n__decorate$8([\n    Property(false)\n], TreeView.prototype, \"enableHtmlSanitizer\", void 0);\n__decorate$8([\n    Property(false)\n], TreeView.prototype, \"enablePersistence\", void 0);\n__decorate$8([\n    Property()\n], TreeView.prototype, \"expandedNodes\", void 0);\n__decorate$8([\n    Property('Auto')\n], TreeView.prototype, \"expandOn\", void 0);\n__decorate$8([\n    Complex({}, FieldsSettings)\n], TreeView.prototype, \"fields\", void 0);\n__decorate$8([\n    Property(true)\n], TreeView.prototype, \"fullRowSelect\", void 0);\n__decorate$8([\n    Property(true)\n], TreeView.prototype, \"loadOnDemand\", void 0);\n__decorate$8([\n    Property()\n], TreeView.prototype, \"locale\", void 0);\n__decorate$8([\n    Property()\n], TreeView.prototype, \"nodeTemplate\", void 0);\n__decorate$8([\n    Property()\n], TreeView.prototype, \"selectedNodes\", void 0);\n__decorate$8([\n    Property('None')\n], TreeView.prototype, \"sortOrder\", void 0);\n__decorate$8([\n    Property(false)\n], TreeView.prototype, \"showCheckBox\", void 0);\n__decorate$8([\n    Property(true)\n], TreeView.prototype, \"autoCheck\", void 0);\n__decorate$8([\n    Property(false)\n], TreeView.prototype, \"fullRowNavigable\", void 0);\n__decorate$8([\n    Event()\n], TreeView.prototype, \"actionFailure\", void 0);\n__decorate$8([\n    Event()\n], TreeView.prototype, \"created\", void 0);\n__decorate$8([\n    Event()\n], TreeView.prototype, \"dataBound\", void 0);\n__decorate$8([\n    Event()\n], TreeView.prototype, \"dataSourceChanged\", void 0);\n__decorate$8([\n    Event()\n], TreeView.prototype, \"drawNode\", void 0);\n__decorate$8([\n    Event()\n], TreeView.prototype, \"destroyed\", void 0);\n__decorate$8([\n    Event()\n], TreeView.prototype, \"keyPress\", void 0);\n__decorate$8([\n    Event()\n], TreeView.prototype, \"nodeChecked\", void 0);\n__decorate$8([\n    Event()\n], TreeView.prototype, \"nodeChecking\", void 0);\n__decorate$8([\n    Event()\n], TreeView.prototype, \"nodeClicked\", void 0);\n__decorate$8([\n    Event()\n], TreeView.prototype, \"nodeCollapsed\", void 0);\n__decorate$8([\n    Event()\n], TreeView.prototype, \"nodeCollapsing\", void 0);\n__decorate$8([\n    Event()\n], TreeView.prototype, \"nodeDragging\", void 0);\n__decorate$8([\n    Event()\n], TreeView.prototype, \"nodeDragStart\", void 0);\n__decorate$8([\n    Event()\n], TreeView.prototype, \"nodeDragStop\", void 0);\n__decorate$8([\n    Event()\n], TreeView.prototype, \"nodeDropped\", void 0);\n__decorate$8([\n    Event()\n], TreeView.prototype, \"nodeEdited\", void 0);\n__decorate$8([\n    Event()\n], TreeView.prototype, \"nodeEditing\", void 0);\n__decorate$8([\n    Event()\n], TreeView.prototype, \"nodeExpanded\", void 0);\n__decorate$8([\n    Event()\n], TreeView.prototype, \"nodeExpanding\", void 0);\n__decorate$8([\n    Event()\n], TreeView.prototype, \"nodeSelected\", void 0);\n__decorate$8([\n    Event()\n], TreeView.prototype, \"nodeSelecting\", void 0);\nTreeView = TreeView_1 = __decorate$8([\n    NotifyPropertyChanges\n], TreeView);\n\n/**\n * TreeView modules\n */\n\nvar __decorate$9 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nconst CONTROL$1 = 'e-control';\nconst ROOT$1 = 'e-sidebar';\nconst DOCKER = 'e-dock';\nconst CLOSE = 'e-close';\nconst OPEN = 'e-open';\nconst TRASITION = 'e-transition';\nconst DEFAULTBACKDROP = 'e-sidebar-overlay';\nconst CONTEXTBACKDROP = 'e-backdrop';\nconst RTL$2 = 'e-rtl';\nconst RIGHT = 'e-right';\nconst LEFT = 'e-left';\nconst OVER = 'e-over';\nconst PUSH = 'e-push';\nconst SLIDE = 'e-slide';\nconst VISIBILITY = 'e-visibility';\nconst MAINCONTENTANIMATION = 'e-content-animation';\nconst DISABLEANIMATION = 'e-disable-animation';\nconst CONTEXT = 'e-sidebar-context';\nconst SIDEBARABSOLUTE = 'e-sidebar-absolute';\n/**\n * Sidebar is an expandable or collapsible\n * component that typically act as a side container to place the primary or secondary content alongside of the main content.\n * ```html\n * <aside id=\"sidebar\">\n * </aside>\n * ```\n * ```typescript\n * <script>\n *   let sidebarObject: Sidebar = new Sidebar();\n *   sidebarObject.appendTo(\"#sidebar\");\n * </script>\n * ```\n */\nlet Sidebar = class Sidebar extends Component {\n    constructor(options, element) {\n        super(options, element);\n        this.isBlazor = false;\n    }\n    preRender() {\n        this.isBlazor = (isBlazor() && this.isServerRendered);\n        if (!this.isBlazor) {\n            this.setWidth();\n        }\n    }\n    render() {\n        this.initialize();\n        this.wireEvents();\n        this.renderComplete();\n    }\n    initialize() {\n        this.setTarget();\n        this.addClass();\n        if (!this.isBlazor) {\n            this.setZindex();\n        }\n        if (this.enableDock) {\n            this.setDock();\n        }\n        if (this.isOpen) {\n            this.show();\n        }\n        else {\n            this.setMediaQuery();\n        }\n        this.checkType(true);\n        this.setType(this.type);\n        this.setCloseOnDocumentClick();\n        if (!this.isBlazor) {\n            this.setEnableRTL();\n        }\n        if (Browser.isDevice) {\n            this.windowWidth = window.innerWidth;\n        }\n    }\n    setEnableRTL() {\n        this.enableRtl ? (addClass([this.element], RTL$2)) :\n            (removeClass([this.element], RTL$2));\n    }\n    setTarget() {\n        this.targetEle = this.element.nextElementSibling;\n        this.sidebarEleCopy = this.element.cloneNode(true);\n        if (typeof (this.target) === 'string') {\n            this.setProperties({ target: document.querySelector(this.target) }, true);\n        }\n        if (this.target) {\n            this.target.insertBefore(this.element, this.target.children[0]);\n            addClass([this.element], SIDEBARABSOLUTE);\n            addClass([this.target], CONTEXT);\n            this.targetEle = this.getTargetElement();\n        }\n    }\n    getTargetElement() {\n        let siblingElement = this.element.nextElementSibling;\n        while (!isNullOrUndefined(siblingElement)) {\n            if (!siblingElement.classList.contains(ROOT$1)) {\n                break;\n            }\n            siblingElement = siblingElement.nextElementSibling;\n        }\n        return siblingElement;\n    }\n    setCloseOnDocumentClick() {\n        if (this.closeOnDocumentClick) {\n            EventHandler.add(document, 'mousedown touchstart', this.documentclickHandler, this);\n        }\n        else {\n            EventHandler.remove(document, 'mousedown touchstart', this.documentclickHandler);\n        }\n    }\n    setWidth() {\n        if (this.enableDock && this.position === 'Left') {\n            setStyleAttribute(this.element, { 'width': this.setDimension(this.dockSize) });\n        }\n        else if (this.enableDock && this.position === 'Right') {\n            setStyleAttribute(this.element, { 'width': this.setDimension(this.dockSize) });\n        }\n        else if (!this.enableDock) {\n            setStyleAttribute(this.element, { 'width': this.setDimension(this.width) });\n        }\n    }\n    setDimension(width) {\n        if (typeof width === 'number') {\n            width = formatUnit(width);\n        }\n        else if (typeof width === 'string') {\n            width = (width.match(/px|%|em/)) ? width : formatUnit(width);\n        }\n        else {\n            width = '100%';\n        }\n        return width;\n    }\n    setZindex() {\n        setStyleAttribute(this.element, { 'z-index': '' + this.zIndex });\n    }\n    addClass() {\n        let classELement = document.querySelector('.e-main-content');\n        if (!isNullOrUndefined(classELement || this.targetEle)) {\n            addClass([classELement || this.targetEle], [MAINCONTENTANIMATION]);\n        }\n        this.tabIndex = this.element.hasAttribute('tabindex') ? this.element.getAttribute('tabindex') : '0';\n        if (!this.isBlazor) {\n            if (!this.enableDock && this.type !== 'Auto') {\n                addClass([this.element], [VISIBILITY]);\n            }\n            removeClass([this.element], [OPEN, CLOSE, RIGHT, LEFT, SLIDE, PUSH, OVER]);\n            this.element.classList.add(ROOT$1);\n            addClass([this.element], (this.position === 'Right') ? RIGHT : LEFT);\n            if (this.enableDock) {\n                addClass([this.element], DOCKER);\n            }\n            this.element.setAttribute('tabindex', this.tabIndex);\n        }\n        if (this.type === 'Auto' && !Browser.isDevice) {\n            this.show();\n        }\n        else if (!this.isOpen) {\n            addClass([this.element], CLOSE);\n        }\n    }\n    checkType(val) {\n        if (!(this.type === 'Push' || this.type === 'Over' || this.type === 'Slide')) {\n            this.type = 'Auto';\n        }\n        else {\n            if (!this.element.classList.contains(CLOSE) && !val) {\n                this.hide();\n            }\n        }\n    }\n    transitionEnd(e) {\n        this.setDock();\n        if (!isNullOrUndefined(e) && e.target === this.element) {\n            this.triggerChange();\n        }\n        EventHandler.remove(this.element, 'transitionend', this.transitionEnd);\n    }\n    destroyBackDrop() {\n        let sibling = document.querySelector('.e-main-content') || this.targetEle;\n        if (this.target && this.showBackdrop && sibling) {\n            removeClass([sibling], CONTEXTBACKDROP);\n        }\n        else if (this.showBackdrop && this.modal) {\n            this.modal.style.display = 'none';\n            this.modal.outerHTML = '';\n            this.modal = null;\n        }\n    }\n    /**\n     * Hide the Sidebar component, if it is in an open state.\n     * @returns void\n     */\n    hide(e) {\n        let closeArguments = {\n            model: this,\n            element: this.element,\n            cancel: false,\n            isInteracted: !isNullOrUndefined(e),\n            event: (e || null)\n        };\n        if (isBlazor()) {\n            delete closeArguments.model;\n        }\n        this.trigger('close', closeArguments, (observedcloseArgs) => {\n            if (!observedcloseArgs.cancel) {\n                if (this.element.classList.contains(CLOSE)) {\n                    return;\n                }\n                if (this.element.classList.contains(OPEN) && !this.animate) {\n                    this.triggerChange();\n                }\n                addClass([this.element], CLOSE);\n                removeClass([this.element], OPEN);\n                this.enableDock ? setStyleAttribute(this.element, { 'width': formatUnit(this.dockSize) }) :\n                    setStyleAttribute(this.element, { 'width': formatUnit(this.width) });\n                this.setType(this.type);\n                let sibling = document.querySelector('.e-main-content') || this.targetEle;\n                if (!this.enableDock && sibling) {\n                    sibling.style.transform = 'translateX(' + 0 + 'px)';\n                    this.position === 'Left' ? sibling.style.marginLeft = '0px' : sibling.style.marginRight = '0px';\n                }\n                this.destroyBackDrop();\n                this.setAnimation();\n                if (this.type === 'Slide') {\n                    document.body.classList.remove('e-sidebar-overflow');\n                }\n                this.setProperties({ isOpen: false }, true);\n                if (this.enableDock) {\n                    setTimeout(() => this.setTimeOut(), 50);\n                }\n                EventHandler.add(this.element, 'transitionend', this.transitionEnd, this);\n            }\n        });\n    }\n    setTimeOut() {\n        let sibling = document.querySelector('.e-main-content') || this.targetEle;\n        if (this.element.classList.contains(OPEN) && sibling) {\n            if (this.position === 'Left') {\n                this.width === 'auto' ? sibling.style.marginLeft = this.setDimension(this.element.getBoundingClientRect().width)\n                    : sibling.style.marginLeft = this.setDimension(this.width);\n            }\n            else {\n                this.width === 'auto' ? sibling.style.marginRight = this.setDimension(this.element.getBoundingClientRect().width)\n                    : sibling.style.marginRight = this.setDimension(this.width);\n            }\n        }\n        else if (this.element.classList.contains(CLOSE) && sibling) {\n            if (this.position === 'Left') {\n                this.dockSize === 'auto' ? sibling.style.marginLeft = this.setDimension(this.element.getBoundingClientRect().width)\n                    : sibling.style.marginLeft = this.setDimension(this.dockSize);\n            }\n            else {\n                this.dockSize === 'auto' ? sibling.style.marginRight = this.setDimension(this.element.getBoundingClientRect().width)\n                    : sibling.style.marginRight = this.setDimension(this.dockSize);\n            }\n        }\n    }\n    ;\n    /**\n     * Shows the Sidebar component, if it is in closed state.\n     * @returns void\n     */\n    show(e) {\n        let openArguments = {\n            model: this,\n            element: this.element,\n            cancel: false,\n            isInteracted: !isNullOrUndefined(e),\n            event: (e || null)\n        };\n        if (isBlazor()) {\n            delete openArguments.model;\n        }\n        this.trigger('open', openArguments, (observedopenArgs) => {\n            if (!observedopenArgs.cancel) {\n                removeClass([this.element], VISIBILITY);\n                if (this.element.classList.contains(OPEN)) {\n                    return;\n                }\n                if (this.element.classList.contains(CLOSE) && !this.animate) {\n                    this.triggerChange();\n                }\n                addClass([this.element], [OPEN, TRASITION]);\n                setStyleAttribute(this.element, { 'transform': '' });\n                removeClass([this.element], CLOSE);\n                setStyleAttribute(this.element, { 'width': formatUnit(this.width) });\n                this.setType(this.type);\n                this.createBackDrop();\n                this.setAnimation();\n                if (this.type === 'Slide') {\n                    document.body.classList.add('e-sidebar-overflow');\n                }\n                this.setProperties({ isOpen: true }, true);\n                EventHandler.add(this.element, 'transitionend', this.transitionEnd, this);\n            }\n        });\n    }\n    setAnimation() {\n        if (this.animate) {\n            removeClass([this.element], DISABLEANIMATION);\n        }\n        else {\n            addClass([this.element], DISABLEANIMATION);\n        }\n    }\n    triggerChange() {\n        let changeArguments = { name: 'change', element: this.element };\n        this.trigger('change', changeArguments);\n    }\n    setDock() {\n        if (this.enableDock && this.position === 'Left' && !this.getState()) {\n            setStyleAttribute(this.element, { 'transform': 'translateX(' + -100 + '%) translateX(' + this.setDimension(this.dockSize) + ')' });\n        }\n        else if (this.enableDock && this.position === 'Right' && !this.getState()) {\n            setStyleAttribute(this.element, { 'transform': 'translateX(' + 100 + '%) translateX(' + '-' + this.setDimension(this.dockSize) + ')' });\n        }\n        if (this.element.classList.contains(CLOSE) && this.enableDock) {\n            setStyleAttribute(this.element, { 'width': this.setDimension(this.dockSize) });\n        }\n    }\n    createBackDrop() {\n        if (this.target && this.showBackdrop && this.getState()) {\n            let sibling = document.querySelector('.e-main-content') || this.targetEle;\n            addClass([sibling], CONTEXTBACKDROP);\n        }\n        else if (this.showBackdrop && !this.modal && this.getState()) {\n            this.modal = this.createElement('div');\n            this.modal.className = DEFAULTBACKDROP;\n            this.modal.style.display = 'block';\n            document.body.appendChild(this.modal);\n        }\n    }\n    getPersistData() {\n        return this.addOnPersist(['type', 'position', 'isOpen']);\n    }\n    /**\n     * Returns the current module name.\n     * @returns string\n     * @private\n     */\n    getModuleName() {\n        return 'sidebar';\n    }\n    /**\n     * Shows or hides the Sidebar based on the current state.\n     * @returns void\n     */\n    toggle(e) {\n        this.element.classList.contains(OPEN) ? this.hide() : this.show();\n    }\n    getState() {\n        return this.element.classList.contains(OPEN) ? true : false;\n    }\n    setMediaQuery() {\n        if (this.mediaQuery) {\n            let media = false;\n            if (typeof (this.mediaQuery) === 'string') {\n                media = window.matchMedia(this.mediaQuery).matches;\n            }\n            else {\n                media = (this.mediaQuery).matches;\n            }\n            if (media && this.windowWidth !== window.innerWidth) {\n                this.show();\n            }\n            else if (this.getState() && this.windowWidth !== window.innerWidth) {\n                this.hide();\n            }\n        }\n    }\n    resize(e) {\n        if (this.type === 'Auto') {\n            if (Browser.isDevice) {\n                addClass([this.element], OVER);\n            }\n            else {\n                addClass([this.element], PUSH);\n            }\n        }\n        this.setMediaQuery();\n        if (Browser.isDevice) {\n            this.windowWidth = window.innerWidth;\n        }\n    }\n    documentclickHandler(e) {\n        if (closest(e.target, '.' + CONTROL$1 + '' + '.' + ROOT$1)) {\n            return;\n        }\n        this.hide(e);\n    }\n    enableGestureHandler(args) {\n        if (!this.isOpen && this.position === 'Left' && args.swipeDirection === 'Right' &&\n            (args.startX <= 20 && args.distanceX >= 50 && args.velocity >= 0.5)) {\n            this.show();\n        }\n        else if (this.isOpen && this.position === 'Left' && args.swipeDirection === 'Left') {\n            this.hide();\n        }\n        else if (this.isOpen && this.position === 'Right' && args.swipeDirection === 'Right') {\n            this.hide();\n        }\n        else if (!this.isOpen && this.position === 'Right' && args.swipeDirection === 'Left'\n            && (window.innerWidth - args.startX <= 20 && args.distanceX >= 50 && args.velocity >= 0.5)) {\n            this.show();\n        }\n    }\n    setEnableGestures() {\n        if (this.enableGestures) {\n            this.mainContentEle = new Touch(document.body, { swipe: this.enableGestureHandler.bind(this) });\n            this.sidebarEle = new Touch(this.element, { swipe: this.enableGestureHandler.bind(this) });\n        }\n        else {\n            if (this.mainContentEle && this.sidebarEle) {\n                this.mainContentEle.destroy();\n                this.sidebarEle.destroy();\n            }\n        }\n    }\n    wireEvents() {\n        this.setEnableGestures();\n        window.addEventListener('resize', this.resize.bind(this));\n    }\n    unWireEvents() {\n        window.removeEventListener('resize', this.resize.bind(this));\n        EventHandler.remove(document, 'mousedown touchstart', this.documentclickHandler);\n        if (this.mainContentEle) {\n            this.mainContentEle.destroy();\n        }\n        if (this.sidebarEle) {\n            this.sidebarEle.destroy();\n        }\n    }\n    /**\n     * Called internally if any of the property value changed.\n     * @private\n     */\n    onPropertyChanged(newProp, oldProp) {\n        let sibling = document.querySelector('.e-main-content') || this.targetEle;\n        for (let prop of Object.keys(newProp)) {\n            switch (prop) {\n                case 'isOpen':\n                    this.isOpen ? this.show() : this.hide();\n                    break;\n                case 'width':\n                    this.setWidth();\n                    if (!this.getState()) {\n                        this.setDock();\n                    }\n                    break;\n                case 'animate':\n                    this.setAnimation();\n                    break;\n                case 'type':\n                    this.checkType(false);\n                    removeClass([this.element], [VISIBILITY]);\n                    this.addClass();\n                    addClass([this.element], this.type === 'Auto' ? (Browser.isDevice ? ['e-over'] :\n                        ['e-push']) : ['e-' + this.type.toLowerCase()]);\n                    break;\n                case 'position':\n                    this.element.style.transform = '';\n                    this.setDock();\n                    if (sibling) {\n                        this.position === 'Left' ? sibling.style.marginRight = '0px' : sibling.style.marginLeft = '0px';\n                    }\n                    if (this.position === 'Right') {\n                        removeClass([this.element], LEFT);\n                        addClass([this.element], RIGHT);\n                    }\n                    else {\n                        removeClass([this.element], RIGHT);\n                        addClass([this.element], LEFT);\n                    }\n                    this.setType(this.type);\n                    break;\n                case 'showBackdrop':\n                    if (this.showBackdrop) {\n                        this.createBackDrop();\n                    }\n                    else {\n                        if (this.modal) {\n                            this.modal.style.display = 'none';\n                            this.modal.outerHTML = '';\n                            this.modal = null;\n                        }\n                    }\n                    break;\n                case 'target':\n                    if (typeof (this.target) === 'string') {\n                        this.setProperties({ target: document.querySelector(this.target) }, true);\n                    }\n                    if (isNullOrUndefined(this.target)) {\n                        removeClass([this.element], SIDEBARABSOLUTE);\n                        removeClass([oldProp.target], CONTEXT);\n                        setStyleAttribute(sibling, { 'margin-left': 0, 'margin-right': 0 });\n                        document.body.insertAdjacentElement('afterbegin', this.element);\n                    }\n                    let isRendered = this.isServerRendered;\n                    this.isServerRendered = false;\n                    super.refresh();\n                    this.isServerRendered = isRendered;\n                    break;\n                case 'closeOnDocumentClick':\n                    this.setCloseOnDocumentClick();\n                    break;\n                case 'enableDock':\n                    if (!this.getState()) {\n                        this.setDock();\n                    }\n                    break;\n                case 'zIndex':\n                    this.setZindex();\n                    break;\n                case 'mediaQuery':\n                    this.setMediaQuery();\n                    break;\n                case 'enableGestures':\n                    this.setEnableGestures();\n                    break;\n                case 'enableRtl':\n                    this.setEnableRTL();\n                    break;\n            }\n        }\n    }\n    setType(type) {\n        let elementWidth = this.element.getBoundingClientRect().width;\n        this.setZindex();\n        let sibling = document.querySelector('.e-main-content') || this.targetEle;\n        if (sibling) {\n            sibling.style.transform = 'translateX(' + 0 + 'px)';\n            if (!Browser.isDevice && this.type !== 'Auto') {\n                this.position === 'Left' ? sibling.style.marginLeft = '0px' : sibling.style.marginRight = '0px';\n            }\n        }\n        let margin = this.position === 'Left' ? elementWidth + 'px' : elementWidth + 'px';\n        let eleWidth = this.position === 'Left' ? elementWidth : -(elementWidth);\n        removeClass([this.element], [PUSH, OVER, SLIDE]);\n        switch (type) {\n            case 'Push':\n                addClass([this.element], [PUSH]);\n                if (sibling && (this.enableDock || this.element.classList.contains(OPEN))) {\n                    this.position === 'Left' ? sibling.style.marginLeft = margin : sibling.style.marginRight = margin;\n                }\n                break;\n            case 'Slide':\n                addClass([this.element], [SLIDE]);\n                if (sibling && (this.enableDock || this.element.classList.contains(OPEN))) {\n                    sibling.style.transform = 'translateX(' + eleWidth + 'px)';\n                }\n                break;\n            case 'Over':\n                addClass([this.element], [OVER]);\n                if (this.enableDock && this.element.classList.contains(CLOSE)) {\n                    if (sibling) {\n                        this.position === 'Left' ? sibling.style.marginLeft = margin : sibling.style.marginRight = margin;\n                    }\n                }\n                break;\n            case 'Auto':\n                addClass([this.element], [TRASITION]);\n                if (Browser.isDevice) {\n                    if (sibling && (this.enableDock) && !this.getState()) {\n                        this.position === 'Left' ? sibling.style.marginLeft = margin : sibling.style.marginRight = margin;\n                        addClass([this.element], PUSH);\n                    }\n                    else {\n                        addClass([this.element], OVER);\n                    }\n                }\n                else {\n                    addClass([this.element], PUSH);\n                    if (sibling && (this.enableDock || this.element.classList.contains(OPEN))) {\n                        this.position === 'Left' ? sibling.style.marginLeft = margin : sibling.style.marginRight = margin;\n                    }\n                }\n                this.createBackDrop();\n        }\n    }\n    /**\n     * Removes the control from the DOM and detaches all its related event handlers. Also it removes the attributes and classes.\n     * @returns void\n     */\n    destroy() {\n        super.destroy();\n        removeClass([this.element], [OPEN, CLOSE, PUSH, SLIDE, OVER, LEFT, RIGHT, TRASITION]);\n        if (this.target) {\n            removeClass([this.element], SIDEBARABSOLUTE);\n            removeClass([this.target], CONTEXT);\n        }\n        this.destroyBackDrop();\n        this.element.style.width = '';\n        this.element.style.zIndex = '';\n        this.element.style.transform = '';\n        this.windowWidth = null;\n        (!isNullOrUndefined(this.sidebarEleCopy.getAttribute('tabindex'))) ?\n            this.element.setAttribute('tabindex', this.tabIndex) : this.element.removeAttribute('tabindex');\n        let sibling = document.querySelector('.e-main-content') || this.targetEle;\n        if (!isNullOrUndefined(sibling)) {\n            sibling.style.margin = '';\n            sibling.style.transform = '';\n        }\n        this.unWireEvents();\n    }\n};\n__decorate$9([\n    Property('auto')\n], Sidebar.prototype, \"dockSize\", void 0);\n__decorate$9([\n    Property(null)\n], Sidebar.prototype, \"mediaQuery\", void 0);\n__decorate$9([\n    Property(false)\n], Sidebar.prototype, \"enableDock\", void 0);\n__decorate$9([\n    Property('en-US')\n], Sidebar.prototype, \"locale\", void 0);\n__decorate$9([\n    Property(false)\n], Sidebar.prototype, \"enablePersistence\", void 0);\n__decorate$9([\n    Property(true)\n], Sidebar.prototype, \"enableGestures\", void 0);\n__decorate$9([\n    Property(false)\n], Sidebar.prototype, \"isOpen\", void 0);\n__decorate$9([\n    Property(false)\n], Sidebar.prototype, \"enableRtl\", void 0);\n__decorate$9([\n    Property(true)\n], Sidebar.prototype, \"animate\", void 0);\n__decorate$9([\n    Property('auto')\n], Sidebar.prototype, \"height\", void 0);\n__decorate$9([\n    Property(false)\n], Sidebar.prototype, \"closeOnDocumentClick\", void 0);\n__decorate$9([\n    Property('Left')\n], Sidebar.prototype, \"position\", void 0);\n__decorate$9([\n    Property(null)\n], Sidebar.prototype, \"target\", void 0);\n__decorate$9([\n    Property(false)\n], Sidebar.prototype, \"showBackdrop\", void 0);\n__decorate$9([\n    Property('Auto')\n], Sidebar.prototype, \"type\", void 0);\n__decorate$9([\n    Property('auto')\n], Sidebar.prototype, \"width\", void 0);\n__decorate$9([\n    Property(1000)\n], Sidebar.prototype, \"zIndex\", void 0);\n__decorate$9([\n    Event()\n], Sidebar.prototype, \"created\", void 0);\n__decorate$9([\n    Event()\n], Sidebar.prototype, \"close\", void 0);\n__decorate$9([\n    Event()\n], Sidebar.prototype, \"open\", void 0);\n__decorate$9([\n    Event()\n], Sidebar.prototype, \"change\", void 0);\n__decorate$9([\n    Event()\n], Sidebar.prototype, \"destroyed\", void 0);\nSidebar = __decorate$9([\n    NotifyPropertyChanges\n], Sidebar);\n\n/**\n * Sidebar modules\n */\n\n/**\n * Navigation all modules\n */\n\nexport { MenuAnimationSettings, MenuItem, HScroll, VScroll, addScrolling, destroyScroll, Item, Toolbar, AccordionActionSettings, AccordionAnimationSettings, AccordionItem, Accordion, ContextMenu, Menu, TabActionSettings, TabAnimationSettings, Header, TabItem, Tab, FieldsSettings, ActionSettings, NodeAnimationSettings, TreeView, Sidebar };\n//# sourceMappingURL=ej2-navigations.es2015.js.map\n","import { Animation, Browser, ChildProperty, Collection, Complex, Component, Draggable, Event, EventHandler, L10n, NotifyPropertyChanges, Property, SanitizeHtmlHelper, Touch, addClass, append, attributes, classList, closest, compile, createElement, detach, extend, formatUnit, getUniqueID, isBlazor, isNullOrUndefined, prepend, remove, removeClass, resetBlazorTemplate, setStyleAttribute, updateBlazorTemplate } from '@syncfusion/ej2-base';\nimport { Button } from '@syncfusion/ej2-buttons';\n\n/**\n * Position library\n */\nlet elementRect;\nlet popupRect;\nlet element;\nlet parentDocument;\nlet fixedParent = false;\nfunction calculateRelativeBasedPosition(anchor, element) {\n    let fixedElement = false;\n    let anchorPos = { left: 0, top: 0 };\n    let tempAnchor = anchor;\n    if (!anchor || !element) {\n        return anchorPos;\n    }\n    if (isNullOrUndefined(element.offsetParent) && element.style.position === 'fixed') {\n        fixedElement = true;\n    }\n    while ((element.offsetParent || fixedElement) && anchor && element.offsetParent !== anchor) {\n        anchorPos.left += anchor.offsetLeft;\n        anchorPos.top += anchor.offsetTop;\n        anchor = anchor.offsetParent;\n    }\n    anchor = tempAnchor;\n    while ((element.offsetParent || fixedElement) && anchor && element.offsetParent !== anchor) {\n        anchorPos.left -= anchor.scrollLeft;\n        anchorPos.top -= anchor.scrollTop;\n        anchor = anchor.parentElement;\n    }\n    return anchorPos;\n}\nfunction calculatePosition(currentElement, positionX, positionY, parentElement, targetValues) {\n    (positionY + positionX === 'topright') ? popupRect = undefined : popupRect = targetValues;\n    popupRect = targetValues;\n    fixedParent = parentElement ? true : false;\n    if (!currentElement) {\n        return { left: 0, top: 0 };\n    }\n    if (!positionX) {\n        positionX = 'left';\n    }\n    if (!positionY) {\n        positionY = 'top';\n    }\n    parentDocument = currentElement.ownerDocument;\n    element = currentElement;\n    let pos = { left: 0, top: 0 };\n    return updatePosition(positionX.toLowerCase(), positionY.toLowerCase(), pos);\n}\nfunction setPosx(value, pos) {\n    pos.left = value;\n}\nfunction setPosy(value, pos) {\n    pos.top = value;\n}\nfunction updatePosition(posX, posY, pos) {\n    elementRect = element.getBoundingClientRect();\n    switch (posY + posX) {\n        case 'topcenter':\n            setPosx(getElementHCenter(), pos);\n            setPosy(getElementTop(), pos);\n            break;\n        case 'topright':\n            setPosx(getElementRight(), pos);\n            setPosy(getElementTop(), pos);\n            break;\n        case 'centercenter':\n            setPosx(getElementHCenter(), pos);\n            setPosy(getElementVCenter(), pos);\n            break;\n        case 'centerright':\n            setPosx(getElementRight(), pos);\n            setPosy(getElementVCenter(), pos);\n            break;\n        case 'centerleft':\n            setPosx(getElementLeft(), pos);\n            setPosy(getElementVCenter(), pos);\n            break;\n        case 'bottomcenter':\n            setPosx(getElementHCenter(), pos);\n            setPosy(getElementBottom(), pos);\n            break;\n        case 'bottomright':\n            setPosx(getElementRight(), pos);\n            setPosy(getElementBottom(), pos);\n            break;\n        case 'bottomleft':\n            setPosx(getElementLeft(), pos);\n            setPosy(getElementBottom(), pos);\n            break;\n        default:\n        case 'topleft':\n            setPosx(getElementLeft(), pos);\n            setPosy(getElementTop(), pos);\n            break;\n    }\n    return pos;\n}\nfunction getBodyScrollTop() {\n    return parentDocument.documentElement.scrollTop || parentDocument.body.scrollTop;\n}\nfunction getBodyScrollLeft() {\n    return parentDocument.documentElement.scrollLeft || parentDocument.body.scrollLeft;\n}\nfunction getElementBottom() {\n    return fixedParent ? elementRect.bottom : elementRect.bottom + getBodyScrollTop();\n}\nfunction getElementVCenter() {\n    return getElementTop() + (elementRect.height / 2);\n}\nfunction getElementTop() {\n    return fixedParent ? elementRect.top : elementRect.top + getBodyScrollTop();\n}\nfunction getElementLeft() {\n    return elementRect.left + getBodyScrollLeft();\n}\nfunction getElementRight() {\n    return elementRect.right + getBodyScrollLeft() - (popupRect ? popupRect.width : 0);\n}\nfunction getElementHCenter() {\n    return getElementLeft() + (elementRect.width / 2);\n}\n\n/**\n * Collision module.\n */\nlet parentDocument$1;\nlet targetContainer;\nfunction fit(element, viewPortElement = null, axis = { X: false, Y: false }, position) {\n    if (!axis.Y && !axis.X) {\n        return { left: 0, top: 0 };\n    }\n    let elemData = element.getBoundingClientRect();\n    targetContainer = viewPortElement;\n    parentDocument$1 = element.ownerDocument;\n    if (!position) {\n        position = calculatePosition(element, 'left', 'top');\n    }\n    if (axis.X) {\n        let containerWidth = targetContainer ? getTargetContainerWidth() : getViewPortWidth();\n        let containerLeft = ContainerLeft();\n        let containerRight = ContainerRight();\n        let overLeft = containerLeft - position.left;\n        let overRight = position.left + elemData.width - containerRight;\n        if (elemData.width > containerWidth) {\n            if (overLeft > 0 && overRight <= 0) {\n                position.left = containerRight - elemData.width;\n            }\n            else if (overRight > 0 && overLeft <= 0) {\n                position.left = containerLeft;\n            }\n            else {\n                position.left = overLeft > overRight ? (containerRight - elemData.width) : containerLeft;\n            }\n        }\n        else if (overLeft > 0) {\n            position.left += overLeft;\n        }\n        else if (overRight > 0) {\n            position.left -= overRight;\n        }\n    }\n    if (axis.Y) {\n        let containerHeight = targetContainer ? getTargetContainerHeight() : getViewPortHeight();\n        let containerTop = ContainerTop();\n        let containerBottom = ContainerBottom();\n        let overTop = containerTop - position.top;\n        let overBottom = position.top + elemData.height - containerBottom;\n        if (elemData.height > containerHeight) {\n            if (overTop > 0 && overBottom <= 0) {\n                position.top = containerBottom - elemData.height;\n            }\n            else if (overBottom > 0 && overTop <= 0) {\n                position.top = containerTop;\n            }\n            else {\n                position.top = overTop > overBottom ? (containerBottom - elemData.height) : containerTop;\n            }\n        }\n        else if (overTop > 0) {\n            position.top += overTop;\n        }\n        else if (overBottom > 0) {\n            position.top -= overBottom;\n        }\n    }\n    return position;\n}\nfunction isCollide(element, viewPortElement = null, x, y) {\n    let elemOffset = calculatePosition(element, 'left', 'top');\n    if (x) {\n        elemOffset.left = x;\n    }\n    if (y) {\n        elemOffset.top = y;\n    }\n    let data = [];\n    targetContainer = viewPortElement;\n    parentDocument$1 = element.ownerDocument;\n    let elementRect = element.getBoundingClientRect();\n    let top = elemOffset.top;\n    let left = elemOffset.left;\n    let right = elemOffset.left + elementRect.width;\n    let bottom = elemOffset.top + elementRect.height;\n    let yAxis = topCollideCheck(top, bottom);\n    let xAxis = leftCollideCheck(left, right);\n    if (yAxis.topSide) {\n        data.push('top');\n    }\n    if (xAxis.rightSide) {\n        data.push('right');\n    }\n    if (xAxis.leftSide) {\n        data.push('left');\n    }\n    if (yAxis.bottomSide) {\n        data.push('bottom');\n    }\n    return data;\n}\nfunction flip(element, target, offsetX, offsetY, positionX, positionY, viewPortElement = null, axis = { X: true, Y: true }, fixedParent) {\n    if (!target || !element || !positionX || !positionY || (!axis.X && !axis.Y)) {\n        return;\n    }\n    let tEdge = { TL: null,\n        TR: null,\n        BL: null,\n        BR: null };\n    let eEdge = {\n        TL: null,\n        TR: null,\n        BL: null,\n        BR: null\n    };\n    let elementRect = element.getBoundingClientRect();\n    let pos = {\n        posX: positionX, posY: positionY, offsetX: offsetX, offsetY: offsetY, position: { left: 0, top: 0 }\n    };\n    targetContainer = viewPortElement;\n    parentDocument$1 = target.ownerDocument;\n    updateElementData(target, tEdge, pos, fixedParent, elementRect);\n    setPosition(eEdge, pos, elementRect);\n    if (axis.X) {\n        leftFlip(target, eEdge, tEdge, pos, elementRect, true);\n    }\n    if (axis.Y && tEdge.TL.top > -1) {\n        topFlip(target, eEdge, tEdge, pos, elementRect, true);\n    }\n    setPopup(element, pos, elementRect);\n}\nfunction setPopup(element, pos, elementRect) {\n    let left = 0;\n    let top = 0;\n    if (element.offsetParent != null\n        && (getComputedStyle(element.offsetParent).position === 'absolute' ||\n            getComputedStyle(element.offsetParent).position === 'relative')) {\n        let data = calculatePosition(element.offsetParent, 'left', 'top', false, elementRect);\n        left = data.left;\n        top = data.top;\n    }\n    element.style.top = (pos.position.top + pos.offsetY - (top)) + 'px';\n    element.style.left = (pos.position.left + pos.offsetX - (left)) + 'px';\n}\nfunction updateElementData(target, edge, pos, fixedParent, elementRect) {\n    pos.position = calculatePosition(target, pos.posX, pos.posY, fixedParent, elementRect);\n    edge.TL = calculatePosition(target, 'left', 'top', fixedParent, elementRect);\n    edge.TR = calculatePosition(target, 'right', 'top', fixedParent, elementRect);\n    edge.BR = calculatePosition(target, 'left', 'bottom', fixedParent, elementRect);\n    edge.BL = calculatePosition(target, 'right', 'bottom', fixedParent, elementRect);\n}\nfunction setPosition(eStatus, pos, elementRect) {\n    eStatus.TL = { top: pos.position.top + pos.offsetY, left: pos.position.left + pos.offsetX };\n    eStatus.TR = { top: eStatus.TL.top, left: eStatus.TL.left + elementRect.width };\n    eStatus.BL = { top: eStatus.TL.top + elementRect.height,\n        left: eStatus.TL.left };\n    eStatus.BR = { top: eStatus.TL.top + elementRect.height,\n        left: eStatus.TL.left + elementRect.width };\n}\nfunction leftCollideCheck(left, right) {\n    let leftSide = false;\n    let rightSide = false;\n    if (((left - getBodyScrollLeft$1()) < ContainerLeft())) {\n        leftSide = true;\n    }\n    if (right > ContainerRight()) {\n        rightSide = true;\n    }\n    return { leftSide: leftSide, rightSide: rightSide };\n}\nfunction leftFlip(target, edge, tEdge, pos, elementRect, deepCheck) {\n    let collideSide = leftCollideCheck(edge.TL.left, edge.TR.left);\n    if ((tEdge.TL.left - getBodyScrollLeft$1()) <= ContainerLeft()) {\n        collideSide.leftSide = false;\n    }\n    if (tEdge.TR.left >= ContainerRight()) {\n        collideSide.rightSide = false;\n    }\n    if ((collideSide.leftSide && !collideSide.rightSide) || (!collideSide.leftSide && collideSide.rightSide)) {\n        if (pos.posX === 'right') {\n            pos.posX = 'left';\n        }\n        else {\n            pos.posX = 'right';\n        }\n        pos.offsetX = pos.offsetX + elementRect.width;\n        pos.offsetX = -1 * pos.offsetX;\n        pos.position = calculatePosition(target, pos.posX, pos.posY, false);\n        setPosition(edge, pos, elementRect);\n        if (deepCheck) {\n            leftFlip(target, edge, tEdge, pos, elementRect, false);\n        }\n    }\n}\nfunction topFlip(target, edge, tEdge, pos, elementRect, deepCheck) {\n    let collideSide = topCollideCheck(edge.TL.top, edge.BL.top);\n    if ((tEdge.TL.top - getBodyScrollTop$1()) <= ContainerTop()) {\n        collideSide.topSide = false;\n    }\n    if (tEdge.BL.top >= ContainerBottom()) {\n        collideSide.bottomSide = false;\n    }\n    if ((collideSide.topSide && !collideSide.bottomSide) || (!collideSide.topSide && collideSide.bottomSide)) {\n        if (pos.posY === 'top') {\n            pos.posY = 'bottom';\n        }\n        else {\n            pos.posY = 'top';\n        }\n        pos.offsetY = pos.offsetY + elementRect.height;\n        pos.offsetY = -1 * pos.offsetY;\n        pos.position = calculatePosition(target, pos.posX, pos.posY, false, elementRect);\n        setPosition(edge, pos, elementRect);\n        if (deepCheck) {\n            topFlip(target, edge, tEdge, pos, elementRect, false);\n        }\n    }\n}\nfunction topCollideCheck(top, bottom) {\n    let topSide = false;\n    let bottomSide = false;\n    if ((top - getBodyScrollTop$1()) < ContainerTop()) {\n        topSide = true;\n    }\n    if (bottom > ContainerBottom()) {\n        bottomSide = true;\n    }\n    return { topSide: topSide, bottomSide: bottomSide };\n}\nfunction getTargetContainerWidth() {\n    return targetContainer.getBoundingClientRect().width;\n}\nfunction getTargetContainerHeight() {\n    return targetContainer.getBoundingClientRect().height;\n}\nfunction getTargetContainerLeft() {\n    return targetContainer.getBoundingClientRect().left;\n}\nfunction getTargetContainerTop() {\n    return targetContainer.getBoundingClientRect().top;\n}\nfunction ContainerTop() {\n    if (targetContainer) {\n        return getTargetContainerTop();\n    }\n    return 0;\n}\nfunction ContainerLeft() {\n    if (targetContainer) {\n        return getTargetContainerLeft();\n    }\n    return 0;\n}\nfunction ContainerRight() {\n    if (targetContainer) {\n        return (getBodyScrollLeft$1() + getTargetContainerLeft() + getTargetContainerWidth());\n    }\n    return (getBodyScrollLeft$1() + getViewPortWidth());\n}\nfunction ContainerBottom() {\n    if (targetContainer) {\n        return (getBodyScrollTop$1() + getTargetContainerTop() + getTargetContainerHeight());\n    }\n    return (getBodyScrollTop$1() + getViewPortHeight());\n}\nfunction getBodyScrollTop$1() {\n    // if(targetContainer)\n    //     return targetContainer.scrollTop;\n    return parentDocument$1.documentElement.scrollTop || parentDocument$1.body.scrollTop;\n}\nfunction getBodyScrollLeft$1() {\n    // if(targetContainer)\n    //     return targetContainer.scrollLeft;\n    return parentDocument$1.documentElement.scrollLeft || parentDocument$1.body.scrollLeft;\n}\nfunction getViewPortHeight() {\n    return window.innerHeight;\n}\nfunction getViewPortWidth() {\n    let windowWidth = window.innerWidth;\n    let offsetWidth = (isNullOrUndefined(document.documentElement)) ? 0 : document.documentElement.offsetWidth;\n    return windowWidth - (windowWidth - offsetWidth);\n}\n\nvar __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n/**\n * Specifies the offset position values.\n */\nclass PositionData extends ChildProperty {\n}\n__decorate([\n    Property('left')\n], PositionData.prototype, \"X\", void 0);\n__decorate([\n    Property('top')\n], PositionData.prototype, \"Y\", void 0);\n// don't use space in classNames\nconst CLASSNAMES = {\n    ROOT: 'e-popup',\n    RTL: 'e-rtl',\n    OPEN: 'e-popup-open',\n    CLOSE: 'e-popup-close'\n};\n/**\n * Represents the Popup Component\n * ```html\n * <div id=\"popup\" style=\"position:absolute;height:100px;width:100px;\">\n * <div style=\"margin:35px 25px;\">Popup Content</div></div>\n * ```\n * ```typescript\n * <script>\n *   var popupObj = new Popup();\n *   popupObj.appendTo(\"#popup\");\n * </script>\n * ```\n */\nlet Popup = class Popup extends Component {\n    constructor(element, options) {\n        super(options, element);\n    }\n    /**\n     * Called internally if any of the property value changed.\n     * @private\n     */\n    onPropertyChanged(newProp, oldProp) {\n        for (let prop of Object.keys(newProp)) {\n            switch (prop) {\n                case 'width':\n                    setStyleAttribute(this.element, { 'width': formatUnit(newProp.width) });\n                    break;\n                case 'height':\n                    setStyleAttribute(this.element, { 'height': formatUnit(newProp.height) });\n                    break;\n                case 'zIndex':\n                    setStyleAttribute(this.element, { 'zIndex': newProp.zIndex });\n                    break;\n                case 'enableRtl':\n                    this.setEnableRtl();\n                    break;\n                case 'position':\n                case 'relateTo':\n                    this.refreshPosition();\n                    break;\n                case 'offsetX':\n                    let x = newProp.offsetX - oldProp.offsetX;\n                    this.element.style.left = (parseInt(this.element.style.left, 10) + (x)).toString() + 'px';\n                    break;\n                case 'offsetY':\n                    let y = newProp.offsetY - oldProp.offsetY;\n                    this.element.style.top = (parseInt(this.element.style.top, 10) + (y)).toString() + 'px';\n                    break;\n                case 'content':\n                    this.setContent();\n                    break;\n                case 'actionOnScroll':\n                    if (newProp.actionOnScroll !== 'none') {\n                        this.wireScrollEvents();\n                    }\n                    else {\n                        this.unwireScrollEvents();\n                    }\n                    break;\n            }\n        }\n    }\n    /**\n     * gets the Component module name.\n     * @private\n     */\n    getModuleName() {\n        return 'popup';\n    }\n    /**\n     * To resolve if any collision occurs.\n     */\n    resolveCollision() {\n        this.checkCollision();\n    }\n    /**\n     * gets the persisted state properties of the Component.\n     */\n    getPersistData() {\n        return this.addOnPersist([]);\n    }\n    /**\n     * To destroy the control.\n     */\n    destroy() {\n        this.element.classList.remove(CLASSNAMES.ROOT, CLASSNAMES.RTL, CLASSNAMES.OPEN, CLASSNAMES.CLOSE);\n        this.unwireEvents();\n        super.destroy();\n    }\n    /**\n     * To Initialize the control rendering\n     * @private\n     */\n    render() {\n        this.element.classList.add(CLASSNAMES.ROOT);\n        let styles = {};\n        if (this.zIndex !== 1000) {\n            styles.zIndex = this.zIndex;\n        }\n        if (this.width !== 'auto') {\n            styles.width = formatUnit(this.width);\n        }\n        if (this.height !== 'auto') {\n            styles.height = formatUnit(this.height);\n        }\n        setStyleAttribute(this.element, styles);\n        this.fixedParent = false;\n        this.setEnableRtl();\n        this.setContent();\n    }\n    wireEvents() {\n        if (Browser.isDevice) {\n            EventHandler.add(window, 'orientationchange', this.orientationOnChange, this);\n        }\n        if (this.actionOnScroll !== 'none') {\n            this.wireScrollEvents();\n        }\n    }\n    wireScrollEvents() {\n        if (this.getRelateToElement()) {\n            for (let parent of this.getScrollableParent(this.getRelateToElement())) {\n                EventHandler.add(parent, 'scroll', this.scrollRefresh, this);\n            }\n        }\n    }\n    unwireEvents() {\n        if (Browser.isDevice) {\n            EventHandler.remove(window, 'orientationchange', this.orientationOnChange);\n        }\n        if (this.actionOnScroll !== 'none') {\n            this.unwireScrollEvents();\n        }\n    }\n    unwireScrollEvents() {\n        if (this.getRelateToElement()) {\n            for (let parent of this.getScrollableParent(this.getRelateToElement())) {\n                EventHandler.remove(parent, 'scroll', this.scrollRefresh);\n            }\n        }\n    }\n    getRelateToElement() {\n        let relateToElement = this.relateTo === '' || isNullOrUndefined(this.relateTo) ?\n            document.body : this.relateTo;\n        this.setProperties({ relateTo: relateToElement }, true);\n        return ((typeof this.relateTo) === 'string') ?\n            document.querySelector(this.relateTo) : this.relateTo;\n    }\n    scrollRefresh(e) {\n        if (this.actionOnScroll === 'reposition') {\n            if (!(this.element.offsetParent === e.target ||\n                (this.element.offsetParent && this.element.offsetParent.tagName === 'BODY' &&\n                    e.target.parentElement == null))) {\n                this.refreshPosition();\n            }\n        }\n        else if (this.actionOnScroll === 'hide') {\n            this.hide();\n        }\n        if (this.actionOnScroll !== 'none') {\n            if (this.getRelateToElement()) {\n                let targetVisible = this.isElementOnViewport(this.getRelateToElement(), e.target);\n                if (!targetVisible && !this.targetInvisibleStatus) {\n                    this.trigger('targetExitViewport');\n                    this.targetInvisibleStatus = true;\n                }\n                else if (targetVisible) {\n                    this.targetInvisibleStatus = false;\n                }\n            }\n        }\n    }\n    /**\n     * This method is to get the element visibility on viewport when scroll\n     * the page. This method will returns true even though 1 px of element\n     * part is in visible.\n     */\n    isElementOnViewport(relateToElement, scrollElement) {\n        let scrollParents = this.getScrollableParent(relateToElement);\n        for (let parent = 0; parent < scrollParents.length; parent++) {\n            if (this.isElementVisible(relateToElement, scrollParents[parent])) {\n                continue;\n            }\n            else {\n                return false;\n            }\n        }\n        return true;\n    }\n    isElementVisible(relateToElement, scrollElement) {\n        let rect = this.checkGetBoundingClientRect(relateToElement);\n        if (!rect.height || !rect.width) {\n            return false;\n        }\n        if (!isNullOrUndefined(this.checkGetBoundingClientRect(scrollElement))) {\n            let parent = scrollElement.getBoundingClientRect();\n            return !(rect.bottom < parent.top) &&\n                (!(rect.bottom > parent.bottom) &&\n                    (!(rect.right > parent.right) &&\n                        !(rect.left < parent.left)));\n        }\n        else {\n            let win = window;\n            let windowView = {\n                top: win.scrollY,\n                left: win.scrollX,\n                right: win.scrollX + win.outerWidth,\n                bottom: win.scrollY + win.outerHeight\n            };\n            let off = calculatePosition(relateToElement);\n            let ele = {\n                top: off.top,\n                left: off.left,\n                right: off.left + rect.width,\n                bottom: off.top + rect.height\n            };\n            let elementView = {\n                top: windowView.bottom - ele.top,\n                left: windowView.right - ele.left,\n                bottom: ele.bottom - windowView.top,\n                right: ele.right - windowView.left\n            };\n            return elementView.top > 0\n                && elementView.left > 0\n                && elementView.right > 0\n                && elementView.bottom > 0;\n        }\n    }\n    /**\n     * Initialize the event handler\n     * @private\n     */\n    preRender() {\n        //There is no event handler\n    }\n    setEnableRtl() {\n        this.reposition();\n        this.enableRtl ? this.element.classList.add(CLASSNAMES.RTL) : this.element.classList.remove(CLASSNAMES.RTL);\n    }\n    setContent() {\n        if (!isNullOrUndefined(this.content)) {\n            this.element.innerHTML = '';\n            if (typeof (this.content) === 'string') {\n                this.element.textContent = this.content;\n            }\n            else {\n                this.element.appendChild(this.content);\n            }\n        }\n    }\n    orientationOnChange() {\n        setTimeout(() => {\n            this.refreshPosition();\n        }, 200);\n    }\n    /**\n     * Based on the `relative` element and `offset` values, `Popup` element position will refreshed.\n     */\n    refreshPosition(target, collision) {\n        if (!isNullOrUndefined(target)) {\n            this.checkFixedParent(target);\n        }\n        this.reposition();\n        if (!collision) {\n            this.checkCollision();\n        }\n    }\n    reposition() {\n        let pos;\n        let position;\n        let relateToElement = this.getRelateToElement();\n        if (typeof this.position.X === 'number' && typeof this.position.Y === 'number') {\n            pos = { left: this.position.X, top: this.position.Y };\n        }\n        else if ((typeof this.position.X === 'string' && typeof this.position.Y === 'number') ||\n            (typeof this.position.X === 'number' && typeof this.position.Y === 'string')) {\n            let display = this.element.style.display;\n            let parentDisplay;\n            this.element.style.display = 'block';\n            if (this.element.classList.contains('e-dlg-modal')) {\n                parentDisplay = this.element.parentElement.style.display;\n                this.element.parentElement.style.display = 'block';\n            }\n            position = this.getAnchorPosition(relateToElement, this.element, this.position, this.offsetX, this.offsetY);\n            if (typeof this.position.X === 'string') {\n                pos = { left: position.left, top: this.position.Y };\n            }\n            else {\n                pos = { left: this.position.X, top: position.top };\n            }\n            this.element.style.display = display;\n            if (this.element.classList.contains('e-dlg-modal')) {\n                this.element.parentElement.style.display = parentDisplay;\n            }\n        }\n        else if (relateToElement) {\n            let display = this.element.style.display;\n            this.element.style.display = 'block';\n            pos = this.getAnchorPosition(relateToElement, this.element, this.position, this.offsetX, this.offsetY);\n            this.element.style.display = display;\n        }\n        else {\n            pos = { left: 0, top: 0 };\n        }\n        if (!isNullOrUndefined(pos)) {\n            this.element.style.left = pos.left + 'px';\n            this.element.style.top = pos.top + 'px';\n        }\n    }\n    checkGetBoundingClientRect(ele) {\n        let eleRect;\n        try {\n            eleRect = ele.getBoundingClientRect();\n            return eleRect;\n        }\n        catch (error) {\n            return null;\n        }\n    }\n    getAnchorPosition(anchorEle, ele, position, offsetX, offsetY) {\n        let eleRect = this.checkGetBoundingClientRect(ele);\n        let anchorRect = this.checkGetBoundingClientRect(anchorEle);\n        if (isNullOrUndefined(eleRect) || isNullOrUndefined(anchorRect)) {\n            return null;\n        }\n        let anchor = anchorEle;\n        let anchorPos = { left: 0, top: 0 };\n        if (ele.offsetParent && ele.offsetParent.tagName === 'BODY' && anchorEle.tagName === 'BODY') {\n            anchorPos = calculatePosition(anchorEle);\n        }\n        else {\n            if ((ele.classList.contains('e-dlg-modal') && anchor.tagName !== 'BODY')) {\n                ele = ele.parentElement;\n            }\n            anchorPos = calculateRelativeBasedPosition(anchor, ele);\n        }\n        switch (position.X) {\n            default:\n            case 'left':\n                break;\n            case 'center':\n                if ((ele.classList.contains('e-dlg-modal') && anchor.tagName === 'BODY' && this.targetType === 'container')) {\n                    anchorPos.left += (window.innerWidth / 2 - eleRect.width / 2);\n                }\n                else if (this.targetType === 'container') {\n                    anchorPos.left += (anchorRect.width / 2 - eleRect.width / 2);\n                }\n                else {\n                    anchorPos.left += (anchorRect.width / 2);\n                }\n                break;\n            case 'right':\n                if ((ele.classList.contains('e-dlg-modal') && anchor.tagName === 'BODY' && this.targetType === 'container')) {\n                    anchorPos.left += (window.innerWidth - eleRect.width);\n                }\n                else if (this.targetType === 'container') {\n                    anchorPos.left += (anchorRect.width - eleRect.width);\n                }\n                else {\n                    anchorPos.left += (anchorRect.width);\n                }\n                break;\n        }\n        switch (position.Y) {\n            default:\n            case 'top':\n                break;\n            case 'center':\n                if ((ele.classList.contains('e-dlg-modal') && anchor.tagName === 'BODY' && this.targetType === 'container')) {\n                    anchorPos.top += (window.innerHeight / 2 - eleRect.height / 2);\n                }\n                else if (this.targetType === 'container') {\n                    anchorPos.top += (anchorRect.height / 2 - eleRect.height / 2);\n                }\n                else {\n                    anchorPos.top += (anchorRect.height / 2);\n                }\n                break;\n            case 'bottom':\n                if ((ele.classList.contains('e-dlg-modal') && anchor.tagName === 'BODY' && this.targetType === 'container')) {\n                    anchorPos.top += (window.innerHeight - eleRect.height);\n                }\n                else if (this.targetType === 'container') {\n                    anchorPos.top += (anchorRect.height - eleRect.height);\n                }\n                else {\n                    anchorPos.top += (anchorRect.height);\n                }\n                break;\n        }\n        anchorPos.left += offsetX;\n        anchorPos.top += offsetY;\n        return anchorPos;\n    }\n    callFlip(param) {\n        let relateToElement = this.getRelateToElement();\n        flip(this.element, relateToElement, this.offsetX, this.offsetY, this.position.X, this.position.Y, this.viewPortElement, param, this.fixedParent);\n    }\n    callFit(param) {\n        if (isCollide(this.element, this.viewPortElement).length !== 0) {\n            if (isNullOrUndefined(this.viewPortElement)) {\n                let data = fit(this.element, this.viewPortElement, param);\n                if (param.X) {\n                    this.element.style.left = data.left + 'px';\n                }\n                if (param.Y) {\n                    this.element.style.top = data.top + 'px';\n                }\n            }\n            else {\n                let elementRect = this.checkGetBoundingClientRect(this.element);\n                let viewPortRect = this.checkGetBoundingClientRect(this.viewPortElement);\n                if (isNullOrUndefined(elementRect) || isNullOrUndefined(viewPortRect)) {\n                    return null;\n                }\n                if (param && param.Y === true) {\n                    if (viewPortRect.top > elementRect.top) {\n                        this.element.style.top = '0px';\n                    }\n                    else if (viewPortRect.bottom < elementRect.bottom) {\n                        this.element.style.top = parseInt(this.element.style.top, 10) - (elementRect.bottom - viewPortRect.bottom) + 'px';\n                    }\n                }\n                if (param && param.X === true) {\n                    if (viewPortRect.right < elementRect.right) {\n                        this.element.style.left = parseInt(this.element.style.left, 10) - (elementRect.right - viewPortRect.right) + 'px';\n                    }\n                    else if (viewPortRect.left > elementRect.left) {\n                        this.element.style.left = parseInt(this.element.style.left, 10) + (viewPortRect.left - elementRect.left) + 'px';\n                    }\n                }\n            }\n        }\n    }\n    checkCollision() {\n        let horz = this.collision.X;\n        let vert = this.collision.Y;\n        if (horz === 'none' && vert === 'none') {\n            return;\n        }\n        if (horz === 'flip' && vert === 'flip') {\n            this.callFlip({ X: true, Y: true });\n        }\n        else if (horz === 'fit' && vert === 'fit') {\n            this.callFit({ X: true, Y: true });\n        }\n        else {\n            if (horz === 'flip') {\n                this.callFlip({ X: true, Y: false });\n            }\n            else if (vert === 'flip') {\n                this.callFlip({ Y: true, X: false });\n            }\n            if (horz === 'fit') {\n                this.callFit({ X: true, Y: false });\n            }\n            else if (vert === 'fit') {\n                this.callFit({ X: false, Y: true });\n            }\n        }\n    }\n    /**\n     * Shows the popup element from screen.\n     * @param { AnimationModel | Function } collisionOrAnimationOptions? - To pass animation options or collision function.\n     * @param { Function } collision? - To pass the collision function.\n     * @param { HTMLElement } relativeElement? - To calculate the zIndex value dynamically.\n     */\n    show(animationOptions, relativeElement) {\n        this.wireEvents();\n        if (this.zIndex === 1000 || !isNullOrUndefined(relativeElement)) {\n            let zIndexElement = (isNullOrUndefined(relativeElement)) ? this.element : relativeElement;\n            this.zIndex = getZindexPartial(zIndexElement);\n            setStyleAttribute(this.element, { 'zIndex': this.zIndex });\n        }\n        animationOptions = (!isNullOrUndefined(animationOptions) && typeof animationOptions === 'object') ?\n            animationOptions : this.showAnimation;\n        if (this.collision.X !== 'none' || this.collision.Y !== 'none') {\n            removeClass([this.element], CLASSNAMES.CLOSE);\n            addClass([this.element], CLASSNAMES.OPEN);\n            this.checkCollision();\n            removeClass([this.element], CLASSNAMES.OPEN);\n            addClass([this.element], CLASSNAMES.CLOSE);\n        }\n        if (!isNullOrUndefined(animationOptions)) {\n            animationOptions.begin = () => {\n                if (!this.isDestroyed) {\n                    removeClass([this.element], CLASSNAMES.CLOSE);\n                    addClass([this.element], CLASSNAMES.OPEN);\n                }\n            };\n            animationOptions.end = () => {\n                if (!this.isDestroyed) {\n                    this.trigger('open');\n                }\n            };\n            new Animation(animationOptions).animate(this.element);\n        }\n        else {\n            removeClass([this.element], CLASSNAMES.CLOSE);\n            addClass([this.element], CLASSNAMES.OPEN);\n            this.trigger('open');\n        }\n    }\n    /**\n     * Hides the popup element from screen.\n     * @param { AnimationModel } animationOptions? - To give the animation options.\n     */\n    hide(animationOptions) {\n        animationOptions = (!isNullOrUndefined(animationOptions) && typeof animationOptions === 'object') ?\n            animationOptions : this.hideAnimation;\n        if (!isNullOrUndefined(animationOptions)) {\n            animationOptions.end = () => {\n                if (!this.isDestroyed) {\n                    removeClass([this.element], CLASSNAMES.OPEN);\n                    addClass([this.element], CLASSNAMES.CLOSE);\n                    this.trigger('close');\n                }\n            };\n            new Animation(animationOptions).animate(this.element);\n        }\n        else {\n            removeClass([this.element], CLASSNAMES.OPEN);\n            addClass([this.element], CLASSNAMES.CLOSE);\n            this.trigger('close');\n        }\n        this.unwireEvents();\n    }\n    /**\n     * Gets scrollable parent elements for the given element.\n     * @param { HTMLElement } element - Specify the element to get the scrollable parents of it.\n     */\n    getScrollableParent(element) {\n        this.checkFixedParent(element);\n        return getScrollableParent(element, this.fixedParent);\n    }\n    checkFixedParent(element) {\n        let parent = element.parentElement;\n        while (parent && parent.tagName !== 'HTML') {\n            let parentStyle = getComputedStyle(parent);\n            if (parentStyle.position === 'fixed' && this.element.offsetParent && this.element.offsetParent.tagName === 'BODY') {\n                this.element.style.position = 'fixed';\n                this.fixedParent = true;\n            }\n            parent = parent.parentElement;\n            if (isNullOrUndefined(this.element.offsetParent) && parentStyle.position === 'fixed'\n                && this.element.style.position === 'fixed') {\n                this.fixedParent = true;\n            }\n        }\n    }\n};\n__decorate([\n    Property('auto')\n], Popup.prototype, \"height\", void 0);\n__decorate([\n    Property('auto')\n], Popup.prototype, \"width\", void 0);\n__decorate([\n    Property(null)\n], Popup.prototype, \"content\", void 0);\n__decorate([\n    Property('container')\n], Popup.prototype, \"targetType\", void 0);\n__decorate([\n    Property(null)\n], Popup.prototype, \"viewPortElement\", void 0);\n__decorate([\n    Property({ X: 'none', Y: 'none' })\n], Popup.prototype, \"collision\", void 0);\n__decorate([\n    Property('')\n], Popup.prototype, \"relateTo\", void 0);\n__decorate([\n    Complex({}, PositionData)\n], Popup.prototype, \"position\", void 0);\n__decorate([\n    Property(0)\n], Popup.prototype, \"offsetX\", void 0);\n__decorate([\n    Property(0)\n], Popup.prototype, \"offsetY\", void 0);\n__decorate([\n    Property(1000)\n], Popup.prototype, \"zIndex\", void 0);\n__decorate([\n    Property(false)\n], Popup.prototype, \"enableRtl\", void 0);\n__decorate([\n    Property('reposition')\n], Popup.prototype, \"actionOnScroll\", void 0);\n__decorate([\n    Property(null)\n], Popup.prototype, \"showAnimation\", void 0);\n__decorate([\n    Property(null)\n], Popup.prototype, \"hideAnimation\", void 0);\n__decorate([\n    Event()\n], Popup.prototype, \"open\", void 0);\n__decorate([\n    Event()\n], Popup.prototype, \"close\", void 0);\n__decorate([\n    Event()\n], Popup.prototype, \"targetExitViewport\", void 0);\nPopup = __decorate([\n    NotifyPropertyChanges\n], Popup);\n/**\n * Gets scrollable parent elements for the given element.\n * @param { HTMLElement } element - Specify the element to get the scrollable parents of it.\n * @private\n */\nfunction getScrollableParent(element, fixedParent) {\n    let eleStyle = getComputedStyle(element);\n    let scrollParents = [];\n    let overflowRegex = /(auto|scroll)/;\n    let parent = element.parentElement;\n    while (parent && parent.tagName !== 'HTML') {\n        let parentStyle = getComputedStyle(parent);\n        if (!(eleStyle.position === 'absolute' && parentStyle.position === 'static')\n            && overflowRegex.test(parentStyle.overflow + parentStyle.overflowY + parentStyle.overflowX)) {\n            scrollParents.push(parent);\n        }\n        parent = parent.parentElement;\n    }\n    if (!fixedParent) {\n        scrollParents.push(document);\n    }\n    return scrollParents;\n}\n/**\n * Gets the maximum z-index of the given element.\n * @param { HTMLElement } element - Specify the element to get the maximum z-index of it.\n * @private\n */\nfunction getZindexPartial(element) {\n    // upto body traversal\n    let parent = element.parentElement;\n    let parentZindex = [];\n    while (parent) {\n        if (parent.tagName !== 'BODY') {\n            let index = document.defaultView.getComputedStyle(parent, null).getPropertyValue('z-index');\n            let position = document.defaultView.getComputedStyle(parent, null).getPropertyValue('position');\n            if (index !== 'auto' && position !== 'static') {\n                parentZindex.push(index);\n            }\n            parent = parent.parentElement;\n        }\n        else {\n            break;\n        }\n    }\n    //Body direct children element traversal\n    let childrenZindex = [];\n    for (let i = 0; i < document.body.children.length; i++) {\n        if (!element.isEqualNode(document.body.children[i])) {\n            let index = document.defaultView.getComputedStyle(document.body.children[i], null).getPropertyValue('z-index');\n            let position = document.defaultView.getComputedStyle(document.body.children[i], null).getPropertyValue('position');\n            if (index !== 'auto' && position !== 'static') {\n                childrenZindex.push(index);\n            }\n        }\n    }\n    childrenZindex.push('999');\n    let siblingsZindex = [];\n    if (!isNullOrUndefined(element.parentElement) && element.parentElement.tagName !== 'BODY') {\n        let childNodes = [].slice.call(element.parentElement.children);\n        for (let i = 0; i < childNodes.length; i++) {\n            let index = document.defaultView.getComputedStyle(childNodes[i], null).getPropertyValue('z-index');\n            let position = document.defaultView.getComputedStyle(childNodes[i], null).getPropertyValue('position');\n            if (index !== 'auto' && position !== 'static') {\n                siblingsZindex.push(index);\n            }\n        }\n    }\n    let finalValue = parentZindex.concat(childrenZindex, siblingsZindex);\n    let currentZindexValue = Math.max.apply(Math, finalValue) + 1;\n    // Checking the max-zindex value\n    return currentZindexValue > 2147483647 ? 2147483647 : currentZindexValue;\n}\n/**\n * Gets the maximum z-index of the page.\n * @param { HTMLElement } tagName - Specify the tagName to get the maximum z-index of it.\n * @private\n */\nfunction getMaxZindex(tagName = ['*']) {\n    let maxZindex = [];\n    for (let i = 0; i < tagName.length; i++) {\n        let elements = document.getElementsByTagName(tagName[i]);\n        for (let i = 0; i < elements.length; i++) {\n            let index = document.defaultView.getComputedStyle(elements[i], null).getPropertyValue('z-index');\n            let position = document.defaultView.getComputedStyle(elements[i], null).getPropertyValue('position');\n            if (index !== 'auto' && position !== 'static') {\n                maxZindex.push(index);\n            }\n        }\n    }\n    let currentZindexValue = Math.max.apply(Math, maxZindex) + 1;\n    return currentZindexValue > 2147483647 ? 2147483647 : currentZindexValue;\n}\n\n/**\n * Popup Components\n */\n\n/**\n * Popup Components\n */\n\n/**\n * Resize library\n */\nlet elementClass = ['north-west', 'north', 'north-east', 'west', 'east', 'south-west', 'south', 'south-east'];\nlet targetElement;\nlet selectedHandler;\nlet originalWidth = 0;\nlet originalHeight = 0;\nlet originalX = 0;\nlet originalY = 0;\nlet originalMouseX = 0;\nlet originalMouseY = 0;\nconst RESIZE_HANDLER = 'e-resize-handle';\nconst FOCUSED_HANDLER = 'e-focused-handle';\nlet RESTRICT_LEFT = ['e-restrict-left'];\nconst RESIZE_WITHIN_VIEWPORT = 'e-resize-viewport';\nlet minHeight;\nlet maxHeight;\nlet minWidth;\nlet maxWidth;\nlet containerElement;\nlet resizeStart = null;\nlet resize = null;\nlet resizeEnd = null;\nlet resizeWestWidth;\nlet setLeft = true;\nlet previousWidth = 0;\nlet setWidth = true;\n// tslint:disable-next-line\nlet proxy;\nfunction createResize(args) {\n    resizeStart = args.resizeBegin;\n    resize = args.resizing;\n    resizeEnd = args.resizeComplete;\n    targetElement = getDOMElement(args.element);\n    containerElement = getDOMElement(args.boundary);\n    let directions = args.direction.split(' ');\n    for (let i = 0; i < directions.length; i++) {\n        let resizeHandler = createElement('div', { className: 'e-icons ' + RESIZE_HANDLER + ' ' + 'e-' + directions[i] });\n        targetElement.appendChild(resizeHandler);\n    }\n    minHeight = args.minHeight;\n    minWidth = args.minWidth;\n    maxWidth = args.maxWidth;\n    maxHeight = args.maxHeight;\n    if (args.proxy && args.proxy.element && args.proxy.element.classList.contains('e-dialog')) {\n        wireEvents(args.proxy);\n    }\n    else {\n        wireEvents();\n    }\n}\nfunction getDOMElement(element) {\n    let domElement;\n    if (!isNullOrUndefined(element)) {\n        if (typeof (element) === 'string') {\n            domElement = document.querySelector(element);\n        }\n        else {\n            domElement = element;\n        }\n    }\n    return domElement;\n}\n// tslint:disable-next-line\nfunction wireEvents(args) {\n    if (isNullOrUndefined(args)) {\n        args = this;\n    }\n    let resizers = targetElement.querySelectorAll('.' + RESIZE_HANDLER);\n    for (let i = 0; i < resizers.length; i++) {\n        selectedHandler = resizers[i];\n        EventHandler.add(selectedHandler, 'mousedown', onMouseDown, args);\n        let eventName = (Browser.info.name === 'msie') ? 'pointerdown' : 'touchstart';\n        EventHandler.add(selectedHandler, eventName, onTouchStart, args);\n    }\n}\n/* istanbul ignore next */\nfunction getEventType(e) {\n    return (e.indexOf('mouse') > -1) ? 'mouse' : 'touch';\n}\n/* istanbul ignore next */\nfunction onMouseDown(e) {\n    e.preventDefault();\n    targetElement = e.target.parentElement;\n    calculateValues();\n    originalMouseX = e.pageX;\n    originalMouseY = e.pageY;\n    e.target.classList.add(FOCUSED_HANDLER);\n    if (!isNullOrUndefined(resizeStart)) {\n        proxy = this;\n        if (resizeStart(e, proxy) === true) {\n            return;\n        }\n    }\n    let target = (isNullOrUndefined(containerElement)) ? document : containerElement;\n    EventHandler.add(target, 'mousemove', onMouseMove, this);\n    EventHandler.add(document, 'mouseup', onMouseUp, this);\n    for (let i = 0; i < RESTRICT_LEFT.length; i++) {\n        if (targetElement.classList.contains(RESTRICT_LEFT[i])) {\n            setLeft = false;\n        }\n        else {\n            setLeft = true;\n        }\n    }\n}\n/* istanbul ignore next */\nfunction onMouseUp(e) {\n    let touchMoveEvent = (Browser.info.name === 'msie') ? 'pointermove' : 'touchmove';\n    let touchEndEvent = (Browser.info.name === 'msie') ? 'pointerup' : 'touchend';\n    let target = (isNullOrUndefined(containerElement)) ? document : containerElement;\n    EventHandler.remove(target, 'mousemove', onMouseMove);\n    EventHandler.remove(target, touchMoveEvent, onMouseMove);\n    let eventName = (Browser.info.name === 'msie') ? 'pointerdown' : 'touchstart';\n    EventHandler.remove(target, eventName, onMouseMove);\n    if (!isNullOrUndefined(document.body.querySelector('.' + FOCUSED_HANDLER))) {\n        document.body.querySelector('.' + FOCUSED_HANDLER).classList.remove(FOCUSED_HANDLER);\n    }\n    if (!isNullOrUndefined(resizeEnd)) {\n        proxy = this;\n        resizeEnd(e, proxy);\n    }\n    EventHandler.remove(document, 'mouseup', onMouseUp);\n    EventHandler.remove(document, touchEndEvent, onMouseUp);\n}\n/* istanbul ignore next */\nfunction calculateValues() {\n    originalWidth = parseFloat(getComputedStyle(targetElement, null).getPropertyValue('width').replace('px', ''));\n    originalHeight = parseFloat(getComputedStyle(targetElement, null).getPropertyValue('height').replace('px', ''));\n    originalX = targetElement.getBoundingClientRect().left;\n    originalY = targetElement.getBoundingClientRect().top;\n}\n/* istanbul ignore next */\nfunction onTouchStart(e) {\n    targetElement = e.target.parentElement;\n    calculateValues();\n    let coordinates = e.touches ? e.changedTouches[0] : e;\n    originalMouseX = coordinates.pageX;\n    originalMouseY = coordinates.pageY;\n    if (!isNullOrUndefined(resizeStart)) {\n        proxy = this;\n        if (resizeStart(e, proxy) === true) {\n            return;\n        }\n    }\n    let touchMoveEvent = (Browser.info.name === 'msie') ? 'pointermove' : 'touchmove';\n    let touchEndEvent = (Browser.info.name === 'msie') ? 'pointerup' : 'touchend';\n    let target = (isNullOrUndefined(containerElement)) ? document : containerElement;\n    EventHandler.add(target, touchMoveEvent, onMouseMove, this);\n    EventHandler.add(document, touchEndEvent, onMouseUp);\n}\n/* istanbul ignore next */\nfunction onMouseMove(e) {\n    if (e.target.classList.contains(RESIZE_HANDLER) && e.target.classList.contains(FOCUSED_HANDLER)) {\n        selectedHandler = e.target;\n    }\n    else if (!isNullOrUndefined(document.body.querySelector('.' + FOCUSED_HANDLER))) {\n        selectedHandler = document.body.querySelector('.' + FOCUSED_HANDLER);\n    }\n    if (!isNullOrUndefined(selectedHandler)) {\n        let resizeTowards = '';\n        for (let i = 0; i < elementClass.length; i++) {\n            if (selectedHandler.classList.contains('e-' + elementClass[i])) {\n                resizeTowards = elementClass[i];\n            }\n        }\n        if (!isNullOrUndefined(resize)) {\n            proxy = this;\n            resize(e, proxy);\n        }\n        switch (resizeTowards) {\n            case 'south':\n                resizeSouth(e);\n                break;\n            case 'north':\n                resizeNorth(e);\n                break;\n            case 'west':\n                resizeWest(e);\n                break;\n            case 'east':\n                resizeEast(e);\n                break;\n            case 'south-east':\n                resizeSouth(e);\n                resizeEast(e);\n                break;\n            case 'south-west':\n                resizeSouth(e);\n                resizeWest(e);\n                break;\n            case 'north-east':\n                resizeNorth(e);\n                resizeEast(e);\n                break;\n            case 'north-west':\n                resizeNorth(e);\n                resizeWest(e);\n                break;\n            default: break;\n        }\n    }\n}\n/* istanbul ignore next */\nfunction getClientRectValues(element) {\n    return element.getBoundingClientRect();\n}\n/* istanbul ignore next */\n// tslint:disable-next-line\nfunction resizeSouth(e) {\n    let documentHeight = document.documentElement.clientHeight;\n    let calculateValue = false;\n    let containerRectValues;\n    let coordinates = e.touches ? e.changedTouches[0] : e;\n    let currentpageY = coordinates.pageY;\n    let targetRectValues = getClientRectValues(targetElement);\n    if (!isNullOrUndefined(containerElement)) {\n        containerRectValues = getClientRectValues(containerElement);\n    }\n    if (!isNullOrUndefined(containerElement)) {\n        calculateValue = true;\n    }\n    else if (isNullOrUndefined(containerElement) && ((documentHeight - currentpageY) >= 0 || (targetRectValues.top < 0))) {\n        calculateValue = true;\n    }\n    let calculatedHeight = originalHeight + (currentpageY - originalMouseY);\n    calculatedHeight = (calculatedHeight > minHeight) ? calculatedHeight : minHeight;\n    let containerTop = 0;\n    if (!isNullOrUndefined(containerElement)) {\n        containerTop = containerRectValues.top;\n    }\n    let borderValue = isNullOrUndefined(containerElement) ? 0 : containerElement.offsetHeight - containerElement.clientHeight;\n    let topWithoutborder = (targetRectValues.top - containerTop) - (borderValue / 2);\n    topWithoutborder = (topWithoutborder < 0) ? 0 : topWithoutborder;\n    if (targetRectValues.top > 0 && (topWithoutborder + calculatedHeight) > maxHeight) {\n        calculateValue = false;\n        if (targetElement.classList.contains(RESIZE_WITHIN_VIEWPORT)) {\n            return;\n        }\n        targetElement.style.height = (maxHeight - parseInt(topWithoutborder.toString(), 10)) + 'px';\n        return;\n    }\n    let targetTop = 0;\n    if (calculateValue) {\n        if (targetRectValues.top < 0 && (documentHeight + (targetRectValues.height + targetRectValues.top) > 0)) {\n            targetTop = targetRectValues.top;\n            if ((calculatedHeight + targetTop) <= 30) {\n                calculatedHeight = (targetRectValues.height - (targetRectValues.height + targetRectValues.top)) + 30;\n            }\n        }\n        if (((calculatedHeight + targetRectValues.top) >= maxHeight)) {\n            targetElement.style.height = targetRectValues.height +\n                (documentHeight - (targetRectValues.height + targetRectValues.top)) + 'px';\n        }\n        let calculatedTop = (isNullOrUndefined(containerElement)) ? targetTop : topWithoutborder;\n        if (calculatedHeight >= minHeight && ((calculatedHeight + calculatedTop) <= maxHeight)) {\n            targetElement.style.height = calculatedHeight + 'px';\n        }\n    }\n}\n/* istanbul ignore next */\n// tslint:disable-next-line\nfunction resizeNorth(e) {\n    let calculateValue = false;\n    let boundaryRectValues;\n    let pageY = (getEventType(e.type) === 'mouse') ? e.pageY : e.touches[0].pageY;\n    let targetRectValues = getClientRectValues(targetElement);\n    if (!isNullOrUndefined(containerElement)) {\n        boundaryRectValues = getClientRectValues(containerElement);\n    }\n    if (!isNullOrUndefined(containerElement) && (targetRectValues.top - boundaryRectValues.top) > 0) {\n        calculateValue = true;\n    }\n    else if (isNullOrUndefined(containerElement) && pageY > 0) {\n        calculateValue = true;\n    }\n    let currentHeight = originalHeight - (pageY - originalMouseY);\n    if ((getClientRectValues(targetElement).bottom + currentHeight) > maxHeight) {\n        calculateValue = false;\n        targetElement.style.height = maxHeight - getClientRectValues(targetElement).bottom + 'px';\n    }\n    if (calculateValue) {\n        if (currentHeight >= minHeight && currentHeight <= maxHeight) {\n            let containerTop = 0;\n            if (!isNullOrUndefined(containerElement)) {\n                containerTop = boundaryRectValues.top;\n            }\n            let top = (originalY - containerTop) + (pageY - originalMouseY);\n            top = top > 0 ? top : 1;\n            targetElement.style.height = currentHeight + 'px';\n            targetElement.style.top = top + 'px';\n        }\n    }\n}\n/* istanbul ignore next */\n// tslint:disable-next-line\nfunction resizeWest(e) {\n    let documentWidth = document.documentElement.clientWidth;\n    let calculateValue = false;\n    let rectValues;\n    if (!isNullOrUndefined(containerElement)) {\n        rectValues = getClientRectValues(containerElement);\n    }\n    let pageX = (getEventType(e.type) === 'mouse') ? e.pageX : e.touches[0].pageX;\n    let targetRectValues = getClientRectValues(targetElement);\n    let borderValue = isNullOrUndefined(containerElement) ? 0 : containerElement.offsetWidth - containerElement.clientWidth;\n    let left = isNullOrUndefined(containerElement) ? 0 : rectValues.left;\n    let containerWidth = isNullOrUndefined(containerElement) ? 0 : rectValues.width;\n    if (isNullOrUndefined(resizeWestWidth)) {\n        if (!isNullOrUndefined(containerElement)) {\n            resizeWestWidth = (((targetRectValues.left - left) - borderValue / 2)) + targetRectValues.width;\n            resizeWestWidth = resizeWestWidth + (containerWidth - borderValue - resizeWestWidth);\n        }\n        else {\n            resizeWestWidth = documentWidth;\n        }\n    }\n    if (!isNullOrUndefined(containerElement) &&\n        (((targetRectValues.left - rectValues.left) + targetRectValues.width +\n            (rectValues.right - targetRectValues.right)) - borderValue) <= maxWidth) {\n        calculateValue = true;\n    }\n    else if (isNullOrUndefined(containerElement) && pageX >= 0) {\n        calculateValue = true;\n    }\n    let calculatedWidth = originalWidth - (pageX - originalMouseX);\n    if (setLeft) {\n        calculatedWidth = (calculatedWidth > resizeWestWidth) ? resizeWestWidth : calculatedWidth;\n    }\n    if (calculateValue) {\n        if (calculatedWidth >= minWidth && calculatedWidth <= maxWidth) {\n            let containerLeft = 0;\n            if (!isNullOrUndefined(containerElement)) {\n                containerLeft = rectValues.left;\n            }\n            let left = (originalX - containerLeft) + (pageX - originalMouseX);\n            left = (left > 0) ? left : 1;\n            if (calculatedWidth !== previousWidth && setWidth) {\n                targetElement.style.width = calculatedWidth + 'px';\n            }\n            if (setLeft) {\n                targetElement.style.left = left + 'px';\n                if (left === 1) {\n                    setWidth = false;\n                }\n                else {\n                    setWidth = true;\n                }\n            }\n        }\n    }\n    previousWidth = calculatedWidth;\n}\n/* istanbul ignore next */\n// tslint:disable-next-line\nfunction resizeEast(e) {\n    let documentWidth = document.documentElement.clientWidth;\n    let calculateValue = false;\n    let containerRectValues;\n    if (!isNullOrUndefined(containerElement)) {\n        containerRectValues = getClientRectValues(containerElement);\n    }\n    let coordinates = e.touches ? e.changedTouches[0] : e;\n    let pageX = coordinates.pageX;\n    let targetRectValues = getClientRectValues(targetElement);\n    if (!isNullOrUndefined(containerElement) && (((targetRectValues.left - containerRectValues.left) + targetRectValues.width) < maxWidth\n        || (targetRectValues.right - containerRectValues.left) > targetRectValues.width)) {\n        calculateValue = true;\n    }\n    else if (isNullOrUndefined(containerElement) && (documentWidth - pageX) > 0) {\n        calculateValue = true;\n    }\n    let calculatedWidth = originalWidth + (pageX - originalMouseX);\n    let containerLeft = 0;\n    if (!isNullOrUndefined(containerElement)) {\n        containerLeft = containerRectValues.left;\n    }\n    if (((targetRectValues.left - containerLeft) + calculatedWidth) > maxWidth) {\n        calculateValue = false;\n        if (targetElement.classList.contains(RESIZE_WITHIN_VIEWPORT)) {\n            return;\n        }\n        targetElement.style.width = maxWidth - (targetRectValues.left - containerLeft) + 'px';\n    }\n    if (calculateValue) {\n        if (calculatedWidth >= minWidth && calculatedWidth <= maxWidth) {\n            targetElement.style.width = calculatedWidth + 'px';\n        }\n    }\n}\n/* istanbul ignore next */\nfunction setMinHeight(minimumHeight) {\n    minHeight = minimumHeight;\n}\nfunction setMaxWidth(value) {\n    maxWidth = value;\n}\nfunction setMaxHeight(value) {\n    maxHeight = value;\n}\nfunction removeResize() {\n    let handlers = targetElement.querySelectorAll('.' + RESIZE_HANDLER);\n    for (let i = 0; i < handlers.length; i++) {\n        detach(handlers[i]);\n    }\n}\n\nvar __decorate$1 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nclass ButtonProps extends ChildProperty {\n}\n__decorate$1([\n    Property()\n], ButtonProps.prototype, \"buttonModel\", void 0);\n__decorate$1([\n    Property('Button')\n], ButtonProps.prototype, \"type\", void 0);\n__decorate$1([\n    Event()\n], ButtonProps.prototype, \"click\", void 0);\n/**\n * Configures the animation properties for both open and close the dialog.\n */\nclass AnimationSettings extends ChildProperty {\n}\n__decorate$1([\n    Property('Fade')\n], AnimationSettings.prototype, \"effect\", void 0);\n__decorate$1([\n    Property(400)\n], AnimationSettings.prototype, \"duration\", void 0);\n__decorate$1([\n    Property(0)\n], AnimationSettings.prototype, \"delay\", void 0);\nconst ROOT = 'e-dialog';\nconst RTL = 'e-rtl';\nconst DLG_HEADER_CONTENT = 'e-dlg-header-content';\nconst DLG_HEADER = 'e-dlg-header';\nconst DLG_FOOTER_CONTENT = 'e-footer-content';\nconst MODAL_DLG = 'e-dlg-modal';\nconst DLG_CONTENT = 'e-dlg-content';\nconst DLG_CLOSE_ICON = 'e-icon-dlg-close';\nconst DLG_OVERLAY = 'e-dlg-overlay';\nconst DLG_TARGET = 'e-dlg-target';\nconst DLG_CONTAINER = 'e-dlg-container';\nconst SCROLL_DISABLED = 'e-scroll-disabled';\nconst DLG_PRIMARY_BUTTON = 'e-primary';\nconst ICON = 'e-icons';\nconst POPUP_ROOT = 'e-popup';\nconst DEVICE = 'e-device';\nconst FULLSCREEN = 'e-dlg-fullscreen';\nconst DLG_CLOSE_ICON_BTN = 'e-dlg-closeicon-btn';\nconst DLG_HIDE = 'e-popup-close';\nconst DLG_SHOW = 'e-popup-open';\nconst DLG_UTIL_DEFAULT_TITLE = 'Information';\nconst DLG_UTIL_ROOT = 'e-scroll-disabled';\nconst DLG_UTIL_ALERT = 'e-alert-dialog';\nconst DLG_UTIL_CONFIRM = 'e-confirm-dialog';\nconst DLG_RESIZABLE = 'e-dlg-resizable';\nconst DLG_RESTRICT_LEFT_VALUE = 'e-restrict-left';\nconst DLG_RESTRICT_WIDTH_VALUE = 'e-resize-viewport';\nconst DLG_REF_ELEMENT = 'e-dlg-ref-element';\n/**\n * Represents the dialog component that displays the information and get input from the user.\n * Two types of dialog components are `Modal and Modeless (non-modal)` depending on its interaction with parent application.\n * ```html\n * <div id=\"dialog\"></div>\n * ```\n * ```typescript\n * <script>\n *   var dialogObj = new Dialog({ header: 'Dialog' });\n *   dialogObj.appendTo(\"#dialog\");\n * </script>\n * ```\n */\nlet Dialog = class Dialog extends Component {\n    /**\n     * Constructor for creating the widget\n     * @hidden\n     */\n    constructor(options, element) {\n        super(options, element);\n    }\n    /**\n     * Initialize the control rendering\n     * @private\n     */\n    render() {\n        this.initialize();\n        this.initRender();\n        this.wireEvents();\n        if (this.width === '100%') {\n            this.element.style.width = '';\n        }\n        if (this.minHeight !== '') {\n            this.element.style.minHeight = this.minHeight.toString();\n        }\n        if (this.enableResize) {\n            this.setResize();\n            if (this.animationSettings.effect === 'None') {\n                this.getMinHeight();\n            }\n        }\n        this.renderComplete();\n    }\n    /**\n     * Initialize the event handler\n     * @private\n     */\n    preRender() {\n        this.headerContent = null;\n        this.allowMaxHeight = true;\n        this.preventVisibility = true;\n        this.clonedEle = this.element.cloneNode(true);\n        this.closeIconClickEventHandler = (event) => {\n            this.hide(event);\n        };\n        this.dlgOverlayClickEventHandler = (event) => {\n            this.trigger('overlayClick', event);\n            this.focusContent();\n        };\n        let localeText = { close: 'Close' };\n        this.l10n = new L10n('dialog', localeText, this.locale);\n        this.checkPositionData();\n        if (isNullOrUndefined(this.target)) {\n            let prevOnChange = this.isProtectedOnChange;\n            this.isProtectedOnChange = true;\n            this.target = document.body;\n            this.isProtectedOnChange = prevOnChange;\n        }\n    }\n    ;\n    isNumberValue(value) {\n        let isNumber = /^[-+]?\\d*\\.?\\d+$/.test(value);\n        return isNumber;\n    }\n    checkPositionData() {\n        if (!isNullOrUndefined(this.position)) {\n            if (!isNullOrUndefined(this.position.X) && (typeof (this.position.X) !== 'number')) {\n                let isNumber = this.isNumberValue(this.position.X);\n                if (isNumber) {\n                    let prevOnChange = this.isProtectedOnChange;\n                    this.isProtectedOnChange = true;\n                    this.position.X = parseFloat(this.position.X);\n                    this.isProtectedOnChange = prevOnChange;\n                }\n            }\n            if (!isNullOrUndefined(this.position.Y) && (typeof (this.position.Y) !== 'number')) {\n                let isNumber = this.isNumberValue(this.position.Y);\n                if (isNumber) {\n                    let prevOnChange = this.isProtectedOnChange;\n                    this.isProtectedOnChange = true;\n                    this.position.Y = parseFloat(this.position.Y);\n                    this.isProtectedOnChange = prevOnChange;\n                }\n            }\n        }\n    }\n    getEle(list, selector) {\n        let element = undefined;\n        for (let i = 0; i < list.length; i++) {\n            if (list[i].classList.contains(selector)) {\n                element = list[i];\n                break;\n            }\n        }\n        return element;\n    }\n    /* istanbul ignore next */\n    getMinHeight() {\n        let computedHeaderHeight = '0px';\n        let computedFooterHeight = '0px';\n        if (!isNullOrUndefined(this.element.querySelector('.' + DLG_HEADER_CONTENT))) {\n            computedHeaderHeight = getComputedStyle(this.headerContent).height;\n        }\n        let footerEle = this.getEle(this.element.children, DLG_FOOTER_CONTENT);\n        if (!isNullOrUndefined(footerEle)) {\n            computedFooterHeight = getComputedStyle(footerEle).height;\n        }\n        let headerHeight = parseInt(computedHeaderHeight.slice(0, computedHeaderHeight.indexOf('p')), 10);\n        let footerHeight = parseInt(computedFooterHeight.slice(0, computedFooterHeight.indexOf('p')), 10);\n        setMinHeight(headerHeight + 30 + footerHeight);\n        return (headerHeight + 30 + footerHeight);\n    }\n    onResizeStart(args, dialogObj) {\n        dialogObj.trigger('resizeStart', args);\n        return args.cancel;\n    }\n    onResizing(args, dialogObj) {\n        dialogObj.trigger('resizing', args);\n    }\n    onResizeComplete(args, dialogObj) {\n        dialogObj.trigger('resizeStop', args);\n    }\n    setResize() {\n        if (this.enableResize) {\n            if (this.isBlazorServerRender() && !isNullOrUndefined(this.element.querySelector('.e-icons.e-resize-handle'))) {\n                return;\n            }\n            this.element.classList.add(DLG_RESIZABLE);\n            let computedHeight = getComputedStyle(this.element).minHeight;\n            let computedWidth = getComputedStyle(this.element).minWidth;\n            let direction = this.enableRtl ? 'south-west' : 'south-east';\n            if (this.isModal && this.enableRtl) {\n                this.element.classList.add(DLG_RESTRICT_LEFT_VALUE);\n            }\n            else if (this.isModal && this.target === document.body) {\n                this.element.classList.add(DLG_RESTRICT_WIDTH_VALUE);\n            }\n            createResize({\n                element: this.element,\n                direction: direction,\n                minHeight: parseInt(computedHeight.slice(0, computedWidth.indexOf('p')), 10),\n                maxHeight: this.targetEle.clientHeight,\n                minWidth: parseInt(computedWidth.slice(0, computedWidth.indexOf('p')), 10),\n                maxWidth: this.targetEle.clientWidth,\n                boundary: this.target === document.body ? null : this.targetEle,\n                resizeBegin: this.onResizeStart.bind(this),\n                resizeComplete: this.onResizeComplete.bind(this),\n                resizing: this.onResizing.bind(this),\n                proxy: this\n            });\n            this.wireWindowResizeEvent();\n        }\n        else {\n            removeResize();\n            this.unWireWindowResizeEvent();\n            if (this.isModal) {\n                this.element.classList.remove(DLG_RESTRICT_LEFT_VALUE);\n            }\n            else {\n                this.element.classList.remove(DLG_RESTRICT_WIDTH_VALUE);\n            }\n            this.element.classList.remove(DLG_RESIZABLE);\n        }\n    }\n    /* istanbul ignore next */\n    keyDown(event) {\n        if (event.keyCode === 9) {\n            if (this.isModal) {\n                let buttonObj;\n                if (!isNullOrUndefined(this.btnObj)) {\n                    buttonObj = this.btnObj[this.btnObj.length - 1];\n                }\n                if ((isNullOrUndefined(this.btnObj)) && (!isNullOrUndefined(this.ftrTemplateContent))) {\n                    let value = 'input,select,textarea,button,a,[contenteditable=\"true\"],[tabindex]';\n                    let items = this.ftrTemplateContent.querySelectorAll(value);\n                    buttonObj = { element: items[items.length - 1] };\n                }\n                if (!isNullOrUndefined(buttonObj) && document.activeElement === buttonObj.element && !event.shiftKey) {\n                    event.preventDefault();\n                    this.focusableElements(this.element).focus();\n                }\n                if (document.activeElement === this.focusableElements(this.element) && event.shiftKey) {\n                    event.preventDefault();\n                    if (!isNullOrUndefined(buttonObj)) {\n                        buttonObj.element.focus();\n                    }\n                }\n            }\n        }\n        let element = document.activeElement;\n        let isTagName = (['input', 'textarea'].indexOf(element.tagName.toLowerCase()) > -1);\n        let isContentEdit = false;\n        if (!isTagName) {\n            isContentEdit = element.hasAttribute('contenteditable') && element.getAttribute('contenteditable') === 'true';\n        }\n        if (event.keyCode === 27 && this.closeOnEscape) {\n            this.hide(event);\n        }\n        if ((event.keyCode === 13 && !event.ctrlKey && element.tagName.toLowerCase() !== 'textarea' &&\n            isTagName && !isNullOrUndefined(this.primaryButtonEle)) ||\n            (event.keyCode === 13 && event.ctrlKey && (element.tagName.toLowerCase() === 'textarea' ||\n                isContentEdit)) && !isNullOrUndefined(this.primaryButtonEle)) {\n            let buttonIndex;\n            let firstPrimary = this.buttons.some((data, index) => {\n                buttonIndex = index;\n                let buttonModel = data.buttonModel;\n                return !isNullOrUndefined(buttonModel) && buttonModel.isPrimary === true;\n            });\n            if (firstPrimary && typeof (this.buttons[buttonIndex].click) === 'function') {\n                setTimeout(() => {\n                    this.buttons[buttonIndex].click.call(this, event);\n                });\n            }\n        }\n    }\n    /**\n     * Initialize the control rendering\n     * @private\n     */\n    initialize() {\n        if (!isNullOrUndefined(this.target)) {\n            this.targetEle = ((typeof this.target) === 'string') ?\n                document.querySelector(this.target) : this.target;\n        }\n        if (!this.isBlazorServerRender()) {\n            addClass([this.element], ROOT);\n        }\n        if (Browser.isDevice) {\n            addClass([this.element], DEVICE);\n        }\n        if (!this.isBlazorServerRender()) {\n            this.setCSSClass();\n        }\n        this.setMaxHeight();\n    }\n    /**\n     * Initialize the rendering\n     * @private\n     */\n    initRender() {\n        this.initialRender = true;\n        if (!this.isBlazorServerRender()) {\n            attributes(this.element, { role: 'dialog' });\n        }\n        if (this.zIndex === 1000) {\n            this.setzIndex(this.element, false);\n            this.calculatezIndex = true;\n        }\n        else {\n            this.calculatezIndex = false;\n        }\n        if (this.isBlazorServerRender() && isNullOrUndefined(this.headerContent)) {\n            this.headerContent = this.element.getElementsByClassName('e-dlg-header-content')[0];\n        }\n        if (this.isBlazorServerRender() && isNullOrUndefined(this.contentEle)) {\n            this.contentEle = this.element.querySelector('#' + this.element.id + '_dialog-content');\n        }\n        if (!this.isBlazorServerRender()) {\n            this.setTargetContent();\n            if (this.header !== '' && !isNullOrUndefined(this.header)) {\n                this.setHeader();\n            }\n            if (this.showCloseIcon) {\n                this.renderCloseIcon();\n            }\n            this.setContent();\n            if (this.footerTemplate !== '' && !isNullOrUndefined(this.footerTemplate)) {\n                this.setFooterTemplate();\n            }\n            else if (!isNullOrUndefined(this.buttons[0].buttonModel)) {\n                this.setButton();\n            }\n        }\n        if (this.isBlazorServerRender()) {\n            if (!isNullOrUndefined(this.buttons[0].buttonModel) && this.footerTemplate === '') {\n                this.setButton();\n            }\n        }\n        if (this.allowDragging && (!isNullOrUndefined(this.headerContent))) {\n            this.setAllowDragging();\n        }\n        if (!this.isBlazorServerRender()) {\n            attributes(this.element, { 'aria-modal': (this.isModal ? 'true' : 'false') });\n            if (this.isModal) {\n                this.setIsModal();\n            }\n        }\n        if (this.isBlazorServerRender() && isNullOrUndefined(this.dlgContainer)) {\n            this.dlgContainer = this.element.parentElement;\n            for (let i = 0, childNodes = this.dlgContainer.children; i < childNodes.length; i++) {\n                if (childNodes[i].classList.contains('e-dlg-overlay')) {\n                    this.dlgOverlay = childNodes[i];\n                }\n            }\n        }\n        if (this.element.classList.contains(DLG_UTIL_ALERT) !== true && this.element.classList.contains(DLG_UTIL_CONFIRM) !== true\n            && !isNullOrUndefined(this.element.parentElement)) {\n            let parentEle = this.isModal ? this.dlgContainer.parentElement : this.element.parentElement;\n            this.refElement = this.createElement('div', { className: DLG_REF_ELEMENT });\n            parentEle.insertBefore(this.refElement, (this.isModal ? this.dlgContainer : this.element));\n        }\n        if (!isNullOrUndefined(this.targetEle)) {\n            this.isModal ? this.targetEle.appendChild(this.dlgContainer) : this.targetEle.appendChild(this.element);\n        }\n        this.popupObj = new Popup(this.element, {\n            height: this.height,\n            width: this.width,\n            zIndex: this.zIndex,\n            relateTo: this.target,\n            actionOnScroll: 'none',\n            enableRtl: this.enableRtl,\n            open: (event) => {\n                let eventArgs = {\n                    container: this.isModal ? this.dlgContainer : this.element,\n                    element: this.element,\n                    target: this.target,\n                    preventFocus: false\n                };\n                if (this.enableResize) {\n                    this.resetResizeIcon();\n                }\n                this.trigger('open', eventArgs, (openEventArgs) => {\n                    if (!openEventArgs.preventFocus) {\n                        this.focusContent();\n                    }\n                });\n            },\n            close: (event) => {\n                if (this.isModal) {\n                    addClass([this.dlgOverlay], 'e-fade');\n                }\n                this.unBindEvent(this.element);\n                if (this.isModal) {\n                    this.dlgContainer.style.display = 'none';\n                }\n                this.trigger('close', this.closeArgs);\n                let activeEle = document.activeElement;\n                if (!isNullOrUndefined(activeEle) && !isNullOrUndefined((activeEle).blur)) {\n                    activeEle.blur();\n                }\n                if (!isNullOrUndefined(this.storeActiveElement) && !isNullOrUndefined(this.storeActiveElement.focus)) {\n                    this.storeActiveElement.focus();\n                }\n            }\n        });\n        this.positionChange();\n        this.setEnableRTL();\n        if (!this.isBlazorServerRender()) {\n            addClass([this.element], DLG_HIDE);\n            if (this.isModal) {\n                this.setOverlayZindex();\n            }\n        }\n        if (this.visible) {\n            this.show();\n        }\n        else {\n            if (this.isModal) {\n                this.dlgOverlay.style.display = 'none';\n            }\n        }\n        this.initialRender = false;\n    }\n    resetResizeIcon() {\n        let dialogConHeight = this.getMinHeight();\n        if (this.targetEle.offsetHeight < dialogConHeight) {\n            let className = this.enableRtl ? 'e-south-west' : 'e-south-east';\n            let resizeIcon = this.element.querySelector('.' + className);\n            if (!isNullOrUndefined(resizeIcon)) {\n                resizeIcon.style.bottom = '-' + dialogConHeight.toString() + 'px';\n            }\n        }\n    }\n    setOverlayZindex(zIndexValue) {\n        let zIndex;\n        if (isNullOrUndefined(zIndexValue)) {\n            zIndex = parseInt(this.element.style.zIndex, 10) ? parseInt(this.element.style.zIndex, 10) : this.zIndex;\n        }\n        else {\n            zIndex = zIndexValue;\n        }\n        this.dlgOverlay.style.zIndex = (zIndex - 1).toString();\n        this.dlgContainer.style.zIndex = zIndex.toString();\n    }\n    positionChange() {\n        if (this.isModal) {\n            if (!isNaN(parseFloat(this.position.X)) && !isNaN(parseFloat(this.position.Y))) {\n                this.setPopupPosition();\n            }\n            else if ((!isNaN(parseFloat(this.position.X)) && isNaN(parseFloat(this.position.Y)))\n                || (isNaN(parseFloat(this.position.X)) && !isNaN(parseFloat(this.position.Y)))) {\n                this.setPopupPosition();\n            }\n            else {\n                this.element.style.top = '0px';\n                this.element.style.left = '0px';\n                this.dlgContainer.classList.add('e-dlg-' + this.position.X + '-' + this.position.Y);\n            }\n        }\n        else {\n            this.setPopupPosition();\n        }\n    }\n    setPopupPosition() {\n        this.popupObj.setProperties({\n            position: {\n                X: this.position.X, Y: this.position.Y\n            }\n        });\n    }\n    setAllowDragging() {\n        let handleContent = '.' + DLG_HEADER_CONTENT;\n        this.dragObj = new Draggable(this.element, {\n            clone: false,\n            isDragScroll: true,\n            abort: '.e-dlg-closeicon-btn',\n            handle: handleContent,\n            dragStart: (event) => {\n                this.trigger('dragStart', event, (dragEventArgs) => {\n                    if (isBlazor()) {\n                        dragEventArgs.bindEvents(event.dragElement);\n                    }\n                });\n            },\n            dragStop: (event) => {\n                if (this.isModal) {\n                    if (!isNullOrUndefined(this.position)) {\n                        this.dlgContainer.classList.remove('e-dlg-' + this.position.X + '-' + this.position.Y);\n                    }\n                    // Reset the dialog position after drag completion.\n                    this.element.style.position = 'relative';\n                }\n                this.trigger('dragStop', event);\n                this.element.classList.remove(DLG_RESTRICT_LEFT_VALUE);\n            },\n            drag: (event) => {\n                this.trigger('drag', event);\n            }\n        });\n        if (!isNullOrUndefined(this.targetEle)) {\n            this.dragObj.dragArea = this.targetEle;\n        }\n    }\n    setButton() {\n        if (!this.isBlazorServerRender()) {\n            this.buttonContent = [];\n            this.btnObj = [];\n            for (let i = 0; i < this.buttons.length; i++) {\n                let buttonType = !isNullOrUndefined(this.buttons[i].type) ? this.buttons[i].type.toLowerCase() : 'button';\n                let btn = this.createElement('button', { attrs: { type: buttonType } });\n                this.buttonContent.push(btn.outerHTML);\n            }\n            this.setFooterTemplate();\n        }\n        let footerBtn;\n        for (let i = 0, childNodes = this.element.children; i < childNodes.length; i++) {\n            if (childNodes[i].classList.contains(DLG_FOOTER_CONTENT)) {\n                footerBtn = childNodes[i].querySelectorAll('button');\n            }\n        }\n        for (let i = 0; i < this.buttons.length; i++) {\n            if (!this.isBlazorServerRender()) {\n                this.btnObj[i] = new Button(this.buttons[i].buttonModel);\n            }\n            if (this.isBlazorServerRender()) {\n                this.ftrTemplateContent = this.element.querySelector('.' + DLG_FOOTER_CONTENT);\n            }\n            if (!isNullOrUndefined(this.ftrTemplateContent) && typeof (this.buttons[i].click) === 'function' && footerBtn.length > 0) {\n                EventHandler.add(footerBtn[i], 'click', this.buttons[i].click, this);\n            }\n            if (!this.isBlazorServerRender() && !isNullOrUndefined(this.ftrTemplateContent)) {\n                this.btnObj[i].appendTo(this.ftrTemplateContent.children[i]);\n                this.btnObj[i].element.classList.add('e-flat');\n                this.primaryButtonEle = this.element.getElementsByClassName('e-primary')[0];\n            }\n        }\n    }\n    setContent() {\n        attributes(this.element, { 'aria-describedby': this.element.id + '_dialog-content' });\n        this.contentEle = this.createElement('div', { className: DLG_CONTENT, id: this.element.id + '_dialog-content' });\n        if (this.innerContentElement) {\n            this.contentEle.appendChild(this.innerContentElement);\n        }\n        else if (!isNullOrUndefined(this.content) && this.content !== '' || !this.initialRender) {\n            if (typeof (this.content) === 'string' && !isBlazor()) {\n                this.contentEle.innerHTML = this.sanitizeHelper(this.content);\n            }\n            else if (this.content instanceof HTMLElement) {\n                this.contentEle.appendChild(this.content);\n            }\n            else {\n                this.setTemplate(this.content, this.contentEle, 'content');\n            }\n        }\n        if (!isNullOrUndefined(this.headerContent)) {\n            this.element.insertBefore(this.contentEle, this.element.children[1]);\n        }\n        else {\n            this.element.insertBefore(this.contentEle, this.element.children[0]);\n        }\n        if (this.height === 'auto') {\n            if (!this.isBlazorServerRender() && Browser.isIE && this.element.style.width === '' && !isNullOrUndefined(this.width)) {\n                this.element.style.width = formatUnit(this.width);\n            }\n            this.setMaxHeight();\n        }\n    }\n    setTemplate(template, toElement, prop) {\n        let templateFn;\n        let templateProps;\n        if (toElement.classList.contains(DLG_HEADER)) {\n            templateProps = this.element.id + 'header';\n        }\n        else if (toElement.classList.contains(DLG_FOOTER_CONTENT)) {\n            templateProps = this.element.id + 'footerTemplate';\n        }\n        else {\n            templateProps = this.element.id + 'content';\n        }\n        let templateValue;\n        if (!isNullOrUndefined(template.outerHTML)) {\n            toElement.appendChild(template);\n        }\n        else if ((typeof template !== 'string') || (isBlazor() && !this.isStringTemplate)) {\n            templateFn = compile(template);\n            templateValue = template;\n        }\n        else {\n            toElement.innerHTML = this.sanitizeHelper(template);\n        }\n        let fromElements = [];\n        if (!isNullOrUndefined(templateFn)) {\n            let isString = (isBlazor() &&\n                !this.isStringTemplate && (templateValue).indexOf('<div>Blazor') === 0) ?\n                this.isStringTemplate : true;\n            for (let item of templateFn({}, this, prop, templateProps, isString)) {\n                fromElements.push(item);\n            }\n            append([].slice.call(fromElements), toElement);\n        }\n    }\n    /**\n     * @hidden\n     */\n    sanitizeHelper(value) {\n        if (this.enableHtmlSanitizer) {\n            let dialogItem = SanitizeHtmlHelper.beforeSanitize();\n            let beforeEvent = {\n                cancel: false,\n                helper: null\n            };\n            extend(dialogItem, dialogItem, beforeEvent);\n            this.trigger('beforeSanitizeHtml', dialogItem);\n            if (dialogItem.cancel && !isNullOrUndefined(dialogItem.helper)) {\n                value = dialogItem.helper(value);\n            }\n            else if (!dialogItem.cancel) {\n                value = SanitizeHtmlHelper.serializeValue(dialogItem, value);\n            }\n        }\n        return value;\n    }\n    setMaxHeight() {\n        if (!this.allowMaxHeight) {\n            return;\n        }\n        let display = this.element.style.display;\n        this.element.style.display = 'none';\n        this.element.style.maxHeight = (!isNullOrUndefined(this.target)) && (this.targetEle.offsetHeight < window.innerHeight) ?\n            (this.targetEle.offsetHeight - 20) + 'px' : (window.innerHeight - 20) + 'px';\n        this.element.style.display = display;\n        if (Browser.isIE && this.height === 'auto' && !isNullOrUndefined(this.contentEle)\n            && this.element.offsetHeight < this.contentEle.offsetHeight) {\n            this.element.style.height = 'inherit';\n        }\n    }\n    setEnableRTL() {\n        if (!this.isBlazorServerRender()) {\n            this.enableRtl ? addClass([this.element], RTL) : removeClass([this.element], RTL);\n        }\n        if (!isNullOrUndefined(this.element.querySelector('.e-resize-handle'))) {\n            removeResize();\n            this.setResize();\n        }\n    }\n    setTargetContent() {\n        if (isNullOrUndefined(this.content) || this.content === '') {\n            let isContent = this.element.innerHTML.replace(/\\s|<(\\/?|\\!?)(!--!--)>/g, '') !== '';\n            if (this.element.children.length > 0 || isContent) {\n                this.innerContentElement = document.createDocumentFragment();\n                [].slice.call(this.element.childNodes).forEach((el) => {\n                    if (el.nodeType !== 8) {\n                        this.innerContentElement.appendChild(el);\n                    }\n                });\n            }\n        }\n    }\n    setHeader() {\n        if (this.headerEle) {\n            this.headerEle.innerHTML = '';\n        }\n        else {\n            this.headerEle = this.createElement('div', { id: this.element.id + '_title', className: DLG_HEADER });\n        }\n        this.createHeaderContent();\n        this.headerContent.appendChild(this.headerEle);\n        this.setTemplate(this.header, this.headerEle, 'header');\n        attributes(this.element, { 'aria-labelledby': this.element.id + '_title' });\n        this.element.insertBefore(this.headerContent, this.element.children[0]);\n    }\n    setFooterTemplate() {\n        if (this.ftrTemplateContent) {\n            this.ftrTemplateContent.innerHTML = '';\n        }\n        else {\n            this.ftrTemplateContent = this.createElement('div', {\n                className: DLG_FOOTER_CONTENT\n            });\n        }\n        if (this.footerTemplate !== '' && !isNullOrUndefined(this.footerTemplate)) {\n            this.setTemplate(this.footerTemplate, this.ftrTemplateContent, 'footerTemplate');\n        }\n        else {\n            this.ftrTemplateContent.innerHTML = this.buttonContent.join('');\n        }\n        this.element.appendChild(this.ftrTemplateContent);\n    }\n    createHeaderContent() {\n        if (isNullOrUndefined(this.headerContent)) {\n            this.headerContent = this.createElement('div', { id: this.element.id + '_dialog-header', className: DLG_HEADER_CONTENT });\n        }\n    }\n    renderCloseIcon() {\n        this.closeIcon = this.createElement('button', { className: DLG_CLOSE_ICON_BTN, attrs: { type: 'button' } });\n        this.closeIconBtnObj = new Button({ cssClass: 'e-flat', iconCss: DLG_CLOSE_ICON + ' ' + ICON });\n        this.closeIconTitle();\n        if (!isNullOrUndefined(this.headerContent)) {\n            prepend([this.closeIcon], this.headerContent);\n        }\n        else {\n            this.createHeaderContent();\n            prepend([this.closeIcon], this.headerContent);\n            this.element.insertBefore(this.headerContent, this.element.children[0]);\n        }\n        this.closeIconBtnObj.appendTo(this.closeIcon);\n    }\n    closeIconTitle() {\n        this.l10n.setLocale(this.locale);\n        let closeIconTitle = this.l10n.getConstant('close');\n        this.closeIcon.setAttribute('title', closeIconTitle);\n        this.closeIcon.setAttribute('aria-label', closeIconTitle);\n    }\n    setCSSClass(oldCSSClass) {\n        if (this.cssClass) {\n            addClass([this.element], this.cssClass.split(' '));\n        }\n        if (oldCSSClass) {\n            removeClass([this.element], oldCSSClass.split(' '));\n        }\n    }\n    setIsModal() {\n        this.dlgContainer = this.createElement('div', { className: DLG_CONTAINER });\n        this.element.classList.remove(DLG_SHOW);\n        this.element.parentNode.insertBefore(this.dlgContainer, this.element);\n        this.dlgContainer.appendChild(this.element);\n        addClass([this.element], MODAL_DLG);\n        this.dlgOverlay = this.createElement('div', { className: DLG_OVERLAY });\n        this.dlgOverlay.style.zIndex = (this.zIndex - 1).toString();\n        this.dlgContainer.appendChild(this.dlgOverlay);\n    }\n    getValidFocusNode(items) {\n        let node;\n        for (let u = 0; u < items.length; u++) {\n            node = items[u];\n            if ((node.clientHeight > 0 || (node.tagName.toLowerCase() === 'a' && node.hasAttribute('href'))) && node.tabIndex > -1 &&\n                !node.disabled && !this.disableElement(node, '[disabled],[aria-disabled=\"true\"],[type=\"hidden\"]')) {\n                return node;\n            }\n        }\n        return node;\n    }\n    focusableElements(content) {\n        if (!isNullOrUndefined(content)) {\n            let value = 'input,select,textarea,button,a,[contenteditable=\"true\"],[tabindex]';\n            let items = content.querySelectorAll(value);\n            return this.getValidFocusNode(items);\n        }\n        return null;\n    }\n    getAutoFocusNode(container) {\n        let node = container.querySelector('.' + DLG_CLOSE_ICON_BTN);\n        let value = '[autofocus]';\n        let items = container.querySelectorAll(value);\n        let validNode = this.getValidFocusNode(items);\n        if (isBlazor()) {\n            this.primaryButtonEle = this.element.getElementsByClassName('e-primary')[0];\n        }\n        if (!isNullOrUndefined(validNode)) {\n            node = validNode;\n        }\n        else {\n            validNode = this.focusableElements(this.contentEle);\n            if (!isNullOrUndefined(validNode)) {\n                return node = validNode;\n            }\n            else if (!isNullOrUndefined(this.primaryButtonEle)) {\n                return this.element.querySelector('.' + DLG_PRIMARY_BUTTON);\n            }\n        }\n        return node;\n    }\n    disableElement(element, t) {\n        let elementMatch = element ? element.matches || element.webkitMatchesSelector || element.msMatchesSelector : null;\n        if (elementMatch) {\n            for (; element; element = element.parentNode) {\n                if (element instanceof Element && elementMatch.call(element, t)) {\n                    /* istanbul ignore next */\n                    return element;\n                }\n            }\n        }\n        return null;\n    }\n    focusContent() {\n        let element = this.getAutoFocusNode(this.element);\n        let node = !isNullOrUndefined(element) ? element : this.element;\n        node.focus();\n        this.bindEvent(this.element);\n    }\n    bindEvent(element) {\n        EventHandler.add(element, 'keydown', this.keyDown, this);\n    }\n    unBindEvent(element) {\n        EventHandler.remove(element, 'keydown', this.keyDown);\n    }\n    updateSanitizeContent() {\n        if (!this.isBlazorServerRender()) {\n            this.contentEle.innerHTML = this.sanitizeHelper(this.content);\n        }\n    }\n    isBlazorServerRender() {\n        return isBlazor() && this.isServerRendered;\n    }\n    /**\n     * Module required function\n     * @private\n     */\n    getModuleName() {\n        return 'dialog';\n    }\n    /**\n     * Called internally if any of the property value changed\n     * @private\n     */\n    onPropertyChanged(newProp, oldProp) {\n        if (!this.element.classList.contains(ROOT)) {\n            return;\n        }\n        for (let prop of Object.keys(newProp)) {\n            switch (prop) {\n                case 'content':\n                    if (!isNullOrUndefined(this.content) && this.content !== '') {\n                        if (this.isBlazorServerRender()) {\n                            this.contentEle = this.element.querySelector('.e-dlg-content');\n                        }\n                        if (!isNullOrUndefined(this.contentEle) && this.contentEle.getAttribute('role') !== 'dialog') {\n                            if (!this.isBlazorServerRender()) {\n                                this.contentEle.innerHTML = '';\n                            }\n                            typeof (this.content) === 'string' ? (this.isBlazorServerRender()\n                                && (this.contentEle.innerText === '')) ?\n                                this.contentEle.insertAdjacentHTML('beforeend', this.sanitizeHelper(this.content)) :\n                                this.updateSanitizeContent() :\n                                this.contentEle.appendChild(this.content);\n                            this.setMaxHeight();\n                        }\n                        else {\n                            if (!this.isBlazorServerRender() ||\n                                isNullOrUndefined(this.element.querySelector('.e-dlg-content'))) {\n                                this.setContent();\n                            }\n                        }\n                    }\n                    else if (!isNullOrUndefined(this.contentEle)) {\n                        detach(this.contentEle);\n                        this.contentEle = null;\n                    }\n                    break;\n                case 'header':\n                    if (this.header === '' || isNullOrUndefined(this.header)) {\n                        if (this.headerEle) {\n                            detach(this.headerEle);\n                            this.headerEle = null;\n                        }\n                    }\n                    else {\n                        if (!this.isBlazorServerRender() ||\n                            isNullOrUndefined(this.element.querySelector('.e-dlg-header-content'))) {\n                            this.setHeader();\n                        }\n                    }\n                    break;\n                case 'footerTemplate':\n                    if (this.footerTemplate === '' || isNullOrUndefined(this.footerTemplate)) {\n                        if (!this.ftrTemplateContent) {\n                            return;\n                        }\n                        detach(this.ftrTemplateContent);\n                        this.ftrTemplateContent = null;\n                        this.buttons = [{}];\n                    }\n                    else {\n                        if (!this.isBlazorServerRender() ||\n                            isNullOrUndefined(this.element.querySelector('.e-footer-content'))) {\n                            this.setFooterTemplate();\n                        }\n                        this.buttons = [{}];\n                    }\n                    break;\n                case 'showCloseIcon':\n                    if (this.element.getElementsByClassName(DLG_CLOSE_ICON).length > 0) {\n                        if (!this.showCloseIcon && (this.header === '' || isNullOrUndefined(this.header))) {\n                            detach(this.headerContent);\n                            this.headerContent = null;\n                        }\n                        else if (!this.showCloseIcon) {\n                            detach(this.closeIcon);\n                        }\n                        else {\n                            if (this.isBlazorServerRender()) {\n                                this.wireEvents();\n                            }\n                        }\n                    }\n                    else {\n                        if (!this.isBlazorServerRender()) {\n                            this.renderCloseIcon();\n                        }\n                        this.wireEvents();\n                    }\n                    break;\n                case 'locale':\n                    if (this.showCloseIcon) {\n                        this.closeIconTitle();\n                    }\n                    break;\n                case 'visible':\n                    this.visible ? this.show() : this.hide();\n                    break;\n                case 'isModal':\n                    this.updateIsModal();\n                    break;\n                case 'height':\n                    setStyleAttribute(this.element, { 'height': formatUnit(newProp.height) });\n                    break;\n                case 'width':\n                    setStyleAttribute(this.element, { 'width': formatUnit(newProp.width) });\n                    break;\n                case 'zIndex':\n                    this.popupObj.zIndex = this.zIndex;\n                    if (this.isModal) {\n                        this.setOverlayZindex(this.zIndex);\n                    }\n                    if (this.element.style.zIndex !== this.zIndex.toString()) {\n                        this.calculatezIndex = false;\n                    }\n                    break;\n                case 'cssClass':\n                    this.setCSSClass(oldProp.cssClass);\n                    break;\n                case 'buttons':\n                    let buttonCount = this.buttons.length;\n                    if (!isNullOrUndefined(this.ftrTemplateContent) && !this.isBlazorServerRender()) {\n                        detach(this.ftrTemplateContent);\n                        this.ftrTemplateContent = null;\n                    }\n                    for (let i = 0; i < buttonCount; i++) {\n                        if (!isNullOrUndefined(this.buttons[i].buttonModel)) {\n                            this.footerTemplate = '';\n                            this.setButton();\n                        }\n                    }\n                    break;\n                case 'allowDragging':\n                    if (this.allowDragging && (!isNullOrUndefined(this.headerContent))) {\n                        this.setAllowDragging();\n                    }\n                    else {\n                        this.dragObj.destroy();\n                    }\n                    break;\n                case 'target':\n                    this.setTarget(newProp.target);\n                    break;\n                case 'position':\n                    this.checkPositionData();\n                    if (this.isModal) {\n                        let positionX = isNullOrUndefined(oldProp.position.X) ? this.position.X : oldProp.position.X;\n                        let positionY = isNullOrUndefined(oldProp.position.Y) ? this.position.Y : oldProp.position.Y;\n                        if (this.dlgContainer.classList.contains('e-dlg-' + positionX + '-' + positionY)) {\n                            this.dlgContainer.classList.remove('e-dlg-' + positionX + '-' + positionY);\n                        }\n                    }\n                    this.positionChange();\n                    break;\n                case 'enableRtl':\n                    this.setEnableRTL();\n                    break;\n                case 'enableResize':\n                    this.setResize();\n                    break;\n            }\n        }\n    }\n    setTarget(target) {\n        this.popupObj.relateTo = target;\n        this.target = target;\n        this.targetEle = ((typeof this.target) === 'string') ?\n            document.querySelector(this.target) : this.target;\n        if (this.dragObj) {\n            this.dragObj.dragArea = this.targetEle;\n        }\n        this.setMaxHeight();\n        if (this.isModal) {\n            this.updateIsModal();\n        }\n        if (this.enableResize) {\n            this.setResize();\n        }\n    }\n    updateIsModal() {\n        this.element.setAttribute('aria-modal', this.isModal ? 'true' : 'false');\n        if (this.isModal) {\n            this.setIsModal();\n            this.element.style.top = '0px';\n            this.element.style.left = '0px';\n            if (!isNullOrUndefined(this.targetEle)) {\n                this.targetEle.appendChild(this.dlgContainer);\n            }\n        }\n        else {\n            removeClass([this.element], MODAL_DLG);\n            removeClass([document.body], [DLG_TARGET, SCROLL_DISABLED]);\n            detach(this.dlgOverlay);\n            while (this.dlgContainer.firstChild) {\n                this.dlgContainer.parentElement.insertBefore(this.dlgContainer.firstChild, this.dlgContainer);\n            }\n            this.dlgContainer.parentElement.removeChild(this.dlgContainer);\n        }\n        if (this.visible) {\n            this.show();\n        }\n        this.positionChange();\n        if (this.isModal && this.dlgOverlay) {\n            EventHandler.add(this.dlgOverlay, 'click', this.dlgOverlayClickEventHandler, this);\n        }\n    }\n    setzIndex(zIndexElement, setPopupZindex) {\n        let prevOnChange = this.isProtectedOnChange;\n        this.isProtectedOnChange = true;\n        this.zIndex = getZindexPartial(zIndexElement);\n        this.isProtectedOnChange = prevOnChange;\n        if (setPopupZindex) {\n            this.popupObj.zIndex = this.zIndex;\n        }\n    }\n    windowResizeHandler() {\n        setMaxWidth(this.targetEle.clientWidth);\n        setMaxHeight(this.targetEle.clientHeight);\n        this.setMaxHeight();\n    }\n    /**\n     * Get the properties to be maintained in the persisted state.\n     * @private\n     */\n    getPersistData() {\n        return this.addOnPersist([]);\n    }\n    /**\n     * To destroy the widget\n     * @method destroy\n     * @return {void}\n     * @memberof dialog\n     */\n    destroy() {\n        if (this.isDestroyed) {\n            return;\n        }\n        let classArray = [RTL, MODAL_DLG, DLG_RESIZABLE, DLG_RESTRICT_LEFT_VALUE, FULLSCREEN, DEVICE];\n        let attrs = ['role', 'aria-modal', 'aria-labelledby', 'aria-describedby', 'aria-grabbed', 'tabindex', 'style'];\n        removeClass([this.targetEle], [DLG_TARGET, SCROLL_DISABLED]);\n        if (this.element.classList.contains(FULLSCREEN)) {\n            removeClass([document.body], [DLG_TARGET, SCROLL_DISABLED]);\n        }\n        if (this.isModal) {\n            removeClass([(!isNullOrUndefined(this.targetEle) ? this.targetEle : document.body)], SCROLL_DISABLED);\n        }\n        this.unWireEvents();\n        if (!isNullOrUndefined(this.btnObj)) {\n            for (let i = 0; i < this.btnObj.length; i++) {\n                this.btnObj[i].destroy();\n            }\n        }\n        if (!isNullOrUndefined(this.dragObj)) {\n            this.dragObj.destroy();\n        }\n        if (this.popupObj.element.classList.contains(POPUP_ROOT)) {\n            this.popupObj.destroy();\n        }\n        removeClass([this.element], classArray);\n        if (!isNullOrUndefined(this.cssClass) && this.cssClass !== '') {\n            removeClass([this.element], this.cssClass.split(' '));\n        }\n        if (!isNullOrUndefined(this.refElement) && !isNullOrUndefined(this.refElement.parentElement)) {\n            this.refElement.parentElement.insertBefore((this.isModal ? this.dlgContainer : this.element), this.refElement);\n            detach(this.refElement);\n            this.refElement = undefined;\n        }\n        if (this.isModal && !this.isBlazorServerRender()) {\n            detach(this.dlgOverlay);\n            this.dlgContainer.parentNode.insertBefore(this.element, this.dlgContainer);\n            detach(this.dlgContainer);\n        }\n        if (!this.isBlazorServerRender()) {\n            this.element.innerHTML = this.clonedEle.innerHTML;\n        }\n        if (this.isBlazorServerRender()) {\n            if (!isNullOrUndefined(this.element.children)) {\n                for (let i = 0; i <= this.element.children.length; i++) {\n                    i = i - i;\n                    detach(this.element.children[i]);\n                }\n            }\n        }\n        for (let i = 0; i < attrs.length; i++) {\n            this.element.removeAttribute(attrs[i]);\n        }\n        if (!this.isBlazorServerRender()) {\n            super.destroy();\n        }\n        else {\n            this.isDestroyed = true;\n        }\n        // tslint:disable-next-line:no-any\n        if (this.isReact) {\n            this.clearTemplate();\n        }\n    }\n    wireWindowResizeEvent() {\n        window.addEventListener('resize', this.windowResizeHandler.bind(this));\n    }\n    unWireWindowResizeEvent() {\n        window.removeEventListener('resize', this.windowResizeHandler.bind(this));\n    }\n    /**\n     * Binding event to the element while widget creation\n     * @hidden\n     */\n    wireEvents() {\n        if (this.isBlazorServerRender() && this.showCloseIcon) {\n            this.closeIcon = this.element.getElementsByClassName('e-dlg-closeicon-btn')[0];\n        }\n        if (this.showCloseIcon) {\n            EventHandler.add(this.closeIcon, 'click', this.closeIconClickEventHandler, this);\n        }\n        if (this.isModal && this.dlgOverlay) {\n            EventHandler.add(this.dlgOverlay, 'click', this.dlgOverlayClickEventHandler, this);\n        }\n    }\n    /**\n     * Unbinding event to the element while widget destroy\n     * @hidden\n     */\n    unWireEvents() {\n        if (this.showCloseIcon) {\n            EventHandler.remove(this.closeIcon, 'click', this.closeIconClickEventHandler);\n        }\n        if (this.isModal) {\n            EventHandler.remove(this.dlgOverlay, 'click', this.dlgOverlayClickEventHandler);\n        }\n        if (this.buttons.length > 0 && !isNullOrUndefined(this.buttons[0].buttonModel) && this.footerTemplate === '') {\n            for (let i = 0; i < this.buttons.length; i++) {\n                if (typeof (this.buttons[i].click) === 'function') {\n                    EventHandler.remove(this.ftrTemplateContent.children[i], 'click', this.buttons[i].click);\n                }\n            }\n        }\n    }\n    /**\n     * Refreshes the dialog's position when the user changes its header and footer height/width dynamically.\n     * @return {void}\n     */\n    refreshPosition() {\n        this.popupObj.refreshPosition();\n    }\n    /**\n     * Opens the dialog if it is in hidden state.\n     * To open the dialog with full screen width, set the parameter to true.\n     * @param { boolean } isFullScreen - Enable the fullScreen Dialog.\n     * @return {void}\n     */\n    show(isFullScreen) {\n        if (!this.element.classList.contains(ROOT)) {\n            return;\n        }\n        if (!this.element.classList.contains(DLG_SHOW) || (!isNullOrUndefined(isFullScreen))) {\n            if (!isNullOrUndefined(isFullScreen)) {\n                this.fullScreen(isFullScreen);\n            }\n            let eventArgs = isBlazor() ? {\n                cancel: false,\n                element: this.element,\n                container: this.isModal ? this.dlgContainer : this.element,\n                maxHeight: this.element.style.maxHeight\n            } : {\n                cancel: false,\n                element: this.element,\n                container: this.isModal ? this.dlgContainer : this.element,\n                target: this.target,\n                maxHeight: this.element.style.maxHeight\n            };\n            this.trigger('beforeOpen', eventArgs, (beforeOpenArgs) => {\n                if (!beforeOpenArgs.cancel) {\n                    if (this.element.style.maxHeight !== eventArgs.maxHeight) {\n                        this.allowMaxHeight = false;\n                        this.element.style.maxHeight = eventArgs.maxHeight;\n                    }\n                    this.storeActiveElement = document.activeElement;\n                    this.element.tabIndex = -1;\n                    if (this.isModal && (!isNullOrUndefined(this.dlgOverlay))) {\n                        this.dlgOverlay.style.display = 'block';\n                        this.dlgContainer.style.display = 'flex';\n                        removeClass([this.dlgOverlay], 'e-fade');\n                        if (!isNullOrUndefined(this.targetEle)) {\n                            if (this.targetEle === document.body) {\n                                this.dlgContainer.style.position = 'fixed';\n                            }\n                            else {\n                                this.dlgContainer.style.position = 'absolute';\n                            }\n                            this.dlgOverlay.style.position = 'absolute';\n                            this.element.style.position = 'relative';\n                            addClass([this.targetEle], [DLG_TARGET, SCROLL_DISABLED]);\n                        }\n                        else {\n                            addClass([document.body], [DLG_TARGET, SCROLL_DISABLED]);\n                        }\n                    }\n                    let openAnimation = {\n                        name: this.animationSettings.effect + 'In',\n                        duration: this.animationSettings.duration,\n                        delay: this.animationSettings.delay\n                    };\n                    let zIndexElement = (this.isModal) ? this.element.parentElement : this.element;\n                    if (this.calculatezIndex) {\n                        this.setzIndex(zIndexElement, true);\n                        setStyleAttribute(this.element, { 'zIndex': this.zIndex });\n                        if (this.isModal) {\n                            this.setOverlayZindex(this.zIndex);\n                        }\n                    }\n                    this.animationSettings.effect === 'None' ? this.popupObj.show() : this.popupObj.show(openAnimation);\n                    this.dialogOpen = true;\n                    let prevOnChange = this.isProtectedOnChange;\n                    this.isProtectedOnChange = true;\n                    this.visible = true;\n                    this.preventVisibility = true;\n                    this.isProtectedOnChange = prevOnChange;\n                }\n            });\n        }\n        // tslint:disable-next-line:no-any\n        if (this.isReact) {\n            this.renderReactTemplates();\n        }\n    }\n    /**\n     * Closes the dialog if it is in visible state.\n     * @return {void}\n     */\n    hide(event) {\n        if (!this.element.classList.contains(ROOT)) {\n            return;\n        }\n        if (this.preventVisibility) {\n            let eventArgs = isBlazor() ? {\n                cancel: false,\n                isInteracted: event ? true : false,\n                element: this.element,\n                container: this.isModal ? this.dlgContainer : this.element,\n                event: event\n            } : {\n                cancel: false,\n                isInteracted: event ? true : false,\n                element: this.element,\n                target: this.target,\n                container: this.isModal ? this.dlgContainer : this.element,\n                event: event\n            };\n            this.closeArgs = eventArgs;\n            this.trigger('beforeClose', eventArgs, (beforeCloseArgs) => {\n                if (!beforeCloseArgs.cancel) {\n                    if (this.isModal) {\n                        !isNullOrUndefined(this.targetEle) ? removeClass([this.targetEle], [DLG_TARGET, SCROLL_DISABLED]) :\n                            removeClass([document.body], [DLG_TARGET, SCROLL_DISABLED]);\n                    }\n                    let closeAnimation = {\n                        name: this.animationSettings.effect + 'Out',\n                        duration: this.animationSettings.duration,\n                        delay: this.animationSettings.delay\n                    };\n                    this.animationSettings.effect === 'None' ? this.popupObj.hide() : this.popupObj.hide(closeAnimation);\n                    this.dialogOpen = false;\n                    let prevOnChange = this.isProtectedOnChange;\n                    this.isProtectedOnChange = true;\n                    this.visible = false;\n                    this.preventVisibility = false;\n                    this.isProtectedOnChange = prevOnChange;\n                }\n            });\n        }\n    }\n    /**\n     * Specifies to view the Full screen Dialog.\n     * @private\n     */\n    fullScreen(args) {\n        let top = this.element.offsetTop;\n        let left = this.element.offsetLeft;\n        if (args) {\n            addClass([this.element], FULLSCREEN);\n            let display = this.element.style.display;\n            this.element.style.display = 'none';\n            this.element.style.maxHeight = (!isNullOrUndefined(this.target)) ?\n                (this.targetEle.offsetHeight) + 'px' : (window.innerHeight) + 'px';\n            this.element.style.display = display;\n            addClass([document.body], [DLG_TARGET, SCROLL_DISABLED]);\n            if (this.allowDragging && !isNullOrUndefined(this.dragObj)) {\n                this.dragObj.destroy();\n            }\n        }\n        else {\n            removeClass([this.element], FULLSCREEN);\n            removeClass([document.body], [DLG_TARGET, SCROLL_DISABLED]);\n            if (this.allowDragging && (!isNullOrUndefined(this.headerContent))) {\n                this.setAllowDragging();\n            }\n        }\n        return args;\n    }\n    /**\n     * Returns the dialog button instances.\n     * Based on that, you can dynamically change the button states.\n     * @param { number } index - Index of the button.\n     * @return {Button}\n     */\n    getButtons(index) {\n        if (!isNullOrUndefined(index)) {\n            return this.btnObj[index];\n        }\n        return this.btnObj;\n    }\n};\n__decorate$1([\n    Property('')\n], Dialog.prototype, \"content\", void 0);\n__decorate$1([\n    Property(true)\n], Dialog.prototype, \"enableHtmlSanitizer\", void 0);\n__decorate$1([\n    Property(false)\n], Dialog.prototype, \"showCloseIcon\", void 0);\n__decorate$1([\n    Property(false)\n], Dialog.prototype, \"isModal\", void 0);\n__decorate$1([\n    Property('')\n], Dialog.prototype, \"header\", void 0);\n__decorate$1([\n    Property(true)\n], Dialog.prototype, \"visible\", void 0);\n__decorate$1([\n    Property(false)\n], Dialog.prototype, \"enableResize\", void 0);\n__decorate$1([\n    Property('auto')\n], Dialog.prototype, \"height\", void 0);\n__decorate$1([\n    Property('')\n], Dialog.prototype, \"minHeight\", void 0);\n__decorate$1([\n    Property('100%')\n], Dialog.prototype, \"width\", void 0);\n__decorate$1([\n    Property('')\n], Dialog.prototype, \"cssClass\", void 0);\n__decorate$1([\n    Property(1000)\n], Dialog.prototype, \"zIndex\", void 0);\n__decorate$1([\n    Property(null)\n], Dialog.prototype, \"target\", void 0);\n__decorate$1([\n    Property('')\n], Dialog.prototype, \"footerTemplate\", void 0);\n__decorate$1([\n    Property(false)\n], Dialog.prototype, \"allowDragging\", void 0);\n__decorate$1([\n    Collection([{}], ButtonProps)\n], Dialog.prototype, \"buttons\", void 0);\n__decorate$1([\n    Property(true)\n], Dialog.prototype, \"closeOnEscape\", void 0);\n__decorate$1([\n    Complex({}, AnimationSettings)\n], Dialog.prototype, \"animationSettings\", void 0);\n__decorate$1([\n    Complex({ X: 'center', Y: 'center' }, PositionData)\n], Dialog.prototype, \"position\", void 0);\n__decorate$1([\n    Event()\n], Dialog.prototype, \"created\", void 0);\n__decorate$1([\n    Event()\n], Dialog.prototype, \"open\", void 0);\n__decorate$1([\n    Event()\n], Dialog.prototype, \"beforeSanitizeHtml\", void 0);\n__decorate$1([\n    Event()\n], Dialog.prototype, \"beforeOpen\", void 0);\n__decorate$1([\n    Event()\n], Dialog.prototype, \"close\", void 0);\n__decorate$1([\n    Event()\n], Dialog.prototype, \"beforeClose\", void 0);\n__decorate$1([\n    Event()\n], Dialog.prototype, \"dragStart\", void 0);\n__decorate$1([\n    Event()\n], Dialog.prototype, \"dragStop\", void 0);\n__decorate$1([\n    Event()\n], Dialog.prototype, \"drag\", void 0);\n__decorate$1([\n    Event()\n], Dialog.prototype, \"overlayClick\", void 0);\n__decorate$1([\n    Event()\n], Dialog.prototype, \"resizeStart\", void 0);\n__decorate$1([\n    Event()\n], Dialog.prototype, \"resizing\", void 0);\n__decorate$1([\n    Event()\n], Dialog.prototype, \"resizeStop\", void 0);\n__decorate$1([\n    Event()\n], Dialog.prototype, \"destroyed\", void 0);\nDialog = __decorate$1([\n    NotifyPropertyChanges\n], Dialog);\n/**\n * Base for creating Alert and Confirmation Dialog through util method.\n */\nvar DialogUtility;\n(function (DialogUtility) {\n    /**\n     * An alert dialog box is used to display warning like messages to the users.\n     * ```\n     * Eg : DialogUtility.alert('Alert message');\n     *\n     * ```\n     */\n    /* istanbul ignore next */\n    function alert(args) {\n        let dialogElement = createElement('div', { 'className': DLG_UTIL_ALERT });\n        document.body.appendChild(dialogElement);\n        let alertDialogObj;\n        let okButtonModel = [{\n                buttonModel: { isPrimary: true, content: 'OK' },\n                click: function () {\n                    this.hide();\n                }\n            }];\n        if (typeof (args) === 'string') {\n            alertDialogObj = createDialog({ content: args,\n                position: { X: 'center', Y: 'top' },\n                isModal: true, header: DLG_UTIL_DEFAULT_TITLE,\n                buttons: okButtonModel }, dialogElement);\n        }\n        else {\n            alertDialogObj = createDialog(alertOptions(args), dialogElement);\n        }\n        alertDialogObj.close = () => {\n            if (args && args.close) {\n                args.close.apply(alertDialogObj);\n            }\n            alertDialogObj.destroy();\n            if (alertDialogObj.element.classList.contains('e-dlg-modal')) {\n                alertDialogObj.element.parentElement.remove();\n                alertDialogObj.target.classList.remove(DLG_UTIL_ROOT);\n            }\n            else {\n                alertDialogObj.element.remove();\n            }\n        };\n        return alertDialogObj;\n    }\n    DialogUtility.alert = alert;\n    /**\n     * A confirm dialog displays a specified message along with ‘OK’ and ‘Cancel’ button.\n     * ```\n     * Eg : DialogUtility.confirm('Confirm dialog message');\n     *\n     * ```\n     */\n    /* istanbul ignore next */\n    function confirm(args) {\n        let dialogElement = createElement('div', { 'className': DLG_UTIL_CONFIRM });\n        document.body.appendChild(dialogElement);\n        let confirmDialogObj;\n        let okCancelButtonModel = [{\n                buttonModel: { isPrimary: true, content: 'OK' },\n                click: function () {\n                    this.hide();\n                }\n            }, {\n                buttonModel: { content: 'Cancel' },\n                click: function () {\n                    this.hide();\n                }\n            }];\n        if (typeof (args) === 'string') {\n            confirmDialogObj = createDialog({ position: { X: 'center', Y: 'top' }, content: args, isModal: true,\n                header: DLG_UTIL_DEFAULT_TITLE, buttons: okCancelButtonModel\n            }, dialogElement);\n        }\n        else {\n            confirmDialogObj = createDialog(confirmOptions(args), dialogElement);\n        }\n        confirmDialogObj.close = () => {\n            if (args && args.close) {\n                args.close.apply(confirmDialogObj);\n            }\n            confirmDialogObj.destroy();\n            if (confirmDialogObj.element.classList.contains('e-dlg-modal')) {\n                confirmDialogObj.element.parentElement.remove();\n                confirmDialogObj.target.classList.remove(DLG_UTIL_ROOT);\n            }\n            else {\n                confirmDialogObj.element.remove();\n            }\n        };\n        return confirmDialogObj;\n    }\n    DialogUtility.confirm = confirm;\n    function createDialog(options, element) {\n        let dialogObject = new Dialog(options);\n        dialogObject.appendTo(element);\n        return dialogObject;\n    }\n    function alertOptions(option) {\n        let options = {};\n        options.buttons = [];\n        options = formOptions(options, option);\n        options = setAlertButtonModel(options, option);\n        return options;\n    }\n    function confirmOptions(option) {\n        let options = {};\n        options.buttons = [];\n        options = formOptions(options, option);\n        options = setConfirmButtonModel(options, option);\n        return options;\n    }\n    function formOptions(options, option) {\n        options.header = !isNullOrUndefined(option.title) ? option.title : DLG_UTIL_DEFAULT_TITLE;\n        options.content = !isNullOrUndefined(option.content) ? option.content : '';\n        options.isModal = !isNullOrUndefined(option.isModal) ? option.isModal : true;\n        options.showCloseIcon = !isNullOrUndefined(option.showCloseIcon) ? option.showCloseIcon : false;\n        options.allowDragging = !isNullOrUndefined(option.isDraggable) ? option.isDraggable : false;\n        options.closeOnEscape = !isNullOrUndefined(option.closeOnEscape) ? option.closeOnEscape : false;\n        options.position = !isNullOrUndefined(option.position) ? option.position : { X: 'center', Y: 'top' };\n        options.animationSettings = !isNullOrUndefined(option.animationSettings) ? option.animationSettings :\n            { effect: 'Fade', duration: 400, delay: 0 };\n        options.cssClass = !isNullOrUndefined(option.cssClass) ? option.cssClass : '';\n        options.zIndex = !isNullOrUndefined(option.zIndex) ? option.zIndex : 1000;\n        options.open = !isNullOrUndefined(option.open) ? option.open : null;\n        return options;\n    }\n    function setAlertButtonModel(options, option) {\n        let alertButtonModel = [{\n                buttonModel: { isPrimary: true, content: 'OK' },\n                click: function () {\n                    this.hide();\n                }\n            }];\n        if (!isNullOrUndefined(option.okButton)) {\n            options.buttons[0] = formButtonModel(options.buttons[0], option.okButton, alertButtonModel[0]);\n        }\n        else {\n            options.buttons = alertButtonModel;\n        }\n        return options;\n    }\n    function setConfirmButtonModel(options, option) {\n        let okButtonModel = {\n            buttonModel: { isPrimary: true, content: 'OK' },\n            click: function () {\n                this.hide();\n            }\n        };\n        let cancelButtonModel = {\n            buttonModel: { content: 'Cancel' },\n            click: function () {\n                this.hide();\n            }\n        };\n        if (!isNullOrUndefined(option.okButton)) {\n            options.buttons[0] = formButtonModel(options.buttons[0], option.okButton, okButtonModel);\n        }\n        else {\n            options.buttons[0] = okButtonModel;\n        }\n        if (!isNullOrUndefined(option.cancelButton)) {\n            options.buttons[1] = formButtonModel(options.buttons[1], option.cancelButton, cancelButtonModel);\n        }\n        else {\n            options.buttons[1] = cancelButtonModel;\n        }\n        return options;\n    }\n    function formButtonModel(buttonModel, option, buttonPropModel) {\n        let buttonProps = buttonPropModel;\n        if (!isNullOrUndefined(option.text)) {\n            buttonProps.buttonModel.content = option.text;\n        }\n        if (!isNullOrUndefined(option.icon)) {\n            buttonProps.buttonModel.iconCss = option.icon;\n        }\n        if (!isNullOrUndefined(option.cssClass)) {\n            buttonProps.buttonModel.cssClass = option.cssClass;\n        }\n        if (!isNullOrUndefined(option.click)) {\n            buttonProps.click = option.click;\n        }\n        return buttonProps;\n    }\n})(DialogUtility || (DialogUtility = {}));\n\n/**\n * Dialog Component\n */\n\nvar __decorate$2 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nconst TOUCHEND_HIDE_DELAY = 1500;\nconst TAPHOLD_THRESHOLD = 500;\nconst SHOW_POINTER_TIP_GAP = 0;\nconst HIDE_POINTER_TIP_GAP = 8;\nconst MOUSE_TRAIL_GAP = 2;\nconst POINTER_ADJUST = 2;\nconst ROOT$1 = 'e-tooltip';\nconst RTL$1 = 'e-rtl';\nconst DEVICE$1 = 'e-bigger';\nconst ICON$1 = 'e-icons';\nconst CLOSE = 'e-tooltip-close';\nconst TOOLTIP_WRAP = 'e-tooltip-wrap';\nconst CONTENT = 'e-tip-content';\nconst ARROW_TIP = 'e-arrow-tip';\nconst ARROW_TIP_OUTER = 'e-arrow-tip-outer';\nconst ARROW_TIP_INNER = 'e-arrow-tip-inner';\nconst TIP_BOTTOM = 'e-tip-bottom';\nconst TIP_TOP = 'e-tip-top';\nconst TIP_LEFT = 'e-tip-left';\nconst TIP_RIGHT = 'e-tip-right';\nconst POPUP_ROOT$1 = 'e-popup';\nconst POPUP_OPEN = 'e-popup-open';\nconst POPUP_CLOSE = 'e-popup-close';\nconst POPUP_LIB = 'e-lib';\nconst HIDE_POPUP = 'e-hidden';\nclass Animation$1 extends ChildProperty {\n}\n__decorate$2([\n    Property({ effect: 'FadeIn', duration: 150, delay: 0 })\n], Animation$1.prototype, \"open\", void 0);\n__decorate$2([\n    Property({ effect: 'FadeOut', duration: 150, delay: 0 })\n], Animation$1.prototype, \"close\", void 0);\n/**\n * Represents the Tooltip component that displays a piece of information about the target element on mouse hover.\n * ```html\n * <div id=\"tooltip\">Show Tooltip</div>\n * ```\n * ```typescript\n * <script>\n *   var tooltipObj = new Tooltip({ content: 'Tooltip text' });\n *   tooltipObj.appendTo(\"#tooltip\");\n * </script>\n * ```\n */\nlet Tooltip = class Tooltip extends Component {\n    /**\n     * Constructor for creating the Tooltip Component\n     */\n    constructor(options, element) {\n        super(options, element);\n        this.isBlazorTooltip = false;\n        this.contentTargetValue = null;\n        this.contentEvent = null;\n        this.contentAnimation = null;\n    }\n    initialize() {\n        this.formatPosition();\n        if (!(this.isServerRender())) {\n            addClass([this.element], ROOT$1);\n        }\n    }\n    isServerRender() {\n        return isBlazor() && this.isServerRendered;\n    }\n    formatPosition() {\n        if (this.position.indexOf('Top') === 0 || this.position.indexOf('Bottom') === 0) {\n            [this.tooltipPositionY, this.tooltipPositionX] = this.position.split(/(?=[A-Z])/);\n        }\n        else {\n            [this.tooltipPositionX, this.tooltipPositionY] = this.position.split(/(?=[A-Z])/);\n        }\n    }\n    renderArrow() {\n        this.setTipClass(this.position);\n        if (!(this.isServerRender())) {\n            let tip = this.createElement('div', { className: ARROW_TIP + ' ' + this.tipClass });\n            tip.appendChild(this.createElement('div', { className: ARROW_TIP_OUTER + ' ' + this.tipClass }));\n            tip.appendChild(this.createElement('div', { className: ARROW_TIP_INNER + ' ' + this.tipClass }));\n            this.tooltipEle.appendChild(tip);\n        }\n        else {\n            let tip = this.tooltipEle.querySelector('.' + ARROW_TIP);\n            addClass([tip.querySelector('.' + ARROW_TIP_OUTER)], this.tipClass);\n            addClass([tip.querySelector('.' + ARROW_TIP_INNER)], this.tipClass);\n            this.tooltipEle.appendChild(tip);\n        }\n    }\n    setTipClass(position) {\n        if (position.indexOf('Right') === 0) {\n            this.tipClass = TIP_LEFT;\n        }\n        else if (position.indexOf('Bottom') === 0) {\n            this.tipClass = TIP_TOP;\n        }\n        else if (position.indexOf('Left') === 0) {\n            this.tipClass = TIP_RIGHT;\n        }\n        else {\n            this.tipClass = TIP_BOTTOM;\n        }\n    }\n    renderPopup(target) {\n        let elePos = this.mouseTrail ? { top: 0, left: 0 } : this.getTooltipPosition(target);\n        this.tooltipEle.classList.remove(POPUP_LIB);\n        this.popupObj = new Popup(this.tooltipEle, {\n            height: this.height,\n            width: this.width,\n            position: { X: elePos.left, Y: elePos.top },\n            enableRtl: this.enableRtl,\n            open: this.openPopupHandler.bind(this),\n            close: this.closePopupHandler.bind(this)\n        });\n    }\n    getTooltipPosition(target) {\n        this.tooltipEle.style.display = 'block';\n        let pos = calculatePosition(target, this.tooltipPositionX, this.tooltipPositionY);\n        let offsetPos = this.calculateTooltipOffset(this.position);\n        let elePos = this.collisionFlipFit(target, pos.left + offsetPos.left, pos.top + offsetPos.top);\n        this.tooltipEle.style.display = '';\n        return elePos;\n    }\n    reposition(target) {\n        let elePos = this.getTooltipPosition(target);\n        this.popupObj.position = { X: elePos.left, Y: elePos.top };\n        this.popupObj.dataBind();\n    }\n    openPopupHandler() {\n        if (!this.mouseTrail && this.needTemplateReposition()) {\n            this.reposition(this.findTarget());\n        }\n        this.trigger('afterOpen', this.tooltipEventArgs);\n    }\n    closePopupHandler() {\n        resetBlazorTemplate(this.element.id + 'content', 'Content');\n        this.clearTemplate(['content']);\n        this.clear();\n        this.trigger('afterClose', this.tooltipEventArgs);\n    }\n    calculateTooltipOffset(position) {\n        let pos = { top: 0, left: 0 };\n        let tooltipEleWidth = this.tooltipEle.offsetWidth;\n        let tooltipEleHeight = this.tooltipEle.offsetHeight;\n        let arrowEle = this.tooltipEle.querySelector('.' + ARROW_TIP);\n        let tipWidth = arrowEle ? arrowEle.offsetWidth : 0;\n        let tipHeight = arrowEle ? arrowEle.offsetHeight : 0;\n        let tipAdjust = (this.showTipPointer ? SHOW_POINTER_TIP_GAP : HIDE_POINTER_TIP_GAP);\n        let tipHeightAdjust = (tipHeight / 2) + POINTER_ADJUST + (this.tooltipEle.offsetHeight - this.tooltipEle.clientHeight);\n        let tipWidthAdjust = (tipWidth / 2) + POINTER_ADJUST + (this.tooltipEle.offsetWidth - this.tooltipEle.clientWidth);\n        if (this.mouseTrail) {\n            tipAdjust += MOUSE_TRAIL_GAP;\n        }\n        switch (position) {\n            case 'RightTop':\n                pos.left += tipWidth + tipAdjust;\n                pos.top -= tooltipEleHeight - tipHeightAdjust;\n                break;\n            case 'RightCenter':\n                pos.left += tipWidth + tipAdjust;\n                pos.top -= (tooltipEleHeight / 2);\n                break;\n            case 'RightBottom':\n                pos.left += tipWidth + tipAdjust;\n                pos.top -= (tipHeightAdjust);\n                break;\n            case 'BottomRight':\n                pos.top += (tipHeight + tipAdjust);\n                pos.left -= (tipWidthAdjust);\n                break;\n            case 'BottomCenter':\n                pos.top += (tipHeight + tipAdjust);\n                pos.left -= (tooltipEleWidth / 2);\n                break;\n            case 'BottomLeft':\n                pos.top += (tipHeight + tipAdjust);\n                pos.left -= (tooltipEleWidth - tipWidthAdjust);\n                break;\n            case 'LeftBottom':\n                pos.left -= (tipWidth + tooltipEleWidth + tipAdjust);\n                pos.top -= (tipHeightAdjust);\n                break;\n            case 'LeftCenter':\n                pos.left -= (tipWidth + tooltipEleWidth + tipAdjust);\n                pos.top -= (tooltipEleHeight / 2);\n                break;\n            case 'LeftTop':\n                pos.left -= (tipWidth + tooltipEleWidth + tipAdjust);\n                pos.top -= (tooltipEleHeight - tipHeightAdjust);\n                break;\n            case 'TopLeft':\n                pos.top -= (tooltipEleHeight + tipHeight + tipAdjust);\n                pos.left -= (tooltipEleWidth - tipWidthAdjust);\n                break;\n            case 'TopRight':\n                pos.top -= (tooltipEleHeight + tipHeight + tipAdjust);\n                pos.left -= (tipWidthAdjust);\n                break;\n            default:\n                pos.top -= (tooltipEleHeight + tipHeight + tipAdjust);\n                pos.left -= (tooltipEleWidth / 2);\n                break;\n        }\n        pos.left += this.offsetX;\n        pos.top += this.offsetY;\n        return pos;\n    }\n    updateTipPosition(position) {\n        let selEle = this.tooltipEle.querySelectorAll('.' + ARROW_TIP + ',.' + ARROW_TIP_OUTER + ',.' + ARROW_TIP_INNER);\n        let removeList = [TIP_BOTTOM, TIP_TOP, TIP_LEFT, TIP_RIGHT];\n        removeClass(selEle, removeList);\n        this.setTipClass(position);\n        addClass(selEle, this.tipClass);\n    }\n    adjustArrow(target, position, tooltipPositionX, tooltipPositionY) {\n        if (this.showTipPointer === false) {\n            return;\n        }\n        this.updateTipPosition(position);\n        let leftValue;\n        let topValue;\n        this.tooltipEle.style.display = 'block';\n        let tooltipWidth = this.tooltipEle.clientWidth;\n        let tooltipHeight = this.tooltipEle.clientHeight;\n        let arrowEle = this.tooltipEle.querySelector('.' + ARROW_TIP);\n        let arrowInnerELe = this.tooltipEle.querySelector('.' + ARROW_TIP_INNER);\n        let tipWidth = arrowEle.offsetWidth;\n        let tipHeight = arrowEle.offsetHeight;\n        this.tooltipEle.style.display = '';\n        if (this.tipClass === TIP_BOTTOM || this.tipClass === TIP_TOP) {\n            if (this.tipClass === TIP_BOTTOM) {\n                topValue = '99.9%';\n                // Arrow icon aligned -2px height from ArrowOuterTip div\n                arrowInnerELe.style.top = '-' + (tipHeight - 2) + 'px';\n            }\n            else {\n                topValue = -(tipHeight - 1) + 'px';\n                // Arrow icon aligned -6px height from ArrowOuterTip div\n                arrowInnerELe.style.top = '-' + (tipHeight - 6) + 'px';\n            }\n            if (target) {\n                let tipPosExclude = tooltipPositionX !== 'Center' || (tooltipWidth > target.offsetWidth) || this.mouseTrail;\n                if ((tipPosExclude && tooltipPositionX === 'Left') || (!tipPosExclude && this.tipPointerPosition === 'End')) {\n                    leftValue = (tooltipWidth - tipWidth - POINTER_ADJUST) + 'px';\n                }\n                else if ((tipPosExclude && tooltipPositionX === 'Right') || (!tipPosExclude && this.tipPointerPosition === 'Start')) {\n                    leftValue = POINTER_ADJUST + 'px';\n                }\n                else {\n                    leftValue = ((tooltipWidth / 2) - (tipWidth / 2)) + 'px';\n                }\n            }\n        }\n        else {\n            if (this.tipClass === TIP_RIGHT) {\n                leftValue = '99.9%';\n                // Arrow icon aligned -2px left from ArrowOuterTip div\n                arrowInnerELe.style.left = '-' + (tipWidth - 2) + 'px';\n            }\n            else {\n                leftValue = -(tipWidth - 1) + 'px';\n                // Arrow icon aligned -2px from ArrowOuterTip width\n                arrowInnerELe.style.left = (-(tipWidth) + (tipWidth - 2)) + 'px';\n            }\n            let tipPosExclude = tooltipPositionY !== 'Center' || (tooltipHeight > target.offsetHeight) || this.mouseTrail;\n            if ((tipPosExclude && tooltipPositionY === 'Top') || (!tipPosExclude && this.tipPointerPosition === 'End')) {\n                topValue = (tooltipHeight - tipHeight - POINTER_ADJUST) + 'px';\n            }\n            else if ((tipPosExclude && tooltipPositionY === 'Bottom') || (!tipPosExclude && this.tipPointerPosition === 'Start')) {\n                topValue = POINTER_ADJUST + 'px';\n            }\n            else {\n                topValue = ((tooltipHeight / 2) - (tipHeight / 2)) + 'px';\n            }\n        }\n        arrowEle.style.top = topValue;\n        arrowEle.style.left = leftValue;\n    }\n    renderContent(target) {\n        let tooltipContent = this.tooltipEle.querySelector('.' + CONTENT);\n        if (this.cssClass) {\n            addClass([this.tooltipEle], this.cssClass.split(' '));\n        }\n        if (target && !isNullOrUndefined(target.getAttribute('title'))) {\n            target.setAttribute('data-content', target.getAttribute('title'));\n            target.removeAttribute('title');\n        }\n        if (!isNullOrUndefined(this.content)) {\n            if (this.isBlazorTooltip || !(this.isServerRender())) {\n                tooltipContent.innerHTML = '';\n                if (this.content instanceof HTMLElement) {\n                    tooltipContent.appendChild(this.content);\n                }\n                else if (typeof this.content === 'string' && this.content.indexOf('<div>Blazor') < 0) {\n                    if (this.enableHtmlSanitizer) {\n                        this.setProperties({ content: SanitizeHtmlHelper.sanitize(this.content) }, true);\n                    }\n                    tooltipContent.innerHTML = this.content;\n                }\n                else {\n                    let templateFunction = compile(this.content);\n                    let tempArr = templateFunction({}, this, 'content', this.element.id + 'content', undefined, undefined, tooltipContent);\n                    if (tempArr) {\n                        append(tempArr, tooltipContent);\n                    }\n                    this.renderReactTemplates();\n                    if (typeof this.content === 'string' && this.content.indexOf('<div>Blazor') >= 0) {\n                        this.isBlazorTemplate = true;\n                        updateBlazorTemplate(this.element.id + 'content', 'Content', this);\n                    }\n                }\n            }\n        }\n        else {\n            if (target && !isNullOrUndefined(target.getAttribute('data-content'))) {\n                tooltipContent.innerHTML = target.getAttribute('data-content');\n            }\n        }\n    }\n    renderCloseIcon() {\n        if (!this.isSticky) {\n            return;\n        }\n        let tipClose = this.createElement('div', { className: ICON$1 + ' ' + CLOSE });\n        this.tooltipEle.appendChild(tipClose);\n        EventHandler.add(tipClose, Browser.touchStartEvent, this.onStickyClose, this);\n    }\n    addDescribedBy(target, id) {\n        let describedby = (target.getAttribute('aria-describedby') || '').split(/\\s+/);\n        if (describedby.indexOf(id) < 0) {\n            describedby.push(id);\n        }\n        attributes(target, { 'aria-describedby': describedby.join(' ').trim(), 'data-tooltip-id': id });\n    }\n    removeDescribedBy(target) {\n        let id = target.getAttribute('data-tooltip-id');\n        let describedby = (target.getAttribute('aria-describedby') || '').split(/\\s+/);\n        let index = describedby.indexOf(id);\n        if (index !== -1) {\n            describedby.splice(index, 1);\n        }\n        target.removeAttribute('data-tooltip-id');\n        let orgdescribedby = describedby.join(' ').trim();\n        if (orgdescribedby) {\n            target.setAttribute('aria-describedby', orgdescribedby);\n        }\n        else {\n            target.removeAttribute('aria-describedby');\n        }\n    }\n    tapHoldHandler(evt) {\n        clearTimeout(this.autoCloseTimer);\n        this.targetHover(evt.originalEvent);\n    }\n    touchEndHandler(e) {\n        if (this.isSticky) {\n            return;\n        }\n        let close = () => {\n            this.close();\n        };\n        this.autoCloseTimer = setTimeout(close, TOUCHEND_HIDE_DELAY);\n    }\n    targetClick(e) {\n        let target;\n        if (this.target) {\n            target = closest(e.target, this.target);\n        }\n        else {\n            target = this.element;\n        }\n        if (isNullOrUndefined(target)) {\n            return;\n        }\n        if (target.getAttribute('data-tooltip-id') === null) {\n            this.targetHover(e);\n        }\n        else if (!this.isSticky) {\n            this.hideTooltip(this.animation.close, e, target);\n        }\n    }\n    targetHover(e) {\n        let target;\n        if (this.target) {\n            target = closest(e.target, this.target);\n        }\n        else {\n            target = this.element;\n        }\n        if (isNullOrUndefined(target) || (target.getAttribute('data-tooltip-id') !== null && this.closeDelay === 0)) {\n            return;\n        }\n        let targetList = [].slice.call(document.querySelectorAll('[data-tooltip-id= ' + this.ctrlId + '_content]'));\n        for (let target of targetList) {\n            this.restoreElement(target);\n        }\n        this.showTooltip(target, this.animation.open, e);\n    }\n    showTooltip(target, showAnimation, e) {\n        clearTimeout(this.showTimer);\n        clearTimeout(this.hideTimer);\n        this.tooltipEventArgs = {\n            type: e ? e.type : null, cancel: false, target: target, event: e ? e : null,\n            element: this.tooltipEle, isInteracted: !isNullOrUndefined(e)\n        };\n        const observeCallback = (beforeRenderArgs) => {\n            this.beforeRenderCallback(beforeRenderArgs, target, e, showAnimation);\n        };\n        this.trigger('beforeRender', this.tooltipEventArgs, observeCallback.bind(this));\n    }\n    beforeRenderCallback(beforeRenderArgs, target, e, showAnimation) {\n        let isBlazorTooltipRendered = false;\n        if (beforeRenderArgs.cancel) {\n            this.isHidden = true;\n            this.clear();\n        }\n        else {\n            this.isHidden = false;\n            if (isNullOrUndefined(this.tooltipEle)) {\n                if (this.isServerRender()) {\n                    this.contentTargetValue = target;\n                    this.contentEvent = e;\n                    this.contentAnimation = showAnimation;\n                    let args = { 'enableTooltip': 'true' };\n                    // tslint:disable\n                    this.interopAdaptor.invokeMethodAsync('OnTooltipServerCall', args);\n                    // tslint:enable\n                    isBlazorTooltipRendered = true;\n                }\n                else {\n                    this.ctrlId = this.element.getAttribute('id') ?\n                        getUniqueID(this.element.getAttribute('id')) : getUniqueID('tooltip');\n                    this.tooltipEle = this.createElement('div', {\n                        className: TOOLTIP_WRAP + ' ' + POPUP_ROOT$1 + ' ' + POPUP_LIB, attrs: {\n                            role: 'tooltip', 'aria-hidden': 'false', 'id': this.ctrlId + '_content'\n                        }, styles: 'width:' +\n                            formatUnit(this.width) + ';height:' + formatUnit(this.height) + ';position:absolute;'\n                    });\n                    this.beforeRenderBlazor(target, this);\n                }\n                if (!isBlazorTooltipRendered) {\n                    this.afterRenderBlazor(target, e, showAnimation, this);\n                }\n            }\n            else {\n                if (this.isServerRender()) {\n                    addClass([this.tooltipEle], POPUP_OPEN);\n                    document.body.appendChild(this.tooltipEle);\n                    this.renderCloseIcon();\n                    this.renderPopup(target);\n                }\n                if (target) {\n                    this.adjustArrow(target, this.position, this.tooltipPositionX, this.tooltipPositionY);\n                    this.addDescribedBy(target, this.ctrlId + '_content');\n                    this.renderContent(target);\n                    Animation.stop(this.tooltipEle);\n                    this.reposition(target);\n                    this.afterRenderBlazor(target, e, showAnimation, this);\n                }\n            }\n        }\n    }\n    ;\n    contentUpdated(args) {\n        if (isNullOrUndefined(this.tooltipEle)) {\n            if (this.isServerRender()) {\n                this.ctrlId = this.element.id;\n                this.tooltipEle = document.querySelector('#' + this.ctrlId + '_content');\n                if (this.tooltipEle) {\n                    this.tooltipEle.setAttribute('style', 'width:' + formatUnit(this.width) +\n                        ';height:' + formatUnit(this.height) + ';position:absolute;');\n                    this.beforeRenderBlazor(this.contentTargetValue, this);\n                    this.afterRenderBlazor(this.contentTargetValue, this.contentEvent, this.contentAnimation, this);\n                    this.contentTargetValue = this.contentEvent = this.contentAnimation = null;\n                }\n            }\n        }\n    }\n    ;\n    beforeRenderBlazor(target, ctrlObj) {\n        if (target) {\n            if (Browser.isDevice) {\n                addClass([ctrlObj.tooltipEle], DEVICE$1);\n            }\n            if (ctrlObj.width !== 'auto') {\n                ctrlObj.tooltipEle.style.maxWidth = formatUnit(ctrlObj.width);\n            }\n            if (!(this.isServerRender())) {\n                ctrlObj.tooltipEle.appendChild(ctrlObj.createElement('div', { className: CONTENT }));\n            }\n            document.body.appendChild(ctrlObj.tooltipEle);\n            removeClass([ctrlObj.tooltipEle], HIDE_POPUP);\n            ctrlObj.addDescribedBy(target, ctrlObj.ctrlId + '_content');\n            ctrlObj.renderContent(target);\n            addClass([ctrlObj.tooltipEle], POPUP_OPEN);\n            if (ctrlObj.showTipPointer) {\n                ctrlObj.renderArrow();\n            }\n            ctrlObj.renderCloseIcon();\n            ctrlObj.renderPopup(target);\n            ctrlObj.adjustArrow(target, ctrlObj.position, ctrlObj.tooltipPositionX, ctrlObj.tooltipPositionY);\n            Animation.stop(ctrlObj.tooltipEle);\n            ctrlObj.reposition(target);\n        }\n    }\n    afterRenderBlazor(target, e, showAnimation, ctrlObj) {\n        if (target) {\n            removeClass([ctrlObj.tooltipEle], POPUP_OPEN);\n            addClass([ctrlObj.tooltipEle], POPUP_CLOSE);\n            ctrlObj.tooltipEventArgs = {\n                type: e ? e.type : null, cancel: false, target: target, event: e ? e : null,\n                element: ctrlObj.tooltipEle, isInteracted: !isNullOrUndefined(e)\n            };\n            if (ctrlObj.needTemplateReposition() && !ctrlObj.mouseTrail) {\n                ctrlObj.tooltipEle.style.display = 'none';\n            }\n            const observeCallback = (observedArgs) => {\n                ctrlObj.beforeOpenCallback(observedArgs, target, showAnimation, e);\n            };\n            ctrlObj.trigger('beforeOpen', ctrlObj.tooltipEventArgs, observeCallback.bind(ctrlObj));\n        }\n    }\n    beforeOpenCallback(observedArgs, target, showAnimation, e) {\n        if (observedArgs.cancel) {\n            this.isHidden = true;\n            this.clear();\n            this.restoreElement(target);\n        }\n        else {\n            let openAnimation = {\n                name: showAnimation.effect,\n                duration: showAnimation.duration,\n                delay: showAnimation.delay,\n                timingFunction: 'easeOut'\n            };\n            if (showAnimation.effect === 'None') {\n                openAnimation = undefined;\n            }\n            if (this.openDelay > 0) {\n                let show = () => {\n                    if (this.popupObj) {\n                        this.popupObj.show(openAnimation, target);\n                    }\n                };\n                this.showTimer = setTimeout(show, this.openDelay);\n            }\n            else {\n                if (this.popupObj) {\n                    this.popupObj.show(openAnimation, target);\n                }\n            }\n        }\n        if (e) {\n            this.wireMouseEvents(e, target);\n        }\n    }\n    needTemplateReposition() {\n        // tslint:disable-next-line:no-any\n        const tooltip = this;\n        return !isNullOrUndefined(tooltip.viewContainerRef)\n            && typeof tooltip.viewContainerRef !== 'string'\n            || (this.isServerRender()) && this.isBlazorTemplate;\n    }\n    checkCollision(target, x, y) {\n        let elePos = {\n            left: x, top: y, position: this.position,\n            horizontal: this.tooltipPositionX, vertical: this.tooltipPositionY\n        };\n        let affectedPos = isCollide(this.tooltipEle, (this.target ? this.element : null), x, y);\n        if (affectedPos.length > 0) {\n            elePos.horizontal = affectedPos.indexOf('left') >= 0 ? 'Right' : affectedPos.indexOf('right') >= 0 ? 'Left' :\n                this.tooltipPositionX;\n            elePos.vertical = affectedPos.indexOf('top') >= 0 ? 'Bottom' : affectedPos.indexOf('bottom') >= 0 ? 'Top' :\n                this.tooltipPositionY;\n        }\n        return elePos;\n    }\n    collisionFlipFit(target, x, y) {\n        let elePos = this.checkCollision(target, x, y);\n        let newpos = elePos.position;\n        if (this.tooltipPositionY !== elePos.vertical) {\n            newpos = ((this.position.indexOf('Bottom') === 0 || this.position.indexOf('Top') === 0) ?\n                elePos.vertical + this.tooltipPositionX : this.tooltipPositionX + elePos.vertical);\n        }\n        if (this.tooltipPositionX !== elePos.horizontal) {\n            if (newpos.indexOf('Left') === 0) {\n                elePos.vertical = (newpos === 'LeftTop' || newpos === 'LeftCenter') ? 'Top' : 'Bottom';\n                newpos = (elePos.vertical + 'Left');\n            }\n            if (newpos.indexOf('Right') === 0) {\n                elePos.vertical = (newpos === 'RightTop' || newpos === 'RightCenter') ? 'Top' : 'Bottom';\n                newpos = (elePos.vertical + 'Right');\n            }\n            elePos.horizontal = this.tooltipPositionX;\n        }\n        this.tooltipEventArgs = {\n            type: null, cancel: false, target: target, event: null,\n            element: this.tooltipEle, collidedPosition: newpos\n        };\n        this.trigger('beforeCollision', this.tooltipEventArgs);\n        if (elePos.position !== newpos) {\n            let pos = calculatePosition(target, elePos.horizontal, elePos.vertical);\n            this.adjustArrow(target, newpos, elePos.horizontal, elePos.vertical);\n            let offsetPos = this.calculateTooltipOffset(newpos);\n            offsetPos.top -= (('TopBottom'.indexOf(this.position.split(/(?=[A-Z])/)[0]) !== -1) &&\n                ('TopBottom'.indexOf(newpos.split(/(?=[A-Z])/)[0]) !== -1)) ? (2 * this.offsetY) : 0;\n            offsetPos.left -= (('RightLeft'.indexOf(this.position.split(/(?=[A-Z])/)[0]) !== -1) &&\n                ('RightLeft'.indexOf(newpos.split(/(?=[A-Z])/)[0]) !== -1)) ? (2 * this.offsetX) : 0;\n            elePos.position = newpos;\n            elePos.left = pos.left + offsetPos.left;\n            elePos.top = pos.top + offsetPos.top;\n        }\n        else {\n            this.adjustArrow(target, newpos, elePos.horizontal, elePos.vertical);\n        }\n        let eleOffset = { left: elePos.left, top: elePos.top };\n        let left = fit(this.tooltipEle, (this.target ? this.element : null), { X: true, Y: false }, eleOffset).left;\n        this.tooltipEle.style.display = 'block';\n        if (this.showTipPointer && (newpos.indexOf('Bottom') === 0 || newpos.indexOf('Top') === 0)) {\n            let arrowEle = this.tooltipEle.querySelector('.' + ARROW_TIP);\n            let arrowleft = parseInt(arrowEle.style.left, 10) - (left - elePos.left);\n            if (arrowleft < 0) {\n                arrowleft = 0;\n            }\n            else if ((arrowleft + arrowEle.offsetWidth) > this.tooltipEle.clientWidth) {\n                arrowleft = this.tooltipEle.clientWidth - arrowEle.offsetWidth;\n            }\n            arrowEle.style.left = arrowleft.toString() + 'px';\n        }\n        this.tooltipEle.style.display = '';\n        eleOffset.left = left;\n        return eleOffset;\n    }\n    hideTooltip(hideAnimation, e, targetElement) {\n        if (this.closeDelay > 0) {\n            clearTimeout(this.hideTimer);\n            clearTimeout(this.showTimer);\n            let hide = () => {\n                if (this.closeDelay && this.tooltipEle && this.isTooltipOpen) {\n                    return;\n                }\n                this.tooltipHide(hideAnimation, e, targetElement);\n            };\n            this.hideTimer = setTimeout(hide, this.closeDelay);\n        }\n        else {\n            this.tooltipHide(hideAnimation, e, targetElement);\n        }\n    }\n    tooltipHide(hideAnimation, e, targetElement) {\n        let target;\n        if (e) {\n            target = this.target ? (targetElement || e.target) : this.element;\n        }\n        else {\n            target = document.querySelector('[data-tooltip-id= ' + this.ctrlId + '_content]');\n        }\n        this.tooltipEventArgs = {\n            type: e ? e.type : null, cancel: false, target: target, event: e ? e : null,\n            element: this.tooltipEle, isInteracted: !isNullOrUndefined(e)\n        };\n        // this line commented for close the tooltip popup element even the target element destroyed in a page.\n        //if (isNullOrUndefined(target)) { return; }\n        this.trigger('beforeClose', this.tooltipEventArgs, (observedArgs) => {\n            if (!observedArgs.cancel) {\n                if (this.isServerRender()) {\n                    this.blazorHide(hideAnimation, target);\n                }\n                else {\n                    this.popupHide(hideAnimation, target);\n                }\n            }\n            else {\n                this.isHidden = false;\n            }\n        });\n    }\n    /* istanbul ignore next */\n    blazorHide(hideAnimation, target) {\n        let proxy = this;\n        let hide = () => {\n            proxy.popupHide(hideAnimation, target);\n        };\n        if (this.popupObj) {\n            this.popupHide(hideAnimation, target);\n        }\n        else {\n            setTimeout(hide, 200);\n        }\n    }\n    popupHide(hideAnimation, target) {\n        if (target) {\n            this.restoreElement(target);\n        }\n        this.isHidden = true;\n        let closeAnimation = {\n            name: hideAnimation.effect,\n            duration: hideAnimation.duration,\n            delay: hideAnimation.delay,\n            timingFunction: 'easeIn'\n        };\n        if (hideAnimation.effect === 'None') {\n            closeAnimation = undefined;\n        }\n        if (this.popupObj) {\n            this.popupObj.hide(closeAnimation);\n        }\n    }\n    restoreElement(target) {\n        this.unwireMouseEvents(target);\n        if (!isNullOrUndefined(target.getAttribute('data-content'))) {\n            target.setAttribute('title', target.getAttribute('data-content'));\n            target.removeAttribute('data-content');\n        }\n        this.removeDescribedBy(target);\n    }\n    clear() {\n        if (this.tooltipEle) {\n            removeClass([this.tooltipEle], POPUP_CLOSE);\n            addClass([this.tooltipEle], POPUP_OPEN);\n        }\n        if (this.isHidden) {\n            if (this.popupObj) {\n                this.popupObj.destroy();\n            }\n            if (this.isServerRender() && this.tooltipEle) {\n                this.tooltipEle.style.display = 'none';\n                let args = { 'enableTooltip': 'false' };\n                // tslint:disable\n                this.interopAdaptor.invokeMethodAsync('OnTooltipServerCall', args);\n                // tslint:enable\n                remove(this.tooltipEle);\n            }\n            else if (this.tooltipEle) {\n                remove(this.tooltipEle);\n            }\n            this.tooltipEle = null;\n            this.popupObj = null;\n        }\n    }\n    tooltipHover(e) {\n        if (this.tooltipEle) {\n            this.isTooltipOpen = true;\n        }\n    }\n    tooltipMouseOut(e) {\n        this.isTooltipOpen = false;\n        this.hideTooltip(this.animation.close, e, this.findTarget());\n    }\n    onMouseOut(e) {\n        const enteredElement = e.relatedTarget;\n        // don't close the tooltip only if it is tooltip content element\n        if (enteredElement && !this.mouseTrail) {\n            const checkForTooltipElement = closest(enteredElement, `.${TOOLTIP_WRAP}.${POPUP_LIB}.${POPUP_ROOT$1}`);\n            if (checkForTooltipElement) {\n                EventHandler.add(checkForTooltipElement, 'mouseleave', this.tooltipElementMouseOut, this);\n            }\n            else {\n                this.hideTooltip(this.animation.close, e, this.findTarget());\n                if (this.closeDelay === 0) {\n                    this.clear();\n                }\n            }\n        }\n        else {\n            this.hideTooltip(this.animation.close, e, this.findTarget());\n            this.clear();\n        }\n    }\n    tooltipElementMouseOut(e) {\n        this.hideTooltip(this.animation.close, e, this.findTarget());\n        EventHandler.remove(this.element, 'mouseleave', this.tooltipElementMouseOut);\n        this.clear();\n    }\n    onStickyClose(e) {\n        this.close();\n    }\n    onMouseMove(event) {\n        let eventPageX = 0;\n        let eventPageY = 0;\n        if (event.type.indexOf('touch') > -1) {\n            event.preventDefault();\n            eventPageX = event.touches[0].pageX;\n            eventPageY = event.touches[0].pageY;\n        }\n        else {\n            eventPageX = event.pageX;\n            eventPageY = event.pageY;\n        }\n        Animation.stop(this.tooltipEle);\n        removeClass([this.tooltipEle], POPUP_CLOSE);\n        addClass([this.tooltipEle], POPUP_OPEN);\n        this.adjustArrow(event.target, this.position, this.tooltipPositionX, this.tooltipPositionY);\n        let pos = this.calculateTooltipOffset(this.position);\n        let x = eventPageX + pos.left + this.offsetX;\n        let y = eventPageY + pos.top + this.offsetY;\n        let elePos = this.checkCollision(event.target, x, y);\n        if (this.tooltipPositionX !== elePos.horizontal || this.tooltipPositionY !== elePos.vertical) {\n            let newpos = (this.position.indexOf('Bottom') === 0 || this.position.indexOf('Top') === 0) ?\n                elePos.vertical + elePos.horizontal : elePos.horizontal + elePos.vertical;\n            elePos.position = newpos;\n            this.adjustArrow(event.target, elePos.position, elePos.horizontal, elePos.vertical);\n            let colpos = this.calculateTooltipOffset(elePos.position);\n            elePos.left = eventPageX + colpos.left - this.offsetX;\n            elePos.top = eventPageY + colpos.top - this.offsetY;\n        }\n        this.tooltipEle.style.left = elePos.left + 'px';\n        this.tooltipEle.style.top = elePos.top + 'px';\n    }\n    keyDown(event) {\n        if (this.tooltipEle && event.keyCode === 27) {\n            this.close();\n        }\n    }\n    touchEnd(e) {\n        if (this.tooltipEle && closest(e.target, '.' + ROOT$1) === null && !this.isSticky) {\n            this.close();\n        }\n    }\n    scrollHandler(e) {\n        if (this.tooltipEle) {\n            if (!(closest(e.target, `.${TOOLTIP_WRAP}.${POPUP_LIB}.${POPUP_ROOT$1}`))) {\n                this.close();\n            }\n        }\n    }\n    /**\n     * Core method that initializes the control rendering.\n     * @private\n     */\n    render() {\n        this.initialize();\n        this.wireEvents(this.opensOn);\n        this.renderComplete();\n    }\n    /**\n     * Initializes the values of private members.\n     * @private\n     */\n    preRender() {\n        this.tipClass = TIP_BOTTOM;\n        this.tooltipPositionX = 'Center';\n        this.tooltipPositionY = 'Top';\n        this.isHidden = true;\n    }\n    /**\n     * Binding events to the Tooltip element.\n     * @hidden\n     */\n    wireEvents(trigger) {\n        let triggerList = this.getTriggerList(trigger);\n        for (let opensOn of triggerList) {\n            if (opensOn === 'Custom') {\n                return;\n            }\n            if (opensOn === 'Focus') {\n                this.wireFocusEvents();\n            }\n            if (opensOn === 'Click') {\n                EventHandler.add(this.element, Browser.touchStartEvent, this.targetClick, this);\n            }\n            if (opensOn === 'Hover') {\n                if (Browser.isDevice) {\n                    this.touchModule = new Touch(this.element, {\n                        tapHoldThreshold: TAPHOLD_THRESHOLD,\n                        tapHold: this.tapHoldHandler.bind(this)\n                    });\n                    EventHandler.add(this.element, Browser.touchEndEvent, this.touchEndHandler, this);\n                }\n                else {\n                    EventHandler.add(this.element, 'mouseover', this.targetHover, this);\n                    if (this.isServerRender() && !this.isSticky) {\n                        EventHandler.add(this.element, 'mouseleave', this.onMouseOut, this);\n                    }\n                }\n            }\n        }\n        EventHandler.add(document, 'touchend', this.touchEnd, this);\n        EventHandler.add(document, 'scroll wheel', this.scrollHandler, this);\n        EventHandler.add(document, 'keydown', this.keyDown, this);\n    }\n    getTriggerList(trigger) {\n        if (trigger === 'Auto') {\n            trigger = (Browser.isDevice) ? 'Hover' : 'Hover Focus';\n        }\n        return trigger.split(' ');\n    }\n    wireFocusEvents() {\n        if (!isNullOrUndefined(this.target)) {\n            let targetList = [].slice.call(this.element.querySelectorAll(this.target));\n            for (let target of targetList) {\n                EventHandler.add(target, 'focus', this.targetHover, this);\n            }\n        }\n        else {\n            EventHandler.add(this.element, 'focus', this.targetHover, this);\n        }\n    }\n    wireMouseEvents(e, target) {\n        if (this.tooltipEle) {\n            if (!this.isSticky) {\n                if (e.type === 'focus') {\n                    EventHandler.add(target, 'blur', this.onMouseOut, this);\n                }\n                if (e.type === 'mouseover') {\n                    if (!this.isServerRender()) {\n                        EventHandler.add(target, 'mouseleave', this.onMouseOut, this);\n                    }\n                }\n                if (this.closeDelay) {\n                    EventHandler.add(this.tooltipEle, 'mouseenter', this.tooltipHover, this);\n                    EventHandler.add(this.tooltipEle, 'mouseleave', this.tooltipMouseOut, this);\n                }\n            }\n            if (this.mouseTrail) {\n                EventHandler.add(target, 'mousemove touchstart mouseenter', this.onMouseMove, this);\n            }\n        }\n    }\n    /**\n     * Unbinding events from the element on widget destroy.\n     * @hidden\n     */\n    unwireEvents(trigger) {\n        let triggerList = this.getTriggerList(trigger);\n        for (let opensOn of triggerList) {\n            if (opensOn === 'Custom') {\n                return;\n            }\n            if (opensOn === 'Focus') {\n                this.unwireFocusEvents();\n            }\n            if (opensOn === 'Click') {\n                EventHandler.remove(this.element, Browser.touchStartEvent, this.targetClick);\n            }\n            if (opensOn === 'Hover') {\n                if (Browser.isDevice) {\n                    if (this.touchModule) {\n                        this.touchModule.destroy();\n                    }\n                    EventHandler.remove(this.element, Browser.touchEndEvent, this.touchEndHandler);\n                }\n                else {\n                    EventHandler.remove(this.element, 'mouseover', this.targetHover);\n                    if (this.isServerRender() && !this.isSticky) {\n                        EventHandler.remove(this.element, 'mouseleave', this.onMouseOut);\n                    }\n                }\n            }\n        }\n        EventHandler.remove(document, 'touchend', this.touchEnd);\n        EventHandler.remove(document, 'scroll wheel', this.scrollHandler);\n        EventHandler.remove(document, 'keydown', this.keyDown);\n    }\n    unwireFocusEvents() {\n        if (!isNullOrUndefined(this.target)) {\n            let targetList = [].slice.call(this.element.querySelectorAll(this.target));\n            for (let target of targetList) {\n                EventHandler.remove(target, 'focus', this.targetHover);\n            }\n        }\n        else {\n            EventHandler.remove(this.element, 'focus', this.targetHover);\n        }\n    }\n    unwireMouseEvents(target) {\n        if (!this.isSticky) {\n            let triggerList = this.getTriggerList(this.opensOn);\n            for (let opensOn of triggerList) {\n                if (opensOn === 'Focus') {\n                    EventHandler.remove(target, 'blur', this.onMouseOut);\n                }\n                if (opensOn === 'Hover' && !Browser.isDevice) {\n                    if (!this.isServerRender()) {\n                        EventHandler.remove(target, 'mouseleave', this.onMouseOut);\n                    }\n                }\n            }\n            if (this.closeDelay) {\n                EventHandler.remove(target, 'mouseenter', this.tooltipHover);\n                EventHandler.remove(target, 'mouseleave', this.tooltipMouseOut);\n            }\n        }\n        if (this.mouseTrail) {\n            EventHandler.remove(target, 'mousemove touchstart mouseenter', this.onMouseMove);\n        }\n    }\n    findTarget() {\n        let target = document.querySelector('[data-tooltip-id= ' + this.ctrlId + '_content]');\n        return target;\n    }\n    /**\n     * Core method to return the component name.\n     * @private\n     */\n    getModuleName() {\n        return 'tooltip';\n    }\n    /**\n     * Returns the properties to be maintained in the persisted state.\n     * @private\n     */\n    getPersistData() {\n        return this.addOnPersist([]);\n    }\n    /**\n     * Called internally, if any of the property value changed.\n     * @private\n     */\n    onPropertyChanged(newProp, oldProp) {\n        let targetElement = this.findTarget();\n        for (let prop of Object.keys(newProp)) {\n            switch (prop) {\n                case 'width':\n                    if (this.tooltipEle && targetElement) {\n                        this.tooltipEle.style.width = this.tooltipEle.style.maxWidth = formatUnit(newProp.width);\n                        this.reposition(targetElement);\n                    }\n                    break;\n                case 'height':\n                    if (this.tooltipEle && targetElement) {\n                        this.tooltipEle.style.height = formatUnit(newProp.height);\n                        this.reposition(targetElement);\n                    }\n                    break;\n                case 'content':\n                    if (this.tooltipEle) {\n                        if (this.isServerRender()) {\n                            this.isBlazorTooltip = true;\n                        }\n                        this.renderContent();\n                    }\n                    else if (this.isServerRender()) {\n                        let args = { 'content': newProp.content };\n                        // tslint:disable\n                        this.interopAdaptor.invokeMethodAsync('OnTooltipServerCall', args);\n                        // tslint:enable\n                    }\n                    break;\n                case 'opensOn':\n                    this.unwireEvents(oldProp.opensOn);\n                    this.wireEvents(newProp.opensOn);\n                    break;\n                case 'position':\n                    this.formatPosition();\n                    if (this.tooltipEle && targetElement) {\n                        let arrowInnerELe = this.tooltipEle.querySelector('.' + ARROW_TIP_INNER);\n                        arrowInnerELe.style.top = arrowInnerELe.style.left = null;\n                        this.reposition(targetElement);\n                    }\n                    break;\n                case 'tipPointerPosition':\n                    if (this.tooltipEle && targetElement) {\n                        this.reposition(targetElement);\n                    }\n                    break;\n                case 'offsetX':\n                    if (this.tooltipEle) {\n                        let x = newProp.offsetX - oldProp.offsetX;\n                        this.tooltipEle.style.left = (parseInt(this.tooltipEle.style.left, 10) + (x)).toString() + 'px';\n                    }\n                    break;\n                case 'offsetY':\n                    if (this.tooltipEle) {\n                        let y = newProp.offsetY - oldProp.offsetY;\n                        this.tooltipEle.style.top = (parseInt(this.tooltipEle.style.top, 10) + (y)).toString() + 'px';\n                    }\n                    break;\n                case 'cssClass':\n                    if (this.tooltipEle) {\n                        if (oldProp.cssClass) {\n                            removeClass([this.tooltipEle], oldProp.cssClass.split(' '));\n                        }\n                        if (newProp.cssClass) {\n                            addClass([this.tooltipEle], newProp.cssClass.split(' '));\n                        }\n                    }\n                    break;\n                case 'enableRtl':\n                    if (this.tooltipEle) {\n                        if (this.enableRtl) {\n                            addClass([this.tooltipEle], RTL$1);\n                        }\n                        else {\n                            removeClass([this.tooltipEle], RTL$1);\n                        }\n                    }\n                    break;\n            }\n        }\n    }\n    /**\n     * It is used to show the Tooltip on the specified target with specific animation settings.\n     * @param element Target element where the Tooltip is to be displayed. (It is an optional parameter)\n     * @param animation Sets the specific animation, while showing the Tooltip on the screen. (It is an optional parameter)\n     * @return {void}\n     */\n    open(element, animation) {\n        if (isNullOrUndefined(animation)) {\n            animation = this.animation.open;\n        }\n        if (isNullOrUndefined(element)) {\n            element = this.element;\n        }\n        if (element.style.display === 'none') {\n            return;\n        }\n        this.showTooltip(element, animation);\n    }\n    /**\n     * It is used to hide the Tooltip with specific animation effect.\n     * @param animation Sets the specific animation when hiding Tooltip from the screen. (It is an optional parameter)\n     * @return {void}\n     */\n    close(animation) {\n        if (!animation) {\n            animation = this.animation.close;\n        }\n        this.hideTooltip(animation);\n    }\n    /**\n     * It is used to refresh the Tooltip content and its position.\n     * @param target Target element where the Tooltip content or position needs to be refreshed.\n     * @return {void}\n     */\n    refresh(target) {\n        if (this.tooltipEle) {\n            this.renderContent(target);\n        }\n        if (this.popupObj && target) {\n            this.reposition(target);\n        }\n    }\n    /**\n     * It is used to destroy the Tooltip component.\n     * @method destroy\n     * @return {void}\n     * @memberof Tooltip\n     */\n    destroy() {\n        if (!this.isServerRender()) {\n            super.destroy();\n            if (this.tooltipEle) {\n                remove(this.tooltipEle);\n            }\n        }\n        if (this.isServerRender() && this.tooltipEle) {\n            let placeholder = document.querySelector('#' + this.ctrlId + '_content_placeholder');\n            if (placeholder) {\n                placeholder.appendChild(this.tooltipEle);\n            }\n        }\n        if (this.popupObj) {\n            this.popupObj.destroy();\n        }\n        removeClass([this.element], ROOT$1);\n        this.unwireEvents(this.opensOn);\n        this.unwireMouseEvents(this.element);\n        this.tooltipEle = null;\n        this.popupObj = null;\n    }\n};\n__decorate$2([\n    Property('auto')\n], Tooltip.prototype, \"width\", void 0);\n__decorate$2([\n    Property('auto')\n], Tooltip.prototype, \"height\", void 0);\n__decorate$2([\n    Property()\n], Tooltip.prototype, \"content\", void 0);\n__decorate$2([\n    Property()\n], Tooltip.prototype, \"target\", void 0);\n__decorate$2([\n    Property('TopCenter')\n], Tooltip.prototype, \"position\", void 0);\n__decorate$2([\n    Property(0)\n], Tooltip.prototype, \"offsetX\", void 0);\n__decorate$2([\n    Property(0)\n], Tooltip.prototype, \"offsetY\", void 0);\n__decorate$2([\n    Property(true)\n], Tooltip.prototype, \"showTipPointer\", void 0);\n__decorate$2([\n    Property('Auto')\n], Tooltip.prototype, \"tipPointerPosition\", void 0);\n__decorate$2([\n    Property('Auto')\n], Tooltip.prototype, \"opensOn\", void 0);\n__decorate$2([\n    Property(false)\n], Tooltip.prototype, \"mouseTrail\", void 0);\n__decorate$2([\n    Property(false)\n], Tooltip.prototype, \"isSticky\", void 0);\n__decorate$2([\n    Complex({}, Animation$1)\n], Tooltip.prototype, \"animation\", void 0);\n__decorate$2([\n    Property(0)\n], Tooltip.prototype, \"openDelay\", void 0);\n__decorate$2([\n    Property(0)\n], Tooltip.prototype, \"closeDelay\", void 0);\n__decorate$2([\n    Property()\n], Tooltip.prototype, \"cssClass\", void 0);\n__decorate$2([\n    Property(false)\n], Tooltip.prototype, \"enableHtmlSanitizer\", void 0);\n__decorate$2([\n    Event()\n], Tooltip.prototype, \"beforeRender\", void 0);\n__decorate$2([\n    Event()\n], Tooltip.prototype, \"beforeOpen\", void 0);\n__decorate$2([\n    Event()\n], Tooltip.prototype, \"afterOpen\", void 0);\n__decorate$2([\n    Event()\n], Tooltip.prototype, \"beforeClose\", void 0);\n__decorate$2([\n    Event()\n], Tooltip.prototype, \"afterClose\", void 0);\n__decorate$2([\n    Event()\n], Tooltip.prototype, \"beforeCollision\", void 0);\n__decorate$2([\n    Event()\n], Tooltip.prototype, \"created\", void 0);\n__decorate$2([\n    Event()\n], Tooltip.prototype, \"destroyed\", void 0);\nTooltip = __decorate$2([\n    NotifyPropertyChanges\n], Tooltip);\n\n/**\n * Tooltip modules\n */\n\nlet globalTimeOut = {};\nlet spinTemplate = null;\nlet spinCSSClass = null;\nconst DEFT_MAT_WIDTH = 30;\nconst DEFT_FAB_WIDTH = 30;\nconst DEFT_BOOT_WIDTH = 30;\nconst DEFT_BOOT4_WIDTH = 36;\nconst CLS_SHOWSPIN = 'e-spin-show';\nconst CLS_HIDESPIN = 'e-spin-hide';\nconst CLS_MATERIALSPIN = 'e-spin-material';\nconst CLS_FABRICSPIN = 'e-spin-fabric';\nconst CLS_BOOTSPIN = 'e-spin-bootstrap';\nconst CLS_BOOT4SPIN = 'e-spin-bootstrap4';\nconst CLS_HIGHCONTRASTSPIN = 'e-spin-high-contrast';\nconst CLS_SPINWRAP = 'e-spinner-pane';\nconst CLS_SPININWRAP = 'e-spinner-inner';\nconst CLS_SPINCIRCLE = 'e-path-circle';\nconst CLS_SPINARC = 'e-path-arc';\nconst CLS_SPINLABEL = 'e-spin-label';\nconst CLS_SPINTEMPLATE = 'e-spin-template';\n/**\n * Function to change the Spinners in a page globally from application end.\n * ```\n * E.g : blazorSpinner({ action: \"Create\", options: {target: targetElement}, type: \"\" });\n * ```\n * @param args\n * @private\n */\nfunction Spinner(action, options, target, type) {\n    switch (action) {\n        case 'Create':\n            let element = document.querySelector(options.target);\n            let args = { type: type, target: element, cssClass: options.cssClass,\n                label: options.label, width: options.width };\n            createSpinner(args);\n            break;\n        case 'Show':\n            showSpinner(document.querySelector(target));\n            break;\n        case 'Hide':\n            hideSpinner(document.querySelector(target));\n            break;\n        case 'Set':\n            let setArgs = { cssClass: options.cssClass, type: type };\n            setSpinner(setArgs);\n            break;\n    }\n}\n/**\n * Create a spinner for the specified target element.\n * ```\n * E.g : createSpinner({ target: targetElement, width: '34px', label: 'Loading..' });\n * ```\n * @param args\n * @private\n */\nfunction createSpinner(args, internalCreateElement) {\n    if (!args.target) {\n        return;\n    }\n    let radius;\n    let makeElement = !isNullOrUndefined(internalCreateElement) ? internalCreateElement : createElement;\n    let container = create_spinner_container(args.target, makeElement);\n    if (!isNullOrUndefined(args.cssClass)) {\n        container.wrap.classList.add(args.cssClass);\n    }\n    if (!isNullOrUndefined(args.template) || !isNullOrUndefined(spinTemplate)) {\n        let template = !isNullOrUndefined(args.template) ? args.template : spinTemplate;\n        container.wrap.classList.add(CLS_SPINTEMPLATE);\n        replaceContent(container.wrap, template, spinCSSClass);\n    }\n    else {\n        let theme = !isNullOrUndefined(args.type) ? args.type : getTheme(container.wrap);\n        let width = !isNullOrUndefined(args.width) ? args.width : undefined;\n        radius = calculateRadius(width, theme);\n        setTheme(theme, container.wrap, radius, makeElement);\n        if (!isNullOrUndefined(args.label)) {\n            createLabel(container.inner_wrap, args.label, makeElement);\n        }\n    }\n    container.wrap.classList.add(CLS_HIDESPIN);\n    container = null;\n}\nfunction createLabel(container, label, makeElement) {\n    let labelEle = makeElement('div', {});\n    labelEle.classList.add(CLS_SPINLABEL);\n    labelEle.textContent = label;\n    container.appendChild(labelEle);\n    return labelEle;\n}\nfunction createMaterialSpinner(container, radius, makeElement) {\n    let uniqueID = random_generator();\n    globalTimeOut[uniqueID] = { timeOut: 0, type: 'Material', radius: radius };\n    create_material_element(container, uniqueID, makeElement, CLS_MATERIALSPIN);\n    mat_calculate_attributes(radius, container, 'Material', CLS_MATERIALSPIN);\n}\nfunction createBootstrap4Spinner(container, radius, makeElement) {\n    let uniqueID = random_generator();\n    globalTimeOut[uniqueID] = { timeOut: 0, type: 'Bootstrap4', radius: radius };\n    create_material_element(container, uniqueID, makeElement, CLS_BOOT4SPIN);\n    mat_calculate_attributes(radius, container, 'Bootstrap4', CLS_BOOT4SPIN);\n}\nfunction startMatAnimate(container, uniqueID, radius) {\n    let globalObject = {};\n    let timeOutVar = 0;\n    globalTimeOut[uniqueID].timeOut = 0;\n    globalObject[uniqueID] = globalVariables(uniqueID, radius, 0, 0);\n    let spinnerInfo = { uniqueID: uniqueID, container: container, globalInfo: globalObject, timeOutVar: timeOutVar };\n    animateMaterial(spinnerInfo);\n}\nfunction createFabricSpinner(container, radius, makeElement) {\n    let uniqueID = random_generator();\n    globalTimeOut[uniqueID] = { timeOut: 0, type: 'Fabric', radius: radius };\n    create_fabric_element(container, uniqueID, CLS_FABRICSPIN, makeElement);\n    fb_calculate_attributes(radius, container, CLS_FABRICSPIN);\n}\nfunction createHighContrastSpinner(container, radius, makeElement) {\n    let uniqueID = random_generator();\n    globalTimeOut[uniqueID] = { timeOut: 0, type: 'HighContrast', radius: radius };\n    create_fabric_element(container, uniqueID, CLS_HIGHCONTRASTSPIN, makeElement);\n    fb_calculate_attributes(radius, container, CLS_HIGHCONTRASTSPIN);\n}\nfunction getTheme(container) {\n    let theme = window.getComputedStyle(container, ':after').getPropertyValue('content');\n    return theme.replace(/['\"]+/g, '');\n}\nfunction setTheme(theme, container, radius, makeElement) {\n    let innerContainer = container.querySelector('.' + CLS_SPININWRAP);\n    let svg = innerContainer.querySelector('svg');\n    if (!isNullOrUndefined(svg)) {\n        innerContainer.removeChild(svg);\n    }\n    switch (theme) {\n        case 'Material':\n            createMaterialSpinner(innerContainer, radius, makeElement);\n            break;\n        case 'Fabric':\n            createFabricSpinner(innerContainer, radius, makeElement);\n            break;\n        case 'Bootstrap':\n            createBootstrapSpinner(innerContainer, radius, makeElement);\n            break;\n        case 'HighContrast':\n            createHighContrastSpinner(innerContainer, radius, makeElement);\n            break;\n        case 'Bootstrap4':\n            createBootstrap4Spinner(innerContainer, radius, makeElement);\n            break;\n    }\n}\nfunction createBootstrapSpinner(innerContainer, radius, makeElement) {\n    let uniqueID = random_generator();\n    globalTimeOut[uniqueID] = { timeOut: 0, type: 'Bootstrap', radius: radius };\n    create_bootstrap_element(innerContainer, uniqueID, makeElement);\n    boot_calculate_attributes(innerContainer, radius);\n}\nfunction create_bootstrap_element(innerContainer, uniqueID, makeElement) {\n    let svgBoot = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n    let viewBoxValue = 64;\n    let trans = 32;\n    let defaultRadius = 2;\n    svgBoot.setAttribute('id', uniqueID);\n    svgBoot.setAttribute('class', CLS_BOOTSPIN);\n    svgBoot.setAttribute('viewBox', '0 0 ' + viewBoxValue + ' ' + viewBoxValue);\n    innerContainer.insertBefore(svgBoot, innerContainer.firstChild);\n    for (let item = 0; item <= 7; item++) {\n        let bootCircle = document.createElementNS('http://www.w3.org/2000/svg', 'circle');\n        bootCircle.setAttribute('class', CLS_SPINCIRCLE + '_' + item);\n        bootCircle.setAttribute('r', defaultRadius + '');\n        bootCircle.setAttribute('transform', 'translate(' + trans + ',' + trans + ')');\n        svgBoot.appendChild(bootCircle);\n    }\n}\nfunction boot_calculate_attributes(innerContainer, radius) {\n    let svg = innerContainer.querySelector('svg.e-spin-bootstrap');\n    svg.style.width = svg.style.height = radius + 'px';\n    let x = 0;\n    let y = 0;\n    let rad = 24;\n    let startArc = 90;\n    for (let item = 0; item <= 7; item++) {\n        let start = defineArcPoints(x, y, rad, startArc);\n        let circleEle = svg.querySelector('.' + CLS_SPINCIRCLE + '_' + item);\n        circleEle.setAttribute('cx', start.x + '');\n        circleEle.setAttribute('cy', start.y + '');\n        startArc = startArc >= 360 ? 0 : startArc;\n        startArc = startArc + 45;\n    }\n}\nfunction generateSeries(begin, stop) {\n    let series = [];\n    let start = begin;\n    let end = stop;\n    let increment = false;\n    let count = 1;\n    formSeries(start);\n    function formSeries(i) {\n        series.push(i);\n        if (i !== end || count === 1) {\n            if (i <= start && i > 1 && !increment) {\n                i = parseFloat((i - 0.2).toFixed(2));\n            }\n            else if (i === 1) {\n                i = 7;\n                i = parseFloat((i + 0.2).toFixed(2));\n                increment = true;\n            }\n            else if (i < 8 && increment) {\n                i = parseFloat((i + 0.2).toFixed(2));\n                if (i === 8) {\n                    increment = false;\n                }\n            }\n            else if (i <= 8 && !increment) {\n                i = parseFloat((i - 0.2).toFixed(2));\n            }\n            ++count;\n            formSeries(i);\n        }\n    }\n    return series;\n}\nfunction animateBootstrap(innerContainer) {\n    let svg = innerContainer.querySelector('svg.e-spin-bootstrap');\n    let id = svg.getAttribute('id');\n    for (let i = 1; i <= 8; i++) {\n        let circleEle = (innerContainer.getElementsByClassName('e-path-circle_' +\n            (i === 8 ? 0 : i))[0]);\n        rotation(circleEle, i, i, generateSeries(i, i), id);\n    }\n    function rotation(circle, start, end, series, id) {\n        let count = 0;\n        boot_animate(start);\n        function boot_animate(radius) {\n            if (globalTimeOut[id].isAnimate) {\n                ++count;\n                circle.setAttribute('r', radius + '');\n                if (count >= series.length) {\n                    count = 0;\n                }\n                globalTimeOut[id].timeOut = setTimeout(boot_animate.bind(null, series[count]), 18);\n            }\n        }\n    }\n}\nfunction replaceContent(container, template, cssClass) {\n    if (!isNullOrUndefined(cssClass)) {\n        container.classList.add(cssClass);\n    }\n    let inner = container.querySelector('.e-spinner-inner');\n    inner.innerHTML = template;\n}\nfunction calculateRadius(width, theme) {\n    let defaultSize;\n    switch (theme) {\n        case 'Material':\n            defaultSize = DEFT_MAT_WIDTH;\n            break;\n        case 'Fabric':\n            defaultSize = DEFT_FAB_WIDTH;\n            break;\n        case 'Bootstrap4':\n            defaultSize = DEFT_BOOT4_WIDTH;\n            break;\n        default:\n            defaultSize = DEFT_BOOT_WIDTH;\n    }\n    width = width ? parseFloat(width + '') : defaultSize;\n    return theme === 'Bootstrap' ? width : width / 2;\n}\nfunction globalVariables(id, radius, count, previousId) {\n    return {\n        radius: radius,\n        count: count,\n        previousId: previousId\n    };\n}\nfunction random_generator() {\n    let random = '';\n    let combine = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    for (let i = 0; i < 5; i++) {\n        random += combine.charAt(Math.floor(Math.random() * combine.length));\n    }\n    return random;\n}\nfunction create_fabric_element(innerCon, uniqueID, themeClass, makeElement) {\n    let svgFabric = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n    svgFabric.setAttribute('id', uniqueID);\n    svgFabric.setAttribute('class', themeClass);\n    let fabricCirclePath = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n    fabricCirclePath.setAttribute('class', CLS_SPINCIRCLE);\n    let fabricCircleArc = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n    fabricCircleArc.setAttribute('class', CLS_SPINARC);\n    innerCon.insertBefore(svgFabric, innerCon.firstChild);\n    svgFabric.appendChild(fabricCirclePath);\n    svgFabric.appendChild(fabricCircleArc);\n}\nfunction create_material_element(innerContainer, uniqueID, makeElement, cls) {\n    let svgMaterial = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n    svgMaterial.setAttribute('class', cls);\n    svgMaterial.setAttribute('id', uniqueID);\n    let matCirclePath = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n    matCirclePath.setAttribute('class', CLS_SPINCIRCLE);\n    innerContainer.insertBefore(svgMaterial, innerContainer.firstChild);\n    svgMaterial.appendChild(matCirclePath);\n}\nfunction create_spinner_container(target, makeElement) {\n    let spinnerContainer = makeElement('div', {});\n    spinnerContainer.classList.add(CLS_SPINWRAP);\n    let spinnerInnerContainer = makeElement('div', {});\n    spinnerInnerContainer.classList.add(CLS_SPININWRAP);\n    target.appendChild(spinnerContainer);\n    spinnerContainer.appendChild(spinnerInnerContainer);\n    return { wrap: spinnerContainer, inner_wrap: spinnerInnerContainer };\n}\nfunction animateMaterial(spinnerInfo) {\n    let start = 1;\n    let end = 149;\n    let duration = 1333;\n    let max = 75;\n    createCircle(start, end, easeAnimation, duration, spinnerInfo.globalInfo[spinnerInfo.uniqueID].count, max, spinnerInfo);\n    spinnerInfo.globalInfo[spinnerInfo.uniqueID].count = ++spinnerInfo.globalInfo[spinnerInfo.uniqueID].count % 4;\n}\nfunction createCircle(start, end, easing, duration, count, max, spinnerInfo) {\n    let id = ++spinnerInfo.globalInfo[spinnerInfo.uniqueID].previousId;\n    let startTime = new Date().getTime();\n    let change = end - start;\n    let diameter = getSize((spinnerInfo.globalInfo[spinnerInfo.uniqueID].radius * 2) + '');\n    let strokeSize = getStrokeSize(diameter);\n    let rotate = -90 * (spinnerInfo.globalInfo[spinnerInfo.uniqueID].count || 0);\n    mat_animation(spinnerInfo);\n    function mat_animation(spinnerInfo) {\n        let currentTime = Math.max(0, Math.min(new Date().getTime() - startTime, duration));\n        updatePath(easing(currentTime, start, change, duration), spinnerInfo.container);\n        if (id === spinnerInfo.globalInfo[spinnerInfo.uniqueID].previousId && currentTime < duration) {\n            globalTimeOut[spinnerInfo.uniqueID].timeOut = setTimeout(mat_animation.bind(null, spinnerInfo), 1);\n        }\n        else {\n            animateMaterial(spinnerInfo);\n        }\n    }\n    function updatePath(value, container) {\n        if ((!isNullOrUndefined(container.querySelector('svg.e-spin-material')))\n            && (!isNullOrUndefined(container.querySelector('svg.e-spin-material').querySelector('path.e-path-circle')))) {\n            let svg = container.querySelector('svg.e-spin-material');\n            let path = svg.querySelector('path.e-path-circle');\n            path.setAttribute('stroke-dashoffset', getDashOffset(diameter, strokeSize, value, max) + '');\n            path.setAttribute('transform', 'rotate(' + (rotate) + ' ' + diameter / 2 + ' ' + diameter / 2 + ')');\n        }\n    }\n}\nfunction mat_calculate_attributes(radius, container, type, cls) {\n    let diameter = radius * 2;\n    let svg = container.querySelector('svg.' + cls);\n    let path = svg.querySelector('path.e-path-circle');\n    let strokeSize = getStrokeSize(diameter);\n    let transformOrigin = (diameter / 2) + 'px';\n    svg.setAttribute('viewBox', '0 0 ' + diameter + ' ' + diameter);\n    svg.style.width = svg.style.height = diameter + 'px';\n    svg.style.transformOrigin = transformOrigin + ' ' + transformOrigin + ' ' + transformOrigin;\n    path.setAttribute('d', drawArc(diameter, strokeSize));\n    if (type === 'Material') {\n        path.setAttribute('stroke-width', strokeSize + '');\n        path.setAttribute('stroke-dasharray', ((diameter - strokeSize) * Math.PI * 0.75) + '');\n        path.setAttribute('stroke-dashoffset', getDashOffset(diameter, strokeSize, 1, 75) + '');\n    }\n}\nfunction getSize(value) {\n    let parsed = parseFloat(value);\n    return parsed;\n}\nfunction drawArc(diameter, strokeSize) {\n    let radius = diameter / 2;\n    let offset = strokeSize / 2;\n    return 'M' + radius + ',' + offset\n        + 'A' + (radius - offset) + ',' + (radius - offset) + ' 0 1 1 ' + offset + ',' + radius;\n}\nfunction getStrokeSize(diameter) {\n    return 10 / 100 * diameter;\n}\nfunction getDashOffset(diameter, strokeSize, value, max) {\n    return (diameter - strokeSize) * Math.PI * ((3 * (max) / 100) - (value / 100));\n}\nfunction easeAnimation(current, start, change, duration) {\n    let timestamp = (current /= duration) * current;\n    let timecount = timestamp * current;\n    return start + change * (6 * timecount * timestamp + -15 * timestamp * timestamp + 10 * timecount);\n}\nfunction fb_calculate_attributes(radius, innerConainer, trgClass) {\n    let centerX = radius;\n    let centerY = radius;\n    let diameter = radius * 2;\n    let startArc = 315;\n    let endArc = 45;\n    let svg = innerConainer.querySelector('.' + trgClass);\n    let circle = svg.querySelector('.e-path-circle');\n    let path = svg.querySelector('.e-path-arc');\n    let transformOrigin = (diameter / 2) + 'px';\n    circle.setAttribute('d', defineCircle(centerX, centerY, radius));\n    path.setAttribute('d', defineArc(centerX, centerY, radius, startArc, endArc));\n    svg.setAttribute('viewBox', '0 0 ' + diameter + ' ' + diameter);\n    svg.style.transformOrigin = transformOrigin + ' ' + transformOrigin + ' ' + transformOrigin;\n    svg.style.width = svg.style.height = diameter + 'px';\n}\nfunction defineArcPoints(centerX, centerY, radius, angle) {\n    let radians = (angle - 90) * Math.PI / 180.0;\n    return {\n        x: centerX + (radius * Math.cos(radians)),\n        y: centerY + (radius * Math.sin(radians))\n    };\n}\nfunction defineArc(x, y, radius, startArc, endArc) {\n    let start = defineArcPoints(x, y, radius, endArc);\n    let end = defineArcPoints(x, y, radius, startArc);\n    let d = [\n        'M', start.x, start.y,\n        'A', radius, radius, 0, 0, 0, end.x, end.y\n    ].join(' ');\n    return d;\n}\nfunction defineCircle(x, y, radius) {\n    let d = [\n        'M', x, y,\n        'm', -radius, 0,\n        'a', radius, radius, 0, 1, 0, radius * 2, 0,\n        'a', radius, radius, 0, 1, 0, -radius * 2, 0,\n    ].join(' ');\n    return d;\n}\n/**\n * Function to show the Spinner.\n * @param container - Specify the target of the Spinner.\n * @private\n */\nfunction showSpinner(container) {\n    showHideSpinner(container, false);\n    container = null;\n}\nfunction showHideSpinner(container, isHide) {\n    let spinnerWrap;\n    if (container) {\n        spinnerWrap = container.classList.contains(CLS_SPINWRAP) ? container :\n            container.querySelector('.' + CLS_SPINWRAP);\n    }\n    if (container && spinnerWrap) {\n        let inner = spinnerWrap.querySelector('.' + CLS_SPININWRAP);\n        let spinCheck;\n        spinCheck = isHide ? !spinnerWrap.classList.contains(CLS_SPINTEMPLATE) && !spinnerWrap.classList.contains(CLS_HIDESPIN) :\n            !spinnerWrap.classList.contains(CLS_SPINTEMPLATE) && !spinnerWrap.classList.contains(CLS_SHOWSPIN);\n        if (spinCheck) {\n            let svgEle = spinnerWrap.querySelector('svg');\n            if (isNullOrUndefined(svgEle)) {\n                return;\n            }\n            let id = svgEle.getAttribute('id');\n            globalTimeOut[id].isAnimate = !isHide;\n            switch (globalTimeOut[id].type) {\n                case 'Material':\n                    isHide ? clearTimeout(globalTimeOut[id].timeOut) : startMatAnimate(inner, id, globalTimeOut[id].radius);\n                    break;\n                case 'Bootstrap':\n                    isHide ? clearTimeout(globalTimeOut[id].timeOut) : animateBootstrap(inner);\n                    break;\n            }\n        }\n        isHide ? classList(spinnerWrap, [CLS_HIDESPIN], [CLS_SHOWSPIN]) : classList(spinnerWrap, [CLS_SHOWSPIN], [CLS_HIDESPIN]);\n        container = null;\n    }\n}\n/**\n * Function to hide the Spinner.\n * @param container - Specify the target of the Spinner.\n * @private\n */\nfunction hideSpinner(container) {\n    showHideSpinner(container, true);\n    container = null;\n}\n/**\n * Function to change the Spinners in a page globally from application end.\n * ```\n * E.g : setSpinner({ cssClass: 'custom-css'; type: 'Material' });\n * ```\n * @param args\n * @private\n */\nfunction setSpinner(args, internalCreateElement) {\n    let makeElement = !isNullOrUndefined(internalCreateElement) ? internalCreateElement : createElement;\n    if (args.template !== undefined) {\n        spinTemplate = args.template;\n        if (args.template !== undefined) {\n            spinCSSClass = args.cssClass;\n        }\n    }\n    let container = document.querySelectorAll('.' + CLS_SPINWRAP);\n    for (let index = 0; index < container.length; index++) {\n        ensureTemplate(args.template, container[index], args.type, args.cssClass, makeElement);\n    }\n}\nfunction ensureTemplate(template, container, theme, cssClass, makeEle) {\n    if (isNullOrUndefined(template) && !container.classList.contains(CLS_SPINTEMPLATE)) {\n        replaceTheme(container, theme, cssClass, makeEle);\n        if (container.classList.contains(CLS_SHOWSPIN)) {\n            container.classList.remove(CLS_SHOWSPIN);\n            showSpinner(container);\n        }\n        else {\n            container.classList.remove(CLS_HIDESPIN);\n            hideSpinner(container);\n        }\n    }\n    else {\n        spinTemplate = template;\n        if (!isNullOrUndefined(cssClass)) {\n            spinCSSClass = cssClass;\n        }\n    }\n}\nfunction replaceTheme(container, theme, cssClass, makeEle) {\n    if (!isNullOrUndefined(cssClass)) {\n        container.classList.add(cssClass);\n    }\n    let svgElement = container.querySelector('svg');\n    let radius = theme === 'Bootstrap' ? parseFloat(svgElement.style.height) : parseFloat(svgElement.style.height) / 2;\n    let classNames = svgElement.getAttribute('class');\n    let svgClassList = classNames.split(/\\s/);\n    if (svgClassList.indexOf('e-spin-material') >= 0) {\n        let id = svgElement.getAttribute('id');\n        clearTimeout(globalTimeOut[id].timeOut);\n    }\n    setTheme(theme, container, radius, makeEle);\n}\n\n/**\n * spinner modules\n */\n\n/**\n * Popup Components\n */\n\nexport { PositionData, Popup, getScrollableParent, getZindexPartial, getMaxZindex, calculateRelativeBasedPosition, calculatePosition, fit, isCollide, flip, ButtonProps, AnimationSettings, Dialog, DialogUtility, Animation$1 as Animation, Tooltip, Spinner, createSpinner, showSpinner, hideSpinner, setSpinner };\n//# sourceMappingURL=ej2-popups.es2015.js.map\n","import { Animation, ChildProperty, Collection, Complex, Component, Event, EventHandler, KeyboardEvents, NotifyPropertyChanges, Property, SanitizeHtmlHelper, addClass, attributes, classList, closest, createElement, deleteObject, detach, extend, getInstance, getUniqueID, getValue, isBlazor, isNullOrUndefined, remove, removeClass, rippleEffect, select, setValue } from '@syncfusion/ej2-base';\nimport { Button } from '@syncfusion/ej2-buttons';\nimport { Popup, createSpinner, hideSpinner, showSpinner } from '@syncfusion/ej2-popups';\n\nvar __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n/**\n * @param props\n * @param model\n */\nfunction getModel(props, model) {\n    let obj = extend({}, props);\n    for (let prop of Object.keys(obj)) {\n        if ((model).indexOf(prop) < 0) {\n            deleteObject(obj, prop);\n        }\n    }\n    return obj;\n}\n/** @hidden */\nfunction upDownKeyHandler(ul, keyCode) {\n    let defaultIdx = keyCode === 40 ? 0 : ul.childElementCount - 1;\n    let liIdx = defaultIdx;\n    let li;\n    let selectedLi = ul.querySelector('.e-selected');\n    if (selectedLi) {\n        selectedLi.classList.remove('e-selected');\n    }\n    for (let i = 0, len = ul.children.length; i < len; i++) {\n        if (ul.children[i].classList.contains('e-focused')) {\n            li = ul.children[i];\n            liIdx = i;\n            li.classList.remove('e-focused');\n            keyCode === 40 ? liIdx++ : liIdx--;\n            if (liIdx === (keyCode === 40 ? ul.childElementCount : -1)) {\n                liIdx = defaultIdx;\n            }\n        }\n    }\n    li = ul.children[liIdx];\n    liIdx = isValidLI(ul, li, liIdx, keyCode);\n    if (liIdx !== -1) {\n        addClass([ul.children[liIdx]], 'e-focused');\n        ul.children[liIdx].focus();\n    }\n}\nfunction isValidLI(ul, li, index, keyCode, count = 0) {\n    if (li.classList.contains('e-separator') || li.classList.contains('e-disabled')) {\n        if (index === (keyCode === 40 ? ul.childElementCount - 1 : 0)) {\n            index = keyCode === 40 ? 0 : ul.childElementCount - 1;\n        }\n        else {\n            keyCode === 40 ? index++ : index--;\n        }\n    }\n    li = ul.children[index];\n    if (li.classList.contains('e-separator') || li.classList.contains('e-disabled')) {\n        count++;\n        if (count === ul.childElementCount) {\n            return index = -1;\n        }\n        index = isValidLI(ul, li, index, keyCode, count);\n    }\n    return index;\n}\n/** @hidden */\nfunction setBlankIconStyle(popup) {\n    let blankIconList = [].slice.call(popup.getElementsByClassName('e-blank-icon'));\n    if (!blankIconList.length) {\n        return;\n    }\n    let iconLi = popup.querySelector('.e-item:not(.e-blank-icon):not(.e-separator)');\n    if (iconLi.classList.contains('e-url')) {\n        iconLi = iconLi.querySelector('.e-menu-url');\n    }\n    let icon = iconLi.querySelector('.e-menu-icon');\n    let cssProp;\n    let enableRtl = popup.classList.contains('e-rtl');\n    if (enableRtl) {\n        cssProp = { padding: 'paddingRight', margin: 'marginLeft' };\n    }\n    else {\n        cssProp = { padding: 'paddingLeft', margin: 'marginRight' };\n    }\n    // tslint:disable\n    let size = `${parseInt(getComputedStyle(icon).fontSize, 10) + parseInt((enableRtl ? getComputedStyle(icon)[cssProp.margin] : getComputedStyle(icon)[cssProp.margin]), 10)\n        + parseInt(getComputedStyle(iconLi).paddingLeft, 10)}px`;\n    blankIconList.forEach((li) => {\n        if (li.classList.contains('e-url')) {\n            li.querySelector('.e-menu-url').style[cssProp.padding] = size;\n        }\n        else {\n            li.style[cssProp.padding] = size;\n        }\n    });\n    // tslint:enable\n}\n/**\n * Defines the items of Split Button/DropDownButton.\n */\nclass Item extends ChildProperty {\n}\n__decorate([\n    Property('')\n], Item.prototype, \"iconCss\", void 0);\n__decorate([\n    Property('')\n], Item.prototype, \"id\", void 0);\n__decorate([\n    Property(false)\n], Item.prototype, \"separator\", void 0);\n__decorate([\n    Property('')\n], Item.prototype, \"text\", void 0);\n__decorate([\n    Property('')\n], Item.prototype, \"url\", void 0);\n__decorate([\n    Property(false)\n], Item.prototype, \"disabled\", void 0);\n\n/**\n * Common modules\n */\n\nvar __decorate$1 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nconst classNames = {\n    DISABLED: 'e-disabled',\n    FOCUS: 'e-focused',\n    ICON: 'e-menu-icon',\n    ITEM: 'e-item',\n    POPUP: 'e-dropdown-popup',\n    RTL: 'e-rtl',\n    SEPARATOR: 'e-separator',\n    VERTICAL: 'e-vertical'\n};\n/**\n * DropDownButton component is used to toggle contextual overlays for displaying list of action items.\n * It can contain both text and images.\n * ```html\n * <button id=\"element\">DropDownButton</button>\n * ```\n * ```typescript\n * <script>\n * var dropDownButtonObj = new DropDownButton({items: [{ text: 'Action1' }, { text: 'Action2' },{ text: 'Action3' }]);\n * dropDownButtonObj.appendTo(\"#element\");\n * </script>\n * ```\n */\nlet DropDownButton = class DropDownButton extends Component {\n    /**\n     * Constructor for creating the widget\n     * @param  {DropDownButtonModel} options?\n     * @param  {string|HTMLButtonElement} element?\n     */\n    constructor(options, element) {\n        super(options, element);\n    }\n    preRender() {\n        /** */\n    }\n    /**\n     * Get the properties to be maintained in the persisted state.\n     * @returns string\n     */\n    getPersistData() {\n        return this.addOnPersist([]);\n    }\n    /**\n     * To open/close DropDownButton popup based on current state of the DropDownButton.\n     * @returns void\n     */\n    toggle() {\n        this.canOpen() ? this.openPopUp() : this.closePopup();\n    }\n    /**\n     * Initialize the Component rendering\n     * @returns void\n     * @private\n     */\n    render() {\n        this.initialize();\n        if (!this.disabled) {\n            this.wireEvents();\n        }\n        this.renderComplete();\n    }\n    /**\n     * Adds a new item to the menu. By default, new item appends to the list as the last item,\n     * but you can insert based on the text parameter.\n     * @param  { ItemModel[] } items - Specifies an array of JSON data.\n     * @param { string } text - Specifies the text to insert the newly added item in the menu.\n     * @returns {void}.\n     */\n    addItems(items, text) {\n        let newItem;\n        let idx = this.items.length;\n        for (let j = 0, len = this.items.length; j < len; j++) {\n            if (text === this.items[j].text) {\n                idx = j;\n                break;\n            }\n        }\n        for (let i = items.length - 1; i >= 0; i--) {\n            // tslint:disable-next-line\n            newItem = new Item(this, 'items', items[i], true);\n            this.items.splice(idx, 0, newItem);\n        }\n        if (!this.canOpen()) {\n            this.createItems();\n        }\n    }\n    /**\n     * Removes the items from the menu.\n     * @param  { string[] } items - Specifies an array of string to remove the items.\n     * @param { string } isUniqueId - Set `true` if specified items is a collection of unique id.\n     * @returns {void}.\n     */\n    removeItems(items, isUniqueId) {\n        let refresh = false;\n        for (let i = 0, len = items.length; i < len; i++) {\n            for (let j = 0, len = this.items.length; j < len; j++) {\n                if (items[i] === (isUniqueId ? this.items[j].id : this.items[j].text)) {\n                    this.items.splice(j, 1);\n                    refresh = true;\n                    break;\n                }\n            }\n        }\n        if (refresh && this.getULElement()) {\n            this.createItems();\n        }\n    }\n    createPopup() {\n        let div = this.createElement('div', {\n            className: classNames.POPUP,\n            id: this.element.id + '-popup'\n        });\n        document.body.appendChild(div);\n        this.dropDown = new Popup(div, {\n            relateTo: this.element,\n            collision: { X: 'fit', Y: 'flip' },\n            position: { X: 'left', Y: 'bottom' },\n            targetType: 'relative',\n            content: this.target ? this.getTargetElement() : '',\n            enableRtl: this.enableRtl\n        });\n        if (this.dropDown.element.style.position === 'fixed') {\n            this.dropDown.refreshPosition(this.element);\n        }\n        this.dropDown.hide();\n        attributes(this.element, {\n            ['aria-haspopup']: this.items.length || this.target ? 'true' : 'false', ['aria-expanded']: 'false',\n            ['aria-owns']: this.getPopUpElement().id, ['type']: 'button',\n            ['aria-label']: this.element.textContent + ' dropdownbutton'\n        });\n        if (this.cssClass) {\n            addClass([div], this.cssClass.split(' '));\n        }\n    }\n    getTargetElement() {\n        return typeof (this.target) === 'string' ? select(this.target) : this.target;\n    }\n    createItems(appendItems) {\n        let items = this.items;\n        let showIcon = this.hasIcon(this.items, 'iconCss');\n        let span;\n        let item;\n        let li;\n        let eventArgs;\n        let ul = this.getULElement();\n        if (ul) {\n            ul.innerHTML = '';\n        }\n        else {\n            ul = this.createElement('ul', {\n                attrs: { 'role': 'menu', 'tabindex': '0' }\n            });\n        }\n        for (let i = 0; i < items.length; i++) {\n            item = items[i];\n            let tempItem = (this.enableHtmlSanitizer) ? SanitizeHtmlHelper.sanitize(item.text) : item.text;\n            li = this.createElement('li', {\n                innerHTML: item.url ? '' : tempItem,\n                className: item.separator ? classNames.ITEM + ' ' + classNames.SEPARATOR : classNames.ITEM,\n                attrs: { 'role': 'menuItem', 'tabindex': '-1' },\n                id: item.id ? item.id : getUniqueID('e-' + this.getModuleName() + '-item')\n            });\n            if (item.url) {\n                li.appendChild(this.createAnchor(item));\n                li.classList.add('e-url');\n            }\n            if (item.iconCss) {\n                span = this.createElement('span', { className: classNames.ICON + ' ' + item.iconCss });\n                (item.url) ? li.childNodes[0].appendChild(span) : li.insertBefore(span, li.childNodes[0]);\n            }\n            else {\n                if (showIcon && !item.separator) {\n                    li.classList.add('e-blank-icon');\n                }\n            }\n            if (item.disabled) {\n                li.classList.add('e-disabled');\n            }\n            eventArgs = { item: item, element: li };\n            this.trigger('beforeItemRender', eventArgs);\n            ul.appendChild(li);\n        }\n        if (appendItems) {\n            this.getPopUpElement().appendChild(ul);\n        }\n        if (showIcon) {\n            setBlankIconStyle(this.getPopUpElement());\n        }\n    }\n    hasIcon(items, field) {\n        for (let i = 0, len = items.length; i < len; i++) {\n            if (items[i][field]) {\n                return true;\n            }\n        }\n        return false;\n    }\n    createAnchor(item) {\n        let tempItem = (this.enableHtmlSanitizer) ? SanitizeHtmlHelper.sanitize(item.text) : item.text;\n        return this.createElement('a', { className: 'e-menu-text e-menu-url', innerHTML: tempItem, attrs: { 'href': item.url } });\n    }\n    initialize() {\n        this.button = new Button({\n            iconCss: this.iconCss, iconPosition: this.iconPosition, cssClass: this.cssClass, content: this.content,\n            disabled: this.disabled, enableRtl: this.enableRtl, enablePersistence: this.enablePersistence\n        });\n        this.button.createElement = this.createElement;\n        this.button.appendTo(this.element);\n        if (!this.element.id) {\n            this.element.id = getUniqueID('e-' + this.getModuleName());\n        }\n        this.appendArrowSpan();\n        this.createPopup();\n        this.setActiveElem([this.element]);\n    }\n    appendArrowSpan() {\n        this.element.appendChild(this.createElement('span', {\n            className: 'e-btn-icon e-icons ' + 'e-icon-' + (this.cssClass.indexOf(classNames.VERTICAL) > -1\n                ? 'bottom' : 'right') + ' e-caret'\n        }));\n    }\n    setActiveElem(elem) {\n        this.activeElem = elem;\n    }\n    /**\n     * Get component name.\n     * @returns string\n     * @private\n     */\n    getModuleName() {\n        return 'dropdown-btn';\n    }\n    canOpen() {\n        return this.getPopUpElement().classList.contains('e-popup-close');\n    }\n    /**\n     * Destroys the widget.\n     * @returns void\n     */\n    destroy() {\n        super.destroy();\n        if (this.getModuleName() === 'dropdown-btn') {\n            let attrList;\n            let classList$$1;\n            if (this.element.querySelector('span.e-caret')) {\n                detach(this.element.querySelector('span.e-caret'));\n            }\n            if (this.cssClass) {\n                classList$$1 = this.cssClass.split(' ');\n            }\n            this.button.destroy();\n            if (classList$$1) {\n                removeClass([this.element], classList$$1);\n            }\n            removeClass(this.activeElem, ['e-active']);\n            attrList = this.element.getAttribute('class') ? ['aria-haspopup', 'aria-expanded', 'aria-owns', 'type']\n                : ['aria-haspopup', 'aria-expanded', 'aria-owns', 'type', 'class'];\n            attrList.forEach((key) => {\n                this.element.removeAttribute(key);\n            });\n            this.dropDown.destroy();\n            let popupEle = document.getElementById(this.getPopUpElement().id);\n            if (popupEle) {\n                removeClass([popupEle], ['e-popup-open', 'e-popup-close']);\n                detach(popupEle);\n            }\n            if (!this.disabled) {\n                this.unWireEvents();\n            }\n        }\n    }\n    getPopUpElement() {\n        return this.dropDown.element;\n    }\n    getULElement() {\n        return this.getPopUpElement().children[0];\n    }\n    wireEvents() {\n        let popupElement = this.getPopUpElement();\n        this.delegateMousedownHandler = this.mousedownHandler.bind(this);\n        EventHandler.add(document, 'mousedown touchstart', this.delegateMousedownHandler, this);\n        EventHandler.add(this.element, 'click', this.clickHandler, this);\n        EventHandler.add(popupElement, 'click', this.clickHandler, this);\n        EventHandler.add(this.element, 'keydown', this.keyBoardHandler, this);\n        EventHandler.add(popupElement, 'keydown', this.keyBoardHandler, this);\n        this.rippleFn = rippleEffect(popupElement, { selector: '.' + classNames.ITEM });\n    }\n    /** @hidden */\n    keyBoardHandler(e) {\n        if (e.target === this.element && (e.keyCode === 9 || (!e.altKey && e.keyCode === 40) || e.keyCode === 38)) {\n            return;\n        }\n        switch (e.keyCode) {\n            case 38:\n            case 40:\n                if (e.altKey && (e.keyCode === 38 || e.keyCode === 40)) {\n                    this.keyEventHandler(e);\n                }\n                else {\n                    this.upDownKeyHandler(e);\n                }\n                break;\n            case 9:\n            case 13:\n            case 27:\n            case 32:\n                this.keyEventHandler(e);\n                break;\n        }\n    }\n    upDownKeyHandler(e) {\n        if (this.target && (e.keyCode === 38 || e.keyCode === 40)) {\n            return;\n        }\n        e.preventDefault();\n        upDownKeyHandler(this.getULElement(), e.keyCode);\n    }\n    keyEventHandler(e) {\n        if (this.target && (e.keyCode === 13 || e.keyCode === 9)) {\n            return;\n        }\n        if (e.keyCode !== 9) {\n            e.preventDefault();\n        }\n        if (e.keyCode === 27 || e.keyCode === 38 || e.keyCode === 9) {\n            if (!this.canOpen()) {\n                this.closePopup(e, this.element);\n            }\n        }\n        else {\n            this.clickHandler(e);\n        }\n    }\n    getLI(elem) {\n        return elem.tagName === 'LI' ? elem : closest(elem, 'li');\n    }\n    mousedownHandler(e) {\n        let trgt = e.target;\n        if (!this.canOpen() && !(closest(trgt, '[id=\"' + this.getPopUpElement().id + '\"]')\n            || closest(trgt, '[id=\"' + this.element.id + '\"]'))) {\n            this.closePopup(e);\n        }\n    }\n    clickHandler(e) {\n        let trgt = e.target;\n        let canOpen = this.canOpen();\n        if (closest(trgt, '[id=\"' + this.element.id + '\"]')) {\n            if (canOpen) {\n                this.openPopUp(e);\n            }\n            else {\n                this.closePopup(e, this.activeElem[0]);\n            }\n        }\n        else {\n            if (closest(trgt, '[id=\"' + this.getPopUpElement().id + '\"]')) {\n                let eventArgs;\n                let liIdx;\n                let item;\n                let li = this.getLI(trgt);\n                if (li) {\n                    liIdx = Array.prototype.indexOf.call(this.getULElement().children, li);\n                    item = this.items[liIdx];\n                    if (item) {\n                        eventArgs = { element: li, item: item };\n                        this.trigger('select', eventArgs);\n                    }\n                    this.closePopup(e, this.activeElem[0]);\n                }\n            }\n        }\n    }\n    openPopUp(e = null) {\n        if (!this.target) {\n            this.createItems(true);\n        }\n        let ul = this.getULElement();\n        let beforeOpenArgs = { element: ul, items: this.items, event: e, cancel: false };\n        this.trigger('beforeOpen', beforeOpenArgs, (observedArgs) => {\n            if (!observedArgs.cancel) {\n                let ul = this.getULElement();\n                this.dropDown.show(null, this.element);\n                addClass([this.element], 'e-active');\n                this.element.setAttribute('aria-expanded', 'true');\n                ul.focus();\n                let openArgs = { element: ul, items: this.items };\n                this.trigger('open', openArgs);\n            }\n        });\n    }\n    closePopup(e = null, focusEle) {\n        let ul = this.getULElement();\n        let beforeCloseArgs = { element: ul, items: this.items, event: e, cancel: false };\n        this.trigger('beforeClose', beforeCloseArgs, (observedArgs) => {\n            if (!observedArgs.cancel) {\n                let ul = this.getULElement();\n                let selectedLi = ul.querySelector('.e-selected');\n                if (selectedLi) {\n                    selectedLi.classList.remove('e-selected');\n                }\n                this.dropDown.hide();\n                removeClass(this.activeElem, 'e-active');\n                this.element.setAttribute('aria-expanded', 'false');\n                if (focusEle) {\n                    focusEle.focus();\n                }\n                let closeArgs = { element: ul, items: this.items };\n                this.trigger('close', closeArgs);\n                if (!this.target && ul) {\n                    detach(ul);\n                }\n            }\n        });\n    }\n    unWireEvents() {\n        EventHandler.remove(document, 'mousedown touchstart', this.delegateMousedownHandler);\n        EventHandler.remove(this.element, 'click', this.clickHandler);\n        EventHandler.remove(this.getPopUpElement(), 'click', this.clickHandler);\n        EventHandler.remove(this.element, 'keydown', this.keyBoardHandler);\n        EventHandler.remove(this.getPopUpElement(), 'keydown', this.keyBoardHandler);\n        this.rippleFn();\n    }\n    /**\n     * Called internally if any of the property value changed.\n     * @param  {DropDownButtonModel} newProp\n     * @param  {DropDownButtonModel} oldProp\n     * @returns void\n     * @private\n     */\n    onPropertyChanged(newProp, oldProp) {\n        let btnModel = ['content', 'cssClass', 'iconCss', 'iconPosition', 'disabled', 'enableRtl'];\n        this.button.setProperties(getModel(newProp, btnModel));\n        this.dropDown.setProperties(getModel(newProp, ['enableRtl']));\n        let popupElement = this.getPopUpElement();\n        for (let prop of Object.keys(newProp)) {\n            switch (prop) {\n                case 'content':\n                    if (!this.element.querySelector('span.e-caret')) {\n                        this.appendArrowSpan();\n                    }\n                    break;\n                case 'disabled':\n                    if (newProp.disabled) {\n                        this.unWireEvents();\n                        if (!this.canOpen()) {\n                            this.closePopup();\n                        }\n                    }\n                    else {\n                        this.wireEvents();\n                    }\n                    break;\n                case 'cssClass':\n                    if (newProp.cssClass.indexOf(classNames.VERTICAL) > -1) {\n                        let arrowSpan = this.element.querySelector('span.e-caret');\n                        classList(arrowSpan, ['e-icon-bottom'], ['e-icon-right']);\n                    }\n                    if (oldProp.cssClass) {\n                        removeClass([popupElement], oldProp.cssClass.split(' '));\n                    }\n                    if (newProp.cssClass) {\n                        addClass([popupElement], newProp.cssClass.split(' '));\n                    }\n                    break;\n                case 'target':\n                    this.dropDown.content = this.getTargetElement();\n                    this.dropDown.dataBind();\n                    break;\n                case 'items':\n                    if (this.getULElement()) {\n                        this.createItems();\n                    }\n                    break;\n            }\n        }\n    }\n    /**\n     * Sets the focus to DropDownButton\n     * its native method\n     * @public\n     */\n    focusIn() {\n        this.element.focus();\n    }\n};\n__decorate$1([\n    Property('')\n], DropDownButton.prototype, \"content\", void 0);\n__decorate$1([\n    Property('')\n], DropDownButton.prototype, \"cssClass\", void 0);\n__decorate$1([\n    Property(false)\n], DropDownButton.prototype, \"disabled\", void 0);\n__decorate$1([\n    Property('')\n], DropDownButton.prototype, \"iconCss\", void 0);\n__decorate$1([\n    Property('Left')\n], DropDownButton.prototype, \"iconPosition\", void 0);\n__decorate$1([\n    Property(false)\n], DropDownButton.prototype, \"enableHtmlSanitizer\", void 0);\n__decorate$1([\n    Collection([], Item)\n], DropDownButton.prototype, \"items\", void 0);\n__decorate$1([\n    Property('')\n], DropDownButton.prototype, \"target\", void 0);\n__decorate$1([\n    Event()\n], DropDownButton.prototype, \"beforeItemRender\", void 0);\n__decorate$1([\n    Event()\n], DropDownButton.prototype, \"beforeOpen\", void 0);\n__decorate$1([\n    Event()\n], DropDownButton.prototype, \"beforeClose\", void 0);\n__decorate$1([\n    Event()\n], DropDownButton.prototype, \"close\", void 0);\n__decorate$1([\n    Event()\n], DropDownButton.prototype, \"open\", void 0);\n__decorate$1([\n    Event()\n], DropDownButton.prototype, \"select\", void 0);\n__decorate$1([\n    Event()\n], DropDownButton.prototype, \"created\", void 0);\nDropDownButton = __decorate$1([\n    NotifyPropertyChanges\n], DropDownButton);\n\n/**\n * DropDownButton modules\n */\n\nvar __decorate$2 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n/// <reference path='../drop-down-button/drop-down-button-model.d.ts'/>\nconst RTL = 'e-rtl';\nconst TAGNAME = 'EJS-SPLITBUTTON';\n/**\n * SplitButton component has primary and secondary button. Primary button is used to select\n * default action and secondary button is used to toggle contextual overlays for displaying list of\n * action items. It can contain both text and images.\n * ```html\n * <button id=\"element\"></button>\n * ```\n * ```typescript\n * <script>\n * var splitBtnObj = new SplitButton({content: 'SplitButton'});\n * splitBtnObj.appendTo(\"#element\");\n * </script>\n * ```\n */\nlet SplitButton = class SplitButton extends DropDownButton {\n    /**\n     * Constructor for creating the widget\n     * @param  {SplitButtonModel} options?\n     * @param  {string|HTMLButtonElement} element?\n     */\n    constructor(options, element) {\n        super(options, element);\n    }\n    /**\n     * Initialize Angular support.\n     * @private\n     */\n    preRender() {\n        let ele = this.element;\n        if (ele.tagName === TAGNAME) {\n            let ejInstance = getValue('ej2_instances', ele);\n            let btn = this.createElement('button', { attrs: { 'type': 'button' } });\n            let wrapper = this.createElement(TAGNAME, { className: 'e-' + this.getModuleName() + '-wrapper' });\n            for (let idx = 0, len = ele.attributes.length; idx < len; idx++) {\n                btn.setAttribute(ele.attributes[idx].nodeName, ele.attributes[idx].nodeValue);\n            }\n            ele.parentNode.insertBefore(wrapper, ele);\n            detach(ele);\n            ele = btn;\n            wrapper.appendChild(ele);\n            setValue('ej2_instances', ejInstance, ele);\n            this.wrapper = wrapper;\n            this.element = ele;\n        }\n        if (!this.element.id) {\n            this.element.id = getUniqueID('e-' + this.getModuleName());\n        }\n    }\n    /**\n     * Initialize the Component rendering\n     * @returns void\n     * @private\n     */\n    render() {\n        this.initWrapper();\n        this.createPrimaryButton();\n        this.renderControl();\n    }\n    renderControl() {\n        this.createSecondaryButton();\n        this.setActiveElem([this.element, this.secondaryBtnObj.element]);\n        this.setAria();\n        this.wireEvents();\n        this.renderComplete();\n    }\n    /**\n     * Adds a new item to the menu. By default, new item appends to the list as the last item,\n     * but you can insert based on the text parameter.\n     * @param  { ItemModel[] } items - Specifies an array of JSON data.\n     * @param { string } text - Specifies the text to insert the newly added item in the menu.\n     * @returns {void}.\n     */\n    addItems(items, text) {\n        super.addItems(items, text);\n        this.secondaryBtnObj.items = this.items;\n    }\n    /**\n     * Removes the items from the menu.\n     * @param  { string[] } items - Specifies an array of string to remove the items.\n     * @param { string } isUniqueId - Set `true` if specified items is a collection of unique id.\n     * @returns {void}.\n     */\n    removeItems(items, isUniqueId) {\n        super.removeItems(items, isUniqueId);\n        this.secondaryBtnObj.items = this.items;\n    }\n    initWrapper() {\n        if (!this.wrapper) {\n            this.wrapper = this.createElement('div', { className: 'e-' + this.getModuleName() + '-wrapper' });\n            this.element.parentNode.insertBefore(this.wrapper, this.element);\n        }\n        this.element.classList.remove('e-' + this.getModuleName());\n        if (this.enableRtl) {\n            this.wrapper.classList.add(RTL);\n        }\n        if (this.cssClass) {\n            addClass([this.wrapper], this.cssClass.split(' '));\n        }\n    }\n    createPrimaryButton() {\n        let btnModel = {\n            cssClass: this.cssClass,\n            enableRtl: this.enableRtl,\n            iconCss: this.iconCss,\n            iconPosition: this.iconPosition,\n            content: this.content,\n            disabled: this.disabled\n        };\n        this.primaryBtnObj = new Button(btnModel);\n        this.primaryBtnObj.createElement = this.createElement;\n        this.primaryBtnObj.appendTo(this.element);\n        this.element.classList.add('e-' + this.getModuleName());\n        this.element.type = 'button';\n        this.wrapper.appendChild(this.element);\n    }\n    createSecondaryButton() {\n        let dropDownBtnModel;\n        let btnElem;\n        btnElem = this.createElement('button', {\n            className: 'e-icon-btn',\n            attrs: { 'tabindex': '-1' },\n            id: this.element.id + '_dropdownbtn'\n        });\n        this.wrapper.appendChild(btnElem);\n        dropDownBtnModel = {\n            cssClass: this.cssClass,\n            disabled: this.disabled,\n            enableRtl: this.enableRtl,\n            items: this.items,\n            target: this.target,\n        };\n        dropDownBtnModel.beforeItemRender = (args) => {\n            this.trigger('beforeItemRender', args);\n        };\n        dropDownBtnModel.open = (args) => {\n            this.trigger('open', args);\n        };\n        dropDownBtnModel.close = (args) => {\n            this.trigger('close', args);\n        };\n        dropDownBtnModel.select = (args) => {\n            this.trigger('select', args);\n        };\n        dropDownBtnModel.beforeOpen = (args) => {\n            let callBackPromise = new Deferred();\n            this.trigger('beforeOpen', args, (observedArgs) => {\n                callBackPromise.resolve(observedArgs);\n            });\n            return callBackPromise;\n        };\n        dropDownBtnModel.beforeClose = (args) => {\n            let callBackPromise = new Deferred();\n            this.trigger('beforeClose', args, (observedArgs) => {\n                callBackPromise.resolve(observedArgs);\n            });\n            return callBackPromise;\n        };\n        this.secondaryBtnObj = new DropDownButton(dropDownBtnModel);\n        this.secondaryBtnObj.createElement = this.createElement;\n        this.secondaryBtnObj.appendTo(btnElem);\n        this.secondaryBtnObj.dropDown.relateTo = this.wrapper;\n        this.dropDown = this.secondaryBtnObj.dropDown;\n        this.secondaryBtnObj.activeElem = [this.element, this.secondaryBtnObj.element];\n        EventHandler.remove(this.getPopUpElement(), 'keydown', this.secondaryBtnObj.keyBoardHandler);\n        this.secondaryBtnObj.element.querySelector('.e-btn-icon').classList.remove('e-icon-right');\n    }\n    setAria() {\n        attributes(this.element, {\n            'aria-expanded': 'false', 'aria-haspopup': 'true',\n            'aria-label': this.element.textContent + ' splitbutton', 'aria-owns': this.secondaryBtnObj.dropDown.element.id\n        });\n    }\n    /**\n     * Get component name.\n     * @returns string\n     * @private\n     */\n    getModuleName() {\n        return 'split-btn';\n    }\n    /**\n     * To open/close SplitButton popup based on current state of the SplitButton.\n     * @returns void\n     */\n    toggle() {\n        this.secondaryBtnObj.toggle();\n    }\n    destroy() {\n        let classList$$1 = [RTL];\n        let element = document.getElementById(this.element.id);\n        if (this.cssClass) {\n            classList$$1 = classList$$1.concat(this.cssClass.split(' '));\n        }\n        if (element && element.parentElement === this.wrapper) {\n            if (this.wrapper.tagName === TAGNAME) {\n                this.wrapper.innerHTML = '';\n                removeClass([this.wrapper], ['e-rtl', 'e-' + this.getModuleName() + '-wrapper']);\n                removeClass([this.wrapper], this.cssClass.split(' '));\n            }\n            else {\n                removeClass([this.element], classList$$1);\n                ['aria-label', 'aria-haspopup', 'aria-expanded',\n                    'aria-owns', 'type'].forEach((key) => {\n                    this.element.removeAttribute(key);\n                });\n                this.wrapper.parentNode.insertBefore(this.element, this.wrapper);\n                remove(this.wrapper);\n            }\n            this.unWireEvents();\n        }\n        this.primaryBtnObj.destroy();\n        this.secondaryBtnObj.destroy();\n        super.destroy();\n        if (!this.element.getAttribute('class')) {\n            this.element.removeAttribute('class');\n        }\n    }\n    wireEvents() {\n        EventHandler.add(this.element, 'click', this.primaryBtnClickHandler, this);\n        EventHandler.add(this.getPopUpElement(), 'keydown', this.keyBoardHandler, this);\n        new KeyboardEvents(this.element, {\n            keyAction: this.btnKeyBoardHandler.bind(this),\n            keyConfigs: {\n                altdownarrow: 'alt+downarrow'\n            }\n        });\n    }\n    unWireEvents() {\n        EventHandler.remove(this.element, 'click', this.primaryBtnClickHandler);\n        getInstance(this.element, KeyboardEvents).destroy();\n    }\n    primaryBtnClickHandler() {\n        this.trigger('click', { element: this.element });\n    }\n    btnKeyBoardHandler(e) {\n        switch (e.action) {\n            case 'altdownarrow':\n                this.clickHandler(e);\n                break;\n        }\n    }\n    /**\n     * Called internally if any of the property value changed.\n     * @param  {SplitButtonModel} newProp\n     * @param  {SplitButtonModel} oldProp\n     * @returns void\n     */\n    onPropertyChanged(newProp, oldProp) {\n        let model = ['content', 'iconCss', 'iconPosition', 'cssClass', 'disabled', 'enableRtl'];\n        this.primaryBtnObj.setProperties(getModel(newProp, model));\n        model = ['beforeOpen', 'beforeItemRender', 'select', 'open',\n            'close', 'cssClass', 'disabled', 'enableRtl'];\n        if (Object.keys(newProp).indexOf('items') > -1) {\n            this.secondaryBtnObj.items = newProp.items;\n            this.secondaryBtnObj.dataBind();\n        }\n        this.secondaryBtnObj.setProperties(getModel(newProp, model));\n        for (let prop of Object.keys(newProp)) {\n            switch (prop) {\n                case 'cssClass':\n                    if (oldProp.cssClass) {\n                        removeClass([this.wrapper], oldProp.cssClass.split(' '));\n                    }\n                    addClass([this.wrapper], newProp.cssClass.split(' '));\n                    break;\n                case 'enableRtl':\n                    if (newProp.enableRtl) {\n                        addClass([this.wrapper], RTL);\n                    }\n                    else {\n                        removeClass([this.wrapper], RTL);\n                    }\n                    break;\n            }\n        }\n    }\n    /**\n     * Sets the focus to SplitButton\n     * its native method\n     * @public\n     */\n    focusIn() {\n        this.element.focus();\n    }\n};\n__decorate$2([\n    Property('')\n], SplitButton.prototype, \"content\", void 0);\n__decorate$2([\n    Property('')\n], SplitButton.prototype, \"cssClass\", void 0);\n__decorate$2([\n    Property(false)\n], SplitButton.prototype, \"disabled\", void 0);\n__decorate$2([\n    Property('')\n], SplitButton.prototype, \"iconCss\", void 0);\n__decorate$2([\n    Property('Left')\n], SplitButton.prototype, \"iconPosition\", void 0);\n__decorate$2([\n    Collection([], Item)\n], SplitButton.prototype, \"items\", void 0);\n__decorate$2([\n    Property('')\n], SplitButton.prototype, \"target\", void 0);\n__decorate$2([\n    Event()\n], SplitButton.prototype, \"beforeItemRender\", void 0);\n__decorate$2([\n    Event()\n], SplitButton.prototype, \"beforeOpen\", void 0);\n__decorate$2([\n    Event()\n], SplitButton.prototype, \"beforeClose\", void 0);\n__decorate$2([\n    Event()\n], SplitButton.prototype, \"click\", void 0);\n__decorate$2([\n    Event()\n], SplitButton.prototype, \"close\", void 0);\n__decorate$2([\n    Event()\n], SplitButton.prototype, \"open\", void 0);\n__decorate$2([\n    Event()\n], SplitButton.prototype, \"select\", void 0);\n__decorate$2([\n    Event()\n], SplitButton.prototype, \"created\", void 0);\nSplitButton = __decorate$2([\n    NotifyPropertyChanges\n], SplitButton);\n/**\n * Deferred is used to handle asynchronous operation.\n */\nclass Deferred {\n    constructor() {\n        /**\n         * Promise is an object that represents a value that may not be available yet, but will be resolved at some point in the future.\n         */\n        this.promise = new Promise((resolve, reject) => {\n            this.resolve = resolve;\n            this.reject = reject;\n        });\n        /**\n         * Defines the callback function triggers when the Deferred object is rejected.\n         */\n        this.catch = this.promise.catch.bind(this.promise);\n        /**\n         * Defines the callback function triggers when the Deferred object is resolved.\n         */\n        this.then = this.promise.then.bind(this.promise);\n    }\n}\n\n/**\n * Split Button modules\n */\n\n/**\n * Initialize ButtonGroup CSS component with specified properties.\n * ```html\n * <div id='buttongroup'>\n * <button></button>\n * <button></button>\n * <button></button>\n * </div>\n * ```\n * ```typescript\n * createButtonGroup('#buttongroup', {\n *   cssClass: 'e-outline',\n *   buttons: [\n *       { content: 'Day' },\n *       { content: 'Week' },\n *       { content: 'Work Week'}\n *   ]\n * });\n * ```\n * @param {string} selector\n * @param {CreateButtonGroupModel} options\n * @returns HTMLElement\n */\nfunction createButtonGroup(selector, options = {}, createElement$$1) {\n    let child;\n    let btnElem;\n    let nextChild;\n    let btnModel;\n    if (isNullOrUndefined(createElement$$1)) {\n        createElement$$1 = createElement;\n    }\n    let wrapper = document.querySelector(selector);\n    addClass([wrapper], ['e-btn-group', 'e-css']);\n    wrapper.setAttribute('role', 'group');\n    let childs = wrapper.children;\n    options.buttons = options.buttons || [];\n    for (let i = 0, j = 0; j < childs.length; i++, j++) {\n        child = childs[j];\n        btnModel = options.buttons[i];\n        if (btnModel !== null) {\n            if (child.tagName === 'BUTTON') {\n                btnElem = child;\n            }\n            else {\n                btnElem = createElement$$1('label');\n                nextChild = childs[j + 1];\n                if (nextChild) {\n                    wrapper.insertBefore(btnElem, nextChild);\n                }\n                else {\n                    wrapper.appendChild(btnElem);\n                }\n                if (child.id) {\n                    btnElem.setAttribute('for', child.id);\n                }\n                if (btnModel && btnModel.disabled) {\n                    child.disabled = true;\n                }\n                j++;\n            }\n            if (options.cssClass && btnModel && !btnModel.cssClass) {\n                btnModel.cssClass = options.cssClass;\n            }\n            new Button(btnModel || {}, btnElem);\n        }\n    }\n    return wrapper;\n}\n\n/**\n * ButtonGroup modules\n */\n\nvar __decorate$3 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nconst HIDESPINNER = 'e-hide-spinner';\nconst PROGRESS = 'e-progress';\nconst PROGRESSACTIVE = 'e-progress-active';\nconst CONTENTCLS = 'e-btn-content';\n/**\n * Defines the spin settings.\n */\nclass SpinSettings extends ChildProperty {\n}\n__decorate$3([\n    Property(null)\n], SpinSettings.prototype, \"template\", void 0);\n__decorate$3([\n    Property(16)\n], SpinSettings.prototype, \"width\", void 0);\n__decorate$3([\n    Property('Left')\n], SpinSettings.prototype, \"position\", void 0);\n/**\n * Defines the animation settings.\n */\nclass AnimationSettings extends ChildProperty {\n}\n__decorate$3([\n    Property(400)\n], AnimationSettings.prototype, \"duration\", void 0);\n__decorate$3([\n    Property('None')\n], AnimationSettings.prototype, \"effect\", void 0);\n__decorate$3([\n    Property('ease')\n], AnimationSettings.prototype, \"easing\", void 0);\n/**\n * The ProgressButton visualizes the progression of an operation to indicate the user\n * that a process is happening in the background with visual representation.\n * ```html\n * <button id=\"element\"></button>\n * ```\n * ```typescript\n * <script>\n * var progressButtonObj = new ProgressButton({ content: 'Progress Button' });\n * progressButtonObj.appendTo(\"#element\");\n * </script>\n * ```\n */\nlet ProgressButton = class ProgressButton extends Button {\n    /**\n     * Constructor for creating the widget\n     * @param  {ProgressButtonModel} options?\n     * @param  {string|HTMLButtonElement} element?\n     */\n    constructor(options, element) {\n        super(options, element);\n        this.step = 1;\n    }\n    preRender() {\n        super.preRender();\n    }\n    /**\n     * Initialize the Component rendering\n     * @returns void\n     * @private\n     */\n    render() {\n        if (isBlazor()) {\n            this.isServerRendered = false;\n        }\n        super.render();\n        this.init();\n        this.wireEvents();\n        this.setAria();\n        this.renderComplete();\n    }\n    /**\n     * Starts the button progress at the specified percent.\n     * @param percent Starts the button progress at this percent.\n     * @returns void\n     */\n    start(percent) {\n        this.isPaused = false;\n        this.startProgress(percent ? percent : this.percent, this.progressTime);\n    }\n    /**\n     * Stops the button progress.\n     * @returns void\n     */\n    stop() {\n        this.isPaused = true;\n        cancelAnimationFrame(this.timerId);\n    }\n    /**\n     * Complete the button progress.\n     * @returns void\n     */\n    progressComplete() {\n        this.isPaused = false;\n        this.finishProgress();\n    }\n    /**\n     * Get component name.\n     * @returns string\n     * @private\n     */\n    getModuleName() {\n        return 'progress-btn';\n    }\n    /**\n     * Destroys the widget.\n     * @returns void\n     */\n    destroy() {\n        let classList$$1 = [HIDESPINNER, PROGRESSACTIVE, 'e-round-corner', 'e-' + super.getModuleName(),\n            'e-spin-' + this.spinSettings.position.toLowerCase()];\n        let css;\n        super.destroy();\n        this.unWireEvents();\n        this.element.innerHTML = '';\n        if (this.cssClass) {\n            classList$$1 = classList$$1.concat(this.cssClass.split(' '));\n        }\n        removeClass([this.element], classList$$1);\n        css = this.element.getAttribute('class') ? ['aria-label', 'aria-valuemin', 'aria-valuemax', 'aria-valuenow']\n            : ['aria-label', 'aria-valuemin', 'aria-valuemax', 'aria-valuenow', 'class'];\n        css.forEach((key) => {\n            this.element.removeAttribute(key);\n        });\n        if (this.disabled) {\n            this.element.removeAttribute('disabled');\n        }\n    }\n    init() {\n        this.element.classList.add('e-' + super.getModuleName());\n        this.setContent();\n        this.createSpinner();\n        if (this.enableProgress) {\n            this.createProgress();\n        }\n    }\n    createSpinner() {\n        let spinner = this.createElement('span', { className: 'e-spinner' });\n        this.setSpinPosition(spinner);\n        createSpinner({\n            target: spinner, width: this.spinSettings.width || 16, template: this.spinSettings.template\n        }, this.createElement);\n    }\n    getSpinner() {\n        return this.element.getElementsByClassName('e-spinner')[0];\n    }\n    getProgress() {\n        return this.element.getElementsByClassName(PROGRESS)[0];\n    }\n    setSpinPosition(ele) {\n        let position = this.spinSettings.position || 'Left';\n        if (position === 'Left' || position === 'Top') {\n            this.element.insertBefore(ele, this.element.getElementsByClassName(CONTENTCLS)[0]);\n        }\n        else {\n            this.element.appendChild(ele);\n        }\n        this.element.classList.add('e-spin-' + position.toLowerCase());\n    }\n    createProgress() {\n        this.element.appendChild(this.createElement('span', { className: PROGRESS }));\n    }\n    setContent() {\n        let cont;\n        if (isBlazor()) {\n            cont = this.content;\n            if (this.enableHtmlSanitizer) {\n                cont = SanitizeHtmlHelper.sanitize(this.content);\n            }\n            this.setContentIcon(cont);\n        }\n        else {\n            cont = this.element.innerHTML;\n            if (this.enableHtmlSanitizer) {\n                cont = SanitizeHtmlHelper.sanitize(this.element.innerHTML);\n            }\n            this.element.innerHTML = '';\n            this.element.appendChild(this.createElement('span', { className: CONTENTCLS, innerHTML: cont }));\n        }\n    }\n    setContentIcon(content) {\n        let contElem = this.createElement('span', { className: CONTENTCLS, innerHTML: content });\n        if (this.iconCss) {\n            let span = this.createElement('span', { className: 'e-btn-icon ' + this.iconCss });\n            if (!this.element.textContent.trim()) {\n                this.element.classList.add('e-icon-btn');\n            }\n            else {\n                span.classList.add('e-icon-' + this.iconPosition.toLowerCase());\n                if (this.iconPosition === 'Top' || this.iconPosition === 'Bottom') {\n                    this.element.classList.add('e-' + this.iconPosition.toLowerCase() + '-icon-btn');\n                }\n            }\n            let node = contElem.childNodes[0];\n            if (node && (this.iconPosition === 'Left' || this.iconPosition === 'Top')) {\n                contElem.insertBefore(span, node);\n            }\n            else {\n                contElem.appendChild(span);\n            }\n        }\n        this.element.appendChild(contElem);\n    }\n    clickHandler() {\n        if (this.element.classList.contains(PROGRESSACTIVE)) {\n            return;\n        }\n        this.startProgress();\n    }\n    startProgress(percent, progressTime) {\n        let clsList = this.element.classList;\n        let isVertical = clsList.contains('e-vertical');\n        clsList.add(PROGRESSACTIVE);\n        if (!(clsList.contains(HIDESPINNER))) {\n            showSpinner(this.element);\n        }\n        this.startAnimate(Date.now(), progressTime ? progressTime : 0, progressTime ? Date.now() - (this.duration * 1 / 100) : Date.now(), percent ? percent : 0, 0, this.step, 0, isVertical);\n        this.startContAnimate();\n    }\n    startAnimate(timestamp, progressTime, prevTime, percent, prevPercent, step, prevProgressTime, isVertical) {\n        try {\n            let args;\n            let timeDiff = timestamp - prevTime;\n            let stepTime = this.duration * step / 100;\n            let timeDiffBuffer = timeDiff ? (timeDiff < stepTime ? timeDiff - stepTime : timeDiff % stepTime) : 0;\n            this.progressTime = progressTime = progressTime + timeDiff - timeDiffBuffer;\n            prevTime = timestamp - timeDiffBuffer;\n            percent = percent + (timeDiff - timeDiffBuffer) / this.duration * 100;\n            prevPercent = ((progressTime - prevProgressTime) % stepTime === 0 || percent === 100) ? percent : prevPercent;\n            args = { percent: prevPercent, currentDuration: progressTime, step: step };\n            this.eIsVertical = isVertical;\n            if (percent === 0) {\n                this.trigger('begin', args, (observedArgs) => {\n                    this.successCallback(observedArgs, percent, prevPercent, progressTime, prevProgressTime, timeDiffBuffer, prevTime);\n                });\n            }\n            else if (percent === 100 || progressTime === this.duration) {\n                this.trigger('end', args, (observedArgs) => {\n                    this.successCallback(observedArgs, percent, prevPercent, progressTime, prevProgressTime, timeDiffBuffer, prevTime);\n                });\n            }\n            else {\n                this.trigger('progress', args, (observedArgs) => {\n                    this.successCallback(observedArgs, percent, prevPercent, progressTime, prevProgressTime, timeDiffBuffer, prevTime);\n                });\n            }\n        }\n        catch (e) {\n            cancelAnimationFrame(this.timerId);\n            this.trigger('fail', e);\n        }\n    }\n    successCallback(args, perc, pPerc, prgTim, pPrgTim, timDif, pTim) {\n        let percent = perc;\n        let prevPercent = pPerc;\n        let timeDiffBuffer = timDif;\n        let progressTime = prgTim;\n        let prevProgressTime = pPrgTim;\n        let prevTime = pTim;\n        let isVertical = this.eIsVertical;\n        if (percent !== args.percent && args.percent !== prevPercent) {\n            percent = args.percent;\n        }\n        this.percent = percent;\n        this.step = args.step;\n        if ((progressTime - prevProgressTime) % (this.duration * args.step / 100) === 0 || percent === 100) {\n            this.timerId = requestAnimationFrame(() => {\n                if (this.enableProgress) {\n                    this.getProgress().style[isVertical ? 'height' : 'width'] = percent + '%';\n                }\n                this.element.setAttribute('aria-valuenow', percent.toString());\n            });\n            prevPercent = percent;\n            prevProgressTime = progressTime;\n        }\n        if (!this.isPaused) {\n            if (progressTime < this.duration && percent < 100) {\n                this.interval = window.setTimeout(() => {\n                    this.startAnimate(Date.now(), progressTime, prevTime, percent, prevPercent, args.step, prevProgressTime, isVertical);\n                    // tslint:disable-next-line\n                }, (this.duration / 100) - timeDiffBuffer);\n            }\n            else {\n                this.interval = window.setTimeout(() => {\n                    this.progressTime = this.percent = 0;\n                    if (this.enableProgress) {\n                        this.getProgress().style[isVertical ? 'height' : 'width'] = '0%';\n                    }\n                    this.element.setAttribute('aria-valuenow', '0');\n                    this.hideSpin();\n                    // tslint:disable-next-line\n                }, 100);\n            }\n        }\n    }\n    startContAnimate() {\n        let ele = this.element.getElementsByClassName(CONTENTCLS)[0];\n        if (this.animationSettings.effect !== 'None') {\n            (new Animation({})).animate(ele, {\n                duration: this.animationSettings.duration,\n                name: 'Progress' + this.animationSettings.effect,\n                timingFunction: this.animationSettings.easing,\n                begin: () => {\n                    if (this.spinSettings.position === 'Center') {\n                        this.setSpinnerSize();\n                    }\n                },\n                end: () => {\n                    ele.classList.add('e-animate-end');\n                }\n            });\n        }\n        else if (this.spinSettings.position === 'Center') {\n            this.setSpinnerSize();\n        }\n    }\n    finishProgress() {\n        let clsList = this.element.classList;\n        let isVertical = clsList.contains('e-vertical');\n        clsList.add(PROGRESSACTIVE);\n        let args;\n        let count = 100;\n        for (let i = this.percent; i < count; i++) {\n            i += 10;\n            if (i > 100) {\n                i = 100;\n            }\n            if (this.enableProgress) {\n                this.getProgress().style[isVertical ? 'height' : 'width'] = (this.percent < 100) ? (i + '%') : '100%';\n            }\n        }\n        this.element.setAttribute('aria-valuenow', '0');\n        this.hideSpin();\n        args = { step: this.step, currentDuration: this.progressTime, percent: 100 };\n        clearTimeout(this.interval);\n        this.trigger('end', args);\n        this.progressTime = this.percent = 0;\n    }\n    setSpinnerSize() {\n        let ele = this.element.getElementsByClassName(CONTENTCLS)[0];\n        let spinner = this.getSpinner();\n        spinner.style.width = Math.max(spinner.offsetWidth, ele.offsetWidth) + 'px';\n        spinner.style.height = Math.max(spinner.offsetHeight, ele.offsetHeight) + 'px';\n        ele.classList.add('e-cont-animate');\n    }\n    hideSpin() {\n        let cont = this.element.getElementsByClassName(CONTENTCLS)[0];\n        if (!(this.element.classList.contains(HIDESPINNER))) {\n            hideSpinner(this.element);\n        }\n        this.element.classList.remove(PROGRESSACTIVE);\n        if (this.animationSettings.effect !== 'None') {\n            cont.classList.remove('e-animate-end');\n        }\n        if (this.spinSettings.position === 'Center') {\n            let ele = this.getSpinner();\n            cont.classList.remove('e-cont-animate');\n            ele.style.width = 'auto';\n            ele.style.height = 'auto';\n        }\n    }\n    setIconSpan() {\n        let cont = this.element.getElementsByClassName(CONTENTCLS)[0];\n        let iconSpan = this.element.getElementsByClassName('e-btn-icon')[0];\n        if (cont.childNodes[0] && (this.iconPosition === 'Left' || this.iconPosition === 'Top')) {\n            cont.insertBefore(iconSpan, cont.childNodes[0]);\n        }\n        else {\n            cont.appendChild(iconSpan);\n        }\n    }\n    setAria() {\n        attributes(this.element, {\n            'aria-label': this.element.textContent + ' progress', 'aria-valuemin': '0', 'aria-valuemax': '100', 'aria-valuenow': '0'\n        });\n    }\n    wireEvents() {\n        EventHandler.add(this.element, 'click', this.clickHandler, this);\n    }\n    unWireEvents() {\n        EventHandler.remove(this.element, 'click', this.clickHandler);\n    }\n    /**\n     * Called internally if any of the property value changed.\n     * @param  {ProgressButtonModel} newProp\n     * @param  {ProgressButtonModel} oldProp\n     * @returns void\n     * @private\n     */\n    onPropertyChanged(newProp, oldProp) {\n        let ele = this.element;\n        super.onPropertyChanged(newProp, oldProp);\n        for (let prop of Object.keys(newProp)) {\n            switch (prop) {\n                case 'content':\n                    if (isBlazor()) {\n                        let btnElem = this.element.querySelector('.e-btn-content');\n                        if (this.iconCss) {\n                            if (this.iconPosition === 'Left' || this.iconPosition === 'Top') {\n                                btnElem.childNodes[1].textContent = this.content;\n                            }\n                            else {\n                                btnElem.childNodes[0].textContent = this.content;\n                            }\n                        }\n                        else {\n                            btnElem.textContent = this.content;\n                        }\n                    }\n                    else {\n                        this.setContent();\n                        this.createSpinner();\n                        if (this.enableProgress) {\n                            this.createProgress();\n                        }\n                    }\n                    ele.setAttribute('aria-label', ele.textContent + ' progress');\n                    break;\n                case 'iconCss':\n                    if (!oldProp.iconCss) {\n                        this.setIconSpan();\n                    }\n                    break;\n                case 'iconPosition':\n                    this.setIconSpan();\n                    break;\n                case 'enableProgress':\n                    if (newProp.enableProgress) {\n                        this.createProgress();\n                    }\n                    else {\n                        remove(this.getProgress());\n                    }\n                    break;\n                case 'spinSettings':\n                    if (newProp.spinSettings.position) {\n                        ele.classList.remove('e-spin-' + oldProp.spinSettings.position.toLowerCase());\n                        this.setSpinPosition(this.getSpinner());\n                    }\n                    if (newProp.spinSettings.template || newProp.spinSettings.width) {\n                        ele.removeChild(this.getSpinner());\n                        this.createSpinner();\n                    }\n                    break;\n            }\n        }\n    }\n    /**\n     * Sets the focus to ProgressButton\n     * its native method\n     * @public\n     */\n    focusIn() {\n        this.element.focus();\n    }\n};\n__decorate$3([\n    Property(false)\n], ProgressButton.prototype, \"enableProgress\", void 0);\n__decorate$3([\n    Property(2000)\n], ProgressButton.prototype, \"duration\", void 0);\n__decorate$3([\n    Property('Left')\n], ProgressButton.prototype, \"iconPosition\", void 0);\n__decorate$3([\n    Property('')\n], ProgressButton.prototype, \"iconCss\", void 0);\n__decorate$3([\n    Property(false)\n], ProgressButton.prototype, \"disabled\", void 0);\n__decorate$3([\n    Property(false)\n], ProgressButton.prototype, \"isPrimary\", void 0);\n__decorate$3([\n    Property('')\n], ProgressButton.prototype, \"cssClass\", void 0);\n__decorate$3([\n    Property('')\n], ProgressButton.prototype, \"content\", void 0);\n__decorate$3([\n    Property(false)\n], ProgressButton.prototype, \"isToggle\", void 0);\n__decorate$3([\n    Property(false)\n], ProgressButton.prototype, \"enableHtmlSanitizer\", void 0);\n__decorate$3([\n    Complex({}, SpinSettings)\n], ProgressButton.prototype, \"spinSettings\", void 0);\n__decorate$3([\n    Complex({}, AnimationSettings)\n], ProgressButton.prototype, \"animationSettings\", void 0);\n__decorate$3([\n    Event()\n], ProgressButton.prototype, \"created\", void 0);\n__decorate$3([\n    Event()\n], ProgressButton.prototype, \"begin\", void 0);\n__decorate$3([\n    Event()\n], ProgressButton.prototype, \"progress\", void 0);\n__decorate$3([\n    Event()\n], ProgressButton.prototype, \"end\", void 0);\n__decorate$3([\n    Event()\n], ProgressButton.prototype, \"fail\", void 0);\nProgressButton = __decorate$3([\n    NotifyPropertyChanges\n], ProgressButton);\n\n/**\n * ProgressButton modules\n */\n\n/**\n * SplitButton all module\n */\n\nexport { getModel, upDownKeyHandler, setBlankIconStyle, Item, DropDownButton, SplitButton, Deferred, createButtonGroup, SpinSettings, AnimationSettings, ProgressButton };\n//# sourceMappingURL=ej2-splitbuttons.es2015.js.map\n","import '../jqwidgets/jqxcore';\nimport '../jqwidgets/jqxbuttons';\nimport { __decorate, __metadata } from 'tslib';\nimport { EventEmitter, ElementRef, Input, Output, Component, NgModule } from '@angular/core';\n\n/// <reference path=\"../../jqwidgets.d.ts\" />\r\nlet jqxButtonComponent = class jqxButtonComponent {\r\n    constructor(containerElement) {\r\n        this.autoCreate = true;\r\n        this.properties = ['disabled', 'height', 'imgSrc', 'imgWidth', 'imgHeight', 'imgPosition', 'roundedCorners', 'rtl', 'enableDefault', 'cursor', 'textPosition', 'textImageRelation', 'theme', 'template', 'width', 'value'];\r\n        // jqxButtonComponent events\r\n        this.onClick = new EventEmitter();\r\n        this.elementRef = containerElement;\r\n    }\r\n    ngOnInit() {\r\n        if (this.autoCreate) {\r\n            this.createComponent();\r\n        }\r\n    }\r\n    ;\r\n    ngOnChanges(changes) {\r\n        if (this.host) {\r\n            for (let i = 0; i < this.properties.length; i++) {\r\n                let attrName = 'attr' + this.properties[i].substring(0, 1).toUpperCase() + this.properties[i].substring(1);\r\n                let areEqual = false;\r\n                if (this[attrName] !== undefined) {\r\n                    if (typeof this[attrName] === 'object') {\r\n                        if (this[attrName] instanceof Array) {\r\n                            areEqual = this.arraysEqual(this[attrName], this.host.jqxButton(this.properties[i]));\r\n                        }\r\n                        if (areEqual) {\r\n                            return false;\r\n                        }\r\n                        this.host.jqxButton(this.properties[i], this[attrName]);\r\n                        continue;\r\n                    }\r\n                    if (this[attrName] !== this.host.jqxButton(this.properties[i])) {\r\n                        this.host.jqxButton(this.properties[i], this[attrName]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    arraysEqual(attrValue, hostValue) {\r\n        if ((attrValue && !hostValue) || (!attrValue && hostValue)) {\r\n            return false;\r\n        }\r\n        if (attrValue.length != hostValue.length) {\r\n            return false;\r\n        }\r\n        for (let i = 0; i < attrValue.length; i++) {\r\n            if (attrValue[i] !== hostValue[i]) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    manageAttributes() {\r\n        let options = {};\r\n        for (let i = 0; i < this.properties.length; i++) {\r\n            let attrName = 'attr' + this.properties[i].substring(0, 1).toUpperCase() + this.properties[i].substring(1);\r\n            if (this[attrName] !== undefined) {\r\n                options[this.properties[i]] = this[attrName];\r\n            }\r\n        }\r\n        return options;\r\n    }\r\n    moveClasses(parentEl, childEl) {\r\n        let classes = parentEl.classList;\r\n        if (classes.length > 0) {\r\n            childEl.classList.add(...classes);\r\n        }\r\n        parentEl.className = '';\r\n    }\r\n    moveStyles(parentEl, childEl) {\r\n        let style = parentEl.style.cssText;\r\n        childEl.style.cssText = style;\r\n        parentEl.style.cssText = '';\r\n    }\r\n    createComponent(options) {\r\n        if (this.host) {\r\n            return;\r\n        }\r\n        if (options) {\r\n            JQXLite.extend(options, this.manageAttributes());\r\n        }\r\n        else {\r\n            options = this.manageAttributes();\r\n        }\r\n        this.host = JQXLite(this.elementRef.nativeElement.firstChild);\r\n        this.moveClasses(this.elementRef.nativeElement, this.host[0]);\r\n        this.moveStyles(this.elementRef.nativeElement, this.host[0]);\r\n        this.widgetObject = jqwidgets.createInstance(this.host, 'jqxButton', options);\r\n        this.host = this.widgetObject['host'];\r\n        this.__wireEvents__();\r\n    }\r\n    createWidget(options) {\r\n        this.createComponent(options);\r\n    }\r\n    __updateRect__() {\r\n        if (this.host)\r\n            this.host.css({ width: this.attrWidth, height: this.attrHeight });\r\n    }\r\n    setOptions(options) {\r\n        this.host.jqxButton('setOptions', options);\r\n    }\r\n    // jqxButtonComponent properties\r\n    disabled(arg) {\r\n        if (arg !== undefined) {\r\n            this.host.jqxButton('disabled', arg);\r\n        }\r\n        else {\r\n            return this.host.jqxButton('disabled');\r\n        }\r\n    }\r\n    height(arg) {\r\n        if (arg !== undefined) {\r\n            this.host.jqxButton('height', arg);\r\n        }\r\n        else {\r\n            return this.host.jqxButton('height');\r\n        }\r\n    }\r\n    imgSrc(arg) {\r\n        if (arg !== undefined) {\r\n            this.host.jqxButton('imgSrc', arg);\r\n        }\r\n        else {\r\n            return this.host.jqxButton('imgSrc');\r\n        }\r\n    }\r\n    imgWidth(arg) {\r\n        if (arg !== undefined) {\r\n            this.host.jqxButton('imgWidth', arg);\r\n        }\r\n        else {\r\n            return this.host.jqxButton('imgWidth');\r\n        }\r\n    }\r\n    imgHeight(arg) {\r\n        if (arg !== undefined) {\r\n            this.host.jqxButton('imgHeight', arg);\r\n        }\r\n        else {\r\n            return this.host.jqxButton('imgHeight');\r\n        }\r\n    }\r\n    imgPosition(arg) {\r\n        if (arg !== undefined) {\r\n            this.host.jqxButton('imgPosition', arg);\r\n        }\r\n        else {\r\n            return this.host.jqxButton('imgPosition');\r\n        }\r\n    }\r\n    roundedCorners(arg) {\r\n        if (arg !== undefined) {\r\n            this.host.jqxButton('roundedCorners', arg);\r\n        }\r\n        else {\r\n            return this.host.jqxButton('roundedCorners');\r\n        }\r\n    }\r\n    rtl(arg) {\r\n        if (arg !== undefined) {\r\n            this.host.jqxButton('rtl', arg);\r\n        }\r\n        else {\r\n            return this.host.jqxButton('rtl');\r\n        }\r\n    }\r\n    enableDefault(arg) {\r\n        if (arg !== undefined) {\r\n            this.host.jqxButton('enableDefault', arg);\r\n        }\r\n        else {\r\n            return this.host.jqxButton('enableDefault');\r\n        }\r\n    }\r\n    cursor(arg) {\r\n        if (arg !== undefined) {\r\n            this.host.jqxButton('cursor', arg);\r\n        }\r\n        else {\r\n            return this.host.jqxButton('cursor');\r\n        }\r\n    }\r\n    textPosition(arg) {\r\n        if (arg !== undefined) {\r\n            this.host.jqxButton('textPosition', arg);\r\n        }\r\n        else {\r\n            return this.host.jqxButton('textPosition');\r\n        }\r\n    }\r\n    textImageRelation(arg) {\r\n        if (arg !== undefined) {\r\n            this.host.jqxButton('textImageRelation', arg);\r\n        }\r\n        else {\r\n            return this.host.jqxButton('textImageRelation');\r\n        }\r\n    }\r\n    theme(arg) {\r\n        if (arg !== undefined) {\r\n            this.host.jqxButton('theme', arg);\r\n        }\r\n        else {\r\n            return this.host.jqxButton('theme');\r\n        }\r\n    }\r\n    template(arg) {\r\n        if (arg !== undefined) {\r\n            this.host.jqxButton('template', arg);\r\n        }\r\n        else {\r\n            return this.host.jqxButton('template');\r\n        }\r\n    }\r\n    width(arg) {\r\n        if (arg !== undefined) {\r\n            this.host.jqxButton('width', arg);\r\n        }\r\n        else {\r\n            return this.host.jqxButton('width');\r\n        }\r\n    }\r\n    value(arg) {\r\n        if (arg !== undefined) {\r\n            this.host.jqxButton('value', arg);\r\n        }\r\n        else {\r\n            return this.host.jqxButton('value');\r\n        }\r\n    }\r\n    // jqxButtonComponent functions\r\n    destroy() {\r\n        this.host.jqxButton('destroy');\r\n    }\r\n    focus() {\r\n        this.host.jqxButton('focus');\r\n    }\r\n    render() {\r\n        this.host.jqxButton('render');\r\n    }\r\n    val(value) {\r\n        if (value !== undefined) {\r\n            return this.host.jqxButton('val', value);\r\n        }\r\n        else {\r\n            return this.host.jqxButton('val');\r\n        }\r\n    }\r\n    ;\r\n    __wireEvents__() {\r\n        this.host.on('click', (eventData) => { this.onClick.emit(eventData); });\r\n    }\r\n}; //jqxButtonComponent\r\njqxButtonComponent.ctorParameters = () => [\r\n    { type: ElementRef }\r\n];\r\n__decorate([\r\n    Input('disabled'),\r\n    __metadata(\"design:type\", Boolean)\r\n], jqxButtonComponent.prototype, \"attrDisabled\", void 0);\r\n__decorate([\r\n    Input('imgSrc'),\r\n    __metadata(\"design:type\", String)\r\n], jqxButtonComponent.prototype, \"attrImgSrc\", void 0);\r\n__decorate([\r\n    Input('imgWidth'),\r\n    __metadata(\"design:type\", Object)\r\n], jqxButtonComponent.prototype, \"attrImgWidth\", void 0);\r\n__decorate([\r\n    Input('imgHeight'),\r\n    __metadata(\"design:type\", Object)\r\n], jqxButtonComponent.prototype, \"attrImgHeight\", void 0);\r\n__decorate([\r\n    Input('imgPosition'),\r\n    __metadata(\"design:type\", String)\r\n], jqxButtonComponent.prototype, \"attrImgPosition\", void 0);\r\n__decorate([\r\n    Input('roundedCorners'),\r\n    __metadata(\"design:type\", String)\r\n], jqxButtonComponent.prototype, \"attrRoundedCorners\", void 0);\r\n__decorate([\r\n    Input('rtl'),\r\n    __metadata(\"design:type\", Boolean)\r\n], jqxButtonComponent.prototype, \"attrRtl\", void 0);\r\n__decorate([\r\n    Input('enableDefault'),\r\n    __metadata(\"design:type\", Boolean)\r\n], jqxButtonComponent.prototype, \"attrEnableDefault\", void 0);\r\n__decorate([\r\n    Input('cursor'),\r\n    __metadata(\"design:type\", Boolean)\r\n], jqxButtonComponent.prototype, \"attrCursor\", void 0);\r\n__decorate([\r\n    Input('textPosition'),\r\n    __metadata(\"design:type\", String)\r\n], jqxButtonComponent.prototype, \"attrTextPosition\", void 0);\r\n__decorate([\r\n    Input('textImageRelation'),\r\n    __metadata(\"design:type\", String)\r\n], jqxButtonComponent.prototype, \"attrTextImageRelation\", void 0);\r\n__decorate([\r\n    Input('theme'),\r\n    __metadata(\"design:type\", String)\r\n], jqxButtonComponent.prototype, \"attrTheme\", void 0);\r\n__decorate([\r\n    Input('template'),\r\n    __metadata(\"design:type\", String)\r\n], jqxButtonComponent.prototype, \"attrTemplate\", void 0);\r\n__decorate([\r\n    Input('value'),\r\n    __metadata(\"design:type\", String)\r\n], jqxButtonComponent.prototype, \"attrValue\", void 0);\r\n__decorate([\r\n    Input('width'),\r\n    __metadata(\"design:type\", Object)\r\n], jqxButtonComponent.prototype, \"attrWidth\", void 0);\r\n__decorate([\r\n    Input('height'),\r\n    __metadata(\"design:type\", Object)\r\n], jqxButtonComponent.prototype, \"attrHeight\", void 0);\r\n__decorate([\r\n    Input('auto-create'),\r\n    __metadata(\"design:type\", Boolean)\r\n], jqxButtonComponent.prototype, \"autoCreate\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", Object)\r\n], jqxButtonComponent.prototype, \"onClick\", void 0);\r\njqxButtonComponent = __decorate([\r\n    Component({\r\n        selector: 'jqxButton',\r\n        template: '<button><ng-content></ng-content></button>'\r\n    }),\r\n    __metadata(\"design:paramtypes\", [ElementRef])\r\n], jqxButtonComponent);\n\nlet jqxButtonModule = class jqxButtonModule {\r\n};\r\njqxButtonModule = __decorate([\r\n    NgModule({\r\n        imports: [],\r\n        declarations: [jqxButtonComponent],\r\n        exports: [jqxButtonComponent]\r\n    })\r\n], jqxButtonModule);\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { jqxButtonComponent, jqxButtonModule };\n","import '../jqwidgets/jqxcore';\nimport '../jqwidgets/jqxdata';\nimport '../jqwidgets/jqxdata.export';\nimport '../jqwidgets/jqxbuttons';\nimport '../jqwidgets/jqxcheckbox';\nimport '../jqwidgets/jqxtooltip';\nimport '../jqwidgets/jqxscrollbar';\nimport '../jqwidgets/jqxlistbox';\nimport '../jqwidgets/jqxcombobox';\nimport '../jqwidgets/jqxnumberinput';\nimport '../jqwidgets/jqxdropdownlist';\nimport '../jqwidgets/jqxdatatable';\nimport '../jqwidgets/jqxtreegrid';\nimport { __decorate, __metadata } from 'tslib';\nimport { EventEmitter, ElementRef, Input, Output, Component, NgModule } from '@angular/core';\n\n/// <reference path=\"../../jqwidgets.d.ts\" />\r\nlet jqxTreeGridComponent = class jqxTreeGridComponent {\r\n    constructor(containerElement) {\r\n        this.autoCreate = true;\r\n        this.properties = ['altRows', 'autoRowHeight', 'aggregatesHeight', 'autoShowLoadElement', 'checkboxes', 'columnsHeight', 'columns', 'columnGroups', 'columnsResize', 'columnsReorder', 'disabled', 'editable', 'editSettings', 'exportSettings', 'enableHover', 'enableBrowserSelection', 'filterable', 'filterHeight', 'filterMode', 'height', 'hierarchicalCheckboxes', 'icons', 'incrementalSearch', 'localization', 'pagerHeight', 'pageSize', 'pageSizeOptions', 'pageable', 'pagerPosition', 'pagerMode', 'pageSizeMode', 'pagerButtonsCount', 'pagerRenderer', 'ready', 'rowDetails', 'rowDetailsRenderer', 'renderToolbar', 'renderStatusBar', 'rendering', 'rendered', 'rtl', 'source', 'sortable', 'showAggregates', 'showSubAggregates', 'showToolbar', 'showStatusbar', 'statusBarHeight', 'scrollBarSize', 'selectionMode', 'showHeader', 'theme', 'toolbarHeight', 'width', 'virtualModeCreateRecords', 'virtualModeRecordCreating'];\r\n        // jqxTreeGridComponent events\r\n        this.onBindingComplete = new EventEmitter();\r\n        this.onCellBeginEdit = new EventEmitter();\r\n        this.onCellEndEdit = new EventEmitter();\r\n        this.onCellValueChanged = new EventEmitter();\r\n        this.onColumnResized = new EventEmitter();\r\n        this.onColumnReordered = new EventEmitter();\r\n        this.onFilter = new EventEmitter();\r\n        this.onPageChanged = new EventEmitter();\r\n        this.onPageSizeChanged = new EventEmitter();\r\n        this.onRowClick = new EventEmitter();\r\n        this.onRowDoubleClick = new EventEmitter();\r\n        this.onRowSelect = new EventEmitter();\r\n        this.onRowUnselect = new EventEmitter();\r\n        this.onRowBeginEdit = new EventEmitter();\r\n        this.onRowEndEdit = new EventEmitter();\r\n        this.onRowExpand = new EventEmitter();\r\n        this.onRowCollapse = new EventEmitter();\r\n        this.onRowCheck = new EventEmitter();\r\n        this.onRowUncheck = new EventEmitter();\r\n        this.onSort = new EventEmitter();\r\n        this.elementRef = containerElement;\r\n    }\r\n    ngOnInit() {\r\n    }\r\n    ;\r\n    ngAfterViewInit() {\r\n        let children = JQXLite(this.elementRef.nativeElement.children).find('tr');\r\n        let html = '';\r\n        let options = {};\r\n        if (children.length > 0) {\r\n            this.container = document.createElement('div');\r\n            html = this.elementRef.nativeElement.innerHTML;\r\n            this.container.appendChild(this.elementRef.nativeElement.firstChild);\r\n            this.elementRef.nativeElement.innerHTML = html;\r\n            this.content = html;\r\n            let result = JQXLite.jqx.parseSourceTag(this.container);\r\n            if (this['attrColumns'] !== undefined) {\r\n                ;\r\n                options['source'] = result.source;\r\n            }\r\n            else {\r\n                options['source'] = result.source;\r\n                options['columns'] = result.columns;\r\n            }\r\n        }\r\n        if (this.autoCreate) {\r\n            this.createComponent(options);\r\n        }\r\n    }\r\n    ;\r\n    ngAfterViewChecked() {\r\n        if (this.container) {\r\n            if (this.content !== this.container.innerHTML) {\r\n                this.content = this.container.innerHTML;\r\n                let result = JQXLite.jqx.parseSourceTag(this.container);\r\n                let columns = this.host.jqxGrid('columns');\r\n                if (columns.length === 0) {\r\n                    this.host.jqxGrid({ source: result.source, columns: result.columns });\r\n                }\r\n                else {\r\n                    this.host.jqxGrid({ source: result.source });\r\n                }\r\n            }\r\n        }\r\n    }\r\n    ;\r\n    ngOnChanges(changes) {\r\n        if (this.host) {\r\n            for (let i = 0; i < this.properties.length; i++) {\r\n                let attrName = 'attr' + this.properties[i].substring(0, 1).toUpperCase() + this.properties[i].substring(1);\r\n                let areEqual = false;\r\n                if (this[attrName] !== undefined) {\r\n                    if (typeof this[attrName] === 'object') {\r\n                        if (this[attrName] instanceof Array) {\r\n                            areEqual = this.arraysEqual(this[attrName], this.host.jqxTreeGrid(this.properties[i]));\r\n                        }\r\n                        if (areEqual) {\r\n                            return false;\r\n                        }\r\n                        this.host.jqxTreeGrid(this.properties[i], this[attrName]);\r\n                        continue;\r\n                    }\r\n                    if (this[attrName] !== this.host.jqxTreeGrid(this.properties[i])) {\r\n                        this.host.jqxTreeGrid(this.properties[i], this[attrName]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    arraysEqual(attrValue, hostValue) {\r\n        if ((attrValue && !hostValue) || (!attrValue && hostValue)) {\r\n            return false;\r\n        }\r\n        if (attrValue.length != hostValue.length) {\r\n            return false;\r\n        }\r\n        for (let i = 0; i < attrValue.length; i++) {\r\n            if (attrValue[i] !== hostValue[i]) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    manageAttributes() {\r\n        let options = {};\r\n        for (let i = 0; i < this.properties.length; i++) {\r\n            let attrName = 'attr' + this.properties[i].substring(0, 1).toUpperCase() + this.properties[i].substring(1);\r\n            if (this[attrName] !== undefined) {\r\n                options[this.properties[i]] = this[attrName];\r\n            }\r\n        }\r\n        return options;\r\n    }\r\n    moveClasses(parentEl, childEl) {\r\n        let classes = parentEl.classList;\r\n        if (classes.length > 0) {\r\n            childEl.classList.add(...classes);\r\n        }\r\n        parentEl.className = '';\r\n    }\r\n    moveStyles(parentEl, childEl) {\r\n        let style = parentEl.style.cssText;\r\n        childEl.style.cssText = style;\r\n        parentEl.style.cssText = '';\r\n    }\r\n    createComponent(options) {\r\n        if (this.host) {\r\n            return;\r\n        }\r\n        if (options) {\r\n            JQXLite.extend(options, this.manageAttributes());\r\n        }\r\n        else {\r\n            options = this.manageAttributes();\r\n        }\r\n        this.host = JQXLite(this.elementRef.nativeElement.firstChild);\r\n        this.moveClasses(this.elementRef.nativeElement, this.host[0]);\r\n        this.moveStyles(this.elementRef.nativeElement, this.host[0]);\r\n        this.__wireEvents__();\r\n        this.widgetObject = jqwidgets.createInstance(this.host, 'jqxTreeGrid', options);\r\n    }\r\n    createWidget(options) {\r\n        this.createComponent(options);\r\n    }\r\n    __updateRect__() {\r\n        if (this.host)\r\n            this.host.css({ width: this.attrWidth, height: this.attrHeight });\r\n    }\r\n    setOptions(options) {\r\n        this.host.jqxTreeGrid('setOptions', options);\r\n    }\r\n    // jqxTreeGridComponent properties\r\n    altRows(arg) {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        if (arg !== undefined) {\r\n            this.host.jqxTreeGrid('altRows', arg);\r\n        }\r\n        else {\r\n            return this.host.jqxTreeGrid('altRows');\r\n        }\r\n    }\r\n    autoRowHeight(arg) {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        if (arg !== undefined) {\r\n            this.host.jqxTreeGrid('autoRowHeight', arg);\r\n        }\r\n        else {\r\n            return this.host.jqxTreeGrid('autoRowHeight');\r\n        }\r\n    }\r\n    aggregatesHeight(arg) {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        if (arg !== undefined) {\r\n            this.host.jqxTreeGrid('aggregatesHeight', arg);\r\n        }\r\n        else {\r\n            return this.host.jqxTreeGrid('aggregatesHeight');\r\n        }\r\n    }\r\n    autoShowLoadElement(arg) {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        if (arg !== undefined) {\r\n            this.host.jqxTreeGrid('autoShowLoadElement', arg);\r\n        }\r\n        else {\r\n            return this.host.jqxTreeGrid('autoShowLoadElement');\r\n        }\r\n    }\r\n    checkboxes(arg) {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        if (arg !== undefined) {\r\n            this.host.jqxTreeGrid('checkboxes', arg);\r\n        }\r\n        else {\r\n            return this.host.jqxTreeGrid('checkboxes');\r\n        }\r\n    }\r\n    columnsHeight(arg) {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        if (arg !== undefined) {\r\n            this.host.jqxTreeGrid('columnsHeight', arg);\r\n        }\r\n        else {\r\n            return this.host.jqxTreeGrid('columnsHeight');\r\n        }\r\n    }\r\n    columns(arg) {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        if (arg !== undefined) {\r\n            this.host.jqxTreeGrid('columns', arg);\r\n        }\r\n        else {\r\n            return this.host.jqxTreeGrid('columns');\r\n        }\r\n    }\r\n    columnGroups(arg) {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        if (arg !== undefined) {\r\n            this.host.jqxTreeGrid('columnGroups', arg);\r\n        }\r\n        else {\r\n            return this.host.jqxTreeGrid('columnGroups');\r\n        }\r\n    }\r\n    columnsResize(arg) {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        if (arg !== undefined) {\r\n            this.host.jqxTreeGrid('columnsResize', arg);\r\n        }\r\n        else {\r\n            return this.host.jqxTreeGrid('columnsResize');\r\n        }\r\n    }\r\n    columnsReorder(arg) {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        if (arg !== undefined) {\r\n            this.host.jqxTreeGrid('columnsReorder', arg);\r\n        }\r\n        else {\r\n            return this.host.jqxTreeGrid('columnsReorder');\r\n        }\r\n    }\r\n    disabled(arg) {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        if (arg !== undefined) {\r\n            this.host.jqxTreeGrid('disabled', arg);\r\n        }\r\n        else {\r\n            return this.host.jqxTreeGrid('disabled');\r\n        }\r\n    }\r\n    editable(arg) {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        if (arg !== undefined) {\r\n            this.host.jqxTreeGrid('editable', arg);\r\n        }\r\n        else {\r\n            return this.host.jqxTreeGrid('editable');\r\n        }\r\n    }\r\n    editSettings(arg) {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        if (arg !== undefined) {\r\n            this.host.jqxTreeGrid('editSettings', arg);\r\n        }\r\n        else {\r\n            return this.host.jqxTreeGrid('editSettings');\r\n        }\r\n    }\r\n    exportSettings(arg) {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        if (arg !== undefined) {\r\n            this.host.jqxTreeGrid('exportSettings', arg);\r\n        }\r\n        else {\r\n            return this.host.jqxTreeGrid('exportSettings');\r\n        }\r\n    }\r\n    enableHover(arg) {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        if (arg !== undefined) {\r\n            this.host.jqxTreeGrid('enableHover', arg);\r\n        }\r\n        else {\r\n            return this.host.jqxTreeGrid('enableHover');\r\n        }\r\n    }\r\n    enableBrowserSelection(arg) {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        if (arg !== undefined) {\r\n            this.host.jqxTreeGrid('enableBrowserSelection', arg);\r\n        }\r\n        else {\r\n            return this.host.jqxTreeGrid('enableBrowserSelection');\r\n        }\r\n    }\r\n    filterable(arg) {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        if (arg !== undefined) {\r\n            this.host.jqxTreeGrid('filterable', arg);\r\n        }\r\n        else {\r\n            return this.host.jqxTreeGrid('filterable');\r\n        }\r\n    }\r\n    filterHeight(arg) {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        if (arg !== undefined) {\r\n            this.host.jqxTreeGrid('filterHeight', arg);\r\n        }\r\n        else {\r\n            return this.host.jqxTreeGrid('filterHeight');\r\n        }\r\n    }\r\n    filterMode(arg) {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        if (arg !== undefined) {\r\n            this.host.jqxTreeGrid('filterMode', arg);\r\n        }\r\n        else {\r\n            return this.host.jqxTreeGrid('filterMode');\r\n        }\r\n    }\r\n    height(arg) {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        if (arg !== undefined) {\r\n            this.host.jqxTreeGrid('height', arg);\r\n        }\r\n        else {\r\n            return this.host.jqxTreeGrid('height');\r\n        }\r\n    }\r\n    hierarchicalCheckboxes(arg) {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        if (arg !== undefined) {\r\n            this.host.jqxTreeGrid('hierarchicalCheckboxes', arg);\r\n        }\r\n        else {\r\n            return this.host.jqxTreeGrid('hierarchicalCheckboxes');\r\n        }\r\n    }\r\n    icons(arg) {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        if (arg !== undefined) {\r\n            this.host.jqxTreeGrid('icons', arg);\r\n        }\r\n        else {\r\n            return this.host.jqxTreeGrid('icons');\r\n        }\r\n    }\r\n    incrementalSearch(arg) {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        if (arg !== undefined) {\r\n            this.host.jqxTreeGrid('incrementalSearch', arg);\r\n        }\r\n        else {\r\n            return this.host.jqxTreeGrid('incrementalSearch');\r\n        }\r\n    }\r\n    localization(arg) {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        if (arg !== undefined) {\r\n            this.host.jqxTreeGrid('localization', arg);\r\n        }\r\n        else {\r\n            return this.host.jqxTreeGrid('localization');\r\n        }\r\n    }\r\n    pagerHeight(arg) {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        if (arg !== undefined) {\r\n            this.host.jqxTreeGrid('pagerHeight', arg);\r\n        }\r\n        else {\r\n            return this.host.jqxTreeGrid('pagerHeight');\r\n        }\r\n    }\r\n    pageSize(arg) {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        if (arg !== undefined) {\r\n            this.host.jqxTreeGrid('pageSize', arg);\r\n        }\r\n        else {\r\n            return this.host.jqxTreeGrid('pageSize');\r\n        }\r\n    }\r\n    pageSizeOptions(arg) {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        if (arg !== undefined) {\r\n            this.host.jqxTreeGrid('pageSizeOptions', arg);\r\n        }\r\n        else {\r\n            return this.host.jqxTreeGrid('pageSizeOptions');\r\n        }\r\n    }\r\n    pageable(arg) {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        if (arg !== undefined) {\r\n            this.host.jqxTreeGrid('pageable', arg);\r\n        }\r\n        else {\r\n            return this.host.jqxTreeGrid('pageable');\r\n        }\r\n    }\r\n    pagerPosition(arg) {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        if (arg !== undefined) {\r\n            this.host.jqxTreeGrid('pagerPosition', arg);\r\n        }\r\n        else {\r\n            return this.host.jqxTreeGrid('pagerPosition');\r\n        }\r\n    }\r\n    pagerMode(arg) {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        if (arg !== undefined) {\r\n            this.host.jqxTreeGrid('pagerMode', arg);\r\n        }\r\n        else {\r\n            return this.host.jqxTreeGrid('pagerMode');\r\n        }\r\n    }\r\n    pageSizeMode(arg) {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        if (arg !== undefined) {\r\n            this.host.jqxTreeGrid('pageSizeMode', arg);\r\n        }\r\n        else {\r\n            return this.host.jqxTreeGrid('pageSizeMode');\r\n        }\r\n    }\r\n    pagerButtonsCount(arg) {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        if (arg !== undefined) {\r\n            this.host.jqxTreeGrid('pagerButtonsCount', arg);\r\n        }\r\n        else {\r\n            return this.host.jqxTreeGrid('pagerButtonsCount');\r\n        }\r\n    }\r\n    pagerRenderer(arg) {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        if (arg !== undefined) {\r\n            this.host.jqxTreeGrid('pagerRenderer', arg);\r\n        }\r\n        else {\r\n            return this.host.jqxTreeGrid('pagerRenderer');\r\n        }\r\n    }\r\n    ready(arg) {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        if (arg !== undefined) {\r\n            this.host.jqxTreeGrid('ready', arg);\r\n        }\r\n        else {\r\n            return this.host.jqxTreeGrid('ready');\r\n        }\r\n    }\r\n    rowDetails(arg) {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        if (arg !== undefined) {\r\n            this.host.jqxTreeGrid('rowDetails', arg);\r\n        }\r\n        else {\r\n            return this.host.jqxTreeGrid('rowDetails');\r\n        }\r\n    }\r\n    rowDetailsRenderer(arg) {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        if (arg !== undefined) {\r\n            this.host.jqxTreeGrid('rowDetailsRenderer', arg);\r\n        }\r\n        else {\r\n            return this.host.jqxTreeGrid('rowDetailsRenderer');\r\n        }\r\n    }\r\n    renderToolbar(arg) {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        if (arg !== undefined) {\r\n            this.host.jqxTreeGrid('renderToolbar', arg);\r\n        }\r\n        else {\r\n            return this.host.jqxTreeGrid('renderToolbar');\r\n        }\r\n    }\r\n    renderStatusBar(arg) {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        if (arg !== undefined) {\r\n            this.host.jqxTreeGrid('renderStatusBar', arg);\r\n        }\r\n        else {\r\n            return this.host.jqxTreeGrid('renderStatusBar');\r\n        }\r\n    }\r\n    rendering(arg) {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        if (arg !== undefined) {\r\n            this.host.jqxTreeGrid('rendering', arg);\r\n        }\r\n        else {\r\n            return this.host.jqxTreeGrid('rendering');\r\n        }\r\n    }\r\n    rendered(arg) {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        if (arg !== undefined) {\r\n            this.host.jqxTreeGrid('rendered', arg);\r\n        }\r\n        else {\r\n            return this.host.jqxTreeGrid('rendered');\r\n        }\r\n    }\r\n    rtl(arg) {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        if (arg !== undefined) {\r\n            this.host.jqxTreeGrid('rtl', arg);\r\n        }\r\n        else {\r\n            return this.host.jqxTreeGrid('rtl');\r\n        }\r\n    }\r\n    source(arg) {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        if (arg !== undefined) {\r\n            this.host.jqxTreeGrid('source', arg);\r\n        }\r\n        else {\r\n            return this.host.jqxTreeGrid('source');\r\n        }\r\n    }\r\n    sortable(arg) {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        if (arg !== undefined) {\r\n            this.host.jqxTreeGrid('sortable', arg);\r\n        }\r\n        else {\r\n            return this.host.jqxTreeGrid('sortable');\r\n        }\r\n    }\r\n    showAggregates(arg) {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        if (arg !== undefined) {\r\n            this.host.jqxTreeGrid('showAggregates', arg);\r\n        }\r\n        else {\r\n            return this.host.jqxTreeGrid('showAggregates');\r\n        }\r\n    }\r\n    showSubAggregates(arg) {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        if (arg !== undefined) {\r\n            this.host.jqxTreeGrid('showSubAggregates', arg);\r\n        }\r\n        else {\r\n            return this.host.jqxTreeGrid('showSubAggregates');\r\n        }\r\n    }\r\n    showToolbar(arg) {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        if (arg !== undefined) {\r\n            this.host.jqxTreeGrid('showToolbar', arg);\r\n        }\r\n        else {\r\n            return this.host.jqxTreeGrid('showToolbar');\r\n        }\r\n    }\r\n    showStatusbar(arg) {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        if (arg !== undefined) {\r\n            this.host.jqxTreeGrid('showStatusbar', arg);\r\n        }\r\n        else {\r\n            return this.host.jqxTreeGrid('showStatusbar');\r\n        }\r\n    }\r\n    statusBarHeight(arg) {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        if (arg !== undefined) {\r\n            this.host.jqxTreeGrid('statusBarHeight', arg);\r\n        }\r\n        else {\r\n            return this.host.jqxTreeGrid('statusBarHeight');\r\n        }\r\n    }\r\n    scrollBarSize(arg) {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        if (arg !== undefined) {\r\n            this.host.jqxTreeGrid('scrollBarSize', arg);\r\n        }\r\n        else {\r\n            return this.host.jqxTreeGrid('scrollBarSize');\r\n        }\r\n    }\r\n    selectionMode(arg) {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        if (arg !== undefined) {\r\n            this.host.jqxTreeGrid('selectionMode', arg);\r\n        }\r\n        else {\r\n            return this.host.jqxTreeGrid('selectionMode');\r\n        }\r\n    }\r\n    showHeader(arg) {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        if (arg !== undefined) {\r\n            this.host.jqxTreeGrid('showHeader', arg);\r\n        }\r\n        else {\r\n            return this.host.jqxTreeGrid('showHeader');\r\n        }\r\n    }\r\n    theme(arg) {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        if (arg !== undefined) {\r\n            this.host.jqxTreeGrid('theme', arg);\r\n        }\r\n        else {\r\n            return this.host.jqxTreeGrid('theme');\r\n        }\r\n    }\r\n    toolbarHeight(arg) {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        if (arg !== undefined) {\r\n            this.host.jqxTreeGrid('toolbarHeight', arg);\r\n        }\r\n        else {\r\n            return this.host.jqxTreeGrid('toolbarHeight');\r\n        }\r\n    }\r\n    width(arg) {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        if (arg !== undefined) {\r\n            this.host.jqxTreeGrid('width', arg);\r\n        }\r\n        else {\r\n            return this.host.jqxTreeGrid('width');\r\n        }\r\n    }\r\n    virtualModeCreateRecords(arg) {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        if (arg !== undefined) {\r\n            this.host.jqxTreeGrid('virtualModeCreateRecords', arg);\r\n        }\r\n        else {\r\n            return this.host.jqxTreeGrid('virtualModeCreateRecords');\r\n        }\r\n    }\r\n    virtualModeRecordCreating(arg) {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        if (arg !== undefined) {\r\n            this.host.jqxTreeGrid('virtualModeRecordCreating', arg);\r\n        }\r\n        else {\r\n            return this.host.jqxTreeGrid('virtualModeRecordCreating');\r\n        }\r\n    }\r\n    // jqxTreeGridComponent functions\r\n    addRow(rowKey, rowData, rowPosition, parent) {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        this.host.jqxTreeGrid('addRow', rowKey, rowData, rowPosition, parent);\r\n    }\r\n    addFilter(dataField, filerGroup) {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        this.host.jqxTreeGrid('addFilter', dataField, filerGroup);\r\n    }\r\n    applyFilters() {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        this.host.jqxTreeGrid('applyFilters');\r\n    }\r\n    beginUpdate() {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        this.host.jqxTreeGrid('beginUpdate');\r\n    }\r\n    beginRowEdit(rowKey) {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        this.host.jqxTreeGrid('beginRowEdit', rowKey);\r\n    }\r\n    beginCellEdit(rowKey, dataField) {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        this.host.jqxTreeGrid('beginCellEdit', rowKey, dataField);\r\n    }\r\n    clearSelection() {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        this.host.jqxTreeGrid('clearSelection');\r\n    }\r\n    clearFilters() {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        this.host.jqxTreeGrid('clearFilters');\r\n    }\r\n    clear() {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        this.host.jqxTreeGrid('clear');\r\n    }\r\n    checkRow(rowKey) {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        this.host.jqxTreeGrid('checkRow', rowKey);\r\n    }\r\n    collapseRow(rowKey) {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        this.host.jqxTreeGrid('collapseRow', rowKey);\r\n    }\r\n    collapseAll() {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        this.host.jqxTreeGrid('collapseAll');\r\n    }\r\n    destroy() {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        this.host.jqxTreeGrid('destroy');\r\n    }\r\n    deleteRow(rowKey) {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        this.host.jqxTreeGrid('deleteRow', rowKey);\r\n    }\r\n    expandRow(rowKey) {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        this.host.jqxTreeGrid('expandRow', rowKey);\r\n    }\r\n    expandAll() {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        this.host.jqxTreeGrid('expandAll');\r\n    }\r\n    endUpdate() {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        this.host.jqxTreeGrid('endUpdate');\r\n    }\r\n    ensureRowVisible(rowKey) {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        this.host.jqxTreeGrid('ensureRowVisible', rowKey);\r\n    }\r\n    endRowEdit(rowKey, cancelChanges) {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        this.host.jqxTreeGrid('endRowEdit', rowKey, cancelChanges);\r\n    }\r\n    endCellEdit(rowKey, dataField, cancelChanges) {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        this.host.jqxTreeGrid('endCellEdit', rowKey, dataField, cancelChanges);\r\n    }\r\n    exportData(exportDataType) {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        return this.host.jqxTreeGrid('exportData', exportDataType);\r\n    }\r\n    focus() {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        this.host.jqxTreeGrid('focus');\r\n    }\r\n    getColumnProperty(dataField, propertyName) {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        return this.host.jqxTreeGrid('getColumnProperty', dataField, propertyName);\r\n    }\r\n    goToPage(pageIndex) {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        this.host.jqxTreeGrid('goToPage', pageIndex);\r\n    }\r\n    goToPrevPage() {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        this.host.jqxTreeGrid('goToPrevPage');\r\n    }\r\n    goToNextPage() {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        this.host.jqxTreeGrid('goToNextPage');\r\n    }\r\n    getSelection() {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        return this.host.jqxTreeGrid('getSelection');\r\n    }\r\n    getKey(row) {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        return this.host.jqxTreeGrid('getKey', row);\r\n    }\r\n    getRow(rowKey) {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        return this.host.jqxTreeGrid('getRow', rowKey);\r\n    }\r\n    getRows() {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        return this.host.jqxTreeGrid('getRows');\r\n    }\r\n    getCheckedRows() {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        return this.host.jqxTreeGrid('getCheckedRows');\r\n    }\r\n    getView() {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        return this.host.jqxTreeGrid('getView');\r\n    }\r\n    getCellValue(rowKey, dataField) {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        return this.host.jqxTreeGrid('getCellValue', rowKey, dataField);\r\n    }\r\n    hideColumn(dataField) {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        this.host.jqxTreeGrid('hideColumn', dataField);\r\n    }\r\n    isBindingCompleted() {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        return this.host.jqxTreeGrid('isBindingCompleted');\r\n    }\r\n    lockRow(rowKey) {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        this.host.jqxTreeGrid('lockRow', rowKey);\r\n    }\r\n    refresh() {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        this.host.jqxTreeGrid('refresh');\r\n    }\r\n    render() {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        this.host.jqxTreeGrid('render');\r\n    }\r\n    removeFilter(dataField) {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        this.host.jqxTreeGrid('removeFilter', dataField);\r\n    }\r\n    scrollOffset(top, left) {\r\n        if (top !== undefined || left !== undefined) {\r\n            this.host.jqxTreeGrid('scrollOffset', top, left);\r\n        }\r\n        else {\r\n            return this.host.jqxTreeGrid('scrollOffset');\r\n        }\r\n    }\r\n    ;\r\n    setColumnProperty(dataField, propertyName, propertyValue) {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        this.host.jqxTreeGrid('setColumnProperty', dataField, propertyName, propertyValue);\r\n    }\r\n    showColumn(dataField) {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        this.host.jqxTreeGrid('showColumn', dataField);\r\n    }\r\n    selectRow(rowId) {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        this.host.jqxTreeGrid('selectRow', rowId);\r\n    }\r\n    setCellValue(rowId, dataField, cellValue) {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        this.host.jqxTreeGrid('setCellValue', rowId, dataField, cellValue);\r\n    }\r\n    sortBy(dataField, sortOrder) {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        this.host.jqxTreeGrid('sortBy', dataField, sortOrder);\r\n    }\r\n    updating() {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        return this.host.jqxTreeGrid('updating');\r\n    }\r\n    updateBoundData() {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        this.host.jqxTreeGrid('updateBoundData');\r\n    }\r\n    unselectRow(rowId) {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        this.host.jqxTreeGrid('unselectRow', rowId);\r\n    }\r\n    uncheckRow(rowId) {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        this.host.jqxTreeGrid('uncheckRow', rowId);\r\n    }\r\n    updateRow(rowId, data) {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        this.host.jqxTreeGrid('updateRow', rowId, data);\r\n    }\r\n    unlockRow(rowId) {\r\n        if (this.autoCreate && !this.host) {\r\n            this.createComponent();\r\n        }\r\n        this.host.jqxTreeGrid('unlockRow', rowId);\r\n    }\r\n    __wireEvents__() {\r\n        this.host.on('bindingComplete', (eventData) => { this.onBindingComplete.emit(eventData); });\r\n        this.host.on('cellBeginEdit', (eventData) => { this.onCellBeginEdit.emit(eventData); });\r\n        this.host.on('cellEndEdit', (eventData) => { this.onCellEndEdit.emit(eventData); });\r\n        this.host.on('cellValueChanged', (eventData) => { this.onCellValueChanged.emit(eventData); });\r\n        this.host.on('columnResized', (eventData) => { this.onColumnResized.emit(eventData); });\r\n        this.host.on('columnReordered', (eventData) => { this.onColumnReordered.emit(eventData); });\r\n        this.host.on('filter', (eventData) => { this.onFilter.emit(eventData); });\r\n        this.host.on('pageChanged', (eventData) => { this.onPageChanged.emit(eventData); });\r\n        this.host.on('pageSizeChanged', (eventData) => { this.onPageSizeChanged.emit(eventData); });\r\n        this.host.on('rowClick', (eventData) => { this.onRowClick.emit(eventData); });\r\n        this.host.on('rowDoubleClick', (eventData) => { this.onRowDoubleClick.emit(eventData); });\r\n        this.host.on('rowSelect', (eventData) => { this.onRowSelect.emit(eventData); });\r\n        this.host.on('rowUnselect', (eventData) => { this.onRowUnselect.emit(eventData); });\r\n        this.host.on('rowBeginEdit', (eventData) => { this.onRowBeginEdit.emit(eventData); });\r\n        this.host.on('rowEndEdit', (eventData) => { this.onRowEndEdit.emit(eventData); });\r\n        this.host.on('rowExpand', (eventData) => { this.onRowExpand.emit(eventData); });\r\n        this.host.on('rowCollapse', (eventData) => { this.onRowCollapse.emit(eventData); });\r\n        this.host.on('rowCheck', (eventData) => { this.onRowCheck.emit(eventData); });\r\n        this.host.on('rowUncheck', (eventData) => { this.onRowUncheck.emit(eventData); });\r\n        this.host.on('sort', (eventData) => { this.onSort.emit(eventData); });\r\n    }\r\n}; //jqxTreeGridComponent\r\njqxTreeGridComponent.ctorParameters = () => [\r\n    { type: ElementRef }\r\n];\r\n__decorate([\r\n    Input('altRows'),\r\n    __metadata(\"design:type\", Boolean)\r\n], jqxTreeGridComponent.prototype, \"attrAltRows\", void 0);\r\n__decorate([\r\n    Input('autoRowHeight'),\r\n    __metadata(\"design:type\", Boolean)\r\n], jqxTreeGridComponent.prototype, \"attrAutoRowHeight\", void 0);\r\n__decorate([\r\n    Input('aggregatesHeight'),\r\n    __metadata(\"design:type\", Number)\r\n], jqxTreeGridComponent.prototype, \"attrAggregatesHeight\", void 0);\r\n__decorate([\r\n    Input('autoShowLoadElement'),\r\n    __metadata(\"design:type\", Boolean)\r\n], jqxTreeGridComponent.prototype, \"attrAutoShowLoadElement\", void 0);\r\n__decorate([\r\n    Input('checkboxes'),\r\n    __metadata(\"design:type\", Boolean)\r\n], jqxTreeGridComponent.prototype, \"attrCheckboxes\", void 0);\r\n__decorate([\r\n    Input('columnsHeight'),\r\n    __metadata(\"design:type\", Number)\r\n], jqxTreeGridComponent.prototype, \"attrColumnsHeight\", void 0);\r\n__decorate([\r\n    Input('columns'),\r\n    __metadata(\"design:type\", Array)\r\n], jqxTreeGridComponent.prototype, \"attrColumns\", void 0);\r\n__decorate([\r\n    Input('columnGroups'),\r\n    __metadata(\"design:type\", Array)\r\n], jqxTreeGridComponent.prototype, \"attrColumnGroups\", void 0);\r\n__decorate([\r\n    Input('columnsResize'),\r\n    __metadata(\"design:type\", Boolean)\r\n], jqxTreeGridComponent.prototype, \"attrColumnsResize\", void 0);\r\n__decorate([\r\n    Input('columnsReorder'),\r\n    __metadata(\"design:type\", Boolean)\r\n], jqxTreeGridComponent.prototype, \"attrColumnsReorder\", void 0);\r\n__decorate([\r\n    Input('disabled'),\r\n    __metadata(\"design:type\", Boolean)\r\n], jqxTreeGridComponent.prototype, \"attrDisabled\", void 0);\r\n__decorate([\r\n    Input('editable'),\r\n    __metadata(\"design:type\", Boolean)\r\n], jqxTreeGridComponent.prototype, \"attrEditable\", void 0);\r\n__decorate([\r\n    Input('editSettings'),\r\n    __metadata(\"design:type\", Object)\r\n], jqxTreeGridComponent.prototype, \"attrEditSettings\", void 0);\r\n__decorate([\r\n    Input('exportSettings'),\r\n    __metadata(\"design:type\", Object)\r\n], jqxTreeGridComponent.prototype, \"attrExportSettings\", void 0);\r\n__decorate([\r\n    Input('enableHover'),\r\n    __metadata(\"design:type\", Boolean)\r\n], jqxTreeGridComponent.prototype, \"attrEnableHover\", void 0);\r\n__decorate([\r\n    Input('enableBrowserSelection'),\r\n    __metadata(\"design:type\", Boolean)\r\n], jqxTreeGridComponent.prototype, \"attrEnableBrowserSelection\", void 0);\r\n__decorate([\r\n    Input('filterable'),\r\n    __metadata(\"design:type\", Boolean)\r\n], jqxTreeGridComponent.prototype, \"attrFilterable\", void 0);\r\n__decorate([\r\n    Input('filterHeight'),\r\n    __metadata(\"design:type\", Number)\r\n], jqxTreeGridComponent.prototype, \"attrFilterHeight\", void 0);\r\n__decorate([\r\n    Input('filterMode'),\r\n    __metadata(\"design:type\", String)\r\n], jqxTreeGridComponent.prototype, \"attrFilterMode\", void 0);\r\n__decorate([\r\n    Input('hierarchicalCheckboxes'),\r\n    __metadata(\"design:type\", Boolean)\r\n], jqxTreeGridComponent.prototype, \"attrHierarchicalCheckboxes\", void 0);\r\n__decorate([\r\n    Input('icons'),\r\n    __metadata(\"design:type\", Object)\r\n], jqxTreeGridComponent.prototype, \"attrIcons\", void 0);\r\n__decorate([\r\n    Input('incrementalSearch'),\r\n    __metadata(\"design:type\", Boolean)\r\n], jqxTreeGridComponent.prototype, \"attrIncrementalSearch\", void 0);\r\n__decorate([\r\n    Input('localization'),\r\n    __metadata(\"design:type\", Object)\r\n], jqxTreeGridComponent.prototype, \"attrLocalization\", void 0);\r\n__decorate([\r\n    Input('pagerHeight'),\r\n    __metadata(\"design:type\", Number)\r\n], jqxTreeGridComponent.prototype, \"attrPagerHeight\", void 0);\r\n__decorate([\r\n    Input('pageSize'),\r\n    __metadata(\"design:type\", Number)\r\n], jqxTreeGridComponent.prototype, \"attrPageSize\", void 0);\r\n__decorate([\r\n    Input('pageSizeOptions'),\r\n    __metadata(\"design:type\", Array)\r\n], jqxTreeGridComponent.prototype, \"attrPageSizeOptions\", void 0);\r\n__decorate([\r\n    Input('pageable'),\r\n    __metadata(\"design:type\", Boolean)\r\n], jqxTreeGridComponent.prototype, \"attrPageable\", void 0);\r\n__decorate([\r\n    Input('pagerPosition'),\r\n    __metadata(\"design:type\", String)\r\n], jqxTreeGridComponent.prototype, \"attrPagerPosition\", void 0);\r\n__decorate([\r\n    Input('pagerMode'),\r\n    __metadata(\"design:type\", String)\r\n], jqxTreeGridComponent.prototype, \"attrPagerMode\", void 0);\r\n__decorate([\r\n    Input('pageSizeMode'),\r\n    __metadata(\"design:type\", String)\r\n], jqxTreeGridComponent.prototype, \"attrPageSizeMode\", void 0);\r\n__decorate([\r\n    Input('pagerButtonsCount'),\r\n    __metadata(\"design:type\", Number)\r\n], jqxTreeGridComponent.prototype, \"attrPagerButtonsCount\", void 0);\r\n__decorate([\r\n    Input('pagerRenderer'),\r\n    __metadata(\"design:type\", Function)\r\n], jqxTreeGridComponent.prototype, \"attrPagerRenderer\", void 0);\r\n__decorate([\r\n    Input('ready'),\r\n    __metadata(\"design:type\", Function)\r\n], jqxTreeGridComponent.prototype, \"attrReady\", void 0);\r\n__decorate([\r\n    Input('rowDetails'),\r\n    __metadata(\"design:type\", Boolean)\r\n], jqxTreeGridComponent.prototype, \"attrRowDetails\", void 0);\r\n__decorate([\r\n    Input('rowDetailsRenderer'),\r\n    __metadata(\"design:type\", Function)\r\n], jqxTreeGridComponent.prototype, \"attrRowDetailsRenderer\", void 0);\r\n__decorate([\r\n    Input('renderToolbar'),\r\n    __metadata(\"design:type\", Function)\r\n], jqxTreeGridComponent.prototype, \"attrRenderToolbar\", void 0);\r\n__decorate([\r\n    Input('renderStatusBar'),\r\n    __metadata(\"design:type\", Function)\r\n], jqxTreeGridComponent.prototype, \"attrRenderStatusBar\", void 0);\r\n__decorate([\r\n    Input('rendering'),\r\n    __metadata(\"design:type\", Function)\r\n], jqxTreeGridComponent.prototype, \"attrRendering\", void 0);\r\n__decorate([\r\n    Input('rendered'),\r\n    __metadata(\"design:type\", Function)\r\n], jqxTreeGridComponent.prototype, \"attrRendered\", void 0);\r\n__decorate([\r\n    Input('rtl'),\r\n    __metadata(\"design:type\", Boolean)\r\n], jqxTreeGridComponent.prototype, \"attrRtl\", void 0);\r\n__decorate([\r\n    Input('source'),\r\n    __metadata(\"design:type\", Object)\r\n], jqxTreeGridComponent.prototype, \"attrSource\", void 0);\r\n__decorate([\r\n    Input('sortable'),\r\n    __metadata(\"design:type\", Boolean)\r\n], jqxTreeGridComponent.prototype, \"attrSortable\", void 0);\r\n__decorate([\r\n    Input('showAggregates'),\r\n    __metadata(\"design:type\", Boolean)\r\n], jqxTreeGridComponent.prototype, \"attrShowAggregates\", void 0);\r\n__decorate([\r\n    Input('showSubAggregates'),\r\n    __metadata(\"design:type\", Boolean)\r\n], jqxTreeGridComponent.prototype, \"attrShowSubAggregates\", void 0);\r\n__decorate([\r\n    Input('showToolbar'),\r\n    __metadata(\"design:type\", Boolean)\r\n], jqxTreeGridComponent.prototype, \"attrShowToolbar\", void 0);\r\n__decorate([\r\n    Input('showStatusbar'),\r\n    __metadata(\"design:type\", Boolean)\r\n], jqxTreeGridComponent.prototype, \"attrShowStatusbar\", void 0);\r\n__decorate([\r\n    Input('statusBarHeight'),\r\n    __metadata(\"design:type\", Number)\r\n], jqxTreeGridComponent.prototype, \"attrStatusBarHeight\", void 0);\r\n__decorate([\r\n    Input('scrollBarSize'),\r\n    __metadata(\"design:type\", Number)\r\n], jqxTreeGridComponent.prototype, \"attrScrollBarSize\", void 0);\r\n__decorate([\r\n    Input('selectionMode'),\r\n    __metadata(\"design:type\", String)\r\n], jqxTreeGridComponent.prototype, \"attrSelectionMode\", void 0);\r\n__decorate([\r\n    Input('showHeader'),\r\n    __metadata(\"design:type\", Boolean)\r\n], jqxTreeGridComponent.prototype, \"attrShowHeader\", void 0);\r\n__decorate([\r\n    Input('theme'),\r\n    __metadata(\"design:type\", String)\r\n], jqxTreeGridComponent.prototype, \"attrTheme\", void 0);\r\n__decorate([\r\n    Input('toolbarHeight'),\r\n    __metadata(\"design:type\", Number)\r\n], jqxTreeGridComponent.prototype, \"attrToolbarHeight\", void 0);\r\n__decorate([\r\n    Input('virtualModeCreateRecords'),\r\n    __metadata(\"design:type\", Function)\r\n], jqxTreeGridComponent.prototype, \"attrVirtualModeCreateRecords\", void 0);\r\n__decorate([\r\n    Input('virtualModeRecordCreating'),\r\n    __metadata(\"design:type\", Function)\r\n], jqxTreeGridComponent.prototype, \"attrVirtualModeRecordCreating\", void 0);\r\n__decorate([\r\n    Input('width'),\r\n    __metadata(\"design:type\", Object)\r\n], jqxTreeGridComponent.prototype, \"attrWidth\", void 0);\r\n__decorate([\r\n    Input('height'),\r\n    __metadata(\"design:type\", Object)\r\n], jqxTreeGridComponent.prototype, \"attrHeight\", void 0);\r\n__decorate([\r\n    Input('auto-create'),\r\n    __metadata(\"design:type\", Boolean)\r\n], jqxTreeGridComponent.prototype, \"autoCreate\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", Object)\r\n], jqxTreeGridComponent.prototype, \"onBindingComplete\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", Object)\r\n], jqxTreeGridComponent.prototype, \"onCellBeginEdit\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", Object)\r\n], jqxTreeGridComponent.prototype, \"onCellEndEdit\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", Object)\r\n], jqxTreeGridComponent.prototype, \"onCellValueChanged\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", Object)\r\n], jqxTreeGridComponent.prototype, \"onColumnResized\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", Object)\r\n], jqxTreeGridComponent.prototype, \"onColumnReordered\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", Object)\r\n], jqxTreeGridComponent.prototype, \"onFilter\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", Object)\r\n], jqxTreeGridComponent.prototype, \"onPageChanged\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", Object)\r\n], jqxTreeGridComponent.prototype, \"onPageSizeChanged\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", Object)\r\n], jqxTreeGridComponent.prototype, \"onRowClick\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", Object)\r\n], jqxTreeGridComponent.prototype, \"onRowDoubleClick\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", Object)\r\n], jqxTreeGridComponent.prototype, \"onRowSelect\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", Object)\r\n], jqxTreeGridComponent.prototype, \"onRowUnselect\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", Object)\r\n], jqxTreeGridComponent.prototype, \"onRowBeginEdit\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", Object)\r\n], jqxTreeGridComponent.prototype, \"onRowEndEdit\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", Object)\r\n], jqxTreeGridComponent.prototype, \"onRowExpand\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", Object)\r\n], jqxTreeGridComponent.prototype, \"onRowCollapse\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", Object)\r\n], jqxTreeGridComponent.prototype, \"onRowCheck\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", Object)\r\n], jqxTreeGridComponent.prototype, \"onRowUncheck\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", Object)\r\n], jqxTreeGridComponent.prototype, \"onSort\", void 0);\r\njqxTreeGridComponent = __decorate([\r\n    Component({\r\n        selector: 'jqxTreeGrid',\r\n        template: '<div><ng-content></ng-content></div>'\r\n    }),\r\n    __metadata(\"design:paramtypes\", [ElementRef])\r\n], jqxTreeGridComponent);\n\nlet jqxTreeGridModule = class jqxTreeGridModule {\r\n};\r\njqxTreeGridModule = __decorate([\r\n    NgModule({\r\n        imports: [],\r\n        declarations: [jqxTreeGridComponent],\r\n        exports: [jqxTreeGridComponent]\r\n    })\r\n], jqxTreeGridModule);\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { jqxTreeGridComponent, jqxTreeGridModule };\n","/*\r\njQWidgets v10.0.2 (2020-22-July)\r\nCopyright (c) 2011-2020 jQWidgets.\r\nLicense: https://jqwidgets.com/license/\r\n*/\r\n/* eslint-disable */\r\n\r\n(function(b){b.jqx.jqxWidget(\"jqxDataTable\",\"\",{});b.extend(b.jqx._jqxDataTable.prototype,{defineInstance:function(){var c={altRows:false,aggregatesHeight:34,autoShowLoadElement:true,autoRowHeight:true,columnsHeight:36,columns:[],columnGroups:null,columnsResize:false,columnsReorder:false,dataview:null,disabled:false,editable:false,editSettings:{saveOnPageChange:true,saveOnBlur:true,saveOnSelectionChange:true,cancelOnEsc:true,saveOnEnter:true,editSingleCell:false,editOnDoubleClick:true,editOnF2:true},enableHover:true,enableBrowserSelection:false,filterHeight:35,filterable:false,filterMode:\"default\",groupsRenderer:null,groups:new Array(),headerZIndex:359,height:null,handleKeyboardNavigation:null,indentWidth:25,initRowDetails:false,loadingErrorMessage:\"The data is still loading and you cannot set a property or call a method. You can do that once the data binding is completed. jqxDataTable raises the 'bindingComplete' event when the binding is completed.\",localization:null,pagerHeight:40,pageSize:10,pageSizeOptions:[\"5\",\"10\",\"20\"],pageable:false,pagerPosition:\"bottom\",pagerMode:\"default\",pageSizeMode:\"default\",pagerButtonsCount:5,pagerRenderer:null,ready:null,rendertoolbar:null,rowDetails:false,renderStatusBar:null,rendered:null,rendering:null,rtl:false,sortable:false,showtoolbar:false,showstatusbar:false,statusBarHeight:34,serverProcessing:false,selectionMode:\"multiplerows\",scrollBarSize:b.jqx.utilities.scrollBarSize,touchScrollBarSize:b.jqx.utilities.touchScrollBarSize,showAggregates:false,showHeader:true,maxHeight:999999,maxWidth:999999,autoBind:true,beginEdit:null,endEdit:null,autokoupdates:true,columnsVirtualization:false,exportSettings:{columnsHeader:true,hiddenColumns:false,serverURL:null,characterSet:null,collapsedRecords:false,recordsInView:true,fileName:\"jqxDataTable\"},source:{beforeprocessing:null,beforesend:null,loaderror:null,localdata:null,data:null,datatype:\"array\",datafields:[],url:\"\",root:\"\",record:\"\",id:\"\",totalrecords:0,recordstartindex:0,recordendindex:0,loadallrecords:true,sortcolumn:null,sortdirection:null,sort:null,filter:null,sortcomparer:null},toolbarHeight:34,tableZIndex:369,_updating:false,touchmode:\"auto\",width:null,that:this,incrementalSearch:true,events:[\"bindingComplete\",\"sort\",\"filter\",\"pageChanged\",\"pageSizeChanged\",\"rowClick\",\"rowDoubleClick\",\"cellValueChanged\",\"rowBeginEdit\",\"rowEndEdit\",\"rowSelect\",\"rowUnselect\",\"rowCheck\",\"rowUncheck\",\"columnResized\",\"columnReordered\",\"rowExpand\",\"rowCollapse\",\"cellBeginEdit\",\"cellEndEdit\"]};if(this===b.jqx._jqxDataTable.prototype){return c}b.extend(true,this,c);this.that=this;return c},createInstance:function(e){var l=this;if(b.jqx.utilities.scrollBarSize!=13){l.scrollBarSize=b.jqx.utilities.scrollBarSize}if(l.isMaterialized()){var B=window.getComputedStyle(l.element);var p=B.getPropertyValue(\"--jqx-grid-column-height\");var v=B.getPropertyValue(\"--jqx-scrollbar-size\");if(p&&this.columnsHeight===36){l.columnsHeight=parseInt(p)}}if(v){l.scrollbarsize=v;b.jqx.utilities.scrollBarSize=v}if((l.element.nodeName.toLowerCase()==\"table\")||b(l.element).children(\"table\").length>0){var n=l.host.find(\"tbody tr\");var d=l.host.find(\"th\");var y=new Array();if(d.length===0){d=n[0];n.splice(0,1)}if(l.localizestrings){l.localizestrings();if(l.localization!=null){l.localizestrings(l.localization,false)}}var C=[];for(var w=0;w<n.length;w++){var k=n[w];var h={};for(var u=0;u<d.length;u++){var g=b.trim(b(d[u]).text());if(w===0){var t={name:g};if(l.columns[u]&&l.columns[u].cellsFormat){var x=l.columns[u].cellsFormat.toLowerCase();if(x.indexOf(\"p\")!=-1||x.indexOf(\"c\")!=-1||x.indexOf(\"n\")!=-1||x.indexOf(\"f\")!=-1){t.type=\"number\"}if(x.indexOf(\"d\")!=-1||x.indexOf(\"m\")!=-1||x.indexOf(\"y\")!=-1||x.indexOf(\"h\")!=-1||x.indexOf(\"m\")!=-1||x.indexOf(\"s\")!=-1||x.indexOf(\"t\")!=-1){t.type=\"date\"}}y.push(t)}var c=b(k).find(\"td:eq(\"+u+\")\");var f=y[u].type;if(f){var q=l.getvaluebytype(b.trim(c.text()),y[u]);h[g]=q}else{h[g]=b.trim(c.text())}}C[C.length]=h}l.host.wrap(\"<div></div>\");var m=l.host.parent();var r=l.host.data();r.jqxDataTable.host=m;r.jqxDataTable.element=m[0];l.host.parent()[0].id=l.element.id;try{l.host.parent()[0].style=l.element.style}catch(s){}l.element=m[0];l.host=m;l.host.data(r);var o={dataFields:y,localdata:C,datatype:\"array\"};var A=new b.jqx.dataAdapter(o);l.source=A}if(l.source&&!l.source.dataBind){l.source=new b.jqx.dataAdapter(l.source)}var z=l.source._source.datafields;if(z&&z.length>0){l._camelCase=l.source._source.dataFields!==undefined;l.selectionMode=l.selectionMode.toLowerCase()}if(l.host.attr(\"tabindex\")==null){l.host.attr(\"tabindex\",\"0\")}l.host.attr(\"role\",\"grid\");l.host.attr(\"align\",\"left\");l.host.addClass(l.toTP(\"jqx-datatable\"));l.host.addClass(l.toTP(\"jqx-grid\"));l.host.addClass(l.toTP(\"jqx-reset\"));l.host.addClass(l.toTP(\"jqx-rc-all\"));l.host.addClass(l.toTP(\"jqx-widget\"));l.host.addClass(l.toTP(\"jqx-widget-content\"));if(l._testmodules()){return}l.render(true);b.jqx.utilities.resize(l.host,function(){var D=b(window).width();var i=b(window).height();var j=l.host.width();var E=l.host.height();if(l._lastHostWidth!=j||l._lastHostHeight!=E){l._updatesize(l._lastHostWidth!=j,l._lastHostHeight!=E)}l._lastWidth=D;l._lastHeight=i;l._lastHostWidth=j;l._lastHostHeight=E})},getvaluebytype:function(h,d){var f=h;if(h==null){return h}if(this.gridlocalization.decimalseparator==\",\"){if(h.indexOf(this.gridlocalization.decimalseparator)>=0){h=h.replace(this.gridlocalization.decimalseparator,\".\")}}if(h.indexOf(this.gridlocalization.currencysymbol)>=0){h=h.replace(this.gridlocalization.currencysymbol,\"\")}if(h.indexOf(this.gridlocalization.percentagesymbol)>=0){h=h.replace(this.gridlocalization.percentagesymbol,\"\")}if(b.isArray(h)&&d.type!=\"array\"){for(var e=0;e<h.length;e++){h[e]=this.getvaluebytype(h[e],d)}return h}if(d.type==\"date\"){if(h==\"NaN\"){h=\"\"}else{var g=new Date(h);if(typeof h==\"string\"){if(d.format){var c=b.jqx.dataFormat.parsedate(h,d.format);if(c!=null){g=c}}}if(g.toString()==\"NaN\"||g.toString()==\"Invalid Date\"){if(b.jqx.dataFormat){h=b.jqx.dataFormat.tryparsedate(h)}else{h=g}}else{h=g}if(h==null){h=f}}}else{if(d.type==\"float\"||d.type==\"number\"||d.type==\"decimal\"){if(h==\"NaN\"){h=\"\"}else{var h=parseFloat(h);if(isNaN(h)){h=f}}}else{if(d.type==\"int\"||d.type==\"integer\"){var h=parseInt(h);if(isNaN(h)){h=f}}else{if(d.type==\"bool\"||d.type==\"boolean\"){if(h!=null){if(h.toLowerCase!=undefined){if(h.toLowerCase()==\"false\"){h=false}else{if(h.toLowerCase()==\"true\"){h=true}}}}if(h==1){h=true}else{if(h==0&&h!==\"\"){h=false}else{h=\"\"}}}}}}return h},_builddataloadelement:function(){if(this.dataloadelement){this.dataloadelement.remove()}this.dataloadelement=b('<div class=\"jqx-datatable-load\" style=\"z-index: 99998; background-color:rgba(50,50,50,0.1); overflow: hidden; position: absolute;\"></div>');var d=b('<div style=\"z-index: 99999; margin-left: -66px; left: 50%; top: 50%; margin-top: -24px; position: relative; width: 100px; height: 33px; padding: 5px; font-family: verdana; font-size: 12px; color: #767676; border-color: #898989; border-width: 1px; border-style: solid; background: #f6f6f6; border-collapse: collapse;\"><div style=\"float: left;\"><div style=\"float: left; overflow: hidden; width: 32px; height: 32px;\" class=\"jqx-grid-load\"/><span style=\"margin-top: 10px; float: left; display: block; margin-left: 5px;\" >'+this.gridlocalization.loadtext+\"</span></div></div>\");d.addClass(this.toTP(\"jqx-rc-all\"));this.dataloadelement.addClass(this.toTP(\"jqx-rc-all\"));d.addClass(this.toTP(\"jqx-fill-state-normal\"));this.dataloadelement.append(d);this.dataloadelement.width(this.width);this.dataloadelement.height(this.height);this.host.prepend(this.dataloadelement);if(this.source._source.url!=\"\"){var c=false;if(this.height===\"auto\"||this.height===null||this.autoheight){if(this.maxHeight==999999){c=true}}if(c){this.host.height(100);this.dataloadelement.height(100)}else{this.host.height(this.height);this.dataloadelement.height(this.height)}var e=false;if(this.width===\"auto\"||this.width===null||this.autoWidth){e=true}if(e){this.host.width(300);this.dataloadelement.width(300)}else{this.host.width(this.width);this.dataloadelement.width(this.width)}}},_measureElement:function(d){var c=b(\"<span style='visibility: hidden; white-space: nowrap;'>measure Text</span>\");c.addClass(this.toTP(\"jqx-widget\"));b(document.body).append(c);if(d==\"cell\"){this._cellheight=c.height()}else{this._columnheight=c.height()}c.remove()},_testmodules:function(){var g=\"\";var e=this;var c=function(){if(g.length!=\"\"){g+=\",\"}};if(!this.host.jqxScrollBar){c();g+=\" jqxscrollbar.js\"}if(!this.host.jqxButton){c();g+=\" jqxbuttons.js\"}if(!b.jqx.dataAdapter){c();g+=\" jqxdata.js\"}if(g!=\"\"||this.editable||this.filterable||this.pageable){var d=[];var f=function(h){switch(h){case\"checkbox\":if(!e.host.jqxCheckBox&&!d.checkbox){d.checkbox=true;c();g+=\" jqxcheckbox.js\"}break;case\"dropdownlist\":if(!e.host.jqxDropDownList&&!d.dropdownlist){c();d.dropdownlist=true;g+=\" jqxdropdownlist.js(requires: jqxlistbox.js)\"}else{if(!e.host.jqxListBox&&!d.listbox){c();d.listbox=true;g+=\" jqxlistbox.js\"}}break}};if((this.filterable&&this.filterMode!=\"simple\")||(this.pagerMode==\"advanced\"&&this.pageable)){f(\"dropdownlist\")}if(g!=\"\"){throw new Error(\"jqxDataTable: Missing references to the following module(s): \"+g);this.host.remove();return true}}return false},focus:function(){try{this.wrapper.focus();this.host.focus();var d=this;setTimeout(function(){d.wrapper.focus();d.host.focus()},25);this.focused=true}catch(c){}},hiddenParent:function(){return b.jqx.isHidden(this.host)},isBindingCompleted:function(){return !this._loading},_updatesize:function(i,h){if(this._loading){return}var f=this;var g=f.host.width();var e=f.host.height();if(!f._oldWidth){f._oldWidth=g}if(!f._oldHeight){f._oldHeight=e}if(f._resizeTimer!=undefined){clearTimeout(f._resizeTimer);f._resizeTimer=null}var d=300;var c=function(){if(f._resizeTimer){clearTimeout(f._resizeTimer)}f.resizingGrid=true;if(b.jqx.isHidden(f.host)){return}f._updatecolumnwidths();f.refresh();f._oldWidth=g;f._oldHeight=e;f.resizingGrid=false};c();f._resizeTimer=setTimeout(function(){var k=f.host.width();var j=f.host.height();if(f._oldWidth!=k||f._oldHeight!=j){c()}},d)},resize:function(d,c){if(d!=undefined){this.width=d}if(c!=undefined){this.height=c}this._updatecolumnwidths();this.refresh()},isTouchDevice:function(){if(this.touchDevice!=undefined){return this.touchDevice}var c=b.jqx.mobile.isTouchDevice();this.touchDevice=c;if(this.touchmode==true){c=true;b.jqx.mobile.setMobileSimulator(this.table[0]);this.touchDevice=c}else{if(this.touchmode==false){c=false}}if(c){this.touchDevice=true;this.host.addClass(this.toThemeProperty(\"jqx-touch\"));this.host.find(\"jqx-widget-content\").addClass(this.toThemeProperty(\"jqx-touch\"));this.host.find(\"jqx-widget-header\").addClass(this.toThemeProperty(\"jqx-touch\"));this.scrollBarSize=this.touchScrollBarSize}return c},toTP:function(c){return this.toThemeProperty(c)},localizestrings:function(c,f){this._cellscache=new Array();if(b.jqx.dataFormat){b.jqx.dataFormat.cleardatescache()}if(this._loading){throw new Error(\"jqxDataTable: \"+this.loadingErrorMessage);return false}if(c!=null){for(var h in c){if(h.toLowerCase()!==h){c[h.toLowerCase()]=c[h]}}var j=[\"pagergotopagestring\",\"pagershowrowsstring\",\"pagerrangestring\",\"pagernextbuttonstring\",\"pagerpreviousbuttonstring\",\"pagerfirstbuttonstring\",\"pagerlastbuttonstring\",\"toppagerstring\",\"firstDay\",\"days\",\"months\",\"AM\",\"PM\",\"patterns\",\"percentsymbol\",\"currencysymbol\",\"currencysymbolposition\",\"decimalseparator\",\"thousandsseparator\",\"filterapplystring\",\"filteraddnew\",\"filtercancelstring\",\"filterclearstring\",\"filterstring\",\"filterstringcomparisonoperators\",\"filternumericcomparisonoperators\",\"filterdatecomparisonoperators\",\"filterbooleancomparisonoperators\",\"emptydatastring\",\"filterselectstring\",\"todaystring\",\"clearstring\",\"validationstring\",\"loadtext\",\"filtersearchstring\",\"loadingErrorMessage\"];var g=this;for(var e=0;e<j.length;e++){var d=j[e];if(c[d]!==undefined){g.gridlocalization[d]=c[d]}}if(c.loadingErrorMessage){this.loadingErrorMessage=c.loadingErrorMessage}if(f!==false){this._builddataloadelement();b(this.dataloadelement).css(\"visibility\",\"hidden\");b(this.dataloadelement).css(\"display\",\"none\")}}else{this.gridlocalization={\"/\":\"/\",\":\":\":\",firstDay:0,days:{names:[\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"],namesAbbr:[\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"],namesShort:[\"Su\",\"Mo\",\"Tu\",\"We\",\"Th\",\"Fr\",\"Sa\"]},months:{names:[\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\",\"\"],namesAbbr:[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\",\"\"]},AM:[\"AM\",\"am\",\"AM\"],PM:[\"PM\",\"pm\",\"PM\"],eras:[{name:\"A.D.\",start:null,offset:0}],twoDigitYearMax:2029,patterns:{d:\"M/d/yyyy\",D:\"dddd, MMMM dd, yyyy\",t:\"h:mm tt\",T:\"h:mm:ss tt\",f:\"dddd, MMMM dd, yyyy h:mm tt\",F:\"dddd, MMMM dd, yyyy h:mm:ss tt\",M:\"MMMM dd\",Y:\"yyyy MMMM\",S:\"yyyy\\u0027-\\u0027MM\\u0027-\\u0027dd\\u0027T\\u0027HH\\u0027:\\u0027mm\\u0027:\\u0027ss\",ISO:\"yyyy-MM-dd hh:mm:ss\",ISO2:\"yyyy-MM-dd HH:mm:ss\",d1:\"dd.MM.yyyy\",d2:\"dd-MM-yyyy\",d3:\"dd-MMMM-yyyy\",d4:\"dd-MM-yy\",d5:\"H:mm\",d6:\"HH:mm\",d7:\"HH:mm tt\",d8:\"dd/MMMM/yyyy\",d9:\"MMMM-dd\",d10:\"MM-dd\",d11:\"MM-dd-yyyy\"},percentsymbol:\"%\",currencysymbol:\"$\",currencysymbolposition:\"before\",decimalseparator:\".\",thousandsseparator:\",\",pagergotopagestring:\"Go to page:\",pagershowrowsstring:\"Show rows:\",pagerrangestring:\" of \",pagerpreviousbuttonstring:\"previous\",pagernextbuttonstring:\"next\",pagerfirstbuttonstring:\"first\",pagerlastbuttonstring:\"last\",filterapplystring:\"Apply\",filtercancelstring:\"Cancel\",filterclearstring:\"Clear Filter\",filterstring:\"advanced\",filtersearchstring:\"Search:\",filterstringcomparisonoperators:[\"empty\",\"not empty\",\"contains\",\"contains(match case)\",\"does not contain\",\"does not contain(match case)\",\"starts with\",\"starts with(match case)\",\"ends with\",\"ends with(match case)\",\"equal\",\"equal(match case)\",\"null\",\"not null\"],filternumericcomparisonoperators:[\"equal\",\"not equal\",\"less than\",\"less than or equal\",\"greater than\",\"greater than or equal\",\"null\",\"not null\"],filterdatecomparisonoperators:[\"equal\",\"not equal\",\"less than\",\"less than or equal\",\"greater than\",\"greater than or equal\",\"null\",\"not null\"],filterbooleancomparisonoperators:[\"equal\",\"not equal\"],validationstring:\"Entered value is not valid\",emptydatastring:\"No data to display\",filterselectstring:\"Select Filter\",loadtext:\"Loading...\",clearstring:\"Clear\",todaystring:\"Today\",loadingErrorMessage:\"The data is still loading and you cannot set a property or call a method. You can do that once the data binding is completed. jqxDataTable raises the 'bindingComplete' event when the binding is completed.\"}}},_updateScrollbars:function(m){var p=false;if(this.width===\"auto\"||this.width===null||this.autowidth){if(this.maxWidth==999999){p=true}}var d=parseInt(this.scrollBarSize);var j=this.table?this.table.height():0;var n=0;var e=\"inherit\";var h=this.vScrollBar[0].style.visibility;var l=this.hScrollBar[0].style.visibility;if(!m){var g=this.host.height()}else{var g=m}if(!this.columnGroups){g-=this.showHeader?this.columnsHeight:0}else{g-=this.showHeader?this.columnsheader.height():0}if(this.filterable){g-=this.filter.height()}if(this.pageable){g-=this.pagerHeight;if(this.pagerPosition===\"both\"){g-=this.pagerHeight}}if(this.showtoolbar){g-=this.toolbarHeight}if(this.showstatusbar){g-=this.statusBarHeight}if(this.showAggregates){g-=this.aggregatesHeight}var q=false;if(this.height===\"auto\"||this.height===null||this.autoheight){if(this.maxHeight==999999){q=true}}if(!q&&j>g&&(this.source.records.length>0||(this.source.hierarchy&&this.source.hierarchy.length>0))){this.vScrollBar[0].style.visibility=e;n=4+parseInt(d);this.vScrollBar.jqxScrollBar({max:j-g})}else{this.vScrollBar[0].style.visibility=\"hidden\"}if((h!=this.vScrollBar[0].style.visibility)){this._updatecolumnwidths();var i=this.table.height();if(j!=i){j=i;if(!q&&j>g&&(this.source.records.length>0||(this.source.hierarchy&&this.source.hierarchy.length>0))){this.vScrollBar[0].style.visibility=e;n=4+parseInt(d);this.vScrollBar.jqxScrollBar({max:j-g})}}}if(this.scrollBarSize==0){n=0}var o=this.table?this.table.width():0;if(o>3){o-=3}var c=parseInt(this.host.css(\"border-left-width\"))+parseInt(this.host.css(\"border-right-width\"));var r=c+this.host.width()-n;if(o>r&&!p){this.hScrollBar[0].style.visibility=e;this.hScrollBar.jqxScrollBar({max:o-r});n=4+parseInt(d);if(d==0){n=0}if(!q){if(j>g-n+4&&(this.source.records.length>0||(this.source.hierarchy&&this.source.hierarchy.length>0))){this.hScrollBar.jqxScrollBar({max:c+o-r});var f=this.vScrollBar[0].style.visibility===\"hidden\";this.vScrollBar[0].style.visibility=e;this._updatecolumnwidths();if(f){this.hScrollBar.jqxScrollBar({max:o-r+n+c})}var k=this.table?this.table.width():0;if(k>3){k-=3}if(k!=o){if(k<r){this.hScrollBar.jqxScrollBar({max:c+k-r});this.hScrollBar[0].style.visibility=\"hidden\";n=0}}}this.vScrollBar.jqxScrollBar({max:j-g+n})}}else{this.hScrollBar[0].style.visibility=\"hidden\"}if(this.source.records.length===0&&(this.source.hierarchy&&this.source.hierarchy.length===0)){this.vScrollBar[0].style.visibility=\"hidden\";this.bottomRight[0].style.visibility=\"hidden\"}if(this.vScrollBar[0].style.visibility==\"hidden\"){if(this.vScrollInstance.value!=0){this.vScrollInstance.setPosition(0)}}},_measureElementWidth:function(e){var d=b(\"<span style='visibility: hidden; white-space: nowrap;'>\"+e+\"</span>\");d.addClass(this.toTP(\"jqx-widget\"));d.addClass(this.toTP(\"jqx-grid\"));d.addClass(this.toTP(\"jqx-grid-column-header\"));d.addClass(this.toTP(\"jqx-widget-header\"));b(document.body).append(d);var c=d.outerWidth()+20;d.remove();return c},_arrangeAutoHeight:function(e){if(!e){e=0}if(this.height===\"auto\"||this.height===null||this.autoheight){var h=this.table.height();var g=0;if(!this.columnGroups){g+=this.showHeader?this.columnsHeight:-1}else{g+=this.showHeader?this.columnsheader.height():-1}g+=this.showstatusbar?this.statusBarHeight:0;g+=this.showAggregates?this.aggregatesHeight:0;g+=this.showtoolbar?this.toolbarHeight:0;g+=this.pageable?this.pagerHeight:0;if(this.pagerPosition===\"both\"){g+=this.pageable?this.pagerHeight:0}g+=h;if(this.filterable){var f=this.filter.find(\".filterrow\");var c=this.filter.find(\".filterrow-hidden\");var d=1;if(c.length>0){d=0}g+=this.filterHeight-1+this.filterHeight*f.length*d}if(g+e>this.maxHeight){this.host.height(this.maxHeight)}else{this.host.height(g+e)}return true}return false},_arrangeAutoWidth:function(e){if(!e){e=0}if(this.width===\"auto\"||this.width===null||this.autowidth){var d=0;for(var f=0;f<this.columns.records.length;f++){var c=this.columns.records[f].width;if(this.columns.records[f].hidden){continue}if(c==\"auto\"){c=this._measureElementWidth(this.columns.records[f].text);d+=c}else{d+=c}}var g=d;if(g+e>this.maxWidth){this.host.width(this.maxWidth)}else{this.host.width(g+e)}return true}return false},_measureTopAndHeight:function(){var d=this.host.height();var h=0;if(this.showtoolbar){h+=this.toolbarHeight;d-=parseInt(this.toolbarHeight)}if(this.filterable){var g=this.filter.find(\".filterrow\");var e=this.filter.find(\".filterrow-hidden\");var f=1;if(e.length>0){f=0}h+=this.filterHeight;d-=parseInt(this.filterHeight);var c=f==1?g.length:0;h+=this.filterHeight*c;d-=this.filterHeight*c}if(this.pageable&&this.pagerPosition!=\"bottom\"){h+=parseInt(this.pagerHeight)+1;if(d>this.pagerHeight&&this.pagerPosition===\"both\"){d-=parseInt(this.pagerHeight)}}return{top:h,height:d}},_arrange:function(){if(!this.table){return}this._arrangeAutoHeight();this._arrangeAutoWidth();var v=this.host.width();var r=this.host.height();var j=r;var i=this;if(this.pageable){if(this.pagerPosition===\"bottom\"){this.toppager[0].style.visibility=\"hidden\";this.pager[0].style.visibility=\"inherit\"}else{if(this.pagerPosition===\"both\"){this.toppager[0].style.visibility=\"inherit\";this.pager[0].style.visibility=\"inherit\"}else{if(this.pagerPosition===\"top\"){this.toppager[0].style.visibility=\"inherit\";this.pager[0].style.visibility=\"hidden\"}}}}else{this.toppager[0].style.visibility=\"hidden\";this.pager[0].style.visibility=\"hidden\"}var q=0;if(this.showtoolbar){this.toolbar.width(v);this.toolbar.height(this.toolbarHeight-1);this.toolbar.css(\"top\",0);q+=this.toolbarHeight;r-=parseInt(this.toolbarHeight)}else{this.toolbar[0].style.height=\"0px\"}if(this.filterable){this.filter.width(v);this.filter.css(\"top\",q);var t=this.filter.find(\".filterrow\");var h=this.filter.find(\".filterrow-hidden\");var A=1;if(h.length>0){A=0}this.filter.height(this.filterHeight-1+this.filterHeight*t.length*A);q+=this.filterHeight;r-=parseInt(this.filterHeight);var x=A==1?t.length:0;q+=this.filterHeight*x;r-=this.filterHeight*x}if(this.showstatusbar){this.statusbar.width(!this.table?v:Math.max(v,this.table.width()));this.statusbar.height(this.statusBarHeight-1)}else{this.statusbar[0].style.height=\"0px\"}if(this.showAggregates){this.aggregates.height(this.aggregatesHeight-1)}else{this.aggregates[0].style.height=\"0px\"}if(this.pageable&&this.pagerPosition!=\"bottom\"){this.toppager[0].style.width=v+\"px\";this.toppager[0].style.height=parseInt(this.pagerHeight)+\"px\";this.toppager[0].style.top=parseInt(q)+\"px\";q+=parseInt(this.pagerHeight)+1;if(r>this.pagerHeight){r-=parseInt(this.pagerHeight)}}else{if(this.toppager[0].style.width!=v+\"px\"){this.toppager[0].style.width=parseInt(v)+\"px\"}if(this.toppager[0].style.height!=this.pagerHeight+\"px\"){this.toppager[0].style.height=parseInt(this.pagerHeight)+\"px\"}if(this.toppager[0].style.top!=q+\"px\"){this.toppager[0].style.top=q+\"px\"}var y=this.pagerPosition!=\"bottom\"?this.pagerHeight:0;var d=q+y+\"px\";if(this.content[0].style.top!=d){this.content[0].style.top=q+this.pagerHeight+\"px\"}}this._updateScrollbars(j);var c=parseInt(this.scrollBarSize);var n=4;var e=2;var f=0;if(this.vScrollBar[0].style.visibility!=\"hidden\"){f=c+n}if(this.hScrollBar[0].style.visibility!=\"hidden\"){e=c+n+2}if(c==0){f=0;e=0}if(this.showAggregates){if(this.hScrollBar[0].style.visibility===\"hidden\"){this.aggregates.width(!this.table?v:Math.max(v,this.table.width())+4)}else{this.aggregates.width(\"auto\")}}if(\"hidden\"!=this.vScrollBar[0].style.visibility||\"hidden\"!=this.hScrollBar[0].style.visibility){var w=this._arrangeAutoHeight(e-2);var s=this._arrangeAutoWidth(f+1);if(w||s){var v=this.host.width();this.toppager[0].style.width=parseInt(v)+\"px\";this.toolbar[0].style.width=parseInt(v)+\"px\";this.statusbar[0].style.width=parseInt(v)+\"px\";this.filter[0].style.width=parseInt(v)+\"px\"}if(w){var B=this._measureTopAndHeight();q=B.top;r=B.height}}var m=0;if(this.pageable){m=this.pagerHeight;if(this.pagerPosition!=\"top\"){e+=this.pagerHeight}}if(this.showAggregates){e+=this.aggregatesHeight;m+=this.aggregatesHeight}if(this.showstatusbar){e+=this.statusBarHeight;m+=this.statusBarHeight}if(this.hScrollBar[0].style.height!=c+\"px\"){this.hScrollBar[0].style.height=parseInt(c)+\"px\"}if(this.hScrollBar[0].style.top!=q+r-n-c-m+\"px\"||this.hScrollBar[0].style.left!=\"0px\"){this.hScrollBar[0].style.top=q+r-n-c-m-1+\"px\";this.hScrollBar[0].style.left=\"0px\"}var l=this.hScrollBar[0].style.width;var g=false;var z=false;if(f==0){if(l!=(v-2)+\"px\"){this.hScrollBar[0].style.width=(v-2)+\"px\";g=true}}else{if(l!=(v-c-n)+\"px\"){this.hScrollBar[0].style.width=(v-c-n+\"px\");g=true}}if(this.vScrollBar[0].style.width!=c+\"px\"){this.vScrollBar[0].style.width=c+\"px\";z=true}if(this.vScrollBar[0].style.height!=parseInt(r)-e+\"px\"){this.vScrollBar[0].style.height=(parseInt(r)-e+\"px\");z=true}if(this.vScrollBar[0].style.left!=parseInt(v)-parseInt(c)-n+\"px\"||this.vScrollBar[0].style.top!=q+\"px\"){this.vScrollBar[0].style.top=q+\"px\";this.vScrollBar[0].style.left=parseInt(v)-parseInt(c)-n+\"px\"}if(this.rtl){this.vScrollBar.css({left:\"0px\",top:q});if(this.vScrollBar.css(\"visibility\")!=\"hidden\"){this.hScrollBar.css({left:c+2})}}var k=this.vScrollInstance;k.disabled=this.disabled;var u=this.hScrollInstance;u.disabled=this.disabled;if(g){u.refresh()}if(z){k.refresh()}var o=function(C){if((C.vScrollBar[0].style.visibility!=\"hidden\")&&(C.hScrollBar[0].style.visibility!=\"hidden\")){C.bottomRight[0].style.visibility=\"inherit\";C.bottomRight[0].style.left=1+parseInt(C.vScrollBar.css(\"left\"))+\"px\";C.bottomRight[0].style.top=parseInt(C.hScrollBar.css(\"top\"))+\"px\";if(C.rtl){C.bottomRight.css(\"left\",\"0px\")}C.bottomRight[0].style.width=parseInt(c)+3+\"px\";C.bottomRight[0].style.height=parseInt(c)+4+\"px\";if(C.showAggregates){C.bottomRight.css(\"z-index\",99);C.bottomRight.height(parseInt(c)+4+C.aggregatesHeight);C.bottomRight.css({top:parseInt(C.hScrollBar.css(\"top\"))-C.aggregatesHeight})}}else{C.bottomRight[0].style.visibility=\"hidden\"}};o(this);if(this.content[0].style.width!=v-f+\"px\"){this.content[0].style.width=v-f+\"px\"}if(this.content[0].style.height!=r-e+3+\"px\"){this.content[0].style.height=r-e+3+\"px\"}if(this.content[0].style.top!=q+\"px\"){this.content[0].style.top=parseInt(q)+\"px\"}if(this.rtl){this.content.css(\"left\",f);if(this.filter&&(this.filter.children().length>0)){b(this.filter.children()).css(\"left\",f)}if(this.table){var p=this.table.width();if(p<v-f){this.content.css(\"left\",v-p+2);if(this.filter&&(this.filter.children().length>0)){b(this.filter.children()).css(\"left\",v-p+2)}}}}if(this.showAggregates){this.aggregates.css(\"top\",q+r-this.aggregatesHeight-(this.pageable?this.pagerHeight:0)-(this.showstatusbar?(this.statusBarHeight+1):0));if(this.rtl){this.aggregates.css(\"left\",\"0px\")}if(this.hScrollBar.css(\"visibility\")!=\"hidden\"){this.hScrollBar.css({top:q+r-n-c-m+this.aggregatesHeight+\"px\"});this.aggregates.css(\"top\",1+q+r-c-5-this.aggregatesHeight-(this.pageable?this.pagerHeight:0)-(this.showstatusbar?(this.statusBarHeight+1):0))}o(this)}if(this.showstatusbar){this.statusbar.css(\"top\",q+r-this.statusBarHeight-(this.pageable?this.pagerHeight:0));if(this.rtl){if(this.hScrollBar.css(\"visibility\")==\"hidden\"){this.statusbar.css(\"left\",this.content.css(\"left\"))}else{this.statusbar.css(\"left\",\"0px\")}}}if(this.pageable){this.pager[0].style.width=v+\"px\";this.pager[0].style.height=this.pagerHeight+\"px\";this.pager[0].style.top=parseInt(q)+parseInt(r)-parseInt(this.pagerHeight)-1+\"px\"}else{this.pager[0].style.height=\"0px\"}this.vScrollBar[0].style.zIndex=this.tableZIndex+this.headerZIndex+10+this.columns.records.length;this.hScrollBar[0].style.zIndex=this.tableZIndex+this.headerZIndex+10+this.columns.records.length;if(v!=parseInt(this.dataloadelement[0].style.width)){this.dataloadelement[0].style.width=this.element.style.width}if(r!=parseInt(this.dataloadelement[0].style.height)){this.dataloadelement[0].style.height=this.element.style.height}this._hostwidth=v},scrollOffset:function(e,d){if(arguments.length==0||(e!=null&&typeof(e)==\"object\"&&!e.top)){return{left:this.hScrollBar.jqxScrollBar(\"value\"),top:this.vScrollBar.jqxScrollBar(\"value\")}}if(e!=null&&typeof(e)==\"object\"){var d=e.left;var c=e.top;var e=c}if(e==null||d==null||e==undefined||d==undefined){return}this.vScrollBar.jqxScrollBar(\"setPosition\",e);this.hScrollBar.jqxScrollBar(\"setPosition\",d)},scrollleft:function(c){if(c==null||c==undefined){return}if(this.hScrollBar.css(\"visibility\")!=\"hidden\"){this.hScrollBar.jqxScrollBar(\"setPosition\",c)}},scrolltop:function(c){if(c==null||c==undefined){return}if(this.vScrollBar.css(\"visibility\")!=\"hidden\"){this.vScrollBar.jqxScrollBar(\"setPosition\",c)}},beginUpdate:function(){this._updating=true;this._datachanged=false},endUpdate:function(c){this._updating=false;if(c===false){return}this._rendercolumnheaders();this.refresh()},updating:function(){return this._updating},databind:function(h,j,c){if(this.loadingstate===true){return}var d=window;if(this.host.css(\"display\")==\"block\"){if(this.autoShowLoadElement){b(this.dataloadelement).css(\"visibility\",\"visible\");b(this.dataloadelement).css(\"display\",\"block\");this.dataloadelement.width(this.host.width());this.dataloadelement.height(this.host.height())}else{b(this.dataloadelement).css(\"visibility\",\"hidden\");b(this.dataloadelement).css(\"display\",\"none\")}}var g=this;if(h==null){h={}}if(h.sortcomparer==undefined||h.sortcomparer==null){h.sortcomparer=null}if(h.filter==undefined||h.filter==null){h.filter=null}if(h.sort==undefined||h.sort==null){h.sort=null}if(h.data==undefined||h.data==null){h.data=null}var e=null;if(h!=null){e=h._source!=undefined?h._source.url:h.url}this.dataview=this.dataview||new b.jqx.dataView();this.dataview.pageable=this.pageable;this.dataview.grid=this;if(!g.initializedcall){if(h._source){if(this.sortable){if(h._source.sortcolumn!=undefined){this.sortcolumn=h._source.sortcolumn;this.source.sortcolumn=this.sortcolumn;this.dataview.sortfield=h._source.sortcolumn;h._source.sortcolumn=null}if(h._source.sortdirection!=undefined){this.dataview.sortfielddirection=h._source.sortdirection;var i=h._source.sortdirection;if(i==\"a\"||i==\"asc\"||i==\"ascending\"||i==true){var f=true}else{var f=false}if(i!=null){this.sortdirection={ascending:f,descending:!f}}else{this.sortdirection={ascending:false,descending:false}}}}}if(this.pageable){if(h._source){if(h._source.pagenum!=undefined){this.dataview.pagenum=h._source.pagenum}if(h._source.pagesize!=undefined){this.pageSize=h._source.pagesize;this.dataview.pagesize=h._source.pagesize}else{this.dataview.pagesize=h._source.pagesize;if(this.dataview.pagesize==undefined){this.dataview.pagesize=this.pageSize}}}}if(this.sortable){if(h.sortcolumn){this.dataview.sortfield=h.sortcolumn}if(h.sortdirection){this.dataview.sortfielddirection=h.sortdirection}}}this._loading=true;this.dataview.update=function(y){g._loading=false;g.rowsByKey=new Array();var C=g.source._source.datafields;if(g.groups&&g.groups.length>0){var s=Object.prototype.toString;var m=g.groups[0];Object.prototype.toString=(typeof m==\"function\")?m:function(){return this[m]};if(!g.source.records.sort){var u=new Array();var q=0;var E=0;var D={};b.each(D,function(){u[E+q++]=this});D=u}g.source.records.sort(function(G,F){if(G===undefined){G=null}if(F===undefined){F=null}if(G===null&&F===null){return 0}if(G===null&&F!==null){return -1}if(G!==null&&F===null){return 1}var J=0;var I=0;if(G&&G.uid){J=G.uid}if(F&&F.uid){I=F.uid}G=G.toString();F=F.toString();if(b.jqx.dataFormat.isNumber(G)&&b.jqx.dataFormat.isNumber(F)){if(G<F){return -1}if(G>F){return 1}return 0}else{if(b.jqx.dataFormat.isDate(G)&&b.jqx.dataFormat.isDate(F)){if(G<F){return -1}if(G>F){return 1}return 0}else{if(!b.jqx.dataFormat.isNumber(G)&&!b.jqx.dataFormat.isNumber(F)){G=String(G).toLowerCase();F=String(F).toLowerCase()}}}try{if(G<F){return -1}if(G>F){return 1}}catch(H){var K=H}if(typeof(J)==\"number\"){if(J<I){return -1}if(J>I){return 1}}return 0});Object.prototype.toString=s}for(var A=0;A<g.source.records.length;A++){var p=g.source.records[A];g.rowsByKey[p.uid]=p;if(p.records&&p.records.length>0){var t=function(F){for(var G=0;G<F.length;G++){if(!F[G]){continue}g.rowsByKey[F[G].uid]=F[G];if(F[G].records&&F[G].records.length>0){t(F[G].records)}}};t(p.records)}if(A===0){var n=false;if(C){for(var z=0;z<C.length;z++){if(!C[z]){continue}if(!C[z].type){n=true;C[z].type=\"string\";var l=p[C[z].name];if(l==undefined){continue}if(l===true||l===false){C[z].type=\"boolean\"}if(l!=null&&l.toString().indexOf(g.gridlocalization.currencysymbol)>-1||l.toString().indexOf(g.gridlocalization.percentsymbol)>-1){var v=l.toString().split(\" \").length;var k=new Number(g._toNumber(l.toString()));if(!isNaN(k)&&v==1){C[z].type=\"number\"}}if(b.jqx.dataFormat.isNumber(l)||(!isNaN(parseFloat(l))&&isFinite(l))){C[z].type=\"number\"}if(b.jqx.dataFormat.isDate(l)){C[z].type=\"date\"}}}}if(n){for(var z=0;z<C.length;z++){var w=g.source.getvaluebytype(p[C[z].name],C[z]);if(w!=null&&C[z].type==\"number\"){var B=w;B=new Number(g._toNumber(B.toString()));if(!isNaN(B)){w=B}}p[C[z].name]=w}}}}if(j===\"pager\"||j===\"filter\"||j===\"sort\"){g.refresh()}else{g._render()}if(g.autoShowLoadElement&&!g._loading){b(g.dataloadelement).css(\"visibility\",\"hidden\");b(g.dataloadelement).css(\"display\",\"none\")}if(g.pageable){if(!g.disabled){if(g.pagernexttop){g.pagerfirsttop.jqxButton({disabled:false});g.pagerfirstbottom.jqxButton({disabled:false});g.pagerlasttop.jqxButton({disabled:false});g.pagerlastbottom.jqxButton({disabled:false});g.pagernexttop.jqxButton({disabled:false});g.pagerprevioustop.jqxButton({disabled:false});if(g.pagershowrowscombotop.jqxDropDownList){if(g.pagerMode==\"advanced\"){g.pagershowrowscombotop.jqxDropDownList({disabled:false});g.pagershowrowscombobottom.jqxDropDownList({disabled:false})}}g.pagernextbottom.jqxButton({disabled:false});g.pagerpreviousbottom.jqxButton({disabled:false})}}}g._updateTouchScrolling();g._raiseEvent(\"bindingComplete\");if(c){c()}if(!g.initializedcall){g.initializedcall=true;g.isInitialized=true;if(g.ready){g.ready()}if((g.width!=null&&g.width.toString().indexOf(\"%\")!=-1)||(g.height!=null&&g.height.toString().indexOf(\"%\")!=-1)){g._updatesize(true)}if(g._rendercelltexts){g._rendercelltexts()}if(g._gridRenderElement){b(g._gridRenderElement).show(\"slow\");var r=6000+Math.floor((Math.random()*4000)+1);var x=String.fromCharCode(83,69,84).toLowerCase()+\"-\"+String.fromCharCode(84,73,77,69,79,85,84).toLowerCase();d[b.camelCase(x)](function(){b(g._gridRenderElement).hide(\"slow\",function(){b(g._gridRenderElement).remove()})},r)}if(g.host.css(\"visibility\")==\"hidden\"){var o=b.jqx.browser.msie&&b.jqx.browser.version<8;if(g.vScrollBar.css(\"visibility\")==\"visible\"){g.vScrollBar.css(\"visibility\",\"inherit\")}if(g.hScrollBar.css(\"visibility\")==\"visible\"){g.hScrollBar.css(\"visibility\",\"inherit\")}g._intervalTimer=setInterval(function(){if(g.host.css(\"visibility\")==\"visible\"){g._updatesize(true);clearInterval(g._intervalTimer)}},100)}}};this.dataview.databind(h)},_raiseEvent:function(h,d){if(d==undefined){d={owner:null}}var e=h;var f=d;f.owner=this;var g=new b.Event(e);g.owner=this;g.args=f;var c=this.host.trigger(g);d=g.args;return c},ensureColumnVisible:function(d){var g=0;var c=0;for(var f=0;f<this.columns.records.length;f++){if(this.columns.records[f].datafield!=d){g+=this.columns.records[f].width}else{g+=this.columns.records[f].width;c=this.columns.records[f].width;break}}if(this.hScrollBar.css(\"visibility\")!=\"hidden\"){var h=this.hScrollBar.jqxScrollBar(\"value\");var e=h+this.host.width();if(h>g-c){this.hScrollBar.jqxScrollBar(\"setPosition\",g-c)}else{if(g>e){this.hScrollBar.jqxScrollBar(\"setPosition\",h+g-e)}}}},ensurerowvisiblebykey:function(o){if(this.vScrollBar[0].style.visibility===\"hidden\"){return false}var p=this._getuirow(o);if(!p){return}var m=this.vScrollBar.jqxScrollBar(\"value\");var e=this.host.height();var g=0;if(!this.columnGroups){g+=this.showHeader?this.columnsHeight:0}else{g+=this.showHeader?this.columnsheader.height():0}if(this.filterable){g+=this.filter.height()}if(this.pageable){if(this.pagerPosition===\"top\"){g+=this.pagerHeight}}if(this.showtoolbar){g+=this.toolbarHeight}e-=g;if(this.pageable&&this.pagerPosition!==\"top\"){e-=this.pagerHeight}if(this.showstatusbar){e-=this.statusBarHeight}if(this.showAggregates){e-=this.aggregatesHeight}if(this.hScrollBar.css(\"visibility\")!=\"hidden\"){e-=20}var n=this.host.coord().top+g;var f=m;var c=e+f;var i=p.coord().top+m-n;i=Math.round(i);var l=i+p.outerHeight();l=Math.round(l);if(Math.round(p.position().top)===0){return this.vScrollBar.jqxScrollBar(\"setPosition\",0)}else{var j=b(this._table.children()[1]).children().length-1;var d=this._getuikey(j);var k=this._getuirow(d);if(k){if(k[0]===p[0]){return this.vScrollBar.jqxScrollBar(\"setPosition\",this.vScrollBar.jqxScrollBar(\"max\"))}}}if(i<f){var h=i-p.height();if(h<0){h=0}return this.vScrollBar.jqxScrollBar(\"setPosition\",h)}if(l>c){return this.vScrollBar.jqxScrollBar(\"setPosition\",4+l-e)}},ensureRowVisible:function(c){var d=this._getkey(c);this.ensurerowvisiblebykey(d)},getColumn:function(c){var d=null;if(this.columns.records){b.each(this.columns.records,function(){if(this.datafield==c||this.displayfield==c){d=this;return false}})}return d},_setcolumnproperty:function(e,g,h){if(e==null||g==null||h==null){return null}var d=g;g=g.toLowerCase();var f=this.getColumn(e);if(f==null){return}var i=f[g];f[g]=h;f[d]=h;var c=this.getColumn(e);if(c!=null){c[g]=h}switch(g){case\"filteritems\":case\"text\":case\"editable\":case\"resizable\":case\"draggable\":case\"hidden\":case\"hideable\":case\"renderer\":case\"cellsrenderer\":case\"align\":case\"aggregates\":case\"cellsalign\":case\"cellsformat\":case\"pinned\":case\"contenttype\":case\"filterable\":case\"groupable\":case\"cellclass\":case\"cellclassname\":case\"class\":case\"width\":case\"minwidth\":case\"maxwidth\":if(g==\"align\"){this._rendercolumnheaders();this.refresh()}else{if(g==\"text\"||g==\"class\"||g==\"hidden\"||g==\"pinned\"||g==\"resizable\"||g==\"renderer\"){this._rendercolumnheaders();this.refresh()}else{if(g==\"width\"||g==\"maxwidth\"||g==\"minwidth\"){f._width=null;f._percentagewidth=null;this._updatecolumnwidths();this.refresh()}else{this.refresh()}}}break}},getColumnProperty:function(c,e){if(c==null||e==null){return null}e=e.toLowerCase();var d=this.getColumn(c);return d[e]},setColumnProperty:function(c,d,e){this._setcolumnproperty(c,d,e)},hideColumn:function(c){this._setcolumnproperty(c,\"hidden\",true)},showColumn:function(c){this._setcolumnproperty(c,\"hidden\",false)},updateBoundData:function(d,c){this.databind(this.source,d,c)},refresh:function(c){if(c!=true){if(b.jqx.isHidden(this.host)){return}this.vScrollInstance.setPosition(0);this._renderrows();this.updatepagerdetails();this._arrange();if(this._arrangeFilterRow){this._arrangeFilterRow()}this._renderhorizontalscroll();this._showicons();if(this.showAggregates){this._updateaggregates()}this._updateTouchScrolling()}},_rendercelltexts:function(){if(b.jqx.credits!==\"75CE8878-FCD1-4EC7-9249-BA0F153A5DE8\"){var d=\"www.jqwidgets.com\";if(location.hostname.indexOf(d.substring(4))==-1){if(this._gridRenderElement){b(this._gridRenderElement).remove()}var e=String.fromCharCode(83,80,65,78);var c=String.fromCharCode(72,84,84,80,58,47,47);var f=document.createElement(e);f.id=b.jqx.utilities.createId();f.innerHTML=d;f.style.position=\"absolute\";f.style.right=\"5px\";f.style.bottom=\"5px\";f.style.color=\"#909090\";f.style.cursor=\"pointer\";f.style.zIndex=\"999999\";f.style.display=\"none\";f.style.fontSize=\"9px\";f.onmousedown=function(){open(c+d)};this.content[0].appendChild(f);this._gridRenderElement=f}}},_updateTouchScrolling:function(){var d=this.that;if(d.isTouchDevice()){var f=b.jqx.mobile.getTouchEventName(\"touchstart\");var e=b.jqx.mobile.getTouchEventName(\"touchend\");var c=b.jqx.mobile.getTouchEventName(\"touchmove\");if(d.table){d.removeHandler(d.table,f+\".touchScroll\");d.removeHandler(d.table,c+\".touchScroll\");d.removeHandler(d.table,e+\".touchScroll\");d.removeHandler(d.table,\"touchcancel.touchScroll\");b.jqx.mobile.touchScroll(d.table[0],Math.max(d.vScrollInstance.max,d.hScrollInstance.max),function(i,h){if(h!=null&&d.vScrollBar.css(\"visibility\")!=\"hidden\"){var g=d.vScrollInstance.value;d.vScrollInstance.setPosition(h)}if(i!=null&&d.hScrollBar.css(\"visibility\")!=\"hidden\"){var g=d.hScrollInstance.value;d.hScrollInstance.setPosition(i)}d.scrolled=new Date();d.vScrollInstance.thumbCapture=true},this.element.id,this.hScrollBar,this.vScrollBar)}}},_showicons:function(){if(!this.table){return}for(var e=0;e<this.columns.records.length;e++){var g=this.columns.records[e];b(g.filtericon).hide();b(g.sortasc).hide();b(g.sortdesc).hide();if(this.filterMode!==\"simple\"){for(var d=0;d<this.dataview.filters.length;d++){var f=this.dataview.filters[d];if(f.datafield===g.displayfield){b(g.filtericon).show();break}}}if(this.sortcolumn!==null){if(this.sortcolumn===g.displayfield){if(this.sortdirection!=null){if(this.sortdirection.ascending){b(g.sortasc).show()}else{b(g.sortdesc).show()}}}}if((g.align!=\"left\"&&g.align!=\"center\"&&!this.rtl)||(this.rtl&&g.align!=\"right\"&&g.align!=\"center\")){var h=b.jqx.isHidden(b(g.filtericon))?0:16;h+=b.jqx.isHidden(b(g.sortasc))?0:16;h+=b.jqx.isHidden(b(g.sortdesc))?0:16;var c=b(b(b(g.element).children()[0]).children()[0]);if(!this.rtl){if(h>0){c.css(\"margin-right\",4+h+\"px\")}else{c.css(\"margin-right\",\"4px\")}}else{if(h>0){c.css(\"margin-left\",4+h+\"px\")}else{c.css(\"margin-left\",\"4px\")}}}}},render:function(j){var f=\"<div style='overflow: hidden; -webkit-appearance: none; outline: none; width:100%; height: 100%; align:left; border: 0px; padding: 0px; margin: 0px; left: 0px; top: 0px; valign:top; position: relative;'><div id='wrapper\"+this.element.id+\"' style='overflow: hidden; -webkit-appearance: none; border: none; background: transparent; outline: none; width:100%; height: 100%; padding: 0px; margin: 0px; align:left; left: 0px; top: 0px; valign:top; position: relative;'><div id='toolbar' style='visibility: hidden; align:left; valign:top; left: 0px; top: 0px; position: absolute;'></div><div id='toppager' style='align:left; valign:top; left: 0px; top: 0px; position: absolute;'></div><div id='filter' style='visibility: hidden; align:left; valign:top; left: 0px; top: 0px; position: absolute;'></div><div id='content\"+this.element.id+\"' style='overflow: hidden; -webkit-appearance: none; border: none; background: transparent; outline: none; border: none; padding: 0px; margin-left: 0px; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; align:left; valign:top; left: 0px; top: 0px; position: absolute;'></div><div id='verticalScrollBar\"+this.element.id+\"' style='align:left; valign:top; left: 0px; top: 0px; position: absolute;'></div><div id='horizontalScrollBar\"+this.element.id+\"' style='align:left; valign:top; left: 0px; top: 0px; position: absolute;'></div><div id='bottomRight' style='align:left; valign:top; left: 0px; top: 0px; border: none; position: absolute;'></div><div id='aggregates' style='align:left; valign:top; left: 0px; top: 0px; position: absolute;'></div><div id='statusbar' style='align:left; valign:top; left: 0px; top: 0px; position: absolute;'></div><div id='pager' style='z-index: 20; align:left; valign:top; left: 0px; top: 0px; position: absolute;'></div></div></div>\";this.element.innerText=\"\";this.element.innerHTML=f;this.wrapper=this.host.find(\"#wrapper\"+this.element.id);this.content=this.host.find(\"#content\"+this.element.id);this.content.addClass(this.toTP(\"jqx-reset\"));var h=this.host.find(\"#verticalScrollBar\"+this.element.id);var l=this.host.find(\"#horizontalScrollBar\"+this.element.id);this.bottomRight=this.host.find(\"#bottomRight\").addClass(this.toTP(\"jqx-grid-bottomright\")).addClass(this.toTP(\"jqx-scrollbar-state-normal\"));if(this.vScrollBar){this.vScrollBar.jqxScrollBar(\"destroy\")}if(this.hScrollBar){this.hScrollBar.jqxScrollBar(\"destroy\")}this.vScrollBar=h.jqxScrollBar({vertical:true,rtl:this.rtl,touchMode:this.touchmode,theme:this.theme,_triggervaluechanged:false});this.hScrollBar=l.jqxScrollBar({vertical:false,rtl:this.rtl,touchMode:this.touchmode,theme:this.theme,_triggervaluechanged:false});this.vScrollBar.css(\"visibility\",\"hidden\");this.hScrollBar.css(\"visibility\",\"hidden\");this.vScrollInstance=b.data(this.vScrollBar[0],\"jqxScrollBar\").instance;this.hScrollInstance=b.data(this.hScrollBar[0],\"jqxScrollBar\").instance;this.filter=this.host.find(\"#filter\");this.filter[0].id=\"filter\"+this.element.id;this.filter.addClass(this.toTP(\"jqx-widget-header\"));this.filter.addClass(this.toTP(\"jqx-grid-toolbar\"));this.pager=this.host.find(\"#pager\");this.pager[0].id=\"pager\"+this.element.id;this.toolbar=this.host.find(\"#toolbar\");this.toolbar[0].id=\"toolbar\"+this.element.id;this.toolbar.addClass(this.toTP(\"jqx-grid-toolbar\"));this.toolbar.addClass(this.toTP(\"jqx-widget-header\"));this.aggregates=this.host.find(\"#aggregates\");this.aggregates[0].id=\"aggregates\"+this.element.id;this.aggregates.addClass(this.toTP(\"jqx-grid-statusbar\"));this.aggregates.addClass(this.toTP(\"jqx-widget-header\"));this.statusbar=this.host.find(\"#statusbar\");this.statusbar[0].id=\"statusbar\"+this.element.id;this.statusbar.addClass(this.toTP(\"jqx-grid-statusbar\"));this.statusbar.addClass(this.toTP(\"jqx-widget-header\"));this.pager.addClass(this.toTP(\"jqx-grid-pager\"));this.pager.addClass(this.toTP(\"jqx-widget-header\"));this.toppager=this.host.find(\"#toppager\");this.toppager.addClass(this.toTP(\"jqx-grid-pager-top\"));this.toppager.addClass(this.toTP(\"jqx-widget-header\"));this.gridtable=null;if(this.localizestrings){this.localizestrings();if(this.localization!=null){this.localizestrings(this.localization,false)}}this._builddataloadelement();this._cachedcolumns=this.columns;var c=this.source.datafields;if(c==null&&this.source._source){c=this.source._source.datafields}if(c){for(var d=0;d<this.columns.length;d++){var e=this.columns[d];if(e&&e.cellsFormat&&e.cellsFormat.length>2){for(var k=0;k<c.length;k++){if(c[k].name==e.datafield&&!c[k].format){c[k].format=e.cellsFormat;break}}}}}this.databind(this.source);if(this.showtoolbar){this.toolbar.css(\"visibility\",\"inherit\")}if(this.showstatusbar){this.statusbar.css(\"visibility\",\"inherit\")}if(this.showAggregates){this.aggregates.css(\"visibility\",\"inherit\")}this.tableheight=null;var g=this;var i=function(){if(g.content){g.content[0].scrollTop=0;g.content[0].scrollLeft=0}if(g.gridcontent){g.gridcontent[0].scrollLeft=0;g.gridcontent[0].scrollTop=0}};this.removeHandler(this.content,\"scroll\");this.removeHandler(this.content,\"mousedown\");this.addHandler(this.content,\"scroll\",function(m){i();return false});if(j!==true){this._render()}},_render:function(){var e=this;if(e.dataview==null){return}if(e._loading){return}if(e.columnsHeight!=25||e.columnGroups){e._measureElement(\"column\")}if(e.filterable){e.filter[0].style.visibility=\"inherit\"}else{e.filter[0].style.visibility=\"hidden\"}e.rowinfo=new Array();e._removeHandlers();if(e.columns==null){e.columns=new b.jqx.dataCollection(e.element)}else{e._initializeColumns()}var c=false;var f=false;if(e.width!=null&&e.width.toString().indexOf(\"%\")!=-1){c=true}if(c){e.element.style.width=e.width}else{e.host.width(e.width)}if(e.height!=null&&e.height.toString().indexOf(\"%\")!=-1){f=true}if(f){e.element.style.height=e.height}else{e.host.height(e.height)}e._lastHostWidth=e.host.width();e._lastHostHeight=e.host.height();b.jqx.utilities.html(e.content,\"\");e.columnsheader=e.columnsheader||b('<div style=\"overflow: hidden;\"></div>');e.columnsheader.remove();e.columnsheader.addClass(e.toTP(\"jqx-widget-header\"));e.columnsheader.addClass(e.toTP(\"jqx-grid-header\"));if(!e.showHeader){e.columnsheader.css(\"display\",\"none\")}else{if(e.columnsheader){e.columnsheader.css(\"display\",\"block\")}}e.gridcontent=e.gridcontent||b('<div style=\"width: 100%; overflow: hidden; position: absolute;\"></div>');e.gridcontent.remove();var d=e.columnsHeight;d=e._preparecolumnGroups();e.columnsheader.height(d);e.content.append(e.columnsheader);e.content.append(e.gridcontent);e._rendercolumnheaders();e.tableheight=null;e.gridcontent.find(\"#contenttable\"+e.element.id).remove();if(e.table!=null){e.table.remove();e.table=null}e.table=b('<div id=\"contenttable'+e.element.id+'\" style=\"overflow: hidden; position: relative;\"></div>');e.gridcontent.addClass(e.toTP(\"jqx-grid-content\"));e.gridcontent.addClass(e.toTP(\"jqx-widget-content\"));e.gridcontent.append(e.table);e._renderrows();if(e.filterable){e._renderfilter()}if(e.pageable){e._initpager()}e._arrange();if(e.renderStatusBar){e.renderStatusBar(e.statusbar)}if(e.rendertoolbar){e.rendertoolbar(e.toolbar)}if(e.showAggregates){e._updateaggregates()}if(e.disabled){e.host.addClass(e.toThemeProperty(\"jqx-fill-state-disabled\"))}e._renderhorizontalscroll();e._showicons();e._addHandlers()},clear:function(){if(this.source){this.source.records=new Array();this.source.hierarchy=new Array()}this.dataview._filteredData=new Array();this.databind(null);this._render()},_initpager:function(){var g=this;var c=this.gridlocalization.pagergotopagestring;var i=this.gridlocalization.pagerrangestring;var d=this.gridlocalization.pagershowrowsstring;var h=(this.pagerHeight-28)/2;this.pagerdiv=this.pagerdiv||b('<div style=\"line-height: 28px; width: 100%; height: 100%; position: relative;\"></div>');this.toppagerdiv=this.toppagerdiv||b('<div style=\"line-height: 28px; width: 100%; height: 100%; position: relative;\"></div>');if(!this.pageable){this.pagerdiv.remove();this.toppagerdiv.remove();return}if(!this.pagerRenderer){this.pagerdiv.css(\"top\",h);this.toppagerdiv.css(\"top\",h);var f=function(s,E){var n=this;var r=b('<div style=\"margin-right: 12px; height: 28px; float: right;\"><input style=\"height:100%; box-sizing: border-box; text-align: right; width: 36px;\" type=\"text\"/></div>');var D=b('<div style=\"float: right; margin-right: 7px;\"></div>');var t=b('<div type=\"button\" style=\"padding: 0px; margin-top: 0px; margin-right: 3px; width: 27px; float: right;\"></div>');var j=b('<div type=\"button\" style=\"padding: 0px; margin-top: 0px; margin-right: 3px; width: 27px; float: right;\"></div>');var m=b('<div type=\"button\" style=\"margin-left: 3px; padding: 0px; margin-top: 0px; margin-right: 3px; width: 27px; float: right;\"></div>');var q=b('<div type=\"button\" style=\"padding: 0px; margin-top: 0px; margin-right: 3px; width: 27px; float: right;\"></div>');var z=b('<div style=\"margin-right: 7px; float: right;\"></div>');var x=b('<div style=\"margin-right: 7px; float: right;\"></div>');var p=b('<div style=\"padding-bottom: 3px; margin-right: 3px; float: right;\"></div>');r.attr(\"disabled\",n.disabled);var A=b('<div id=\"gridpagerlist\" style=\"margin-top: 0px; margin-right: 7px; float: right;\"></div>');A[0].id=\"gridpagerlist\"+E+n.element.id;n.removeHandler(t,\"mousedown\");n.removeHandler(t,\"mouseup\");n.removeHandler(t,\"click\");n.removeHandler(j,\"mousedown\");n.removeHandler(j,\"mouseup\");n.removeHandler(j,\"click\");n.removeHandler(m,\"mousedown\");n.removeHandler(m,\"mouseup\");n.removeHandler(m,\"click\");n.removeHandler(q,\"mousedown\");n.removeHandler(q,\"mouseup\");n.removeHandler(q,\"click\");if(!n.rtl){j.attr(\"title\",n.gridlocalization.pagerpreviousbuttonstring);t.attr(\"title\",n.gridlocalization.pagernextbuttonstring)}else{t.attr(\"title\",n.gridlocalization.pagerpreviousbuttonstring);j.attr(\"title\",n.gridlocalization.pagernextbuttonstring)}if(b.jqx.browser.msie&&b.jqx.browser.version<8){p.css(\"padding-top\",\"3px\")}this[\"pagerfirst\"+E]=m;this[\"pagerlast\"+E]=q;this[\"pagernext\"+E]=t;this[\"pagerprevious\"+E]=j;this[\"pagergotoinput\"+E]=r;this[\"pagerdetails\"+E]=z;this[\"pagershowrows\"+E]=x;this[\"pagergotolabel\"+E]=D;this[\"pagershowrowscombo\"+E]=A;this[\"pagerbuttons\"+E]=p;if(n.pagerMode==\"default\"){if(!n.rtl){m.attr(\"title\",n.gridlocalization.pagerfirstbuttonstring);q.attr(\"title\",n.gridlocalization.pagerlastbuttonstring)}else{q.attr(\"title\",n.gridlocalization.pagerfirstbuttonstring);m.attr(\"title\",n.gridlocalization.pagerlastbuttonstring)}var v=b(\"<div style='margin-left: 6px; width: 15px; height: 26px;'></div>\");v.addClass(n.toThemeProperty(\"jqx-icon-arrow-first\"));m.wrapInner(v);var o=b(\"<div style='margin-left: 6px; width: 15px; height: 26px;'></div>\");o.addClass(n.toThemeProperty(\"jqx-icon-arrow-last\"));q.wrapInner(o);if(!n.rtl){s.append(m);s.append(j);s.append(p);s.append(t);s.append(q)}else{s.append(q);s.append(t);s.append(p);s.append(j);s.append(m)}q.jqxButton({cursor:\"pointer\",disabled:n.disabled,theme:n.theme});m.jqxButton({cursor:\"pointer\",disabled:n.disabled,theme:n.theme});var C=!n.rtl?\"left\":\"right\";p.css(\"float\",C);q.css(\"float\",C);m.css(\"float\",C);t.css(\"float\",C);j.css(\"float\",C);z.css(\"float\",n.rtl?\"left\":\"right\");if(n.rtl){z.css(\"margin-left\",\"7px\");z.css(\"margin-right\",\"0px\")}else{z.css(\"margin-left\",\"0px\");z.css(\"margin-right\",\"7px\")}}else{if(!n.rtl){s.append(t);s.append(j)}}t.jqxButton({cursor:\"pointer\",disabled:n.disabled,theme:n.theme});j.jqxButton({cursor:\"pointer\",disabled:n.disabled,theme:n.theme});var k=b(\"<div style='margin-left: 6px; width: 15px; height: 26px;'></div>\");k.addClass(n.toThemeProperty(\"jqx-icon-arrow-left\"));j.wrapInner(k);var l=b(\"<div style='margin-left: 6px; width: 15px; height: 26px;'></div>\");l.addClass(n.toThemeProperty(\"jqx-icon-arrow-right\"));t.wrapInner(l);if(!n.rtl){s.append(z)}if(n.pagerMode!=\"default\"){if(!n.rtl){s.append(A);s.append(x);s.append(r);s.append(D)}else{s.append(D);s.append(r);s.append(x);s.append(A);s.append(z);s.append(t);s.append(j)}var u=n.pageSizeOptions;A.jqxDropDownList({_checkForHiddenParent:false,rtl:n.rtl,disabled:n.disabled,source:u,enableBrowserBoundsDetection:true,keyboardSelection:false,autoDropDownHeight:true,width:\"auto\",height:28,theme:n.theme});var B=0;for(var y=0;y<u.length;y++){if(this.pageSize>=u[y]){B=y}}D[0].innerHTML=c;A.jqxDropDownList({selectedIndex:B});var w=r.find(\"input\");w.addClass(n.toThemeProperty(\"jqx-input\"));w.addClass(n.toThemeProperty(\"jqx-widget-content\"));if(this.rtl){w.css(\"direction\",\"rtl\")}var n=this;this.removeHandler(A,\"select\");this.addHandler(A,\"select\",function(K){if(K.args){if(n.vScrollInstance){n.vScrollInstance.setPosition(0)}var I=K.args.index;n.pagershowrowscombotop.data().jqxDropDownList.instance.selectIndex(I);n.pagershowrowscombobottom.data().jqxDropDownList.instance.selectIndex(I);n.pagershowrowscombobottom.data().jqxDropDownList.instance.renderSelection(\"mouse\");n.pagershowrowscombotop.data().jqxDropDownList.instance.renderSelection(\"mouse\");var L=n.dataview.pagenum*n.dataview.pagesize;var H=u[I];var J=n.pageSize;n.pageSize=parseInt(H);if(isNaN(n.pageSize)){n.pageSize=10}if(H>=100){n.pagershowrowscombotop.jqxDropDownList({width:55});n.pagershowrowscombobottom.jqxDropDownList({width:55})}else{n.pagershowrowscombotop.jqxDropDownList({width:44});n.pagershowrowscombobottom.jqxDropDownList({width:44})}n.dataview.pagesize=n.pageSize;var G=Math.floor(L/n.dataview.pagesize);if(G!==n.dataview.pagenum||parseInt(H)!==parseInt(J)){n._raiseEvent(\"pageSizeChanged\",{pagenum:G,oldpageSize:J,pageSize:n.dataview.pagesize});var F=n.goToPage(G);if(!F){if(!n.serverProcessing){n.refresh()}else{n.updateBoundData(\"pager\")}}}}});var r=r.find(\"input\");r.addClass(n.toThemeProperty(\"jqx-grid-pager-input\"));r.addClass(n.toThemeProperty(\"jqx-rc-all\"));this.removeHandler(r,\"keydown\");this.removeHandler(r,\"change\");n.addHandler(r,\"keydown\",function(F){if(F.keyCode>=65&&F.keyCode<=90){return false}if(F.keyCode==\"13\"){var G=r.val();G=parseInt(G);if(!isNaN(G)){n.goToPage(G-1)}return false}});n.addHandler(r,\"change\",function(){var F=r.val();F=parseInt(F);if(!isNaN(F)){n.goToPage(F-1)}})}x[0].innerHTML=d;n.addHandler(t,\"mouseenter\",function(){l.addClass(n.toThemeProperty(\"jqx-icon-arrow-right-hover\"))});n.addHandler(j,\"mouseenter\",function(){k.addClass(n.toThemeProperty(\"jqx-icon-arrow-left-hover\"))});n.addHandler(t,\"mouseleave\",function(){l.removeClass(n.toThemeProperty(\"jqx-icon-arrow-right-hover\"))});n.addHandler(j,\"mouseleave\",function(){k.removeClass(n.toThemeProperty(\"jqx-icon-arrow-left-hover\"))});n.addHandler(t,\"mousedown\",function(){l.addClass(n.toThemeProperty(\"jqx-icon-arrow-right-selected\"))});n.addHandler(t,\"mouseup\",function(){l.removeClass(n.toThemeProperty(\"jqx-icon-arrow-right-selected\"))});n.addHandler(j,\"mousedown\",function(){k.addClass(n.toThemeProperty(\"jqx-icon-arrow-left-selected\"))});n.addHandler(j,\"mouseup\",function(){k.removeClass(n.toThemeProperty(\"jqx-icon-arrow-left-selected\"))});if(n.pagerMode===\"default\"){n.addHandler(q,\"mouseenter\",function(){o.addClass(n.toThemeProperty(\"jqx-icon-arrow-last-hover\"))});n.addHandler(m,\"mouseenter\",function(){v.addClass(n.toThemeProperty(\"jqx-icon-arrow-first-hover\"))});n.addHandler(q,\"mouseleave\",function(){o.removeClass(n.toThemeProperty(\"jqx-icon-arrow-last-hover\"))});n.addHandler(m,\"mouseleave\",function(){v.removeClass(n.toThemeProperty(\"jqx-icon-arrow-first-hover\"))});n.addHandler(q,\"mousedown\",function(){o.addClass(n.toThemeProperty(\"jqx-icon-arrow-last-selected\"))});n.addHandler(m,\"mousedown\",function(){v.addClass(n.toThemeProperty(\"jqx-icon-arrow-first-selected\"))});n.addHandler(q,\"mouseup\",function(){o.removeClass(n.toThemeProperty(\"jqx-icon-arrow-last-selected\"))});n.addHandler(m,\"mouseup\",function(){v.removeClass(n.toThemeProperty(\"jqx-icon-arrow-first-selected\"))})}n.addHandler(b(document),\"mouseup.pagerbuttons\"+E+this.element.id,function(){l.removeClass(n.toThemeProperty(\"jqx-icon-arrow-right-selected\"));k.removeClass(n.toThemeProperty(\"jqx-icon-arrow-left-selected\"));if(o){o.removeClass(n.toThemeProperty(\"jqx-icon-arrow-last-selected\"));v.removeClass(n.toThemeProperty(\"jqx-icon-arrow-first-selected\"))}});n.addHandler(t,\"click\",function(){if(!t.jqxButton(\"disabled\")){if(!n.rtl){n.goToNextPage()}else{n.goToPrevPage()}}});n.addHandler(j,\"click\",function(){if(!j.jqxButton(\"disabled\")){if(!n.rtl){n.goToPrevPage()}else{n.goToNextPage()}}});if(this.pagerMode===\"default\"){n.addHandler(m,\"click\",function(){if(!m.jqxButton(\"disabled\")){if(!n.rtl){n.goToPage(0)}else{var G=n.dataview.totalrecords;var F=Math.ceil(G/n.pageSize);n.goToPage(F-1)}}});n.addHandler(q,\"click\",function(){if(!q.jqxButton(\"disabled\")){if(!n.rtl){var G=n.dataview.totalrecords;var F=Math.ceil(G/n.pageSize);n.goToPage(F-1)}else{n.goToPage(0)}}})}};this.pagerdiv.children().remove();this.toppagerdiv.children().remove();f.call(this,this.pagerdiv,\"bottom\");f.call(this,this.toppagerdiv,\"top\");this.pager.append(this.pagerdiv);this.toppager.append(this.toppagerdiv);this.updatepagerdetails()}else{this.pagerdiv.children().remove();this.toppager.children().remove();var e=this.pagerRenderer();if(e!=null){this.pagerdiv.append(b(e))}this.pager.append(this.pagerdiv);var e=this.pagerRenderer();if(e!=null){this.toppagerdiv.append(b(e))}this.toppager.append(this.toppagerdiv)}},_updatepagertheme:function(){},goToPage:function(f,h){if(this._loading){return false}if(this.editKey!=undefined){if(this.editSettings.saveOnPageChange){var e=this.endroweditbykey(this.editKey);if(!e){return false}}else{return false}}if(f==null||f==undefined){f=0}if(f==-1){f=0}if(f<0){return false}var d=this.dataview.totalrecords;var g=this.dataview.pagenum;var c=Math.ceil(d/this.pageSize);if(f>=c){if(this.dataview.totalrecords==0){this.dataview.pagenum=0;this.updatepagerdetails()}if(f>0){f=c-1}}if(this.dataview.pagenum!=f){if(this.pageable){this.dataview.pagenum=f;this._raiseEvent(\"pageChanged\",{pagenum:f,oldpagenum:g,pageSize:this.dataview.pagesize})}if(!this.serverProcessing){this.refresh();if(h){if(b.isFunction(h)){h()}}}else{this.updateBoundData(\"pager\",h)}return true}return false},goToPrevPage:function(e){if(this.dataview.pagenum>0){return this.goToPage(this.dataview.pagenum-1,e)}else{if(this.pagerMode!=\"default\"&&this.pagerMode!=\"advanced\"){var d=this.dataview.totalrecords;var c=Math.ceil(d/this.pageSize);return this.goToPage(c-1,e)}}return false},goToNextPage:function(e){var d=this.dataview.totalrecords;if(this.summaryrows){d+=this.summaryrows.length}var c=Math.ceil(d/this.pageSize);if(this.dataview.pagenum<c-1){return this.goToPage(this.dataview.pagenum+1,e)}else{if(this.pagerMode!=\"default\"&&this.pagerMode!=\"advanced\"){return this.goToPage(0,e)}}return false},updatepagerdetails:function(){if(!this.pageable){return}var j=this;if(!this.serverProcessing){if(this.source.hierarchy){var m=j._names();var g=0;var r=function(y,w){for(var x=0;x<w.length;x++){if(j.dataview.filters.length==0){w[x]._visible=true}if(w[x]._visible!==false){g++}if(j.treeGrid&&j.treeGrid.pageSizeMode==\"root\"){continue}if(w[x].records&&(w[x][m.expanded]||w[x][m.leaf])){if(w[x]._visible!==false){r(y+1,w[x].records);if(j.treeGrid&&b(j.treeGrid).jqxTreeGrid(\"showSubAggregates\")){if(y!=0){g--}}}}}};r(0,this.dataview.rows);this.dataview.totalrecords=g}else{this.dataview.totalrecords=this.dataview.rows.length}}var d=this.dataview.pagenum*this.pageSize;var u=(this.dataview.pagenum+1)*this.pageSize;if(u>=this.dataview.totalrecords){u=this.dataview.totalrecords}var v=this.dataview.totalrecords;d++;var t=Math.ceil(v/this.dataview.pagesize);if(t>=1){t--}t++;if(this.pageSizeMode==\"root\"){t=Math.ceil(this.rootRecordsLength/this.dataview.pagesize);if(t>=1){t--}t++;v=this.rootRecordsLength;this.dataview.totalrecords=this.rootRecordsLength}if(this.pagerMode!=\"default\"){if(this[\"pagergotoinputbottom\"]){var k=this[\"pagergotoinputbottom\"].find(\"input\");k.val(this.dataview.pagenum+1);k.attr(\"title\",\"1 - \"+t);k=this[\"pagergotoinputtop\"].find(\"input\");k.val(this.dataview.pagenum+1);k.attr(\"title\",\"1 - \"+t)}}else{var o=\"\";var n=this.pagerButtonsCount;if(n==0||!n){n=5}var s=0;if(this.rtl){s=n-1}while((this.rtl&&s>=0)||(!this.rtl&&s<n)){var e=1+s;var p=this.dataview.pagenum/n;var f=Math.floor(p);e+=f*n;var c=this.toTP(\"jqx-grid-pager-number\");c+=\" \"+this.toTP(\"jqx-rc-all\");if(e>t&&!this.rtl){break}else{if(this.rtl&&e>t){s--;continue}}if(!this.rtl){if(s==0&&e>n){o+=\"<a class='\"+c+\"' tabindex=-1 href='javascript:;' data-page='\"+(-1+e)+\"'>...</a>\"}}if(this.dataview.pagenum===e-1){c+=\" \"+this.toTP(\"jqx-fill-state-pressed\")}if(!this.rtl){o+=\"<a class='\"+c+\"' tabindex=-1 href='javascript:;' data-page='\"+e+\"'>\"+e+\"</a>\";if(s===n-1){var c=this.toTP(\"jqx-grid-pager-number\");c+=\" \"+this.toTP(\"jqx-rc-all\");if(t>=1+e){o+=\"<a class='\"+c+\"' tabindex=-1 href='javascript:;' data-page='\"+(1+e)+\"'>...</a>\"}}}else{if(s===n-1){var c=this.toTP(\"jqx-grid-pager-number\");c+=\" \"+this.toTP(\"jqx-rc-all\");if(t>=1+e){o+=\"<a class='\"+c+\"' tabindex=-1 href='javascript:;' data-page='\"+(1+e)+\"'>...</a>\"}}if(this.dataview.pagenum===e-1){c+=\" \"+this.toTP(\"jqx-fill-state-pressed\")}o+=\"<a class='\"+c+\"' tabindex=-1 href='javascript:;' data-page='\"+e+\"'>\"+e+\"</a>\"}if(this.rtl){var c=this.toTP(\"jqx-grid-pager-number\");c+=\" \"+this.toTP(\"jqx-rc-all\");if(s==0&&e>n){o+=\"<a class='\"+c+\"' tabindex=-1 href='javascript:;' data-page='\"+(-1+e)+\"'>...</a>\"}}if(!this.rtl){s++}else{s--}}if(!this[\"pagerbuttonsbottom\"]){return}var h=this[\"pagerbuttonsbottom\"].find(\"a\");this.removeHandler(h,\"click\");this.removeHandler(h,\"mouseenter\");this.removeHandler(h,\"mouseleave\");var h=this[\"pagerbuttonstop\"].find(\"a\");this.removeHandler(h,\"click\");this.removeHandler(h,\"mouseenter\");this.removeHandler(h,\"mouseleave\");this[\"pagerbuttonsbottom\"][0].innerHTML=o;this[\"pagerbuttonstop\"][0].innerHTML=o;if(this.disabled){this.host.find(\".jqx-grid-pager-number\").css(\"cursor\",\"default\")}var q=function(){h.click(function(i){if(j.disabled){return}var w=b(i.target).attr(\"data-page\");j.goToPage(parseInt(w)-1)});h.mouseenter(function(i){if(j.disabled){return}b(i.target).addClass(j.toTP(\"jqx-fill-state-hover\"))});h.mouseleave(function(i){if(j.disabled){return}b(i.target).removeClass(j.toTP(\"jqx-fill-state-hover\"))})};if(this.pagerPosition===\"both\"||this.pagerPosition===\"bottom\"){var h=this[\"pagerbuttonsbottom\"].find(\"a\");q(h)}if(this.pagerPosition===\"both\"||this.pagerPosition===\"top\"){var h=this[\"pagerbuttonstop\"].find(\"a\");q(h)}}if(u==0&&u<d){d=0}if(this[\"pagerdetailsbottom\"]){if(!this.rtl){this[\"pagerdetailsbottom\"][0].innerHTML=d+\"-\"+u+this.gridlocalization.pagerrangestring+v;this[\"pagerdetailstop\"][0].innerHTML=d+\"-\"+u+this.gridlocalization.pagerrangestring+v}else{this[\"pagerdetailsbottom\"][0].innerHTML=v+this.gridlocalization.pagerrangestring+u+\"-\"+d;this[\"pagerdetailstop\"][0].innerHTML=v+this.gridlocalization.pagerrangestring+u+\"-\"+d}}if(this.pagerMode==\"default\"){var l=this[\"pagerbuttonsbottom\"].width()+b(this[\"pagerdetailsbottom\"]).width()+160;this.pagerdiv.css(\"min-width\",l);this.toppagerdiv.css(\"min-width\",l)}if(d>u){this.goToPrevPage()}},_preparecolumnGroups:function(){var o=this.columnsHeight;if(this.columnGroups){this.columnshierarchy=new Array();if(this.columnGroups.length){var m=this;for(var g=0;g<this.columnGroups.length;g++){this.columnGroups[g].parent=null;this.columnGroups[g].groups=null}for(var g=0;g<this.columns.records.length;g++){this.columns.records[g].parent=null;this.columns.records[g].groups=null}var n=function(j){for(var t=0;t<m.columnGroups.length;t++){var u=m.columnGroups[t];if(u.name===j){return u}}return null};for(var g=0;g<this.columnGroups.length;g++){var p=this.columnGroups[g];if(!p.groups){p.groups=null}if(p.parentGroup){p.parentgroup=p.parentGroup}if(p.parentgroup){var r=n(p.parentgroup);if(r){p.parent=r;if(!r.groups){r.groups=new Array()}if(r.groups.indexOf(p)===-1){r.groups.push(p)}}}}for(var g=0;g<this.columns.records.length;g++){var p=this.columns.records[g];if(p.columngroup){var r=n(p.columngroup);if(r){if(!r.groups){r.groups=new Array()}p.parent=r;if(r.groups.indexOf(p)===-1){r.groups.push(p)}}}}var q=0;for(var g=0;g<this.columns.records.length;g++){var p=this.columns.records[g];var d=p;p.level=0;while(d.parent){d=d.parent;p.level++}var d=p;var c=p.level;q=Math.max(q,p.level);while(d.parent){d=d.parent;if(d){d.level=--c}}}var l=function(x){var w=new Array();if(x.columngroup){w.push(x)}if(!x.groups){return new Array()}for(var v=0;v<x.groups.length;v++){if(x.groups[v].columngroup){w.push(x.groups[v])}else{if(x.groups[v].groups){var u=l(x.groups[v]);for(var t=0;t<u.length;t++){w.push(u[t])}}}}return w};for(var g=0;g<this.columnGroups.length;g++){var p=this.columnGroups[g];var e=l(p);p.columns=e;var h=new Array();var s=0;for(var f=0;f<e.length;f++){h.push(this.columns.records.indexOf(e[f]));if(e[f].pinned){s++}}if(s!=0){throw new Error(\"jqxDataTable: Column Groups initialization Error. Please, check the initialization of the jqxDataTable's columns array. The columns in a column group cannot be pinned.\")}h.sort(function(j,i){j=parseInt(j);i=parseInt(i);if(j<i){return -1}if(j>i){return 1}return 0});for(var k=1;k<h.length;k++){if(h[k]!=h[k-1]+1){throw new Error(\"jqxDataTable: Column Groups initialization Error. Please, check the initialization of the jqxDataTable's columns array. The columns in a column group are expected to be siblings in the columns array.\");this.host.remove()}}}}this.columnGroupslevel=1+q;o=this.columnGroupslevel*this.columnsHeight}return o},wheel:function(e,d){if(d.autoheight&&d.hScrollBar.css(\"visibility\")==\"hidden\"){e.returnValue=true;return true}var f=0;if(!e){e=window.event}if(e.originalEvent&&e.originalEvent.wheelDelta){e.wheelDelta=e.originalEvent.wheelDelta}if(e.wheelDelta){f=e.wheelDelta/120}else{if(e.detail){f=-e.detail/3}}if(f){var c=d._handleDelta(f);if(c){if(e.preventDefault){e.preventDefault()}if(e.originalEvent!=null){e.originalEvent.mouseHandled=true}if(e.stopPropagation!=undefined){e.stopPropagation()}}if(c){c=false;e.returnValue=c;return c}else{return false}}if(e.preventDefault){e.preventDefault()}e.returnValue=false},_handleDelta:function(e){if(this.vScrollBar.css(\"visibility\")!=\"hidden\"){var d=this.vScrollInstance.value;if(e<0){this.vScrollInstance.setPosition(this.vScrollInstance.value+2*10)}else{this.vScrollInstance.setPosition(this.vScrollInstance.value-2*10)}var c=this.vScrollInstance.value;if(d!=c){return true}}else{if(this.hScrollBar.css(\"visibility\")!=\"hidden\"){var d=this.hScrollInstance.value;if(e>0){if(this.hScrollInstance.value>2*10){this.hScrollInstance.setPosition(this.hScrollInstance.value-2*10)}else{this.hScrollInstance.setPosition(0)}}else{if(this.hScrollInstance.value<this.hScrollInstance.max){this.hScrollInstance.setPosition(this.hScrollInstance.value+2*10)}else{this.hScrollInstance.setPosition(this.hScrollInstance.max)}}var c=this.hScrollInstance.value;if(d!=c){return true}}}return false},_removeHandlers:function(){this.removeHandler(this.host,\"focus\");this.removeHandler(b(window),\"jqxReady.\"+this.element.id);if(this._mousewheelfunc){this.removeHandler(this.host,\"mousewheel\",this._mousewheelfunc)}var c=\"mousedown\";if(this.isTouchDevice()){c=b.jqx.mobile.getTouchEventName(\"touchstart\")}this.removeHandler(this.host,\"dragstart.\"+this.element.id);this.removeHandler(this.host,\"keydown\");if(this.table){this.removeHandler(this.table,\"mouseleave\");this.removeHandler(this.table,\"mousemove\");this.removeHandler(this.table,c);this.removeHandler(this.table,\"selectstart.\"+this.element.id);if(b.jqx.browser.msie&&b.jqx.browser.version<9){this.removeHandler(this.table,\"dblclick\")}}},_addHandlers:function(){var f=this;this._mousewheelfunc=this._mousewheelfunc||function(i){f.wheel(i,f);return false};this.addHandler(this.host,\"dragstart.\"+this.element.id,function(i){return false});this.addHandler(this.table,\"selectstart.\"+this.element.id,function(i){if(f.enableBrowserSelection){return true}if(f.filterable){if(b(i.target).ischildof(f.filterrow)){return true}}if(f.rowDetails){if(b(i.target).parents(\"[data-role=details]\").length>0){return true}}if(undefined==f.editKey){return false}});this.addHandler(b(window),\"jqxReady.\"+this.element.id,function(){f._updatecolumnwidths();f.refresh()});if(this.editable){this.addHandler(b(document),\"mousedown.gridedit\"+this.element.id,function(k){if(f.editable&&f.editSettings.saveOnBlur){if(f.editKey!=null){if(!f.vScrollInstance.isScrolling()&&!f.vScrollInstance.isScrolling()){var s=f.host.coord();var p=f.host.width();var l=f.host.height();var u=false;var j=false;var t=false;if(k.pageY<s.top||k.pageY>s.top+l){u=true;j=true}if(k.pageX<s.left||k.pageX>s.left+p){u=true;t=true}if(u){var m=function(y){var x=b(y.children()[0]).data();if(x&&!x.jqxWidget){x=y.data()}if(!x){x=y.data()}if(x.jqxWidget&&x.jqxWidget.container&&x.jqxWidget.container[0].style.display==\"block\"){var i=x.jqxWidget;var z=i.container.coord().top;var w=i.container.coord().top+i.container.height();if(j&&(k.pageY<z||k.pageY>w)){u=true;i.close();return true}else{return false}}};var r=f._editors;if(r){for(var n=0;n<r.length;n++){var o=r[n].editor;var v=m(o);var q=o.attr(\"aria-owns\");if(q){if(q==document.activeElement.id){return true}if(b(document.activeElement).ischildof(b(\"#\"+q))){return true}}else{q=o.children().attr(\"aria-owns\");if(q){if(q==document.activeElement.id){return true}if(b(document.activeElement).ischildof(b(\"#\"+q))){return true}}}if(v===false){return}}}}if(u){f.endroweditbykey(f.editKey)}}}}})}this.removeHandler(this.host,\"mousewheel\",this._mousewheelfunc);this.addHandler(this.host,\"mousewheel\",this._mousewheelfunc);this.addHandler(this.host,\"focus\",function(i){if(i.preventDefault){}});var d=this.isTouchDevice();this.vScrollInstance.valueChanged=function(i){if(f._timer){clearTimeout(f._timer)}if(d){if(f.table){f.table[0].style.top=0-f.vScrollInstance.value+\"px\"}}else{f._timer=setTimeout(function(){if(f.table){f.table[0].style.top=0-f.vScrollInstance.value+\"px\"}},5)}};this.hScrollInstance.valueChanged=function(i){if(f._timer){clearTimeout(f._timer)}if(d){if(f.table){f._renderhorizontalscroll()}}else{f._timer=setTimeout(function(){if(f.table){f._renderhorizontalscroll()}},5)}};var e=\"mousedown\";if(this.isTouchDevice()){e=b.jqx.mobile.getTouchEventName(\"touchend\");if(b.jqx.browser.msie&&b.jqx.browser.version<10){e=\"mousedown\"}}var h=function(s,r){var m=null;var n=f._table.coord();var u=n.top;var A=n.left;var B=f._table[0].rows;for(var o=0;o<B.length;o++){var z=B[o];var w=z.cells;for(var p=0;p<w.length;p++){var t=w[p];var l=t.offsetLeft+A;var q=t.offsetTop+u;var k=t.offsetWidth;var v=t.offsetHeight;if(k===0||v===0){continue}if(q<=r&&r<q+v){if(l<=s&&s<l+k){m=t;break}}else{break}}}return m};var c=function(){if(f.hoveredRow){var j=f.hoveredRow[0].cells;var i=function(m){for(var n=0;n<m.length;n++){var l=m[n];var o=l.className;o=o.replace(\" \"+f.toTP(\"jqx-fill-state-hover\"),\"\");o=o.replace(\" \"+f.toTP(\"jqx-grid-cell-hover\"),\"\");l.className=o}};i(j);if(f._pinnedTable&&j.length>0){var k=f._pinnedTable[0].rows[f.hoveredRow[0].rowIndex].cells;i(k)}}f.hoveredRow=null};this.addHandler(this.table,\"mouseleave\",function(i){c();if(f.wrapper){f.wrapper.parent().removeAttr(\"tabindex\",0);f.wrapper.removeAttr(\"tabindex\",1);f.content.removeAttr(\"tabindex\",2)}});var g=function(o){if(!f.enableHover){return true}f.hoveredRow=o;if(!o){return true}var l=o[0].cells;var n=f.rowDetails&&!f.treeGrid;var q=n&&!f.treeGrid?1:0;var k=0;if(q>0&&f.rtl){q=0;k=1}for(var m=q;m<l.length-k;m++){var j=l[m];j.className+=\" \"+f.toTP(\"jqx-fill-state-hover\")+\" \"+f.toTP(\"jqx-grid-cell-hover\")}if(f._pinnedTable){if(f._pinnedTable[0].rows.length){var p=f._pinnedTable[0].rows[f.hoveredRow[0].rowIndex].cells;for(var m=q;m<p.length-k;m++){var j=p[m];j.className+=\" \"+f.toTP(\"jqx-fill-state-hover\")+\" \"+f.toTP(\"jqx-grid-cell-hover\")}}}};if(f.isTouchDevice()){f.enableHover=false}this.addHandler(this.table,\"mousemove\",function(j){var i=j.pageX;var m=j.pageY;if(f.disabled){return true}if(!f.enableHover){return true}if(f.hScrollInstance.isScrolling()||f.vScrollInstance.isScrolling()){return true}var l=h(i,m);if(!l){return true}var k=b(l).parent();c();if(f.rowDetails&&f.treeGrid){if(k.attr(\"data-role\")==\"row-details\"){return true}}if(f.renderedRecords&&f.renderedRecords.length===0){return true}if(f.editKey!=null){if(f.editKey===k.attr(\"data-key\")){return true}}g(k);return true});this.addHandler(this.host,\"keydown\",function(i){return f._handleKey(i)});if(b.jqx.browser.msie&&b.jqx.browser.version<9){this.addHandler(this.table,\"dblclick\",function(i){f.table.trigger(\"mousedown\",i)})}this.addHandler(this.table,e,function(B){var D=B.target;var q=null;if(f.disabled){return true}if(f.touchmode&&B.originalEvent&&B.originalEvent._pageX){return}var i=f.table.coord();var s=B.pageX;var r=B.pageY;if(b.jqx.browser.msie&&b.jqx.browser.version<9){if(arguments&&arguments.length==2){s=arguments[1].pageX;r=arguments[1].pageY}}if(f.isTouchDevice()){var E=b.jqx.position(B);s=E.left;r=E.top;if(isNaN(s)||isNaN(r)){var E=b.jqx.position(B.originalEvent);s=E.left;r=E.top}}q=h(s,r);var p=b(q).parent();var F=p.attr(\"data-key\");if(f.rowDetails&&f.treeGrid){if(p.attr(\"data-role\")==\"row-details\"){return true}}var v=function(){if(!f.enableBrowserSelection){if(B.preventDefault){B.preventDefault()}B.stopPropagation()}f.host.focus()};if(F!==undefined){var m=b(q).index();var k=f.columns.records[m];if(F==f.editKey){if(f.editSettings.editSingleCell){if(f.clickedTD==q){return true}else{if(f.editKey!=null&&f.editSettings.saveOnSelectionChange){var u=f.endroweditbykey(f.editKey);if(!u){return true}}}}else{return true}}else{if(f.editKey!=null&&f.editSettings.saveOnSelectionChange){var u=f.endroweditbykey(f.editKey);if(!u){return true}}}f.clickedTD=q;var l=f.rowinfo[F];if(l&&l.group){return true}var A=false;if(l){var C=f.getrowdisplayindex(l.row);var t=f.getrowindex(l.row);f._raiseEvent(\"rowClick\",{index:C,boundIndex:t,key:F,row:l.row,originalEvent:B,dataField:k.datafield});var o=new Date().getTime();var w=300;if(!f.clickTime){f.clickTime=new Date()}if(f._lastSelectedKey==F&&(o-f.clickTime.getTime()<w)){f._raiseEvent(\"rowDoubleClick\",{index:C,boundIndex:t,key:F,row:l.row,originalEvent:B,dataField:k.datafield});A=true;if(B.preventDefault){B.preventDefault()}}}f.clickTime=new Date();if(q.className.indexOf(\"jqx-grid-group\")>=0){if(!l.expanded){f.showdetailsbykey(F)}else{f.hidedetailsbykey(F)}}else{if(B.target&&B.target.className.indexOf&&B.target.className.indexOf(\"jqx-grid-group\")>=0&&f.treeGrid){if(!l.expanded){f.treeGrid.expandRow(F)}else{f.treeGrid.collapseRow(F)}g(f._getuirow(F));if(B.stopPropagation){B.stopPropagation()}if(B.preventDefault){B.preventDefault()}}else{if(B.target&&B.target.className.indexOf&&B.target.className.indexOf(\"checkbox\")>=0&&f.treeGrid){if(!l.checked){f.treeGrid.checkRow(F)}else{f.treeGrid.uncheckRow(F)}g(f._getuirow(F));if(B.stopPropagation){B.stopPropagation()}}else{var m=b(q).index();var k=f.columns.records[m];if(B.stopPropagation){B.stopPropagation()}if(f.editable&&f.editKey==null){if(f._lastSelectedKey==F&&f.editSettings.editOnDoubleClick&&A){var u=f.beginroweditbykey(F,k);return true}}if(f.isTouchDevice()){if(f.scrolled&&new Date()-f.scrolled<500){if(!f.enableBrowserSelection){if(B.preventDefault){B.preventDefault()}}return false}}if(f.selectionMode===\"singlerow\"&&f.selectionMode!==\"custom\"){f.selectrowbykey(F,\"mouse\",false);f._lastSelectedKey=F;f._updateSelection();if(B.preventDefault){B.preventDefault()}v();return true}else{if(f.selectionMode!==\"custom\"){if(!B.ctrlKey&&!B.metaKey){f.clearSelection(false)}if(B.shiftKey){if(f._lastSelectedKey){var l=f.rowinfo[f._lastSelectedKey];f._doSelection(f._lastSelectedKey,true,false);var j=b(f._table.children()[1]).children((\"[data-key=\"+f._lastSelectedKey+\"]\"));var n=j.index();var z=p.index();f._selectRange(z,n);f.selectrowbykey(F,\"mouse\",false);f._updateSelection();if(B.preventDefault){B.preventDefault()}v();return true}}}f._lastSelectedKey=F;f.clickTime=new Date();if(f.selectionMode!==\"custom\"){if(l){if(l.selected){f.unselectrowbykey(F,\"mouse\",false)}else{f.selectrowbykey(F,\"mouse\",false)}v()}}else{return true}f._updateSelection();if(!f.enableBrowserSelection){if(B.preventDefault){B.preventDefault()}}return true}}}}}})},_updateSelection:function(){var l=this;var r=b(l._table.children()[1]).children();var n=l._pinnedTable?b(l._pinnedTable.children()[1]).children():null;var e=l.rowDetails&&!l.treeGrid;var d=e?1:0;var f=0;if(d>0&&l.rtl){d=0;f=1}for(var h=0;h<r.length;h++){var q=r[h].cells;if(n){var c=n[h].cells}var p=null;if(r[h].getAttribute){p=r[h].getAttribute(\"data-key\")}if(l.rowinfo[p]&&l.selectionMode!==\"none\"){if(l.rowinfo[p].selected){for(var g=d;g<q.length-f;g++){var o=q[g];b(o).addClass(l.toTP(\"jqx-grid-cell-selected\")+\" \"+l.toTP(\"jqx-fill-state-pressed\"));if(c){b(c[g]).addClass(l.toTP(\"jqx-grid-cell-selected\")+\" \"+l.toTP(\"jqx-fill-state-pressed\"))}}}else{for(var g=d;g<q.length-f;g++){var o=q[g];if(c){var k=c[g]}var m=o.className;m=m.replace(\" jqx-fill-state-pressed\",\"\");m=m.replace(\" jqx-fill-state-pressed-\"+l.theme,\"\");m=m.replace(\" jqx-grid-cell-selected\",\"\");m=m.replace(\" jqx-grid-cell-selected-\"+l.theme,\"\");o.className=m;if(k){k.className=m}}}}}},_selectRange:function(f,e){var c=b(b(this._table.children()[1]).children()[e]);var j=this;if(f>e){var h=e;var d=c;while(h<f){var d=d.next();var g=d.attr(\"data-key\");j._doSelection(g,true,false);h++}}else{if(f<e){var h=e;var d=c;while(h>f){var d=d.prev();var g=d.attr(\"data-key\");this._doSelection(g,true,false);h--}}}},_getuikey:function(d,g){var f=null;var e=b(this._table.children()[1]).children();f=b(e[d]).attr(\"data-key\");if(b(e[d]).attr(\"data-role\")){var c=b(e[d]);if(g==\"next\"){while(c){c=c.next();if(c){var h=c.attr(\"data-role\");if(!h){f=c.attr(\"data-key\");return f}}}}else{if(g==\"prev\"){while(c){c=c.prev();if(c){var h=c.attr(\"data-role\");if(!h){f=c.attr(\"data-key\");return f}}}}}return null}return f},getRows:function(){return this.source.records},getView:function(){var d=this;var e=this._names();var f=new Array();var c=function(k,h){if(!h){return}for(var j=0;j<h.length;j++){if(!h[j]){continue}if(h[j]._visible!==false){var g=b.extend({},h[j]);k.push(g);if(h[j][e.expanded]){g.records=new Array();c(g.records,h[j].records)}else{if(d.dataview.filters.length>0){g.records=new Array();c(g.records,h[j].records)}}}}};c(f,this.dataViewRecords);return f},getKeys:function(){var d=new Array();var e=this.source.records;for(var c=0;c<e.length;c++){d.push(e[c].uid)}return d},getKey:function(c){var d=this.getRows();if(d){return d[c].uid}else{return -1}},_getkey:function(e){if(this._loading){throw new Error(\"jqxDataTable: \"+this.loadingErrorMessage);return false}var f=null;var d=function(){var l=b(this._table.children()[1]).children();var k=null;var n=0;if(this.pageable){n-=this.dataview.pagenum*this.dataview.pagesize}if(this.groups.length>0){var h=0;for(var j=0;j<l.length;j++){var o=b(l[j]);var m=o.children()[0].getAttribute(\"colspan\");if(m>0){continue}if(h===n+e){k=o.attr(\"data-key\");return k}h++}return k}if(this.rowDetails){var h=0;for(var j=0;j<l.length;j++){if(h===e+n){k=b(l[j]).attr(\"data-key\");return k}if(j%2==1){h++}}}else{k=b(l[n+e]).attr(\"data-key\")}return k};f=d.call(this);if(f==null){if(this.pageable){var c=Math.floor(e/this.dataview.pagesize);if(this.dataview.pagenum!=c){var g=this.getRows()[e];if(g&&g.uid!=null){return g.uid}else{if(isNaN(c)){return null}this.goToPage(c);f=d.call(this)}}}}return f},_getuirow:function(g){try{var c=b(this._table.children()[1]).children((\"[data-key=\"+g+\"]\"));if(c.length>0){return c}}catch(e){var d=b(this._table.children()[1]).children();for(var f=0;f<d.length;f++){var j=d[f];var h=j.getAttribute(\"data-key\");if(g==h){return b(j)}}return null}return null},_getpinneduirow:function(g){if(!this._pinnedTable){return null}try{var c=b(this._pinnedTable.children()[1]).children((\"[data-key=\"+g+\"]\"));if(c.length>0){return c}}catch(e){var d=b(this._pinnedTable.children()[1]).children();for(var f=0;f<d.length;f++){var j=d[f];var h=j.getAttribute(\"data-key\");if(g==h){return b(j)}}return null}return null},_names:function(){var d={leaf:\"leaf\",parent:\"parent\",expanded:\"expanded\",checked:\"checked\",selected:\"selected\",level:\"level\",icon:\"icon\",data:\"data\"};if(!this.source||(this.source&&!this.source._source.hierarchy)){return d}var c=this.source._source.hierarchy.reservedNames;if(!c){return d}return c},_getMatches:function(f,g){if(f==undefined||f.length==0){return -1}var c=this.renderedRecords;if(g!=undefined){c=c.slice(g)}var e=0;if(this.rowDetails&&!this.treeGrid){e++}if(e<this.columns.records.length){var d=this.columns.records[e].datafield}else{new Array()}var h=new Array();b.each(c,function(k){var l=this[d];if(!l){l=\"\"}var j=b.jqx.string.startsWithIgnoreCase(l.toString(),f);if(j){h.push(this.uid)}});return h},_handleKey:function(X){if(this._loading){return true}if(b(X.target).ischildof(this.filter)){return true}if(b(X.target).ischildof(this.toolbar)){return true}if(b(X.target).ischildof(this.statusbar)){return true}var T=this._names();var I=this;var s=X.charCode?X.charCode:X.keyCode?X.keyCode:0;var n=this._lastSelectedKey;var V=this.rowinfo[n];var v=this._getuirow(n);var x=X.shiftKey&&this.selectionMode!=\"singlerow\";var Q=X.ctrlKey||X.metaKey;if(!v){return}if(this.handleKeyboardNavigation){var u=this.handleKeyboardNavigation(s);if(u){return true}}if(this.editable&&this.editKey==undefined&&s===113&&this.editSettings.editOnF2){this.beginroweditbykey(v.attr(\"data-key\"))}if(this.editKey==undefined){if(!Q&&!x&&this.incrementalSearch&&(!(s>=33&&s<=40))){var z=-1;if(!this._searchString){this._searchString=\"\"}if((s==8||s==46)&&this._searchString.length>=1){this._searchString=this._searchString.substr(0,this._searchString.length-1)}var e=String.fromCharCode(s);var H=(!isNaN(parseInt(e)));var J=false;if((s>=65&&s<=97)||H||s==8||s==32||s==46){if(!X.shiftKey){e=e.toLocaleLowerCase()}if(s!=8&&s!=32&&s!=46){if(!(this._searchString.length>0&&this._searchString.substr(0,1)==e)){this._searchString+=e}}if(s==32){this._searchString+=\" \"}this._searchTime=new Date();var n=this.getSelection();if(n.length>=1){var t=n[0].uid;var C=-1;for(var S=0;S<this.renderedRecords.length;S++){if(this.renderedRecords[S].uid==t){C=S;break}}var B=this._getMatches(this._searchString,C);if(B.length==0||(B.length>0&&B[0]==t)){var B=this._getMatches(this._searchString)}}else{var B=this._getMatches(this._searchString)}if(B.length>0){var n=this.getSelection();if(n.length>=1){var c=B.indexOf(n[0].uid);if(c==-1){this.clearSelection(false);this.selectrowbykey(B[0])}else{var h=c+1;if(h>=B.length){h=0}this.clearSelection(false);this.selectrowbykey(B[h])}}else{this.clearSelection(false);this.selectrowbykey(B[0])}this._lastSearchString=this._searchString}}if(this._searchTimer!=undefined){clearTimeout(this._searchTimer)}if(s==27||s==13){this._searchString=\"\";this._lastSearchString=\"\"}this._searchTimer=setTimeout(function(){I._searchString=\"\";I._lastSearchString=\"\"},500);if(z>=0){return}if(J){return false}}}if(this.editKey!=undefined){if(s===27&&this.editSettings.cancelOnEsc){this.endroweditbykey(this.editKey,true)}else{if(s===13&&this.editSettings.saveOnEnter){if(X.target&&X.target.nodeName.toLowerCase()!=\"div\"&&X.target.nodeName.toLowerCase()!=\"input\"){return true}this.endroweditbykey(this.editKey,false)}else{if(this.editSettings.editSingleCell){if(this.editColumn){var P=this.columns.records.indexOf(this.editColumn);if(s==9&&P<this.columns.records.length-1&&!X.shiftKey){var M=this.editKey;var y=null;for(var S=P+1;S<this.columns.records.length;S++){if(this.columns.records[S].editable&&!this.columns.records[S].hidden){y=this.columns.records[S];break}}if(y){this.endroweditbykey(this.editKey,false);this.beginroweditbykey(M,y)}}else{if(s==9&&X.shiftKey&&P>0){var M=this.editKey;var E=null;for(var S=P-1;S>=0;S--){if(this.columns.records[S].editable&&!this.columns.records[S].hidden){E=this.columns.records[S];break}}if(E){this.endroweditbykey(this.editKey,false);this.beginroweditbykey(M,E)}}}if(s==9){var o=this.rowinfo[this.editKey];var C=this.getrowindex(o);var v=this._getuirow(this.editKey);if(!X.shiftKey&&!y){var N=null;for(var S=0;S<this.columns.records.length;S++){if(this.columns.records[S].editable&&!this.columns.records[S].hidden){N=this.columns.records[S];break}}if(N){while(v){v=v.next();if(v){var D=v.attr(\"data-role\");if(!D){var F=v.attr(\"data-key\");break}}}if(F){this.clearSelection(false);this._lastSelectedKey=F;var o=this.rowsByKey[F];var C=this.getrowindex(o);var L=this.getrowdisplayindex(o);this._raiseEvent(\"rowSelect\",{key:F,index:L,boundIndex:C,row:this.rowsByKey[F]});var q=this.endroweditbykey(this.editKey,false);if(q){this._doSelection(F,true,true);this.beginroweditbykey(F,N)}else{this.beginroweditbykey(this.editKey,N)}}}}else{if(!E&&X.shiftKey){var N=null;for(var S=this.columns.records.length-1;S>=0;S--){if(this.columns.records[S].editable&&!this.columns.records[S].hidden){N=this.columns.records[S];break}}if(N){while(v){v=v.prev();if(v){var D=v.attr(\"data-role\");if(!D){var F=v.attr(\"data-key\");break}}}if(F){this.clearSelection(false);this._lastSelectedKey=F;var o=this.rowsByKey[F];var C=this.getrowindex(o);var L=this.getrowdisplayindex(o);this._raiseEvent(\"rowSelect\",{key:F,index:L,boundIndex:C,row:this.rowsByKey[F]});this.endroweditbykey(this.editKey,false);this._doSelection(F,true,true);this.beginroweditbykey(F,N)}}}}return false}}}}}return true}if(X.ctrlKey||X.metaKey){var f=String.fromCharCode(s).toLowerCase();if(f==\"c\"||f==\"x\"){var n=this.getSelection();if(n.length>=1){var w=\"\";for(var K=0;K<this.renderedRecords.length;K++){var Y=this.renderedRecords[K];for(var S=0;S<n.length;S++){var o=n[S];if(o.uid===Y.uid){for(var R=0;R<this.columns.records.length;R++){var A=this.getCellTextByKey(o.uid,this.columns.records[R].displayfield);w+=A;if(R<this.columns.records.length-1){w+=\"\\t\"}}w+=\"\\r\\n\";break}}}if(w!=\"\"){w=w.substring(0,w.length-1)}if(window.clipboardData){window.clipboardData.setData(\"Text\",w)}else{var O=b('<textarea style=\"position: absolute; left: -1000px; top: -1000px;\"/>');O.val(w);b(\"body\").append(O);O.select();setTimeout(function(){document.designMode=\"off\";O.select();O.remove()},100)}}}}if(s===32&&this.treeGrid){if(this.treeGrid.checkboxes){var n=this.getSelection();if(n.length>1){for(var S=0;S<n.length;S++){var G=n[S].uid;if(this.rowinfo[G].checked){this.treeGrid.uncheckRow(G,false)}else{this.treeGrid.checkRow(G,false)}}this._renderrows();return false}else{var t=v.attr(\"data-key\");if(t){if(this.rowinfo[t].checked){this.treeGrid.uncheckRow(t)}else{this.treeGrid.checkRow(t)}return false}}}}var d=v.index();var W=function(Z){var j=null;var p=b(I._table.children()[1]).children().length-1;var i=b(b(I._table.children()[1]).children()[p]);var aa=i.attr(\"data-role\");if(!aa){j=i.attr(\"data-key\")}else{while(i){i=i.prev();if(i){var aa=i.attr(\"data-role\");if(!aa){j=i.attr(\"data-key\");break}}}}if(Z==\"all\"){return{row:i,key:j}}return j};var g=function(p){var j=null;var i=b(b(I._table.children()[1]).children()[0]);var Z=i.attr(\"data-role\");if(!Z){j=i.attr(\"data-key\")}else{while(i){i=i.next();if(i){var Z=i.attr(\"data-role\");if(!Z){j=i.attr(\"data-key\");break}}}}if(p==\"all\"){return{row:i,key:j}}return j};var t=null;var l=function(){if(!Q&&!x){I.clearSelection(false)}if(s==33||s==37){var j=d;t=I._getuikey(j,\"prev\");if(!t){t=g()}}else{if(s==34||s==39){var j=d;t=I._getuikey(j,\"next\");if(!t){t=W()}}else{if(s==38){t=W()}else{if(s==40){t=g()}}}}I._lastSelectedKey=t;var p=I.rowsByKey[t];var j=I.getrowindex(p);var i=I.getrowdisplayindex(p);I._raiseEvent(\"rowSelect\",{key:t,index:i,boundIndex:j,row:I.rowsByKey[t]});I._doSelection(t,true,true);I.host.focus()};var k=function(){I.clearSelection(false);var i=g();if(x||Q){I._selectRange(v.index(),0)}else{I._lastSelectedKey=i}I.selectrowbykey(i,\"keyboard\")};var r=function(){I.clearSelection(false);var i=W(\"all\");var j=i.key;if(x||Q){I._selectRange(v.index(),i.row.index())}else{I._lastSelectedKey=j}I.selectrowbykey(j,\"keyboard\")};if(this.treeGrid&&this.rtl){if(s==37){s=39}else{if(s==39){s=37}}}if(s==36||(Q&&s==38)){k();return false}else{if(s==35||(Q&&s==40)){r();return false}else{if(s==33||s==37){var t=v.attr(\"data-key\");if(this.rowDetails&&s==37&&!this.treeGrid){this.hidedetailsbykey(t);return false}else{if(this.treeGrid&&s==37){if(this.rowinfo[t].row&&!this.rowinfo[t].row[T.parent]&&!this.rowinfo[t][T.leaf]&&!this.rowinfo[t].expanded){return false}if(this.rowinfo[t].expanded&&!this.rowinfo[t][T.leaf]){this.treeGrid.collapseRow(t);return false}else{if(this.rowinfo[t].row&&this.rowinfo[t].row[T.parent]){t=this.rowinfo[t].row[T.parent].uid}}if(this.rowinfo[t][T.leaf]){return false}}}if(this.pageable&&!this.treeGrid){if(!this.rtl){this.goToPrevPage(l)}else{this.goToNextPage(l)}return false}if(this.treeGrid&&this.pageable&&s==33){this.goToPrevPage(l);return false}}else{if(s==34||s==39){var t=v.attr(\"data-key\");if(this.rowDetails&&s==39&&!this.treeGrid){this.showdetailsbykey(t);return false}else{if(this.treeGrid&&s==39){if(this.rowinfo[t][T.leaf]){return false}if(!this.rowinfo[t].expanded){this.treeGrid.expandRow(t);return false}else{if(this.rowinfo[t].row&&this.rowinfo[t].row.records&&this.rowinfo[t].row.records.length>0){if(this.dataview.filters.length>0){var m=this.rowinfo[t].row.records;for(var S=0;S<m.length;S++){if(m[S]._visible){t=m[S].uid;break}}}else{t=this.rowinfo[t].row.records[0].uid}}}}}if(this.pageable&&!this.treeGrid){if(!this.rtl){this.goToNextPage(l)}else{this.goToPrevPage(l)}return false}if(this.treeGrid&&this.pageable&&s==34){this.goToNextPage(l);return false}}else{if(s==38){while(v){v=v.prev();if(v){var D=v.attr(\"data-role\");if(!D){t=v.attr(\"data-key\");break}}}if(this.pageable&&t==null){this.goToPrevPage(l);return false}}else{if(s==40){while(v){v=v.next();if(v){var D=v.attr(\"data-role\");if(!D){t=v.attr(\"data-key\");break}}}if(this.pageable&&t==null){this.goToNextPage(l);return false}}}}}}}if(t!=null){if(!Q&&!x){this.clearSelection(false)}if(this.rowinfo[t]){if(this.rowinfo[t].selected&&(Q||x)){this._doSelection(this._lastSelectedKey,false,false);this._lastSelectedKey=t;var o=this.rowsByKey[t];var C=this.getrowindex(o);I._updateSelection();var L=this.getrowdisplayindex(o);this._raiseEvent(\"rowUnselect\",{key:t,index:L,boundIndex:C,row:o});return false}}this._lastSelectedKey=t;var o=this.rowsByKey[t];var C=this.getrowindex(o);this._doSelection(t,true,false);I._updateSelection();var L=this.getrowdisplayindex(o);this._raiseEvent(\"rowSelect\",{key:t,index:L,boundIndex:C,row:o});if(this.treeGrid){if(s==37){var v=this._getuirow(t);var U=null;if(v){var D=v.attr(\"data-role\");if(!D){U=v.attr(\"data-key\")}}if(this.pageable&&U==null&&this.dataview.pagenum>0){while(this._getuirow(t)==null&&this.dataview.pagenum>0){this.goToPrevPage()}}}else{if(s==39){var v=this._getuirow(t);var U=null;if(v){var D=v.attr(\"data-role\");if(!D){U=v.attr(\"data-key\")}}if(this.pageable&&U==null){this.goToNextPage()}}}}return false}},_selection:function(c){if(\"selectionStart\" in c[0]){var h=c[0];var i=h.selectionEnd-h.selectionStart;return{start:h.selectionStart,end:h.selectionEnd,length:i,text:h.value}}else{var f=document.selection.createRange();if(f==null){return{start:0,end:h.value.length,length:0}}var d=c[0].createTextRange();var g=d.duplicate();d.moveToBookmark(f.getBookmark());g.setEndPoint(\"EndToStart\",d);var i=f.text.length;return{start:g.text.length,end:g.text.length+f.text.length,length:i,text:f.text}}},_doSelection:function(c,e,d){if(c==null){this.clearSelection();return}if(this.selectionMode===\"singlerow\"){this.clearSelection(false)}var f=this.rowinfo[c];if(f){f.selected=e;this.ensurerowvisiblebykey(c)}else{this.ensurerowvisiblebykey(c);var f=this.rowinfo[c];if(f){f.selected=e}else{this.rowinfo[c]={selected:e}}}if(this.selectionMode!=\"none\"){if(d!==false){this._renderrows()}}},clearSelection:function(e){if(this.rowinfo){var f=this.getRows();for(var h in this.rowinfo){var g=this.rowinfo[h];if(g.selected){g.selected=false;var d=f.indexOf(g.row);var c=this.getrowdisplayindex(g.row);this._raiseEvent(\"rowUnselect\",{key:h,index:c,boundIndex:d,row:g.row})}}}if(e!==false){this._renderrows()}},exportData:function(t){if(!b.jqx.dataAdapter.ArrayExporter){if(!this.treeGrid){throw\"jqxDataTable: Missing reference to jqxdata.export.js!\"}throw\"jqxTreeGrid: Missing reference to jqxdata.export.js!\"}var h=this.exportSettings.columnsHeader;if(h==undefined){h=true}var w=this.exportSettings.hiddenColumns;if(w==undefined){w=false}var P=this.exportSettings.serverURL;var I=this.exportSettings.characterSet;var ac=this.exportSettings.collapsedRecords;if(ac==undefined){ac=false}var F=this.exportSettings.fileName;if(F===undefined){F=this.treeGrid?\"jqxTreeGrid_Data\":\"jqxDataTable_Data\"}var s=this;var Y=this.getRows();if(this.exportSettings.recordsInView==true){Y=this.getView()}if(this.treeGrid&&this.treeGrid.virtualModeCreateRecords){var Y=this.treeGrid.getRows()}if(this.groups&&this.groups.length>0){var k=this.source.getGroupedRecords(this.groups,\"records\",\"label\",null,\"data\",null,\"parent\",Y);var m=function(o,ad){for(var af=0;af<o.length;af++){var j=b.extend({},o[af]);ad.push(j);if(j.records&&j.records.length>0){var ag=m(j.records,new Array());for(var ae=0;ae<ag.length;ae++){if(ag[ae].leaf){ad.push(ag[ae])}else{ad.push(ag[ae])}}}}return ad};var S=m.call(this,k,new Array());Y=S}if(Y.length==0){throw\"No data to export.\"}this.exporting=true;if(this.altRows){this._renderrows()}var p=new Array();for(var X=0;X<this.columns.records.length;X++){if(!w&&this.columns.records[X].hidden){continue}p.push(b.extend({},this.columns.records[X]))}if(this.groups&&this.groups.length>0){if(p.length>0){var aa=this._names();for(var X=0;X<Y.length;X++){if(!Y[X][aa.leaf]){if(!s.rtl){Y[X][p[0].displayfield]=Y[X].label}else{Y[X][p[p.length-1].displayfield]=Y[X].label}}}}}var g=0;if(this.treeGrid){var L=this.treeGrid.getRows();if(this.exportSettings.recordsInView==true){L=this.getView()}var aa=this._names();var d=function(ad){for(var ae=0;ae<ad.length;ae++){var j=ad[ae];var o=j[aa.expanded]||(!j[aa.expanded]&&ac);g=Math.max(g,1+j[aa.level]);if(j.records&&j.records.length>0&&o){d(ad[ae].records)}}};d(L);if(t!=\"xml\"&&t!=\"json\"){var u=p.length;for(var X=0;X<g;X++){var Q=new a(this,this);Q.width=this.indentWidth;Q.datafield=\"Level\"+X;Q.displayfield=\"Level\"+X;Q.align=\"center\";Q.cellsalign=\"center\";Q.text=\"\";if(!this.rtl){p.splice(X,0,Q)}else{p.splice(u,0,Q)}}var y=new Array();var x=this.source._source.hierarchy&&this.source._source.hierarchy.groupingDataFields?true:false;var U=function(ae){for(var ag=0;ag<ae.length;ag++){var o=b.extend({},ae[ag]);for(var af=0;af<o[aa.level];af++){o[\"Level\"+af]=\"\"}var ad=o[aa.expanded]||(!o[aa.expanded]&&ac);if(t==\"xls\"||t==\"html\"||t==\"pdf\"){if(o.records&&o.records.length>0){o[\"Level\"+o[aa.level]]=ad?\"-\":\"+\"}else{o[\"Level\"+o[aa.level]]=\"\"}}else{o[\"Level\"+o[aa.level]]=\"\"}if(o[aa.leaf]){o[\"Level\"+o[aa.level]]=\"\"}for(var af=o[aa.level]+1;af<g;af++){o[\"Level\"+af]=\"\"}if(x&&!o[aa.leaf]){if(!s.rtl){o[p[g].displayfield]=o.label}else{o[p[p.length-g-1].displayfield]=o.label}}if(o.aggregate){var ai=t==\"xls\"?\"_AG\":\"\";for(var af=g;af<p.length;af++){var ah=af;if(s.rtl){ah=p.length-af-1}if(o[p[ah].displayfield]!=undefined){o[p[ah].displayfield]=ai+o[p[ah].displayfield]}}}y.push(o);if(ad&&!o[aa.leaf]){U(o.records)}}};U(L);Y=y}else{Y=L}}var f=w!=undefined?w:false;var Z={};var C={};var l=[];var M=this.host.find(\".jqx-grid-cell:first\");var n=this.host.find(\".jqx-grid-cell-alt:first\");var K=this;M.removeClass(K.toThemeProperty(\"jqx-grid-cell-selected\"));M.removeClass(K.toThemeProperty(\"jqx-fill-state-pressed\"));n.removeClass(K.toThemeProperty(\"jqx-grid-cell-selected\"));n.removeClass(K.toThemeProperty(\"jqx-fill-state-pressed\"));M.removeClass(K.toThemeProperty(\"jqx-grid-cell-hover\"));M.removeClass(K.toThemeProperty(\"jqx-fill-state-hover\"));n.removeClass(K.toThemeProperty(\"jqx-grid-cell-hover\"));n.removeClass(K.toThemeProperty(\"jqx-fill-state-hover\"));var E=\"cell\";var B=1;var J=\"column\";var z=1;var A=[];for(var V=0;V<p.length;V++){var Q=p[V];if(Q.cellclassname!=\"\"){Q.customCellStyles=new Array();if(typeof Q.cellclassname==\"string\"){Q.customCellStyles.push(Q.cellclassname)}else{for(var X=0;X<Y.length;X++){var c=X;var W=Q.cellclassname(c,Q.displayfield,Y[X][Q.displayfield],Y[X]);if(W){Q.customCellStyles[X]=W}}}}}b.each(p,function(af){var ai=af;if(s.treeGrid){if(af>=g){ai=p.length-g-1}else{if(g>0&&af<g){ai=0}}}var aj=b(s._table[0].rows[0].cells[ai]);if(s._table[0].rows.length>1){var j=b(s._table[0].rows[1].cells[ai]);if(j.length==0){var j=b(s._table[0].rows[1].cells[0])}}if(aj.length==0){var aj=b(s._table[0].rows[0].cells[0])}var ae=this;var ag=function(am){am.removeClass(K.toThemeProperty(\"jqx-cell\"));am.removeClass(K.toThemeProperty(\"jqx-grid-cell-selected\"));am.removeClass(K.toThemeProperty(\"jqx-fill-state-pressed\"));am.removeClass(K.toThemeProperty(\"jqx-grid-cell-hover\"));am.removeClass(K.toThemeProperty(\"jqx-fill-state-hover\"));if(ae.customCellStyles){for(var an in ae.customCellStyles){am.removeClass(ae.customCellStyles[an])}}};ag(aj);if(j){ag(j)}if(this.displayfield==null){return true}if(s.showAggregates){if(s.getcolumnaggregateddata){if(s.treeGrid){var al=function(am,an){for(var ao=0;ao<am.length;ao++){var o=am[ao];if(o.level===0){an.push(o)}}return an};A.push(s.getcolumnaggregateddata(this.displayfield,this.aggregates,true,al(Y,[])))}else{A.push(s.getcolumnaggregateddata(this.displayfield,this.aggregates,true,Y))}}}var ah=s._getexportcolumntype(this);if(this.exportable&&(!this.hidden||f)){Z[this.displayfield]={};Z[this.displayfield].text=this.text;Z[this.displayfield].width=parseInt(this.width);if(isNaN(Z[this.displayfield].width)){Z[this.displayfield].width=60}if(Z[this.displayfield].width>500){Z[this.displayfield].width=500}Z[this.displayfield].formatString=this.cellsFormat;Z[this.displayfield].localization=s.gridlocalization;Z[this.displayfield].type=ah;Z[this.displayfield].cellsAlign=this.cellsalign;Z[this.displayfield].hidden=!h;Z[this.displayfield].index=ai;Z[this.displayfield].maxIndex=p.length}E=\"cell\"+B;var ak=this.element;if(t!=\"json\"&&t!=\"xml\"){J=\"column\"+z;var i=function(o,au,at,am,ar,ao,an,ap,aq){C[o]={index:1+an,maxIndex:p.length};if(ao.rtl){C[o].index=p.length-an}if(t==\"html\"||t==\"xls\"||t==\"pdf\"){if(au){C[o][\"font-size\"]=au.css(\"font-size\");C[o][\"font-weight\"]=au.css(\"font-weight\");C[o][\"font-style\"]=au.css(\"font-style\");C[o][\"background-color\"]=ao._getexportcolor(au.css(\"background-color\"));C[o][\"color\"]=ao._getexportcolor(au.css(\"color\"));C[o][\"border-color\"]=ao._getexportcolor(au.css(\"border-top-color\"))}if(at){C[o][\"text-align\"]=ar.align}else{C[o][\"text-align\"]=ar.cellsalign;C[o][\"formatString\"]=ar.cellsFormat;C[o][\"dataType\"]=ah}if(t==\"html\"||t==\"pdf\"){C[o][\"border-top-width\"]=\"0px\";if(!ao.rtl){C[o][\"border-left-width\"]=\"0px\";C[o][\"border-right-width\"]=\"1px\"}else{C[o][\"border-left-width\"]=\"1px\";C[o][\"border-right-width\"]=\"0px\";if(an==p.length-g-1&&at){C[o][\"border-right-width\"]=\"1px\"}}C[o][\"border-bottom-width\"]=\"1px\";if(au){C[o][\"border-top-style\"]=au.css(\"border-top-style\");C[o][\"border-left-style\"]=au.css(\"border-left-style\");C[o][\"border-right-style\"]=au.css(\"border-right-style\");C[o][\"border-bottom-style\"]=au.css(\"border-bottom-style\")}if(at){if(an==0&&!ao.rtl){C[o][\"border-left-width\"]=\"1px\"}else{if(an==p.length-1&&ao.rtl){C[o][\"border-right-width\"]=\"1px\"}}if(au){C[o][\"border-top-width\"]=\"1px\";C[o][\"border-bottom-width\"]=au.css(\"border-bottom-width\")}}else{if(an==0&&!ao.rtl){C[o][\"border-left-width\"]=\"1px\"}else{if(an==p.length-1&&ao.rtl){C[o][\"border-right-width\"]=\"1px\"}}}if(au){C[o][\"height\"]=au.css(\"height\")}if(ao.treeGrid&&!at){if(C[o].index-1<g){if(ao.rtl){C[o][\"border-left-width\"]=\"0px\"}else{C[o][\"border-right-width\"]=\"0px\"}}else{if(C[o].index-1==g){if(!ao.rtl){C[o][\"border-left-width\"]=\"0px\"}else{C[o][\"border-right-width\"]=\"0px\"}}}}}}if(ar.exportable&&(!ar.hidden||f)){if(ap==true){if(!Z[ar.displayfield].customCellStyles){Z[ar.displayfield].customCellStyles=new Array()}Z[ar.displayfield].customCellStyles[aq]=o}else{if(at){Z[ar.displayfield].style=o}else{if(!am){Z[ar.displayfield].cellStyle=o}else{Z[ar.displayfield].cellAltStyle=o}}}}};i(J,ak,true,false,this,s,af);z++;i(E,aj,false,false,this,s,af);if(s.altRows){E=\"cellalt\"+B;i(E,j,false,true,this,s,af)}if(this.customCellStyles){for(var ad in ae.customCellStyles){aj.removeClass(ae.customCellStyles[ad])}for(var ad in ae.customCellStyles){aj.addClass(ae.customCellStyles[ad]);i(E+ae.customCellStyles[ad],aj,false,false,this,s,af,true,ad);aj.removeClass(ae.customCellStyles[ad])}}B++}});if(t!=\"json\"&&t!=\"xml\"){if(g>0&&this.treeGrid){var ab=g+1;if(this.rtl){ab=p.length-g}if(C[\"column\"+ab]){var e=C[\"column\"+ab];e.merge=g;e[\"border-left-width\"]=\"1px\";var H=C[\"cell\"+ab];for(var X=0;X<p.length;X++){var ab=X+1;if(this.rtl){ab=p.length-X}C[\"column\"+ab].level=X;C[\"column\"+ab].maxLevel=g;C[\"cell\"+ab].maxLevel=g;var Q=p[X];if(Q.customCellStyles){for(var R in Q.customCellStyles){if(C[\"cell\"+ab+Q.customCellStyles[R]]){C[\"cell\"+ab+Q.customCellStyles[R]].maxLevel=g}}}if(C[\"cellalt\"+ab]){C[\"cellalt\"+ab].maxLevel=g}}for(var X=0;X<g;X++){var ab=X+1;var D=X;if(this.rtl){ab=p.length-X}var r=C[\"column\"+ab];r.disabled=true;C[\"cell\"+ab].level=D;C[\"cell\"+ab].maxLevel=g;C[\"column\"+ab].level=D;if(C[\"cellalt\"+ab]){C[\"cellalt\"+ab].level=D;C[\"cellalt\"+ab].maxLevel=g}var Q=p[X];if(Q.customCellStyles){for(var R in Q.customCellStyles){if(C[\"cell\"+ab+Q.customCellStyles[R]]){C[\"cell\"+ab+Q.customCellStyles[R]].maxLevel=g;C[\"cell\"+ab+Q.customCellStyles[R]].level=D}}}if(t==\"html\"||t==\"pdf\"||t==\"xls\"){r[\"font-size\"]=e[\"font-size\"];r[\"font-weight\"]=e[\"font-weight\"];r[\"font-style\"]=e[\"font-style\"];r[\"background-color\"]=e[\"background-color\"];r.color=e.color;r[\"border-color\"]=e[\"border-color\"];if(t==\"html\"||t==\"pdf\"){r[\"border-top-width\"]=e[\"border-top-width\"];r[\"border-left-width\"]=e[\"border-left-width\"];if(this.rtl){r[\"border-right-width\"]=e[\"border-right-width\"];if(X==0){r[\"border-right-width\"]=\"1px\"}}if(X==0&&!this.rtl){r[\"border-left-width\"]=\"0px\"}else{if(X==0&&this.rtl){r[\"border-left-width\"]=\"0px\"}}if(!this.rtl){r[\"border-right-width\"]=\"0px\"}else{if(this.rtl){r[\"border-left-width\"]=\"0px\"}}r[\"border-bottom-width\"]=\"0px\";var r=C[\"cell\"+ab];if(!this.rtl){r[\"border-right-width\"]=\"0px\"}else{if(this.rtl){r[\"border-left-width\"]=\"0px\"}}}}}}}}if(this.showAggregates){var G=[];var N=t==\"xls\"?\"_AG\":\"\";var O=0;if(this.rowDetails&&!this.treeGrid){O++}if(A.length>0){b.each(p,function(j){if(this.aggregates){for(var ad=0;ad<this.aggregates.length;ad++){if(!G[ad]){G[ad]={}}if(G[ad]){var ae=s._getaggregatename(this.aggregates[ad]);var af=s._getaggregatetype(this.aggregates[ad]);var o=A[j-O];if(o){G[ad][this.displayfield]=N+ae+\": \"+o[af]}}}}});b.each(p,function(j){for(var o=0;o<G.length;o++){if(G[o][this.displayfield]==undefined){G[o][this.displayfield]=N}}})}b.each(G,function(){Y.push(this)})}var K=this;var T=b.jqx.dataAdapter.ArrayExporter(Y,Z,C,P,this.treeGrid&&(t==\"xml\"||t==\"json\"));if(F==undefined){this._renderrows();var q=this.treeGrid&&(t==\"xml\"||t==\"json\");var v=T.exportTo(t,this.treeGrid&&(t==\"xml\"||t==\"json\"));if(this.showAggregates){b.each(G,function(){Y.pop(this)})}setTimeout(function(){K.exporting=false},50);return v}else{var q=this.treeGrid&&(t==\"xml\"||t==\"json\");T.exportToFile(t,F,P,I,q)}if(this.showAggregates){b.each(G,function(){Y.pop(this)})}this._renderrows();setTimeout(function(){K.exporting=false},50)},_getexportcolor:function(l){var f=l;if(l==\"transparent\"){f=\"#FFFFFF\"}if(!f||!f.toString()){f=\"#FFFFFF\"}if(f.toString().indexOf(\"rgb\")!=-1){var i=f.split(\",\");if(f.toString().indexOf(\"rgba\")!=-1){var d=parseInt(i[0].substring(5));var h=parseInt(i[1]);var j=parseInt(i[2]);var k=parseFloat(i[3].substring(1,4));var m={r:d,g:h,b:j};var e=this._rgbToHex(m);if(d==0&&h==0&&j==0&&k==0){return\"#ffffff\"}return\"#\"+e}var d=parseInt(i[0].substring(4));var h=parseInt(i[1]);var j=parseInt(i[2].substring(1,4));var m={r:d,g:h,b:j};var e=this._rgbToHex(m);return\"#\"+e}else{if(f.toString().indexOf(\"#\")!=-1){if(f.toString().length==4){var c=f.toString().substring(1,4);f+=c}}}return f},_rgbToHex:function(c){return this._intToHex(c.r)+this._intToHex(c.g)+this._intToHex(c.b)},_intToHex:function(d){var c=(parseInt(d).toString(16));if(c.length==1){c=(\"0\"+c)}return c.toUpperCase()},_getexportcolumntype:function(g){var h=this;var f=\"string\";var e=h.source.datafields||((h.source._source)?h.source._source.datafields:null);if(e){var j=\"\";b.each(e,function(){if(this.name==g.displayfield){if(this.type){j=this.type}return false}});if(j){return j}}if(g!=null){if(this.dataview.cachedrecords==undefined){return f}var c=null;if(!this.virtualmode){if(this.dataview.cachedrecords.length==0){return f}c=this.dataview.cachedrecords[0][g.displayfield];if(c!=null&&c.toString()==\"\"){return\"string\"}}else{b.each(this.dataview.cachedrecords,function(){c=this[g.displayfield];return false})}if(c!=null){if(g.cellsFormat.indexOf(\"c\")!=-1){return\"number\"}if(g.cellsFormat.indexOf(\"n\")!=-1){return\"number\"}if(g.cellsFormat.indexOf(\"p\")!=-1){return\"number\"}if(g.cellsFormat.indexOf(\"d\")!=-1){return\"date\"}if(g.cellsFormat.indexOf(\"y\")!=-1){return\"date\"}if(g.cellsFormat.indexOf(\"M\")!=-1){return\"date\"}if(g.cellsFormat.indexOf(\"m\")!=-1){return\"date\"}if(g.cellsFormat.indexOf(\"t\")!=-1){return\"date\"}if(typeof c==\"boolean\"){f=\"boolean\"}else{if(b.jqx.dataFormat.isNumber(c)){f=\"number\"}else{var i=new Date(c);if(i.toString()==\"NaN\"||i.toString()==\"Invalid Date\"){if(b.jqx.dataFormat){i=b.jqx.dataFormat.tryparsedate(c);if(i!=null){if(i&&i.getFullYear()){if(i.getFullYear()==1970&&i.getMonth()==0&&i.getDate()==1){var d=new Number(c);if(!isNaN(d)){return\"number\"}return\"string\"}}return\"date\"}else{f=\"string\"}}else{f=\"string\"}}else{f=\"date\"}}}}}return f},showDetails:function(c){var d=this._getkey(c);this.showdetailsbykey(d)},hideDetails:function(c){var d=this._getkey(c);this.hidedetailsbykey(d)},setCellValueByKey:function(E,t,x){var o=this;var j=this.rowsByKey[E];var k=this.getrowindex(j);var h=j;if(h!=null&&h[t]==x){return false}if(h!=null&&h[t]===null&&x===\"\"){return}var n=\"\";if(h!=null&&h[t]!==x){var e=this.getColumn(t);var f=\"string\";var B=this.source.datafields||((this.source._source)?this.source._source.datafields:null);if(B){var u=\"\";b.each(B,function(){if(this.name==e.displayfield){if(this.type){u=this.type}return false}});if(u){f=u}}n=h[t];if(!e.nullable||(x!=null&&x!==\"\"&&e.nullable&&x.label===undefined)){if(b.jqx.dataFormat.isNumber(n)||f==\"number\"||f==\"float\"||f==\"int\"||f==\"decimal\"&&f!=\"date\"){x=new Number(x);x=parseFloat(x);if(isNaN(x)){x=0}}else{if(b.jqx.dataFormat.isDate(n)||f==\"date\"){if(x!=\"\"){var A=x;A=new Date(A);if(A!=\"Invalid Date\"&&A!=null){x=A}else{if(A==\"Invalid Date\"){A=new Date();x=A}}}}}if(h[t]===x){return}}o.dataview._filteredData=null;o.dataview._sortData=null;o.dataview._sortHierarchyData=null;h[t]=x;if(this.treeGrid){var s=this.treeGrid.getRow(E);if(s){s[t]=x}}if(x!=null&&x.label!=null){var e=this.getColumn(t);h[e.displayfield]=x.label;h[t]=x.value;if(this.treeGrid){var s=this.treeGrid.getRow(E);if(s){s[e.displayfield]=x.label;s[t]=x.value}}}}if(this.source&&this.source._knockoutdatasource&&!this._updateFromAdapter&&this.autokoupdates){if(this.source._source._localdata){var z=k;var w=this.source._source._localdata()[z];this.source.suspendKO=true;var l=w;if(l[t]&&l[t].subscribe){if(x!=null&&x.label!=null){l[e.displayfield](x.label);l[t](x.value)}else{l[t](x)}}else{var B=this.source._source.datafields;var d=null;var C=null;if(B){b.each(B,function(){if(this.name==t){C=this.map;return false}})}if(C==null){if(x!=null&&x.label!=null){l[t]=x.value;l[e.displayfield]=x.label}else{l[t]=x}}else{var g=C.split(this.source.mapChar);if(g.length>0){var c=l;for(var v=0;v<g.length-1;v++){c=c[g[v]]}c[g[g.length-1]]=x}}this.source._source._localdata.replace(w,b.extend({},l))}this.source.suspendKO=false}}var q;if(this.source.updaterow&&(q==undefined||q==true)){var m=false;var r=function(p){if(false==p){this.setCellValue(j,t,n,true,false)}};try{var i=E;m=this.source.updaterow(i,h,r);if(m==undefined){m=true}}catch(y){m=false;this.setCellValue(j,t,n);return}}var D=this.getrowdisplayindex(j);var e=this.getColumn(t);this._raiseEvent(\"cellValueChanged\",{value:x,oldValue:n,dataField:t,displayField:e.displayfield,key:E,boundIndex:k,index:D,row:this.rowsByKey[E]});if(this.editable){if(this.editKey!=null){return}}this._renderrows()},setCellValue:function(g,d,f){if(g==null||d==null){return false}var c=parseInt(g);var e=this._getkey(c);this.setCellValueByKey(e,d,f)},getCellText:function(f,d){if(f==null||d==null){return false}var c=parseInt(f);var e=this._getkey(c);return this.getCellTextByKey(e,d)},getCellTextByKey:function(e,d){if(e==null||d==null){return null}var c=this.getCellValueByKey(e,d);var f=this.getColumn(d);if(f&&f.cellsFormat!=\"\"){if(b.jqx.dataFormat){if(b.jqx.dataFormat.isDate(c)){c=b.jqx.dataFormat.formatdate(c,f.cellsFormat,this.gridlocalization)}else{if(b.jqx.dataFormat.isNumber(c)||(!isNaN(parseFloat(c))&&isFinite(c))){c=b.jqx.dataFormat.formatnumber(c,f.cellsFormat,this.gridlocalization)}}}}return c},getCellValue:function(f,d){if(f==null||d==null){return false}var c=parseInt(f);var e=this._getkey(c);return this.getCellValueByKey(e,d)},getCellValueByKey:function(e,d){var h=this.rowsByKey[e];if(!h&&this.treeGrid){h=this.treeGrid.getRow(e)}var c=this.getrowindex(h);var f=h;var g=\"\";if(f!=null){return f[d]}return null},beginRowEdit:function(c){var d=this._getkey(c);this.beginroweditbykey(d)},beginCellEdit:function(d,c){var e=this._getkey(d);var f=this.getColumn(c);this.beginroweditbykey(e,f)},endCellEdit:function(d,c,e){this.endRowEdit(d,e)},endRowEdit:function(c,e){var d=this._getkey(c);this.endroweditbykey(d,e)},getrowindex:function(f){var d=this.getRows().indexOf(f);if(d!=-1){return d}if(this.groups&&this.groups.length>0){var c=this.getRows();for(var e=0;e<c.length;e++){if(f.originalRecord){if(c[e].uid==f.originalRecord.uid){d=e;break}}else{if(c[e].uid==f.uid){d=e;break}}}}return d},getrowdisplayindex:function(g){if(this.treeGrid){return -1}var c=this.getView();var e=c.indexOf(g);if(e!=-1){return e}if(g==undefined){return e}var d=c;for(var f=0;f<d.length;f++){if(d[f].uid==g.uid||(g.originalRecord&&d[f].uid==g.originalRecord.uid)){e=f;break}}return e},beginroweditbykey:function(H,r){if(this.beginEdit){var B=this.beginEdit(H,r);if(B===false){return false}}var E=!this.treeGrid?this.groups.length:this.source._source.hierarchy&&this.source._source.hierarchy.groupingDataFields?this.source._source.hierarchy.groupingDataFields.length:0;if(E>0){var n=this.rowsByKey[H];if(this.treeGrid){var n=this.treeGrid.getRow(H)}if(n.level<E){return false}}if(this._lastSelectedKey==null){this.selectrowbykey(H)}if(this.editKey===H&&this.editKey!=undefined){return false}if(this.rowinfo[H]&&this.rowinfo[H].locked){return false}if(this.editKey!=null){this.endroweditbykey(H,true);return false}var F=this.editSettings.editSingleCell;if(!r&&F&&this.columns.records&&this.columns.records.length>0){for(var z=0;z<this.columns.records.length;z++){r=this.columns.records[z];if(r.editable&&!r.hidden){break}}if(!r){return false}}if(F&&r&&!r.editable){this.editKey=null;return false}if(F){this.editColumn=r}var p=this;var n=this.rowsByKey[H];if(this.treeGrid){var n=this.treeGrid.getRow(H)}var o=this.getrowindex(n);var D=this._getuirow(H);var t=this._getpinneduirow(H);this._editors=new Array();var q=false;if(D){var j=D[0].cells;var u=0;for(var z=0;z<j.length;z++){var h=this.columns.records[z];var d=j[z];if(h.rowDetailscolumn){continue}if(h.checkboxcolumn){continue}if(h.pinned){d=t[0].cells[z]}if(F&&r&&h.datafield!=r.datafield){continue}b(d).removeClass(this.toTP(\"jqx-grid-cell-selected\"));b(d).removeClass(this.toTP(\"jqx-fill-state-pressed\"));b(d).removeClass(this.toTP(\"jqx-grid-cell-hover\"));b(d).removeClass(this.toTP(\"jqx-fill-state-hover\"));if(h.columntype==\"none\"){continue}var v=b(d).outerWidth();var x=b(d).width();if(u===0){u=b(d).outerHeight()-1}b(d).css(\"padding\",\"0px\");var e=\"<div style='height:\"+u+\"px; width: 100%; overflow: hidden; border-radius: 0px; -moz-border-radius: 0px; -webkit-border-radius: 0px; z-index: 9999;'></div>\";var s=this.getCellTextByKey(H,h.displayfield);d.innerHTML=e;var f=b(d.firstChild);switch(h.columntype){case\"textbox\":case\"default\":var k=b(\"<input style='border: none;' autocomplete='off' autocorrect='off' autocapitalize='off' spellcheck='false' type='textbox'/>\").appendTo(f);if(this.rtl){k.css(\"direction\",\"rtl\")}k.addClass(this.toThemeProperty(\"jqx-input\"));k.addClass(this.toThemeProperty(\"jqx-widget-content\"));k.addClass(this.toThemeProperty(\"jqx-cell-editor\"));k[0].onfocus=function(i){setTimeout(function(){if(i){var I=b(i.target).parent().parent().index();if(I>=0){p.ensureColumnVisible(p.columns.records[I].datafield)}}else{var I=b(document.activeElement).parent().parent().index();if(I>=0){p.ensureColumnVisible(p.columns.records[I].datafield)}}if(p.content){p.content[0].scrollTop=0;p.content[0].scrollLeft=0}if(p.gridcontent){p.gridcontent[0].scrollLeft=0;p.gridcontent[0].scrollTop=0}},10)};if(!h.editable){k.attr(\"disabled\",true);k.attr(\"readOnly\",true);k.addClass(this.toThemeProperty(\"jqx-fill-state-disabled\"))}else{if(!q){q=true;var g=b.jqx.browser.msie&&b.jqx.browser.version>10;if(!g){k.focus()}var c=k;setTimeout(function(){var J=c.val().length;if(!g){c.focus()}try{if(\"selectionStart\" in c[0]){c[0].setSelectionRange(0,J)}else{var i=c[0].createTextRange();i.collapse(true);i.moveEnd(\"character\",J);i.moveStart(\"character\",0);i.select()}}catch(I){var K=I}},10)}}k.width(x);k.height(u);if(b.jqx.browser.msie&&b.jqx.browser.version<9){k.css(\"line-height\",parseInt(u)+\"px\")}k.css(\"text-align\",h.cellsalign);if(s===null){s=\"\"}if(s==undefined){s=\"\"}k.val(s);if(h.createeditor){var C=s;var s=this.getCellValueByKey(H,h.displayfield);h.createeditor(!this.treeGrid?o:H,s,k,C,x,u)}this._editors.push({column:h,editor:k});if(h.cellsFormat!=\"\"){if(h.cellsFormat.indexOf(\"p\")!=-1||h.cellsFormat.indexOf(\"c\")!=-1||h.cellsFormat.indexOf(\"n\")!=-1||h.cellsFormat.indexOf(\"f\")!=-1){k.keydown(function(I){var O=I.charCode?I.charCode:I.keyCode?I.keyCode:0;var L=String.fromCharCode(O);var M=parseInt(L);if(isNaN(M)){return true}if(p._selection(k).length>0){return true}var K=\"\";var J=k.val();if(h.cellsFormat.length>1){var N=parseInt(h.cellsFormat.substring(1));if(isNaN(N)){N=0}}else{var N=0}if(N>0){if(J.indexOf(p.gridlocalization.decimalseparator)!=-1){if(p._selection(k).start>J.indexOf(p.gridlocalization.decimalseparator)){return true}}}for(var P=0;P<J.length-N;P++){var i=J.substring(P,P+1);if(i.match(/^[0-9]+$/)!=null){K+=i}}if(K.length>=11){return false}})}}if(h.initeditor){var C=s;var s=this.getCellValueByKey(H,h.displayfield);h.initeditor(!this.treeGrid?o:H,s,k,C,x,u)}break;case\"custom\":case\"template\":if(!this.editorsCache){this.editorsCache=new Array()}var l=b(\"<div style='width: 100%; height: 100%; border: none;'></div>\").appendTo(f);var y=b.trim(h.datafield).split(\" \").join(\"\");if(y.indexOf(\".\")!=-1){y=y.replace(\".\",\"\")}var A=this.editorsCache[\"templateeditor_\"+y];if(h.columntype==\"custom\"){var A=this.editorsCache[\"customeditor_\"+y+\"_\"+H]}var C=s;var s=this.getCellValueByKey(H,h.displayfield);if(!A){var k=b(\"<div style='border: none;'></div>\");k.width(v);k.height(u);A=k;if(s===null){s=\"\"}if(h.columntype!=\"custom\"){this.editorsCache[\"templateeditor_\"+y]=k}else{this.editorsCache[\"customeditor_\"+y+\"_\"+H]=k}k.appendTo(l);if(h.createeditor){h.createeditor(!this.treeGrid?o:H,s,k,C,v,u)}}else{var k=A;k.width(v);k.height(u);k.appendTo(l)}if(h.initeditor){h.initeditor(!this.treeGrid?o:H,s,k,C,v,u)}this._editors.push({column:h,editor:k});break}}}this.editKey=H;this.beginUpdate();var G=this.getrowdisplayindex(n);this._raiseEvent(\"rowBeginEdit\",{key:H,index:G,boundIndex:o,row:this.rowsByKey[H]});if(F){var n=this.rowsByKey[H];var w=null;var m=null;if(n){w=n[r.datafield];m=n[r.displayfield]}this._raiseEvent(\"cellBeginEdit\",{value:w,displayValue:m,key:H,index:G,dataField:r.datafield,displayField:r.displayfield,boundIndex:o,row:this.rowsByKey[H]})}this.endUpdate(false)},_toNumber:function(f){if(!f.indexOf&&f!=undefined){f=f.toString()}if(f.indexOf(this.gridlocalization.currencysymbol)>-1){f=f.replace(this.gridlocalization.currencysymbol,\"\")}var c=function(l,j,k){var h=l;if(j==k){return l}var i=h.indexOf(j);while(i!=-1){h=h.replace(j,k);i=h.indexOf(j)}return h};f=c(f,this.gridlocalization.thousandsseparator,\"\");f=f.replace(this.gridlocalization.decimalseparator,\".\");if(f.indexOf(this.gridlocalization.percentsymbol)>-1){f=f.replace(this.gridlocalization.percentsymbol,\"\")}var g=\"\";for(var d=0;d<f.length;d++){var e=f.substring(d,d+1);if(e===\"-\"){g+=\"-\"}if(e===\".\"){g+=\".\"}if(e.match(/^[0-9]+$/)!=null){g+=e}}f=g;f=f.replace(/ /g,\"\");return f},_geteditorvalue:function(h,j,k,d){var m=new String();if(j){if(!h.geteditorvalue){switch(h.columntype){case\"textbox\":default:m=j.val();if(h.cellsFormat!=\"\"){var l=\"string\";var g=this.source.datafields||((this.source._source)?this.source._source.datafields:null);if(g){var n=\"\";b.each(g,function(){if(this.name==h.displayfield){if(this.type){n=this.type}return false}});if(n){l=n}}var i=l===\"number\"||l===\"float\"||l===\"int\"||l===\"integer\";var f=l===\"date\"||l===\"time\";if(i||(l===\"string\"&&(h.cellsFormat.indexOf(\"p\")!=-1||h.cellsFormat.indexOf(\"c\")!=-1||h.cellsFormat.indexOf(\"n\")!=-1||h.cellsFormat.indexOf(\"f\")!=-1))){if(m===\"\"&&h.nullable){return\"\"}m=this._toNumber(m);m=new Number(m);if(isNaN(m)){m=\"\"}}if(f||(l===\"string\"&&(h.cellsFormat.indexOf(\"H\")!=-1||h.cellsFormat.indexOf(\"m\")!=-1||h.cellsFormat.indexOf(\"M\")!=-1||h.cellsFormat.indexOf(\"y\")!=-1||h.cellsFormat.indexOf(\"h\")!=-1||h.cellsFormat.indexOf(\"d\")!=-1))){if(m===\"\"&&h.nullable){return\"\"}var e=m;m=new Date(m);if(m==\"Invalid Date\"||m==null||h.cellsFormat.length>1){if(b.jqx.dataFormat){m=b.jqx.dataFormat.parsedate(e,h.cellsFormat,this.gridlocalization)}if(m==\"Invalid Date\"||m==null){m=\"\"}}}}if(h.displayfield!=h.datafield){m={label:m,value:m}}break}}if(h.geteditorvalue){var c=this.getCellValueByKey(d,h.displayfield);m=h.geteditorvalue(!this.treeGrid?k:d,c,j)}}return m},_validateEditors:function(c){var k=this;var d=true;var s=k.rowsByKey[c];var l=k.getrowindex(s);var m=k._editors;var c=k.editKey;var p=k._getuirow(c);for(var h=0;h<m.length;h++){var j=m[h].editor;var f=m[h].column;var o=k._geteditorvalue(f,j,l,c);if(f.validation){j.removeClass(k.toThemeProperty(\"jqx-grid-validation-label\"));var e=f.datafield;try{var r=f.validation({value:o,row:c,datafield:f.datafield,displayfield:f.displayfield,column:f},o);var g=k.gridlocalization.validationstring;if(r.message!=undefined){g=r.message}var q=typeof r==\"boolean\"?r:r.result;if(!q){if(r.showmessage==undefined||r.showmessage==true){k._showvalidationpopup(p,e,g,j)}d=false}}catch(n){k._showvalidationpopup(p,e,k.gridlocalization.validationstring,j);d=false}}}return d},endroweditbykey:function(p,r){var k=this;if(k.editKey===null){return}if(this.endEdit){var n=this.endEdit(p);if(n===false){return}}var t=k.rowsByKey[p];var l=k.getrowindex(t);var m=k._editors;var e=k.editKey;var q=k._getuirow(e);if(r!==true){var d=true;if(m){d=k._validateEditors(e);if(d){var h=b.extend({},t);var c=b.extend({},t);for(var g=0;g<m.length;g++){var j=m[g].editor;var f=m[g].column;var o=k._geteditorvalue(f,j,l,e);if(o&&o.label!=undefined){h[f.displayfield]=o.label;h[f.datafield]=o.value}else{h[f.displayfield]=o}}var s=function(){k.dataview._sortHierarchyData=null;k.dataview._sortData=null;for(var x=0;x<m.length;x++){var B=m[x].editor;var v=m[x].column;var C=k._geteditorvalue(v,B,l,e);var u=c[v.displayfield];if(C&&C.label!=undefined){t[v.displayfield]=C.label;t[v.datafield]=C.value}else{t[v.displayfield]=C}if(k.treeGrid){var D=k.treeGrid.getRow(e);if(D){D[v.displayfield]=C}}if(k.editorsCache){var E=function(i){if(i&&i.jqxWidget){var G=i.jqxWidget.element.className;if(G.indexOf(\"dropdownlist\")>=0||G.indexOf(\"datetimeinput\")>=0||G.indexOf(\"combobox\")>=0||G.indexOf(\"menu\")>=0){if(i.jqxWidget.isOpened){var F=i.jqxWidget.isOpened();if(F){i.jqxWidget.close()}}}}};var z=\"customeditor_\"+v.displayfield+\"_\"+p;var y=\"templateeditor_\"+v.displayfield;if(k.editorsCache[z]){var w=b(k.editorsCache[z]).data();var A=k.editorsCache[z];if(!w.jqxWidget&&b(A).children()[0]&&b(b(A).children()[0]).data().jqxWidget){w=b(b(A).children()[0]).data()}E(w);k.editorsCache[z].detach()}if(k.editorsCache[y]){k.editorsCache[y].detach();var w=b(k.editorsCache[y]).data();var A=k.editorsCache[y];if(!w.jqxWidget&&b(A).children()[0]&&b(b(A).children()[0]).data().jqxWidget){w=b(b(A).children()[0]).data()}E(w)}}if(C!=u){k.beginUpdate();k._raiseEvent(\"cellValueChanged\",{value:C,oldValue:u,dataField:v.datafield,displayField:v.displayfield,key:p,index:l,row:t});k.endUpdate(false)}}};k.updaterowbykey(k.editKey,h,false,s)}}if(!d){return false}}k._detachEditors(e);return true},_detachEditors:function(l){var g=this;var m=g.rowsByKey[l];var i=g.getrowindex(m);if(g.editorsCache){for(var h in g.editorsCache){var f=b(g.editorsCache[h]).data();if(f&&f.jqxWidget){var c=f.jqxWidget.element.className;if(c.indexOf(\"dropdownlist\")>=0||c.indexOf(\"datetimeinput\")>=0||c.indexOf(\"combobox\")>=0||c.indexOf(\"menu\")>=0){if(f.jqxWidget.isOpened){var e=f.jqxWidget.isOpened();if(e){f.jqxWidget.close()}}}}b(g.editorsCache[h]).detach()}}g.beginUpdate();var d=g.getrowdisplayindex(m);if(g.editSettings.editSingleCell){var m=g.rowsByKey[l];var k=null;var j=null;if(m){k=m[g.editColumn.datafield];j=m[g.editColumn.displayfield]}g._raiseEvent(\"cellEndEdit\",{value:k,displayValue:j,key:l,index:d,dataField:g.editColumn.datafield,displayField:g.editColumn.displayfield,boundIndex:i,row:g.rowsByKey[l]})}g._raiseEvent(\"rowEndEdit\",{key:l,index:d,boundIndex:i,row:g.rowsByKey[l]});g.endUpdate(false);g.editColumn=null;g.editKey=null;g._renderrows();g._renderhorizontalscroll();g.host.focus();setTimeout(function(){g.host.focus()},10)},_showvalidationpopup:function(r,e,s,m){if(s==undefined){var s=this.gridlocalization.validationstring}m.addClass(this.toThemeProperty(\"jqx-grid-validation-label\"));var p=b(\"<div style='z-index: 99999; top: 0px; left: 0px; position: absolute;'></div>\");var o=b(\"<div style='width: 20px; height: 20px; z-index: 999999; top: 0px; left: 0px; position: absolute;'></div>\");p.html(s);o.addClass(this.toThemeProperty(\"jqx-grid-validation-arrow-up\"));p.addClass(this.toThemeProperty(\"jqx-grid-validation\"));p.addClass(this.toThemeProperty(\"jqx-rc-all\"));p.hide();o.hide();p.prependTo(this.table);o.prependTo(this.table);var h=this.hScrollInstance;var j=h.value;var g=parseInt(j);var l=this.getColumn(e).uielement;if(!r){return}var k=r;p.css(\"top\",parseInt(k.position().top)+30+\"px\");var c=parseInt(p.css(\"top\"));o.css(\"top\",c-11);o.removeClass();o.addClass(this.toThemeProperty(\"jqx-grid-validation-arrow-up\"));var f=false;if(c>=this._table.height()){o.removeClass(this.toThemeProperty(\"jqx-grid-validation-arrow-up\"));o.addClass(this.toThemeProperty(\"jqx-grid-validation-arrow-down\"));c=parseInt(k.position().top)-k.outerHeight()-5;if(c<0){c=0;o.removeClass(this.toThemeProperty(\"jqx-grid-validation-arrow-down\"));f=true}p.css(\"top\",c+\"px\");o.css(\"top\",c+p.outerHeight()-9)}var n=-g+parseInt(b(l).position().left);var q=parseInt(this._table.css(\"left\"));if(isNaN(q)){q=0}if(q!=0){g=0}o.css(\"left\",g+n+30);var d=p.width();if(d+n>this.host.width()-20){var i=d+n-this.host.width()+40;n-=i}if(!f){p.css(\"left\",g+n)}else{p.css(\"left\",g+parseInt(b(l).position().left)-p.outerWidth())}m.mouseenter(function(){if(m.hasClass(\"jqx-grid-validation-label\")){p.show();o.show()}});m.mouseleave(function(){p.hide();o.hide()});if(!this.popups){this.popups=new Array()}this.popups[this.popups.length]={validation:p,validationrow:o}},addRow:function(d,p,j,n){if(p!=undefined){this._datachanged=true;if(j==undefined){j=\"last\"}var o=false;var k=this.that;if(d==null){var f=this.dataview.filters&&this.dataview.filters.length>0;var m=!f?this.dataview.totalrecords:this.source.records.length;if(!this.pageable){if(this.source._source.totalrecords){this.dataview.totalrecords=this.source._source.totalrecords}else{if(this.source._source.totalRecords){this.dataview.totalrecords=this.source._source.totalRecords}else{if(this.source.hierarchy.length!==0){this.dataview.totalrecords=this.source.hierarchy.length}else{this.dataview.totalrecords=this.source.records.length}}}var m=!f?this.dataview.totalrecords:this.source.records.length}if(!b.isArray(p)){d=this.dataview.getid(this.dataview.source.id,p,m);if(this.getColumn(this.dataview.source.id)){p[this.dataview.source.id]=d}}else{var c=new Array();b.each(p,function(e,q){var r=k.dataview.getid(k.dataview.source.id,p[e],m+e);c.push(r);if(k.getColumn(k.dataview.source.id)){p[e][k.dataview.source.id]=r}});d=c}}else{if(!b.isArray(p)){if(this.getColumn(this.dataview.source.id)){p[this.dataview.source.id]=d}}else{b.each(p,function(e,q){var r=d[e];if(k.getColumn(k.dataview.source.id)){p[e][k.dataview.source.id]=r}})}}var i=this.treeGrid?(this.treeGrid.virtualModeCreateRecords?true:false):false;var g=function(v,q,A,t){if(v._loading){throw new Error(\"jqxDataTable: \"+v.loadingErrorMessage);return false}var r=v.vScrollInstance.value;var z=false;if(!b.isArray(A)){A.uid=q;v.rowsByKey[q]=A;if(q==n){n=null}z=v.source.addRecord(A,t,n,i)}else{b.each(A,function(B,C){var D=null;if(q!=null&&q[B]!=null){D=q[B]}this.uid=D;v.rowsByKey[D]=this;if(q==n){n=null}z=v.source.addRecord(this,t,n,i)})}if(v.groups&&v.groups.length>0){var w=Object.prototype.toString;var y=v.groups[0];Object.prototype.toString=(typeof y==\"function\")?y:function(){return this[y]};if(!v.source.records.sort){var x=new Array();var u=0;var e=0;var s=[];b.each(s,function(){x[e+u++]=this});s=x}v.source.records.sort(function(C,B){if(C===undefined){C=null}if(B===undefined){B=null}if(C===null&&B===null){return 0}if(C===null&&B!==null){return -1}if(C!==null&&B===null){return 1}var F=0;var E=0;if(C&&C.uid){F=C.uid}if(B&&B.uid){E=B.uid}C=C.toString();B=B.toString();if(b.jqx.dataFormat.isNumber(C)&&b.jqx.dataFormat.isNumber(B)){if(C<B){return -1}if(C>B){return 1}return 0}else{if(b.jqx.dataFormat.isDate(C)&&b.jqx.dataFormat.isDate(B)){if(C<B){return -1}if(C>B){return 1}return 0}else{if(!b.jqx.dataFormat.isNumber(C)&&!b.jqx.dataFormat.isNumber(B)){C=String(C).toLowerCase();B=String(B).toLowerCase()}}}try{if(C<B){return -1}if(C>B){return 1}}catch(D){var G=D}if(typeof(F)==\"number\"){if(F<E){return -1}if(F>E){return 1}}return 0});Object.prototype.toString=w}v.dataview._filteredData=null;v.dataview._sortData=null;v.dataview._sortHierarchyData=null;if(v._updating==undefined||v._updating==false){v.refresh()}if(v.source&&v.source._knockoutdatasource&&!v._updateFromAdapter&&v.autokoupdates){if(v.source._source._localdata){v.source.suspendKO=true;v.source._source._localdata.push(A);v.source.suspendKO=false}}v.vScrollInstance.setPosition(r);return z};if(this.source.addrow){var h=function(e,q){if(e==true||e==undefined){if(q!=undefined){d=q}g(k,d,p,j)}};try{if(!k.treeGrid){o=this.source.addrow(d,p,j,h)}else{o=this.source.addrow(d,p,j,n,h)}if(o==undefined){o=true}}catch(l){o=false}if(o==false){return false}}else{g(this,d,p,j)}return o}return false},deleteRow:function(c){var d=this._getkey(c);this.deleterowbykey(d)},deleterowbykey:function(g){if(g!=undefined){this._datachanged=true;var h=false;var f=this.that;var d=function(m,l){if(m._loading){throw new Error(\"jqxDataTable: \"+m.loadingErrorMessage);return false}m.dataview._filteredData=null;m.dataview._sortData=null;m.dataview._sortHierarchyData=null;var o=false;var p=m.vScrollInstance.value;if(!b.isArray(l)){var o=false;if(m.rowsByKey[l]){o=true;if(m.rowinfo[l]&&m.rowinfo[l].selected){m.unselectrowbykey(l,false)}if(m.treeGrid){var n=m._names();var k=m.rowsByKey[l][n.parent]}delete m.rowsByKey[l];if(m.treeGrid){if(m.rowinfo[l]){var i=m.rowinfo[l].row.records;var j=function(q){for(var r=0;r<q.length;r++){var s=q[r].uid;delete m.rowsByKey[s];delete m.rowinfo[s];if(q[r].records){j(q[r].records)}}};if(i){j(i)}}}delete m.rowinfo[l];m.source.deleteRecord(l);if(k){if(n&&k.records&&k.records.length==0){k[n.leaf]=true;m.rowinfo[k.uid][n.leaf]=true}}}}else{b.each(l,function(){var t=this;if(m.rowsByKey[t]){o=true;if(m.rowinfo[t].selected){m.unselectrowbykey(t,false)}if(m.treeGrid){var u=m._names();var s=m.rowsByKey[t][u.parent]}delete m.rowsByKey[t];if(m.treeGrid){if(m.rowinfo[t]){var q=m.rowinfo[t].row.records;var r=function(v){for(var w=0;w<v.length;w++){var x=v[w].uid;delete m.rowsByKey[x];delete m.rowinfo[x];if(v[w].records){r(v[w].records)}}};if(q){r(q);delete m.rowinfo[t]}}}m.source.deleteRecord(t);if(s){if(u&&s.records&&s.records.length==0){s[u.leaf]=true;m.rowinfo[s.uid][u.leaf]=true}}}})}m.refresh();if(m.source&&m.source._knockoutdatasource&&!m._updateFromAdapter&&m.autokoupdates){if(m.source._source._localdata){m.source.suspendKO=true;m.source._source._localdata.pop();m.source.suspendKO=false}}m.vScrollInstance.setPosition(p);return o};if(this.source.deleterow){var c=function(i){if(i==true||i==undefined){d(f,g)}};try{this.source.deleterow(g,c);if(h==undefined){h=true}}catch(e){h=false}}else{h=d(f,g)}return h}return false},updateRow:function(c,e){var d=this._getkey(c);this.updaterowbykey(d,e)},updaterowbykey:function(c,k,g,i){if(c!=undefined&&k!=undefined){var f=this.that;var j=false;var d=function(o,l,t){if(o._loading){throw new Error(\"jqxDataTable: \"+o.loadingErrorMessage);return false}o.dataview._filteredData=null;o.dataview._sortData=null;o.dataview._sortHierarchyData=null;var r=false;if(!b.isArray(l)){var n=o.rowsByKey[l];var s=function(v){if(!v){r=false}else{for(var u=0;u<o.columns.records.length;u++){v[o.columns.records[u].datafield]=t[o.columns.records[u].datafield];if(o.groups.length>0&&v.originalRecord){v.originalRecord[o.columns.records[u].datafield]=t[o.columns.records[u].datafield]}}r=true}};s(n);if(o.treeGrid){n=o.treeGrid.getRow(l);s(n)}}else{b.each(l,function(w,x){var v=o.rowsByKey[this];var u=function(z,y){if(!v){r=false}else{v[this]=t[w]}r=true};u(this,v);if(o.treeGrid){v=o.treeGrid.getRow(this);u(this,v)}})}var m=o.vScrollInstance.value;if(g==undefined||g==true){if(o._updating==undefined||o._updating==false){o._renderrows()}}if(o.showAggregates&&o._updatecolumnsaggregates){o._updatecolumnsaggregates()}if(o.source&&o.source._knockoutdatasource&&!o._updateFromAdapter&&o.autokoupdates){if(o.source._source._localdata){var n=o.rowsByKey[l];var p=o.getrowindex(n);var q=o.source._source._localdata()[p];o.source.suspendKO=true;o.source._source._localdata.replace(q,b.extend({},n));o.source.suspendKO=false}}o.vScrollInstance.setPosition(m);return r};if(this.source.updaterow){var e=function(l){if(l==true||l==undefined){d(f,c,k);if(i){i()}f._renderrows(false);if(f.autoRowHeight){f._updateScrollbars();f._arrange()}}};try{j=this.source.updaterow(c,k,e);if(j==undefined){j=true}}catch(h){j=false}}else{j=d(f,c,k);if(j&&i){i()}f._renderrows(false);if(f.autoRowHeight){f._updateScrollbars();f._arrange()}}return j}return false},lockRow:function(c){var d=this._getkey(c);this.lockrowbykey(d)},unlockRow:function(c){var d=this._getkey(c);this.unlockrowbykey(d)},lockrowbykey:function(c){if(this.rowinfo[c]){this.rowinfo[c].locked=true}else{this.rowinfo[c]={locked:true}}this._renderrows()},unlockrowbykey:function(c){if(this.rowinfo[c]){this.rowinfo[c].locked=false}else{this.rowinfo[c]={locked:false}}this._renderrows()},selectRow:function(c){var d=this._getkey(c);this.selectrowbykey(d)},unselectRow:function(c){var d=this._getkey(c);this.unselectrowbykey(d)},selectrowbykey:function(e,h,f){if(h!=\"keyboard\"&&h!=\"mouse\"){this._lastSelectedKey=e}var g=f!==false?true:false;this._doSelection(e,true,g);var i=this.rowsByKey[e];var d=this.getrowindex(i);var c=this.getrowdisplayindex(i);this._raiseEvent(\"rowSelect\",{key:e,index:c,boundIndex:d,row:this.rowsByKey[e]})},unselectrowbykey:function(e,f){var g=f!==false?true:false;this._doSelection(e,false,g);var h=this.rowsByKey[e];var d=this.getrowindex(h);var c=this.getrowdisplayindex(h);this._raiseEvent(\"rowUnselect\",{key:e,index:c,boundIndex:d,row:this.rowsByKey[e]})},getSelection:function(){var c=new Array();if(this.rowinfo){for(var e in this.rowinfo){var d=this.rowinfo[e];if(d.selected){c.push(d.row)}}}return c},showdetailsbykey:function(k){if(!this.rowDetails){return}var l=this.rowinfo[k];if(l){l.expanded=true;var f=b(this._table.children()[1]).children((\"[data-key=\"+k+\"]\"));var i=b(this._pinnedTable.children()[1]).children((\"[data-key=\"+k+\"]\"));if(f){var c=i.children();var h=b(c[0]);if(this.rtl){var h=b(c[c.length-1])}if(!this.rtl){h.removeClass(this.toThemeProperty(\"jqx-grid-group-collapse\"));h.addClass(this.toThemeProperty(\"jqx-grid-group-expand\"));h.removeClass(this.toThemeProperty(\"jqx-icon-arrow-right\"));h.addClass(this.toThemeProperty(\"jqx-icon-arrow-down\"))}else{h.removeClass(this.toThemeProperty(\"jqx-grid-group-collapse-rtl\"));h.addClass(this.toThemeProperty(\"jqx-grid-group-expand-rtl\"));h.removeClass(this.toThemeProperty(\"jqx-icon-arrow-left\"));h.addClass(this.toThemeProperty(\"jqx-icon-arrow-down\"))}f.next().show();var d=i.next();d.show();if(b.jqx.browser.msie&&b.jqx.browser.version<8){f.next().children().show();i.next().children().show()}if(!l.initialized){var j=l.detailsHeight;var m=this.initRowDetails(k,l.row,b(b(d).children().children().children()[0]),l);l.details=b(d).children().children().children()[0];l.initialized=true;if(m===false||l.detailsHeight!=j){if(m===false){l.expanded=false;l.nodetails=true;d.hide()}this._renderrows()}}this._updateScrollbars();if(this.height===\"auto\"||this.height===null||this.autoheight){this._arrange()}var g=this.getrowindex(l.row);var e=this.getrowdisplayindex(l.row);this._raiseEvent(\"rowExpand\",{row:l.row,index:e,boundIndex:g,rowKey:k})}}},hidedetailsbykey:function(h){if(!this.rowDetails){return}var j=this.rowinfo[h];if(j){j.expanded=false;var d=b(this._table.children()[1]).children((\"[data-key=\"+h+\"]\"));var e=b(this._pinnedTable.children()[1]).children((\"[data-key=\"+h+\"]\"));if(d){var g=e.children();var i=b(g[0]);if(this.rtl){var i=b(g[g.length-1])}if(!this.rtl){i.addClass(this.toThemeProperty(\"jqx-grid-group-collapse\"));i.removeClass(this.toThemeProperty(\"jqx-grid-group-expand\"));i.addClass(this.toThemeProperty(\"jqx-icon-arrow-right\"));i.removeClass(this.toThemeProperty(\"jqx-icon-arrow-down\"))}else{i.addClass(this.toThemeProperty(\"jqx-grid-group-collapse-rtl\"));i.removeClass(this.toThemeProperty(\"jqx-grid-group-expand-rtl\"));i.addClass(this.toThemeProperty(\"jqx-icon-arrow-left\"));i.removeClass(this.toThemeProperty(\"jqx-icon-arrow-down\"))}d.next().hide();e.next().hide();if(b.jqx.browser.msie&&b.jqx.browser.version<8){d.next().children().hide();e.next().children().hide()}this._updateScrollbars();if(this.height===\"auto\"||this.height===null||this.autoheight){this._arrange()}var f=this.getrowindex(j.row);var c=this.getrowdisplayindex(j.row);this._raiseEvent(\"rowCollapse\",{row:j.row,index:c,boundIndex:f,rowKey:h})}}},_getvirtualcolumnsindexes:function(d,l,h,k,c){if(this.rowDetails||this.rtl||this.editcell||(this.width&&this.width.toString().indexOf(\"%\")>=0)||this.exporting){return{start:0,end:h+k}}var e=0;var i=-1;var f=h+k;if(this.autorowheight){return{start:0,end:h+k}}if(!c){for(var g=0;g<h+k;g++){var m=g;if(!this.columns.records[g].hidden){e+=this.columns.records[g].width}if(e>=d&&i==-1){i=g}if(e>l+d){f=g;break}}}f++;if(f>h+k){f=h+k}if(i==-1){i=0}return{start:i,end:f}},_renderhorizontalscroll:function(){var t=this.hScrollInstance;var u=t.value;if(this.hScrollBar.css(\"visibility\")===\"hidden\"){t.value=0;u=0}var h=parseInt(u);if(this.table==null){return}var q=this.columnsrow;var r=0;var i=this.columns.records.length-r;var e=this.columns.records;var l=this.source.records.length==0;if(this.rtl){if(this.hScrollBar.css(\"visibility\")!=\"hidden\"){h=t.max-h}}if(l&&!this._haspinned){this.table[0].style.left=-h+\"px\";q[0].style.marginLeft=-h+\"px\"}else{if(this._haspinned||this._haspinned==undefined){for(var w=0;w<r+i;w++){var f=e[w];if(f.pinned){var g=null;if(this.showAggregates){if(this.statusbar[0].cells){g=this.statusbar[0].cells[w]}}if(this.filterrow){if(this.filterrow[0].cells){var x=this.filterrow[0].cells[w]}}if(!this.rtl){var c=q[0].cells[w];c.style.marginLeft=h+\"px\";if(g){g.style.marginLeft=h+\"px\"}if(this.filterrow&&x){x.style.marginLeft=h+\"px\"}}else{var c=q[0].cells[w];c.style.marginLeft=-parseInt(u)+\"px\";if(g){g.style.marginLeft=-parseInt(u)+\"px\"}if(this.filterrow&&x){x.style.marginLeft=-parseInt(u)+\"px\"}}}}if(this.columnsVirtualization){var s=this._getvirtualcolumnsindexes(h,this.host.width(),0,this.columns.records.length,false);var n=s.start;var p=s.end;for(var o=0;o<n;o++){var m=o;var v=this.columns.records[m].element[0];if(this.columns.records[m].pinned){continue}if(v.parentNode){v.parentNode.removeChild(v)}if(this.filterrow&&this.filterrow[0]){var d=this.filterrow[0].cells[m];if(d.parentNode){d.parentNode.removeChild(d)}}}for(var o=p;o<this.columns.records.length;o++){var m=o;var v=this.columns.records[m].element[0];if(this.columns.records[m].pinned){continue}if(v.parentNode){v.parentNode.removeChild(v)}if(this.filterrow&&this.filterrow[0]){var d=this.filterrow[0].cells[m];if(d.parentNode){d.parentNode.removeChild(d)}}}for(var o=n;o<p;o++){var m=o;v=this.columns.records[m].element[0];if(this.columns.records[m].pinned){continue}if(!v.parentNode){this.columnsrow[0].appendChild(v)}if(this.filterrow&&this.filterrow[0]){var d=this.filterrow[0].cells[m];if(!d.parentNode){this.filterrow[0].appendChild(d)}}}}this._table[0].style.left=-h+\"px\";q[0].style.marginLeft=-h+\"px\"}else{if(this._haspinned==false){if(this.columnsVirtualization){var s=this._getvirtualcolumnsindexes(h,this.host.width(),0,this.columns.records.length,false);var n=s.start;var p=s.end;for(var o=0;o<n;o++){var m=o;var v=this.columns.records[m].element[0];if(v.parentNode){v.parentNode.removeChild(v)}if(this.filterrow&&this.filterrow[0]){var d=this.filterrow[0].cells[m];if(d.parentNode){d.parentNode.removeChild(d)}}}for(var o=p;o<this.columns.records.length;o++){var m=o;var v=this.columns.records[m].element[0];if(v.parentNode){v.parentNode.removeChild(v)}if(this.filterrow&&this.filterrow[0]){var d=this.filterrow[0].cells[m];if(d.parentNode){d.parentNode.removeChild(d)}}}for(var o=n;o<p;o++){var m=o;v=this.columns.records[m].element[0];if(!v.parentNode){this.columnsrow[0].appendChild(v)}if(this.filterrow&&this.filterrow[0]){var d=this.filterrow[0].cells[m];if(!d.parentNode){this.filterrow[0].appendChild(d)}}}}this.table[0].style.left=-h+\"px\";q[0].style.marginLeft=-h+\"px\"}}if(this.filterrow){this.filterrow[0].style.left=-h+\"px\";if(this.rtl){this.filterrow[0].style.left=-h+parseInt(this.content.css(\"left\"))+\"px\"}}}if(this.showAggregates){if(this.aggregates[0].cells){var k=0;if(this.rtl){if(this.vScrollBar.css(\"visibility\")!=\"hidden\"){if(this.hScrollBar.css(\"visibility\")!=\"hidden\"){k=2+parseInt(this.hScrollBar.css(\"left\"))}else{k=3+parseInt(this.vScrollBar.width())}}}this.aggregates[0].style.marginLeft=-h+k+\"px\"}}},_initializeColumns:function(){var d=this.source.datafields;if(d==null&&this.source._source){d=this.source._source.datafields}var k=d?d.length>0:false;if(this.columns&&this.columns.records){for(var e=0;e<this.columns.records.length;e++){this._removecolumnhandlers(this.columns.records[e])}}var j=this;var c=new b.jqx.dataCollection(this.element);var h=0;this._haspinned=false;if(!this._columns){this._columns=this.columns}else{this.columns=this._columns}if(this.selectionMode==\"checkbox\"){var f=new a(j,this);f.visibleindex=h++;f.width=j.indentWidth;f.checkboxcolumn=true;f.editable=false;f.columntype=\"checkbox\";f.groupable=false;f.draggable=false;f.filterable=false;f.resizable=false;f.datafield=\"_checkboxcolumn\";c.add(f)}if(this.rowDetails&&!this.treeGrid){var f=new a(j,this);f.visibleindex=h++;f.width=j.indentWidth;f.editable=false;f.rowDetailscolumn=true;f.groupable=false;f.draggable=false;f.pinned=true;f.filterable=false;f.resizable=false;f.text=\"\";c.add(f)}var g=new Array();b.each(this.columns,function(i){if(j.columns[i]!=undefined){var l=new a(j,this);l.visibleindex=h++;if(this.dataField!=undefined){this.datafield=this.dataField}if(this.pinned){j._haspinned=true}if(this.datafield==null){if(j.source&&j.source._source&&(j.source._source.datatype==\"array\")){if(!k){if(!j.source._source.datafields){j.source._source.datafields=new Array();j.source._source.datafields.push({name:i.toString()})}else{j.source._source.datafields.push({name:i.toString()})}}this.datafield=i.toString();this.displayfield=i.toString();l.datafield=this.datafield;l.displayfield=this.displayfield}}else{if(g[this.datafield]){throw new Error(\"jqxDataTable: Invalid column 'dataField' setting. jqxDataTable's columns should be initialized with unique data fields.\");j.host.remove();return false}else{g[this.datafield]=true}}c.add(l)}});if(this.rtl){c.records.reverse()}this.columns=c},addFilter:function(c,e){var d=this.getColumn(c);if(!d){return}this.dataview.addFilter(c,e)},removeFilter:function(c){var d=this.getColumn(c);if(!d){return}this.dataview.removeFilter(c)},clearFilters:function(d,c){this.dataview.filters=new Array();this.dataview._filteredData=null;this.dataview._sortData=null;this.dataview._sortHierarchyData=null;if(c!==false){this.resetfilter()}if(d===false){return}this.applyFilters()},resetfilter:function(){if(this.filterinput){this.filterinput.val(\"\")}if(this.filterrow){for(var f=0;f<this.filterrow[0].cells.length;f++){var m=this.filterrow[0].cells[f];var l=b(m).find(\"input:first\");var j=b(m).find(\".filterconditions\");var e=this.columns.records[f];var d=\"\";if(!e.filterable){continue}l.val(\"\");var g=this.getcolumntypebydatafield(e);var c=new b.jqx.filter();var h,k;switch(g){case\"number\":case\"int\":case\"float\":case\"decimal\":h=\"numericfilter\";k=c.getoperatorsbyfiltertype(\"numericfilter\");break;case\"boolean\":case\"bool\":h=\"booleanfilter\";k=c.getoperatorsbyfiltertype(\"booleanfilter\");break;case\"date\":case\"time\":h=\"datefilter\";k=c.getoperatorsbyfiltertype(\"datefilter\");break;case\"string\":h=\"stringfilter\";k=c.getoperatorsbyfiltertype(\"stringfilter\");break}if(j.length>0){if(h===\"stringfilter\"){j.jqxDropDownList({selectedIndex:2})}else{j.jqxDropDownList({selectedIndex:0})}}}}},applyFilters:function(){if(this.editable){if(this.editKey!=null){var c=this.endroweditbykey(this.editKey)}}this.dataview._filteredData=null;this.dataview._sortData=null;this.dataview._sortHierarchyData=null;if(this.serverProcessing){this.dataview.pagenum=0;this.updateBoundData(\"filter\")}else{this.goToPage(0);this.refresh()}if(arguments&&arguments.length>0){if(this._updateSimpleFilter){if(this.filtercolumnsList){var d=this.filtercolumnsList.jqxDropDownList(\"getSelectedItem\").value;this._updateSimpleFilter(d)}}if(this._updateFilterRow){this._updateFilterRow()}}this._raiseEvent(\"filter\",{filters:this.dataview.filters})},sortBy:function(d,g){this.dataview._filteredData=null;this.dataview._sortData=null;this.dataview._sortHierarchyData=null;if(this._loading){throw new Error(\"jqxDataTable: \"+this.loadingErrorMessage);return false}if(this.editable){if(this.editKey!=null){var c=this.endroweditbykey(this.editKey)}}if(d==null){g=null;d=this.sortcolumn}if(d){var f=this;var e;if(g==\"a\"||g==\"asc\"||g==\"ascending\"||g==true){e=true}else{e=false}if(g!=null){f.sortdirection={ascending:e,descending:!e}}else{f.sortdirection={ascending:false,descending:false}}if(g!=null){f.sortcolumn=d}else{f.sortcolumn=null}if(f.source.sort){f.dataview.sortfield=d;if(g==null){f.dataview.sortfielddirection=\"\"}else{f.dataview.sortfielddirection=e?\"asc\":\"desc\"}if(f.source.sort&&!this._loading){f.source.sort(d,g)}}f.dataview.sortBy(d,g);f._raiseEvent(\"sort\",{sortcolumn:this.sortcolumn,sortdirection:this.sortdirection})}if(!this.serverProcessing){this.refresh()}else{this.updateBoundData(\"sort\")}},_togglesort:function(d){var f=this;if(this.disabled){return}if(d.sortable&&f.sortable){var c={sortcolumn:this.sortcolumn,sortdirection:this.sortdirection};var e=null;if(c.sortcolumn!=null&&c.sortcolumn==d.displayfield){e=c.sortdirection.ascending;if(e==true){e=false}else{e=null}}else{e=true}f.sortBy(d.displayfield,e)}},_renderfilter:function(){var h=this;var j=b(\"<div style='position: relative; margin: 4px;'><input style='width: 200px; height: 22px; direction: ltr;' role='textbox' type='text'/><div style='cursor: pointer; height: 100%;'><div></div></div></div>\");j.height(22);var o=j.find(\"input\");var g=j.find(\"div:first\");j.addClass(this.toThemeProperty(\"jqx-rc-all\"));j.addClass(this.toThemeProperty(\"jqx-widget\"));j.addClass(this.toThemeProperty(\"jqx-input-group\"));o.addClass(this.toThemeProperty(\"jqx-input\"));o.addClass(this.toThemeProperty(\"jqx-rc-l\"));o.addClass(this.toThemeProperty(\"jqx-input-group-addon\"));o.addClass(this.toThemeProperty(\"jqx-widget\"));o.addClass(this.toThemeProperty(\"jqx-widget-content\"));g.addClass(this.toThemeProperty(\"jqx-fill-state-normal\"));g.addClass(this.toThemeProperty(\"jqx-rc-r\"));g.addClass(this.toThemeProperty(\"jqx-input-group-addon\"));g.find(\"div\").addClass(this.toThemeProperty(\"jqx-icon-search\"));if(this.rtl){o.addClass(this.toThemeProperty(\"jqx-rtl\"));o.css(\"direction\",\"rtl\")}this.filter.children().remove();this.filterbutton=g;var d=new Array();for(var f=0;f<h.columns.records.length;f++){if(h.columns.records[f].datafield&&h.columns.records[f].filterable){d.push({label:h.columns.records[f].text,value:h.columns.records[f].displayfield})}}var p=d.length<10?true:false;var l=b(\"<div style='position: relative; top: 50%; display: none; margin-right: 4px; margin-left: 4px; float: left;'>\"+this.gridlocalization.filtersearchstring+\"</div>\");this.filter.append(l);var c=b(\"<div class='filtercolumns' style='position: relative; margin: 4px; float: left;'></div>\");this.filter.append(c);if(c.jqxDropDownList){c.jqxDropDownList({theme:this.theme,enableBrowserBoundsDetection:true,autoDropDownHeight:p,rtl:h.rtl,dropDownWidth:220,selectedIndex:0,width:\"auto\",height:20,source:d,displayMember:\"label\",valueMember:\"value\"})}this.filtercolumnsList=c;var n=function(q){h.filterinput.val(\"\");for(var r=0;r<h.dataview.filters.length;r++){var s=h.dataview.filters[r];if(s.datafield===q){h.filterinput.val(s.filter.getfilterat(0).filtervalue)}}};if(h.filterHeight!==35){h.filtercolumnsList.css(\"margin-top\",h.filterHeight/2-10);j.css(\"margin-top\",h.filterHeight/2-10)}h._updateSimpleFilter=n;this.addHandler(c,\"select\",function(q){var i=q.args.item.value;n(i)});if(this.filterMode===\"simple\"){this.filtercolumnsList.hide();l.show();l.css(\"margin-top\",-this.filter.height()/2);j.css(\"float\",\"left\")}else{this.filtercolumnsList.show();l.hide()}var m=function(){if(!g.hasClass(\"jqx-fill-state-disabled\")){var r=o.val();if(c.jqxDropDownList){var u=c.jqxDropDownList(\"getSelectedItem\")}var w=function(B,x,i){var A=new b.jqx.filter();var z=h.getcolumntypebydatafield(B);var C=h._getfiltertype(z);if(C==\"datefilter\"){var y=A.createfilter(C,x,\"EQUAL\",null,B.cellsFormat,h.gridlocalization)}else{if(C==\"numericfilter\"||C==\"booleanfilter\"){if(C==\"numericfilter\"){if(h.gridlocalization.decimalseparator==\",\"){if(x.indexOf(h.gridlocalization.decimalseparator)>=0){x=x.replace(h.gridlocalization.decimalseparator,\".\")}}if(x.indexOf(h.gridlocalization.currencysymbol)>=0){x=x.replace(h.gridlocalization.currencysymbol,\"\")}if(x.indexOf(h.gridlocalization.percentagesymbol)>=0){x=x.replace(h.gridlocalization.percentagesymbol,\"\")}}var y=A.createfilter(C,x,\"EQUAL\",null,B.cellsFormat,h.gridlocalization)}else{var y=A.createfilter(C,x,\"CONTAINS\")}}A.operator=i;A.addfilter(0,y);return A};if(h.filterMode!==\"simple\"){if(u){var v=u.value;var t=h.getColumn(v);var s=w(t,r,\"and\");if(r.length>0){h.removeFilter(v);h.addFilter(v,s);h.applyFilters()}else{h.removeFilter(v);h.applyFilters()}if(h.filterMode===\"advanced\"){if(h._updateFilterRow){h._updateFilterRow(true)}}}}else{h.clearFilters(false,false);if(r.length>0){for(var q=0;q<h.columns.records.length;q++){var t=h.columns.records[q];var s=w(t,r,\"or\");h.addFilter(t.datafield,s)}}h.applyFilters()}if(h.dataview.filters.length==0){h.filtericon.fadeOut(200)}else{h.filtericon.fadeIn(200)}}};o.keydown(function(i){if(i.keyCode===13){m();if(i.preventDefault){i.preventDefault()}return false}});g.click(function(){m()});this.filterinput=o;this.filter.append(j);if(this.filterMode==\"advanced\"){var e=b(\"<a style='float: left; position: relative; margin: 2px; margin-left: 10px;' href='#'>\"+this.gridlocalization.filterstring+\"</a>\");j.append(e);this.addHandler(e,\"click\",function(q){var i=function(u){if(h.filterrow){for(var x=0;x<h.filterrow[0].cells.length;x++){var t=h.filterrow[0].cells[x];var v=b(t).find(\"input:first\");var z=h.columns.records[x];if(!z.filterable){continue}if(u===true){v.val(\"\")}for(var w=0;w<h.dataview.filters.length;w++){var y=h.dataview.filters[w];if(y.datafield===z.displayfield){v.val(y.filter.getfilterat(0).filtervalue);break}}}}};var s=function(v){if(h.filterrow){var u=0;for(var x=0;x<h.filterrow[0].cells.length;x++){var t=h.filterrow[0].cells[x];var w=b(t).find(\"input:first\");var y=h.columns.records[x];if(y.hidden){t.style.visibility=\"hidden\"}else{t.style.visibility=\"inherit\"}if(!y.filterable){continue}t.style.left=parseInt(u)+parseInt(y.uielement[0].style.left)+\"px\";t.style.width=6+y.width+\"px\";if(w[0]){w[0].style.width=y.width-6-22+\"px\"}}}};h._updateFilterRow=i;h._arrangeFilterRow=s;var r=function(){h.filtercolumnsList.jqxDropDownList({disabled:true});h.filterinput.addClass(h.toThemeProperty(\"jqx-fill-state-disabled\"));h.filterinput.attr(\"disabled\",true);h.filterbutton.addClass(h.toThemeProperty(\"jqx-fill-state-disabled\"))};if(h.filter.find(\".filterrow\").length===0){h._renderadvancedfilter();r();i();h._arrange();s()}else{if(h.filter.find(\".filterrow\").css(\"display\")===\"none\"){r();h.filter.find(\".filterrow\").removeClass(\"filterrow-hidden\");i();h.filter.find(\".filterrow\").show();s()}else{h.filtercolumnsList.jqxDropDownList({disabled:false});h.filterinput.removeClass(h.toThemeProperty(\"jqx-fill-state-disabled\"));h.filterinput.attr(\"disabled\",false);h.filterbutton.removeClass(h.toThemeProperty(\"jqx-fill-state-disabled\"));n(h.filtercolumnsList.jqxDropDownList(\"getSelectedItem\").value);h.filter.find(\".filterrow\").addClass(\"filterrow-hidden\");h.filter.find(\".filterrow\").hide()}h._arrange()}return false})}var k=b(\"<div style='float: left; width: 16px; height: 16px; position: relative; margin: 3px;'></div>\");k.attr(\"title\",h.gridlocalization.filterclearstring);k.addClass(h.toThemeProperty(\"jqx-icon-close\"));j.append(k);k.hide();h.filtericon=k;k.click(function(){h.clearFilters();h.filtericon.fadeOut(200)});if(h.dataview.filters.length>0){if(h.filterMode!=\"advanced\"){n(h.dataview.filters[0].datafield)}else{if(h._updateFilterRow){h._updateFilterRow()}}}},_renderadvancedfilter:function(){var h=this;var c=function(){h.clearFilters(false,false);var n=h.filtercolumnsList.jqxDropDownList(\"getSelectedItem\").value;var p=h.filterinput.val();for(var m=0;m<h.filterrow[0].cells.length;m++){var v=h.filterrow[0].cells[m];var u=b(v).find(\"input:first\");var r=b(v).find(\".filterconditions\");var l=h.columns.records[m];var k=\"\";if(!l.filterable){continue}if(l.displayfield===n){h.filterinput.val(u.val())}var q,t;var o=h.getcolumntypebydatafield(l);var j=new b.jqx.filter();switch(o){case\"number\":case\"int\":case\"float\":case\"decimal\":q=\"numericfilter\";t=j.getoperatorsbyfiltertype(\"numericfilter\");break;case\"boolean\":case\"bool\":q=\"booleanfilter\";t=j.getoperatorsbyfiltertype(\"booleanfilter\");break;case\"date\":case\"time\":q=\"datefilter\";t=j.getoperatorsbyfiltertype(\"datefilter\");break;case\"string\":q=\"stringfilter\";t=j.getoperatorsbyfiltertype(\"stringfilter\");break}if(r.length==0){if(q===\"stringfilter\"){k=t[2]}else{k=t[0]}}else{var y=r.jqxDropDownList(\"getSelectedItem\");if(y){k=t[y.index]}else{if(q===\"stringfilter\"){k=t[2]}else{k=t[0]}}}var w=u.val();if(w.length>0||(w.length==0&&k==\"NOT_NULL\")||(w.length==0&&k==\"NOT_EMPTY\")||(w.length==0&&k==\"EMPTY\")||(w.length==0&&k==\"NULL\")){var s=l.displayfield;var x=new b.jqx.filter();if(q==\"numericfilter\"){if(h.gridlocalization.decimalseparator==\",\"){if(w.indexOf(h.gridlocalization.decimalseparator)>=0){w=w.replace(h.gridlocalization.decimalseparator,\".\")}}if(w.indexOf(h.gridlocalization.currencysymbol)>=0){w=w.replace(h.gridlocalization.currencysymbol,\"\")}if(w.indexOf(h.gridlocalization.percentagesymbol)>=0){w=w.replace(h.gridlocalization.percentagesymbol,\"\")}}var j=x.createfilter(q,w,k,null,l.cellsFormat,h.gridlocalization);x.addfilter(0,j);h.addFilter(s,x)}}if(h.dataview.filters.length>0){h.applyFilters()}else{h.clearFilters()}if(h.dataview.filters.length==0){h.filtericon.fadeOut(200)}else{h.filtericon.fadeIn(200)}};var e=function(){var m=b(\"<div style='position: relative;' class='filterrow'></div>\").appendTo(h.filter);h.filterrow=m;m[0].cells=new Array();m.height(24);m.width(h.table.width());var k=0;var j=h.filtercolumnsList.jqxDropDownList(\"getSelectedItem\").value;var l=h.filterinput.val();b.each(h.columns.records,function(){var p=this;var n=b(\"<div></div>\").appendTo(m);n.css(\"position\",\"absolute\");n.css(\"left\",k+parseInt(p.uielement[0].style.left));if(p.pinned){n.css(\"z-index\",h.tableZIndex+h.columns.records.length);n.addClass(h.toThemeProperty(\"jqx-widget-header\"))}m[0].cells.push(n[0]);if(!this.filterable){return true}var o=b(\"<input style='margin-left: 4px; height: 20px; float: left;' role='textbox' type='text'/>\").appendTo(n);o.keydown(function(r){if(r.keyCode===13){c()}});if(p.displayfield===j){o.val(l)}o.addClass(h.toThemeProperty(\"jqx-input\"));o.addClass(h.toThemeProperty(\"jqx-rc-all\"));o.addClass(h.toThemeProperty(\"jqx-widget\"));o.addClass(h.toThemeProperty(\"jqx-widget-content\"));var q=b(\"<div style='cursor: pointer; margin-left: 4px; margin-bottom: 4px; margin-top: 6px; width: 18px; position: relative; margin-top: 4px; float: left;'></div>\").appendTo(n);q.append(b(\"<div style='width: 16px; height: 16px;' class='\"+h.toThemeProperty(\"jqx-grid-column-filterbutton\")+\"'></div>\"));o.focus(function(){h.ensureColumnVisible(p.displayfield);h.filter[0].scrollLeft=0;h.ensureColumnVisible(p.displayfield);setTimeout(function(){h.filter[0].scrollLeft=0;h.ensureColumnVisible(p.displayfield)},10)});q.click(function(){var u=b(\"<div class='filterconditions' style='position: relative; margin-top: 1px; float: left;'></div>\");u.insertAfter(q);q.remove();var s=h.getcolumntypebydatafield(p);var t=h._getfiltersbytype(s);var r;if(s===\"string\"){r=2}else{r=0}u.jqxDropDownList({theme:h.theme,enableBrowserBoundsDetection:true,renderMode:\"simple\",arrowSize:0,selectedIndex:r,rtl:h.rtl,dropDownWidth:230,dropDownHeight:180,width:20,height:20,source:t,selectionRenderer:function(){return\"<div style='width: 16px; height: 16px;' class='\"+h.toThemeProperty(\"jqx-grid-column-filterbutton\")+\"'></div>\"}});h.addHandler(u,\"close\",function(v){o.focus();setTimeout(function(){o.focus()},10)});u.removeAttr(\"tabindex\");u.find(\"div\").removeAttr(\"tabindex\");u.jqxDropDownList(\"open\")});o[0].style.width=p.width-6-22+\"px\"});b(\"<div style='clear: both;'></div>\").appendTo(m)};e();var i=b(\"<div style='position:relative;' class='filterrow'></div>\").appendTo(h.filter);var f=b(\"<input type='button' style='position: relative; float: left; margin-top: 4px; margin-left: 4px;' value='\"+h.gridlocalization.filterapplystring+\"'/>\").appendTo(i);var g=b(\"<input type='button' style='position: relative; float: left; margin-top: 4px;  margin-left: 4px;' value='\"+h.gridlocalization.filtercancelstring+\"'/>\").appendTo(i);var d=0;f.css(\"left\",d);g.css(\"left\",d);f.css(\"top\",\"4px\");g.css(\"top\",\"4px\");f.jqxButton({theme:h.theme});g.jqxButton({theme:h.theme});g.click(function(){h.filtercolumnsList.jqxDropDownList({disabled:false});h.filterinput.removeClass(h.toThemeProperty(\"jqx-fill-state-disabled\"));h.filterinput.attr(\"disabled\",false);h.filterbutton.removeClass(h.toThemeProperty(\"jqx-fill-state-disabled\"));h.filter.find(\".filterrow\").addClass(\"filterrow-hidden\");h.filter.find(\".filterrow\").hide();h._arrange()});f.click(function(){c()});h._renderhorizontalscroll()},_getfiltertype:function(c){var d=\"stringfilter\";switch(c){case\"number\":case\"int\":case\"float\":case\"decimal\":d=\"numericfilter\";break;case\"boolean\":case\"bool\":d=\"booleanfilter\";break;case\"date\":case\"time\":d=\"datefilter\";break;case\"string\":d=\"stringfilter\";break}return d},getcolumntypebydatafield:function(e){var f=this;var d=\"string\";var c=f.source.datafields||((f.source._source)?f.source._source.datafields:null);if(c){var g=\"\";b.each(c,function(){if(this.name==e.displayfield){if(this.type){g=this.type}return false}});if(g){return g}}return d},_getfiltersbytype:function(c){var d=this;var e=\"\";switch(c){case\"number\":case\"float\":case\"int\":e=d.gridlocalization.filternumericcomparisonoperators;break;case\"date\":e=d.gridlocalization.filterdatecomparisonoperators;break;case\"boolean\":case\"bool\":e=d.gridlocalization.filterbooleancomparisonoperators;break;case\"string\":default:e=d.gridlocalization.filterstringcomparisonoperators;break}return e},_getcellvalue:function(c,e){var d=null;d=e[c.datafield];if(c.displayfield!=null){d=e[c.displayfield]}if(d==null){d=\"\"}return d},_renderrows:function(ap){if(this.editable){if(this.editKey!=null){if(ap!==false){var M=this.endroweditbykey(this.editKey)}}}if(this.treeGrid){this.treeGrid._renderrows();return}if(this._loading){return}if(this._updating){return}if(this.rendering){this.rendering()}var ab=this;var T=0;this.table[0].rows=new Array();var H=this.toTP(\"jqx-cell\")+\" \"+this.toTP(\"jqx-widget-content\");if(this.rtl){H+=\" \"+this.toTP(\"jqx-cell-rtl\")}var K=this.columns.records.length;var ao=b.jqx.browser.msie&&b.jqx.browser.version<8;if(ao){this.host.attr(\"hideFocus\",\"true\")}var R=ab.groups.length;var ai=new Array();var k=this.source.records;k=this.dataview.evaluate(k);this.dataViewRecords=k;if(this.dataview.pagesize==\"all\"||!this.pageable||this.serverProcessing){var u=k;if(this.pageable&&this.serverProcessing&&k.length>this.dataview.pagesize){var u=k.slice(this.dataview.pagesize*this.dataview.pagenum,this.dataview.pagesize*this.dataview.pagenum+this.dataview.pagesize)}}else{var u=k.slice(this.dataview.pagesize*this.dataview.pagenum,this.dataview.pagesize*this.dataview.pagenum+this.dataview.pagesize)}if(ab.groups&&ab.groups.length>0){var P=this.pageable?this.dataview.pagesize*this.dataview.pagenum:0;var z=function(w){var au=0;var i=new Array();for(var c=0;c<w.length;c++){var j=w[c];if(j.level==0){au++}if(au>ab.dataview.pagesize*ab.dataview.pagenum&&au<=ab.dataview.pagesize*ab.dataview.pagenum+ab.dataview.pagesize){i.push(j)}if(au>ab.dataview.pagesize*ab.dataview.pagenum+ab.dataview.pagesize){break}}return i};if(this.pageSizeMode===\"root\"){var v=ab.source.getGroupedRecords(ab.groups,\"records\",\"label\",null,\"data\",null,\"parent\",k,0);ab.rootRecordsLength=v.length;v=z(v)}else{var v=ab.source.getGroupedRecords(ab.groups,\"records\",\"label\",null,\"data\",null,\"parent\",u,P)}var y=function(j,w){for(var av=0;av<j.length;av++){var c=j[av];w.push(c);if(c.records&&c.records.length>0){var aw=y(c.records,new Array());for(var au=0;au<aw.length;au++){if(aw[au].leaf){w.push(aw[au])}else{w.push(aw[au])}}}}return w};var ai=y.call(ab,v,new Array());u=ai;this.rowsByKey=new Array();for(var am=0;am<u.length;am++){var G=u[am];this.rowsByKey[G.uid]=G}}var ai=u;this.renderedRecords=ai;var U=ai.length;var V=this.tableZIndex;var aq=0;var aa=0;if(ao){for(var al=0;al<K;al++){var Z=this.columns.records[al];var e=Z.width;if(e<Z.minwidth){e=Z.minwidth}if(e>Z.maxwidth){e=Z.maxwidth}var l=b('<table><tr><td role=\"gridcell\" style=\"max-width: '+e+\"px; width:\"+e+'px;\" class=\"'+H+'\"></td></tr></table>');b(document.body).append(l);var n=l.find(\"td\");aq=1+parseInt(n.css(\"padding-left\"))+parseInt(n.css(\"padding-right\"));l.remove();break}}var ak=this.rtl?\" \"+this.toTP(\"jqx-grid-table-rtl\"):\"\";var B=\"<table cellspacing='0' cellpadding='0' class='\"+this.toTP(\"jqx-grid-table\")+ak+\"' id='table\"+this.element.id+\"'><colgroup>\";var ar=\"<table cellspacing='0' cellpadding='0' class='\"+this.toTP(\"jqx-grid-table\")+ak+\"' id='pinnedtable\"+this.element.id+\"'><colgroup>\";var I=0;var s=K;for(var al=0;al<K;al++){var Z=this.columns.records[al];if(Z.hidden){I++;s--;continue}var e=Z.width;if(e<Z.minwidth){e=Z.minwidth}if(e>Z.maxwidth){e=Z.maxwidth}e-=aq;if(e<0){e=0}if(ao){var ac=e;if(al==I){ac++}if(Z.rowDetailscolumn){var ac=ac+4;ar+=\"<col style='max-width: \"+ac+\"px; width: \"+ac+\"px;'>\";B+=\"<col style='max-width: \"+ac+\"px; width: \"+ac+\"px;'>\"}else{ar+=\"<col style='max-width: \"+ac+\"px; width: \"+ac+\"px;'>\";B+=\"<col style='max-width: \"+ac+\"px; width: \"+ac+\"px;'>\"}}else{ar+=\"<col style='max-width: \"+e+\"px; width: \"+e+\"px;'>\";B+=\"<col style='max-width: \"+e+\"px; width: \"+e+\"px;'>\"}aa+=e}B+=\"</colgroup>\";ar+=\"</colgroup>\";this._hiddencolumns=false;var g=false;if(this.rowDetails&&this._pinnedTable){this._pinnedTable.find(\"[data-role=details]\").detach();this._table.find(\"[data-role=details]\").detach()}if(U===0){var o='<tr role=\"row\">';var m=this.host.height();if(this.pageable){m-=this.pagerHeight;if(this.pagerPosition===\"both\"){m-=this.pagerHeight}}m-=this.columnsHeight;if(this.filterable){var ag=this.filter.find(\".filterrow\");var D=this.filter.find(\".filterrow-hidden\");var C=1;if(D.length>0){C=0}m-=this.filterHeight+this.filterHeight*ag.length*C}if(this.showstatusbar){m-=this.statusBarHeight}if(this.showAggregates){m-=this.aggregatesHeight}if(m<25){m=25}if(this.hScrollBar[0].style.visibility!=\"hidden\"){m-=this.hScrollBar.outerHeight()}if(this.height===\"auto\"||this.height===null||this.autoheight){m=300}var l='<td colspan=\"'+this.columns.records.length+'\" role=\"gridcell\" style=\"border: none; min-height: '+m+\"px; height: \"+m+\"px; max-width:\"+aa+\"px; width:\"+aa+\"px;\";var H=this.toTP(\"jqx-cell\")+\" \"+this.toTP(\"jqx-grid-cell\")+\" \"+this.toTP(\"jqx-item\");H+=\" \"+this.toTP(\"jqx-center-align\");l+='\" class=\"'+H+'\">';l+=this.gridlocalization.emptydatastring;l+=\"</td>\";o+=l;B+=o;ar+=o;this.table[0].style.width=aa+2+\"px\";T=aa}var q=this.getRows();var x=new Array();for(var am=0;am<ai.length;am++){var G=ai[am];var L=G.uid;if(undefined===G.uid){G.uid=this.dataview.generatekey()}var o='<tr data-key=\"'+L+'\" role=\"row\" id=\"row'+am+this.element.id+'\">';var E='<tr data-key=\"'+L+'\" role=\"row\" id=\"row'+am+this.element.id+'\">';if(R>0){if(G.level<R){var o='<tr data-role=\"row-group\" data-key=\"'+L+'\" role=\"row\" id=\"row'+am+this.element.id+'\">';var E='<tr data-role=\"row-group\" data-key=\"'+L+'\" role=\"row\" id=\"row'+am+this.element.id+'\">'}}var p=0;var S=0;for(var al=0;al<K;al++){var ae=this.columns.records[al];if(ae.pinned||(this.rtl&&this.columns.records[K-1].pinned)){g=true}var e=ae.width;if(e<ae.minwidth){e=ae.minwidth}if(e>ae.maxwidth){e=ae.maxwidth}e-=aq;if(e<0){e=0}var H=this.toTP(\"jqx-cell\")+\" \"+this.toTP(\"jqx-grid-cell\")+\" \"+this.toTP(\"jqx-item\");if(ae.pinned){H+=\" \"+this.toTP(\"jqx-grid-cell-pinned\")}if(this.sortcolumn===ae.displayfield){H+=\" \"+this.toTP(\"jqx-grid-cell-sort\")}if(this.altRows&&am%2!=0){H+=\" \"+this.toTP(\"jqx-grid-cell-alt\")}if(this.rtl){H+=\" \"+this.toTP(\"jqx-cell-rtl\")}var O=\"\";if(R>0){if(G.level<R){if(!ao){H+=\" \"+this.toTP(\"jqx-grid-cell-pinned\");O+=' colspan=\"'+K+'\"';var ac=0;for(var ad=0;ad<K;ad++){var at=ab.columns.records[ad];var A=at.width;if(A<at.minwidth){e=at.minwidth}if(A>at.maxwidth){e=at.maxwidth}A-=aq;if(A<0){A=0}if(!at.hidden){ac+=A}}e=ac}else{H+=\" \"+this.toTP(\"jqx-grid-cell-pinned\")}}}var l='<td role=\"gridcell\" '+O+' style=\"max-width:'+e+\"px; width:\"+e+\"px;\";var af='<td role=\"gridcell\" '+O+' style=\"pointer-events: none; visibility: hidden; border-color: transparent; max-width:'+e+\"px; width:\"+e+\"px;\";if(al==K-1&&K==1){l+=\"border-right-color: transparent;\";af+=\"border-right-color: transparent;\"}var Y=false;if(R>0){if(G.level<R){Y=true}}if(!Y){if(ae.cellsalign!=\"left\"){if(ae.cellsalign===\"right\"){H+=\" \"+this.toTP(\"jqx-right-align\")}else{H+=\" \"+this.toTP(\"jqx-center-align\")}}}else{if(this.rtl){H+=\" \"+this.toTP(\"jqx-right-align\")}}if(this.rowinfo[G.uid]){if(this.rowinfo[G.uid].selected&&!ae.rowDetailscolumn){if(this.editKey!==G.uid){if(this.selectionMode!==\"none\"){H+=\" \"+this.toTP(\"jqx-grid-cell-selected\");H+=\" \"+this.toTP(\"jqx-fill-state-pressed\")}}}if(this.rowinfo[G.uid].locked){H+=\" \"+this.toTP(\"jqx-grid-cell-locked\")}}if(!(ae.hidden)){p+=aq+e;if(S==0){l+=\"border-left-width: 0px;\";af+=\"border-left-width: 0px;\"}S++}else{if(!Y){l+=\"display: none;\";af+=\"display: none;\";this._hiddencolumns=true}}if(R>0&&ao&&Y&&al>=R){l+=\"font-size: 1px; border-color: transparent;  color: transparent;\";af+=\"font-size: 1px; border-color: transparent; color: transparent;\"}if(ae.pinned){l+=\"pointer-events: auto;\";af+=\"pointer-events: auto;\"}if(!Y&&ae.rowDetailscolumn){if(this.rowinfo[G.uid]){if(!this.rowinfo[G.uid].nodetails){if(this.rowinfo[G.uid].expanded){if(!this.rtl){H+=\" \"+this.toTP(\"jqx-grid-group-expand\")}else{H+=\" \"+this.toTP(\"jqx-grid-group-expand-rtl\")}H+=\" \"+this.toTP(\"jqx-icon-arrow-down\")}else{if(!this.rtl){H+=\" \"+this.toTP(\"jqx-grid-group-collapse\");H+=\" \"+this.toTP(\"jqx-icon-arrow-right\")}else{H+=\" \"+this.toTP(\"jqx-grid-group-collapse-rtl\");H+=\" \"+this.toTP(\"jqx-icon-arrow-left\")}}}}else{if(!this.rtl){H+=\" \"+this.toTP(\"jqx-grid-group-collapse\");H+=\" \"+this.toTP(\"jqx-icon-arrow-right\")}else{H+=\" \"+this.toTP(\"jqx-grid-group-collapse-rtl\");H+=\" \"+this.toTP(\"jqx-icon-arrow-left\")}}}if(!this.autoRowHeight||(this.autoRowHeight&&!ae.autoCellHeight)){H+=\" \"+this.toTP(\"jqx-grid-cell-nowrap \")}var aj=ab._getcellvalue(ae,G);var f=ae.cellsFormat;if(R>0){if(G.level<R){aj=G.label;f=ab.getColumn(ab.groups[G.level]).cellsFormat}}if(f!=\"\"){if(b.jqx.dataFormat){if(b.jqx.dataFormat.isDate(aj)){aj=b.jqx.dataFormat.formatdate(aj,f,ab.gridlocalization)}else{if(b.jqx.dataFormat.isNumber(aj)||(!isNaN(parseFloat(aj))&&isFinite(aj))){aj=b.jqx.dataFormat.formatnumber(aj,f,ab.gridlocalization)}}}}if(!Y){if(ae.cellclassname!=\"\"&&ae.cellclassname){if(typeof ae.cellclassname==\"string\"){H+=\" \"+ae.cellclassname}else{var r=ae.cellclassname(am,ae.datafield,aj,G);if(r){H+=\" \"+r}}}if(ae.cellsRenderer!=\"\"&&ae.cellsRenderer){var d=q.indexOf(G);if(d===-1){if(G.originalRecord){var d=q.indexOf(G.originalRecord)}}aj=ae.cellsRenderer(d,ae.datafield,aj,G);if(aj&&(aj.indexOf(\"<jqx-\")>=0||aj.indexOf(\" ng-\")>=0)){x.push({rowKey:G.uid,row:d,column:ae.datafield,value:aj,columnIndex:al})}}}else{if(this.groupsRenderer){aj=this.groupsRenderer(aj,G,G.level)}}l+='\" class=\"'+H+'\">';l+=aj;l+=\"</td>\";af+='\" class=\"'+H+'\">';af+=aj;af+=\"</td>\";if(!ae.pinned){o+=l;if(g){E+=af}}else{E+=l;o+=l}if(R>0&&!ao){if(G.level<R){break}}}if(T==0){this.table[0].style.width=p+2+\"px\";T=p}o+=\"</tr>\";E+=\"</tr>\";B+=o;ar+=E;if(!this.rowinfo[G.uid]){this.rowinfo[G.uid]={group:Y,row:G,details:null,detailsHeight:200,initialized:false,expanded:false}}else{if(!(\"group\" in this.rowinfo[G.uid])){this.rowinfo[G.uid].group=Y}if(!(\"row\" in this.rowinfo[G.uid])){this.rowinfo[G.uid].row=G}if(!(\"details\" in this.rowinfo[G.uid])){this.rowinfo[G.uid].details=null}if(!(\"detailsHeight\" in this.rowinfo[G.uid])){this.rowinfo[G.uid].detailsHeight=200}if(!(\"initialized\" in this.rowinfo[G.uid])){this.rowinfo[G.uid].initialized=false}if(!(\"expanded\" in this.rowinfo[G.uid])){this.rowinfo[G.uid].expanded=false}}if(this.serverProcessing){this.rowinfo[G.uid].row=G}if(this.rowDetails){var F=this.rowinfo[G.uid].detailsHeight;if(this.rowinfo[G.uid]){if(this.rowinfo[G.uid].expanded){var ah='<tr data-role=\"row-details\"><td valign=\"top\" style=\"pointer-events: auto; overflow: hidden; min-height: '+F+\"px; max-height: \"+F+\"px; height: \"+F+'px; overflow: hidden; border-left: none; border-right: none;\" colspan=\"'+this.columns.records.length+'\" role=\"gridcell\"'}else{var ah='<tr data-role=\"row-details\" style=\"display: none;\"><td valign=\"top\" style=\"pointer-events: auto; overflow: hidden; min-height: '+F+\"px; max-height: \"+F+\"px; height: \"+F+'px; overflow: hidden; border-left: none; border-right: none;\" colspan=\"'+this.columns.records.length+'\" role=\"gridcell\"'}}else{var ah='<tr data-role=\"row-details\" style=\"display: none;\"><td valign=\"top\" style=\"pointer-events: auto; overflow: hidden; min-height: '+F+\"px; max-height: \"+F+\"px; height: \"+F+'px; overflow: hidden; border-left: none; border-right: none;\" colspan=\"'+this.columns.records.length+'\" role=\"gridcell\"'}var H=this.toTP(\"jqx-cell\")+\" \"+this.toTP(\"jqx-grid-cell\")+\" \"+this.toTP(\"jqx-item\");H+=\" \"+this.toTP(\"jqx-details\");H+=\" \"+this.toTP(\"jqx-reset\");ah+='\" class=\"'+H+'\"><div style=\"pointer-events: auto; overflow: hidden; min-height: '+F+\"px; max-height: \"+F+\"px; height: \"+F+'px;\"><div data-role=\"details\"></div></div></td></tr>';B+=ah;ar+=ah}}B+=\"</table>\";ar+=\"</table>\";if(g){if(ab.WinJS){MSApp.execUnsafeLocalFunction(function(){ab.table.html(ar+B)})}else{ab.table[0].innerHTML=ar+B}var W=this.table.find(\"#table\"+this.element.id);var X=this.table.find(\"#pinnedtable\"+this.element.id);X.css(\"float\",\"left\");X.css(\"pointer-events\",\"none\");W.css(\"float\",\"left\");X[0].style.position=\"absolute\";W[0].style.position=\"relative\";W[0].style.zIndex=V-10;X[0].style.zIndex=V+10;this._table=W;this._table[0].style.left=\"0px\";this._pinnedTable=X;this._pinnedTable[0].style.left=\"0px\";this._pinnedTable[0].style.width=T+\"px\";this._table[0].style.width=T+\"px\";if(this.rtl){if(T>parseInt(this.element.style.width)&&this._haspinned){this._pinnedTable[0].style.left=3-T+parseInt(this.element.style.width)+\"px\"}}if(this.rowDetails){for(var am=0;am<U;am++){var G=ai[am];var L=G.uid;if(this.rowinfo[L].details){var N=b(this._table.children()[1]).children((\"[data-key=\"+L+\"]\"));var Q=b(this._pinnedTable.children()[1]).children((\"[data-key=\"+L+\"]\"));if(N){var h=Q.next();var J=b(b(h).children().children());J.children().detach();J.append(this.rowinfo[G.uid].details)}}}}}else{if(ab.WinJS){MSApp.execUnsafeLocalFunction(function(){ab.table.html(B)})}else{ab.table[0].innerHTML=B}var ad=this.table.find(\"#table\"+this.element.id);this._table=ad;if(b.jqx.browser.msie&&b.jqx.browser.version<10){this._table[0].style.width=T+\"px\"}if(U===0){this._table[0].style.width=(2+T)+\"px\"}}if(U===0){this._table[0].style.tableLayout=\"auto\";if(this._pinnedTable){this._pinnedTable[0].style.tableLayout=\"auto\"}}if(x&&x.length>0){var an=this._table[0].rows;b.each(x,function(){var w=this.row;var au=this.rowKey;var j=this.column;var i=this.columnIndex;var t=ab._getuirow(au);if(t){var c=t[0].cells[i];if(b.jqx.angularCompile){b.jqx.angularCompile(c,\"<div>\"+c.innerHTML+\"</div>\")}}})}if(this.rendered){this.rendered()}},getcolumnindex:function(c){var d=this.getColumn(c);var e=this.columns.records.indexOf(d);return e},setcolumnindex:function(e,i,j){var h=this.getColumn(e);if(h.pinned){return}if(h.hidden){return}if(h.checkboxcolumn){return}if(h.grouped){return}var l=this.columns.records.indexOf(h);this.columns.records.splice(l,1);this.columns.records.splice(i,0,h);var f=0;var n=this.headerZIndex;this.columnsrow.children().detach();var k=this.toThemeProperty(\"jqx-grid-cell\");k+=\" \"+this.toThemeProperty(\"jqx-grid-cell-pinned\");k+=\" \"+this.toThemeProperty(\"jqx-item\");var m=this;var c=null;if(m.filterrow!=undefined){var c=b(m.filterrow.children()[0])}this.columnsrow[0].cells=[];var g=false;b.each(this.columns.records,function(p,s){var q=this.uielement;m.columnsrow.append(q);if(!m.rtl){q.css(\"z-index\",n--)}else{q.css(\"z-index\",n++)}var o=!m.rtl?250+n-1:250+n+1;if(this.pinned){q.css(\"z-index\",o)}var r=this.width;q.css(\"left\",f);m.columnsrow[0].cells[m.columnsrow[0].cells.length]=q[0];if(this.hidden){g=true}if(!(this.hidden&&this.hideable)){f+=r}});if(this.groupable){var d=this.groups.length;if(d>0){if(l-d>=0){l-=d;i-=d}}}if(this.rowDetails){if(l-1>=0){l--;i--}}if(this.selectionMode==\"checkbox\"){if(l-1>=0){l--;i--}}var h=this._columns[l];this._columns.splice(l,1);this._columns.splice(i,0,h);this.resize();this._rendercolumnGroups();this._raiseEvent(\"columnReordered\",{dataField:h.datafield,oldIndex:l,newIndex:i})},_pinnedColumnsLength:function(){var c=0;b.each(this.columns.records,function(){if(this.pinned){c++}if(this.grouped){c++}});if(this.rowDetails){c++}if(this.selectionMode==\"checkbox\"){c++}return c},_handlecolumnsReorder:function(){var g=this;var h=-1;var d=false;if(!g.columnsReorder){return}var f=\"mousemove.reorder\"+this.element.id;var e=\"mousedown.reorder\"+this.element.id;var i=\"mouseup.reorder\"+this.element.id;var c=false;if(this.isTouchDevice()&&this.touchmode!==true){c=true;f=b.jqx.mobile.getTouchEventName(\"touchmove\")+\".reorder\"+this.element.id;e=b.jqx.mobile.getTouchEventName(\"touchstart\")+\".reorder\"+this.element.id;i=b.jqx.mobile.getTouchEventName(\"touchend\")+\".reorder\"+this.element.id}this.removeHandler(b(document),f);this.addHandler(b(document),f,function(x){if(g.resizing){return true}if(g.reordercolumn!=null){var m=parseInt(x.pageX);var u=parseInt(x.pageY);if(c){var t=g.getTouches(x);var p=t[0];if(p!=undefined){m=parseInt(p.pageX);u=parseInt(p.pageY)}}var j=g.host.coord();var w=parseInt(j.left);var k=parseInt(j.top);if(g.dragmousedownoffset==undefined||g.dragmousedownoffset==null){g.dragmousedownoffset={left:0,top:0}}var B=parseInt(m)-parseInt(g.dragmousedownoffset.left);var s=parseInt(u)-parseInt(g.dragmousedownoffset.top);g.reordercolumn.css({left:B+\"px\",top:s+\"px\"});d=false;if(m>=w&&m<=w+g.host.width()){if(u>=k&&u<=k+g.host.height()){d=true}}h=-1;if(d){g.reordercolumnicon.removeClass(g.toThemeProperty(\"jqx-grid-dragcancel-icon\"));g.reordercolumnicon.addClass(g.toThemeProperty(\"jqx-grid-drag-icon\"));var n=g.columnsheader.coord();var q=n.top+g.columnsheader.height();if(g.columnsdropline!=null){if(u>=n.top&&u<=q){h=g._handlereordercolumnsdroplines(m);if(g.columnGroups){if(h!=-1){var l=0;l+=g._pinnedColumnsLength();var o=h.index;if(o>=l){var y=g.columns.records[o];if(y!=undefined){var v=g.columns.records.indexOf(g.getColumn(y.datafield));if(y.datafield==null){var v=g.columns.records.indexOf(g.getcolumnbytext(y.text))}var r=b.data(g.reordercolumn[0],\"reorderrecord\");var A=g.columns.records.indexOf(g.getColumn(r));var z=y;if(A<v){if(h.position==\"before\"){z=g.columns.records[v-1]}}if(z.columngroup!=g.getColumn(r).columngroup){g.columnsdropline.hide();return}}}}}}else{g.columnsdropline.fadeOut(\"slow\")}}}else{if(g.columnsdropline!=null){g.columnsdropline.fadeOut(\"slow\")}g.reordercolumnicon.removeClass(g.toThemeProperty(\"jqx-grid-drag-icon\"));g.reordercolumnicon.addClass(g.toThemeProperty(\"jqx-grid-dragcancel-icon\"))}if(x.preventDefault){x.preventDefault();x.stopPropagation()}if(c){x.preventDefault();x.stopPropagation();return false}}});this.columnsbounds=new Array();this.removeHandler(b(document),e);this.addHandler(b(document),e,function(k){if(g.resizing){return true}g.columnsbounds=new Array();var m=g.host.coord().left;var l=g.host.coord().top;if(g.showtoolbar){l+=g.toolbarHeight}if(g.filter){l+=g.filter.height()}var j=0;b.each(g.columns.records,function(o){var p=this;if(p.hidden){g.columnsbounds[g.columnsbounds.length]={top:l,column:p,left:m,width:0,height:2};return true}if(j==0){if(!g.rtl){m=parseInt(g.host.coord().left)-g.hScrollInstance.value}else{m=parseInt(g.host.coord().left)-g.hScrollInstance.max+g.hScrollInstance.value}}j++;var n=2+g.columnsHeight;if(g.columnshierarchy){l=b(p.uielement).coord().top;n=b(p.uielement).height()}g.columnsbounds[g.columnsbounds.length]={top:l,column:p,left:m,width:p.width,height:n};m+=p.width})});this.removeHandler(b(document),i);this.addHandler(b(document),i,function(j){if(g.resizing){return true}g.__drag=false;b(document.body).removeClass(\"jqx-disableselect\");var l=parseInt(j.pageX);var t=parseInt(j.pageY);if(c){var o=g.getTouches(j);var n=o[0];l=parseInt(n.pageX);t=parseInt(n.pageY)}var m=g.host.coord();var v=parseInt(m.left);var w=parseInt(m.top);if(g.showtoolbar){w+=g.toolbarHeight}g.columndragstarted=false;g.dragmousedown=null;if(g.reordercolumn!=null){var k=b.data(g.reordercolumn[0],\"reorderrecord\");var x=g.columns.records.indexOf(g.getColumn(k));g.reordercolumn.remove();g.reordercolumn=null;var p=0;p+=g._pinnedColumnsLength();if(k!=null){if(d){if(h!=-1){var q=h.index;if(q>=p){var s=g.columns.records[q];if(s!=undefined){var u=g.columns.records.indexOf(g.getColumn(s.datafield));if(s.datafield==null){var u=g.columns.records.indexOf(g.getcolumnbytext(s.text))}if(g.columnGroups){var r=s;if(x<u){if(h.position==\"before\"){r=g.columns.records[u-1]}}if(r.columngroup!=g.getColumn(k).columngroup){if(g.columnsdropline!=null){g.columnsdropline.remove();g.columnsdropline=null}return}}if(x<u){if(h.position==\"before\"){g.setcolumnindex(k,u-1)}else{g.setcolumnindex(k,u)}}else{if(x>u){g.setcolumnindex(k,u)}}}}}}if(g.columnsdropline!=null){g.columnsdropline.remove();g.columnsdropline=null}}}})},getcolumnbytext:function(d){var c=null;if(this.columns.records){b.each(this.columns.records,function(){if(this.text==d){c=this;return false}})}return c},_handlereordercolumnsdroplines:function(i){var c=this;var h=-1;var e=c._pinnedColumnsLength();var g=parseInt(c.host.coord().left);var d=g+c.host.width();var f=c.vScrollBar.css(\"visibility\")!=\"hidden\"?19:0;if(!c.rtl){f=0}b.each(c.columnsbounds,function(j){if(j>=e){if(this.width==0){return true}if(i<=this.left+this.width/2){if(i>d){c.columnsdropline.fadeOut();return false}c.columnsdropline.css(\"left\",f+parseInt(this.left)+\"px\");c.columnsdropline.css(\"top\",parseInt(this.top)+\"px\");c.columnsdropline.height(this.height);c.columnsdropline.fadeIn(\"slow\");h={index:j,position:\"before\"};return false}else{if(i>=this.left+this.width/2){if(this.left+this.width>d){c.columnsdropline.fadeOut();return false}c.columnsdropline.css(\"left\",f+1+this.left+this.width);c.columnsdropline.css(\"top\",this.top);c.columnsdropline.height(this.height);c.columnsdropline.fadeIn(\"slow\");h={index:j,position:\"after\"}}}}});return h},_createreordercolumn:function(d,f,i){var h=this;var g=f;if(h.reordercolumn){h.reordercolumn.remove()}if(h.columnsdropline){h.columnsdropline.remove()}h.reordercolumn=b(\"<div></div>\");var k=d.clone();h.reordercolumn.css(\"z-index\",999999);k.css(\"border-width\",\"1px\");k.css(\"opacity\",\"0.4\");var j=b(k.find(\".\"+h.toThemeProperty(\"jqx-grid-column-menubutton\")));if(j.length>0){j.css(\"display\",\"none\")}var c=b(k.find(\".jqx-icon-close\"));if(c.length>0){c.css(\"display\",\"none\")}h.reordercolumnicon=b('<div style=\"z-index: 9999; position: absolute; left: 100%; top: 50%; margin-left: -18px; margin-top: -7px;\"></div>');h.reordercolumnicon.addClass(h.toThemeProperty(\"jqx-grid-drag-icon\"));h.reordercolumn.css(\"float\",\"left\");h.reordercolumn.css(\"position\",\"absolute\");var e=h.host.coord();k.width(d.width()+16);h.reordercolumn.append(k);h.reordercolumn.height(d.height());h.reordercolumn.width(k.width());h.reordercolumn.append(h.reordercolumnicon);b(document.body).append(h.reordercolumn);k.css(\"margin-left\",0);k.css(\"left\",0);k.css(\"top\",0);h.reordercolumn.css(\"left\",g.left+h.dragmousedown.left);h.reordercolumn.css(\"top\",g.top+h.dragmousedown.top);if(i!=undefined&&i){h.columnsdropline=b('<div style=\"z-index: 9999; display: none; position: absolute;\"></div>');h.columnsdropline.width(2);h.columnsdropline.addClass(h.toThemeProperty(\"jqx-grid-group-drag-line\"));b(document.body).append(h.columnsdropline)}},_handlecolumnsdragreorder:function(d,g){if(this.reordercolumn){this.reordercolumn.remove()}if(this.columnsdropline){this.columnsdropline.remove()}this.dragmousedown=null;this.dragmousedownoffset=null;this.columndragstarted=false;this.reordercolumn=null;var h=this;var f;var c=false;if(this.isTouchDevice()&&this.touchmode!==true){c=true}var e=\"mousedown.drag\";var f=\"mousemove.drag\";if(c){e=b.jqx.mobile.getTouchEventName(\"touchstart\")+\".drag\";f=b.jqx.mobile.getTouchEventName(\"touchmove\")+\".drag\"}else{this.addHandler(g,\"dragstart\",function(i){return false})}this.addHandler(g,e,function(k){if(false==d.draggable){return true}if(h.resizing){return true}h.__drag=true;var j=k.pageX;var i=k.pageY;if(c){var l=h.getTouches(k);var n=l[0];j=n.pageX;i=n.pageY}h.dragmousedown={left:j,top:i};var m=b(k.target).coord();h.dragmousedownoffset={left:parseInt(j)-parseInt(m.left),top:parseInt(i-m.top)};if(k.preventDefault){k.preventDefault()}return true});this.addHandler(g,f,function(k){if(!d.draggable){return true}if(undefined==d.datafield){return true}if(d.pinned){return true}if(h.resizing){return true}if(h.dragmousedown){var j=k.pageX;var i=k.pageY;if(c){var m=h.getTouches(k);var o=m[0];if(o!=undefined){j=o.pageX;i=o.pageY}}f={left:j,top:i};if(!h.columndragstarted&&h.reordercolumn==null){var l=Math.abs(f.left-h.dragmousedown.left);var n=Math.abs(f.top-h.dragmousedown.top);if(l>3||n>3){h._createreordercolumn(g,f,true);b(document.body).addClass(\"jqx-disableselect\");b.data(h.reordercolumn[0],\"reorderrecord\",d.datafield)}}}})},getTouches:function(c){return b.jqx.mobile.getTouches(c)},_handlecolumnsResize:function(){var i=this;if(this.columnsResize){var k=false;if(i.isTouchDevice()){k=true}var g=\"mousemove.resize\"+this.element.id;var d=\"mousedown.resize\"+this.element.id;var e=\"mouseup.resize\"+this.element.id;if(k){var g=b.jqx.mobile.getTouchEventName(\"touchmove\")+\".resize\"+this.element.id;var d=b.jqx.mobile.getTouchEventName(\"touchstart\")+\".resize\"+this.element.id;var e=b.jqx.mobile.getTouchEventName(\"touchend\")+\".resize\"+this.element.id}this.removeHandler(b(document),g);this.addHandler(b(document),g,function(n){if(i.resizablecolumn!=null&&!i.disabled&&i.resizing){if(i.resizeline!=null){var s=i.resizablecolumn.columnelement;var p=i.host.coord();var v=parseInt(i.resizestartline.coord().left);var l=v-i._startcolumnwidth;var w=i.resizablecolumn.column.minwidth;if(w==\"auto\"){w=0}else{w=parseInt(w)}var m=i.resizablecolumn.column.maxwidth;if(m==\"auto\"){m=0}else{m=parseInt(m)}var q=n.pageX;if(k){var t=b.jqx.mobile.getTouches(n);var r=t[0];q=r.pageX}l+=w;var u=m>0?v+m:0;var o=m==0?true:i._startcolumnwidth+q-v<m?true:false;if(i.rtl){var o=true}if(o){if(!i.rtl){if(q>=p.left&&q>=l){if(u!=0&&n.pageX<u){i.resizeline.css(\"left\",q)}else{if(u==0){i.resizeline.css(\"left\",q)}}if(k){return false}}}else{if(q>=p.left&&q<=p.left+i.host.width()){i.resizeline.css(\"left\",q);if(k){return false}}}}}}if(!k&&i.resizablecolumn!=null){return false}});this.removeHandler(b(document),d);this.addHandler(b(document),d,function(m){if(i.resizablecolumn!=null&&!i.disabled){var l=i.resizablecolumn.columnelement;if(l.coord().top+l.height()+5<m.pageY){i.resizablecolumn=null;return}if(l.coord().top-5>m.pageY){i.resizablecolumn=null;return}i._startcolumnwidth=i.resizablecolumn.column.width;i.resizablecolumn.column._width=null;b(document.body).addClass(\"jqx-disableselect\");b(document.body).addClass(\"jqx-position-reset\");i._mouseDownResize=new Date();i.resizing=true;i._resizecolumn=i.resizablecolumn.column;i.resizeline=i.resizeline||b('<div style=\"position: absolute;\"></div>');i.resizestartline=i.resizestartline||b('<div style=\"position: absolute;\"></div>');i.resizebackground=i.resizebackground||b('<div style=\"position: absolute; left: 0; top: 0; background: #000;\"></div>');i.resizebackground.css(\"opacity\",0.01);i.resizebackground.css(\"cursor\",\"col-resize\");i.resizeline.css(\"cursor\",\"col-resize\");i.resizestartline.css(\"cursor\",\"col-resize\");i.resizeline.addClass(i.toThemeProperty(\"jqx-grid-column-resizeline\"));i.resizestartline.addClass(i.toThemeProperty(\"jqx-grid-column-resizestartline\"));b(document.body).append(i.resizeline);b(document.body).append(i.resizestartline);b(document.body).append(i.resizebackground);var n=i.resizablecolumn.columnelement.coord();i.resizebackground.css(\"left\",i.host.coord().left);i.resizebackground.css(\"top\",i.host.coord().top);i.resizebackground.width(i.host.width());i.resizebackground.height(i.host.height());i.resizebackground.css(\"z-index\",999999999);var o=function(q){if(!i.rtl){q.css(\"left\",parseInt(n.left)+i._startcolumnwidth)}else{q.css(\"left\",parseInt(n.left))}var s=0;var t=i.showtoolbar?i.toolbarHeight:0;s+=t;var v=i.showstatusbar?i.statusBarHeight:0;s+=v;var r=i.showAggregates?i.aggregatesHeight:0;s+=r;if(i.pageable&&i.pagerPosition!=\"bottom\"){s+=i.pagerHeight}if(i.filterable){s+=i.filter.height()}var p=0;if(i.pageable&&i.pagerPosition!=\"top\"){p=i.pagerHeight}var u=i.hScrollBar.css(\"visibility\")!=\"hidden\"?i.scrollBarSize:0;q.css(\"top\",parseInt(n.top));q.css(\"z-index\",9999999999);if(i.columnGroups){q.height(i.host.height()+i.resizablecolumn.columnelement.height()-p-s-u-i.columnGroupslevel*i.columnsHeight)}else{q.height(i.host.height()-p-s-u)}q.show(\"fast\")};o(i.resizeline);o(i.resizestartline);i.dragmousedown=null}});var f=function(){b(document.body).removeClass(\"jqx-disableselect\");b(document.body).removeClass(\"jqx-position-reset\");if(!i.resizing){return}i._mouseUpResize=new Date();var t=i._mouseUpResize-i._mouseDownResize;if(t<200){i.resizing=false;if(i._resizecolumn!=null&&i.resizeline!=null&&i.resizeline.css(\"display\")==\"block\"){i._resizecolumn=null;i.resizeline.hide();i.resizestartline.hide();i.resizebackground.remove()}return}i.resizing=false;if(i.disabled){return}var n=i.host.width();if(i.vScrollBar[0].style.visibility!=\"hidden\"){n-=20}if(n<0){n=0}if(i._resizecolumn!=null&&i.resizeline!=null&&i.resizeline.css(\"display\")==\"block\"){var u=parseInt(i.resizeline.css(\"left\"));var o=parseInt(i.resizestartline.css(\"left\"));var s=i._startcolumnwidth+u-o;if(i.rtl){var s=i._startcolumnwidth-u+o}var r=i._resizecolumn.width;i._resizecolumn.width=s;if(i._resizecolumn._percentagewidth!=undefined){i._resizecolumn._percentagewidth=(s/n)*100}for(var q=0;q<i._columns.length;q++){if(i._columns[q].datafield===i._resizecolumn.datafield){i._columns[q].width=i._resizecolumn.width;break}}var l=i.hScrollBar[0].style.visibility;var p=i._resizecolumn.displayfield;i._updatecolumnwidths();i.refresh();i._resizecolumn=null;i.resizeline.hide();i.resizestartline.hide();i.resizebackground.remove();i.resizablecolumn=null;i._raiseEvent(\"columnResized\",{dataField:p,oldWidth:r,newWidth:s})}else{i.resizablecolumn=null}};try{if(document.referrer!=\"\"||window.frameElement){var c=null;if(window.top!=null&&window.top!=window.self){if(window.parent&&document.referrer){c=document.referrer}}if(c&&c.indexOf(document.location.host)!=-1){var h=function(l){f()};if(window.top.document.addEventListener){window.top.document.addEventListener(\"mouseup\",h,false)}else{if(window.top.document.attachEvent){window.top.document.attachEvent(\"onmouseup\",h)}}}}}catch(j){}this.removeHandler(b(document),e);this.addHandler(b(document),e,function(m){var l=b.data(document.body,\"contextmenu\"+i.element.id);if(l!=null&&i.autoshowcolumnsmenubutton){return true}f()})}},_updatecolumnwidths:function(){var k=this.host.width();var c=k;if(this.vScrollBar.css(\"visibility\")!==\"hidden\"&&this.scrollBarSize>0){k-=parseInt(this.scrollBarSize)+6;c=k}var j=\"\";if(this.columns==undefined||this.columns.records==undefined){return}var i=this;var h=false;b.each(this.columns.records,function(l,m){if(!(this.hidden)){if(this.width.toString().indexOf(\"%\")!=-1||this._percentagewidth!=undefined){var m=0;var n=i.vScrollBar[0].style.visibility==\"hidden\"?0:i.scrollBarSize+5;if(i.scrollBarSize==0){n=0}m=parseFloat(this.width)*c/100;if(this._percentagewidth!=undefined){m=parseFloat(this._percentagewidth)*(c)/100}if(m<this.minwidth&&this.minwidth!=\"auto\"){m=this.minwidth}if(m>this.maxwidth&&this.maxwidth!=\"auto\"){m=this.maxwidth}k-=Math.round(m)}else{if(this.width!=\"auto\"&&!this._width){k-=this.width}else{j+=this.text}}}});var f=this.columnsheader.find(\"#columntable\"+this.element.id);if(f.length==0){return}var d=0;var g=f.find(\".jqx-grid-column-header\");var e=0;b.each(this.columns.records,function(n,q){var m=b(g[n]);var t=false;var s=this.width;var o=this.width;if(this.width.toString().indexOf(\"%\")!=-1||this._percentagewidth!=undefined){if(this._percentagewidth!=undefined){s=parseFloat(this._percentagewidth)*c/100}else{s=parseFloat(this.width)*c/100}s=Math.round(s);t=true}if(this.width!=\"auto\"&&!this._width&&!t){if(parseInt(m[0].style.width)!=this.width){m.width(this.width)}}else{if(t){if(s<this.minwidth&&this.minwidth!=\"auto\"){s=this.minwidth;this.width=s}if(s>this.maxwidth&&this.maxwidth!=\"auto\"){s=this.maxwidth;this.width=s}if(parseInt(m[0].style.width)!=s){m.width(s);this.width=s}}else{var l=Math.floor(k*(this.text.length/j.length));if(isNaN(l)){l=this.minwidth}var p=(k*(this.text.length/j.length))-l;d+=p;if(d>=1){d-=1;l++}if(d>=0.5&&n==i.columns.records.length-1){l++}if(l<0){var r=b(\"<span>\"+this.text+\"</span>\");b(document.body).append(r);l=10+r.width();r.remove()}if(l<this.minwidth){l=this.minwidth}if(l>this.maxwidth){l=this.maxwidth}this._width=\"auto\";this.width=l;m.width(this.width)}}if(parseInt(m[0].style.left)!=e){m.css(\"left\",e)}if(!(this.hidden)){e+=this.width}this._requirewidthupdate=true;if(o!==this.width){h=true}});this.columnsheader.width(2+e);f.width(this.columnsheader.width());this._resizecolumnGroups();if(h){this._renderrows()}if(this.showAggregates){this._refreshcolumnsaggregates()}},_rendercolumnheaders:function(){var r=this;if(this._updating){return}if(r.columns.records.length>r.headerZIndex){r.headerZIndex=r.columns.records.length+10}this._columnsbydatafield=new Array();this.columnsheader.find(\"#columntable\"+this.element.id).remove();var g=b('<div id=\"columntable'+this.element.id+'\" style=\"height: 100%; position: relative;\"></div>');g[0].cells=new Array();var l=0;var h=0;var s=\"\";var u=this.host.width();var f=u;var w=new Array();var t=new Array();b.each(this.columns.records,function(j,k){if(!(this.hidden)){if(this.width!=\"auto\"&&!this._width){if(this.width<this.minwidth&&this.minwidth!=\"auto\"){u-=this.minwidth}else{if(this.width>this.maxwidth&&this.maxwidth!=\"auto\"){u-=this.maxwidth}else{if(this.width.toString().indexOf(\"%\")!=-1){var k=0;k=parseFloat(this.width)*f/100;if(k<this.minwidth&&this.minwidth!=\"auto\"){k=this.minwidth}if(k>this.maxwidth&&this.maxwidth!=\"auto\"){k=this.maxwidth}u-=k}else{if(typeof this.width==\"string\"){this.width=parseInt(this.width)}u-=this.width}}}}else{s+=this.text}}if(this.pinned||this.grouped||this.checkboxcolumn){if(r._haspinned){this.pinned=true}w[w.length]=this}else{t[t.length]=this}});if(!this.rtl){for(var o=0;o<w.length;o++){this.columns.replace(o,w[o])}for(var m=0;m<t.length;m++){this.columns.replace(w.length+m,t[m])}}else{var e=0;w.reverse();for(var o=this.columns.records.length-1;o>=this.columns.records.length-w.length;o--){this.columns.replace(o,w[e++])}for(var m=0;m<t.length;m++){this.columns.replace(m,t[m])}}var v=this.headerZIndex;var d=0;var n=r.columnsHeight;var q=function(j,k){var i=r.columnGroupslevel*r.columnsHeight;i=i-(k.level*r.columnsHeight);return i};var c=0;b.each(this.columns.records,function(K,I){this.height=r.columnsHeight;if(r.columnGroups){if(r.columnGroups.length){this.height=q(this.datafield,this);n=this.height}}var N=r.toTP(\"jqx-grid-column-header\")+\" \"+r.toTP(\"jqx-widget-header\");if(r.rtl){N+=\" \"+r.toTP(\"jqx-grid-column-header-rtl\")}if(!r.enableBrowserSelection){N+=\" \"+r.toTP(\"jqx-disableselect\")}var L=!r.rtl?250+v-1:250+v+1;var G=!r.rtl?v--:v++;var x=b('<div role=\"columnheader\" style=\"z-index: '+G+';position: absolute; height: 100%;\" class=\"'+N+'\"><div style=\"height: 100%; width: 100%;\"></div></div>');if(r.rtl&&K===0){x[0].style.borderLeftColor=\"transparent\"}if(r.columnGroups){x[0].style.height=n+\"px\";x[0].style.bottom=\"0px\";if(this.pinned){x[0].style.zIndex=L}}this.uielement=x;this.element=x;if(this.classname!=\"\"&&this.classname){x.addClass(this.classname)}var C=this.width;var D=false;if(this.width===null){this.width=\"auto\"}if(this.width.toString().indexOf(\"%\")!=-1||this._percentagewidth!=undefined){if(this._percentagewidth!=undefined){C=parseFloat(this._percentagewidth)*f/100}else{C=parseFloat(this.width)*f/100}C=Math.round(C);D=true}if(this.width!=\"auto\"&&!this._width&&!D){if(C<this.minwidth&&this.minwidth!=\"auto\"){C=this.minwidth}if(C>this.maxwidth&&this.maxwidth!=\"auto\"){C=this.maxwidth}x[0].style.width=parseInt(C)+\"px\"}else{if(D){if(C<this.minwidth&&this.minwidth!=\"auto\"){C=this.minwidth}if(C>this.maxwidth&&this.maxwidth!=\"auto\"){C=this.maxwidth}if(this._percentagewidth==undefined||this.width.toString().indexOf(\"%\")!=-1){this._percentagewidth=this.width}x.width(C);this.width=C}else{var H=Math.floor(u*(this.text.length/s.length));var E=(u*(this.text.length/s.length))-H;c+=E;if(c>=1){c-=1;H++}if(c>=0.5&&K==r.columns.records.length-1){H++}if(isNaN(H)){H=this.minwidth}if(H<0){var F=b(\"<span>\"+this.text+\"</span>\");b(document.body).append(F);H=10+F.width();F.remove()}if(H<this.minwidth){H=this.minwidth}if(H>this.maxwidth){H=this.maxwidth}this._width=\"auto\";this.width=parseInt(H);C=this.width;x.width(this.width)}}if(this.hidden){x.css(\"display\",\"none\")}var k=b(x.children()[0]);g[0].cells[K]=x[0];var p=false;var J=false;var z=this.renderer!=null?this.renderer(this.text,this.align,n):r._rendercolumnheader(this.text,this.align,n,r);if(z==null){z=r._rendercolumnheader(this.text,this.align,n,r)}if(this.renderer!=null){z=b(z)}p=true;if(r.WinJS){MSApp.execUnsafeLocalFunction(function(){k.append(b(z))})}else{if(this.renderer){k.append(b(z))}else{if(z){k[0].innerHTML=z}}}if(z!=null){var B=b('<div class=\"iconscontainer\" style=\"height: '+n+'px; margin-left: -32px; display: block; position: absolute; left: 100%; top: 0%; width: 32px;\"><div class=\"filtericon '+r.toTP(\"jqx-widget-header\")+'\" style=\"height: '+n+'px; float: right; display: none; width: 16px;\"><div class=\"'+r.toTP(\"jqx-grid-column-filterbutton\")+'\" style=\"width: 100%; height:100%;\"></div></div><div class=\"sortasc '+r.toTP(\"jqx-widget-header\")+'\" style=\"height: '+n+'px; float: right; display: none; width: 16px;\"><div class=\"'+r.toTP(\"jqx-grid-column-sortascbutton\")+'\" style=\"width: 100%; height:100%;\"></div></div><div class=\"sortdesc '+r.toTP(\"jqx-widget-header\")+'\" style=\"height: '+n+'px; float: right; display: none; width: 16px;\"><div class=\"'+r.toTP(\"jqx-grid-column-sortdescbutton\")+'\" style=\"width: 100%; height:100%;\"></div></div></div>');k.append(B);var O=B.children();this.sortasc=O[1];this.sortdesc=O[2];this.filtericon=O[0];this.iconscontainer=B;if(r.rtl){B.css(\"margin-left\",\"0px\");B.css(\"left\",\"0px\");b(this.sortasc).css(\"float\",\"left\");b(this.filtericon).css(\"float\",\"left\");b(this.sortdesc).css(\"float\",\"left\")}}g.append(x);if(r.columnsReorder&&this.draggable&&r._handlecolumnsdragreorder){r._handlecolumnsdragreorder(this,x)}var M=this;r.addHandler(x,\"click\",function(i){if(M.checkboxcolumn){return true}if(r._togglesort){if(!r._loading){r._togglesort(M)}}i.preventDefault()});if(r.columnsResize&&!J){var y=false;var j=\"mousemove\";if(r.isTouchDevice()){y=true;j=b.jqx.mobile.getTouchEventName(\"touchstart\")}r.addHandler(x,j,function(P){if(!M.resizable){r.resizablecolumn=null;return true}var i=parseInt(P.pageX);var R=5;var U=parseInt(x.coord().left);if(r.hasTransform){U=b.jqx.utilities.getOffset(x).left}if(r._handlecolumnsResize){if(y){var Q=b.jqx.mobile.getTouches(P);var T=Q[0];i=T.pageX;R=40;if(i>=U+M.width-R){r.resizablecolumn={columnelement:x,column:M};x.css(\"cursor\",\"col-resize\")}else{x.css(\"cursor\",\"\");r.resizablecolumn=null}return true}var S=M.width;if(r.rtl){S=0}if(i>=U+S-R){if(i<=U+S+R){r.resizablecolumn={columnelement:x,column:M};x.css(\"cursor\",\"col-resize\");return false}else{x.css(\"cursor\",\"\");r.resizablecolumn=null}}else{x.css(\"cursor\",\"\");if(i<U+S-R){if(!M._animating&&!M._menuvisible){x.mouseenter()}}r.resizablecolumn=null}}})}x.css(\"left\",h);if(!(this.hidden)){h+=C}if(M.rendered){var A=M.rendered(b(k[0].firstChild),M.align,n);if(A&&B!=null){B.hide()}}});if(h>0){this.columnsheader.width(2+h)}else{this.columnsheader.width(h)}this.columnsrow=g;r.columnsheader.append(g);g.width(h);if(this._handlecolumnsdragdrop){this._handlecolumnsdragdrop()}if(this._handlecolumnsReorder){this._handlecolumnsReorder()}if(this._handlecolumnsResize){this._handlecolumnsResize()}if(this.columnGroups){this._rendercolumnGroups()}},_rendercolumnGroups:function(){if(!this.columnGroups){return}var o=0;for(var l=0;l<this.columns.records.length;l++){if(this.columns.records[l].pinned){o++}}var t=this.headerZIndex-o+this.columns.records.length;var n=this;var g=n.toTP(\"jqx-grid-column-header\")+\" \"+n.toTP(\"jqx-grid-columngroup-header\")+\" \"+n.toTP(\"jqx-widget-header\");if(n.rtl){g+=\" \"+n.toTP(\"jqx-grid-columngroup-header-rtl\")}var e=this.columnsheader.find(\"#columntable\"+this.element.id);e.find(\"jqx-grid-columngroup-header\").remove();for(var h=0;h<this.columnGroupslevel-1;h++){for(var l=0;l<this.columnGroups.length;l++){var q=this.columnGroups[l];var c=q.level;if(c!==h){continue}var p=c*this.columnsHeight;var d=99999;if(q.groups){var s=function(w){var v=0;for(var u=0;u<w.groups.length;u++){var i=w.groups[u];if(!i.groups){if(!i.hidden){v+=i.width;d=Math.min(parseInt(i.element[0].style.left),d)}}else{v+=s(i)}}return v};q.width=s(q);q.left=d;var r=this.columnsHeight;var m=t--;var f=b('<div role=\"columnheader\" style=\"z-index: '+m+';position: absolute;\" class=\"'+g+'\"></div>');var k=b(this._rendercolumnheader(q.text,q.align,this.columnsHeight,this));f.append(k);f[0].style.left=d+\"px\";if(d===0){f[0].style.borderLeftColor=\"transparent\"}f[0].style.top=p+\"px\";f[0].style.height=r+\"px\";f[0].style.width=-1+q.width+\"px\";e.append(f);q.element=f}}}},_resizecolumnGroups:function(){if(!this.columnGroups){return}for(var d=0;d<this.columnGroups.length;d++){var j=this.columnGroups[d];var k=j.level;var h=k*this.columnsHeight;var g=99999;if(j.groups){var f=function(n){var m=0;for(var l=0;l<n.groups.length;l++){var i=n.groups[l];if(!i.groups){if(!i.hidden){m+=i.width;g=Math.min(parseInt(i.element[0].style.left),g)}}else{m+=f(i)}}return m};j.width=f(j);j.left=g;var c=this.columnsHeight;var e=j.element;e[0].style.left=g+\"px\";e[0].style.top=h+\"px\";e[0].style.height=c+\"px\";e[0].style.width=-1+j.width+\"px\"}}},_removecolumnhandlers:function(f){var d=this;var c=b(f.element);if(c.length>0){d.removeHandler(c,\"mouseenter\");d.removeHandler(c,\"mouseleave\");var e=b(f.filtericon);d.removeHandler(e,\"mousedown\");d.removeHandler(e,\"click\");d.removeHandler(c,\"click\")}},_calculateaggregate:function(k,o,d,h){if(!k.datafield){return null}var e=k.aggregates;if(!e){e=o}if(e){var f=new Array();for(var n=0;n<e.length;n++){if(e[n]==\"count\"){continue}f[f.length]=k.cellsFormat}if(this.source&&this.source.getAggregatedData){if(h==undefined){h=this.getRows();if(this.dataViewRecords){h=this.dataViewRecords}}var s=h;var c=-1;if(this.treeGrid){var q=new Array();var r=function(u){for(var t=0;t<u.length;t++){if(u[t]==undefined){continue}if(c==-1){c=u[t].level}if(!u[t].aggregate){q.push(u[t])}if(!u[t].leaf&&u[t].records&&u[t].records.length>0){r(u[t].records)}}};r(h);h=q}if(this.treeGrid&&this.filterable&&this.dataview.filters.length>0){var p=new Array();for(var n=0;n<h.length;n++){if(h[n]&&h[n]._visible!==false){p.push(h[n])}}h=p;var l=new Array();for(var n=0;n<s.length;n++){if(s[n]&&s[n]._visible!==false){l.push(s[n])}}s=l}if(d==undefined||d==true){var m=this.source.getAggregatedData([{name:k.datafield,aggregates:e,formatStrings:f}],this.gridlocalization,h,c);if(this.treeGrid){var g=this.source._source.hierarchy&&this.source._source.hierarchy.groupingDataFields?this.source._source.hierarchy.groupingDataFields.length:0;if(g==0||c>=g){if(m){if(m[k.datafield].sum!=undefined||m[k.datafield].avg!=undefined){var j=this.source.getAggregatedData([{name:k.datafield,aggregates:e,formatStrings:f}],this.gridlocalization,s,c);if(m[k.datafield].sum!=undefined){m[k.datafield].sum=j[k.datafield].sum}if(m[k.datafield].avg!=undefined){m[k.datafield].avg=j[k.datafield].avg}}}}}return m}else{var m=this.source.getAggregatedData([{name:k.datafield,aggregates:e}],this.gridlocalization,h,c);if(this.treeGrid&&m){if(m[k.datafield].sum!=undefined||m[k.datafield].avg!=undefined){var g=this.source._source.hierarchy&&this.source._source.hierarchy.groupingDataFields?this.source._source.hierarchy.groupingDataFields.length:0;if(g==0||c>=g){var j=this.source.getAggregatedData([{name:k.datafield,aggregates:e}],this.gridlocalization,s,c);if(m[k.datafield].sum!=undefined){m[k.datafield].sum=j[k.datafield].sum}if(m[k.datafield].avg!=undefined){m[k.datafield].avg=j[k.datafield].avg}}}}return m}}}return null},getcolumnaggregateddata:function(d,h,i,e){var f=this.getColumn(d);if(!f){return\"\"}var k=(i==undefined||i==false)?false:i;if(h==null){return\"\"}var c=f.aggregates;f.aggregates=null;var j=this._calculateaggregate(f,h,k,e);var g={};if(j){g=j[d];f.aggregates=c}return g},_updatecolumnaggregates:function(e,h,c){var f=this;if(!h){c.children().remove();c.html(\"\");if(e.aggregatesRenderer){var g={};if(e.aggregates){g=this.getcolumnaggregateddata(e.datafield,e.aggregates)}var d=e.aggregatesRenderer({},e,c,null);c.html(d)}return}c.children().remove();c.html(\"\");if(e.aggregatesRenderer){if(h){var d=e.aggregatesRenderer(h[e.datafield],e,c,this.getcolumnaggregateddata(e.datafield,e.aggregates),\"aggregates\");c.html(d)}}else{b.each(h,function(){var j=this;for(g in j){var k=b('<div style=\"position: relative; margin: 4px; overflow: hidden;\"></div>');var i=g;i=f._getaggregatename(i);k.html(i+\":\"+j[g]);if(f.rtl){k.addClass(f.toThemeProperty(\"jqx-rtl\"))}c.append(k)}})}},_getaggregatetype:function(d){switch(d){case\"min\":case\"max\":case\"count\":case\"avg\":case\"product\":case\"var\":case\"varp\":case\"stdev\":case\"stdevp\":case\"sum\":return d}var c=d;for(var e in d){c=e;break}return c},_getaggregatename:function(d){var c=d;switch(d){case\"min\":c=\"Min\";break;case\"max\":c=\"Max\";break;case\"count\":c=\"Count\";break;case\"avg\":c=\"Avg\";break;case\"product\":c=\"Product\";break;case\"var\":c=\"Var\";break;case\"stdevp\":c=\"StDevP\";break;case\"stdev\":c=\"StDev\";break;case\"varp\":c=\"VarP\";case\"sum\":c=\"Sum\";break}if(d===c&&typeof(c)!=\"string\"){for(var e in d){c=e;break}}return c},_updatecolumnsaggregates:function(){var g=this.getRows();if(this.dataViewRecords){g=this.dataViewRecords}var c=this.columns.records.length;if(undefined!=this.aggregates[0].cells){for(var f=0;f<c;f++){var h=b(this.aggregates[0].cells[f]);var e=this.columns.records[f];var d=this._calculateaggregate(e,null,true,g);this._updatecolumnaggregates(e,d,h)}}},_refreshcolumnsaggregates:function(){var c=this.columns.records.length;if(undefined!=this.aggregates[0].cells){var f=0;for(var e=0;e<c;e++){var g=b(this.aggregates[0].cells[e]);var d=this.columns.records[e];if(g){g.width(d.width);g[0].style.left=f+\"px\";if(!(d.hidden&&d.hideable)){f+=d.width}else{g.css(\"display\",\"none\")}}}}},_updateaggregates:function(){var c=b('<div style=\"position: relative;\" id=\"statusrow'+this.element.id+'\"></div>');var f=0;var m=this.columns.records.length;var l=this.toThemeProperty(\"jqx-grid-cell\");if(this.rtl){l+=\" \"+this.toThemeProperty(\"jqx-grid-cell-rtl\");f=0;c.css(\"border-left-width\",\"0px\");this.aggregates.css(\"border-left-color\",\"transparent\")}l+=\" \"+this.toThemeProperty(\"jqx-grid-cell-pinned\");var n=m+10;var o=new Array();this.aggregates[0].cells=o;for(var h=0;h<m;h++){var g=this.columns.records[h];var i=this._calculateaggregate(g);var d=g.width;if(d<g.minwidth){d=g.minwidth}if(d>g.maxwidth){d=g.maxwidth}var e=l;if(g.cellsalign){e+=\" \"+this.toThemeProperty(\"jqx-\"+g.cellsalign+\"-align\")}var k=b('<div style=\"overflow: hidden; position: absolute; height: 100%;\" class=\"'+e+'\"></div>');c.append(k);k.css(\"left\",f);if(!this.rtl){k.css(\"z-index\",n--)}else{k.css(\"z-index\",n++);if(h==0){k.css(\"border-left-width\",\"0px\")}}k.width(d);k[0].style.left=f+\"px\";if(!(g.hidden&&g.hideable)){f+=d}else{k.css(\"display\",\"none\")}o[o.length]=k[0];this._updatecolumnaggregates(g,i,k)}if(b.jqx.browser.msie&&b.jqx.browser.version<8){c.css(\"z-index\",n--)}c.width(parseInt(f)+2);c.height(this.aggregatesHeight);this.aggregates.children().remove();this.aggregates.append(c);this.aggregates.removeClass(this.toThemeProperty(\"jqx-widget-header\"));this.aggregates.addClass(l);this.aggregates.css(\"border-bottom-color\",\"transparent\");this.aggregates.css(\"border-top-width\",\"1px\");if(this.rtl&&this.hScrollBar.css(\"visibility\")!=\"hidden\"){this._renderhorizontalscroll()}},destroy:function(){var h=this;if(h.columns&&h.columns.records){for(var f=0;f<h.columns.records.length;f++){h._removecolumnhandlers(h.columns.records[f])}}h.removeHandler(b(document),\"mouseup.pagerbuttonstop\");h.removeHandler(b(document),\"mouseup.pagerbuttonsbottom\");h.removeHandler(h.content,\"scroll\");h.removeHandler(h.content,\"mousedown\");h.removeHandler(b(document),\"mousedown.gridedit\"+h.element.id);var g=\"mousemove.resize\"+h.element.id;var c=\"mousedown.resize\"+h.element.id;var e=\"mouseup.resize\"+h.element.id;h.removeHandler(b(document),g);h.removeHandler(b(document),c);h.removeHandler(b(document),e);var g=\"mousemove.reorder\"+h.element.id;var c=\"mousedown.reorder\"+h.element.id;var e=\"mouseup.reorder\"+h.element.id;h.removeHandler(b(document),g);h.removeHandler(b(document),c);h.removeHandler(b(document),e);if(h.filterable){if(h.filterrow){for(var f=0;f<h.filterrow[0].cells.length;f++){var k=h.filterrow[0].cells[f];var j=b(k).find(\".filterconditions\");var d=h.columns.records[f];if(j.length>0){j.jqxDropDownList(\"destroy\")}}}if(h.filtercolumnsList){h.filtercolumnsList.jqxDropDownList(\"destroy\")}}if(h.pageable){if(h.pagershowrowscombotop&&h.pagershowrowscombotop.jqxDropDownList){h.pagershowrowscombotop.jqxDropDownList(\"destroy\")}if(h.pagershowrowscombobottom&&h.pagershowrowscombobottom.jqxDropDownList){h.pagershowrowscombobottom.jqxDropDownList(\"destroy\")}var l=h.pagerbuttonsbottom.find(\"a\");h.removeHandler(l,\"click\");h.removeHandler(l,\"mouseenter\");h.removeHandler(l,\"mouseleave\");l.remove();var l=h.pagerbuttonstop.find(\"a\");h.removeHandler(l,\"click\");h.removeHandler(l,\"mouseenter\");h.removeHandler(l,\"mouseleave\");l.remove();if(h.pagernexttop){h.pagernexttop.jqxButton(\"destroy\");h.pagerprevioustop.jqxButton(\"destroy\");h.pagernextbottom.jqxButton(\"destroy\");h.pagerpreviousbottom.jqxButton(\"destroy\");h.pagerfirsttop.jqxButton(\"destroy\");h.pagerfirstbottom.jqxButton(\"destroy\");h.pagerlasttop.jqxButton(\"destroy\");h.pagerlastbottom.jqxButton(\"destroy\")}}h._removeHandlers();h.vScrollBar.jqxScrollBar(\"destroy\");h.hScrollBar.jqxScrollBar(\"destroy\");delete h.vScrollBar;delete h.hScrollBar;delete h._mousewheelfunc;b.jqx.utilities.resize(h.host,null,true);h.host.remove()},propertiesChangedHandler:function(c,d,e){if(e.width&&e.height&&Object.keys(e).length==2){c.refresh()}},propertyChangedHandler:function(e,l,d,k){if(this.isInitialized==undefined||this.isInitialized==false){return}if(e.batchUpdate&&e.batchUpdate.width&&e.batchUpdate.height&&Object.keys(e.batchUpdate).length==2){return}if(k!==d){if(l==\"filterable\"){e._render()}else{if(l===\"height\"){e.host.height(e.height);e.host.width(e.width);e._updatesize(false,true)}else{if(l===\"width\"){e.host.height(e.height);e.host.width(e.width);e._updatesize(true,false)}else{if(l===\"source\"){e.updateBoundData()}else{if(l===\"columnGroups\"){e._render()}else{if(l===\"columns\"){e._columns=null;e._render()}else{if(l===\"rtl\"){e.content.css(\"left\",\"\");e.columns=e._columns;e.vScrollBar.jqxScrollBar({rtl:k});e.hScrollBar.jqxScrollBar({rtl:k});e._render()}else{if(l===\"pagerMode\"){e.pagerMode=k;e._initpager()}else{if(l==\"pageSizeOptions\"){e._initpager();var j=false;for(var f=0;f<k.length;f++){if(parseInt(k[f])==e.pageSize){j=true;break}}if(!j){b.jqx.set(e,[{pageSize:k[0]}])}}else{if(l==\"pageSize\"){var g=e.dataview.pagenum*e.dataview.pagesize;e.dataview.pagesize=e.pageSize;var h=Math.floor(g/e.dataview.pagesize);if(h!==e.dataview.pagenum||parseInt(k)!==parseInt(d)){e._raiseEvent(\"pageSizeChanged\",{pagenum:k,oldpageSize:d,pageSize:e.dataview.pagesize});var m=e.goToPage(h);if(!m){if(!e.serverProcessing){e.refresh()}else{e.updateBoundData(\"pager\")}}}}else{if(l===\"pagerPosition\"){e.refresh()}else{if(l===\"selectionMode\"){e.selectionMode=k.toLowerCase()}else{if(l==\"touchmode\"){e.touchDevice=null;e._removeHandlers();e.touchDevice=null;e.vScrollBar.jqxScrollBar({touchMode:k});e.hScrollBar.jqxScrollBar({touchMode:k});e._updateTouchScrolling();e._arrange();e._updatecolumnwidths();e._renderrows();e._addHandlers()}else{if(l==\"enableHover\"){return}else{if(l==\"disabled\"){if(k){e.host.addClass(this.toThemeProperty(\"jqx-fill-state-disabled\"))}else{e.host.removeClass(this.toThemeProperty(\"jqx-fill-state-disabled\"))}if(e.pageable){if(e.pagernexttop){e.pagernexttop.jqxButton({disabled:k});e.pagerprevioustop.jqxButton({disabled:k});e.pagernextbottom.jqxButton({disabled:k});e.pagerpreviousbottom.jqxButton({disabled:k});e.pagerfirsttop.jqxButton({disabled:k});e.pagerfirstbottom.jqxButton({disabled:k});e.pagerlasttop.jqxButton({disabled:k});e.pagerlastbottom.jqxButton({disabled:k});if(e.pagershowrowscombotop.jqxDropDownList){if(e.pagerMode==\"advanced\"){e.pagershowrowscombotop.jqxDropDownList({disabled:false});e.pagershowrowscombobottom.jqxDropDownList({disabled:false})}}}e.host.find(\".jqx-grid-pager-number\").css(\"cursor\",k?\"default\":\"pointer\")}e.host.find(\".jqx-grid-group-collapse\").css(\"cursor\",k?\"default\":\"pointer\");e.host.find(\".jqx-grid-group-expand\").css(\"cursor\",k?\"default\":\"pointer\")}else{if(l==\"columnsHeight\"){e._render()}else{if(l==\"theme\"){b.jqx.utilities.setTheme(d,k,e.host);e.vScrollBar.jqxScrollBar({theme:e.theme});e.hScrollBar.jqxScrollBar({theme:e.theme});if(e.pageable&&e.pagernexttop){e.pagernexttop.jqxButton({theme:e.theme});e.pagerprevioustop.jqxButton({theme:e.theme});e.pagernextbottom.jqxButton({theme:e.theme});e.pagerpreviousbottom.jqxButton({theme:e.theme});e.pagerfirsttop.jqxButton({theme:e.theme});e.pagerfirstbottom.jqxButton({theme:e.theme});e.pagerlasttop.jqxButton({theme:e.theme});e.pagerlastbottom.jqxButton({theme:e.theme});if(e.pagershowrowscombotop.jqxDropDownList){if(e.pagerMode==\"advanced\"){e.pagershowrowscombotop.jqxDropDownList({theme:e.theme});e.pagershowrowscombobottom.jqxDropDownList({theme:e.theme})}}}if(e.filterable){var c=b(\".filterconditions\");if(c.length>0){c.jqxDropDownList({theme:e.theme})}if(e.filtercolumnsList){e.filtercolumnsList.jqxDropDownList({theme:e.theme})}}e.refresh()}else{e.refresh()}}}}}}}}}}}}}}}}}}},_rendercolumnheader:function(f,g,c,d){var e=\"4px\";if(d.columnGroups){e=(c/2-this._columnheight/2);if(e<0){e=4}e+=\"px\"}else{if(this.columnsHeight!=25){e=(this.columnsHeight/2-this._columnheight/2);if(e<0){e=4}e+=\"px\"}}return'<div style=\"overflow: hidden; text-overflow: ellipsis; text-align: '+g+\"; margin-left: 4px; margin-right: 4px; margin-bottom: \"+e+\"; margin-top: \"+e+';\"><span style=\"text-overflow: ellipsis; cursor: default;\">'+f+\"</span></div>\"}});function a(c,d){this.owner=c;this.datafield=null;this.displayfield=null;this.text=\"\";this.sortable=true;this.editable=true;this.hidden=false;this.hideable=true;this.groupable=true;this.renderer=null;this.cellsRenderer=null;this.columntype=null;this.cellsFormat=\"\";this.align=\"left\";this.cellsalign=\"left\";this.width=\"auto\";this.minwidth=25;this.maxwidth=\"auto\";this.pinned=false;this.visibleindex=-1;this.filterable=true;this.filter=null;this.resizable=true;this.draggable=true;this.initeditor=null;this.createeditor=null;this.destroyeditor=null;this.geteditorvalue=null;this.autoCellHeight=true;this.validation=null;this.classname=\"\";this.cellclassname=\"\";this.aggregates=null;this.aggregatesRenderer=null;this.rendered=null;this.exportable=true;this.nullable=true;this.columngroup=null;this.columntype=\"textbox\";this.getcolumnproperties=function(){return{nullable:this.nullable,sortable:this.sortable,hidden:this.hidden,groupable:this.groupable,width:this.width,align:this.align,editable:this.editable,minwidth:this.minwidth,maxwidth:this.maxwidth,resizable:this.resizable,datafield:this.datafield,text:this.text,exportable:this.exportable,cellsalign:this.cellsalign,pinned:this.pinned,cellsFormat:this.cellsFormat,columntype:this.columntype,classname:this.classname,cellclassname:this.cellclassname,menu:this.menu}},this.setproperty=function(e,f){if(this[e]){var g=this[e];this[e]=f;this.owner._columnPropertyChanged(this,e,f,g)}else{if(this[e.toLowerCase()]){var g=this[e.toLowerCase()];this[e.toLowerCase()]=f;this.owner._columnPropertyChanged(this,e.toLowerCase(),f,g)}}};this._initfields=function(f){if(f!=null){var e=this;if(b.jqx.hasProperty(f,\"dataField\")){this.datafield=b.jqx.get(f,\"dataField\")}if(b.jqx.hasProperty(f,\"displayField\")){this.displayfield=b.jqx.get(f,\"displayField\")}else{this.displayfield=this.datafield}if(b.jqx.hasProperty(f,\"columnType\")){this.columntype=b.jqx.get(f,\"columnType\")}if(b.jqx.hasProperty(f,\"validation\")){this.validation=b.jqx.get(f,\"validation\")}if(b.jqx.hasProperty(f,\"autoCellHeight\")){this.autoCellHeight=b.jqx.get(f,\"autoCellHeight\")}if(b.jqx.hasProperty(f,\"text\")){this.text=b.jqx.get(f,\"text\")}else{this.text=this.displayfield}if(b.jqx.hasProperty(f,\"sortable\")){this.sortable=b.jqx.get(f,\"sortable\")}if(b.jqx.hasProperty(f,\"hidden\")){this.hidden=b.jqx.get(f,\"hidden\")}if(b.jqx.hasProperty(f,\"groupable\")){this.groupable=b.jqx.get(f,\"groupable\")}if(b.jqx.hasProperty(f,\"renderer\")){this.renderer=b.jqx.get(f,\"renderer\")}if(b.jqx.hasProperty(f,\"align\")){this.align=b.jqx.get(f,\"align\")}if(b.jqx.hasProperty(f,\"cellsAlign\")){this.cellsalign=b.jqx.get(f,\"cellsAlign\")}if(b.jqx.hasProperty(f,\"cellsFormat\")){this.cellsFormat=b.jqx.get(f,\"cellsFormat\")}if(b.jqx.hasProperty(f,\"width\")){this.width=b.jqx.get(f,\"width\")}if(b.jqx.hasProperty(f,\"minWidth\")){this.minwidth=b.jqx.get(f,\"minWidth\")}if(b.jqx.hasProperty(f,\"maxWidth\")){this.maxwidth=b.jqx.get(f,\"maxWidth\")}if(b.jqx.hasProperty(f,\"cellsRenderer\")){this.cellsRenderer=b.jqx.get(f,\"cellsRenderer\")}if(b.jqx.hasProperty(f,\"columnType\")){this.columntype=b.jqx.get(f,\"columnType\")}if(b.jqx.hasProperty(f,\"pinned\")){this.pinned=b.jqx.get(f,\"pinned\")}if(b.jqx.hasProperty(f,\"filterable\")){this.filterable=b.jqx.get(f,\"filterable\")}if(b.jqx.hasProperty(f,\"filter\")){this.filter=b.jqx.get(f,\"filter\")}if(b.jqx.hasProperty(f,\"resizable\")){this.resizable=b.jqx.get(f,\"resizable\")}if(b.jqx.hasProperty(f,\"draggable\")){this.draggable=b.jqx.get(f,\"draggable\")}if(b.jqx.hasProperty(f,\"editable\")){this.editable=b.jqx.get(f,\"editable\")}if(b.jqx.hasProperty(f,\"initEditor\")){this.initeditor=b.jqx.get(f,\"initEditor\")}if(b.jqx.hasProperty(f,\"createEditor\")){this.createeditor=b.jqx.get(f,\"createEditor\")}if(b.jqx.hasProperty(f,\"destroyEditor\")){this.destroyeditor=b.jqx.get(f,\"destroyEditor\")}if(b.jqx.hasProperty(f,\"getEditorValue\")){this.geteditorvalue=b.jqx.get(f,\"getEditorValue\")}if(b.jqx.hasProperty(f,\"className\")){this.classname=b.jqx.get(f,\"className\")}if(b.jqx.hasProperty(f,\"cellClassName\")){this.cellclassname=b.jqx.get(f,\"cellClassName\")}if(b.jqx.hasProperty(f,\"aggregates\")){this.aggregates=b.jqx.get(f,\"aggregates\")}if(b.jqx.hasProperty(f,\"aggregatesRenderer\")){this.aggregatesRenderer=b.jqx.get(f,\"aggregatesRenderer\")}if(b.jqx.hasProperty(f,\"rendered\")){this.rendered=b.jqx.get(f,\"rendered\")}if(b.jqx.hasProperty(f,\"exportable\")){this.exportable=b.jqx.get(f,\"exportable\")}if(b.jqx.hasProperty(f,\"nullable\")){this.nullable=b.jqx.get(f,\"nullable\")}if(b.jqx.hasProperty(f,\"columnGroup\")){this.columngroup=b.jqx.get(f,\"columnGroup\")}if(!f instanceof String&&!(typeof f==\"string\")){for(var g in f){if(!e.hasOwnProperty(g)){if(!e.hasOwnProperty(g.toLowerCase())){c.host.remove();throw new Error(\"jqxDataTable: Invalid property name - \"+g+\".\")}}}}}};this._initfields(d);return this}b.jqx.dataCollection=function(c){this.records=new Array();this.owner=c;this.updating=false;this.beginUpdate=function(){this.updating=true};this.resumeupdate=function(){this.updating=false};this.clear=function(){this.records=new Array()};this.replace=function(e,d){this.records[e]=d};this.isempty=function(d){if(this.records[d]==undefined){return true}return false};this.initialize=function(d){if(d<1){d=1}this.records[d-1]=-1};this.length=function(){return this.records.length};this.indexOf=function(d){return this.records.indexOf(d)};this.add=function(d){if(d==null){return false}this.records[this.records.length]=d;return true};this.insertAt=function(e,d){if(e==null||e==undefined){return false}if(d==null){return false}if(e>=0){if(e<this.records.length){this.records.splice(e,0,d);return true}else{return this.add(d)}}return false};this.remove=function(e){if(e==null||e==undefined){return false}var d=this.records.indexOf(e);if(d!=-1){this.records.splice(d,1);return true}return false};this.removeAt=function(e){if(e==null||e==undefined){return false}if(e<0){return false}if(e<this.records.length){var d=this.records[e];this.records.splice(e,1);return true}return false};return this};b.jqx.dataView=function(){this.that=this;this.grid=null;this.records=[];this.rows=[];this.columns=[];this.filters=new Array();this.pagesize=0;this.pagenum=0;this.source=null;this.databind=function(y,p){var w=y._source?true:false;var g=null;this._sortData=null;this._sortHierarchyData=null;if(w){g=y;y=y._source}else{g=new b.jqx.dataAdapter(y,{autoBind:false})}var e=function(m){g.recordids=[];g.records=new Array();g.cachedrecords=new Array();g.originaldata=new Array();g._options.totalrecords=m.totalrecords;g._options.originaldata=m.originaldata;g._options.recordids=m.recordids;g._options.cachedrecords=new Array();g._options.pagenum=m.pagenum;g._options.pageable=m.pageable;if(y.type!=undefined){g._options.type=y.type}if(y.formatdata!=undefined){g._options.formatData=y.formatdata}if(y.contenttype!=undefined){g._options.contentType=y.contenttype}if(y.async!=undefined){g._options.async=y.async}if(y.updaterow!=undefined){g._options.updaterow=y.updaterow}if(y.addrow!=undefined){g._options.addrow=y.addrow}if(y.deleterow!=undefined){g._options.deleterow=y.deleterow}if(m.pagesize==0){m.pagesize=10}g._options.pagesize=m.pagesize};var B=function(m){m.originaldata=g.originaldata;m.records=g.records;m.hierarchy=g.hierarchy;if(!m.grid.serverProcessing){m._sortData=null;m._sortfield=null;m._filteredData=null;m._sortHierarchyData=null}if(!m.hierarchy){m.hierarchy=new Array();g.hierarchy=new Array()}if(g._source.totalrecords){m.totalrecords=g._source.totalrecords}else{if(g._source.totalRecords){m.totalrecords=g._source.totalRecords}else{if(m.hierarchy.length!==0){m.totalrecords=m.hierarchy.length}else{m.totalrecords=m.records.length}}}m.cachedrecords=g.cachedrecords};e(this);this.source=y;if(p!==undefined){var k=p}var h=this;switch(y.datatype){case\"local\":case\"array\":default:if(y.localdata==null){y.localdata=[]}if(y.localdata!=null){g.unbindBindingUpdate(h.grid.element.id);if((!h.grid.autoBind&&h.grid.isInitialized)||h.grid.autoBind){g.dataBind()}var n=function(){B(h);h.update()};n();g.bindBindingUpdate(h.grid.element.id,n)}break;case\"json\":case\"jsonp\":case\"xml\":case\"xhtml\":case\"script\":case\"text\":case\"csv\":case\"tab\":if(y.localdata!=null){g.unbindBindingUpdate(h.grid.element.id);if((!h.grid.autoBind&&h.grid.isInitialized)||h.grid.autoBind){g.dataBind()}var n=function(m){B(h);h.update()};n();g.bindBindingUpdate(h.grid.element.id,n);return}var D={};var C=[];var v=0;var E={};for(var j=0;j<this.filters.length;j++){var f=this.filters[j].datafield;var l=this.filters[j].filter;if(!l.getfilters){continue}var i=l.getfilters();E[f+\"operator\"]=l.operator;for(var A=0;A<i.length;A++){i[A].datafield=f;var u=i[A].value;if(i[A].type==\"datefilter\"){if(i[A].value&&i[A].value.toLocaleString){var c=this.grid.getColumn(i[A].datafield);if(c&&c.cellsformat){var z=this.grid.source.formatDate(i[A].value,c.cellsformat,this.grid.gridlocalization);if(z){E[\"filtervalue\"+v]=z}else{E[\"filtervalue\"+v]=i[A].value.toLocaleString()}}else{E[\"filtervalue\"+v]=u.toString()}}else{E[\"filtervalue\"+v]=u.toString()}}else{E[\"filtervalue\"+v]=u.toString();if(i[A].data){E[\"filterid\"+v]=i[A].data.toString()}if(i[A].id){E[\"filterid\"+v]=i[A].id.toString()}}E[\"filtercondition\"+v]=i[A].condition;E[\"filteroperator\"+v]=i[A].operator;E[\"filterdatafield\"+v]=f;var t={label:u.toString()};if(i[A].data){t.value=i[A].data.toString()}if(i[A].id){t.value=i[A].id.toString()}else{t.value=u.toString()}t.condition=i[A].condition;t.operator=i[A].operator==0?\"and\":\"or\";t.field=f;t.type=i[A].type;var d=false;if(C.length>0){for(var s=0;s<C.length;s++){var r=C[s];if(r.field==f){r.filters.push(t);d=true;break}}}if(!d){C.push({field:f,filters:[]});C[C.length-1].filters.push(t)}v++}}E.filterGroups=C;E.filterslength=v;b.extend(E,{sortdatafield:h.sortfield,sortorder:h.sortfielddirection,pagenum:h.pagenum,pagesize:h.grid.pageSize});var F=g._options.data;if(g._options.data){b.extend(g._options.data,E)}else{if(y.data){b.extend(E,y.data)}g._options.data=E}var n=function(){var o=b.jqx.browser.msie&&b.jqx.browser.version<9;var q=function(){B(h);h.update()};if(o){try{q()}catch(m){}}else{q()}};g.unbindDownloadComplete(h.grid.element.id);g.bindDownloadComplete(h.grid.element.id,n);g._source.loaderror=function(q,m,o){n()};if((!h.grid.autoBind&&h.grid.isInitialized)||h.grid.autoBind){g.dataBind()}g._options.data=F}};this.addFilter=function(f,e){this._sortData=null;this._sortHierarchyData=null;var d=-1;for(var c=0;c<this.filters.length;c++){if(this.filters[c].datafield==f){d=c;break}}if(d==-1){this.filters[this.filters.length]={filter:e,datafield:f}}else{this.filters[d]={filter:e,datafield:f}}};this.removeFilter=function(d){this._sortData=null;this._sortHierarchyData=null;for(var c=0;c<this.filters.length;c++){if(this.filters[c].datafield==d){this.filters.splice(c,1);break}}};this.sortBy=function(e,c){var d=this;if(c==null){this.sortfield=\"\";this.sortfielddirection=\"\";return}if(c==undefined){c=true}if(c==\"a\"||c==\"asc\"||c==\"ascending\"||c==true){c=true}else{c=false}if(e==\"constructor\"){e=\"\"}this.sortfield=e;this.sortfielddirection=c?\"asc\":\"desc\"};this._sort=function(d){if(!this.sortfield||!this.sortfielddirection){return d}if(this._sortfield==this.sortfield&&this._sortfielddirection==this.sortfielddirection&&this._sortData){return this._sortData}var g=this;var j=Object.prototype.toString;Object.prototype.toString=(typeof g.sortfield==\"function\")?g.sortfield:function(){return this[g.sortfield]};var f=\"\";if(this.source.datafields){b.each(this.source.datafields,function(){if(this.name==g.sortfield){if(this.type){f=this.type}return false}})}var c=new Array();for(var e=0;e<d.length;e++){c.push(b.extend({originalRecord:d[e]},d[e]))}this._sortfield=this.sortfield;this._sortfielddirection=this.sortfielddirection;if(this.sortfielddirection===\"desc\"){var h=c.sort(function(k,i){return g._compare(k,i,f)}).reverse()}else{var h=c.sort(function(k,i){return g._compare(k,i,f)})}this._sortData=h;Object.prototype.toString=j;return h};this._compare=function(d,c,f){var d=d;var c=c;if(d===undefined){d=null}if(c===undefined){c=null}if(d===null&&c===null){return 0}if(d===null&&c!==null){return 1}if(d!==null&&c===null){return 1}d=d.toString();c=c.toString();if(b.jqx.dataFormat){if(f&&f!=\"\"){switch(f){case\"number\":case\"int\":case\"float\":if(d<c){return -1}if(d>c){return 1}return 0;case\"date\":case\"time\":if(d<c){return -1}if(d>c){return 1}return 0;case\"string\":case\"text\":d=String(d).toLowerCase();c=String(c).toLowerCase();break}}else{if(b.jqx.dataFormat.isNumber(d)&&b.jqx.dataFormat.isNumber(c)){if(d<c){return -1}if(d>c){return 1}return 0}else{if(b.jqx.dataFormat.isDate(d)&&b.jqx.dataFormat.isDate(c)){if(d<c){return -1}if(d>c){return 1}return 0}else{if(!b.jqx.dataFormat.isNumber(d)&&!b.jqx.dataFormat.isNumber(c)){d=String(d).toLowerCase();c=String(c).toLowerCase()}}}}}try{if(d<c){return -1}if(d>c){return 1}}catch(e){var g=e}return 0};this._equals=function(d,c){return(this._compare(d,c)===0)};this.evaluate=function(p){if(this.grid.serverProcessing){if(p){if(this.grid.source._source.id==\"\"||this.grid.source._source.id==null){if(this.grid.pageable){var c=this.grid.pageSize*this.pagenum;this.grid.rowsByKey=new Array();var h=this;b.each(p,function(i){this.uid=c;h.grid.rowsByKey[this.uid]=this;c++})}}}return p}var d=new Array();if(this.filters.length){var j=new Array();var o=function(s,w){for(var u=0;u<s.length;u++){var v=s[u];v._visible=true;var q=undefined;for(var t=0;t<this.filters.length;t++){var r=this.filters[t].filter;var x=v[this.filters[t].datafield];var y=r.evaluate(x);if(q==undefined){q=y}else{if(r.operator==\"or\"){q=q||y}else{q=q&&y}}}v._visible=false;if(q||v.aggregate){v._visible=true;w.push(v);j[v.uid]=v}}};if(!this._filteredData){if(this.source.hierarchy||(this.grid.source.hierarchy&&this.grid.source.hierarchy.length>0)){var n=new Array();var k=function(r,s){for(var q=0;q<s.length;q++){var t=s[q];n.push(t);if(t.records&&t.records.length>0){k(t,t.records)}}};k(null,p);o.call(this,n,d);for(var e=0;e<d.length;e++){var g=d[e];while(g.parent){var m=g.parent;if(!j[m.uid]){m._visible=true;j[m.uid]=m}g=m}}d=p}else{o.call(this,p,d)}this._filteredData=d;this.rows=d}else{this.rows=this._filteredData}}else{this.rows=p}if(this.source.hierarchy||(this.grid.source.hierarchy&&this.grid.source.hierarchy.length>0)){var h=this;var l=new Array();this._sortData=null;var f=function(t,q){h._sortData=null;var r=null;if(h.source.hierarchy.groupingDataFields){if(q&&q.length>0&&q[0].level<h.source.hierarchy.groupingDataFields.length){r=new Array();for(var s=0;s<q.length;s++){r.push(b.extend({originalRecord:q[s]},q[s]))}}else{r=h._sort(q)}}else{r=h._sort(q)}if(t.records){t.records=r}else{t=t.concat(r)}for(var s=0;s<r.length;s++){if(r[s].records&&r[s].records.length){f(r[s],r[s].records)}}return t};if(this.sortfield||this.sortfielddirection){if(this._sortHierarchyData){l=this._sortHierarchyData}else{l=f(l,p)}this.rows=l;this._sortHierarchyData=l}}else{this.rows=this._sort(this.rows)}return this.rows};this.getid=function(j,d,e){if(b(j,d).length>0){return b(j,d).text()}if(this.rows&&j!=\"\"&&j!=undefined&&this.rows.length>0){var h=this.rows[this.rows.length-1][j];if(h==null){h=null}for(var f=1;f<=100;f++){var g=this.grid.rowsByKey[f+h];if(!g){if(this.grid&&this.grid.treeGrid&&this.grid.treeGrid.virtualModeCreateRecords){var g=this.grid.rowsByKey[\"jqx\"+h+f];if(g){continue}return\"jqx\"+h+f}return h+f}}}if(j!=undefined){if(j.toString().length>0){var c=b(d).attr(j);if(c!=null&&c.toString().length>0){if(this.grid&&this.grid.treeGrid&&this.grid.treeGrid.virtualModeCreateRecords){return\"jqx\"+c}return c}}}if(this.rows&&this.rows.length>0){var g=this.grid.rowsByKey[e];if(g){var h=this.rows[this.rows.length-1][j];if(h==null){h=\"\"}for(var f=1;f<=1000;f++){var g=this.grid.rowsByKey[f+h];if(!g){if(this.grid&&this.grid.treeGrid&&this.grid.treeGrid.virtualModeCreateRecords){var g=this.grid.rowsByKey[\"jqx\"+h+f];if(g){continue}return\"jqx\"+h+f}return h+f}}}}if(this.grid&&this.grid.treeGrid&&this.grid.treeGrid.virtualModeCreateRecords){var g=this.grid.rowsByKey[\"jqx\"+e];if(!g){return\"jqx\"+e}else{for(var f=e+1;f<=100;f++){var g=this.grid.rowsByKey[\"jqx\"+f];if(!g){var g=this.grid.rowsByKey[\"jqx\"+f];if(g){continue}return\"jqx\"+f}}}}return e};this.generatekey=function(){var c=function(){return(((1+Math.random())*16)|0)};return(\"\"+c()+c()+\"-\"+c()+\"-\"+c())};return this}})(jqxBaseFramework);\r\n\r\n","/*\r\njQWidgets v10.0.2 (2020-22-July)\r\nCopyright (c) 2011-2020 jQWidgets.\r\nLicense: https://jqwidgets.com/license/\r\n*/\r\n/* eslint-disable */\r\n\r\n(function(a){a.jqx.jqxWidget(\"jqxTooltip\",\"\",{});a.extend(a.jqx._jqxTooltip.prototype,{defineInstance:function(){var b={width:\"auto\",height:\"auto\",position:\"default\",enableBrowserBoundsDetection:true,content:\"\",left:0,top:0,absolutePositionX:0,absolutePositionY:0,trigger:\"hover\",showDelay:100,autoHide:true,autoHideDelay:3000,closeOnClick:true,disabled:false,animationShowDelay:200,animationHideDelay:\"fast\",showArrow:true,name:\"\",opacity:0.9,rtl:false,_isOpen:false,selector:null,opening:null,value:null,_eventsMap:{mousedown:a.jqx.mobile.getTouchEventName(\"touchstart\"),mouseup:a.jqx.mobile.getTouchEventName(\"touchend\")},events:[\"open\",\"close\",\"opening\",\"closing\"]};if(this===a.jqx._jqxTooltip.prototype){return b}a.extend(true,this,b);return b},createInstance:function(){this._isTouchDevice=a.jqx.mobile.isTouchDevice();var d=a.data(document.body,\"_tooltipIDArray\"+this.name);if(!d){this.IDArray=[];a.data(document.body,\"_tooltipIDArray\"+this.name,this.IDArray)}else{this.IDArray=d}var c=this._generatekey();var b=\"jqxtooltip\"+c;this.IDArray.push({tooltipID:b,tooltipHost:this.host});var f=document.createElement(\"div\");f.setAttribute(\"id\",b);f.innerHTML='<div id=\"'+b+'Main\"><div id=\"'+b+'Text\"></div></div><div id=\"'+b+'Arrow\"></div>';if(a.jqx.browser.msie){f.className=this.toThemeProperty(\"jqx-noshadow\")}document.body.appendChild(f);this._tooltip=f;this._tooltipHelper=a(f);if(this._tooltipHelper.initAnimate){this._tooltipHelper.initAnimate()}f.style.visibility=\"hidden\";f.style.display=\"none\";f.style.opacity=0;f.style.zIndex=99999;var e=document.getElementById(b+\"Arrow\");this._arrow=e;if(this.showArrow===false){e.style.visibility=\"hidden\";e.style.display=\"none\"}this._main=document.getElementById(b+\"Main\");this._text=document.getElementById(b+\"Text\");this._setTheme();this._setSize();this._setContent();if(this.disabled===false){this._trigger();if(this.closeOnClick===true){this._clickHide()}}},open:function(){if(arguments){if(arguments.length){if(arguments.length===2){this.position=\"absolute\";this.left=arguments[0];this.top=arguments[1];this.absolutePositionX=arguments[0];this.absolutePositionY=arguments[1]}}}if(this.disabled===false&&this._id()!==\"removed\"){if(this.position===\"mouse\"||this.position===\"mouseenter\"){var b=this.position;this.position=\"default\";this._raiseEvent(\"2\");this._setPosition();this._animateShow();this.position=b}else{this._raiseEvent(\"2\");this._setPosition();this._animateShow()}}},close:function(c){var e=this,f=a.jqx.browser.msie&&a.jqx.browser.version<9;if(typeof(c)===\"object\"&&a.isEmptyObject(c)){c=this.animationHideDelay}var b=parseFloat(e._tooltip.style.opacity);var d=function(){clearTimeout(e.autoHideTimeout);e._raiseEvent(\"3\");e._tooltipHelper.animate({opacity:0},c,function(){e._tooltip.style.visibility=\"hidden\";e._tooltip.style.display=\"none\";e._raiseEvent(\"1\");e._isOpen=false})};if(this._isOpen===false&&b!==0){d();return}if(this._isOpen===true&&(!f&&b===this.opacity||f)){d()}},destroy:function(){var c=this.IDArray.length;this._removeHandlers();this._tooltipHelper.remove();for(var b=0;b<c;b++){if(this.IDArray[b].tooltipHost===this.host){this.IDArray.splice(b,1);break}}this.host.removeData(\"jqxTooltip\")},refresh:function(d){if(d===true){return}var c=this;if(this.rtl){c._text.className+=\" \"+c.toThemeProperty(\"jqx-rtl\");c._text.style.direction=\"rtl\"}var b=parseFloat(c._tooltip.style.opacity);if(this._id()!==\"removed\"){if(this.disabled===true&&this._isOpen===true&&b===this.opacity){clearTimeout(this.autoHideTimeout);this._tooltipHelper.animate({opacity:0},this.animationHideDelay,function(){c._tooltip.style.visibility=\"hidden\";c._tooltip.style.display=\"none\";c._isOpen=false})}this._setTheme();this._setContent();this._setSize();if(this.position!==\"mouse\"&&this.position!==\"mouseenter\"){this._setPosition()}this._removeHandlers();if(this.disabled===false){this._trigger();if(this.closeOnClick===true){this._clickHide()}}}},propertyChangedHandler:function(b,c,e,d){if(c===\"content\"){this.changeContentFlag=true}b.refresh()},_raiseEvent:function(g,e){var c=this.events[g];var f=new a.Event(c);f.owner=this;f.args=e;var b;try{b=this.host.trigger(f)}catch(d){}return b},_generatekey:function(){var b=function(){return(((1+Math.random())*65536)|0).toString(16).substring(1)};return(b()+b())},_id:function(){var d,b;var e=this.IDArray.length;for(var c=0;c<e;c++){if(this.IDArray[c].tooltipHost===this.host){d=this.IDArray[c].tooltipID;b=\"#\"+d;break}}if(b===undefined){b=\"removed\"}return b},_setPosition:function(d){var j=this,o=j._tooltip;if((this._isOpen===false&&parseFloat(o.style.opacity)===0)||this.changeContentFlag===true){if(!d&&(this.position===\"mouse\"||this.position===\"mouseenter\")){return}o.style.display=\"block\";this.changeContentFlag=false;this.documentTop=document.documentElement.scrollTop;this.documentLeft=document.documentElement.scrollLeft;this.windowWidth=window.innerWidth;this.windowHeight=window.innerHeight;this.hostWidth=j.element.offsetWidth;this.hostHeight=j.element.offsetHeight;this.tooltipWidth=o.offsetWidth;this.tooltipHeight=o.offsetHeight;this.hostOffset=this.host.offset();this.tooltipOffset=j._tooltipHelper.offset();this.defaultOffset=30;this.offsetHorizontal=parseInt(this.left,10);this.offsetVertical=parseInt(this.top,10);var n=j._arrow,i=a(n),e=j._main,b=a(e),f=e.offsetWidth,l=e.offsetHeight,c;this.arrowSize=5;this.tooltipMainOffset=b.offset();this.tooltipArrowOffset={};switch(this.position){case\"top\":this.tooltipOffset.left=this.hostOffset.left+this.hostWidth/2-this.tooltipWidth/2+this.offsetHorizontal;this.tooltipOffset.top=this.hostOffset.top-this.tooltipHeight-this.arrowSize+this.offsetVertical;this._detectBrowserBounds();this.tooltipMainOffset=b.offset();j._removeClass(n,j.toThemeProperty(\"jqx-tooltip-arrow-l-r\"));n.className+=\" \"+j.toThemeProperty(\"jqx-tooltip-arrow-t-b\");n.style.borderWidth=this.arrowSize+\"px \"+this.arrowSize+\"px 0px\";this.tooltipArrowOffset.left=this.tooltipMainOffset.left+(f/2-this.arrowSize);this.tooltipArrowOffset.top=this.tooltipMainOffset.top+l;i.offset({top:this.tooltipArrowOffset.top,left:this.tooltipArrowOffset.left});break;case\"bottom\":this.tooltipOffset.left=this.hostOffset.left+this.hostWidth/2-this.tooltipWidth/2+this.offsetHorizontal;this.tooltipOffset.top=this.hostOffset.top+this.hostHeight+this.arrowSize+this.offsetVertical;this._detectBrowserBounds();this.tooltipMainOffset=b.offset();j._removeClass(n,j.toThemeProperty(\"jqx-tooltip-arrow-l-r\"));n.className+=\" \"+j.toThemeProperty(\"jqx-tooltip-arrow-t-b\");n.style.borderWidth=\"0 \"+this.arrowSize+\"px \"+this.arrowSize+\"px\";this.tooltipArrowOffset.left=this.tooltipMainOffset.left+(f/2-this.arrowSize);this.tooltipArrowOffset.top=this.tooltipMainOffset.top-this.arrowSize;i.offset({top:this.tooltipArrowOffset.top,left:this.tooltipArrowOffset.left});break;case\"left\":if(window.getComputedStyle){c=window.getComputedStyle(e)}else{c=e.currentStyle}this.tooltipOffset.left=this.hostOffset.left-this.tooltipWidth-this.arrowSize+this.offsetHorizontal-(parseInt(c.borderLeftWidth,10)+parseInt(c.borderRightWidth,10));this.tooltipOffset.top=this.hostOffset.top+this.hostHeight/2-this.tooltipHeight/2+this.offsetVertical;this._detectBrowserBounds();j._removeClass(n,j.toThemeProperty(\"jqx-tooltip-arrow-t-b\"));n.className+=\" \"+j.toThemeProperty(\"jqx-tooltip-arrow-l-r\");n.style.borderWidth=this.arrowSize+\"px 0px \"+this.arrowSize+\"px \"+this.arrowSize+\"px\";this.tooltipMainOffset=b.offset();this.tooltipArrowOffset.left=this.tooltipMainOffset.left+f;this.tooltipArrowOffset.top=this.tooltipMainOffset.top+(l)/2-this.arrowSize;i.offset({top:this.tooltipArrowOffset.top,left:this.tooltipArrowOffset.left});break;case\"right\":this.tooltipOffset.left=this.hostOffset.left+this.hostWidth+this.arrowSize+this.offsetHorizontal;this.tooltipOffset.top=this.hostOffset.top+this.hostHeight/2-this.tooltipHeight/2+this.offsetVertical;this.tooltipOffset.top=parseInt(this.tooltipOffset.top,10);this._detectBrowserBounds();this.tooltipMainOffset=b.offset();j._removeClass(n,j.toThemeProperty(\"jqx-tooltip-arrow-t-b\"));n.className+=\" \"+j.toThemeProperty(\"jqx-tooltip-arrow-l-r\");n.style.borderWidth=this.arrowSize+\"px \"+this.arrowSize+\"px \"+this.arrowSize+\"px 0px\";this.tooltipArrowOffset.left=(this.tooltipMainOffset.left-this.arrowSize);this.tooltipArrowOffset.top=this.tooltipMainOffset.top+(e.offsetHeight)/2-this.arrowSize;i.offset({top:this.tooltipArrowOffset.top,left:this.tooltipArrowOffset.left});break;case\"top-left\":this.tooltipOffset.left=this.hostOffset.left+this.defaultOffset-this.tooltipWidth+this.offsetHorizontal;this.tooltipOffset.top=this.hostOffset.top-this.tooltipHeight-this.arrowSize+this.offsetVertical;this._detectBrowserBounds();this.tooltipMainOffset=b.offset();j._removeClass(n,j.toThemeProperty(\"jqx-tooltip-arrow-l-r\"));n.className+=\" \"+j.toThemeProperty(\"jqx-tooltip-arrow-t-b\");n.style.borderWidth=this.arrowSize+\"px \"+this.arrowSize+\"px  0px\";this.tooltipArrowOffset.left=this.tooltipMainOffset.left+f-6*this.arrowSize;this.tooltipArrowOffset.top=this.tooltipMainOffset.top+l;i.offset({top:this.tooltipArrowOffset.top,left:this.tooltipArrowOffset.left});break;case\"bottom-left\":this.tooltipOffset.left=this.hostOffset.left+this.defaultOffset-this.tooltipWidth+this.offsetHorizontal;this.tooltipOffset.top=this.hostOffset.top+this.hostHeight+this.arrowSize+this.offsetVertical;this._detectBrowserBounds();this.tooltipMainOffset=b.offset();j._removeClass(n,j.toThemeProperty(\"jqx-tooltip-arrow-l-r\"));n.className+=\" \"+j.toThemeProperty(\"jqx-tooltip-arrow-t-b\");n.style.borderWidth=\"0 \"+this.arrowSize+\"px \"+this.arrowSize+\"px\";this.tooltipArrowOffset.left=this.tooltipMainOffset.left+f-6*this.arrowSize;this.tooltipArrowOffset.top=this.tooltipMainOffset.top-this.arrowSize;i.offset({top:this.tooltipArrowOffset.top,left:this.tooltipArrowOffset.left});break;case\"top-right\":this.tooltipOffset.left=this.hostOffset.left+this.hostWidth-this.defaultOffset+this.offsetHorizontal;this.tooltipOffset.top=this.hostOffset.top-this.tooltipHeight-this.arrowSize+this.offsetVertical;this._detectBrowserBounds();this.tooltipMainOffset=b.offset();j._removeClass(n,j.toThemeProperty(\"jqx-tooltip-arrow-l-r\"));n.className+=\" \"+j.toThemeProperty(\"jqx-tooltip-arrow-t-b\");n.style.borderWidth=this.arrowSize+\"px \"+this.arrowSize+\"px  0px\";this.tooltipArrowOffset.left=this.tooltipMainOffset.left+4*this.arrowSize;this.tooltipArrowOffset.top=this.tooltipMainOffset.top+l;i.offset({top:this.tooltipArrowOffset.top,left:this.tooltipArrowOffset.left});break;case\"bottom-right\":this.tooltipOffset.left=this.hostOffset.left+this.hostWidth-this.defaultOffset+this.offsetHorizontal;this.tooltipOffset.top=this.hostOffset.top+this.hostHeight+this.arrowSize+this.offsetVertical;this._detectBrowserBounds();this.tooltipMainOffset=b.offset();j._removeClass(n,j.toThemeProperty(\"jqx-tooltip-arrow-l-r\"));n.className+=\" \"+j.toThemeProperty(\"jqx-tooltip-arrow-t-b\");n.style.borderWidth=\"0 \"+this.arrowSize+\"px \"+this.arrowSize+\"px\";this.tooltipArrowOffset.left=this.tooltipMainOffset.left+4*this.arrowSize;this.tooltipArrowOffset.top=this.tooltipMainOffset.top-this.arrowSize;i.offset({top:this.tooltipArrowOffset.top,left:this.tooltipArrowOffset.left});break;case\"absolute\":j._tooltipHelper.offset({top:this.absolutePositionY,left:this.absolutePositionX});n.style.borderWidth=\"0px\";break;case\"mouse\":if(this._isTouchDevice===false){switch(this.trigger){case\"hover\":if(this.mouseHoverTimeout){clearTimeout(this.mouseHoverTimeout)}this.mouseHoverTimeout=setTimeout(function(){j.tooltipOffset.left=d.pageX+10;j.tooltipOffset.top=d.pageY+10;j._detectBrowserBounds()},this.showDelay);break;case\"click\":this.tooltipOffset.left=d.pageX+10;this.tooltipOffset.top=d.pageY+10;this._detectBrowserBounds();break}}else{var m=d.pageX;var k=d.pageY;if(d.originalEvent){var g;if(d.originalEvent.touches&&d.originalEvent.touches.length){g=d.originalEvent.touches[0]}else{if(d.originalEvent.changedTouches&&d.originalEvent.changedTouches.length){g=d.originalEvent.changedTouches[0]}}if(g!==undefined){m=g.pageX;k=g.pageY}}this.tooltipOffset.left=m+10;this.tooltipOffset.top=k+10;this._detectBrowserBounds()}n.style.borderWidth=\"0px\";break;case\"mouseenter\":var h={top:d.pageY,left:d.pageX};if((h.top<(this.hostOffset.top+10))&&(h.top>(this.hostOffset.top-10))){this.tooltipOffset.left=h.left-this.tooltipWidth/2;this.tooltipOffset.top=this.hostOffset.top-this.tooltipHeight-this.arrowSize;this._detectBrowserBounds();this.tooltipMainOffset=b.offset();j._removeClass(n,j.toThemeProperty(\"jqx-tooltip-arrow-l-r\"));n.className+=\" \"+j.toThemeProperty(\"jqx-tooltip-arrow-t-b\");n.style.borderWidth=this.arrowSize+\"px \"+this.arrowSize+\"px  0px\";this.tooltipArrowOffset.left=this.tooltipMainOffset.left+(f/2-this.arrowSize);this.tooltipArrowOffset.top=this.tooltipMainOffset.top+l;i.offset({top:this.tooltipArrowOffset.top,left:this.tooltipArrowOffset.left})}else{if((h.top<((this.hostOffset.top+this.hostHeight)+10))&&(h.top>((this.hostOffset.top+this.hostHeight)-10))){this.tooltipOffset.left=h.left-this.tooltipWidth/2;this.tooltipOffset.top=this.hostOffset.top+this.hostHeight+this.arrowSize;this._detectBrowserBounds();this.tooltipMainOffset=b.offset();j._removeClass(n,j.toThemeProperty(\"jqx-tooltip-arrow-l-r\"));n.className+=\" \"+j.toThemeProperty(\"jqx-tooltip-arrow-t-b\");n.style.borderWidth=\"0 \"+this.arrowSize+\"px \"+this.arrowSize+\"px\";this.tooltipArrowOffset.left=this.tooltipMainOffset.left+(f/2-this.arrowSize);this.tooltipArrowOffset.top=this.tooltipMainOffset.top-this.arrowSize;i.offset({top:this.tooltipArrowOffset.top,left:this.tooltipArrowOffset.left})}else{if((h.left<(this.hostOffset.left+10))&&(h.left>(this.hostOffset.left-10))){if(window.getComputedStyle){c=window.getComputedStyle(e)}else{c=e.currentStyle}this.tooltipOffset.left=this.hostOffset.left-this.tooltipWidth-this.arrowSize-(parseInt(c.borderLeftWidth,10)+parseInt(c.borderRightWidth,10));this.tooltipOffset.top=h.top-this.tooltipHeight/2;this._detectBrowserBounds();this.tooltipMainOffset=b.offset();j._removeClass(n,j.toThemeProperty(\"jqx-tooltip-arrow-t-b\"));n.className+=\" \"+j.toThemeProperty(\"jqx-tooltip-arrow-l-r\");n.style.borderWidth=this.arrowSize+\"px 0px \"+this.arrowSize+\"px \"+this.arrowSize+\"px\";this.tooltipMainOffset=b.offset();this.tooltipArrowOffset.left=this.tooltipMainOffset.left+f;this.tooltipArrowOffset.top=this.tooltipMainOffset.top+(l)/2-this.arrowSize;i.offset({top:this.tooltipArrowOffset.top,left:this.tooltipArrowOffset.left})}else{if((h.left<(this.hostOffset.left+this.hostWidth+10))&&(h.left>(this.hostOffset.left+this.hostWidth-10))){this.tooltipOffset.left=this.hostOffset.left+this.hostWidth+this.arrowSize;this.tooltipOffset.top=h.top-this.tooltipHeight/2;this._detectBrowserBounds();this.tooltipMainOffset=b.offset();j._removeClass(n,j.toThemeProperty(\"jqx-tooltip-arrow-t-b\"));n.className+=\" \"+j.toThemeProperty(\"jqx-tooltip-arrow-l-r\");n.style.borderWidth=this.arrowSize+\"px \"+this.arrowSize+\"px \"+this.arrowSize+\"px 0px\";this.tooltipMainOffset=b.offset();this.tooltipArrowOffset.left=(this.tooltipMainOffset.left-this.arrowSize);this.tooltipArrowOffset.top=this.tooltipMainOffset.top+(l)/2-this.arrowSize;i.offset({top:this.tooltipArrowOffset.top,left:this.tooltipArrowOffset.left})}}}}break;case\"default\":this.tooltipOffset.left=this.hostOffset.left+this.hostWidth-this.defaultOffset;this.tooltipOffset.top=this.hostOffset.top+this.hostHeight+this.arrowSize;this._detectBrowserBounds();this.tooltipMainOffset=b.offset();j._removeClass(n,j.toThemeProperty(\"jqx-tooltip-arrow-l-r\"));n.className+=\" \"+j.toThemeProperty(\"jqx-tooltip-arrow-t-b\");n.style.borderWidth=\"0 \"+this.arrowSize+\"px \"+this.arrowSize+\"px\";this.tooltipArrowOffset.left=this.tooltipMainOffset.left+4*this.arrowSize;this.tooltipArrowOffset.top=this.tooltipMainOffset.top-this.arrowSize;i.offset({top:this.tooltipArrowOffset.top,left:this.tooltipArrowOffset.left});break}}},_setContent:function(){this._text.innerHTML=this.content},opened:function(){return this._isOpen&&this.host.css(\"display\")==\"block\"&&this.host.css(\"visibility\")==\"visible\"},_animateShow:function(){this._closeAll();clearTimeout(this.autoHideTimeout);var b=parseFloat(this._tooltip.style.opacity);if(this._isOpen===false&&b===0){var c=this;c._tooltip.style.visibility=\"visible\";c._tooltip.style.display=\"block\";c._tooltip.style.opacity=0;if(this.opening){var d=this.opening(this);if(d===false){return}}c._tooltipHelper.animate({opacity:this.opacity},this.animationShowDelay,function(){c._raiseEvent(\"0\");c._isOpen=true;c.openedTooltip=c;a.data(document.body,\"_openedTooltip\"+c.name,c);if(c.autoHideTimeout){clearTimeout(c.autoHideTimeout)}if(c.autoHideDelay>0&&c.autoHide===true){c.autoHideTimeout=setTimeout(function(){c._autoHide()},c.autoHideDelay)}})}},_trigger:function(){if(this._id()!==\"removed\"){var c=this;var b=this.host;if(this.selector){b=a(\"#\"+this.selector)}if(this._isTouchDevice===false){switch(this.trigger){case\"hover\":if(this.position===\"mouse\"){this.addHandler(b,\"mousemove.tooltip\",function(d){if(c._enterFlag===1){c._raiseEvent(\"2\");c._setPosition(d);clearTimeout(c.hoverShowTimeout);c.hoverShowTimeout=setTimeout(function(){c._animateShow();c._enterFlag=0},c.showDelay)}});this.addHandler(b,\"mouseenter.tooltip\",function(){if(c._leaveFlag!==0){c._enterFlag=1}});this.addHandler(b,\"mouseleave.tooltip\",function(f){c._leaveFlag=1;clearTimeout(c.hoverShowTimeout);var g=c._tooltipHelper.offset();var e=c._tooltip.offsetWidth;var d=c._tooltip.offsetHeight;if(parseInt(f.pageX,10)<parseInt(g.left,10)||parseInt(f.pageX,10)>parseInt(g.left,10)+e){c.close()}if(parseInt(f.pageY,10)<parseInt(g.top,10)||parseInt(f.pageY,10)>parseInt(g.top,10)+d){c.close()}});this.addHandler(c._tooltipHelper,\"mouseleave.tooltip\",function(d){c._checkBoundariesAuto(d);if(c._clickFlag!==0&&c._autoFlag!==0){c._leaveFlag=0}else{c._leaveFlag=1;c.close()}})}else{this.addHandler(b,\"mouseenter.tooltip\",function(d){clearTimeout(c.hoverShowTimeout);c.hoverShowTimeout=setTimeout(function(){c._raiseEvent(\"2\");c._setPosition(d);c._animateShow()},c.showDelay)});this.addHandler(b,\"mouseleave.tooltip\",function(g){c._leaveFlag=1;clearTimeout(c.hoverShowTimeout);if(c.autoHide){var e=g.pageX;var k=g.pageY;var h=c._tooltipHelper.offset();var j=h.left;var i=h.top;var f=c._tooltip.offsetWidth;var d=c._tooltip.offsetHeight;if(parseInt(e,10)<parseInt(j,10)||parseInt(e,10)>parseInt(j,10)+f||parseInt(k,10)<parseInt(i,10)||parseInt(k,10)>parseInt(i,10)+d){c.close()}}});this.addHandler(c._tooltipHelper,\"mouseleave.tooltip\",function(d){c._checkBoundariesAuto(d);if(c._clickFlag!==0&&c._autoFlag!==0){c._leaveFlag=0}else{c._leaveFlag=1;if(c.autoHide){c.close()}}})}break;case\"click\":this.addHandler(b,\"click.tooltip\",function(d){if(c.position===\"mouseenter\"){c.position=\"mouse\"}c._raiseEvent(\"2\");c._setPosition(d);c._animateShow()});break;case\"none\":break}}else{if(this.trigger!==\"none\"){this.addHandler(b,\"touchstart.tooltip\",function(d){if(c.position===\"mouseenter\"){c.position=\"mouse\"}c._raiseEvent(\"2\");c._setPosition(d);c._animateShow()})}}}},_autoHide:function(){var c=this;var b=parseFloat(c._tooltip.style.opacity);if(this.autoHide===true&&this._isOpen===true&&b>=this.opacity){c._raiseEvent(\"3\");c._tooltipHelper.animate({opacity:0},c.animationHideDelay,function(){c._tooltip.style.visibility=\"hidden\";c._tooltip.style.display=\"none\";c._raiseEvent(\"1\");c._isOpen=false})}},_clickHide:function(){var b=this;this.addHandler(b._tooltipHelper,\"click.tooltip\",function(c){b._checkBoundariesClick(c);b.close()})},_setSize:function(){var b=this;b._tooltip.style.width=b._toPx(b.width);b._tooltip.style.height=b._toPx(b.height)},resize:function(){this._setSize()},_setTheme:function(){var b=this;if(b._tooltip.className.indexOf(\"jqx-tooltip\")===-1){b._tooltip.className+=\" \"+b.toThemeProperty(\"jqx-tooltip jqx-popup\");b._main.className+=\" \"+b.toThemeProperty(\"jqx-widget jqx-fill-state-normal jqx-tooltip-main\");b._text.className+=\" \"+b.toThemeProperty(\"jqx-widget jqx-fill-state-normal jqx-tooltip-text\");if(b._arrow){b._arrow.className+=\" \"+b.toThemeProperty(\"jqx-widget jqx-fill-state-normal jqx-tooltip-arrow\")}}},_initialPosition:function(){var b=this.position;this.position=\"default\";this._setPosition();this.position=b},_detectBrowserBounds:function(){var b=this,c=b._tooltipHelper;if(this.enableBrowserBoundsDetection){if(this.tooltipOffset.top<this.documentTop&&this.tooltipOffset.left<0){c.offset({top:this.documentTop,left:this.documentLeft})}else{if(this.tooltipOffset.top<this.documentTop&&(this.tooltipOffset.left+this.tooltipWidth)>this.windowWidth+this.documentLeft){c.offset({top:this.documentTop,left:(this.windowWidth+this.documentLeft-this.tooltipWidth)})}else{if(this.tooltipOffset.top<this.documentTop){c.offset({top:this.documentTop,left:this.tooltipOffset.left})}else{if((this.tooltipOffset.top+this.tooltipHeight)>(this.windowHeight+this.documentTop)&&this.tooltipOffset.left<0){c.offset({top:(this.windowHeight+this.documentTop-this.tooltipHeight),left:this.documentLeft})}else{if((this.tooltipOffset.top+this.tooltipHeight)>(this.windowHeight+this.documentTop)&&(this.tooltipOffset.left+this.tooltipWidth)>this.windowWidth+this.documentLeft){c.offset({top:(this.windowHeight+this.documentTop-this.tooltipHeight),left:(this.windowWidth+this.documentLeft-this.tooltipWidth)})}else{if((this.tooltipOffset.top+this.tooltipHeight)>(this.windowHeight+this.documentTop)){c.offset({top:(this.windowHeight+this.documentTop-this.tooltipHeight),left:this.tooltipOffset.left})}else{if(this.tooltipOffset.left<0){c.offset({top:this.tooltipOffset.top,left:this.documentLeft})}else{if((this.tooltipOffset.left+this.tooltipWidth)>this.windowWidth+this.documentLeft){c.offset({top:this.tooltipOffset.top,left:(this.windowWidth+this.documentLeft-this.tooltipWidth)})}else{c.offset({top:this.tooltipOffset.top,left:this.tooltipOffset.left})}}}}}}}}}else{c.offset({top:this.tooltipOffset.top,left:this.tooltipOffset.left})}},_checkBoundaries:function(b){if(b.pageX>=this.hostOffset.left&&b.pageX<=(this.hostOffset.left+this.hostWidth)&&b.pageY>=this.hostOffset.top&&b.pageY<=(this.hostOffset.top+this.hostHeight)){return true}else{return false}},_checkBoundariesClick:function(b){if(this._checkBoundaries(b)){this._clickFlag=1}else{this._clickFlag=0}},_checkBoundariesAuto:function(b){if(this._checkBoundaries(b)){this._autoFlag=1}else{this._autoFlag=0}},_removeHandlers:function(){this.removeHandler(this.host,\"mouseenter.tooltip\");this.removeHandler(this.host,\"mousemove.tooltip\");this.removeHandler(this.host,\"mouseleave.tooltip\");this.removeHandler(this.host,\"click.tooltip\");this.removeHandler(this.host,\"touchstart.tooltip\");this.removeHandler(this._tooltipHelper,\"click.tooltip\");this.removeHandler(this._tooltipHelper,\"mouseleave.tooltip\")},_closeAll:function(){for(var c=0;c<this.IDArray.length;c++){var d=this.IDArray[c].tooltipID,b=document.getElementById(d);if(b!==this._tooltip){b.style.opacity=0;b.style.visibility=\"hidden\";b.style.display=\"none\";this._isOpen=false}}},_toPx:function(b){if(typeof b===\"number\"){return b+\"px\"}else{return b}},_removeClass:function(c,b){a(c).removeClass(b)}})})(jqxBaseFramework);\r\n\r\n","/*\r\njQWidgets v10.0.2 (2020-22-July)\r\nCopyright (c) 2011-2020 jQWidgets.\r\nLicense: https://jqwidgets.com/license/\r\n*/\r\n/* eslint-disable */\r\n\r\n(function(a){a.jqx.jqxWidget(\"jqxTreeGrid\",\"jqxDataTable\",{});a.extend(a.jqx._jqxTreeGrid.prototype,{defineInstance:function(){if(this.base){this.base.treeGrid=this;this.base.exportSettings={recordsInView:false,columnsHeader:true,hiddenColumns:false,serverURL:null,characterSet:null,collapsedRecords:false,fileName:\"jqxTreeGrid\"}}var b={pageSizeMode:\"default\",checkboxes:false,hierarchicalCheckboxes:false,icons:false,showSubAggregates:false,aggregatesPosition:\"top\",rowDetailsRenderer:null,virtualModeCreateRecords:null,virtualModeRecordCreating:null,loadingFailed:false};if(this===a.jqx._jqxTreeGrid.prototype){return b}a.extend(true,this,b);return b},createInstance:function(b){this.theme=this.base.theme;var c=this},deleteRow:function(b){var c=this.base;c.deleterowbykey(b)},updateRow:function(b,d){var c=this.base;c.updaterowbykey(b,d)},setCellValue:function(c,b,e){var d=this.base;d.setCellValueByKey(c,b,e)},getCellValue:function(c,b){var d=this.base;return d.getCellValueByKey(c,b)},lockRow:function(b){var c=this.base;c.lockrowbykey(b)},unlockRow:function(b){var c=this.base;c.unlockrowbykey(b)},selectRow:function(b){var c=this.base;c.selectrowbykey(b)},unselectRow:function(b){var c=this.base;c.unselectrowbykey(b)},ensureRowVisible:function(b){var c=this.base;c.ensurerowvisiblebykey(b)},beginCellEdit:function(c,b){var e=this.base;var d=e.getColumn(b);e.beginroweditbykey(c,d)},beginRowEdit:function(b){var c=this.base;c.beginroweditbykey(b)},endCellEdit:function(c,b,e){var d=this.base;d.endroweditbykey(c,e)},endRowEdit:function(b,d){var c=this.base;c.endroweditbykey(b,d)},_showLoadElement:function(){var b=this.base;if(b.host.css(\"display\")==\"block\"){if(b.autoShowLoadElement){a(b.dataloadelement).css(\"visibility\",\"visible\");a(b.dataloadelement).css(\"display\",\"block\");b.dataloadelement.width(b.host.width());b.dataloadelement.height(b.host.height())}}},_hideLoadElement:function(){var b=this.base;if(b.host.css(\"display\")==\"block\"){if(b.autoShowLoadElement){a(b.dataloadelement).css(\"visibility\",\"hidden\");a(b.dataloadelement).css(\"display\",\"none\");b.dataloadelement.width(b.host.width());b.dataloadelement.height(b.host.height())}}},getKey:function(b){if(b){return b.uid}},getRows:function(){var b=this.base;if(b.source.hierarchy){if(b.source.hierarchy.length!=0){return b.source.hierarchy}}return b.source.records},getCheckedRows:function(){var c=this.base;var d=c._names();var e=new Array();var b=function(j,g){if(!g){return}for(var h=0;h<g.length;h++){if(!g[h]){continue}var f=a.extend({},g[h]);var k=c.rowinfo[g[h].uid];if(k&&k[d.checked]){j.push(f)}else{if(f[d.checked]){j.push(f)}}b(e,g[h].records)}};b(e,c.dataViewRecords);return e},getRow:function(d){var e=this.base;var b=e.source.records;if(e.source.hierarchy){var f=function(h){for(var j=0;j<h.length;j++){if(!h[j]){continue}if(h[j].uid==d){return h[j]}if(h[j].records){var k=f(h[j].records);if(k){return k}}}};var g=f(e.source.hierarchy);return g}else{for(var c=0;c<b.length;c++){if(!b[c]){continue}if(b[c].uid==d){return b[c]}}}},_renderrows:function(){var N=this.base;var at=this;if(N._loading){return}if(N._updating){return}var J=N._names();if(N.source.hierarchy.length===0&&!N.loadingFailed){if(this.virtualModeCreateRecords){var an=function(c){if(c===false||(c&&c.length==0)){N._loading=false;N.loadingFailed=true;N.source.hierarchy=new Array();at._hideLoadElement();N._renderrows();N._updateScrollbars();N._arrange();return}for(var j=0;j<c.length;j++){c[j].level=0;at.virtualModeRecordCreating(c[j]);N.rowsByKey[c[j].uid]=c[j]}N.source.hierarchy=c;if(!N.source._source.hierarchy){N.source._source.hierarchy={}}N._loading=false;at._hideLoadElement();N._renderrows();N._updateScrollbars();N._arrange()};N._loading=true;this.virtualModeCreateRecords(null,an);this._showLoadElement()}}if(N.rendering){N.rendering()}var az=0;N.table[0].rows=new Array();var aJ=N.toTP(\"jqx-cell\")+\" \"+N.toTP(\"jqx-widget-content\")+\" \"+N.toTP(\"jqx-item\");if(N.rtl){aJ+=\" \"+N.toTP(\"jqx-cell-rtl\")}var b=N.columns.records.length;var P=a.jqx.browser.msie&&a.jqx.browser.version<8;if(P){N.host.attr(\"hideFocus\",\"true\")}var v=new Array();var aG=function(s,w){for(var aK=0;aK<s.length;aK++){var c=s[aK];if(!c){continue}var j=!N.rowinfo[c.uid]?c.expanded:N.rowinfo[c.uid].expanded;if(N.dataview.filters.length==0){c._visible=true}if(c._visible!==false){if(j||c[J.leaf]){w.push(c);if(c.records&&c.records.length>0){var aL=aG(c.records,new Array());for(var x=0;x<aL.length;x++){w.push(aL[x])}}}else{w.push(c)}}}return w};var ap=N.source.hierarchy.length===0?N.source.records:N.source.hierarchy;ap=N.dataview.evaluate(ap);N.dataViewRecords=ap;if(this.showSubAggregates){var p=function(s,c){if(s!=0){if(c.length>0){if(c[c.length-1]){if(!c[c.length-1].aggregate){c.push({_visible:true,level:s,siblings:c,aggregate:true,leaf:true})}}else{if(a.jqx.browser.msie&&a.jqx.browser.version<9){if(c[c.length-2]){if(!c[c.length-2].aggregate){c.push({_visible:true,level:s,siblings:c,aggregate:true,leaf:true})}}}}}}for(var j=0;j<c.length;j++){if(c[j]&&c[j].records){p(s+1,c[j].records)}}};p(0,ap)}var aq=function(s){var w=0;var i=new Array();for(var c=0;c<s.length;c++){var j=s[c];if(j[J.level]==0){w++}if(w>N.dataview.pagesize*N.dataview.pagenum&&w<=N.dataview.pagesize*N.dataview.pagenum+N.dataview.pagesize){i.push(j)}if(w>N.dataview.pagesize*N.dataview.pagenum+N.dataview.pagesize){break}}return i};if(N.source.hierarchy.length===0){if(N.dataview.pagesize==\"all\"||!N.pageable||N.serverProcessing){var al=ap;if(N.pageable&&N.serverProcessing&&ap.length>N.dataview.pagesize){var al=ap.slice(N.dataview.pagesize*N.dataview.pagenum,N.dataview.pagesize*N.dataview.pagenum+N.dataview.pagesize)}}else{var al=ap.slice(N.dataview.pagesize*N.dataview.pagenum,N.dataview.pagesize*N.dataview.pagenum+N.dataview.pagesize)}var v=al}else{var ap=aG.call(N,ap,new Array());if(N.dataview.pagesize==\"all\"||!N.pageable){var al=ap}else{var al=ap.slice(N.dataview.pagesize*N.dataview.pagenum,N.dataview.pagesize*N.dataview.pagenum+N.dataview.pagesize);if(this.pageSizeMode==\"root\"){al=aq(ap)}}var v=al;var I=N.dataview.pagenum;N.updatepagerdetails();if(N.dataview.pagenum!=I){if(N.dataview.pagesize==\"all\"||!N.pageable){var al=ap}else{var al=ap.slice(N.dataview.pagesize*N.dataview.pagenum,N.dataview.pagesize*N.dataview.pagenum+N.dataview.pagesize);if(this.pageSizeMode==\"root\"){al=aq(ap)}}var v=al}}N.renderedRecords=v;var D=v.length;var aH=N.tableZIndex;var k=0;var ar=0;if(P){for(var Q=0;Q<b;Q++){var U=N.columns.records[Q];var ax=U.width;if(ax<U.minwidth){ax=U.minwidth}if(ax>U.maxwidth){ax=U.maxwidth}var aw=a('<table><tr><td role=\"gridcell\" style=\"max-width: '+ax+\"px; width:\"+ax+'px;\" class=\"'+aJ+'\"></td></tr></table>');a(document.body).append(aw);var ah=aw.find(\"td\");k=1+parseInt(ah.css(\"padding-left\"))+parseInt(ah.css(\"padding-right\"));aw.remove();break}}var B=N.rtl?\" \"+N.toTP(\"jqx-grid-table-rtl\"):\"\";var y=\"<table cellspacing='0' class='\"+N.toTP(\"jqx-grid-table\")+B+\"' id='table\"+N.element.id+\"'><colgroup>\";var X=\"<table cellspacing='0' class='\"+N.toTP(\"jqx-grid-table\")+B+\"' id='pinnedtable\"+N.element.id+\"'><colgroup>\";var ac=null;for(var Q=0;Q<b;Q++){var U=N.columns.records[Q];if(U.hidden){continue}ac=U;var ax=U.width;if(ax<U.minwidth){ax=U.minwidth}if(ax>U.maxwidth){ax=U.maxwidth}ax-=k;if(ax<0){ax=0}if(P){var H=ax;if(Q==0){H++}X+=\"<col style='max-width: \"+ax+\"px; width: \"+H+\"px;'>\";y+=\"<col style='max-width: \"+ax+\"px; width: \"+H+\"px;'>\"}else{X+=\"<col style='max-width: \"+ax+\"px; width: \"+ax+\"px;'>\";y+=\"<col style='max-width: \"+ax+\"px; width: \"+ax+\"px;'>\"}ar+=ax}y+=\"</colgroup>\";X+=\"</colgroup>\";N._hiddencolumns=false;var r=false;if(D===0){var n='<tr role=\"row\">';var q=N.host.height();if(N.pageable){q-=N.pagerHeight;if(N.pagerPosition===\"both\"){q-=N.pagerHeight}}q-=N.columnsHeight;if(N.filterable){var aC=N.filter.find(\".filterrow\");var A=N.filter.find(\".filterrow-hidden\");var E=1;if(A.length>0){E=0}q-=N.filterHeight+N.filterHeight*aC.length*E}if(N.showstatusbar){q-=N.statusBarHeight}if(N.showAggregates){q-=N.aggregatesHeight}if(q<25){q=25}if(N.hScrollBar[0].style.visibility!=\"hidden\"){q-=N.hScrollBar.outerHeight()}if(N.height===\"auto\"||N.height===null||N.autoheight){q=100}var ax=N.host.width()+2;var aw='<td colspan=\"'+N.columns.records.length+'\" role=\"gridcell\" style=\"border-right-color: transparent; min-height: '+q+\"px; height: \"+q+\"px;  min-width:\"+ar+\"px; max-width:\"+ar+\"px; width:\"+ar+\"px;\";var aJ=N.toTP(\"jqx-cell\")+\" \"+N.toTP(\"jqx-grid-cell\")+\" \"+N.toTP(\"jqx-item\");aJ+=\" \"+N.toTP(\"jqx-center-align\");aw+='\" class=\"'+aJ+'\">';if(!N._loading){aw+=N.gridlocalization.emptydatastring}aw+=\"</td>\";n+=aw;y+=n;X+=n;N.table[0].style.width=ar+2+\"px\";az=ar}var m=N.source._source.hierarchy&&N.source._source.hierarchy.groupingDataFields?N.source._source.hierarchy.groupingDataFields.length:0;for(var R=0;R<v.length;R++){var au=v[R];var ad=au.uid;if(m>0){if(au[J.level]<m){ad=au.uid}}if(au.uid===undefined){au.uid=N.dataview.generatekey()}var n='<tr data-key=\"'+ad+'\" role=\"row\" id=\"row'+R+N.element.id+'\">';var ao='<tr data-key=\"'+ad+'\" role=\"row\" id=\"row'+R+N.element.id+'\">';if(au.aggregate){var n='<tr data-role=\"summaryrow\" role=\"row\" id=\"row'+R+N.element.id+'\">';var ao='<tr data-role=\"summaryrow\" role=\"row\" id=\"row'+R+N.element.id+'\">'}var V=0;if(!N.rowinfo[ad]){var z=au[J.checked];if(z===undefined){z=false}N.rowinfo[ad]={selected:au[J.selected],checked:z,icon:au[J.icon],aggregate:au.aggregate,row:au,leaf:au[J.leaf],expanded:au[J.expanded]}}else{if(N.rowinfo[ad].checked===undefined){N.rowinfo[ad].checked=au[J.checked]}if(N.rowinfo[ad].icon===undefined){N.rowinfo[ad].icon=au[J.icon]}if(N.rowinfo[ad].aggregate===undefined){N.rowinfo[ad].aggregate=au[J.aggregate]}if(N.rowinfo[ad].row===undefined){N.rowinfo[ad].row=au}if(N.rowinfo[ad].leaf===undefined){N.rowinfo[ad].leaf=au[J.leaf]}if(N.rowinfo[ad].expanded===undefined){N.rowinfo[ad].expanded=au[J.expanded]}}var h=N.rowinfo[ad];h.row=au;if(au.originalRecord){h.originalRecord=au.originalRecord}var o=0;for(var Q=0;Q<b;Q++){var M=N.columns.records[Q];if(M.pinned||(N.rtl&&N.columns.records[b-1].pinned)){r=true}var ax=M.width;if(ax<M.minwidth){ax=M.minwidth}if(ax>M.maxwidth){ax=M.maxwidth}ax-=k;if(ax<0){ax=0}var aJ=N.toTP(\"jqx-cell\")+\" \"+N.toTP(\"jqx-grid-cell\")+\" \"+N.toTP(\"jqx-item\");if(M.pinned){aJ+=\" \"+N.toTP(\"jqx-grid-cell-pinned\")}if(N.sortcolumn===M.displayfield){aJ+=\" \"+N.toTP(\"jqx-grid-cell-sort\")}if(N.altRows&&R%2!=0){aJ+=\" \"+N.toTP(\"jqx-grid-cell-alt\")}if(N.rtl){aJ+=\" \"+N.toTP(\"jqx-cell-rtl\")}var S=\"\";if(m>0&&!P&&!au.aggregate){if(au[J.level]<m){S+=' colspan=\"'+b+'\"';var H=0;for(var K=0;K<b;K++){var T=N.columns.records[K];if(T.hidden){continue}var aa=T.width;if(aa<T.minwidth){ax=T.minwidth}if(aa>T.maxwidth){ax=T.maxwidth}aa-=k;if(aa<0){aa=0}H+=aa}ax=H}}var aw='<td role=\"gridcell\"'+S+' style=\"max-width:'+ax+\"px; width:\"+ax+\"px;\";var ak='<td role=\"gridcell\"'+S+' style=\"pointer-events: none; visibility: hidden; border-color: transparent; max-width:'+ax+\"px; width:\"+ax+\"px;\";if(Q==b-1&&b==1){aw+=\"border-right-color: transparent;\";ak+=\"border-right-color: transparent;\"}if(m>0&&au[J.level]<m&&!au.aggregate){if(N.rtl){aJ+=\" \"+N.toTP(\"jqx-right-align\")}}else{if(M.cellsalign!=\"left\"){if(M.cellsalign===\"right\"){aJ+=\" \"+N.toTP(\"jqx-right-align\")}else{aJ+=\" \"+N.toTP(\"jqx-center-align\")}}}if(h){if(h.selected){if(N.editKey!==ad){if(N.selectionMode!==\"none\"){aJ+=\" \"+N.toTP(\"jqx-grid-cell-selected\");aJ+=\" \"+N.toTP(\"jqx-fill-state-pressed\")}}}if(h.locked){aJ+=\" \"+N.toTP(\"jqx-grid-cell-locked\")}if(h.aggregate){aJ+=\" \"+N.toTP(\"jqx-grid-cell-pinned\")}}if(!(M.hidden)){if(o==0&&!N.rtl){aw+=\"border-left-width: 0px;\";ak+=\"border-left-width: 0px;\"}else{aw+=\"border-right-width: 0px;\";ak+=\"border-right-width: 0px;\"}o++;V+=k+ax}else{aw+=\"display: none;\";ak+=\"display: none;\";N._hiddencolumns=true}if(M.pinned){aw+=\"pointer-events: auto;\";ak+=\"pointer-events: auto;\"}var u=\"\";if((N.source.hierarchy.length==0||(!au.records||(au.records&&au.records.length===0)))&&!this.virtualModeCreateRecords){h.leaf=true}if(au.records&&au.records.length>0){h.leaf=false}if(N.dataview.filters.length>0){if(au.records&&au.records.length>0){var ab=false;for(var L=0;L<au.records.length;L++){if(au.records[L]._visible!==false&&au.records[L].aggregate==undefined){ab=true;break}}if(!ab){h.leaf=true}else{h.leaf=false}}}if(h&&!h.leaf){if(h.expanded){u+=N.toTP(\"jqx-tree-grid-expand-button\")+\" \";if(!N.rtl){u+=N.toTP(\"jqx-grid-group-expand\")}else{u+=N.toTP(\"jqx-grid-group-expand-rtl\")}u+=\" \"+N.toTP(\"jqx-icon-arrow-down\")}else{u+=N.toTP(\"jqx-tree-grid-collapse-button\")+\" \";if(!N.rtl){u+=N.toTP(\"jqx-grid-group-collapse\");u+=\" \"+N.toTP(\"jqx-icon-arrow-right\")}else{u+=N.toTP(\"jqx-grid-group-collapse-rtl\");u+=\" \"+N.toTP(\"jqx-icon-arrow-left\")}}}if(!N.autoRowHeight||o===1||(N.autoRowHeight&&!M.autoCellHeight)){aJ+=\" \"+N.toTP(\"jqx-grid-cell-nowrap\")}var W=N._getcellvalue(M,h.row);if(m>0&&!au.aggregate){if(au[J.level]<m){W=au.label}}if(M.cellsFormat!=\"\"){if(a.jqx.dataFormat){if(a.jqx.dataFormat.isDate(W)){W=a.jqx.dataFormat.formatdate(W,M.cellsFormat,N.gridlocalization)}else{if(a.jqx.dataFormat.isNumber(W)||(!isNaN(parseFloat(W))&&isFinite(W))){W=a.jqx.dataFormat.formatnumber(W,M.cellsFormat,N.gridlocalization)}}}}if(M.cellclassname!=\"\"&&M.cellclassname){if(typeof M.cellclassname==\"string\"){aJ+=\" \"+M.cellclassname}else{var aI=M.cellclassname(R,M.datafield,N._getcellvalue(M,h.row),h.row,W);if(aI){aJ+=\" \"+aI}}}if(M.cellsRenderer!=\"\"&&M.cellsRenderer){var C=M.cellsRenderer(ad,M.datafield,N._getcellvalue(M,h.row),h.row,W);if(C!==undefined){W=C}}if(h.aggregate){if(M.aggregates){var av=au.siblings.slice(0,au.siblings.length-1);var Y=N._calculateaggregate(M,null,true,av);au[M.displayfield]=\"\";if(Y){if(M.aggregatesRenderer){if(Y){var G=M.aggregatesRenderer(Y[M.datafield],M,null,N.getcolumnaggregateddata(M.datafield,M.aggregates,false,av),\"subAggregates\");W=G;var O=Object.keys(Y[M.datafield]);au[M.displayfield]+=name+\":\"+Y[M.datafield][O[0]]+\"\\n\"}}else{W=\"\";au[M.displayfield]=\"\";a.each(Y,function(){var i=this;for(var s in i){var c=s;c=N._getaggregatename(c);var j='<div style=\"position: relative; margin: 0px; overflow: hidden;\">'+c+\":\"+i[s]+\"</div>\";W+=j;au[M.displayfield]+=c+\":\"+i[s]+\"\\n\"}})}}else{W=\"\"}}}if((o===1&&!N.rtl)||(M==ac&&N.rtl)||(m>0&&au[J.level]<m)){var af=\"\";var d=N.toThemeProperty(\"jqx-tree-grid-indent\");var Z=h.leaf?1:0;for(var F=0;F<au[J.level]+Z;F++){af+=\"<span class='\"+d+\"'></span>\"}var am=\"<span class='\"+u+\"'></span>\";var aA=\"\";var e=\"\";if(this.checkboxes&&!au.aggregate){var aD=N.toThemeProperty(\"jqx-tree-grid-checkbox\")+\" \"+d+\" \"+N.toThemeProperty(\"jqx-checkbox-default\")+\" \"+N.toThemeProperty(\"jqx-fill-state-normal\")+\" \"+N.toThemeProperty(\"jqx-rc-all\");var g=true;if(a.isFunction(this.checkboxes)){g=this.checkboxes(ad,au);if(g==undefined){g=false}}if(g){if(h){var ay=h.checked;if(ay===undefined){ay=false}if(this.hierarchicalCheckboxes==false&&ay===null){ay=false}if(ay){aA+=\"<span checked='true' class='\"+aD+\"'><div class='\"+N.toThemeProperty(\"jqx-tree-grid-checkbox-tick\")+\" \"+N.toThemeProperty(\"jqx-checkbox-check-checked\")+\"'></div></span>\"}else{if(ay===false){aA+=\"<span checked='undefined' class='\"+aD+\"'></span>\"}else{aA+=\"<span class='\"+aD+\"'><div class='\"+N.toThemeProperty(\"jqx-tree-grid-checkbox-tick\")+\" \"+N.toThemeProperty(\"jqx-checkbox-check-indeterminate\")+\"'></div></span>\"}}}else{aA+=\"<span class='\"+aD+\"'></span>\"}}}if(this.icons&&!au.aggregate){var ag=N.toThemeProperty(\"jqx-tree-grid-icon\")+\" \"+d;if(N.rtl){var ag=N.toThemeProperty(\"jqx-tree-grid-icon\")+\" \"+N.toThemeProperty(\"jqx-tree-grid-icon-rtl\")+\" \"+d}var aB=N.toThemeProperty(\"jqx-tree-grid-icon-size\")+\" \"+d;var f=h.icon;if(a.isFunction(this.icons)){h.icon=this.icons(ad,au);if(h.icon){f=true}}if(f){if(h.icon){e+=\"<span class='\"+ag+\"'><img class='\"+aB+\"' src='\"+h.icon+\"'/></span>\"}else{e+=\"<span class='\"+ag+\"'></span>\"}}}var ae=N.autoRowHeight&&o===1&&M.autoCellHeight?\" \"+N.toTP(\"jqx-grid-cell-wrap\"):\"\";var aj=af+am+aA+e+\"<span class='\"+N.toThemeProperty(\"jqx-tree-grid-title\")+ae+\"'>\"+W+\"</span>\";if(!N.rtl){W=aj}else{W=\"<span class='\"+N.toThemeProperty(\"jqx-tree-grid-title\")+ae+\"'>\"+W+\"</span>\"+e+aA+am+af}}if(m>0&&P&&Q>=m){if(au[J.level]<m){aw+=\"padding-left: 5px; border-left-width: 0px;\";ak+=\"padding-left: 5px; border-left-width: 0px;\";W=\"<span style='visibility: hidden;'>-</span>\"}}aw+='\" class=\"'+aJ+'\">';aw+=W;aw+=\"</td>\";ak+='\" class=\"'+aJ+'\">';ak+=W;ak+=\"</td>\";if(!M.pinned){n+=aw;if(r){ao+=ak}}else{ao+=aw;n+=aw}if(m>0&&!P){if(au[J.level]<m&&!au.aggregate){break}}}if(az==0){N.table[0].style.width=V+2+\"px\";az=V}n+=\"</tr>\";ao+=\"</tr>\";y+=n;X+=ao;if(N.rowDetails&&!au.aggregate&&this.rowDetailsRenderer){var l='<tr data-role=\"row-details\"><td valign=\"top\" align=\"left\" style=\"pointer-events: auto; max-width:'+ax+\"px; width:\"+ax+'px; overflow: hidden; border-left: none; border-right: none;\" colspan=\"'+N.columns.records.length+'\" role=\"gridcell\"';var aJ=N.toTP(\"jqx-cell\")+\" \"+N.toTP(\"jqx-grid-cell\")+\" \"+N.toTP(\"jqx-item\");aJ+=\" \"+N.toTP(\"jqx-details\");aJ+=\" \"+N.toTP(\"jqx-reset\");var ai=this.rowDetailsRenderer(ad,au);if(ai){l+='\" class=\"'+aJ+'\"><div style=\"pointer-events: auto; overflow: hidden;\"><div data-role=\"details\">'+ai+\"</div></div></td></tr>\";y+=l;X+=l}}}y+=\"</table>\";X+=\"</table>\";if(r){if(N.WinJS){MSApp.execUnsafeLocalFunction(function(){N.table.html(X+y)})}else{N.table[0].innerHTML=X+y}var aE=N.table.find(\"#table\"+N.element.id);var aF=N.table.find(\"#pinnedtable\"+N.element.id);aF.css(\"float\",\"left\");aF.css(\"pointer-events\",\"none\");aE.css(\"float\",\"left\");aF[0].style.position=\"absolute\";aE[0].style.position=\"relative\";aE[0].style.zIndex=aH-10;aF[0].style.zIndex=aH+10;N._table=aE;N._table[0].style.left=\"0px\";N._pinnedTable=aF;if(P){aF[0].style.left=\"0px\"}N._table[0].style.width=az+\"px\";N._pinnedTable[0].style.width=az+\"px\";if(N.rtl&&N._haspinned){N._pinnedTable[0].style.left=3-az+parseInt(N.element.style.width)+\"px\"}}else{if(N.WinJS){MSApp.execUnsafeLocalFunction(function(){N.table.html(y)})}else{N.table[0].innerHTML=y}var K=N.table.find(\"#table\"+N.element.id);N._table=K;if(a.jqx.browser.msie&&a.jqx.browser.version<10){N._table[0].style.width=az+\"px\"}if(D===0){N._table[0].style.width=(2+az)+\"px\"}}if(D===0){N._table[0].style.tableLayout=\"auto\";if(N._pinnedTable){N._pinnedTable[0].style.tableLayout=\"auto\"}}if(N.showAggregates){N._updatecolumnsaggregates()}if(N._loading&&D==0){N._arrange();this._showLoadElement()}if(N.rendered){N.rendered()}},propertyChangedHandler:function(d,m,c,l){if(d.isInitialized==undefined||d.isInitialized==false){return}var g=d.base;if(m==\"pageSizeMode\"||m==\"hierarchicalCheckboxes\"){d._renderrows()}else{if(m==\"filterable\"){g._render()}else{if(m===\"height\"){g.host.height(d.height);g.host.width(d.width);g._updatesize(false,true)}else{if(m===\"width\"){g.host.height(d.height);g.host.width(d.width);g._updatesize(true,false)}else{if(m===\"source\"){g.updateBoundData()}else{if(m===\"columns\"||m===\"columnGroups\"){g._columns=null;g._render()}else{if(m===\"rtl\"){g.content.css(\"left\",\"\");d.columns=d._columns;g.vScrollBar.jqxScrollBar({rtl:l});g.hScrollBar.jqxScrollBar({rtl:l});g._render()}else{if(m===\"pagerMode\"){d.pagerMode=l;g._initpager()}else{if(m==\"pageSizeOptions\"){g._initpager();var k=false;for(var f=0;f<l.length;f++){if(parseInt(l[f])==d.pageSize){k=true;break}}if(!k){a.jqx.set(d,[{pageSize:l[0]}])}}else{if(m==\"pageSize\"){var h=g.dataview.pagenum*g.dataview.pagesize;g.dataview.pagesize=g.pageSize;var j=Math.floor(h/g.dataview.pagesize);if(j!==g.dataview.pagenum||parseInt(l)!==parseInt(c)){d._raiseEvent(\"pageSizeChanged\",{pagenum:l,oldpageSize:c,pageSize:g.dataview.pagesize});var n=d.goToPage(j);if(!n){g.refresh()}}}else{if(m===\"pagerPosition\"){g.refresh()}else{if(m===\"selectionMode\"){g.selectionMode=l.toLowerCase()}else{if(m==\"touchmode\"){g.touchDevice=null;g._removeHandlers();g.touchDevice=null;g.vScrollBar.jqxScrollBar({touchMode:l});g.hScrollBar.jqxScrollBar({touchMode:l});g._updateTouchScrolling();g._arrange();g._updatecolumnwidths();g._renderrows();g._addHandlers()}else{if(m==\"enableHover\"){return}else{if(m==\"disabled\"){if(l){g.base.host.addClass(this.toThemeProperty(\"jqx-fill-state-disabled\"))}else{g.base.host.removeClass(this.toThemeProperty(\"jqx-fill-state-disabled\"))}if(g.pageable){if(g.pagernexttop){g.pagernexttop.jqxButton({disabled:l});g.pagerprevioustop.jqxButton({disabled:l});g.pagernextbottom.jqxButton({disabled:l});g.pagerpreviousbottom.jqxButton({disabled:l});g.pagerfirsttop.jqxButton({disabled:l});g.pagerfirstbottom.jqxButton({disabled:l});g.pagerlasttop.jqxButton({disabled:l});g.pagerlastbottom.jqxButton({disabled:l});if(g.pagershowrowscombotop.jqxDropDownList){if(g.pagerMode==\"advanced\"){g.pagershowrowscombotop.jqxDropDownList({disabled:false});g.pagershowrowscombobottom.jqxDropDownList({disabled:false})}}}g.base.host.find(\".jqx-grid-pager-number\").css(\"cursor\",l?\"default\":\"pointer\")}g.base.host.find(\".jqx-grid-group-collapse\").css(\"cursor\",l?\"default\":\"pointer\");g.base.host.find(\".jqx-grid-group-expand\").css(\"cursor\",l?\"default\":\"pointer\")}else{if(m==\"columnsHeight\"){g._render()}else{if(m==\"theme\"){var e=l;g.theme=l;a.jqx.utilities.setTheme(c,l,g.host);g.vScrollBar.jqxScrollBar({theme:e});g.hScrollBar.jqxScrollBar({theme:e});if(g.pageable&&g.pagernexttop){g.pagernexttop.jqxButton({theme:e});g.pagerprevioustop.jqxButton({theme:e});g.pagernextbottom.jqxButton({theme:e});g.pagerpreviousbottom.jqxButton({theme:e});g.pagerfirsttop.jqxButton({theme:e});g.pagerfirstbottom.jqxButton({theme:e});g.pagerlasttop.jqxButton({theme:e});g.pagerlastbottom.jqxButton({theme:e});if(g.pagershowrowscombotop.jqxDropDownList){if(g.pagerMode==\"advanced\"){g.pagershowrowscombotop.jqxDropDownList({theme:e});g.pagershowrowscombobottom.jqxDropDownList({theme:e})}}}if(g.filterable){var b=a(\".filterconditions\");if(b.length>0){b.jqxDropDownList({theme:e})}if(g.filtercolumnsList){g.filtercolumnsList.jqxDropDownList({theme:e})}}g.refresh()}else{g.refresh()}}}}}}}}}}}}}}}}}},checkRow:function(c,d,b){var e=this.base;var g=e._names();if(e._loading){return}var f=e.rowinfo[c];if(f){f.checked=true;f.row[g.checked]=true;if(f.originalRecord){f.originalRecord[g.checked]=true}if(b==undefined&&this.hierarchicalCheckboxes){this.checkRows(f.row,f.row)}if(d!==false){e._renderrows()}e._raiseEvent(\"rowCheck\",{key:c,row:f.row})}else{var h=this.getRow(c);if(h){e.rowinfo[c]={row:h,checked:true};e.rowinfo[c].row[g.checked]=true;if(h.originalRecord){e.rowinfo[c].originalRecord=h.originalRecord}e._raiseEvent(\"rowCheck\",{key:c,row:h});if(b==undefined&&this.hierarchicalCheckboxes){this.checkRows(h,h)}if(d!==false){e._renderrows()}}}},checkRows:function(d,n){var e=this.base;var j=this;var i=e._names();var l=function(o){var p=new Array();var q=function(s){for(var r=0;r<s.length;r++){p.push(s[r]);if(!s[r]){continue}if(s[r].records){q(s[r].records)}}};if(o.records){q(o.records)}return p};if(d!=null){var f=0;var c=false;var g=0;var b=function(o){for(var p=0;p<o.length;p++){if(!o[p]){continue}var q=o[p][i.checked];if(q===undefined){q=false}if(q!=false){if(o[p][i.checked]==null){c=true}if(o[p].records){b(o[p].records)}f++}g++}};if(d.records){b(d.records)}if(d!=n){if(f==g){this.checkRow(d.uid,false,\"tree\")}else{if(f>0){this.indeterminateRow(d.uid,false,\"tree\")}else{this.uncheckRow(d.uid,false,\"tree\")}}}else{var k=n[i.checked];var h=l(n);a.each(h,function(){if(k===true){j.checkRow(this.uid,false,\"tree\")}else{if(k===false){j.uncheckRow(this.uid,false,\"tree\")}else{j.indeterminateRow(this.uid,false,\"tree\")}}})}var m=d[i.parent]?d[i.parent]:null;this.checkRows(m,n)}else{var k=n[i.checked];var h=l(n);a.each(h,function(){if(k===true){j.checkRow(this.uid,false,\"tree\")}else{if(k===false){j.uncheckRow(this.uid,false,\"tree\")}else{j.indeterminateRow(this.uid,false,\"tree\")}}})}},indeterminateRow:function(c,d,b){var f=this.base;var h=f._names();if(f._loading){return}var e=this;var g=f.rowinfo[c];if(g){g.checked=null;g.row[h.checked]=null;if(g.originalRecord){g.originalRecord[h.checked]=null}if(b==undefined&&this.hierarchicalCheckboxes){this.checkRows(g.row,g.row)}if(d!==false){f._renderrows()}}else{var i=this.getRow(c);if(i){f.rowinfo[c]={row:i,checked:null};f.rowinfo[c].row[h.checked]=null;if(i.originalRecord){f.rowinfo[c].originalRecord=i.originalRecord}if(b==undefined&&this.hierarchicalCheckboxes){this.checkRows(i,i)}if(d!==false){f._renderrows()}}}},uncheckRow:function(c,d,b){var f=this.base;var h=f._names();if(f._loading){return}var e=this;var g=f.rowinfo[c];if(g){g.checked=false;g.row[h.checked]=false;if(g.originalRecord){g.originalRecord[h.checked]=false}if(b==undefined&&this.hierarchicalCheckboxes){this.checkRows(g.row,g.row)}if(d!==false){f._renderrows()}f._raiseEvent(\"rowUncheck\",{key:c,row:g.row})}else{var i=this.getRow(c);if(i){f.rowinfo[c]={row:i,checked:false};f.rowinfo[c].row[h.checked]=false;if(i.originalRecord){f.rowinfo[c].originalRecord=i.originalRecord}f._raiseEvent(\"rowUncheck\",{key:c,row:i});if(b==undefined&&this.hierarchicalCheckboxes){this.checkRows(i,i)}if(d!==false){f._renderrows()}}}},expandRows:function(c){var e=this;if(!c){return}if(e.virtualModeCreateRecords){a.each(c,function(){var f=this;var g=function(){e.base._loading=false;e.expandRows(f.records)};e.base._loading=false;e.expandRow(f.uid,g)})}else{for(var d=0;d<c.length;d++){var b=c[d];e.expandRow(b.uid);e.expandRows(b.records)}}},collapseRows:function(b){if(!b){return}for(var c=0;c<b.length;c++){this.collapseRow(b[c].uid);this.collapseRows(b[c].records)}},expandAll:function(){var b=this.base;b.beginUpdate();this.expandRows(this.getRows());b.endUpdate()},collapseAll:function(){var b=this.base;b.beginUpdate();this.collapseRows(this.getRows());b.endUpdate()},expandRow:function(h,j){var d=this.base;if(d._loading){return}var e=d._names();var f=this;var b=d.rowinfo[h];if(!b){var k=this.getRow(h);if(k){d.rowinfo[h]={row:k};if(k.originalRecord){d.rowinfo[h].originalRecord=k.originalRecord}b=d.rowinfo[h]}}if(b){if(b.expanded){b.row[e.expanded]=true;return}b.expanded=true;b.row[e.expanded]=true;if(b.originalRecord){b.originalRecord[e.expanded]=true}if(this.virtualModeCreateRecords&&!b.row._loadedOnDemand){var c=function(m){b.row._loadedOnDemand=true;if(m===false){d._loading=false;f._hideLoadElement();b.leaf=true;b.row[e.leaf]=true;d._renderrows();if(j){j()}return}for(var n=0;n<m.length;n++){m[n][e.level]=b.row[e.level]+1;m[n][e.parent]=b.row;if(d.rowsByKey[m[n].uid]){d._loading=false;f._hideLoadElement();b.leaf=true;b.row[e.leaf]=true;d._renderrows();if(j){j()}throw new Error(\"Please, check whether you Add Records with unique ID/Key. \")}d.rowsByKey[m[n].uid]=m[n];f.virtualModeRecordCreating(m[n])}if(!b.row.records){b.row.records=m}else{b.row.records=b.row.records.concat(m)}if((!m)||(m&&m.length==0)){b.leaf=true;b.row[e.leaf]=true}if(b.originalRecord){b.originalRecord.records=m;b.originalRecord[e.expanded]=true;if(m.length==0){b.originalRecord[e.leaf]=true}}d._loading=false;f._hideLoadElement();var l=d.vScrollBar.css(\"visibility\");d._renderrows();d._updateScrollbars();var o=l!=d.vScrollBar.css(\"visibility\");if(d.height===\"auto\"||d.height===null||d.autoheight||o){d._arrange()}d._renderhorizontalscroll();if(j){j()}};if(!b.row[e.leaf]){d._loading=true;this._showLoadElement();this.virtualModeCreateRecords(b.row,c);return}}if(!d.updating()){var g=d.vScrollBar.css(\"visibility\");d._renderrows();d._updateScrollbars();var i=g!=d.vScrollBar.css(\"visibility\");if(d.height===\"auto\"||d.height===null||d.autoheight||i){d._arrange()}d._renderhorizontalscroll();d._raiseEvent(\"rowExpand\",{row:b.row,key:h})}}},collapseRow:function(c){var d=this.base;var g=d._names();if(d._loading){return}var f=d.rowinfo[c];if(!f){var h=this.getRow(c);if(h){d.rowinfo[c]={row:h};if(h.originalRecord){d.rowinfo[c].originalRecord=h.originalRecord}f=d.rowinfo[c]}}if(f){if(!f.expanded){f.row[g.expanded]=false;return}f.expanded=false;f.row[g.expanded]=false;if(f.originalRecord){f.originalRecord[g.expanded]=false}if(!d.updating()){var b=d.vScrollBar.css(\"visibility\");d._renderrows();d._updateScrollbars();var e=b!=d.vScrollBar.css(\"visibility\");if(d.height===\"auto\"||d.height===null||d.autoheight||e){d._arrange()}d._renderhorizontalscroll();d._raiseEvent(\"rowCollapse\",{row:f.row,key:c})}}}})})(jqxBaseFramework);\r\n\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { jqxGridComponent } from 'jqwidgets-ng/jqxgrid';\r\n// import { jqxGridComponent } from 'jqwidgets-scripts/jqwidgets-ts/angular_jqxgrid';\r\nimport { jqxButtonModule } from 'jqwidgets-ng/jqxbuttons';\r\nimport { TreeViewModule } from '@syncfusion/ej2-angular-navigations';\r\nimport { jqxTreeGridComponent } from 'jqwidgets-ng/jqxtreegrid';\r\n\r\n\r\n@NgModule({\r\n  declarations: [jqxGridComponent,jqxTreeGridComponent],\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  exports: [\r\n    jqxTreeGridComponent,\r\n    jqxGridComponent,\r\n    jqxButtonModule,\r\n    TreeViewModule\r\n  ]\r\n})\r\nexport class SharedModModule { }\r\n"],"sourceRoot":""}